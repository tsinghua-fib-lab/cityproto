syntax = "proto3";

package city.person.v2;

import "city/person/v2/carbon.proto";
import "city/person/v2/motion.proto";
import "city/person/v2/pollution.proto";
import "city/routing/v2/routing.proto";

// 变道相关的信息
// lane change related information
message LC {
  // 影子车道ID（变道前的车道）
  // shadow lane id (lane before lane change)
  int32 shadow_lane_id = 1;
  // 投影到影子车道的坐标
  // s coordinate projected to shadow lane
  double shadow_s = 2;
  // 变道过程车头相对于前进方向的偏转角（弧度，总是为正，0代表不转向）
  // deviation angle of the vehicle head relative to the forward direction during lane change (radians, always positive, 0 means no steering)
  double angle = 3;
  // 已完成的变道比例
  // completed ratio of lane change
  double completed_ratio = 4;
}

// 车辆控制信息
// vehicle control information
message VehicleAction {
  // 车辆编号
  // vehicle id
  int32 id = 4;
  // 本轮更新中设定的加速度
  // acceleration set in this step
  double acc = 1;
  // 变道目标（可选，不设置代表不变道或保持变道状态）
  // lane change target (optional, not set means no lane change)
  optional int32 lc_target_id = 2;
  // 变道过程的转向角度
  // steering angle during lane change
  double angle = 3;
}

// 修改车辆路由信息
// vehicle routing information modification
message VehicleRouteAction {
  // 车辆编号
  // vehicle id
  int32 id = 1;
  // 新的路径规划结果
  // new routing result
  city.routing.v2.Journey journey = 2;
}

message VehicleRuntime {
  // 基本运行时信息
  // basic runtime information
  PersonMotion base = 1;
  // 变道信息
  // lane change information
  optional LC lc = 4;
  // 本轮车辆行为（获取车辆环境信息时不返回）
  // vehicle action in the step (not returned when getting vehicle environment information)
  optional VehicleAction action = 5;
  // 走过的里程
  // running distance
  double running_distance = 6;
  // 走错路次数
  // number of going astray
  int32 num_going_astray = 7;
  // 出发时刻
  // departure time
  double departure_time = 8;
  // 预计到达时刻（导航返回的eta+出发时刻）
  // estimated arrival time (eta returned by routing + departure time)
  double eta = 9;
  // 自由流下的预计到达时刻
  // estimated arrival time under free flow
  double eta_free_flow = 10;
  // 碳排放信息
  // carbon emission information
  optional VehicleCarbon carbon = 11;
  // 排放统计
  // emission statistics
  optional EmissionStatistics emission_statistics = 12;
  // 污染统计
  // pollution statistics
  optional PollutionStatistics pollution_statistics = 13;
}

enum VehicleRelation {
  // 未指定
  // unspecified
  VEHICLE_RELATION_UNSPECIFIED = 0;
  // 当前车道前车
  // vehicle ahead in the current lane
  VEHICLE_RELATION_AHEAD = 1;
  // 当前车道后车
  // vehicle behind in the current lane
  VEHICLE_RELATION_BEHIND = 2;
  // 影子车道前车
  // vehicle ahead in the shadow lane
  VEHICLE_RELATION_SHADOW_AHEAD = 3;
  // 影子车道后车
  // vehicle behind in the shadow lane
  VEHICLE_RELATION_SHADOW_BEHIND = 4;
  // 当前车道左侧车道前车
  // vehicle ahead in the left lane
  VEHICLE_RELATION_LEFT_AHEAD = 5;
  // 当前车道右侧车道前车
  // vehicle ahead in the right lane
  VEHICLE_RELATION_RIGHT_AHEAD = 6;
  // 当前车道左侧车道后车
  // vehicle behind in the left lane
  VEHICLE_RELATION_LEFT_BEHIND = 7;
  // 当前车道右侧车道后车
  // vehicle behind in the right lane
  VEHICLE_RELATION_RIGHT_BEHIND = 8;
}

// 观测到的车辆
// observed vehicles
message ObservedVehicle {
  // 车辆编号
  // vehicle id
  int32 id = 1;
  // 当前的车辆运行时信息
  // current vehicle runtime information
  PersonMotion motion = 2;
  // 相对距离
  // relative distance
  double relative_distance = 3;
  // 关系枚举
  // relation enumeration
  VehicleRelation relation = 4;
}

// 交通灯的状态
// traffic light state
enum LightState {
  // 未指定
  // unspecified
  LIGHT_STATE_UNSPECIFIED = 0;
  // 红灯
  // red light
  LIGHT_STATE_RED = 1;
  // 绿灯
  // green light
  LIGHT_STATE_GREEN = 2;
  // 黄灯
  // yellow light
  LIGHT_STATE_YELLOW = 3;
}

// 观测到的车道
// observed lane
message ObservedLane {
  // Lane ID
  int32 id = 1;
  // 是否限行
  // whether restricted
  bool restriction = 2;
  // 交通灯状态
  // traffic light state
  LightState light_state = 3;
  // 交通灯剩余时间
  // remaining time of traffic light
  double light_remaining_time = 4;
}

message VehicleEnv {
  // 车辆编号
  // vehicle id
  int32 id = 1;
  // 当前的车辆运行时信息
  // current vehicle runtime information
  VehicleRuntime runtime = 2;
  // 当前的路径规划结果
  // journey: current routing result
  city.routing.v2.Journey journey = 3;
  // 观测到的车辆
  // observed vehicles
  repeated ObservedVehicle observed_vehicles = 4;
  // 观测到的车道状态
  // observed lane states
  repeated ObservedLane observed_lanes = 5;
}
