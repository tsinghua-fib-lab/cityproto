syntax = "proto3";

package city.map.v2;

import "city/map/v2/lane_state.proto";

service JunctionService {
  // 查询路口信息
  // Get junction information
  rpc GetJunction(GetJunctionRequest) returns (GetJunctionResponse);
}

// 查询路口信息请求
// Request for getting junction information
message GetJunctionRequest {
  // 指定查询的路口ID列表，为空代表查询所有路口
  // List of targeted junction IDs. If empty, it means querying all junctions.
  repeated int32 junction_ids = 1;
  // 是否要排除车道信息
  // Whether to exclude lane information
  bool exclude_lane = 2;
  // 是否要排除车道上的人的信息（仅在包含车道信息时有效）
  // Whether to exclude information about person in the lane (only valid when lane information is included)
  bool exclude_person = 3;
}

// 查询路口信息响应
// Response of getting junction information
message GetJunctionResponse {
  // 路口信息列表
  // List of junction information
  repeated JunctionState states = 1;
}

// 路口状态
// junction state
message JunctionState {
  // 路口ID
  // junction ID
  int32 id = 1;
  // 当前进入道路的车辆数
  // current entering road vehicle count
  int32 in_vehicle_cnt = 2;
  // 当前离开道路的车辆数
  // current leaving road vehicle count
  int32 out_vehicle_cnt = 3;
  // 当前道路车辆数
  // current road vehicle count
  int32 vehicle_cnt = 4;
  // 累计进入道路的车辆数
  // cumulative entering road vehicle count
  int32 cum_in_vehicle_cnt = 5;
  // 累计离开道路的车辆数
  // cumulative leaving road vehicle count
  int32 cum_out_vehicle_cnt = 6;
  // 车道情况
  // lane state
  repeated LaneState lanes = 7;
  // 前驱车道情况（用于查看驶入路口的车道情况）
  // predecessor lane state (used to view the lane situation of entering the junction)
  repeated LaneState predecessor_driving_lanes = 8;
  // 总排队车辆数
  // total queuing vehicle count
  int32 total_queuing_vehicle_cnt = 9;
  // 总排队时间
  // total queuing time
  double total_queuing_time = 10;
  // 当前平均排队时间
  // current average queuing time
  double avg_queuing_time = 11;
  // 最大排队长度（按车道）
  // max queuing vehicle count
  int32 max_queuing_vehicle_cnt = 12;
  // 是否有信号灯
  // whether there is a traffic light
  bool has_traffic_light = 13;
}
