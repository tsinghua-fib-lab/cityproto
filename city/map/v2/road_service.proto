syntax = "proto3";

package city.map.v2;

import "city/event/v1/event.proto";
import "city/map/v2/lane_state.proto";

service RoadService {
  // 查询道路信息
  // Get road information
  rpc GetRoad(GetRoadRequest) returns (GetRoadResponse);

  // 获取全局统计信息
  // Get global statistics
  rpc GetRoadGlobalStatistics(GetRoadGlobalStatisticsRequest) returns (GetRoadGlobalStatisticsResponse);

  rpc GetRuinInfo(GetRuinInfoRequest) returns (GetRuinInfoResponse);
  rpc GetEvents(GetEventsRequest) returns (GetEventsResponse);
}

// 查询道路信息请求
// Request for getting road information
message GetRoadRequest {
  // 指定查询的道路ID列表，为空代表查询所有道路
  // List of targeted road IDs. If empty, it means querying all roads.
  repeated int32 road_ids = 1;
  // 是否要排除车道信息
  // Whether to exclude lane information
  bool exclude_lane = 2;
  // 是否要排除车道上的人的信息（仅在包含车道信息时有效）
  // Whether to exclude information about person in the lane (only valid when lane information is included)
  bool exclude_person = 3;
}

// 查询道路信息响应
// Response of getting road information
message GetRoadResponse {
  // 道路信息列表
  // List of road information
  repeated RoadState states = 1;
}

// 获取Road全局统计信息请求
// Request for getting road global statistics
message GetRoadGlobalStatisticsRequest {}

// 获取Road全局统计信息响应
// Response of getting road global statistics
message GetRoadGlobalStatisticsResponse {
  // 平均道路拥堵指数
  // average congestion index
  double avg_road_congestion_index = 1;
}

message GetRuinInfoRequest {}

message RuinInfo {
  int32 num = 1; // 损坏数量。Ruined number
  double ratio = 2; // 损坏占比。Ruined ratio
}

message GetRuinInfoResponse {
  // 三级损伤信息
  // Three-level ruin information
  RuinInfo one = 1;
  RuinInfo two = 2;
  RuinInfo three = 3;
}

message GetEventsRequest {}

message GetEventsResponse {
  city.event.v1.Events events = 1;
}

// 道路拥堵情况
// road congestion level
enum RoadLevel {
  // 未指定
  // unspecified
  ROAD_LEVEL_UNSPECIFIED = 0;
  // 畅通
  // clear
  ROAD_LEVEL_CLEAR = 1;
  // 轻度拥堵
  // light load
  ROAD_LEVEL_LIGHT_LOAD = 2;
  // 中度拥堵
  // medium load
  ROAD_LEVEL_MEDIUM_LOAD = 3;
  // 重度拥堵
  // heavy load
  ROAD_LEVEL_HEAVY_LOAD = 4;
  // 极端拥堵
  // overload
  ROAD_LEVEL_OVERLOAD = 5;
  // 限行
  // restricted
  ROAD_LEVEL_RESTRICTED = 6;
}

// 道路中断原因
// road interruption reason
enum InterruptionReason {
  INTERRUPTION_REASON_UNSPECIFIED = 0;
  INTERRUPTION_REASON_RUINED = 1;
  INTERRUPTION_REASON_CASCADE = 2;
  INTERRUPTION_REASON_CONGESTION = 3;
}

// 道路状态
// road state
message RoadState {
  // 道路ID
  // road ID
  int32 id = 1;
  // 当前进入道路的车辆数
  // current entering road vehicle count
  int32 in_vehicle_cnt = 7;
  // 当前离开道路的车辆数
  // current leaving road vehicle count
  int32 out_vehicle_cnt = 8;
  // 当前道路车辆数
  // current road vehicle count
  int32 vehicle_cnt = 9;
  // 累计进入道路的车辆数
  // cumulative entering road vehicle count
  int32 cum_in_vehicle_cnt = 10;
  // 累计离开道路的车辆数
  // cumulative leaving road vehicle count
  int32 cum_out_vehicle_cnt = 11;
  // 道路平均速度（m/s）
  // road average speed (m/s)
  double avg_v = 4;
  // 当前平均通行时间（s）
  // current average travel time (s)
  double avg_travel_time = 12;
  // 道路拥堵情况
  // road congestion level
  RoadLevel level = 2;
  // 拥堵指数（最大限速/平均车速）
  // congestion index (max speed / average speed)
  double congestion_index = 13;
  // 道路中断原因
  // road interruption reason
  InterruptionReason reason = 3;
  // 车道情况
  // lane state
  repeated LaneState lanes = 5;
  // 道路最大限速
  // road max speed
  double max_v = 6;
}
