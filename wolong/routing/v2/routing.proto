syntax = "proto3";

package wolong.routing.v2;

// Journey用以描述采用一种特定交通方式从一点出发到达另一点的路径。
// 一般来说，多个Journey是一个Trip的“实现”。
// 例如：Trip(从清华乘地铁到天安门):
// Journey(步行到地铁站)->Journey(地铁)->Journey(步行到天安门)

enum RouteType {
  ROUTE_TYPE_UNSPECIFIED = 0;
  ROUTE_TYPE_DRIVING = 1;
  ROUTE_TYPE_WALKING = 2;
  ROUTE_TYPE_BY_BUS = 3;
}

enum JourneyType {
  JOURNEY_TYPE_UNSPECIFIED = 0;
  JOURNEY_TYPE_DRIVING = 1;
  JOURNEY_TYPE_WALKING = 2;
  JOURNEY_TYPE_BY_BUS = 3;
  // JOURNEY_TYPE_BY_TAXI = 4;
}

// 描述车辆如何从当前车道进入下一车道
enum NextLaneType {
  NEXT_LANE_TYPE_UNSPECIFIED = 0;
  // 直行进入下一车道（下一车道是当前车道的后继）
  NEXT_LANE_TYPE_FORWARD = 1;
  // 向左变道进入下一车道
  NEXT_LANE_TYPE_LEFT = 2;
  // 向右变道进入下一车道
  NEXT_LANE_TYPE_RIGHT = 3;
  // 当前车道是最后一个车道
  NEXT_LANE_TYPE_LAST = 4;
}

message DrivingRouteSegment {
  int32 lane_id = 1;
  NextLaneType next_lane_type = 2;
}

// 车道序列
// 约定：智能体必须通过所有车道的末端（除了最后一个车道以及要求变道的车道）
message DrivingJourneyBody { repeated DrivingRouteSegment route = 1; }

// 行人前进的方向与Lane的正方向（s增大的方向）的关系
enum MovingDirection {
  MOVING_DIRECTION_UNSPECIFIED = 0;
  // 与正方向同向
  MOVING_DIRECTION_FORWARD = 1;
  // 与正方向反向
  MOVING_DIRECTION_BACKWARD = 2;
}

message WalkingRouteSegment {
  int32 lane_id = 1;
  MovingDirection moving_direction = 2;
}

message WalkingJourneyBody { repeated WalkingRouteSegment route = 1; }

message BusJourneyBody {
  int32 line_id = 1;
  int32 start_station_id = 2;
  int32 end_station_id = 3;
}

message TaxiJourneyBody {
  // TODO(zhangjun): not implemented
}

// 路径规划结果的一部分，含且仅含采用一种交通出行方式的完整出行序列
message Journey {
  JourneyType type = 1;

  optional DrivingJourneyBody driving = 2;
  optional WalkingJourneyBody walking = 3;
  optional BusJourneyBody by_bus = 4;
  // optional TaxiJourneyBody by_taxi = 5;
}
