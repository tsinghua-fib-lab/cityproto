syntax = "proto3";

package wolong.map.v2;

import "wolong/geo/v2/geo.proto";

// 本文件描述地图的数据结构定义

// 折线，用于定义车道等的形状
message Polyline { repeated wolong.geo.v2.XYPosition nodes = 1; }

// 地图元信息
message Header {
  // 地图名称
  string name = 1;

  // 地图创建时间
  string date = 2;

  // 地图边界的xy坐标
  double north = 3;
  double south = 4;
  double east = 5;
  double west = 6;

  // PROJ.4 投影字符串，用以支持xy坐标到其他坐标系的转换
  string projection = 7;
}

enum LaneType {
  LANE_TYPE_UNSPECIFIED = 0;
  // 行车
  LANE_TYPE_DRIVING = 1;
  // 步行
  LANE_TYPE_WALKING = 2;
}

enum LaneTurn {
  LANE_TURN_UNSPECIFIED = 0;
  // 直行
  LANE_TURN_STRAIGHT = 1;
  // 左转
  LANE_TURN_LEFT = 2;
  // 右转
  LANE_TURN_RIGHT = 3;
  // 掉头
  LANE_TURN_AROUND = 4;
}

// 两个lane的冲突区域
message LaneOverlap {
  // 冲突点在本车道上的坐标
  wolong.geo.v2.LanePosition self = 1;
  // 冲突点在冲突车道上的坐标
  wolong.geo.v2.LanePosition other = 2;
  // 本车道是否有优先通行权
  bool self_first = 3;
}

enum LaneConnectionType {
  LANE_CONNECTION_TYPE_UNSPECIFIED = 0;
  // 连接处为道路开头
  LANE_CONNECTION_TYPE_HEAD = 1;
  // 连接处为道路结尾
  LANE_CONNECTION_TYPE_TAIL = 2;
}

message LaneConnection {
  // 所连接的车道Lane的ID
  int32 id = 1;
  LaneConnectionType type = 2;
}

message Lane {
  int32 id = 1;

  LaneType type = 2;
  LaneTurn turn = 3;

  // 限速 (m/s)
  double max_speed = 4;

  // 中心线长度（单位：米）
  double length = 5;
  double width = 6;

  // ATTENTION: 折线采样点不保证在多个折线之间保持一致

  // 车道中心线（车辆/行车轨迹线）
  Polyline center_line = 7;
  // 车道左边界线
  Polyline left_border_line = 8;
  // 车道右边界线
  Polyline right_border_line = 9;

  // Lanes can drive / walk from
  // 对于Junction内的车道至多1个前驱
  // 对于LANE_TYPE_DRIVING，连接类型必为LANE_CONNECTION_TYPE_TAIL
  // 对于LANE_TYPE_WALKING连接类型两种都有可能
  repeated LaneConnection predecessors = 10;
  // Lanes can drive / walk to
  // 对于Junction内的车道至多1个后继
  // 对于LANE_TYPE_DRIVING，连接类型必为LANE_CONNECTION_TYPE_HEAD
  // 对于LANE_TYPE_WALKING连接类型两种都有可能
  repeated LaneConnection successors = 11;
  // 左侧相邻车道（按从近到远排列）
  repeated int32 left_lane_ids = 12;
  // 右侧相邻车道（按从近到远排列）
  repeated int32 right_lane_ids = 13;

  // 所属的道路road id或路口junction id
  int32 parent_id = 14;

  // 车道之间的冲突点（仅在Junction内有效），保证按照self_s从小到大排序
  repeated LaneOverlap overlaps = 15;

  // 连接到该车道的所有AOI
  repeated int32 aoi_ids = 16;
}

message Road {
  int32 id = 1;
  // 属于该道路Road的所有车道/人行道等lane
  // lane_id是按从最左侧车道到最右侧车道(从前进方向来看)的顺序给出的
  repeated int32 lane_ids = 2;
}

message Junction {
  int32 id = 1;
  // 属于该路口Junction的所有车道/人行道等lane
  repeated int32 lane_ids = 2;
}

// TODO(张钧): 参照腾讯地图的分类与模拟任务的需要进行丰富
enum AoiType {
  AOI_TYPE_UNSPECIFIED = 0;
  AOI_TYPE_BUS_STATION = 1;
  AOI_TYPE_OTHER = 2;
}

message Aoi {
  int32 id = 1;
  AoiType type = 2;
  // Aoi与行车路网的连接点
  repeated wolong.geo.v2.LanePosition driving_positions = 3;
  // Aoi与步行路网的连接点
  repeated wolong.geo.v2.LanePosition walking_positions = 4;
  // 要求aoi与路网至少有1个连接点(driving_positions或walking_positions至少一个不为空)
  // 若type==AOI_TYPE_BUS_STATION,
  // 要求driving_positions和walking_positions均为长度为1的array

  // Aoi原始位置（如果只有一个值，则为Aoi所在的点，否则为Aoi多边形的边界）
  repeated wolong.geo.v2.XYPosition positions = 5;
  // Aoi与行车路网连接时在自身边界上的连接点, 与driving_positions按索引一一对应
  repeated wolong.geo.v2.XYPosition driving_gates = 6;
  // Aoi与步行路网连接时在自身边界上的连接点, 与walking_positions按索引一一对应
  repeated wolong.geo.v2.XYPosition walking_gates = 7;

  // Aoi面积, 若是Poi则无此字段
  optional double area = 8;
}

// 地图，对应一个地图pb文件或一个地图mongodb collection
message Map {
  Header header = 1;
  repeated Lane lanes = 2;
  repeated Road roads = 3;
  repeated Junction junctions = 4;
  repeated Aoi aois = 5;
}
