// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/sync/v1/sync_service.proto

package syncv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "git.fiblab.net/sim/protos/go/city/sync/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SyncServiceName is the fully-qualified name of the SyncService service.
	SyncServiceName = "city.sync.v1.SyncService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SyncServiceSetURLProcedure is the fully-qualified name of the SyncService's SetURL RPC.
	SyncServiceSetURLProcedure = "/city.sync.v1.SyncService/SetURL"
	// SyncServiceGetURLProcedure is the fully-qualified name of the SyncService's GetURL RPC.
	SyncServiceGetURLProcedure = "/city.sync.v1.SyncService/GetURL"
	// SyncServiceStepProcedure is the fully-qualified name of the SyncService's Step RPC.
	SyncServiceStepProcedure = "/city.sync.v1.SyncService/Step"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	syncServiceServiceDescriptor      = v1.File_city_sync_v1_sync_service_proto.Services().ByName("SyncService")
	syncServiceSetURLMethodDescriptor = syncServiceServiceDescriptor.Methods().ByName("SetURL")
	syncServiceGetURLMethodDescriptor = syncServiceServiceDescriptor.Methods().ByName("GetURL")
	syncServiceStepMethodDescriptor   = syncServiceServiceDescriptor.Methods().ByName("Step")
)

// SyncServiceClient is a client for the city.sync.v1.SyncService service.
type SyncServiceClient interface {
	// 注册程序URL
	SetURL(context.Context, *connect.Request[v1.SetURLRequest]) (*connect.Response[v1.SetURLResponse], error)
	// 获取程序URL
	GetURL(context.Context, *connect.Request[v1.GetURLRequest]) (*connect.Response[v1.GetURLResponse], error)
	// 步进
	Step(context.Context, *connect.Request[v1.StepRequest]) (*connect.Response[v1.StepResponse], error)
}

// NewSyncServiceClient constructs a client for the city.sync.v1.SyncService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSyncServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SyncServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &syncServiceClient{
		setURL: connect.NewClient[v1.SetURLRequest, v1.SetURLResponse](
			httpClient,
			baseURL+SyncServiceSetURLProcedure,
			connect.WithSchema(syncServiceSetURLMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getURL: connect.NewClient[v1.GetURLRequest, v1.GetURLResponse](
			httpClient,
			baseURL+SyncServiceGetURLProcedure,
			connect.WithSchema(syncServiceGetURLMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		step: connect.NewClient[v1.StepRequest, v1.StepResponse](
			httpClient,
			baseURL+SyncServiceStepProcedure,
			connect.WithSchema(syncServiceStepMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// syncServiceClient implements SyncServiceClient.
type syncServiceClient struct {
	setURL *connect.Client[v1.SetURLRequest, v1.SetURLResponse]
	getURL *connect.Client[v1.GetURLRequest, v1.GetURLResponse]
	step   *connect.Client[v1.StepRequest, v1.StepResponse]
}

// SetURL calls city.sync.v1.SyncService.SetURL.
func (c *syncServiceClient) SetURL(ctx context.Context, req *connect.Request[v1.SetURLRequest]) (*connect.Response[v1.SetURLResponse], error) {
	return c.setURL.CallUnary(ctx, req)
}

// GetURL calls city.sync.v1.SyncService.GetURL.
func (c *syncServiceClient) GetURL(ctx context.Context, req *connect.Request[v1.GetURLRequest]) (*connect.Response[v1.GetURLResponse], error) {
	return c.getURL.CallUnary(ctx, req)
}

// Step calls city.sync.v1.SyncService.Step.
func (c *syncServiceClient) Step(ctx context.Context, req *connect.Request[v1.StepRequest]) (*connect.Response[v1.StepResponse], error) {
	return c.step.CallUnary(ctx, req)
}

// SyncServiceHandler is an implementation of the city.sync.v1.SyncService service.
type SyncServiceHandler interface {
	// 注册程序URL
	SetURL(context.Context, *connect.Request[v1.SetURLRequest]) (*connect.Response[v1.SetURLResponse], error)
	// 获取程序URL
	GetURL(context.Context, *connect.Request[v1.GetURLRequest]) (*connect.Response[v1.GetURLResponse], error)
	// 步进
	Step(context.Context, *connect.Request[v1.StepRequest]) (*connect.Response[v1.StepResponse], error)
}

// NewSyncServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSyncServiceHandler(svc SyncServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	syncServiceSetURLHandler := connect.NewUnaryHandler(
		SyncServiceSetURLProcedure,
		svc.SetURL,
		connect.WithSchema(syncServiceSetURLMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceGetURLHandler := connect.NewUnaryHandler(
		SyncServiceGetURLProcedure,
		svc.GetURL,
		connect.WithSchema(syncServiceGetURLMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceStepHandler := connect.NewUnaryHandler(
		SyncServiceStepProcedure,
		svc.Step,
		connect.WithSchema(syncServiceStepMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.sync.v1.SyncService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SyncServiceSetURLProcedure:
			syncServiceSetURLHandler.ServeHTTP(w, r)
		case SyncServiceGetURLProcedure:
			syncServiceGetURLHandler.ServeHTTP(w, r)
		case SyncServiceStepProcedure:
			syncServiceStepHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSyncServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSyncServiceHandler struct{}

func (UnimplementedSyncServiceHandler) SetURL(context.Context, *connect.Request[v1.SetURLRequest]) (*connect.Response[v1.SetURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.sync.v1.SyncService.SetURL is not implemented"))
}

func (UnimplementedSyncServiceHandler) GetURL(context.Context, *connect.Request[v1.GetURLRequest]) (*connect.Response[v1.GetURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.sync.v1.SyncService.GetURL is not implemented"))
}

func (UnimplementedSyncServiceHandler) Step(context.Context, *connect.Request[v1.StepRequest]) (*connect.Response[v1.StepResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.sync.v1.SyncService.Step is not implemented"))
}
