// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/sync/v2/sync_service.proto

package syncv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "git.fiblab.net/sim/protos/v2/go/city/sync/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SyncServiceName is the fully-qualified name of the SyncService service.
	SyncServiceName = "city.sync.v2.SyncService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SyncServiceSetURLProcedure is the fully-qualified name of the SyncService's SetURL RPC.
	SyncServiceSetURLProcedure = "/city.sync.v2.SyncService/SetURL"
	// SyncServiceGetURLProcedure is the fully-qualified name of the SyncService's GetURL RPC.
	SyncServiceGetURLProcedure = "/city.sync.v2.SyncService/GetURL"
	// SyncServiceEnterStepSyncProcedure is the fully-qualified name of the SyncService's EnterStepSync
	// RPC.
	SyncServiceEnterStepSyncProcedure = "/city.sync.v2.SyncService/EnterStepSync"
	// SyncServiceExitStepSyncProcedure is the fully-qualified name of the SyncService's ExitStepSync
	// RPC.
	SyncServiceExitStepSyncProcedure = "/city.sync.v2.SyncService/ExitStepSync"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	syncServiceServiceDescriptor             = v2.File_city_sync_v2_sync_service_proto.Services().ByName("SyncService")
	syncServiceSetURLMethodDescriptor        = syncServiceServiceDescriptor.Methods().ByName("SetURL")
	syncServiceGetURLMethodDescriptor        = syncServiceServiceDescriptor.Methods().ByName("GetURL")
	syncServiceEnterStepSyncMethodDescriptor = syncServiceServiceDescriptor.Methods().ByName("EnterStepSync")
	syncServiceExitStepSyncMethodDescriptor  = syncServiceServiceDescriptor.Methods().ByName("ExitStepSync")
)

// SyncServiceClient is a client for the city.sync.v2.SyncService service.
type SyncServiceClient interface {
	// 注册程序URL
	SetURL(context.Context, *connect.Request[v2.SetURLRequest]) (*connect.Response[v2.SetURLResponse], error)
	// 获取程序URL
	GetURL(context.Context, *connect.Request[v2.GetURLRequest]) (*connect.Response[v2.GetURLResponse], error)
	// 程序完成本步所有操作，进入同步状态。
	// 要求：进入同步状态的程序不再向其他程序发送消息，直到下一步开始。
	EnterStepSync(context.Context, *connect.Request[v2.EnterStepSyncRequest]) (*connect.Response[v2.EnterStepSyncResponse], error)
	// 程序完成同步阶段（无通信的安全区域）中必要的处理，如为prepare阶段加锁，可以进入准备阶段（恢复通信）。
	ExitStepSync(context.Context, *connect.Request[v2.ExitStepSyncRequest]) (*connect.Response[v2.ExitStepSyncResponse], error)
}

// NewSyncServiceClient constructs a client for the city.sync.v2.SyncService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSyncServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SyncServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &syncServiceClient{
		setURL: connect.NewClient[v2.SetURLRequest, v2.SetURLResponse](
			httpClient,
			baseURL+SyncServiceSetURLProcedure,
			connect.WithSchema(syncServiceSetURLMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getURL: connect.NewClient[v2.GetURLRequest, v2.GetURLResponse](
			httpClient,
			baseURL+SyncServiceGetURLProcedure,
			connect.WithSchema(syncServiceGetURLMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		enterStepSync: connect.NewClient[v2.EnterStepSyncRequest, v2.EnterStepSyncResponse](
			httpClient,
			baseURL+SyncServiceEnterStepSyncProcedure,
			connect.WithSchema(syncServiceEnterStepSyncMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		exitStepSync: connect.NewClient[v2.ExitStepSyncRequest, v2.ExitStepSyncResponse](
			httpClient,
			baseURL+SyncServiceExitStepSyncProcedure,
			connect.WithSchema(syncServiceExitStepSyncMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// syncServiceClient implements SyncServiceClient.
type syncServiceClient struct {
	setURL        *connect.Client[v2.SetURLRequest, v2.SetURLResponse]
	getURL        *connect.Client[v2.GetURLRequest, v2.GetURLResponse]
	enterStepSync *connect.Client[v2.EnterStepSyncRequest, v2.EnterStepSyncResponse]
	exitStepSync  *connect.Client[v2.ExitStepSyncRequest, v2.ExitStepSyncResponse]
}

// SetURL calls city.sync.v2.SyncService.SetURL.
func (c *syncServiceClient) SetURL(ctx context.Context, req *connect.Request[v2.SetURLRequest]) (*connect.Response[v2.SetURLResponse], error) {
	return c.setURL.CallUnary(ctx, req)
}

// GetURL calls city.sync.v2.SyncService.GetURL.
func (c *syncServiceClient) GetURL(ctx context.Context, req *connect.Request[v2.GetURLRequest]) (*connect.Response[v2.GetURLResponse], error) {
	return c.getURL.CallUnary(ctx, req)
}

// EnterStepSync calls city.sync.v2.SyncService.EnterStepSync.
func (c *syncServiceClient) EnterStepSync(ctx context.Context, req *connect.Request[v2.EnterStepSyncRequest]) (*connect.Response[v2.EnterStepSyncResponse], error) {
	return c.enterStepSync.CallUnary(ctx, req)
}

// ExitStepSync calls city.sync.v2.SyncService.ExitStepSync.
func (c *syncServiceClient) ExitStepSync(ctx context.Context, req *connect.Request[v2.ExitStepSyncRequest]) (*connect.Response[v2.ExitStepSyncResponse], error) {
	return c.exitStepSync.CallUnary(ctx, req)
}

// SyncServiceHandler is an implementation of the city.sync.v2.SyncService service.
type SyncServiceHandler interface {
	// 注册程序URL
	SetURL(context.Context, *connect.Request[v2.SetURLRequest]) (*connect.Response[v2.SetURLResponse], error)
	// 获取程序URL
	GetURL(context.Context, *connect.Request[v2.GetURLRequest]) (*connect.Response[v2.GetURLResponse], error)
	// 程序完成本步所有操作，进入同步状态。
	// 要求：进入同步状态的程序不再向其他程序发送消息，直到下一步开始。
	EnterStepSync(context.Context, *connect.Request[v2.EnterStepSyncRequest]) (*connect.Response[v2.EnterStepSyncResponse], error)
	// 程序完成同步阶段（无通信的安全区域）中必要的处理，如为prepare阶段加锁，可以进入准备阶段（恢复通信）。
	ExitStepSync(context.Context, *connect.Request[v2.ExitStepSyncRequest]) (*connect.Response[v2.ExitStepSyncResponse], error)
}

// NewSyncServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSyncServiceHandler(svc SyncServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	syncServiceSetURLHandler := connect.NewUnaryHandler(
		SyncServiceSetURLProcedure,
		svc.SetURL,
		connect.WithSchema(syncServiceSetURLMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceGetURLHandler := connect.NewUnaryHandler(
		SyncServiceGetURLProcedure,
		svc.GetURL,
		connect.WithSchema(syncServiceGetURLMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceEnterStepSyncHandler := connect.NewUnaryHandler(
		SyncServiceEnterStepSyncProcedure,
		svc.EnterStepSync,
		connect.WithSchema(syncServiceEnterStepSyncMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	syncServiceExitStepSyncHandler := connect.NewUnaryHandler(
		SyncServiceExitStepSyncProcedure,
		svc.ExitStepSync,
		connect.WithSchema(syncServiceExitStepSyncMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.sync.v2.SyncService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SyncServiceSetURLProcedure:
			syncServiceSetURLHandler.ServeHTTP(w, r)
		case SyncServiceGetURLProcedure:
			syncServiceGetURLHandler.ServeHTTP(w, r)
		case SyncServiceEnterStepSyncProcedure:
			syncServiceEnterStepSyncHandler.ServeHTTP(w, r)
		case SyncServiceExitStepSyncProcedure:
			syncServiceExitStepSyncHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSyncServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSyncServiceHandler struct{}

func (UnimplementedSyncServiceHandler) SetURL(context.Context, *connect.Request[v2.SetURLRequest]) (*connect.Response[v2.SetURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.sync.v2.SyncService.SetURL is not implemented"))
}

func (UnimplementedSyncServiceHandler) GetURL(context.Context, *connect.Request[v2.GetURLRequest]) (*connect.Response[v2.GetURLResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.sync.v2.SyncService.GetURL is not implemented"))
}

func (UnimplementedSyncServiceHandler) EnterStepSync(context.Context, *connect.Request[v2.EnterStepSyncRequest]) (*connect.Response[v2.EnterStepSyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.sync.v2.SyncService.EnterStepSync is not implemented"))
}

func (UnimplementedSyncServiceHandler) ExitStepSync(context.Context, *connect.Request[v2.ExitStepSyncRequest]) (*connect.Response[v2.ExitStepSyncResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.sync.v2.SyncService.ExitStepSync is not implemented"))
}
