// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: city/economy/v2/economy.proto

package economyv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Firm represents a company entity in the economic system
// Firm 代表经济系统中的公司实体
type Firm struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the firm
	// 公司的唯一标识符
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// List of employee IDs working at the firm
	// 公司的员工ID列表
	Employees []int32 `protobuf:"varint,2,rep,packed,name=employees,proto3" json:"employees,omitempty"`
	// Price of the firm's products/services
	// 公司产品/服务的价格
	Price float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	// Current inventory level of the firm
	// 公司当前的库存量
	Inventory int32 `protobuf:"varint,4,opt,name=inventory,proto3" json:"inventory,omitempty"`
	// Market demand for the firm's products/services
	// 市场对公司产品/服务的需求量
	Demand float32 `protobuf:"fixed32,5,opt,name=demand,proto3" json:"demand,omitempty"`
	// Sales volume of the firm
	// 公司的销售量
	Sales float32 `protobuf:"fixed32,6,opt,name=sales,proto3" json:"sales,omitempty"`
	// Amount of currency held by the firm
	// 公司持有的货币量
	Currency      float32 `protobuf:"fixed32,7,opt,name=currency,proto3" json:"currency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Firm) Reset() {
	*x = Firm{}
	mi := &file_city_economy_v2_economy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Firm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Firm) ProtoMessage() {}

func (x *Firm) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_economy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Firm.ProtoReflect.Descriptor instead.
func (*Firm) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_economy_proto_rawDescGZIP(), []int{0}
}

func (x *Firm) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Firm) GetEmployees() []int32 {
	if x != nil {
		return x.Employees
	}
	return nil
}

func (x *Firm) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Firm) GetInventory() int32 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *Firm) GetDemand() float32 {
	if x != nil {
		return x.Demand
	}
	return 0
}

func (x *Firm) GetSales() float32 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *Firm) GetCurrency() float32 {
	if x != nil {
		return x.Currency
	}
	return 0
}

// NBS (National Bureau of Statistics) represents the statistical authority
// NBS (国家统计局) 代表负责经济数据统计的权威机构
type NBS struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the NBS
	// 统计局的唯一标识符
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// List of citizen IDs under NBS jurisdiction
	// 统计范围内的公民ID列表
	CitizenIds []int32 `protobuf:"varint,2,rep,packed,name=citizen_ids,json=citizenIds,proto3" json:"citizen_ids,omitempty"`
	// Time series data of nominal GDP, key is timestamp
	// 名义GDP时间序列数据，键为时间戳
	NominalGdp map[string]float32 `protobuf:"bytes,3,rep,name=nominal_gdp,json=nominalGdp,proto3" json:"nominal_gdp,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	// Time series data of real GDP, key is timestamp
	// 实际GDP时间序列数据，键为时间戳
	RealGdp map[string]float32 `protobuf:"bytes,4,rep,name=real_gdp,json=realGdp,proto3" json:"real_gdp,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	// Time series data of unemployment rate, key is timestamp
	// 失业率时间序列数据，键为时间戳
	Unemployment map[string]float32 `protobuf:"bytes,5,rep,name=unemployment,proto3" json:"unemployment,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	// Time series data of wage levels, key is timestamp
	// 工资水平时间序列数据，键为时间戳
	Wages map[string]float32 `protobuf:"bytes,6,rep,name=wages,proto3" json:"wages,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	// Time series data of price indices, key is timestamp
	// 价格指数时间序列数据，键为时间戳
	Prices map[string]float32 `protobuf:"bytes,7,rep,name=prices,proto3" json:"prices,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	// Time series data of working hours, key is timestamp
	// 工作时间时间序列数据，键为时间戳
	WorkingHours map[string]float32 `protobuf:"bytes,8,rep,name=working_hours,json=workingHours,proto3" json:"working_hours,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	// Time series data of depression index, key is timestamp
	// 抑郁指数时间序列数据，键为时间戳
	Depression map[string]float32 `protobuf:"bytes,9,rep,name=depression,proto3" json:"depression,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	// Time series data of consumption currency, key is timestamp
	// 消费货币时间序列数据，键为时间戳
	ConsumptionCurrency map[string]float32 `protobuf:"bytes,10,rep,name=consumption_currency,json=consumptionCurrency,proto3" json:"consumption_currency,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	// Time series data of income currency, key is timestamp
	// 收入货币时间序列数据，键为时间戳
	IncomeCurrency map[string]float32 `protobuf:"bytes,11,rep,name=income_currency,json=incomeCurrency,proto3" json:"income_currency,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	// Time series data of locus control, key is timestamp
	// 控制点时间序列数据，键为时间戳
	LocusControl map[string]float32 `protobuf:"bytes,12,rep,name=locus_control,json=locusControl,proto3" json:"locus_control,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	// List of citizen agent IDs
	// 公民代理ID列表
	CitizenAgentIds []int32 `protobuf:"varint,13,rep,packed,name=citizen_agent_ids,json=citizenAgentIds,proto3" json:"citizen_agent_ids,omitempty"`
	// Amount of currency held by the NBS
	// 统计局持有的货币量
	Currency      float32 `protobuf:"fixed32,14,opt,name=currency,proto3" json:"currency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NBS) Reset() {
	*x = NBS{}
	mi := &file_city_economy_v2_economy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NBS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NBS) ProtoMessage() {}

func (x *NBS) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_economy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NBS.ProtoReflect.Descriptor instead.
func (*NBS) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_economy_proto_rawDescGZIP(), []int{1}
}

func (x *NBS) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NBS) GetCitizenIds() []int32 {
	if x != nil {
		return x.CitizenIds
	}
	return nil
}

func (x *NBS) GetNominalGdp() map[string]float32 {
	if x != nil {
		return x.NominalGdp
	}
	return nil
}

func (x *NBS) GetRealGdp() map[string]float32 {
	if x != nil {
		return x.RealGdp
	}
	return nil
}

func (x *NBS) GetUnemployment() map[string]float32 {
	if x != nil {
		return x.Unemployment
	}
	return nil
}

func (x *NBS) GetWages() map[string]float32 {
	if x != nil {
		return x.Wages
	}
	return nil
}

func (x *NBS) GetPrices() map[string]float32 {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *NBS) GetWorkingHours() map[string]float32 {
	if x != nil {
		return x.WorkingHours
	}
	return nil
}

func (x *NBS) GetDepression() map[string]float32 {
	if x != nil {
		return x.Depression
	}
	return nil
}

func (x *NBS) GetConsumptionCurrency() map[string]float32 {
	if x != nil {
		return x.ConsumptionCurrency
	}
	return nil
}

func (x *NBS) GetIncomeCurrency() map[string]float32 {
	if x != nil {
		return x.IncomeCurrency
	}
	return nil
}

func (x *NBS) GetLocusControl() map[string]float32 {
	if x != nil {
		return x.LocusControl
	}
	return nil
}

func (x *NBS) GetCitizenAgentIds() []int32 {
	if x != nil {
		return x.CitizenAgentIds
	}
	return nil
}

func (x *NBS) GetCurrency() float32 {
	if x != nil {
		return x.Currency
	}
	return 0
}

// Government represents a government institution
// Government 代表政府机构
type Government struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the government
	// 政府的唯一标识符
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// List of citizen IDs under government jurisdiction
	// 管辖范围内的公民ID列表
	CitizenIds []int32 `protobuf:"varint,2,rep,packed,name=citizen_ids,json=citizenIds,proto3" json:"citizen_ids,omitempty"`
	// Tax bracket cutoff points
	// 税收档位的切分点列表
	BracketCutoffs []float32 `protobuf:"fixed32,3,rep,packed,name=bracket_cutoffs,json=bracketCutoffs,proto3" json:"bracket_cutoffs,omitempty"`
	// Tax rates for each bracket
	// 对应每个档位的税率列表
	BracketRates []float32 `protobuf:"fixed32,4,rep,packed,name=bracket_rates,json=bracketRates,proto3" json:"bracket_rates,omitempty"`
	// Amount of currency held by the government
	// 政府持有的货币量
	Currency      float32 `protobuf:"fixed32,5,opt,name=currency,proto3" json:"currency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Government) Reset() {
	*x = Government{}
	mi := &file_city_economy_v2_economy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Government) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Government) ProtoMessage() {}

func (x *Government) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_economy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Government.ProtoReflect.Descriptor instead.
func (*Government) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_economy_proto_rawDescGZIP(), []int{2}
}

func (x *Government) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Government) GetCitizenIds() []int32 {
	if x != nil {
		return x.CitizenIds
	}
	return nil
}

func (x *Government) GetBracketCutoffs() []float32 {
	if x != nil {
		return x.BracketCutoffs
	}
	return nil
}

func (x *Government) GetBracketRates() []float32 {
	if x != nil {
		return x.BracketRates
	}
	return nil
}

func (x *Government) GetCurrency() float32 {
	if x != nil {
		return x.Currency
	}
	return 0
}

// Bank represents a banking institution
// Bank 代表银行机构
type Bank struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the bank
	// 银行的唯一标识符
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// List of citizen IDs who are bank customers
	// 银行客户（公民）ID列表
	CitizenIds []int32 `protobuf:"varint,2,rep,packed,name=citizen_ids,json=citizenIds,proto3" json:"citizen_ids,omitempty"`
	// Interest rate set by the bank
	// 银行设定的利率
	InterestRate float32 `protobuf:"fixed32,3,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
	// Amount of currency held by the bank
	// 银行持有的货币量
	Currency      float32 `protobuf:"fixed32,4,opt,name=currency,proto3" json:"currency,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bank) Reset() {
	*x = Bank{}
	mi := &file_city_economy_v2_economy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bank) ProtoMessage() {}

func (x *Bank) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_economy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bank.ProtoReflect.Descriptor instead.
func (*Bank) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_economy_proto_rawDescGZIP(), []int{3}
}

func (x *Bank) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Bank) GetCitizenIds() []int32 {
	if x != nil {
		return x.CitizenIds
	}
	return nil
}

func (x *Bank) GetInterestRate() float32 {
	if x != nil {
		return x.InterestRate
	}
	return 0
}

func (x *Bank) GetCurrency() float32 {
	if x != nil {
		return x.Currency
	}
	return 0
}

// Agent represents an individual economic agent (e.g., a resident)
// Agent 代表经济系统中的个体代理（如居民个人）
type Agent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier of the agent
	// 代理的唯一标识符
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Amount of currency held by the agent
	// 代理持有的货币量
	Currency *float32 `protobuf:"fixed32,2,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	// ID of the firm where the agent is employed
	// 代理所属的公司ID
	FirmId *int32 `protobuf:"varint,3,opt,name=firm_id,json=firmId,proto3,oneof" json:"firm_id,omitempty"`
	// Skill level of the agent
	// 代理的技能水平
	Skill *float32 `protobuf:"fixed32,4,opt,name=skill,proto3,oneof" json:"skill,omitempty"`
	// Consumption level of the agent
	// 代理的消费量
	Consumption *float32 `protobuf:"fixed32,5,opt,name=consumption,proto3,oneof" json:"consumption,omitempty"`
	// Income of the agent
	// 代理的收入
	Income        *float32 `protobuf:"fixed32,6,opt,name=income,proto3,oneof" json:"income,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Agent) Reset() {
	*x = Agent{}
	mi := &file_city_economy_v2_economy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_economy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_economy_proto_rawDescGZIP(), []int{4}
}

func (x *Agent) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Agent) GetCurrency() float32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *Agent) GetFirmId() int32 {
	if x != nil && x.FirmId != nil {
		return *x.FirmId
	}
	return 0
}

func (x *Agent) GetSkill() float32 {
	if x != nil && x.Skill != nil {
		return *x.Skill
	}
	return 0
}

func (x *Agent) GetConsumption() float32 {
	if x != nil && x.Consumption != nil {
		return *x.Consumption
	}
	return 0
}

func (x *Agent) GetIncome() float32 {
	if x != nil && x.Income != nil {
		return *x.Income
	}
	return 0
}

// EconomyEntities represents all entities in the economic system
// EconomyEntities 代表经济系统中的所有实体
type EconomyEntities struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of all firms
	// 公司列表
	Firms []*Firm `protobuf:"bytes,1,rep,name=firms,proto3" json:"firms,omitempty"`
	// List of all NBSs
	// 国家统计局列表
	Nbs []*NBS `protobuf:"bytes,2,rep,name=nbs,proto3" json:"nbs,omitempty"`
	// List of all governments
	// 政府列表
	Governments []*Government `protobuf:"bytes,3,rep,name=governments,proto3" json:"governments,omitempty"`
	// List of all banks
	// 银行列表
	Banks []*Bank `protobuf:"bytes,4,rep,name=banks,proto3" json:"banks,omitempty"`
	// List of all agents
	// 代理列表
	Agents        []*Agent `protobuf:"bytes,5,rep,name=agents,proto3" json:"agents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EconomyEntities) Reset() {
	*x = EconomyEntities{}
	mi := &file_city_economy_v2_economy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EconomyEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyEntities) ProtoMessage() {}

func (x *EconomyEntities) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_economy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyEntities.ProtoReflect.Descriptor instead.
func (*EconomyEntities) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_economy_proto_rawDescGZIP(), []int{5}
}

func (x *EconomyEntities) GetFirms() []*Firm {
	if x != nil {
		return x.Firms
	}
	return nil
}

func (x *EconomyEntities) GetNbs() []*NBS {
	if x != nil {
		return x.Nbs
	}
	return nil
}

func (x *EconomyEntities) GetGovernments() []*Government {
	if x != nil {
		return x.Governments
	}
	return nil
}

func (x *EconomyEntities) GetBanks() []*Bank {
	if x != nil {
		return x.Banks
	}
	return nil
}

func (x *EconomyEntities) GetAgents() []*Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

var File_city_economy_v2_economy_proto protoreflect.FileDescriptor

var file_city_economy_v2_economy_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x63, 0x69, 0x74, 0x79, 0x2f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2f, 0x76,
	0x32, 0x2f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32,
	0x22, 0xb2, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x72, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xd2, 0x0b, 0x0a, 0x03, 0x4e, 0x42, 0x53, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x45,
	0x0a, 0x0b, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x64, 0x70, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x42, 0x53, 0x2e, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x47, 0x64, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x47, 0x64, 0x70, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x67, 0x64,
	0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x42, 0x53, 0x2e, 0x52, 0x65,
	0x61, 0x6c, 0x47, 0x64, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c,
	0x47, 0x64, 0x70, 0x12, 0x4a, 0x0a, 0x0c, 0x75, 0x6e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x69, 0x74, 0x79,
	0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x42, 0x53, 0x2e,
	0x55, 0x6e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x75, 0x6e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x35, 0x0a, 0x05, 0x77, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x4e, 0x42, 0x53, 0x2e, 0x57, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x77, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x42, 0x53, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x4b, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x42, 0x53, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x44, 0x0a,
	0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x42, 0x53, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x42, 0x53, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x4e, 0x42, 0x53, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4b, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x4e, 0x42, 0x53, 0x2e, 0x4c, 0x6f, 0x63, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0f, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x1a, 0x3d, 0x0a,
	0x0f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x47, 0x64, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c,
	0x52, 0x65, 0x61, 0x6c, 0x47, 0x64, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x55, 0x6e, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x57, 0x61, 0x67,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f,
	0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3d, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46,
	0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4c, 0x6f, 0x63,
	0x75, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x0a, 0x47,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x02, 0x52, 0x0e, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x75, 0x74, 0x6f,
	0x66, 0x66, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0c, 0x62, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x22, 0x78, 0x0a, 0x04, 0x42, 0x61, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xf3,
	0x01, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x69, 0x72,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x66, 0x69,
	0x72, 0x6d, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x06, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x0f, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x52, 0x05,
	0x66, 0x69, 0x72, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x03, 0x6e, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4e, 0x42, 0x53, 0x52, 0x03, 0x6e, 0x62, 0x73, 0x12, 0x3d, 0x0a,
	0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0b, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x05,
	0x62, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x69,
	0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61,
	0x6e, 0x6b, 0x52, 0x05, 0x62, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x69, 0x74, 0x79,
	0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x42, 0xbc, 0x01, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76,
	0x32, 0x42, 0x0c, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x2e, 0x66, 0x69, 0x62, 0x6c, 0x61, 0x62, 0x2e, 0x6e, 0x65,
	0x74, 0x2f, 0x73, 0x69, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x32, 0x2f,
	0x67, 0x6f, 0x2f, 0x63, 0x69, 0x74, 0x79, 0x2f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2f,
	0x76, 0x32, 0x3b, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x43,
	0x45, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x0f, 0x43, 0x69, 0x74, 0x79, 0x5c, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1b, 0x43, 0x69, 0x74, 0x79, 0x5c, 0x45, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x45, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_city_economy_v2_economy_proto_rawDescOnce sync.Once
	file_city_economy_v2_economy_proto_rawDescData []byte
)

func file_city_economy_v2_economy_proto_rawDescGZIP() []byte {
	file_city_economy_v2_economy_proto_rawDescOnce.Do(func() {
		file_city_economy_v2_economy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_city_economy_v2_economy_proto_rawDesc), len(file_city_economy_v2_economy_proto_rawDesc)))
	})
	return file_city_economy_v2_economy_proto_rawDescData
}

var file_city_economy_v2_economy_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_city_economy_v2_economy_proto_goTypes = []any{
	(*Firm)(nil),            // 0: city.economy.v2.Firm
	(*NBS)(nil),             // 1: city.economy.v2.NBS
	(*Government)(nil),      // 2: city.economy.v2.Government
	(*Bank)(nil),            // 3: city.economy.v2.Bank
	(*Agent)(nil),           // 4: city.economy.v2.Agent
	(*EconomyEntities)(nil), // 5: city.economy.v2.EconomyEntities
	nil,                     // 6: city.economy.v2.NBS.NominalGdpEntry
	nil,                     // 7: city.economy.v2.NBS.RealGdpEntry
	nil,                     // 8: city.economy.v2.NBS.UnemploymentEntry
	nil,                     // 9: city.economy.v2.NBS.WagesEntry
	nil,                     // 10: city.economy.v2.NBS.PricesEntry
	nil,                     // 11: city.economy.v2.NBS.WorkingHoursEntry
	nil,                     // 12: city.economy.v2.NBS.DepressionEntry
	nil,                     // 13: city.economy.v2.NBS.ConsumptionCurrencyEntry
	nil,                     // 14: city.economy.v2.NBS.IncomeCurrencyEntry
	nil,                     // 15: city.economy.v2.NBS.LocusControlEntry
}
var file_city_economy_v2_economy_proto_depIdxs = []int32{
	6,  // 0: city.economy.v2.NBS.nominal_gdp:type_name -> city.economy.v2.NBS.NominalGdpEntry
	7,  // 1: city.economy.v2.NBS.real_gdp:type_name -> city.economy.v2.NBS.RealGdpEntry
	8,  // 2: city.economy.v2.NBS.unemployment:type_name -> city.economy.v2.NBS.UnemploymentEntry
	9,  // 3: city.economy.v2.NBS.wages:type_name -> city.economy.v2.NBS.WagesEntry
	10, // 4: city.economy.v2.NBS.prices:type_name -> city.economy.v2.NBS.PricesEntry
	11, // 5: city.economy.v2.NBS.working_hours:type_name -> city.economy.v2.NBS.WorkingHoursEntry
	12, // 6: city.economy.v2.NBS.depression:type_name -> city.economy.v2.NBS.DepressionEntry
	13, // 7: city.economy.v2.NBS.consumption_currency:type_name -> city.economy.v2.NBS.ConsumptionCurrencyEntry
	14, // 8: city.economy.v2.NBS.income_currency:type_name -> city.economy.v2.NBS.IncomeCurrencyEntry
	15, // 9: city.economy.v2.NBS.locus_control:type_name -> city.economy.v2.NBS.LocusControlEntry
	0,  // 10: city.economy.v2.EconomyEntities.firms:type_name -> city.economy.v2.Firm
	1,  // 11: city.economy.v2.EconomyEntities.nbs:type_name -> city.economy.v2.NBS
	2,  // 12: city.economy.v2.EconomyEntities.governments:type_name -> city.economy.v2.Government
	3,  // 13: city.economy.v2.EconomyEntities.banks:type_name -> city.economy.v2.Bank
	4,  // 14: city.economy.v2.EconomyEntities.agents:type_name -> city.economy.v2.Agent
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_city_economy_v2_economy_proto_init() }
func file_city_economy_v2_economy_proto_init() {
	if File_city_economy_v2_economy_proto != nil {
		return
	}
	file_city_economy_v2_economy_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_city_economy_v2_economy_proto_rawDesc), len(file_city_economy_v2_economy_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_city_economy_v2_economy_proto_goTypes,
		DependencyIndexes: file_city_economy_v2_economy_proto_depIdxs,
		MessageInfos:      file_city_economy_v2_economy_proto_msgTypes,
	}.Build()
	File_city_economy_v2_economy_proto = out.File
	file_city_economy_v2_economy_proto_goTypes = nil
	file_city_economy_v2_economy_proto_depIdxs = nil
}
