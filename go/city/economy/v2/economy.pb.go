// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: city/economy/v2/economy.proto

package economyv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrgType int32

const (
	// 未指定
	// unspecified
	OrgType_ORG_TYPE_UNSPECIFIED OrgType = 0
	// 国家统计局
	// NBS
	OrgType_ORG_TYPE_NBS OrgType = 1
	// 公司
	// firm
	OrgType_ORG_TYPE_FIRM OrgType = 2
	// 银行
	// bank
	OrgType_ORG_TYPE_BANK OrgType = 3
	// 政府
	// government
	OrgType_ORG_TYPE_GOVERNMENT OrgType = 4
)

// Enum value maps for OrgType.
var (
	OrgType_name = map[int32]string{
		0: "ORG_TYPE_UNSPECIFIED",
		1: "ORG_TYPE_NBS",
		2: "ORG_TYPE_FIRM",
		3: "ORG_TYPE_BANK",
		4: "ORG_TYPE_GOVERNMENT",
	}
	OrgType_value = map[string]int32{
		"ORG_TYPE_UNSPECIFIED": 0,
		"ORG_TYPE_NBS":         1,
		"ORG_TYPE_FIRM":        2,
		"ORG_TYPE_BANK":        3,
		"ORG_TYPE_GOVERNMENT":  4,
	}
)

func (x OrgType) Enum() *OrgType {
	p := new(OrgType)
	*p = x
	return p
}

func (x OrgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrgType) Descriptor() protoreflect.EnumDescriptor {
	return file_city_economy_v2_economy_proto_enumTypes[0].Descriptor()
}

func (OrgType) Type() protoreflect.EnumType {
	return &file_city_economy_v2_economy_proto_enumTypes[0]
}

func (x OrgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrgType.Descriptor instead.
func (OrgType) EnumDescriptor() ([]byte, []int) {
	return file_city_economy_v2_economy_proto_rawDescGZIP(), []int{0}
}

// 组织
// Organization
type Org struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 组织ID
	// organization id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 组织类别
	// organization type
	Type OrgType `protobuf:"varint,2,opt,name=type,proto3,enum=city.economy.v2.OrgType" json:"type,omitempty"`
	// NBS
	NominalGdp []float32 `protobuf:"fixed32,3,rep,packed,name=nominal_gdp,json=nominalGdp,proto3" json:"nominal_gdp,omitempty"`
	RealGdp []float32 `protobuf:"fixed32,4,rep,packed,name=real_gdp,json=realGdp,proto3" json:"real_gdp,omitempty"`
	Unemployment []float32 `protobuf:"fixed32,5,rep,packed,name=unemployment,proto3" json:"unemployment,omitempty"`
	Wages []float32 `protobuf:"fixed32,6,rep,packed,name=wages,proto3" json:"wages,omitempty"`
	Prices []float32 `protobuf:"fixed32,7,rep,packed,name=prices,proto3" json:"prices,omitempty"`
	// Firm
	Inventory *int32 `protobuf:"varint,8,opt,name=inventory,proto3,oneof" json:"inventory,omitempty"`
	Price *float32 `protobuf:"fixed32,9,opt,name=price,proto3,oneof" json:"price,omitempty"`
	// Firm & Bank & Government
	Currency *float32 `protobuf:"fixed32,10,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	// Bank
	InterestRate *float32 `protobuf:"fixed32,11,opt,name=interest_rate,json=interestRate,proto3,oneof" json:"interest_rate,omitempty"`
	// Government
	BracketCutoffs []float32 `protobuf:"fixed32,12,rep,packed,name=bracket_cutoffs,json=bracketCutoffs,proto3" json:"bracket_cutoffs,omitempty"`
	BracketRates []float32 `protobuf:"fixed32,13,rep,packed,name=bracket_rates,json=bracketRates,proto3" json:"bracket_rates,omitempty"`
	// NBS
	ConsumptionCurrency []float32 `protobuf:"fixed32,14,rep,packed,name=consumption_currency,json=consumptionCurrency,proto3" json:"consumption_currency,omitempty"`
	ConsumptionPropensity []float32 `protobuf:"fixed32,15,rep,packed,name=consumption_propensity,json=consumptionPropensity,proto3" json:"consumption_propensity,omitempty"`
	IncomeCurrency []float32 `protobuf:"fixed32,16,rep,packed,name=income_currency,json=incomeCurrency,proto3" json:"income_currency,omitempty"`
	Depression []float32 `protobuf:"fixed32,17,rep,packed,name=depression,proto3" json:"depression,omitempty"`
	LocusControl []float32 `protobuf:"fixed32,18,rep,packed,name=locus_control,json=locusControl,proto3" json:"locus_control,omitempty"`
	WorkingHours []float32 `protobuf:"fixed32,19,rep,packed,name=working_hours,json=workingHours,proto3" json:"working_hours,omitempty"`
	// new：
	// Firm: 企业的雇员列表
	// employees list for firm
	Employees []int32 `protobuf:"varint,20,rep,packed,name=employees,proto3" json:"employees,omitempty"`
	// NBS & Government: 公民列表
	// citizens list for NBS and government
	Citizens      []int32 `protobuf:"varint,21,rep,packed,name=citizens,proto3" json:"citizens,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Org) Reset() {
	*x = Org{}
	mi := &file_city_economy_v2_economy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Org) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Org) ProtoMessage() {}

func (x *Org) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_economy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Org.ProtoReflect.Descriptor instead.
func (*Org) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_economy_proto_rawDescGZIP(), []int{0}
}

func (x *Org) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Org) GetType() OrgType {
	if x != nil {
		return x.Type
	}
	return OrgType_ORG_TYPE_UNSPECIFIED
}

func (x *Org) GetNominalGdp() []float32 {
	if x != nil {
		return x.NominalGdp
	}
	return nil
}

func (x *Org) GetRealGdp() []float32 {
	if x != nil {
		return x.RealGdp
	}
	return nil
}

func (x *Org) GetUnemployment() []float32 {
	if x != nil {
		return x.Unemployment
	}
	return nil
}

func (x *Org) GetWages() []float32 {
	if x != nil {
		return x.Wages
	}
	return nil
}

func (x *Org) GetPrices() []float32 {
	if x != nil {
		return x.Prices
	}
	return nil
}

func (x *Org) GetInventory() int32 {
	if x != nil && x.Inventory != nil {
		return *x.Inventory
	}
	return 0
}

func (x *Org) GetPrice() float32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *Org) GetCurrency() float32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *Org) GetInterestRate() float32 {
	if x != nil && x.InterestRate != nil {
		return *x.InterestRate
	}
	return 0
}

func (x *Org) GetBracketCutoffs() []float32 {
	if x != nil {
		return x.BracketCutoffs
	}
	return nil
}

func (x *Org) GetBracketRates() []float32 {
	if x != nil {
		return x.BracketRates
	}
	return nil
}

func (x *Org) GetConsumptionCurrency() []float32 {
	if x != nil {
		return x.ConsumptionCurrency
	}
	return nil
}

func (x *Org) GetConsumptionPropensity() []float32 {
	if x != nil {
		return x.ConsumptionPropensity
	}
	return nil
}

func (x *Org) GetIncomeCurrency() []float32 {
	if x != nil {
		return x.IncomeCurrency
	}
	return nil
}

func (x *Org) GetDepression() []float32 {
	if x != nil {
		return x.Depression
	}
	return nil
}

func (x *Org) GetLocusControl() []float32 {
	if x != nil {
		return x.LocusControl
	}
	return nil
}

func (x *Org) GetWorkingHours() []float32 {
	if x != nil {
		return x.WorkingHours
	}
	return nil
}

func (x *Org) GetEmployees() []int32 {
	if x != nil {
		return x.Employees
	}
	return nil
}

func (x *Org) GetCitizens() []int32 {
	if x != nil {
		return x.Citizens
	}
	return nil
}

type Agent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// person ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// currency
	Currency *float32 `protobuf:"fixed32,2,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	// 所属企业ID
	FirmId *int32 `protobuf:"varint,3,opt,name=firm_id,json=firmId,proto3,oneof" json:"firm_id,omitempty"`
	// 技能水平
	Skill *float32 `protobuf:"fixed32,4,opt,name=skill,proto3,oneof" json:"skill,omitempty"`
	// 消费
	Consumption *float32 `protobuf:"fixed32,5,opt,name=consumption,proto3,oneof" json:"consumption,omitempty"`
	// 收入
	Income        *float32 `protobuf:"fixed32,6,opt,name=income,proto3,oneof" json:"income,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Agent) Reset() {
	*x = Agent{}
	mi := &file_city_economy_v2_economy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_economy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_economy_proto_rawDescGZIP(), []int{1}
}

func (x *Agent) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Agent) GetCurrency() float32 {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return 0
}

func (x *Agent) GetFirmId() int32 {
	if x != nil && x.FirmId != nil {
		return *x.FirmId
	}
	return 0
}

func (x *Agent) GetSkill() float32 {
	if x != nil && x.Skill != nil {
		return *x.Skill
	}
	return 0
}

func (x *Agent) GetConsumption() float32 {
	if x != nil && x.Consumption != nil {
		return *x.Consumption
	}
	return 0
}

func (x *Agent) GetIncome() float32 {
	if x != nil && x.Income != nil {
		return *x.Income
	}
	return 0
}

type EconomyEntities struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Orgs          []*Org                 `protobuf:"bytes,1,rep,name=orgs,proto3" json:"orgs,omitempty"`
	Agents        []*Agent               `protobuf:"bytes,2,rep,name=agents,proto3" json:"agents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EconomyEntities) Reset() {
	*x = EconomyEntities{}
	mi := &file_city_economy_v2_economy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EconomyEntities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EconomyEntities) ProtoMessage() {}

func (x *EconomyEntities) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_economy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EconomyEntities.ProtoReflect.Descriptor instead.
func (*EconomyEntities) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_economy_proto_rawDescGZIP(), []int{2}
}

func (x *EconomyEntities) GetOrgs() []*Org {
	if x != nil {
		return x.Orgs
	}
	return nil
}

func (x *EconomyEntities) GetAgents() []*Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

var File_city_economy_v2_economy_proto protoreflect.FileDescriptor

var file_city_economy_v2_economy_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x69, 0x74, 0x79, 0x2f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2f, 0x76,
	0x32, 0x2f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32,
	0x22, 0x96, 0x06, 0x0a, 0x03, 0x4f, 0x72, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x67, 0x64, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x47, 0x64, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x5f,
	0x67, 0x64, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x47,
	0x64, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0c, 0x75, 0x6e, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x77, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0f, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0e, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x75, 0x74, 0x6f, 0x66, 0x66, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0c, 0x62,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x02, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x35,
	0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x02, 0x52, 0x15,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0e,
	0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65,
	0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65,
	0x6e, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x05, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x66, 0x69, 0x72, 0x6d, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x02, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x06, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x22,
	0x6b, 0x0a, 0x0f, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x6f, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x04, 0x6f, 0x72, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x06,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0x74, 0x0a, 0x07,
	0x4f, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x42,
	0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x52, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x49, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x52, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4b, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x04, 0x42, 0xbc, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e,
	0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x42, 0x0c, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x2e,
	0x66, 0x69, 0x62, 0x6c, 0x61, 0x62, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x69, 0x6d, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x69, 0x74, 0x79,
	0x2f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2f, 0x76, 0x32, 0x3b, 0x65, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x43, 0x45, 0x58, 0xaa, 0x02, 0x0f, 0x43, 0x69,
	0x74, 0x79, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x0f,
	0x43, 0x69, 0x74, 0x79, 0x5c, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5c, 0x56, 0x32, 0xe2,
	0x02, 0x1b, 0x43, 0x69, 0x74, 0x79, 0x5c, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5c, 0x56,
	0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11,
	0x43, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x3a, 0x3a, 0x56,
	0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_city_economy_v2_economy_proto_rawDescOnce sync.Once
	file_city_economy_v2_economy_proto_rawDescData = file_city_economy_v2_economy_proto_rawDesc
)

func file_city_economy_v2_economy_proto_rawDescGZIP() []byte {
	file_city_economy_v2_economy_proto_rawDescOnce.Do(func() {
		file_city_economy_v2_economy_proto_rawDescData = protoimpl.X.CompressGZIP(file_city_economy_v2_economy_proto_rawDescData)
	})
	return file_city_economy_v2_economy_proto_rawDescData
}

var file_city_economy_v2_economy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_city_economy_v2_economy_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_city_economy_v2_economy_proto_goTypes = []any{
	(OrgType)(0),            // 0: city.economy.v2.OrgType
	(*Org)(nil),             // 1: city.economy.v2.Org
	(*Agent)(nil),           // 2: city.economy.v2.Agent
	(*EconomyEntities)(nil), // 3: city.economy.v2.EconomyEntities
}
var file_city_economy_v2_economy_proto_depIdxs = []int32{
	0, // 0: city.economy.v2.Org.type:type_name -> city.economy.v2.OrgType
	1, // 1: city.economy.v2.EconomyEntities.orgs:type_name -> city.economy.v2.Org
	2, // 2: city.economy.v2.EconomyEntities.agents:type_name -> city.economy.v2.Agent
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_city_economy_v2_economy_proto_init() }
func file_city_economy_v2_economy_proto_init() {
	if File_city_economy_v2_economy_proto != nil {
		return
	}
	file_city_economy_v2_economy_proto_msgTypes[0].OneofWrappers = []any{}
	file_city_economy_v2_economy_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_city_economy_v2_economy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_city_economy_v2_economy_proto_goTypes,
		DependencyIndexes: file_city_economy_v2_economy_proto_depIdxs,
		EnumInfos:         file_city_economy_v2_economy_proto_enumTypes,
		MessageInfos:      file_city_economy_v2_economy_proto_msgTypes,
	}.Build()
	File_city_economy_v2_economy_proto = out.File
	file_city_economy_v2_economy_proto_rawDesc = nil
	file_city_economy_v2_economy_proto_goTypes = nil
	file_city_economy_v2_economy_proto_depIdxs = nil
}
