// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: city/economy/v2/org_service.proto

package economyv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 添加组织的请求消息
type AddOrgRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要添加的组织信息
	Org           *Org `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddOrgRequest) Reset() {
	*x = AddOrgRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrgRequest) ProtoMessage() {}

func (x *AddOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrgRequest.ProtoReflect.Descriptor instead.
func (*AddOrgRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{0}
}

func (x *AddOrgRequest) GetOrg() *Org {
	if x != nil {
		return x.Org
	}
	return nil
}

// 添加组织的响应消息
type AddOrgResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddOrgResponse) Reset() {
	*x = AddOrgResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrgResponse) ProtoMessage() {}

func (x *AddOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrgResponse.ProtoReflect.Descriptor instead.
func (*AddOrgResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{1}
}

// 移除组织的请求消息
type RemoveOrgRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要移除的组织ID
	OrgId         int32 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveOrgRequest) Reset() {
	*x = RemoveOrgRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOrgRequest) ProtoMessage() {}

func (x *RemoveOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOrgRequest.ProtoReflect.Descriptor instead.
func (*RemoveOrgRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveOrgRequest) GetOrgId() int32 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

// 移除组织的响应消息
type RemoveOrgResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveOrgResponse) Reset() {
	*x = RemoveOrgResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveOrgResponse) ProtoMessage() {}

func (x *RemoveOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveOrgResponse.ProtoReflect.Descriptor instead.
func (*RemoveOrgResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{3}
}

// 获取组织的请求消息
type GetOrgRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要获取的组织ID
	OrgId         int32 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrgRequest) Reset() {
	*x = GetOrgRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgRequest) ProtoMessage() {}

func (x *GetOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgRequest.ProtoReflect.Descriptor instead.
func (*GetOrgRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetOrgRequest) GetOrgId() int32 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

// 获取组织的响应消息
type GetOrgResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 获取到的组织信息
	Org           *Org `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrgResponse) Reset() {
	*x = GetOrgResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgResponse) ProtoMessage() {}

func (x *GetOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgResponse.ProtoReflect.Descriptor instead.
func (*GetOrgResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetOrgResponse) GetOrg() *Org {
	if x != nil {
		return x.Org
	}
	return nil
}

// 更新组织的请求消息
type UpdateOrgRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 更新后的组织信息
	Org           *Org `protobuf:"bytes,1,opt,name=org,proto3" json:"org,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOrgRequest) Reset() {
	*x = UpdateOrgRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgRequest) ProtoMessage() {}

func (x *UpdateOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrgRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateOrgRequest) GetOrg() *Org {
	if x != nil {
		return x.Org
	}
	return nil
}

// 更新组织的响应消息
type UpdateOrgResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOrgResponse) Reset() {
	*x = UpdateOrgResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrgResponse) ProtoMessage() {}

func (x *UpdateOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrgResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrgResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{7}
}

// 添加代理的请求消息
type AddAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要添加的代理信息
	Agent         *Agent `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAgentRequest) Reset() {
	*x = AddAgentRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAgentRequest) ProtoMessage() {}

func (x *AddAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAgentRequest.ProtoReflect.Descriptor instead.
func (*AddAgentRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{8}
}

func (x *AddAgentRequest) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

// 添加代理的响应消息
type AddAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddAgentResponse) Reset() {
	*x = AddAgentResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAgentResponse) ProtoMessage() {}

func (x *AddAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAgentResponse.ProtoReflect.Descriptor instead.
func (*AddAgentResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{9}
}

// 移除代理的请求消息
type RemoveAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要移除的代理ID
	AgentId       int32 `protobuf:"varint,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveAgentRequest) Reset() {
	*x = RemoveAgentRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAgentRequest) ProtoMessage() {}

func (x *RemoveAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAgentRequest.ProtoReflect.Descriptor instead.
func (*RemoveAgentRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveAgentRequest) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

// 移除代理的响应消息
type RemoveAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveAgentResponse) Reset() {
	*x = RemoveAgentResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveAgentResponse) ProtoMessage() {}

func (x *RemoveAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveAgentResponse.ProtoReflect.Descriptor instead.
func (*RemoveAgentResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{11}
}

// 获取代理的请求消息
type GetAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要获取的代理ID
	AgentId       int32 `protobuf:"varint,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAgentRequest) Reset() {
	*x = GetAgentRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentRequest) ProtoMessage() {}

func (x *GetAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentRequest.ProtoReflect.Descriptor instead.
func (*GetAgentRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetAgentRequest) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

// 获取代理的响应消息
type GetAgentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 获取到的代理信息
	Agent         *Agent `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAgentResponse) Reset() {
	*x = GetAgentResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentResponse) ProtoMessage() {}

func (x *GetAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentResponse.ProtoReflect.Descriptor instead.
func (*GetAgentResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetAgentResponse) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

// 更新代理的请求消息
type UpdateAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 更新后的代理信息
	Agent         *Agent `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAgentRequest) Reset() {
	*x = UpdateAgentRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentRequest) ProtoMessage() {}

func (x *UpdateAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentRequest.ProtoReflect.Descriptor instead.
func (*UpdateAgentRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateAgentRequest) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

// 更新代理的响应消息
type UpdateAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAgentResponse) Reset() {
	*x = UpdateAgentResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAgentResponse) ProtoMessage() {}

func (x *UpdateAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAgentResponse.ProtoReflect.Descriptor instead.
func (*UpdateAgentResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{15}
}

// 计算税收的请求消息
type CalculateTaxesDueRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 政府组织的ID
	GovernmentId int32 `protobuf:"varint,1,opt,name=government_id,json=governmentId,proto3" json:"government_id,omitempty"`
	// 需要缴税的代理ID列表
	AgentIds []int32 `protobuf:"varint,2,rep,packed,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	// 代理的收入列表，与agent_ids一一对应
	Incomes []float32 `protobuf:"fixed32,3,rep,packed,name=incomes,proto3" json:"incomes,omitempty"`
	// 是否将税收重新分配给所有代理
	EnableRedistribution bool `protobuf:"varint,4,opt,name=enable_redistribution,json=enableRedistribution,proto3" json:"enable_redistribution,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CalculateTaxesDueRequest) Reset() {
	*x = CalculateTaxesDueRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateTaxesDueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTaxesDueRequest) ProtoMessage() {}

func (x *CalculateTaxesDueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTaxesDueRequest.ProtoReflect.Descriptor instead.
func (*CalculateTaxesDueRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{16}
}

func (x *CalculateTaxesDueRequest) GetGovernmentId() int32 {
	if x != nil {
		return x.GovernmentId
	}
	return 0
}

func (x *CalculateTaxesDueRequest) GetAgentIds() []int32 {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *CalculateTaxesDueRequest) GetIncomes() []float32 {
	if x != nil {
		return x.Incomes
	}
	return nil
}

func (x *CalculateTaxesDueRequest) GetEnableRedistribution() bool {
	if x != nil {
		return x.EnableRedistribution
	}
	return false
}

// 计算税收的响应消息
type CalculateTaxesDueResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 总税收金额
	TaxesDue float32 `protobuf:"fixed32,1,opt,name=taxes_due,json=taxesDue,proto3" json:"taxes_due,omitempty"`
	// 更新后的收入列表，与请求中的agent_ids一一对应
	UpdatedIncomes []float32 `protobuf:"fixed32,2,rep,packed,name=updated_incomes,json=updatedIncomes,proto3" json:"updated_incomes,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CalculateTaxesDueResponse) Reset() {
	*x = CalculateTaxesDueResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateTaxesDueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTaxesDueResponse) ProtoMessage() {}

func (x *CalculateTaxesDueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTaxesDueResponse.ProtoReflect.Descriptor instead.
func (*CalculateTaxesDueResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{17}
}

func (x *CalculateTaxesDueResponse) GetTaxesDue() float32 {
	if x != nil {
		return x.TaxesDue
	}
	return 0
}

func (x *CalculateTaxesDueResponse) GetUpdatedIncomes() []float32 {
	if x != nil {
		return x.UpdatedIncomes
	}
	return nil
}

// 计算消费的请求消息
type CalculateConsumptionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 可供消费的公司ID列表
	FirmIds []int32 `protobuf:"varint,1,rep,packed,name=firm_ids,json=firmIds,proto3" json:"firm_ids,omitempty"`
	// 进行消费的代理ID
	AgentId int32 `protobuf:"varint,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// 对每个公司的需求量，与firm_ids一一对应
	Demands []int32 `protobuf:"varint,3,rep,packed,name=demands,proto3" json:"demands,omitempty"`
	// 是否累加消费值
	ConsumptionAccumulation *bool `protobuf:"varint,4,opt,name=consumption_accumulation,json=consumptionAccumulation,proto3,oneof" json:"consumption_accumulation,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CalculateConsumptionRequest) Reset() {
	*x = CalculateConsumptionRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateConsumptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateConsumptionRequest) ProtoMessage() {}

func (x *CalculateConsumptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateConsumptionRequest.ProtoReflect.Descriptor instead.
func (*CalculateConsumptionRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{18}
}

func (x *CalculateConsumptionRequest) GetFirmIds() []int32 {
	if x != nil {
		return x.FirmIds
	}
	return nil
}

func (x *CalculateConsumptionRequest) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *CalculateConsumptionRequest) GetDemands() []int32 {
	if x != nil {
		return x.Demands
	}
	return nil
}

func (x *CalculateConsumptionRequest) GetConsumptionAccumulation() bool {
	if x != nil && x.ConsumptionAccumulation != nil {
		return *x.ConsumptionAccumulation
	}
	return false
}

// 计算消费的响应消息
type CalculateConsumptionResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 实际消费金额
	ActualConsumption float32 `protobuf:"fixed32,1,opt,name=actual_consumption,json=actualConsumption,proto3" json:"actual_consumption,omitempty"`
	// 消费是否成功
	Success       bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CalculateConsumptionResponse) Reset() {
	*x = CalculateConsumptionResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateConsumptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateConsumptionResponse) ProtoMessage() {}

func (x *CalculateConsumptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateConsumptionResponse.ProtoReflect.Descriptor instead.
func (*CalculateConsumptionResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{19}
}

func (x *CalculateConsumptionResponse) GetActualConsumption() float32 {
	if x != nil {
		return x.ActualConsumption
	}
	return 0
}

func (x *CalculateConsumptionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// 计算利息的请求消息
type CalculateInterestRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 银行组织的ID
	BankId int32 `protobuf:"varint,1,opt,name=bank_id,json=bankId,proto3" json:"bank_id,omitempty"`
	// 存款代理的ID列表
	AgentIds      []int32 `protobuf:"varint,2,rep,packed,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CalculateInterestRequest) Reset() {
	*x = CalculateInterestRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateInterestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateInterestRequest) ProtoMessage() {}

func (x *CalculateInterestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateInterestRequest.ProtoReflect.Descriptor instead.
func (*CalculateInterestRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{20}
}

func (x *CalculateInterestRequest) GetBankId() int32 {
	if x != nil {
		return x.BankId
	}
	return 0
}

func (x *CalculateInterestRequest) GetAgentIds() []int32 {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

// 计算利息的响应消息
type CalculateInterestResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 总利息金额
	TotalInterest float32 `protobuf:"fixed32,1,opt,name=total_interest,json=totalInterest,proto3" json:"total_interest,omitempty"`
	// 更新后的货币数量列表，与请求中的agent_ids一一对应
	UpdatedCurrencies []float32 `protobuf:"fixed32,2,rep,packed,name=updated_currencies,json=updatedCurrencies,proto3" json:"updated_currencies,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CalculateInterestResponse) Reset() {
	*x = CalculateInterestResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateInterestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateInterestResponse) ProtoMessage() {}

func (x *CalculateInterestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateInterestResponse.ProtoReflect.Descriptor instead.
func (*CalculateInterestResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{21}
}

func (x *CalculateInterestResponse) GetTotalInterest() float32 {
	if x != nil {
		return x.TotalInterest
	}
	return 0
}

func (x *CalculateInterestResponse) GetUpdatedCurrencies() []float32 {
	if x != nil {
		return x.UpdatedCurrencies
	}
	return nil
}

// 计算实际GDP的请求消息
type CalculateRealGDPRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 国家统计局组织的ID
	NbsAgentId    int32 `protobuf:"varint,1,opt,name=nbs_agent_id,json=nbsAgentId,proto3" json:"nbs_agent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CalculateRealGDPRequest) Reset() {
	*x = CalculateRealGDPRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateRealGDPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateRealGDPRequest) ProtoMessage() {}

func (x *CalculateRealGDPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateRealGDPRequest.ProtoReflect.Descriptor instead.
func (*CalculateRealGDPRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{22}
}

func (x *CalculateRealGDPRequest) GetNbsAgentId() int32 {
	if x != nil {
		return x.NbsAgentId
	}
	return 0
}

// 计算实际GDP的响应消息
type CalculateRealGDPResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 计算得到的实际GDP值
	RealGdp       float32 `protobuf:"fixed32,1,opt,name=real_gdp,json=realGdp,proto3" json:"real_gdp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CalculateRealGDPResponse) Reset() {
	*x = CalculateRealGDPResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateRealGDPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateRealGDPResponse) ProtoMessage() {}

func (x *CalculateRealGDPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateRealGDPResponse.ProtoReflect.Descriptor instead.
func (*CalculateRealGDPResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{23}
}

func (x *CalculateRealGDPResponse) GetRealGdp() float32 {
	if x != nil {
		return x.RealGdp
	}
	return 0
}

// 批量获取的请求消息
type BatchGetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要获取的ID列表
	Ids []int32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// 要获取的对象类型，可以是"org"或"agent"
	Type          string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetRequest) Reset() {
	*x = BatchGetRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetRequest) ProtoMessage() {}

func (x *BatchGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetRequest.ProtoReflect.Descriptor instead.
func (*BatchGetRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{24}
}

func (x *BatchGetRequest) GetIds() []int32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *BatchGetRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// 批量获取的响应消息
type BatchGetResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 获取到的组织列表
	Orgs []*Org `protobuf:"bytes,1,rep,name=orgs,proto3" json:"orgs,omitempty"`
	// 获取到的代理列表
	Agents        []*Agent `protobuf:"bytes,2,rep,name=agents,proto3" json:"agents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetResponse) Reset() {
	*x = BatchGetResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetResponse) ProtoMessage() {}

func (x *BatchGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetResponse.ProtoReflect.Descriptor instead.
func (*BatchGetResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{25}
}

func (x *BatchGetResponse) GetOrgs() []*Org {
	if x != nil {
		return x.Orgs
	}
	return nil
}

func (x *BatchGetResponse) GetAgents() []*Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

// 批量更新的请求消息
type BatchUpdateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要更新的组织列表，只更新请求中指定的字段
	Orgs []*Org `protobuf:"bytes,1,rep,name=orgs,proto3" json:"orgs,omitempty"`
	// 要更新的代理列表，只更新请求中指定的字段
	Agents        []*Agent `protobuf:"bytes,2,rep,name=agents,proto3" json:"agents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUpdateRequest) Reset() {
	*x = BatchUpdateRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateRequest) ProtoMessage() {}

func (x *BatchUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{26}
}

func (x *BatchUpdateRequest) GetOrgs() []*Org {
	if x != nil {
		return x.Orgs
	}
	return nil
}

func (x *BatchUpdateRequest) GetAgents() []*Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

// 批量更新的响应消息
type BatchUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUpdateResponse) Reset() {
	*x = BatchUpdateResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateResponse) ProtoMessage() {}

func (x *BatchUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{27}
}

// 批量设置的请求消息
type BatchSetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要设置的组织列表，将完全替换目标组织的所有字段
	Orgs []*Org `protobuf:"bytes,1,rep,name=orgs,proto3" json:"orgs,omitempty"`
	// 要设置的代理列表，将完全替换目标代理的所有字段
	Agents        []*Agent `protobuf:"bytes,2,rep,name=agents,proto3" json:"agents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchSetRequest) Reset() {
	*x = BatchSetRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetRequest) ProtoMessage() {}

func (x *BatchSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetRequest.ProtoReflect.Descriptor instead.
func (*BatchSetRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{28}
}

func (x *BatchSetRequest) GetOrgs() []*Org {
	if x != nil {
		return x.Orgs
	}
	return nil
}

func (x *BatchSetRequest) GetAgents() []*Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

// 批量设置的响应消息
type BatchSetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchSetResponse) Reset() {
	*x = BatchSetResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSetResponse) ProtoMessage() {}

func (x *BatchSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSetResponse.ProtoReflect.Descriptor instead.
func (*BatchSetResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{29}
}

// 组织增量更新的请求消息
type DeltaUpdateOrgRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要更新的组织ID
	OrgId int32 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// 名义GDP的增量变化
	DeltaNominalGdp []float32 `protobuf:"fixed32,2,rep,packed,name=delta_nominal_gdp,json=deltaNominalGdp,proto3" json:"delta_nominal_gdp,omitempty"`
	// 实际GDP的增量变化
	DeltaRealGdp []float32 `protobuf:"fixed32,3,rep,packed,name=delta_real_gdp,json=deltaRealGdp,proto3" json:"delta_real_gdp,omitempty"`
	// 失业率的增量变化
	DeltaUnemployment []float32 `protobuf:"fixed32,4,rep,packed,name=delta_unemployment,json=deltaUnemployment,proto3" json:"delta_unemployment,omitempty"`
	// 工资的增量变化
	DeltaWages []float32 `protobuf:"fixed32,5,rep,packed,name=delta_wages,json=deltaWages,proto3" json:"delta_wages,omitempty"`
	// 价格序列的增量变化
	DeltaPrices []float32 `protobuf:"fixed32,6,rep,packed,name=delta_prices,json=deltaPrices,proto3" json:"delta_prices,omitempty"`
	// 库存的增量变化
	DeltaInventory *int32 `protobuf:"varint,7,opt,name=delta_inventory,json=deltaInventory,proto3,oneof" json:"delta_inventory,omitempty"`
	// 价格的增量变化
	DeltaPrice *float32 `protobuf:"fixed32,8,opt,name=delta_price,json=deltaPrice,proto3,oneof" json:"delta_price,omitempty"`
	// 货币的增量变化
	DeltaCurrency *float32 `protobuf:"fixed32,9,opt,name=delta_currency,json=deltaCurrency,proto3,oneof" json:"delta_currency,omitempty"`
	// 利率的增量变化
	DeltaInterestRate *float32 `protobuf:"fixed32,10,opt,name=delta_interest_rate,json=deltaInterestRate,proto3,oneof" json:"delta_interest_rate,omitempty"`
	// 税率档位切分点的增量变化
	DeltaBracketCutoffs []float32 `protobuf:"fixed32,11,rep,packed,name=delta_bracket_cutoffs,json=deltaBracketCutoffs,proto3" json:"delta_bracket_cutoffs,omitempty"`
	// 税率档位的增量变化
	DeltaBracketRates []float32 `protobuf:"fixed32,12,rep,packed,name=delta_bracket_rates,json=deltaBracketRates,proto3" json:"delta_bracket_rates,omitempty"`
	// 总需求量的增量变化
	DeltaDemand *int32 `protobuf:"varint,13,opt,name=delta_demand,json=deltaDemand,proto3,oneof" json:"delta_demand,omitempty"`
	// 总销售量的增量变化
	DeltaSales *int32 `protobuf:"varint,14,opt,name=delta_sales,json=deltaSales,proto3,oneof" json:"delta_sales,omitempty"`
	// 要添加的员工ID列表
	AddEmployees []int32 `protobuf:"varint,15,rep,packed,name=add_employees,json=addEmployees,proto3" json:"add_employees,omitempty"`
	// 要移除的员工ID列表
	RemoveEmployees []int32 `protobuf:"varint,16,rep,packed,name=remove_employees,json=removeEmployees,proto3" json:"remove_employees,omitempty"`
	// 要添加的公民ID列表
	AddCitizens []int32 `protobuf:"varint,17,rep,packed,name=add_citizens,json=addCitizens,proto3" json:"add_citizens,omitempty"`
	// 要移除的公民ID列表
	RemoveCitizens []int32 `protobuf:"varint,18,rep,packed,name=remove_citizens,json=removeCitizens,proto3" json:"remove_citizens,omitempty"`
	// 消费货币的增量变化
	DeltaConsumptionCurrency []float32 `protobuf:"fixed32,19,rep,packed,name=delta_consumption_currency,json=deltaConsumptionCurrency,proto3" json:"delta_consumption_currency,omitempty"`
	// 消费倾向的增量变化
	DeltaConsumptionPropensity []float32 `protobuf:"fixed32,20,rep,packed,name=delta_consumption_propensity,json=deltaConsumptionPropensity,proto3" json:"delta_consumption_propensity,omitempty"`
	// 收入货币的增量变化
	DeltaIncomeCurrency []float32 `protobuf:"fixed32,21,rep,packed,name=delta_income_currency,json=deltaIncomeCurrency,proto3" json:"delta_income_currency,omitempty"`
	// 抑郁指数的增量变化
	DeltaDepression []float32 `protobuf:"fixed32,22,rep,packed,name=delta_depression,json=deltaDepression,proto3" json:"delta_depression,omitempty"`
	// 控制点的增量变化
	DeltaLocusControl []float32 `protobuf:"fixed32,23,rep,packed,name=delta_locus_control,json=deltaLocusControl,proto3" json:"delta_locus_control,omitempty"`
	// 工作时间的增量变化
	DeltaWorkingHours []float32 `protobuf:"fixed32,24,rep,packed,name=delta_working_hours,json=deltaWorkingHours,proto3" json:"delta_working_hours,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DeltaUpdateOrgRequest) Reset() {
	*x = DeltaUpdateOrgRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeltaUpdateOrgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaUpdateOrgRequest) ProtoMessage() {}

func (x *DeltaUpdateOrgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaUpdateOrgRequest.ProtoReflect.Descriptor instead.
func (*DeltaUpdateOrgRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{30}
}

func (x *DeltaUpdateOrgRequest) GetOrgId() int32 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *DeltaUpdateOrgRequest) GetDeltaNominalGdp() []float32 {
	if x != nil {
		return x.DeltaNominalGdp
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetDeltaRealGdp() []float32 {
	if x != nil {
		return x.DeltaRealGdp
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetDeltaUnemployment() []float32 {
	if x != nil {
		return x.DeltaUnemployment
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetDeltaWages() []float32 {
	if x != nil {
		return x.DeltaWages
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetDeltaPrices() []float32 {
	if x != nil {
		return x.DeltaPrices
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetDeltaInventory() int32 {
	if x != nil && x.DeltaInventory != nil {
		return *x.DeltaInventory
	}
	return 0
}

func (x *DeltaUpdateOrgRequest) GetDeltaPrice() float32 {
	if x != nil && x.DeltaPrice != nil {
		return *x.DeltaPrice
	}
	return 0
}

func (x *DeltaUpdateOrgRequest) GetDeltaCurrency() float32 {
	if x != nil && x.DeltaCurrency != nil {
		return *x.DeltaCurrency
	}
	return 0
}

func (x *DeltaUpdateOrgRequest) GetDeltaInterestRate() float32 {
	if x != nil && x.DeltaInterestRate != nil {
		return *x.DeltaInterestRate
	}
	return 0
}

func (x *DeltaUpdateOrgRequest) GetDeltaBracketCutoffs() []float32 {
	if x != nil {
		return x.DeltaBracketCutoffs
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetDeltaBracketRates() []float32 {
	if x != nil {
		return x.DeltaBracketRates
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetDeltaDemand() int32 {
	if x != nil && x.DeltaDemand != nil {
		return *x.DeltaDemand
	}
	return 0
}

func (x *DeltaUpdateOrgRequest) GetDeltaSales() int32 {
	if x != nil && x.DeltaSales != nil {
		return *x.DeltaSales
	}
	return 0
}

func (x *DeltaUpdateOrgRequest) GetAddEmployees() []int32 {
	if x != nil {
		return x.AddEmployees
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetRemoveEmployees() []int32 {
	if x != nil {
		return x.RemoveEmployees
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetAddCitizens() []int32 {
	if x != nil {
		return x.AddCitizens
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetRemoveCitizens() []int32 {
	if x != nil {
		return x.RemoveCitizens
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetDeltaConsumptionCurrency() []float32 {
	if x != nil {
		return x.DeltaConsumptionCurrency
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetDeltaConsumptionPropensity() []float32 {
	if x != nil {
		return x.DeltaConsumptionPropensity
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetDeltaIncomeCurrency() []float32 {
	if x != nil {
		return x.DeltaIncomeCurrency
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetDeltaDepression() []float32 {
	if x != nil {
		return x.DeltaDepression
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetDeltaLocusControl() []float32 {
	if x != nil {
		return x.DeltaLocusControl
	}
	return nil
}

func (x *DeltaUpdateOrgRequest) GetDeltaWorkingHours() []float32 {
	if x != nil {
		return x.DeltaWorkingHours
	}
	return nil
}

// 组织增量更新的响应消息
type DeltaUpdateOrgResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeltaUpdateOrgResponse) Reset() {
	*x = DeltaUpdateOrgResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeltaUpdateOrgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaUpdateOrgResponse) ProtoMessage() {}

func (x *DeltaUpdateOrgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaUpdateOrgResponse.ProtoReflect.Descriptor instead.
func (*DeltaUpdateOrgResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{31}
}

// 代理增量更新的请求消息
type DeltaUpdateAgentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要更新的代理ID
	AgentId int32 `protobuf:"varint,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// 货币的增量变化
	DeltaCurrency *float32 `protobuf:"fixed32,2,opt,name=delta_currency,json=deltaCurrency,proto3,oneof" json:"delta_currency,omitempty"`
	// 所属公司ID的变更
	NewFirmId *int32 `protobuf:"varint,3,opt,name=new_firm_id,json=newFirmId,proto3,oneof" json:"new_firm_id,omitempty"`
	// 技能的增量变化
	DeltaSkill *float32 `protobuf:"fixed32,4,opt,name=delta_skill,json=deltaSkill,proto3,oneof" json:"delta_skill,omitempty"`
	// 消费的增量变化
	DeltaConsumption *float32 `protobuf:"fixed32,5,opt,name=delta_consumption,json=deltaConsumption,proto3,oneof" json:"delta_consumption,omitempty"`
	// 收入的增量变化
	DeltaIncome   *float32 `protobuf:"fixed32,6,opt,name=delta_income,json=deltaIncome,proto3,oneof" json:"delta_income,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeltaUpdateAgentRequest) Reset() {
	*x = DeltaUpdateAgentRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeltaUpdateAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaUpdateAgentRequest) ProtoMessage() {}

func (x *DeltaUpdateAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaUpdateAgentRequest.ProtoReflect.Descriptor instead.
func (*DeltaUpdateAgentRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{32}
}

func (x *DeltaUpdateAgentRequest) GetAgentId() int32 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *DeltaUpdateAgentRequest) GetDeltaCurrency() float32 {
	if x != nil && x.DeltaCurrency != nil {
		return *x.DeltaCurrency
	}
	return 0
}

func (x *DeltaUpdateAgentRequest) GetNewFirmId() int32 {
	if x != nil && x.NewFirmId != nil {
		return *x.NewFirmId
	}
	return 0
}

func (x *DeltaUpdateAgentRequest) GetDeltaSkill() float32 {
	if x != nil && x.DeltaSkill != nil {
		return *x.DeltaSkill
	}
	return 0
}

func (x *DeltaUpdateAgentRequest) GetDeltaConsumption() float32 {
	if x != nil && x.DeltaConsumption != nil {
		return *x.DeltaConsumption
	}
	return 0
}

func (x *DeltaUpdateAgentRequest) GetDeltaIncome() float32 {
	if x != nil && x.DeltaIncome != nil {
		return *x.DeltaIncome
	}
	return 0
}

// 代理增量更新的响应消息
type DeltaUpdateAgentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeltaUpdateAgentResponse) Reset() {
	*x = DeltaUpdateAgentResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeltaUpdateAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeltaUpdateAgentResponse) ProtoMessage() {}

func (x *DeltaUpdateAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeltaUpdateAgentResponse.ProtoReflect.Descriptor instead.
func (*DeltaUpdateAgentResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{33}
}

// 批量增量更新的请求消息
type BatchDeltaUpdateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要增量更新的组织列表
	Orgs []*DeltaUpdateOrgRequest `protobuf:"bytes,1,rep,name=orgs,proto3" json:"orgs,omitempty"`
	// 要增量更新的代理列表
	Agents        []*DeltaUpdateAgentRequest `protobuf:"bytes,2,rep,name=agents,proto3" json:"agents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchDeltaUpdateRequest) Reset() {
	*x = BatchDeltaUpdateRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeltaUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeltaUpdateRequest) ProtoMessage() {}

func (x *BatchDeltaUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeltaUpdateRequest.ProtoReflect.Descriptor instead.
func (*BatchDeltaUpdateRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{34}
}

func (x *BatchDeltaUpdateRequest) GetOrgs() []*DeltaUpdateOrgRequest {
	if x != nil {
		return x.Orgs
	}
	return nil
}

func (x *BatchDeltaUpdateRequest) GetAgents() []*DeltaUpdateAgentRequest {
	if x != nil {
		return x.Agents
	}
	return nil
}

// 批量增量更新的响应消息
type BatchDeltaUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchDeltaUpdateResponse) Reset() {
	*x = BatchDeltaUpdateResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeltaUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeltaUpdateResponse) ProtoMessage() {}

func (x *BatchDeltaUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeltaUpdateResponse.ProtoReflect.Descriptor instead.
func (*BatchDeltaUpdateResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{35}
}

// 保存经济实体的请求消息
type SaveEconomyEntitiesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 保存文件的路径
	FilePath      string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveEconomyEntitiesRequest) Reset() {
	*x = SaveEconomyEntitiesRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveEconomyEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveEconomyEntitiesRequest) ProtoMessage() {}

func (x *SaveEconomyEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveEconomyEntitiesRequest.ProtoReflect.Descriptor instead.
func (*SaveEconomyEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{36}
}

func (x *SaveEconomyEntitiesRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

// 保存经济实体的响应消息
type SaveEconomyEntitiesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 保存的组织ID列表
	OrgIds []int32 `protobuf:"varint,1,rep,packed,name=org_ids,json=orgIds,proto3" json:"org_ids,omitempty"`
	// 保存的代理ID列表
	AgentIds      []int32 `protobuf:"varint,2,rep,packed,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveEconomyEntitiesResponse) Reset() {
	*x = SaveEconomyEntitiesResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveEconomyEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveEconomyEntitiesResponse) ProtoMessage() {}

func (x *SaveEconomyEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveEconomyEntitiesResponse.ProtoReflect.Descriptor instead.
func (*SaveEconomyEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{37}
}

func (x *SaveEconomyEntitiesResponse) GetOrgIds() []int32 {
	if x != nil {
		return x.OrgIds
	}
	return nil
}

func (x *SaveEconomyEntitiesResponse) GetAgentIds() []int32 {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

// 加载经济实体的请求消息
type LoadEconomyEntitiesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要加载的文件路径
	FilePath      string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadEconomyEntitiesRequest) Reset() {
	*x = LoadEconomyEntitiesRequest{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadEconomyEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadEconomyEntitiesRequest) ProtoMessage() {}

func (x *LoadEconomyEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadEconomyEntitiesRequest.ProtoReflect.Descriptor instead.
func (*LoadEconomyEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{38}
}

func (x *LoadEconomyEntitiesRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

// 加载经济实体的响应消息
type LoadEconomyEntitiesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 加载的组织ID列表
	OrgIds []int32 `protobuf:"varint,1,rep,packed,name=org_ids,json=orgIds,proto3" json:"org_ids,omitempty"`
	// 加载的代理ID列表
	AgentIds      []int32 `protobuf:"varint,2,rep,packed,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoadEconomyEntitiesResponse) Reset() {
	*x = LoadEconomyEntitiesResponse{}
	mi := &file_city_economy_v2_org_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadEconomyEntitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadEconomyEntitiesResponse) ProtoMessage() {}

func (x *LoadEconomyEntitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_city_economy_v2_org_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadEconomyEntitiesResponse.ProtoReflect.Descriptor instead.
func (*LoadEconomyEntitiesResponse) Descriptor() ([]byte, []int) {
	return file_city_economy_v2_org_service_proto_rawDescGZIP(), []int{39}
}

func (x *LoadEconomyEntitiesResponse) GetOrgIds() []int32 {
	if x != nil {
		return x.OrgIds
	}
	return nil
}

func (x *LoadEconomyEntitiesResponse) GetAgentIds() []int32 {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

var File_city_economy_v2_org_service_proto protoreflect.FileDescriptor

var file_city_economy_v2_org_service_proto_rawDesc = string([]byte{
	0x0a, 0x21, 0x63, 0x69, 0x74, 0x79, 0x2f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2f, 0x76,
	0x32, 0x2f, 0x6f, 0x72, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x2e, 0x76, 0x32, 0x1a, 0x1d, 0x63, 0x69, 0x74, 0x79, 0x2f, 0x65, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x37, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x22, 0x10, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x03, 0x6f, 0x72, 0x67,
	0x22, 0x3a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x22, 0x13, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3f, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2c, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x42,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x18, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x65, 0x73, 0x44, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67,
	0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x07, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x19, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x65, 0x73, 0x44, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x78, 0x65, 0x73, 0x5f, 0x64, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x61, 0x78, 0x65, 0x73, 0x44, 0x75,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x1b, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69,
	0x72, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x07, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x18, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x17,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x1c, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x50, 0x0a, 0x18, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62,
	0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x73, 0x22, 0x71, 0x0a, 0x19, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x17, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x47, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x62, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x62, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x35, 0x0a, 0x18, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x61, 0x6c, 0x47, 0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x67, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x72, 0x65, 0x61, 0x6c, 0x47, 0x64, 0x70, 0x22, 0x37, 0x0a, 0x0f, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x6c, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6f, 0x72, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x04, 0x6f, 0x72, 0x67, 0x73,
	0x12, 0x2e, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x6e, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6f, 0x72, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x04, 0x6f, 0x72, 0x67, 0x73,
	0x12, 0x2e, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x15, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x6f, 0x72,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e,
	0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x04,
	0x6f, 0x72, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x09, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x5f, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x64, 0x70, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x0f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x47, 0x64, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x5f, 0x67, 0x64, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0c, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x52, 0x65, 0x61, 0x6c, 0x47, 0x64, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x5f, 0x75, 0x6e, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x6e,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x5f, 0x77, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x57, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x0d, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x13, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x11, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x62, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x02, 0x52, 0x11, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x42, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64,
	0x64, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x69, 0x74,
	0x69, 0x7a, 0x65, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x64, 0x64,
	0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x63, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x02, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x40, 0x0a, 0x1c, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x02, 0x52, 0x1a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x13, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x0f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x44, 0x65, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6c, 0x6f, 0x63, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x17, 0x20, 0x03, 0x28, 0x02, 0x52, 0x11, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x4c, 0x6f, 0x63, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x02, 0x52, 0x11, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73,
	0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdf, 0x02, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x6c,
	0x74, 0x61, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x72, 0x6d, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x73, 0x6b, 0x69, 0x6c,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x53, 0x6b, 0x69, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69,
	0x72, 0x6d, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6f, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x6f, 0x72, 0x67, 0x73,
	0x12, 0x40, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39,
	0x0a, 0x1a, 0x53, 0x61, 0x76, 0x65, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x53, 0x0a, 0x1b, 0x53, 0x61, 0x76,
	0x65, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x39,
	0x0a, 0x1a, 0x4c, 0x6f, 0x61, 0x64, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x53, 0x0a, 0x1b, 0x4c, 0x6f, 0x61,
	0x64, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x32, 0x83,
	0x0f, 0x0a, 0x0a, 0x4f, 0x72, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a,
	0x06, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67, 0x12, 0x1e, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4f, 0x72, 0x67, 0x12, 0x21, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x72,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e,
	0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x12, 0x1e, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x12, 0x21, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x41,
	0x64, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x69, 0x74, 0x79,
	0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x64, 0x64, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x69,
	0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x69,
	0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x12, 0x20, 0x2e,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e,
	0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x12, 0x26, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x10, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x74,
	0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c,
	0x0a, 0x11, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x65, 0x73,
	0x44, 0x75, 0x65, 0x12, 0x29, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x78, 0x65, 0x73, 0x44, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x61, 0x78, 0x65, 0x73, 0x44,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x14,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e,
	0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x69, 0x0a, 0x10, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x6c, 0x47, 0x44, 0x50, 0x12, 0x28, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x61, 0x6c, 0x47, 0x44, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x47,
	0x44, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x13,
	0x53, 0x61, 0x76, 0x65, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e,
	0x76, 0x32, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x72, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65,
	0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x45, 0x63,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x45, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0xbf, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x69, 0x74,
	0x79, 0x2e, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e, 0x76, 0x32, 0x42, 0x0f, 0x4f, 0x72,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x39, 0x67, 0x69, 0x74, 0x2e, 0x66, 0x69, 0x62, 0x6c, 0x61, 0x62, 0x2e, 0x6e, 0x65, 0x74, 0x2f,
	0x73, 0x69, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x6f,
	0x2f, 0x63, 0x69, 0x74, 0x79, 0x2f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2f, 0x76, 0x32,
	0x3b, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x43, 0x45, 0x58,
	0xaa, 0x02, 0x0f, 0x43, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x2e,
	0x56, 0x32, 0xca, 0x02, 0x0f, 0x43, 0x69, 0x74, 0x79, 0x5c, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1b, 0x43, 0x69, 0x74, 0x79, 0x5c, 0x45, 0x63, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x11, 0x43, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x45, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_city_economy_v2_org_service_proto_rawDescOnce sync.Once
	file_city_economy_v2_org_service_proto_rawDescData []byte
)

func file_city_economy_v2_org_service_proto_rawDescGZIP() []byte {
	file_city_economy_v2_org_service_proto_rawDescOnce.Do(func() {
		file_city_economy_v2_org_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_city_economy_v2_org_service_proto_rawDesc), len(file_city_economy_v2_org_service_proto_rawDesc)))
	})
	return file_city_economy_v2_org_service_proto_rawDescData
}

var file_city_economy_v2_org_service_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_city_economy_v2_org_service_proto_goTypes = []any{
	(*AddOrgRequest)(nil),                // 0: city.economy.v2.AddOrgRequest
	(*AddOrgResponse)(nil),               // 1: city.economy.v2.AddOrgResponse
	(*RemoveOrgRequest)(nil),             // 2: city.economy.v2.RemoveOrgRequest
	(*RemoveOrgResponse)(nil),            // 3: city.economy.v2.RemoveOrgResponse
	(*GetOrgRequest)(nil),                // 4: city.economy.v2.GetOrgRequest
	(*GetOrgResponse)(nil),               // 5: city.economy.v2.GetOrgResponse
	(*UpdateOrgRequest)(nil),             // 6: city.economy.v2.UpdateOrgRequest
	(*UpdateOrgResponse)(nil),            // 7: city.economy.v2.UpdateOrgResponse
	(*AddAgentRequest)(nil),              // 8: city.economy.v2.AddAgentRequest
	(*AddAgentResponse)(nil),             // 9: city.economy.v2.AddAgentResponse
	(*RemoveAgentRequest)(nil),           // 10: city.economy.v2.RemoveAgentRequest
	(*RemoveAgentResponse)(nil),          // 11: city.economy.v2.RemoveAgentResponse
	(*GetAgentRequest)(nil),              // 12: city.economy.v2.GetAgentRequest
	(*GetAgentResponse)(nil),             // 13: city.economy.v2.GetAgentResponse
	(*UpdateAgentRequest)(nil),           // 14: city.economy.v2.UpdateAgentRequest
	(*UpdateAgentResponse)(nil),          // 15: city.economy.v2.UpdateAgentResponse
	(*CalculateTaxesDueRequest)(nil),     // 16: city.economy.v2.CalculateTaxesDueRequest
	(*CalculateTaxesDueResponse)(nil),    // 17: city.economy.v2.CalculateTaxesDueResponse
	(*CalculateConsumptionRequest)(nil),  // 18: city.economy.v2.CalculateConsumptionRequest
	(*CalculateConsumptionResponse)(nil), // 19: city.economy.v2.CalculateConsumptionResponse
	(*CalculateInterestRequest)(nil),     // 20: city.economy.v2.CalculateInterestRequest
	(*CalculateInterestResponse)(nil),    // 21: city.economy.v2.CalculateInterestResponse
	(*CalculateRealGDPRequest)(nil),      // 22: city.economy.v2.CalculateRealGDPRequest
	(*CalculateRealGDPResponse)(nil),     // 23: city.economy.v2.CalculateRealGDPResponse
	(*BatchGetRequest)(nil),              // 24: city.economy.v2.BatchGetRequest
	(*BatchGetResponse)(nil),             // 25: city.economy.v2.BatchGetResponse
	(*BatchUpdateRequest)(nil),           // 26: city.economy.v2.BatchUpdateRequest
	(*BatchUpdateResponse)(nil),          // 27: city.economy.v2.BatchUpdateResponse
	(*BatchSetRequest)(nil),              // 28: city.economy.v2.BatchSetRequest
	(*BatchSetResponse)(nil),             // 29: city.economy.v2.BatchSetResponse
	(*DeltaUpdateOrgRequest)(nil),        // 30: city.economy.v2.DeltaUpdateOrgRequest
	(*DeltaUpdateOrgResponse)(nil),       // 31: city.economy.v2.DeltaUpdateOrgResponse
	(*DeltaUpdateAgentRequest)(nil),      // 32: city.economy.v2.DeltaUpdateAgentRequest
	(*DeltaUpdateAgentResponse)(nil),     // 33: city.economy.v2.DeltaUpdateAgentResponse
	(*BatchDeltaUpdateRequest)(nil),      // 34: city.economy.v2.BatchDeltaUpdateRequest
	(*BatchDeltaUpdateResponse)(nil),     // 35: city.economy.v2.BatchDeltaUpdateResponse
	(*SaveEconomyEntitiesRequest)(nil),   // 36: city.economy.v2.SaveEconomyEntitiesRequest
	(*SaveEconomyEntitiesResponse)(nil),  // 37: city.economy.v2.SaveEconomyEntitiesResponse
	(*LoadEconomyEntitiesRequest)(nil),   // 38: city.economy.v2.LoadEconomyEntitiesRequest
	(*LoadEconomyEntitiesResponse)(nil),  // 39: city.economy.v2.LoadEconomyEntitiesResponse
	(*Org)(nil),                          // 40: city.economy.v2.Org
	(*Agent)(nil),                        // 41: city.economy.v2.Agent
}
var file_city_economy_v2_org_service_proto_depIdxs = []int32{
	40, // 0: city.economy.v2.AddOrgRequest.org:type_name -> city.economy.v2.Org
	40, // 1: city.economy.v2.GetOrgResponse.org:type_name -> city.economy.v2.Org
	40, // 2: city.economy.v2.UpdateOrgRequest.org:type_name -> city.economy.v2.Org
	41, // 3: city.economy.v2.AddAgentRequest.agent:type_name -> city.economy.v2.Agent
	41, // 4: city.economy.v2.GetAgentResponse.agent:type_name -> city.economy.v2.Agent
	41, // 5: city.economy.v2.UpdateAgentRequest.agent:type_name -> city.economy.v2.Agent
	40, // 6: city.economy.v2.BatchGetResponse.orgs:type_name -> city.economy.v2.Org
	41, // 7: city.economy.v2.BatchGetResponse.agents:type_name -> city.economy.v2.Agent
	40, // 8: city.economy.v2.BatchUpdateRequest.orgs:type_name -> city.economy.v2.Org
	41, // 9: city.economy.v2.BatchUpdateRequest.agents:type_name -> city.economy.v2.Agent
	40, // 10: city.economy.v2.BatchSetRequest.orgs:type_name -> city.economy.v2.Org
	41, // 11: city.economy.v2.BatchSetRequest.agents:type_name -> city.economy.v2.Agent
	30, // 12: city.economy.v2.BatchDeltaUpdateRequest.orgs:type_name -> city.economy.v2.DeltaUpdateOrgRequest
	32, // 13: city.economy.v2.BatchDeltaUpdateRequest.agents:type_name -> city.economy.v2.DeltaUpdateAgentRequest
	0,  // 14: city.economy.v2.OrgService.AddOrg:input_type -> city.economy.v2.AddOrgRequest
	2,  // 15: city.economy.v2.OrgService.RemoveOrg:input_type -> city.economy.v2.RemoveOrgRequest
	4,  // 16: city.economy.v2.OrgService.GetOrg:input_type -> city.economy.v2.GetOrgRequest
	6,  // 17: city.economy.v2.OrgService.UpdateOrg:input_type -> city.economy.v2.UpdateOrgRequest
	8,  // 18: city.economy.v2.OrgService.AddAgent:input_type -> city.economy.v2.AddAgentRequest
	10, // 19: city.economy.v2.OrgService.RemoveAgent:input_type -> city.economy.v2.RemoveAgentRequest
	12, // 20: city.economy.v2.OrgService.GetAgent:input_type -> city.economy.v2.GetAgentRequest
	14, // 21: city.economy.v2.OrgService.UpdateAgent:input_type -> city.economy.v2.UpdateAgentRequest
	24, // 22: city.economy.v2.OrgService.BatchGet:input_type -> city.economy.v2.BatchGetRequest
	26, // 23: city.economy.v2.OrgService.BatchUpdate:input_type -> city.economy.v2.BatchUpdateRequest
	28, // 24: city.economy.v2.OrgService.BatchSet:input_type -> city.economy.v2.BatchSetRequest
	30, // 25: city.economy.v2.OrgService.DeltaUpdateOrg:input_type -> city.economy.v2.DeltaUpdateOrgRequest
	32, // 26: city.economy.v2.OrgService.DeltaUpdateAgent:input_type -> city.economy.v2.DeltaUpdateAgentRequest
	34, // 27: city.economy.v2.OrgService.BatchDeltaUpdate:input_type -> city.economy.v2.BatchDeltaUpdateRequest
	16, // 28: city.economy.v2.OrgService.CalculateTaxesDue:input_type -> city.economy.v2.CalculateTaxesDueRequest
	18, // 29: city.economy.v2.OrgService.CalculateConsumption:input_type -> city.economy.v2.CalculateConsumptionRequest
	20, // 30: city.economy.v2.OrgService.CalculateInterest:input_type -> city.economy.v2.CalculateInterestRequest
	22, // 31: city.economy.v2.OrgService.CalculateRealGDP:input_type -> city.economy.v2.CalculateRealGDPRequest
	36, // 32: city.economy.v2.OrgService.SaveEconomyEntities:input_type -> city.economy.v2.SaveEconomyEntitiesRequest
	38, // 33: city.economy.v2.OrgService.LoadEconomyEntities:input_type -> city.economy.v2.LoadEconomyEntitiesRequest
	1,  // 34: city.economy.v2.OrgService.AddOrg:output_type -> city.economy.v2.AddOrgResponse
	3,  // 35: city.economy.v2.OrgService.RemoveOrg:output_type -> city.economy.v2.RemoveOrgResponse
	5,  // 36: city.economy.v2.OrgService.GetOrg:output_type -> city.economy.v2.GetOrgResponse
	7,  // 37: city.economy.v2.OrgService.UpdateOrg:output_type -> city.economy.v2.UpdateOrgResponse
	9,  // 38: city.economy.v2.OrgService.AddAgent:output_type -> city.economy.v2.AddAgentResponse
	11, // 39: city.economy.v2.OrgService.RemoveAgent:output_type -> city.economy.v2.RemoveAgentResponse
	13, // 40: city.economy.v2.OrgService.GetAgent:output_type -> city.economy.v2.GetAgentResponse
	15, // 41: city.economy.v2.OrgService.UpdateAgent:output_type -> city.economy.v2.UpdateAgentResponse
	25, // 42: city.economy.v2.OrgService.BatchGet:output_type -> city.economy.v2.BatchGetResponse
	27, // 43: city.economy.v2.OrgService.BatchUpdate:output_type -> city.economy.v2.BatchUpdateResponse
	29, // 44: city.economy.v2.OrgService.BatchSet:output_type -> city.economy.v2.BatchSetResponse
	31, // 45: city.economy.v2.OrgService.DeltaUpdateOrg:output_type -> city.economy.v2.DeltaUpdateOrgResponse
	33, // 46: city.economy.v2.OrgService.DeltaUpdateAgent:output_type -> city.economy.v2.DeltaUpdateAgentResponse
	35, // 47: city.economy.v2.OrgService.BatchDeltaUpdate:output_type -> city.economy.v2.BatchDeltaUpdateResponse
	17, // 48: city.economy.v2.OrgService.CalculateTaxesDue:output_type -> city.economy.v2.CalculateTaxesDueResponse
	19, // 49: city.economy.v2.OrgService.CalculateConsumption:output_type -> city.economy.v2.CalculateConsumptionResponse
	21, // 50: city.economy.v2.OrgService.CalculateInterest:output_type -> city.economy.v2.CalculateInterestResponse
	23, // 51: city.economy.v2.OrgService.CalculateRealGDP:output_type -> city.economy.v2.CalculateRealGDPResponse
	37, // 52: city.economy.v2.OrgService.SaveEconomyEntities:output_type -> city.economy.v2.SaveEconomyEntitiesResponse
	39, // 53: city.economy.v2.OrgService.LoadEconomyEntities:output_type -> city.economy.v2.LoadEconomyEntitiesResponse
	34, // [34:54] is the sub-list for method output_type
	14, // [14:34] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_city_economy_v2_org_service_proto_init() }
func file_city_economy_v2_org_service_proto_init() {
	if File_city_economy_v2_org_service_proto != nil {
		return
	}
	file_city_economy_v2_economy_proto_init()
	file_city_economy_v2_org_service_proto_msgTypes[18].OneofWrappers = []any{}
	file_city_economy_v2_org_service_proto_msgTypes[30].OneofWrappers = []any{}
	file_city_economy_v2_org_service_proto_msgTypes[32].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_city_economy_v2_org_service_proto_rawDesc), len(file_city_economy_v2_org_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_city_economy_v2_org_service_proto_goTypes,
		DependencyIndexes: file_city_economy_v2_org_service_proto_depIdxs,
		MessageInfos:      file_city_economy_v2_org_service_proto_msgTypes,
	}.Build()
	File_city_economy_v2_org_service_proto = out.File
	file_city_economy_v2_org_service_proto_goTypes = nil
	file_city_economy_v2_org_service_proto_depIdxs = nil
}
