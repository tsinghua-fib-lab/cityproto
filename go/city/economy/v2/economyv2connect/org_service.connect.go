// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/economy/v2/org_service.proto

package economyv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "git.fiblab.net/sim/protos/v2/go/city/economy/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrgServiceName is the fully-qualified name of the OrgService service.
	OrgServiceName = "city.economy.v2.OrgService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrgServiceAddOrgProcedure is the fully-qualified name of the OrgService's AddOrg RPC.
	OrgServiceAddOrgProcedure = "/city.economy.v2.OrgService/AddOrg"
	// OrgServiceRemoveOrgProcedure is the fully-qualified name of the OrgService's RemoveOrg RPC.
	OrgServiceRemoveOrgProcedure = "/city.economy.v2.OrgService/RemoveOrg"
	// OrgServiceGetOrgProcedure is the fully-qualified name of the OrgService's GetOrg RPC.
	OrgServiceGetOrgProcedure = "/city.economy.v2.OrgService/GetOrg"
	// OrgServiceUpdateOrgProcedure is the fully-qualified name of the OrgService's UpdateOrg RPC.
	OrgServiceUpdateOrgProcedure = "/city.economy.v2.OrgService/UpdateOrg"
	// OrgServiceAddAgentProcedure is the fully-qualified name of the OrgService's AddAgent RPC.
	OrgServiceAddAgentProcedure = "/city.economy.v2.OrgService/AddAgent"
	// OrgServiceRemoveAgentProcedure is the fully-qualified name of the OrgService's RemoveAgent RPC.
	OrgServiceRemoveAgentProcedure = "/city.economy.v2.OrgService/RemoveAgent"
	// OrgServiceGetAgentProcedure is the fully-qualified name of the OrgService's GetAgent RPC.
	OrgServiceGetAgentProcedure = "/city.economy.v2.OrgService/GetAgent"
	// OrgServiceUpdateAgentProcedure is the fully-qualified name of the OrgService's UpdateAgent RPC.
	OrgServiceUpdateAgentProcedure = "/city.economy.v2.OrgService/UpdateAgent"
	// OrgServiceBatchGetProcedure is the fully-qualified name of the OrgService's BatchGet RPC.
	OrgServiceBatchGetProcedure = "/city.economy.v2.OrgService/BatchGet"
	// OrgServiceBatchUpdateProcedure is the fully-qualified name of the OrgService's BatchUpdate RPC.
	OrgServiceBatchUpdateProcedure = "/city.economy.v2.OrgService/BatchUpdate"
	// OrgServiceBatchSetProcedure is the fully-qualified name of the OrgService's BatchSet RPC.
	OrgServiceBatchSetProcedure = "/city.economy.v2.OrgService/BatchSet"
	// OrgServiceDeltaUpdateOrgProcedure is the fully-qualified name of the OrgService's DeltaUpdateOrg
	// RPC.
	OrgServiceDeltaUpdateOrgProcedure = "/city.economy.v2.OrgService/DeltaUpdateOrg"
	// OrgServiceDeltaUpdateAgentProcedure is the fully-qualified name of the OrgService's
	// DeltaUpdateAgent RPC.
	OrgServiceDeltaUpdateAgentProcedure = "/city.economy.v2.OrgService/DeltaUpdateAgent"
	// OrgServiceBatchDeltaUpdateProcedure is the fully-qualified name of the OrgService's
	// BatchDeltaUpdate RPC.
	OrgServiceBatchDeltaUpdateProcedure = "/city.economy.v2.OrgService/BatchDeltaUpdate"
	// OrgServiceCalculateTaxesDueProcedure is the fully-qualified name of the OrgService's
	// CalculateTaxesDue RPC.
	OrgServiceCalculateTaxesDueProcedure = "/city.economy.v2.OrgService/CalculateTaxesDue"
	// OrgServiceCalculateConsumptionProcedure is the fully-qualified name of the OrgService's
	// CalculateConsumption RPC.
	OrgServiceCalculateConsumptionProcedure = "/city.economy.v2.OrgService/CalculateConsumption"
	// OrgServiceCalculateInterestProcedure is the fully-qualified name of the OrgService's
	// CalculateInterest RPC.
	OrgServiceCalculateInterestProcedure = "/city.economy.v2.OrgService/CalculateInterest"
	// OrgServiceCalculateRealGDPProcedure is the fully-qualified name of the OrgService's
	// CalculateRealGDP RPC.
	OrgServiceCalculateRealGDPProcedure = "/city.economy.v2.OrgService/CalculateRealGDP"
	// OrgServiceSaveEconomyEntitiesProcedure is the fully-qualified name of the OrgService's
	// SaveEconomyEntities RPC.
	OrgServiceSaveEconomyEntitiesProcedure = "/city.economy.v2.OrgService/SaveEconomyEntities"
	// OrgServiceLoadEconomyEntitiesProcedure is the fully-qualified name of the OrgService's
	// LoadEconomyEntities RPC.
	OrgServiceLoadEconomyEntitiesProcedure = "/city.economy.v2.OrgService/LoadEconomyEntities"
)

// OrgServiceClient is a client for the city.economy.v2.OrgService service.
type OrgServiceClient interface {
	// AddOrg 添加一个新的组织到系统中
	AddOrg(context.Context, *connect.Request[v2.AddOrgRequest]) (*connect.Response[v2.AddOrgResponse], error)
	// RemoveOrg 从系统中移除指定的组织
	RemoveOrg(context.Context, *connect.Request[v2.RemoveOrgRequest]) (*connect.Response[v2.RemoveOrgResponse], error)
	// GetOrg 获取指定组织的完整信息
	GetOrg(context.Context, *connect.Request[v2.GetOrgRequest]) (*connect.Response[v2.GetOrgResponse], error)
	// UpdateOrg 更新指定组织的信息
	UpdateOrg(context.Context, *connect.Request[v2.UpdateOrgRequest]) (*connect.Response[v2.UpdateOrgResponse], error)
	// AddAgent 添加一个新的代理到系统中
	AddAgent(context.Context, *connect.Request[v2.AddAgentRequest]) (*connect.Response[v2.AddAgentResponse], error)
	// RemoveAgent 从系统中移除指定的代理
	RemoveAgent(context.Context, *connect.Request[v2.RemoveAgentRequest]) (*connect.Response[v2.RemoveAgentResponse], error)
	// GetAgent 获取指定代理的完整信息
	GetAgent(context.Context, *connect.Request[v2.GetAgentRequest]) (*connect.Response[v2.GetAgentResponse], error)
	// UpdateAgent 更新指定代理的信息
	UpdateAgent(context.Context, *connect.Request[v2.UpdateAgentRequest]) (*connect.Response[v2.UpdateAgentResponse], error)
	// BatchGet 批量获取多个组织或代理的信息
	BatchGet(context.Context, *connect.Request[v2.BatchGetRequest]) (*connect.Response[v2.BatchGetResponse], error)
	// BatchUpdate 批量更新多个组织或代理的信息，只更新请求中指定的字段
	BatchUpdate(context.Context, *connect.Request[v2.BatchUpdateRequest]) (*connect.Response[v2.BatchUpdateResponse], error)
	// BatchSet 批量设置多个组织或代理的信息，完全替换所有字段
	BatchSet(context.Context, *connect.Request[v2.BatchSetRequest]) (*connect.Response[v2.BatchSetResponse], error)
	// DeltaUpdateOrg 对组织进行增量更新
	DeltaUpdateOrg(context.Context, *connect.Request[v2.DeltaUpdateOrgRequest]) (*connect.Response[v2.DeltaUpdateOrgResponse], error)
	// DeltaUpdateAgent 对代理进行增量更新
	DeltaUpdateAgent(context.Context, *connect.Request[v2.DeltaUpdateAgentRequest]) (*connect.Response[v2.DeltaUpdateAgentResponse], error)
	// BatchDeltaUpdate 批量进行增量更新
	BatchDeltaUpdate(context.Context, *connect.Request[v2.BatchDeltaUpdateRequest]) (*connect.Response[v2.BatchDeltaUpdateResponse], error)
	// CalculateTaxesDue 计算应缴税额并可选择进行再分配
	CalculateTaxesDue(context.Context, *connect.Request[v2.CalculateTaxesDueRequest]) (*connect.Response[v2.CalculateTaxesDueResponse], error)
	// CalculateConsumption 计算代理的消费情况
	CalculateConsumption(context.Context, *connect.Request[v2.CalculateConsumptionRequest]) (*connect.Response[v2.CalculateConsumptionResponse], error)
	// CalculateInterest 计算银行利息
	CalculateInterest(context.Context, *connect.Request[v2.CalculateInterestRequest]) (*connect.Response[v2.CalculateInterestResponse], error)
	// CalculateRealGDP 计算实际GDP
	CalculateRealGDP(context.Context, *connect.Request[v2.CalculateRealGDPRequest]) (*connect.Response[v2.CalculateRealGDPResponse], error)
	// SaveEconomyEntities 保存经济系统的当前状态
	SaveEconomyEntities(context.Context, *connect.Request[v2.SaveEconomyEntitiesRequest]) (*connect.Response[v2.SaveEconomyEntitiesResponse], error)
	// LoadEconomyEntities 加载经济系统的状态
	LoadEconomyEntities(context.Context, *connect.Request[v2.LoadEconomyEntitiesRequest]) (*connect.Response[v2.LoadEconomyEntitiesResponse], error)
}

// NewOrgServiceClient constructs a client for the city.economy.v2.OrgService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrgServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrgServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	orgServiceMethods := v2.File_city_economy_v2_org_service_proto.Services().ByName("OrgService").Methods()
	return &orgServiceClient{
		addOrg: connect.NewClient[v2.AddOrgRequest, v2.AddOrgResponse](
			httpClient,
			baseURL+OrgServiceAddOrgProcedure,
			connect.WithSchema(orgServiceMethods.ByName("AddOrg")),
			connect.WithClientOptions(opts...),
		),
		removeOrg: connect.NewClient[v2.RemoveOrgRequest, v2.RemoveOrgResponse](
			httpClient,
			baseURL+OrgServiceRemoveOrgProcedure,
			connect.WithSchema(orgServiceMethods.ByName("RemoveOrg")),
			connect.WithClientOptions(opts...),
		),
		getOrg: connect.NewClient[v2.GetOrgRequest, v2.GetOrgResponse](
			httpClient,
			baseURL+OrgServiceGetOrgProcedure,
			connect.WithSchema(orgServiceMethods.ByName("GetOrg")),
			connect.WithClientOptions(opts...),
		),
		updateOrg: connect.NewClient[v2.UpdateOrgRequest, v2.UpdateOrgResponse](
			httpClient,
			baseURL+OrgServiceUpdateOrgProcedure,
			connect.WithSchema(orgServiceMethods.ByName("UpdateOrg")),
			connect.WithClientOptions(opts...),
		),
		addAgent: connect.NewClient[v2.AddAgentRequest, v2.AddAgentResponse](
			httpClient,
			baseURL+OrgServiceAddAgentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("AddAgent")),
			connect.WithClientOptions(opts...),
		),
		removeAgent: connect.NewClient[v2.RemoveAgentRequest, v2.RemoveAgentResponse](
			httpClient,
			baseURL+OrgServiceRemoveAgentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("RemoveAgent")),
			connect.WithClientOptions(opts...),
		),
		getAgent: connect.NewClient[v2.GetAgentRequest, v2.GetAgentResponse](
			httpClient,
			baseURL+OrgServiceGetAgentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("GetAgent")),
			connect.WithClientOptions(opts...),
		),
		updateAgent: connect.NewClient[v2.UpdateAgentRequest, v2.UpdateAgentResponse](
			httpClient,
			baseURL+OrgServiceUpdateAgentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("UpdateAgent")),
			connect.WithClientOptions(opts...),
		),
		batchGet: connect.NewClient[v2.BatchGetRequest, v2.BatchGetResponse](
			httpClient,
			baseURL+OrgServiceBatchGetProcedure,
			connect.WithSchema(orgServiceMethods.ByName("BatchGet")),
			connect.WithClientOptions(opts...),
		),
		batchUpdate: connect.NewClient[v2.BatchUpdateRequest, v2.BatchUpdateResponse](
			httpClient,
			baseURL+OrgServiceBatchUpdateProcedure,
			connect.WithSchema(orgServiceMethods.ByName("BatchUpdate")),
			connect.WithClientOptions(opts...),
		),
		batchSet: connect.NewClient[v2.BatchSetRequest, v2.BatchSetResponse](
			httpClient,
			baseURL+OrgServiceBatchSetProcedure,
			connect.WithSchema(orgServiceMethods.ByName("BatchSet")),
			connect.WithClientOptions(opts...),
		),
		deltaUpdateOrg: connect.NewClient[v2.DeltaUpdateOrgRequest, v2.DeltaUpdateOrgResponse](
			httpClient,
			baseURL+OrgServiceDeltaUpdateOrgProcedure,
			connect.WithSchema(orgServiceMethods.ByName("DeltaUpdateOrg")),
			connect.WithClientOptions(opts...),
		),
		deltaUpdateAgent: connect.NewClient[v2.DeltaUpdateAgentRequest, v2.DeltaUpdateAgentResponse](
			httpClient,
			baseURL+OrgServiceDeltaUpdateAgentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("DeltaUpdateAgent")),
			connect.WithClientOptions(opts...),
		),
		batchDeltaUpdate: connect.NewClient[v2.BatchDeltaUpdateRequest, v2.BatchDeltaUpdateResponse](
			httpClient,
			baseURL+OrgServiceBatchDeltaUpdateProcedure,
			connect.WithSchema(orgServiceMethods.ByName("BatchDeltaUpdate")),
			connect.WithClientOptions(opts...),
		),
		calculateTaxesDue: connect.NewClient[v2.CalculateTaxesDueRequest, v2.CalculateTaxesDueResponse](
			httpClient,
			baseURL+OrgServiceCalculateTaxesDueProcedure,
			connect.WithSchema(orgServiceMethods.ByName("CalculateTaxesDue")),
			connect.WithClientOptions(opts...),
		),
		calculateConsumption: connect.NewClient[v2.CalculateConsumptionRequest, v2.CalculateConsumptionResponse](
			httpClient,
			baseURL+OrgServiceCalculateConsumptionProcedure,
			connect.WithSchema(orgServiceMethods.ByName("CalculateConsumption")),
			connect.WithClientOptions(opts...),
		),
		calculateInterest: connect.NewClient[v2.CalculateInterestRequest, v2.CalculateInterestResponse](
			httpClient,
			baseURL+OrgServiceCalculateInterestProcedure,
			connect.WithSchema(orgServiceMethods.ByName("CalculateInterest")),
			connect.WithClientOptions(opts...),
		),
		calculateRealGDP: connect.NewClient[v2.CalculateRealGDPRequest, v2.CalculateRealGDPResponse](
			httpClient,
			baseURL+OrgServiceCalculateRealGDPProcedure,
			connect.WithSchema(orgServiceMethods.ByName("CalculateRealGDP")),
			connect.WithClientOptions(opts...),
		),
		saveEconomyEntities: connect.NewClient[v2.SaveEconomyEntitiesRequest, v2.SaveEconomyEntitiesResponse](
			httpClient,
			baseURL+OrgServiceSaveEconomyEntitiesProcedure,
			connect.WithSchema(orgServiceMethods.ByName("SaveEconomyEntities")),
			connect.WithClientOptions(opts...),
		),
		loadEconomyEntities: connect.NewClient[v2.LoadEconomyEntitiesRequest, v2.LoadEconomyEntitiesResponse](
			httpClient,
			baseURL+OrgServiceLoadEconomyEntitiesProcedure,
			connect.WithSchema(orgServiceMethods.ByName("LoadEconomyEntities")),
			connect.WithClientOptions(opts...),
		),
	}
}

// orgServiceClient implements OrgServiceClient.
type orgServiceClient struct {
	addOrg               *connect.Client[v2.AddOrgRequest, v2.AddOrgResponse]
	removeOrg            *connect.Client[v2.RemoveOrgRequest, v2.RemoveOrgResponse]
	getOrg               *connect.Client[v2.GetOrgRequest, v2.GetOrgResponse]
	updateOrg            *connect.Client[v2.UpdateOrgRequest, v2.UpdateOrgResponse]
	addAgent             *connect.Client[v2.AddAgentRequest, v2.AddAgentResponse]
	removeAgent          *connect.Client[v2.RemoveAgentRequest, v2.RemoveAgentResponse]
	getAgent             *connect.Client[v2.GetAgentRequest, v2.GetAgentResponse]
	updateAgent          *connect.Client[v2.UpdateAgentRequest, v2.UpdateAgentResponse]
	batchGet             *connect.Client[v2.BatchGetRequest, v2.BatchGetResponse]
	batchUpdate          *connect.Client[v2.BatchUpdateRequest, v2.BatchUpdateResponse]
	batchSet             *connect.Client[v2.BatchSetRequest, v2.BatchSetResponse]
	deltaUpdateOrg       *connect.Client[v2.DeltaUpdateOrgRequest, v2.DeltaUpdateOrgResponse]
	deltaUpdateAgent     *connect.Client[v2.DeltaUpdateAgentRequest, v2.DeltaUpdateAgentResponse]
	batchDeltaUpdate     *connect.Client[v2.BatchDeltaUpdateRequest, v2.BatchDeltaUpdateResponse]
	calculateTaxesDue    *connect.Client[v2.CalculateTaxesDueRequest, v2.CalculateTaxesDueResponse]
	calculateConsumption *connect.Client[v2.CalculateConsumptionRequest, v2.CalculateConsumptionResponse]
	calculateInterest    *connect.Client[v2.CalculateInterestRequest, v2.CalculateInterestResponse]
	calculateRealGDP     *connect.Client[v2.CalculateRealGDPRequest, v2.CalculateRealGDPResponse]
	saveEconomyEntities  *connect.Client[v2.SaveEconomyEntitiesRequest, v2.SaveEconomyEntitiesResponse]
	loadEconomyEntities  *connect.Client[v2.LoadEconomyEntitiesRequest, v2.LoadEconomyEntitiesResponse]
}

// AddOrg calls city.economy.v2.OrgService.AddOrg.
func (c *orgServiceClient) AddOrg(ctx context.Context, req *connect.Request[v2.AddOrgRequest]) (*connect.Response[v2.AddOrgResponse], error) {
	return c.addOrg.CallUnary(ctx, req)
}

// RemoveOrg calls city.economy.v2.OrgService.RemoveOrg.
func (c *orgServiceClient) RemoveOrg(ctx context.Context, req *connect.Request[v2.RemoveOrgRequest]) (*connect.Response[v2.RemoveOrgResponse], error) {
	return c.removeOrg.CallUnary(ctx, req)
}

// GetOrg calls city.economy.v2.OrgService.GetOrg.
func (c *orgServiceClient) GetOrg(ctx context.Context, req *connect.Request[v2.GetOrgRequest]) (*connect.Response[v2.GetOrgResponse], error) {
	return c.getOrg.CallUnary(ctx, req)
}

// UpdateOrg calls city.economy.v2.OrgService.UpdateOrg.
func (c *orgServiceClient) UpdateOrg(ctx context.Context, req *connect.Request[v2.UpdateOrgRequest]) (*connect.Response[v2.UpdateOrgResponse], error) {
	return c.updateOrg.CallUnary(ctx, req)
}

// AddAgent calls city.economy.v2.OrgService.AddAgent.
func (c *orgServiceClient) AddAgent(ctx context.Context, req *connect.Request[v2.AddAgentRequest]) (*connect.Response[v2.AddAgentResponse], error) {
	return c.addAgent.CallUnary(ctx, req)
}

// RemoveAgent calls city.economy.v2.OrgService.RemoveAgent.
func (c *orgServiceClient) RemoveAgent(ctx context.Context, req *connect.Request[v2.RemoveAgentRequest]) (*connect.Response[v2.RemoveAgentResponse], error) {
	return c.removeAgent.CallUnary(ctx, req)
}

// GetAgent calls city.economy.v2.OrgService.GetAgent.
func (c *orgServiceClient) GetAgent(ctx context.Context, req *connect.Request[v2.GetAgentRequest]) (*connect.Response[v2.GetAgentResponse], error) {
	return c.getAgent.CallUnary(ctx, req)
}

// UpdateAgent calls city.economy.v2.OrgService.UpdateAgent.
func (c *orgServiceClient) UpdateAgent(ctx context.Context, req *connect.Request[v2.UpdateAgentRequest]) (*connect.Response[v2.UpdateAgentResponse], error) {
	return c.updateAgent.CallUnary(ctx, req)
}

// BatchGet calls city.economy.v2.OrgService.BatchGet.
func (c *orgServiceClient) BatchGet(ctx context.Context, req *connect.Request[v2.BatchGetRequest]) (*connect.Response[v2.BatchGetResponse], error) {
	return c.batchGet.CallUnary(ctx, req)
}

// BatchUpdate calls city.economy.v2.OrgService.BatchUpdate.
func (c *orgServiceClient) BatchUpdate(ctx context.Context, req *connect.Request[v2.BatchUpdateRequest]) (*connect.Response[v2.BatchUpdateResponse], error) {
	return c.batchUpdate.CallUnary(ctx, req)
}

// BatchSet calls city.economy.v2.OrgService.BatchSet.
func (c *orgServiceClient) BatchSet(ctx context.Context, req *connect.Request[v2.BatchSetRequest]) (*connect.Response[v2.BatchSetResponse], error) {
	return c.batchSet.CallUnary(ctx, req)
}

// DeltaUpdateOrg calls city.economy.v2.OrgService.DeltaUpdateOrg.
func (c *orgServiceClient) DeltaUpdateOrg(ctx context.Context, req *connect.Request[v2.DeltaUpdateOrgRequest]) (*connect.Response[v2.DeltaUpdateOrgResponse], error) {
	return c.deltaUpdateOrg.CallUnary(ctx, req)
}

// DeltaUpdateAgent calls city.economy.v2.OrgService.DeltaUpdateAgent.
func (c *orgServiceClient) DeltaUpdateAgent(ctx context.Context, req *connect.Request[v2.DeltaUpdateAgentRequest]) (*connect.Response[v2.DeltaUpdateAgentResponse], error) {
	return c.deltaUpdateAgent.CallUnary(ctx, req)
}

// BatchDeltaUpdate calls city.economy.v2.OrgService.BatchDeltaUpdate.
func (c *orgServiceClient) BatchDeltaUpdate(ctx context.Context, req *connect.Request[v2.BatchDeltaUpdateRequest]) (*connect.Response[v2.BatchDeltaUpdateResponse], error) {
	return c.batchDeltaUpdate.CallUnary(ctx, req)
}

// CalculateTaxesDue calls city.economy.v2.OrgService.CalculateTaxesDue.
func (c *orgServiceClient) CalculateTaxesDue(ctx context.Context, req *connect.Request[v2.CalculateTaxesDueRequest]) (*connect.Response[v2.CalculateTaxesDueResponse], error) {
	return c.calculateTaxesDue.CallUnary(ctx, req)
}

// CalculateConsumption calls city.economy.v2.OrgService.CalculateConsumption.
func (c *orgServiceClient) CalculateConsumption(ctx context.Context, req *connect.Request[v2.CalculateConsumptionRequest]) (*connect.Response[v2.CalculateConsumptionResponse], error) {
	return c.calculateConsumption.CallUnary(ctx, req)
}

// CalculateInterest calls city.economy.v2.OrgService.CalculateInterest.
func (c *orgServiceClient) CalculateInterest(ctx context.Context, req *connect.Request[v2.CalculateInterestRequest]) (*connect.Response[v2.CalculateInterestResponse], error) {
	return c.calculateInterest.CallUnary(ctx, req)
}

// CalculateRealGDP calls city.economy.v2.OrgService.CalculateRealGDP.
func (c *orgServiceClient) CalculateRealGDP(ctx context.Context, req *connect.Request[v2.CalculateRealGDPRequest]) (*connect.Response[v2.CalculateRealGDPResponse], error) {
	return c.calculateRealGDP.CallUnary(ctx, req)
}

// SaveEconomyEntities calls city.economy.v2.OrgService.SaveEconomyEntities.
func (c *orgServiceClient) SaveEconomyEntities(ctx context.Context, req *connect.Request[v2.SaveEconomyEntitiesRequest]) (*connect.Response[v2.SaveEconomyEntitiesResponse], error) {
	return c.saveEconomyEntities.CallUnary(ctx, req)
}

// LoadEconomyEntities calls city.economy.v2.OrgService.LoadEconomyEntities.
func (c *orgServiceClient) LoadEconomyEntities(ctx context.Context, req *connect.Request[v2.LoadEconomyEntitiesRequest]) (*connect.Response[v2.LoadEconomyEntitiesResponse], error) {
	return c.loadEconomyEntities.CallUnary(ctx, req)
}

// OrgServiceHandler is an implementation of the city.economy.v2.OrgService service.
type OrgServiceHandler interface {
	// AddOrg 添加一个新的组织到系统中
	AddOrg(context.Context, *connect.Request[v2.AddOrgRequest]) (*connect.Response[v2.AddOrgResponse], error)
	// RemoveOrg 从系统中移除指定的组织
	RemoveOrg(context.Context, *connect.Request[v2.RemoveOrgRequest]) (*connect.Response[v2.RemoveOrgResponse], error)
	// GetOrg 获取指定组织的完整信息
	GetOrg(context.Context, *connect.Request[v2.GetOrgRequest]) (*connect.Response[v2.GetOrgResponse], error)
	// UpdateOrg 更新指定组织的信息
	UpdateOrg(context.Context, *connect.Request[v2.UpdateOrgRequest]) (*connect.Response[v2.UpdateOrgResponse], error)
	// AddAgent 添加一个新的代理到系统中
	AddAgent(context.Context, *connect.Request[v2.AddAgentRequest]) (*connect.Response[v2.AddAgentResponse], error)
	// RemoveAgent 从系统中移除指定的代理
	RemoveAgent(context.Context, *connect.Request[v2.RemoveAgentRequest]) (*connect.Response[v2.RemoveAgentResponse], error)
	// GetAgent 获取指定代理的完整信息
	GetAgent(context.Context, *connect.Request[v2.GetAgentRequest]) (*connect.Response[v2.GetAgentResponse], error)
	// UpdateAgent 更新指定代理的信息
	UpdateAgent(context.Context, *connect.Request[v2.UpdateAgentRequest]) (*connect.Response[v2.UpdateAgentResponse], error)
	// BatchGet 批量获取多个组织或代理的信息
	BatchGet(context.Context, *connect.Request[v2.BatchGetRequest]) (*connect.Response[v2.BatchGetResponse], error)
	// BatchUpdate 批量更新多个组织或代理的信息，只更新请求中指定的字段
	BatchUpdate(context.Context, *connect.Request[v2.BatchUpdateRequest]) (*connect.Response[v2.BatchUpdateResponse], error)
	// BatchSet 批量设置多个组织或代理的信息，完全替换所有字段
	BatchSet(context.Context, *connect.Request[v2.BatchSetRequest]) (*connect.Response[v2.BatchSetResponse], error)
	// DeltaUpdateOrg 对组织进行增量更新
	DeltaUpdateOrg(context.Context, *connect.Request[v2.DeltaUpdateOrgRequest]) (*connect.Response[v2.DeltaUpdateOrgResponse], error)
	// DeltaUpdateAgent 对代理进行增量更新
	DeltaUpdateAgent(context.Context, *connect.Request[v2.DeltaUpdateAgentRequest]) (*connect.Response[v2.DeltaUpdateAgentResponse], error)
	// BatchDeltaUpdate 批量进行增量更新
	BatchDeltaUpdate(context.Context, *connect.Request[v2.BatchDeltaUpdateRequest]) (*connect.Response[v2.BatchDeltaUpdateResponse], error)
	// CalculateTaxesDue 计算应缴税额并可选择进行再分配
	CalculateTaxesDue(context.Context, *connect.Request[v2.CalculateTaxesDueRequest]) (*connect.Response[v2.CalculateTaxesDueResponse], error)
	// CalculateConsumption 计算代理的消费情况
	CalculateConsumption(context.Context, *connect.Request[v2.CalculateConsumptionRequest]) (*connect.Response[v2.CalculateConsumptionResponse], error)
	// CalculateInterest 计算银行利息
	CalculateInterest(context.Context, *connect.Request[v2.CalculateInterestRequest]) (*connect.Response[v2.CalculateInterestResponse], error)
	// CalculateRealGDP 计算实际GDP
	CalculateRealGDP(context.Context, *connect.Request[v2.CalculateRealGDPRequest]) (*connect.Response[v2.CalculateRealGDPResponse], error)
	// SaveEconomyEntities 保存经济系统的当前状态
	SaveEconomyEntities(context.Context, *connect.Request[v2.SaveEconomyEntitiesRequest]) (*connect.Response[v2.SaveEconomyEntitiesResponse], error)
	// LoadEconomyEntities 加载经济系统的状态
	LoadEconomyEntities(context.Context, *connect.Request[v2.LoadEconomyEntitiesRequest]) (*connect.Response[v2.LoadEconomyEntitiesResponse], error)
}

// NewOrgServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrgServiceHandler(svc OrgServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	orgServiceMethods := v2.File_city_economy_v2_org_service_proto.Services().ByName("OrgService").Methods()
	orgServiceAddOrgHandler := connect.NewUnaryHandler(
		OrgServiceAddOrgProcedure,
		svc.AddOrg,
		connect.WithSchema(orgServiceMethods.ByName("AddOrg")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceRemoveOrgHandler := connect.NewUnaryHandler(
		OrgServiceRemoveOrgProcedure,
		svc.RemoveOrg,
		connect.WithSchema(orgServiceMethods.ByName("RemoveOrg")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceGetOrgHandler := connect.NewUnaryHandler(
		OrgServiceGetOrgProcedure,
		svc.GetOrg,
		connect.WithSchema(orgServiceMethods.ByName("GetOrg")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceUpdateOrgHandler := connect.NewUnaryHandler(
		OrgServiceUpdateOrgProcedure,
		svc.UpdateOrg,
		connect.WithSchema(orgServiceMethods.ByName("UpdateOrg")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceAddAgentHandler := connect.NewUnaryHandler(
		OrgServiceAddAgentProcedure,
		svc.AddAgent,
		connect.WithSchema(orgServiceMethods.ByName("AddAgent")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceRemoveAgentHandler := connect.NewUnaryHandler(
		OrgServiceRemoveAgentProcedure,
		svc.RemoveAgent,
		connect.WithSchema(orgServiceMethods.ByName("RemoveAgent")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceGetAgentHandler := connect.NewUnaryHandler(
		OrgServiceGetAgentProcedure,
		svc.GetAgent,
		connect.WithSchema(orgServiceMethods.ByName("GetAgent")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceUpdateAgentHandler := connect.NewUnaryHandler(
		OrgServiceUpdateAgentProcedure,
		svc.UpdateAgent,
		connect.WithSchema(orgServiceMethods.ByName("UpdateAgent")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceBatchGetHandler := connect.NewUnaryHandler(
		OrgServiceBatchGetProcedure,
		svc.BatchGet,
		connect.WithSchema(orgServiceMethods.ByName("BatchGet")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceBatchUpdateHandler := connect.NewUnaryHandler(
		OrgServiceBatchUpdateProcedure,
		svc.BatchUpdate,
		connect.WithSchema(orgServiceMethods.ByName("BatchUpdate")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceBatchSetHandler := connect.NewUnaryHandler(
		OrgServiceBatchSetProcedure,
		svc.BatchSet,
		connect.WithSchema(orgServiceMethods.ByName("BatchSet")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceDeltaUpdateOrgHandler := connect.NewUnaryHandler(
		OrgServiceDeltaUpdateOrgProcedure,
		svc.DeltaUpdateOrg,
		connect.WithSchema(orgServiceMethods.ByName("DeltaUpdateOrg")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceDeltaUpdateAgentHandler := connect.NewUnaryHandler(
		OrgServiceDeltaUpdateAgentProcedure,
		svc.DeltaUpdateAgent,
		connect.WithSchema(orgServiceMethods.ByName("DeltaUpdateAgent")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceBatchDeltaUpdateHandler := connect.NewUnaryHandler(
		OrgServiceBatchDeltaUpdateProcedure,
		svc.BatchDeltaUpdate,
		connect.WithSchema(orgServiceMethods.ByName("BatchDeltaUpdate")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceCalculateTaxesDueHandler := connect.NewUnaryHandler(
		OrgServiceCalculateTaxesDueProcedure,
		svc.CalculateTaxesDue,
		connect.WithSchema(orgServiceMethods.ByName("CalculateTaxesDue")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceCalculateConsumptionHandler := connect.NewUnaryHandler(
		OrgServiceCalculateConsumptionProcedure,
		svc.CalculateConsumption,
		connect.WithSchema(orgServiceMethods.ByName("CalculateConsumption")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceCalculateInterestHandler := connect.NewUnaryHandler(
		OrgServiceCalculateInterestProcedure,
		svc.CalculateInterest,
		connect.WithSchema(orgServiceMethods.ByName("CalculateInterest")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceCalculateRealGDPHandler := connect.NewUnaryHandler(
		OrgServiceCalculateRealGDPProcedure,
		svc.CalculateRealGDP,
		connect.WithSchema(orgServiceMethods.ByName("CalculateRealGDP")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceSaveEconomyEntitiesHandler := connect.NewUnaryHandler(
		OrgServiceSaveEconomyEntitiesProcedure,
		svc.SaveEconomyEntities,
		connect.WithSchema(orgServiceMethods.ByName("SaveEconomyEntities")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceLoadEconomyEntitiesHandler := connect.NewUnaryHandler(
		OrgServiceLoadEconomyEntitiesProcedure,
		svc.LoadEconomyEntities,
		connect.WithSchema(orgServiceMethods.ByName("LoadEconomyEntities")),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.economy.v2.OrgService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrgServiceAddOrgProcedure:
			orgServiceAddOrgHandler.ServeHTTP(w, r)
		case OrgServiceRemoveOrgProcedure:
			orgServiceRemoveOrgHandler.ServeHTTP(w, r)
		case OrgServiceGetOrgProcedure:
			orgServiceGetOrgHandler.ServeHTTP(w, r)
		case OrgServiceUpdateOrgProcedure:
			orgServiceUpdateOrgHandler.ServeHTTP(w, r)
		case OrgServiceAddAgentProcedure:
			orgServiceAddAgentHandler.ServeHTTP(w, r)
		case OrgServiceRemoveAgentProcedure:
			orgServiceRemoveAgentHandler.ServeHTTP(w, r)
		case OrgServiceGetAgentProcedure:
			orgServiceGetAgentHandler.ServeHTTP(w, r)
		case OrgServiceUpdateAgentProcedure:
			orgServiceUpdateAgentHandler.ServeHTTP(w, r)
		case OrgServiceBatchGetProcedure:
			orgServiceBatchGetHandler.ServeHTTP(w, r)
		case OrgServiceBatchUpdateProcedure:
			orgServiceBatchUpdateHandler.ServeHTTP(w, r)
		case OrgServiceBatchSetProcedure:
			orgServiceBatchSetHandler.ServeHTTP(w, r)
		case OrgServiceDeltaUpdateOrgProcedure:
			orgServiceDeltaUpdateOrgHandler.ServeHTTP(w, r)
		case OrgServiceDeltaUpdateAgentProcedure:
			orgServiceDeltaUpdateAgentHandler.ServeHTTP(w, r)
		case OrgServiceBatchDeltaUpdateProcedure:
			orgServiceBatchDeltaUpdateHandler.ServeHTTP(w, r)
		case OrgServiceCalculateTaxesDueProcedure:
			orgServiceCalculateTaxesDueHandler.ServeHTTP(w, r)
		case OrgServiceCalculateConsumptionProcedure:
			orgServiceCalculateConsumptionHandler.ServeHTTP(w, r)
		case OrgServiceCalculateInterestProcedure:
			orgServiceCalculateInterestHandler.ServeHTTP(w, r)
		case OrgServiceCalculateRealGDPProcedure:
			orgServiceCalculateRealGDPHandler.ServeHTTP(w, r)
		case OrgServiceSaveEconomyEntitiesProcedure:
			orgServiceSaveEconomyEntitiesHandler.ServeHTTP(w, r)
		case OrgServiceLoadEconomyEntitiesProcedure:
			orgServiceLoadEconomyEntitiesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrgServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrgServiceHandler struct{}

func (UnimplementedOrgServiceHandler) AddOrg(context.Context, *connect.Request[v2.AddOrgRequest]) (*connect.Response[v2.AddOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.AddOrg is not implemented"))
}

func (UnimplementedOrgServiceHandler) RemoveOrg(context.Context, *connect.Request[v2.RemoveOrgRequest]) (*connect.Response[v2.RemoveOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.RemoveOrg is not implemented"))
}

func (UnimplementedOrgServiceHandler) GetOrg(context.Context, *connect.Request[v2.GetOrgRequest]) (*connect.Response[v2.GetOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.GetOrg is not implemented"))
}

func (UnimplementedOrgServiceHandler) UpdateOrg(context.Context, *connect.Request[v2.UpdateOrgRequest]) (*connect.Response[v2.UpdateOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.UpdateOrg is not implemented"))
}

func (UnimplementedOrgServiceHandler) AddAgent(context.Context, *connect.Request[v2.AddAgentRequest]) (*connect.Response[v2.AddAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.AddAgent is not implemented"))
}

func (UnimplementedOrgServiceHandler) RemoveAgent(context.Context, *connect.Request[v2.RemoveAgentRequest]) (*connect.Response[v2.RemoveAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.RemoveAgent is not implemented"))
}

func (UnimplementedOrgServiceHandler) GetAgent(context.Context, *connect.Request[v2.GetAgentRequest]) (*connect.Response[v2.GetAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.GetAgent is not implemented"))
}

func (UnimplementedOrgServiceHandler) UpdateAgent(context.Context, *connect.Request[v2.UpdateAgentRequest]) (*connect.Response[v2.UpdateAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.UpdateAgent is not implemented"))
}

func (UnimplementedOrgServiceHandler) BatchGet(context.Context, *connect.Request[v2.BatchGetRequest]) (*connect.Response[v2.BatchGetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.BatchGet is not implemented"))
}

func (UnimplementedOrgServiceHandler) BatchUpdate(context.Context, *connect.Request[v2.BatchUpdateRequest]) (*connect.Response[v2.BatchUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.BatchUpdate is not implemented"))
}

func (UnimplementedOrgServiceHandler) BatchSet(context.Context, *connect.Request[v2.BatchSetRequest]) (*connect.Response[v2.BatchSetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.BatchSet is not implemented"))
}

func (UnimplementedOrgServiceHandler) DeltaUpdateOrg(context.Context, *connect.Request[v2.DeltaUpdateOrgRequest]) (*connect.Response[v2.DeltaUpdateOrgResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.DeltaUpdateOrg is not implemented"))
}

func (UnimplementedOrgServiceHandler) DeltaUpdateAgent(context.Context, *connect.Request[v2.DeltaUpdateAgentRequest]) (*connect.Response[v2.DeltaUpdateAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.DeltaUpdateAgent is not implemented"))
}

func (UnimplementedOrgServiceHandler) BatchDeltaUpdate(context.Context, *connect.Request[v2.BatchDeltaUpdateRequest]) (*connect.Response[v2.BatchDeltaUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.BatchDeltaUpdate is not implemented"))
}

func (UnimplementedOrgServiceHandler) CalculateTaxesDue(context.Context, *connect.Request[v2.CalculateTaxesDueRequest]) (*connect.Response[v2.CalculateTaxesDueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.CalculateTaxesDue is not implemented"))
}

func (UnimplementedOrgServiceHandler) CalculateConsumption(context.Context, *connect.Request[v2.CalculateConsumptionRequest]) (*connect.Response[v2.CalculateConsumptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.CalculateConsumption is not implemented"))
}

func (UnimplementedOrgServiceHandler) CalculateInterest(context.Context, *connect.Request[v2.CalculateInterestRequest]) (*connect.Response[v2.CalculateInterestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.CalculateInterest is not implemented"))
}

func (UnimplementedOrgServiceHandler) CalculateRealGDP(context.Context, *connect.Request[v2.CalculateRealGDPRequest]) (*connect.Response[v2.CalculateRealGDPResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.CalculateRealGDP is not implemented"))
}

func (UnimplementedOrgServiceHandler) SaveEconomyEntities(context.Context, *connect.Request[v2.SaveEconomyEntitiesRequest]) (*connect.Response[v2.SaveEconomyEntitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.SaveEconomyEntities is not implemented"))
}

func (UnimplementedOrgServiceHandler) LoadEconomyEntities(context.Context, *connect.Request[v2.LoadEconomyEntitiesRequest]) (*connect.Response[v2.LoadEconomyEntitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.LoadEconomyEntities is not implemented"))
}
