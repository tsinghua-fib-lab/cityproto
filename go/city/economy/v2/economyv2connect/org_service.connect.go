// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/economy/v2/org_service.proto

package economyv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "git.fiblab.net/sim/protos/v2/go/city/economy/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrgServiceName is the fully-qualified name of the OrgService service.
	OrgServiceName = "city.economy.v2.OrgService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrgServiceAddFirmProcedure is the fully-qualified name of the OrgService's AddFirm RPC.
	OrgServiceAddFirmProcedure = "/city.economy.v2.OrgService/AddFirm"
	// OrgServiceRemoveFirmProcedure is the fully-qualified name of the OrgService's RemoveFirm RPC.
	OrgServiceRemoveFirmProcedure = "/city.economy.v2.OrgService/RemoveFirm"
	// OrgServiceGetFirmProcedure is the fully-qualified name of the OrgService's GetFirm RPC.
	OrgServiceGetFirmProcedure = "/city.economy.v2.OrgService/GetFirm"
	// OrgServiceUpdateFirmProcedure is the fully-qualified name of the OrgService's UpdateFirm RPC.
	OrgServiceUpdateFirmProcedure = "/city.economy.v2.OrgService/UpdateFirm"
	// OrgServiceListFirmsProcedure is the fully-qualified name of the OrgService's ListFirms RPC.
	OrgServiceListFirmsProcedure = "/city.economy.v2.OrgService/ListFirms"
	// OrgServiceDeltaUpdateFirmProcedure is the fully-qualified name of the OrgService's
	// DeltaUpdateFirm RPC.
	OrgServiceDeltaUpdateFirmProcedure = "/city.economy.v2.OrgService/DeltaUpdateFirm"
	// OrgServiceAddNBSProcedure is the fully-qualified name of the OrgService's AddNBS RPC.
	OrgServiceAddNBSProcedure = "/city.economy.v2.OrgService/AddNBS"
	// OrgServiceRemoveNBSProcedure is the fully-qualified name of the OrgService's RemoveNBS RPC.
	OrgServiceRemoveNBSProcedure = "/city.economy.v2.OrgService/RemoveNBS"
	// OrgServiceGetNBSProcedure is the fully-qualified name of the OrgService's GetNBS RPC.
	OrgServiceGetNBSProcedure = "/city.economy.v2.OrgService/GetNBS"
	// OrgServiceUpdateNBSProcedure is the fully-qualified name of the OrgService's UpdateNBS RPC.
	OrgServiceUpdateNBSProcedure = "/city.economy.v2.OrgService/UpdateNBS"
	// OrgServiceListNBSProcedure is the fully-qualified name of the OrgService's ListNBS RPC.
	OrgServiceListNBSProcedure = "/city.economy.v2.OrgService/ListNBS"
	// OrgServiceDeltaUpdateNBSProcedure is the fully-qualified name of the OrgService's DeltaUpdateNBS
	// RPC.
	OrgServiceDeltaUpdateNBSProcedure = "/city.economy.v2.OrgService/DeltaUpdateNBS"
	// OrgServiceAddGovernmentProcedure is the fully-qualified name of the OrgService's AddGovernment
	// RPC.
	OrgServiceAddGovernmentProcedure = "/city.economy.v2.OrgService/AddGovernment"
	// OrgServiceRemoveGovernmentProcedure is the fully-qualified name of the OrgService's
	// RemoveGovernment RPC.
	OrgServiceRemoveGovernmentProcedure = "/city.economy.v2.OrgService/RemoveGovernment"
	// OrgServiceGetGovernmentProcedure is the fully-qualified name of the OrgService's GetGovernment
	// RPC.
	OrgServiceGetGovernmentProcedure = "/city.economy.v2.OrgService/GetGovernment"
	// OrgServiceUpdateGovernmentProcedure is the fully-qualified name of the OrgService's
	// UpdateGovernment RPC.
	OrgServiceUpdateGovernmentProcedure = "/city.economy.v2.OrgService/UpdateGovernment"
	// OrgServiceListGovernmentsProcedure is the fully-qualified name of the OrgService's
	// ListGovernments RPC.
	OrgServiceListGovernmentsProcedure = "/city.economy.v2.OrgService/ListGovernments"
	// OrgServiceDeltaUpdateGovernmentProcedure is the fully-qualified name of the OrgService's
	// DeltaUpdateGovernment RPC.
	OrgServiceDeltaUpdateGovernmentProcedure = "/city.economy.v2.OrgService/DeltaUpdateGovernment"
	// OrgServiceAddBankProcedure is the fully-qualified name of the OrgService's AddBank RPC.
	OrgServiceAddBankProcedure = "/city.economy.v2.OrgService/AddBank"
	// OrgServiceRemoveBankProcedure is the fully-qualified name of the OrgService's RemoveBank RPC.
	OrgServiceRemoveBankProcedure = "/city.economy.v2.OrgService/RemoveBank"
	// OrgServiceGetBankProcedure is the fully-qualified name of the OrgService's GetBank RPC.
	OrgServiceGetBankProcedure = "/city.economy.v2.OrgService/GetBank"
	// OrgServiceUpdateBankProcedure is the fully-qualified name of the OrgService's UpdateBank RPC.
	OrgServiceUpdateBankProcedure = "/city.economy.v2.OrgService/UpdateBank"
	// OrgServiceListBanksProcedure is the fully-qualified name of the OrgService's ListBanks RPC.
	OrgServiceListBanksProcedure = "/city.economy.v2.OrgService/ListBanks"
	// OrgServiceDeltaUpdateBankProcedure is the fully-qualified name of the OrgService's
	// DeltaUpdateBank RPC.
	OrgServiceDeltaUpdateBankProcedure = "/city.economy.v2.OrgService/DeltaUpdateBank"
	// OrgServiceAddAgentProcedure is the fully-qualified name of the OrgService's AddAgent RPC.
	OrgServiceAddAgentProcedure = "/city.economy.v2.OrgService/AddAgent"
	// OrgServiceRemoveAgentProcedure is the fully-qualified name of the OrgService's RemoveAgent RPC.
	OrgServiceRemoveAgentProcedure = "/city.economy.v2.OrgService/RemoveAgent"
	// OrgServiceGetAgentProcedure is the fully-qualified name of the OrgService's GetAgent RPC.
	OrgServiceGetAgentProcedure = "/city.economy.v2.OrgService/GetAgent"
	// OrgServiceUpdateAgentProcedure is the fully-qualified name of the OrgService's UpdateAgent RPC.
	OrgServiceUpdateAgentProcedure = "/city.economy.v2.OrgService/UpdateAgent"
	// OrgServiceListAgentsProcedure is the fully-qualified name of the OrgService's ListAgents RPC.
	OrgServiceListAgentsProcedure = "/city.economy.v2.OrgService/ListAgents"
	// OrgServiceDeltaUpdateAgentProcedure is the fully-qualified name of the OrgService's
	// DeltaUpdateAgent RPC.
	OrgServiceDeltaUpdateAgentProcedure = "/city.economy.v2.OrgService/DeltaUpdateAgent"
	// OrgServiceCalculateTaxesDueProcedure is the fully-qualified name of the OrgService's
	// CalculateTaxesDue RPC.
	OrgServiceCalculateTaxesDueProcedure = "/city.economy.v2.OrgService/CalculateTaxesDue"
	// OrgServiceCalculateConsumptionProcedure is the fully-qualified name of the OrgService's
	// CalculateConsumption RPC.
	OrgServiceCalculateConsumptionProcedure = "/city.economy.v2.OrgService/CalculateConsumption"
	// OrgServiceCalculateInterestProcedure is the fully-qualified name of the OrgService's
	// CalculateInterest RPC.
	OrgServiceCalculateInterestProcedure = "/city.economy.v2.OrgService/CalculateInterest"
	// OrgServiceCalculateRealGDPProcedure is the fully-qualified name of the OrgService's
	// CalculateRealGDP RPC.
	OrgServiceCalculateRealGDPProcedure = "/city.economy.v2.OrgService/CalculateRealGDP"
	// OrgServiceSaveEconomyEntitiesProcedure is the fully-qualified name of the OrgService's
	// SaveEconomyEntities RPC.
	OrgServiceSaveEconomyEntitiesProcedure = "/city.economy.v2.OrgService/SaveEconomyEntities"
	// OrgServiceLoadEconomyEntitiesProcedure is the fully-qualified name of the OrgService's
	// LoadEconomyEntities RPC.
	OrgServiceLoadEconomyEntitiesProcedure = "/city.economy.v2.OrgService/LoadEconomyEntities"
)

// OrgServiceClient is a client for the city.economy.v2.OrgService service.
type OrgServiceClient interface {
	// Creates one or more firm entities
	// Returns the list of created firm IDs
	//
	// 创建一个或多个企业实体
	// 返回创建的企业ID列表
	AddFirm(context.Context, *connect.Request[v2.AddFirmRequest]) (*connect.Response[v2.AddFirmResponse], error)
	// Deletes one or more firms by their IDs
	// Also cleans up related employee associations
	//
	// 根据ID删除一个或多个企业实体
	// 同时清理相关的员工关联关系
	RemoveFirm(context.Context, *connect.Request[v2.RemoveFirmRequest]) (*connect.Response[v2.RemoveFirmResponse], error)
	// Retrieves detailed information for one or more firms
	// Returns a list of firm entities
	//
	// 获取一个或多个企业的详细信息
	// 返回企业实体信息列表
	GetFirm(context.Context, *connect.Request[v2.GetFirmRequest]) (*connect.Response[v2.GetFirmResponse], error)
	// Updates complete information for one or more firms
	//
	// 更新一个或多个企业的完整信息
	UpdateFirm(context.Context, *connect.Request[v2.UpdateFirmRequest]) (*connect.Response[v2.UpdateFirmResponse], error)
	// Lists all firms in the system
	//
	// 获取系统中所有企业的列表
	ListFirms(context.Context, *connect.Request[v2.ListFirmsRequest]) (*connect.Response[v2.ListFirmsResponse], error)
	// Performs incremental updates on one or more firms
	// Allows updating specific fields like price, inventory, demand etc.
	//
	// 对一个或多个企业进行增量更新
	// 可以更新价格、库存、需求等具体字段
	DeltaUpdateFirm(context.Context, *connect.Request[v2.DeltaUpdateFirmRequest]) (*connect.Response[v2.DeltaUpdateFirmResponse], error)
	// Creates a new NBS entity
	//
	// 创建新的国家统计局实体
	AddNBS(context.Context, *connect.Request[v2.AddNBSRequest]) (*connect.Response[v2.AddNBSResponse], error)
	// Deletes an NBS entity by ID
	//
	// 根据ID删除国家统计局实体
	RemoveNBS(context.Context, *connect.Request[v2.RemoveNBSRequest]) (*connect.Response[v2.RemoveNBSResponse], error)
	// Retrieves detailed information for an NBS entity
	//
	// 获取国家统计局的详细信息
	GetNBS(context.Context, *connect.Request[v2.GetNBSRequest]) (*connect.Response[v2.GetNBSResponse], error)
	// Updates complete information for an NBS entity
	//
	// 更新国家统计局的完整信息
	UpdateNBS(context.Context, *connect.Request[v2.UpdateNBSRequest]) (*connect.Response[v2.UpdateNBSResponse], error)
	// Lists all NBS entities in the system
	//
	// 获取系统中所有国家统计局的列表
	ListNBS(context.Context, *connect.Request[v2.ListNBSRequest]) (*connect.Response[v2.ListNBSResponse], error)
	// Performs incremental updates on an NBS entity
	// Allows updating specific statistics and citizen relationships
	//
	// 对国家统计局进行增量更新
	// 可以更新具体统计数据和公民关系
	DeltaUpdateNBS(context.Context, *connect.Request[v2.DeltaUpdateNBSRequest]) (*connect.Response[v2.DeltaUpdateNBSResponse], error)
	// Creates a new government entity
	//
	// 创建新的政府实体
	AddGovernment(context.Context, *connect.Request[v2.AddGovernmentRequest]) (*connect.Response[v2.AddGovernmentResponse], error)
	// Deletes a government entity by ID
	//
	// 根据ID删除政府实体
	RemoveGovernment(context.Context, *connect.Request[v2.RemoveGovernmentRequest]) (*connect.Response[v2.RemoveGovernmentResponse], error)
	// Retrieves detailed information for a government entity
	//
	// 获取政府实体的详细信息
	GetGovernment(context.Context, *connect.Request[v2.GetGovernmentRequest]) (*connect.Response[v2.GetGovernmentResponse], error)
	// Updates complete information for a government entity
	//
	// 更新政府实体的完整信息
	UpdateGovernment(context.Context, *connect.Request[v2.UpdateGovernmentRequest]) (*connect.Response[v2.UpdateGovernmentResponse], error)
	// Lists all government entities in the system
	//
	// 获取系统中所有政府实体的列表
	ListGovernments(context.Context, *connect.Request[v2.ListGovernmentsRequest]) (*connect.Response[v2.ListGovernmentsResponse], error)
	// Performs incremental updates on a government entity
	// Allows updating tax brackets and citizen relationships
	//
	// 对政府实体进行增量更新
	// 可以更新税收档位和公民关系
	DeltaUpdateGovernment(context.Context, *connect.Request[v2.DeltaUpdateGovernmentRequest]) (*connect.Response[v2.DeltaUpdateGovernmentResponse], error)
	// Creates a new bank entity
	//
	// 创建新的银行实体
	AddBank(context.Context, *connect.Request[v2.AddBankRequest]) (*connect.Response[v2.AddBankResponse], error)
	// Deletes a bank entity by ID
	//
	// 根据ID删除银行实体
	RemoveBank(context.Context, *connect.Request[v2.RemoveBankRequest]) (*connect.Response[v2.RemoveBankResponse], error)
	// Retrieves detailed information for a bank entity
	//
	// 获取银行实体的详细信息
	GetBank(context.Context, *connect.Request[v2.GetBankRequest]) (*connect.Response[v2.GetBankResponse], error)
	// Updates complete information for a bank entity
	//
	// 更新银行实体的完整信息
	UpdateBank(context.Context, *connect.Request[v2.UpdateBankRequest]) (*connect.Response[v2.UpdateBankResponse], error)
	// Lists all bank entities in the system
	//
	// 获取系统中所有银行实体的列表
	ListBanks(context.Context, *connect.Request[v2.ListBanksRequest]) (*connect.Response[v2.ListBanksResponse], error)
	// Performs incremental updates on a bank entity
	// Allows updating interest rates and customer relationships
	//
	// 对银行实体进行增量更新
	// 可以更新利率和客户关系
	DeltaUpdateBank(context.Context, *connect.Request[v2.DeltaUpdateBankRequest]) (*connect.Response[v2.DeltaUpdateBankResponse], error)
	// Creates one or more agent entities
	// Returns the list of created agent IDs
	//
	// 创建一个或多个经济主体
	// 返回创建的经济主体ID列表
	AddAgent(context.Context, *connect.Request[v2.AddAgentRequest]) (*connect.Response[v2.AddAgentResponse], error)
	// Deletes one or more agents by their IDs
	//
	// 根据ID删除一个或多个经济主体
	RemoveAgent(context.Context, *connect.Request[v2.RemoveAgentRequest]) (*connect.Response[v2.RemoveAgentResponse], error)
	// Retrieves detailed information for one or more agents
	//
	// 获取一个或多个经济主体的详细信息
	GetAgent(context.Context, *connect.Request[v2.GetAgentRequest]) (*connect.Response[v2.GetAgentResponse], error)
	// Updates complete information for one or more agents
	//
	// 更新一个或多个经济主体的完整信息
	UpdateAgent(context.Context, *connect.Request[v2.UpdateAgentRequest]) (*connect.Response[v2.UpdateAgentResponse], error)
	// Lists all agent entities in the system
	//
	// 获取系统中所有经济主体的列表
	ListAgents(context.Context, *connect.Request[v2.ListAgentsRequest]) (*connect.Response[v2.ListAgentsResponse], error)
	// Performs incremental updates on one or more agents
	// Allows updating specific attributes like currency, skills etc.
	//
	// 对一个或多个经济主体进行增量更新
	// 可以更新货币、技能等具体属性
	DeltaUpdateAgent(context.Context, *connect.Request[v2.DeltaUpdateAgentRequest]) (*connect.Response[v2.DeltaUpdateAgentResponse], error)
	// Calculates taxes due for specified agents
	// Supports income redistribution if enabled
	//
	// 计算指定经济主体的应缴税额
	// 支持开启收入再分配功能
	CalculateTaxesDue(context.Context, *connect.Request[v2.CalculateTaxesDueRequest]) (*connect.Response[v2.CalculateTaxesDueResponse], error)
	// Calculates actual consumption based on supply and demand
	//
	// 基于供给和需求计算实际消费量
	CalculateConsumption(context.Context, *connect.Request[v2.CalculateConsumptionRequest]) (*connect.Response[v2.CalculateConsumptionResponse], error)
	// Calculates interest for specified agents
	//
	// 计算指定经济主体的利息
	CalculateInterest(context.Context, *connect.Request[v2.CalculateInterestRequest]) (*connect.Response[v2.CalculateInterestResponse], error)
	// Calculates real GDP adjusted for inflation
	//
	// 计算经通货膨胀调整后的实际GDP
	CalculateRealGDP(context.Context, *connect.Request[v2.CalculateRealGDPRequest]) (*connect.Response[v2.CalculateRealGDPResponse], error)
	// Saves the current state of all economic entities to a file
	//
	// 将当前所有经济实体的状态保存到文件
	SaveEconomyEntities(context.Context, *connect.Request[v2.SaveEconomyEntitiesRequest]) (*connect.Response[v2.SaveEconomyEntitiesResponse], error)
	// Loads economic entities state from a file
	//
	// 从文件中加载经济实体的状态
	LoadEconomyEntities(context.Context, *connect.Request[v2.LoadEconomyEntitiesRequest]) (*connect.Response[v2.LoadEconomyEntitiesResponse], error)
}

// NewOrgServiceClient constructs a client for the city.economy.v2.OrgService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrgServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrgServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	orgServiceMethods := v2.File_city_economy_v2_org_service_proto.Services().ByName("OrgService").Methods()
	return &orgServiceClient{
		addFirm: connect.NewClient[v2.AddFirmRequest, v2.AddFirmResponse](
			httpClient,
			baseURL+OrgServiceAddFirmProcedure,
			connect.WithSchema(orgServiceMethods.ByName("AddFirm")),
			connect.WithClientOptions(opts...),
		),
		removeFirm: connect.NewClient[v2.RemoveFirmRequest, v2.RemoveFirmResponse](
			httpClient,
			baseURL+OrgServiceRemoveFirmProcedure,
			connect.WithSchema(orgServiceMethods.ByName("RemoveFirm")),
			connect.WithClientOptions(opts...),
		),
		getFirm: connect.NewClient[v2.GetFirmRequest, v2.GetFirmResponse](
			httpClient,
			baseURL+OrgServiceGetFirmProcedure,
			connect.WithSchema(orgServiceMethods.ByName("GetFirm")),
			connect.WithClientOptions(opts...),
		),
		updateFirm: connect.NewClient[v2.UpdateFirmRequest, v2.UpdateFirmResponse](
			httpClient,
			baseURL+OrgServiceUpdateFirmProcedure,
			connect.WithSchema(orgServiceMethods.ByName("UpdateFirm")),
			connect.WithClientOptions(opts...),
		),
		listFirms: connect.NewClient[v2.ListFirmsRequest, v2.ListFirmsResponse](
			httpClient,
			baseURL+OrgServiceListFirmsProcedure,
			connect.WithSchema(orgServiceMethods.ByName("ListFirms")),
			connect.WithClientOptions(opts...),
		),
		deltaUpdateFirm: connect.NewClient[v2.DeltaUpdateFirmRequest, v2.DeltaUpdateFirmResponse](
			httpClient,
			baseURL+OrgServiceDeltaUpdateFirmProcedure,
			connect.WithSchema(orgServiceMethods.ByName("DeltaUpdateFirm")),
			connect.WithClientOptions(opts...),
		),
		addNBS: connect.NewClient[v2.AddNBSRequest, v2.AddNBSResponse](
			httpClient,
			baseURL+OrgServiceAddNBSProcedure,
			connect.WithSchema(orgServiceMethods.ByName("AddNBS")),
			connect.WithClientOptions(opts...),
		),
		removeNBS: connect.NewClient[v2.RemoveNBSRequest, v2.RemoveNBSResponse](
			httpClient,
			baseURL+OrgServiceRemoveNBSProcedure,
			connect.WithSchema(orgServiceMethods.ByName("RemoveNBS")),
			connect.WithClientOptions(opts...),
		),
		getNBS: connect.NewClient[v2.GetNBSRequest, v2.GetNBSResponse](
			httpClient,
			baseURL+OrgServiceGetNBSProcedure,
			connect.WithSchema(orgServiceMethods.ByName("GetNBS")),
			connect.WithClientOptions(opts...),
		),
		updateNBS: connect.NewClient[v2.UpdateNBSRequest, v2.UpdateNBSResponse](
			httpClient,
			baseURL+OrgServiceUpdateNBSProcedure,
			connect.WithSchema(orgServiceMethods.ByName("UpdateNBS")),
			connect.WithClientOptions(opts...),
		),
		listNBS: connect.NewClient[v2.ListNBSRequest, v2.ListNBSResponse](
			httpClient,
			baseURL+OrgServiceListNBSProcedure,
			connect.WithSchema(orgServiceMethods.ByName("ListNBS")),
			connect.WithClientOptions(opts...),
		),
		deltaUpdateNBS: connect.NewClient[v2.DeltaUpdateNBSRequest, v2.DeltaUpdateNBSResponse](
			httpClient,
			baseURL+OrgServiceDeltaUpdateNBSProcedure,
			connect.WithSchema(orgServiceMethods.ByName("DeltaUpdateNBS")),
			connect.WithClientOptions(opts...),
		),
		addGovernment: connect.NewClient[v2.AddGovernmentRequest, v2.AddGovernmentResponse](
			httpClient,
			baseURL+OrgServiceAddGovernmentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("AddGovernment")),
			connect.WithClientOptions(opts...),
		),
		removeGovernment: connect.NewClient[v2.RemoveGovernmentRequest, v2.RemoveGovernmentResponse](
			httpClient,
			baseURL+OrgServiceRemoveGovernmentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("RemoveGovernment")),
			connect.WithClientOptions(opts...),
		),
		getGovernment: connect.NewClient[v2.GetGovernmentRequest, v2.GetGovernmentResponse](
			httpClient,
			baseURL+OrgServiceGetGovernmentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("GetGovernment")),
			connect.WithClientOptions(opts...),
		),
		updateGovernment: connect.NewClient[v2.UpdateGovernmentRequest, v2.UpdateGovernmentResponse](
			httpClient,
			baseURL+OrgServiceUpdateGovernmentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("UpdateGovernment")),
			connect.WithClientOptions(opts...),
		),
		listGovernments: connect.NewClient[v2.ListGovernmentsRequest, v2.ListGovernmentsResponse](
			httpClient,
			baseURL+OrgServiceListGovernmentsProcedure,
			connect.WithSchema(orgServiceMethods.ByName("ListGovernments")),
			connect.WithClientOptions(opts...),
		),
		deltaUpdateGovernment: connect.NewClient[v2.DeltaUpdateGovernmentRequest, v2.DeltaUpdateGovernmentResponse](
			httpClient,
			baseURL+OrgServiceDeltaUpdateGovernmentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("DeltaUpdateGovernment")),
			connect.WithClientOptions(opts...),
		),
		addBank: connect.NewClient[v2.AddBankRequest, v2.AddBankResponse](
			httpClient,
			baseURL+OrgServiceAddBankProcedure,
			connect.WithSchema(orgServiceMethods.ByName("AddBank")),
			connect.WithClientOptions(opts...),
		),
		removeBank: connect.NewClient[v2.RemoveBankRequest, v2.RemoveBankResponse](
			httpClient,
			baseURL+OrgServiceRemoveBankProcedure,
			connect.WithSchema(orgServiceMethods.ByName("RemoveBank")),
			connect.WithClientOptions(opts...),
		),
		getBank: connect.NewClient[v2.GetBankRequest, v2.GetBankResponse](
			httpClient,
			baseURL+OrgServiceGetBankProcedure,
			connect.WithSchema(orgServiceMethods.ByName("GetBank")),
			connect.WithClientOptions(opts...),
		),
		updateBank: connect.NewClient[v2.UpdateBankRequest, v2.UpdateBankResponse](
			httpClient,
			baseURL+OrgServiceUpdateBankProcedure,
			connect.WithSchema(orgServiceMethods.ByName("UpdateBank")),
			connect.WithClientOptions(opts...),
		),
		listBanks: connect.NewClient[v2.ListBanksRequest, v2.ListBanksResponse](
			httpClient,
			baseURL+OrgServiceListBanksProcedure,
			connect.WithSchema(orgServiceMethods.ByName("ListBanks")),
			connect.WithClientOptions(opts...),
		),
		deltaUpdateBank: connect.NewClient[v2.DeltaUpdateBankRequest, v2.DeltaUpdateBankResponse](
			httpClient,
			baseURL+OrgServiceDeltaUpdateBankProcedure,
			connect.WithSchema(orgServiceMethods.ByName("DeltaUpdateBank")),
			connect.WithClientOptions(opts...),
		),
		addAgent: connect.NewClient[v2.AddAgentRequest, v2.AddAgentResponse](
			httpClient,
			baseURL+OrgServiceAddAgentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("AddAgent")),
			connect.WithClientOptions(opts...),
		),
		removeAgent: connect.NewClient[v2.RemoveAgentRequest, v2.RemoveAgentResponse](
			httpClient,
			baseURL+OrgServiceRemoveAgentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("RemoveAgent")),
			connect.WithClientOptions(opts...),
		),
		getAgent: connect.NewClient[v2.GetAgentRequest, v2.GetAgentResponse](
			httpClient,
			baseURL+OrgServiceGetAgentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("GetAgent")),
			connect.WithClientOptions(opts...),
		),
		updateAgent: connect.NewClient[v2.UpdateAgentRequest, v2.UpdateAgentResponse](
			httpClient,
			baseURL+OrgServiceUpdateAgentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("UpdateAgent")),
			connect.WithClientOptions(opts...),
		),
		listAgents: connect.NewClient[v2.ListAgentsRequest, v2.ListAgentsResponse](
			httpClient,
			baseURL+OrgServiceListAgentsProcedure,
			connect.WithSchema(orgServiceMethods.ByName("ListAgents")),
			connect.WithClientOptions(opts...),
		),
		deltaUpdateAgent: connect.NewClient[v2.DeltaUpdateAgentRequest, v2.DeltaUpdateAgentResponse](
			httpClient,
			baseURL+OrgServiceDeltaUpdateAgentProcedure,
			connect.WithSchema(orgServiceMethods.ByName("DeltaUpdateAgent")),
			connect.WithClientOptions(opts...),
		),
		calculateTaxesDue: connect.NewClient[v2.CalculateTaxesDueRequest, v2.CalculateTaxesDueResponse](
			httpClient,
			baseURL+OrgServiceCalculateTaxesDueProcedure,
			connect.WithSchema(orgServiceMethods.ByName("CalculateTaxesDue")),
			connect.WithClientOptions(opts...),
		),
		calculateConsumption: connect.NewClient[v2.CalculateConsumptionRequest, v2.CalculateConsumptionResponse](
			httpClient,
			baseURL+OrgServiceCalculateConsumptionProcedure,
			connect.WithSchema(orgServiceMethods.ByName("CalculateConsumption")),
			connect.WithClientOptions(opts...),
		),
		calculateInterest: connect.NewClient[v2.CalculateInterestRequest, v2.CalculateInterestResponse](
			httpClient,
			baseURL+OrgServiceCalculateInterestProcedure,
			connect.WithSchema(orgServiceMethods.ByName("CalculateInterest")),
			connect.WithClientOptions(opts...),
		),
		calculateRealGDP: connect.NewClient[v2.CalculateRealGDPRequest, v2.CalculateRealGDPResponse](
			httpClient,
			baseURL+OrgServiceCalculateRealGDPProcedure,
			connect.WithSchema(orgServiceMethods.ByName("CalculateRealGDP")),
			connect.WithClientOptions(opts...),
		),
		saveEconomyEntities: connect.NewClient[v2.SaveEconomyEntitiesRequest, v2.SaveEconomyEntitiesResponse](
			httpClient,
			baseURL+OrgServiceSaveEconomyEntitiesProcedure,
			connect.WithSchema(orgServiceMethods.ByName("SaveEconomyEntities")),
			connect.WithClientOptions(opts...),
		),
		loadEconomyEntities: connect.NewClient[v2.LoadEconomyEntitiesRequest, v2.LoadEconomyEntitiesResponse](
			httpClient,
			baseURL+OrgServiceLoadEconomyEntitiesProcedure,
			connect.WithSchema(orgServiceMethods.ByName("LoadEconomyEntities")),
			connect.WithClientOptions(opts...),
		),
	}
}

// orgServiceClient implements OrgServiceClient.
type orgServiceClient struct {
	addFirm               *connect.Client[v2.AddFirmRequest, v2.AddFirmResponse]
	removeFirm            *connect.Client[v2.RemoveFirmRequest, v2.RemoveFirmResponse]
	getFirm               *connect.Client[v2.GetFirmRequest, v2.GetFirmResponse]
	updateFirm            *connect.Client[v2.UpdateFirmRequest, v2.UpdateFirmResponse]
	listFirms             *connect.Client[v2.ListFirmsRequest, v2.ListFirmsResponse]
	deltaUpdateFirm       *connect.Client[v2.DeltaUpdateFirmRequest, v2.DeltaUpdateFirmResponse]
	addNBS                *connect.Client[v2.AddNBSRequest, v2.AddNBSResponse]
	removeNBS             *connect.Client[v2.RemoveNBSRequest, v2.RemoveNBSResponse]
	getNBS                *connect.Client[v2.GetNBSRequest, v2.GetNBSResponse]
	updateNBS             *connect.Client[v2.UpdateNBSRequest, v2.UpdateNBSResponse]
	listNBS               *connect.Client[v2.ListNBSRequest, v2.ListNBSResponse]
	deltaUpdateNBS        *connect.Client[v2.DeltaUpdateNBSRequest, v2.DeltaUpdateNBSResponse]
	addGovernment         *connect.Client[v2.AddGovernmentRequest, v2.AddGovernmentResponse]
	removeGovernment      *connect.Client[v2.RemoveGovernmentRequest, v2.RemoveGovernmentResponse]
	getGovernment         *connect.Client[v2.GetGovernmentRequest, v2.GetGovernmentResponse]
	updateGovernment      *connect.Client[v2.UpdateGovernmentRequest, v2.UpdateGovernmentResponse]
	listGovernments       *connect.Client[v2.ListGovernmentsRequest, v2.ListGovernmentsResponse]
	deltaUpdateGovernment *connect.Client[v2.DeltaUpdateGovernmentRequest, v2.DeltaUpdateGovernmentResponse]
	addBank               *connect.Client[v2.AddBankRequest, v2.AddBankResponse]
	removeBank            *connect.Client[v2.RemoveBankRequest, v2.RemoveBankResponse]
	getBank               *connect.Client[v2.GetBankRequest, v2.GetBankResponse]
	updateBank            *connect.Client[v2.UpdateBankRequest, v2.UpdateBankResponse]
	listBanks             *connect.Client[v2.ListBanksRequest, v2.ListBanksResponse]
	deltaUpdateBank       *connect.Client[v2.DeltaUpdateBankRequest, v2.DeltaUpdateBankResponse]
	addAgent              *connect.Client[v2.AddAgentRequest, v2.AddAgentResponse]
	removeAgent           *connect.Client[v2.RemoveAgentRequest, v2.RemoveAgentResponse]
	getAgent              *connect.Client[v2.GetAgentRequest, v2.GetAgentResponse]
	updateAgent           *connect.Client[v2.UpdateAgentRequest, v2.UpdateAgentResponse]
	listAgents            *connect.Client[v2.ListAgentsRequest, v2.ListAgentsResponse]
	deltaUpdateAgent      *connect.Client[v2.DeltaUpdateAgentRequest, v2.DeltaUpdateAgentResponse]
	calculateTaxesDue     *connect.Client[v2.CalculateTaxesDueRequest, v2.CalculateTaxesDueResponse]
	calculateConsumption  *connect.Client[v2.CalculateConsumptionRequest, v2.CalculateConsumptionResponse]
	calculateInterest     *connect.Client[v2.CalculateInterestRequest, v2.CalculateInterestResponse]
	calculateRealGDP      *connect.Client[v2.CalculateRealGDPRequest, v2.CalculateRealGDPResponse]
	saveEconomyEntities   *connect.Client[v2.SaveEconomyEntitiesRequest, v2.SaveEconomyEntitiesResponse]
	loadEconomyEntities   *connect.Client[v2.LoadEconomyEntitiesRequest, v2.LoadEconomyEntitiesResponse]
}

// AddFirm calls city.economy.v2.OrgService.AddFirm.
func (c *orgServiceClient) AddFirm(ctx context.Context, req *connect.Request[v2.AddFirmRequest]) (*connect.Response[v2.AddFirmResponse], error) {
	return c.addFirm.CallUnary(ctx, req)
}

// RemoveFirm calls city.economy.v2.OrgService.RemoveFirm.
func (c *orgServiceClient) RemoveFirm(ctx context.Context, req *connect.Request[v2.RemoveFirmRequest]) (*connect.Response[v2.RemoveFirmResponse], error) {
	return c.removeFirm.CallUnary(ctx, req)
}

// GetFirm calls city.economy.v2.OrgService.GetFirm.
func (c *orgServiceClient) GetFirm(ctx context.Context, req *connect.Request[v2.GetFirmRequest]) (*connect.Response[v2.GetFirmResponse], error) {
	return c.getFirm.CallUnary(ctx, req)
}

// UpdateFirm calls city.economy.v2.OrgService.UpdateFirm.
func (c *orgServiceClient) UpdateFirm(ctx context.Context, req *connect.Request[v2.UpdateFirmRequest]) (*connect.Response[v2.UpdateFirmResponse], error) {
	return c.updateFirm.CallUnary(ctx, req)
}

// ListFirms calls city.economy.v2.OrgService.ListFirms.
func (c *orgServiceClient) ListFirms(ctx context.Context, req *connect.Request[v2.ListFirmsRequest]) (*connect.Response[v2.ListFirmsResponse], error) {
	return c.listFirms.CallUnary(ctx, req)
}

// DeltaUpdateFirm calls city.economy.v2.OrgService.DeltaUpdateFirm.
func (c *orgServiceClient) DeltaUpdateFirm(ctx context.Context, req *connect.Request[v2.DeltaUpdateFirmRequest]) (*connect.Response[v2.DeltaUpdateFirmResponse], error) {
	return c.deltaUpdateFirm.CallUnary(ctx, req)
}

// AddNBS calls city.economy.v2.OrgService.AddNBS.
func (c *orgServiceClient) AddNBS(ctx context.Context, req *connect.Request[v2.AddNBSRequest]) (*connect.Response[v2.AddNBSResponse], error) {
	return c.addNBS.CallUnary(ctx, req)
}

// RemoveNBS calls city.economy.v2.OrgService.RemoveNBS.
func (c *orgServiceClient) RemoveNBS(ctx context.Context, req *connect.Request[v2.RemoveNBSRequest]) (*connect.Response[v2.RemoveNBSResponse], error) {
	return c.removeNBS.CallUnary(ctx, req)
}

// GetNBS calls city.economy.v2.OrgService.GetNBS.
func (c *orgServiceClient) GetNBS(ctx context.Context, req *connect.Request[v2.GetNBSRequest]) (*connect.Response[v2.GetNBSResponse], error) {
	return c.getNBS.CallUnary(ctx, req)
}

// UpdateNBS calls city.economy.v2.OrgService.UpdateNBS.
func (c *orgServiceClient) UpdateNBS(ctx context.Context, req *connect.Request[v2.UpdateNBSRequest]) (*connect.Response[v2.UpdateNBSResponse], error) {
	return c.updateNBS.CallUnary(ctx, req)
}

// ListNBS calls city.economy.v2.OrgService.ListNBS.
func (c *orgServiceClient) ListNBS(ctx context.Context, req *connect.Request[v2.ListNBSRequest]) (*connect.Response[v2.ListNBSResponse], error) {
	return c.listNBS.CallUnary(ctx, req)
}

// DeltaUpdateNBS calls city.economy.v2.OrgService.DeltaUpdateNBS.
func (c *orgServiceClient) DeltaUpdateNBS(ctx context.Context, req *connect.Request[v2.DeltaUpdateNBSRequest]) (*connect.Response[v2.DeltaUpdateNBSResponse], error) {
	return c.deltaUpdateNBS.CallUnary(ctx, req)
}

// AddGovernment calls city.economy.v2.OrgService.AddGovernment.
func (c *orgServiceClient) AddGovernment(ctx context.Context, req *connect.Request[v2.AddGovernmentRequest]) (*connect.Response[v2.AddGovernmentResponse], error) {
	return c.addGovernment.CallUnary(ctx, req)
}

// RemoveGovernment calls city.economy.v2.OrgService.RemoveGovernment.
func (c *orgServiceClient) RemoveGovernment(ctx context.Context, req *connect.Request[v2.RemoveGovernmentRequest]) (*connect.Response[v2.RemoveGovernmentResponse], error) {
	return c.removeGovernment.CallUnary(ctx, req)
}

// GetGovernment calls city.economy.v2.OrgService.GetGovernment.
func (c *orgServiceClient) GetGovernment(ctx context.Context, req *connect.Request[v2.GetGovernmentRequest]) (*connect.Response[v2.GetGovernmentResponse], error) {
	return c.getGovernment.CallUnary(ctx, req)
}

// UpdateGovernment calls city.economy.v2.OrgService.UpdateGovernment.
func (c *orgServiceClient) UpdateGovernment(ctx context.Context, req *connect.Request[v2.UpdateGovernmentRequest]) (*connect.Response[v2.UpdateGovernmentResponse], error) {
	return c.updateGovernment.CallUnary(ctx, req)
}

// ListGovernments calls city.economy.v2.OrgService.ListGovernments.
func (c *orgServiceClient) ListGovernments(ctx context.Context, req *connect.Request[v2.ListGovernmentsRequest]) (*connect.Response[v2.ListGovernmentsResponse], error) {
	return c.listGovernments.CallUnary(ctx, req)
}

// DeltaUpdateGovernment calls city.economy.v2.OrgService.DeltaUpdateGovernment.
func (c *orgServiceClient) DeltaUpdateGovernment(ctx context.Context, req *connect.Request[v2.DeltaUpdateGovernmentRequest]) (*connect.Response[v2.DeltaUpdateGovernmentResponse], error) {
	return c.deltaUpdateGovernment.CallUnary(ctx, req)
}

// AddBank calls city.economy.v2.OrgService.AddBank.
func (c *orgServiceClient) AddBank(ctx context.Context, req *connect.Request[v2.AddBankRequest]) (*connect.Response[v2.AddBankResponse], error) {
	return c.addBank.CallUnary(ctx, req)
}

// RemoveBank calls city.economy.v2.OrgService.RemoveBank.
func (c *orgServiceClient) RemoveBank(ctx context.Context, req *connect.Request[v2.RemoveBankRequest]) (*connect.Response[v2.RemoveBankResponse], error) {
	return c.removeBank.CallUnary(ctx, req)
}

// GetBank calls city.economy.v2.OrgService.GetBank.
func (c *orgServiceClient) GetBank(ctx context.Context, req *connect.Request[v2.GetBankRequest]) (*connect.Response[v2.GetBankResponse], error) {
	return c.getBank.CallUnary(ctx, req)
}

// UpdateBank calls city.economy.v2.OrgService.UpdateBank.
func (c *orgServiceClient) UpdateBank(ctx context.Context, req *connect.Request[v2.UpdateBankRequest]) (*connect.Response[v2.UpdateBankResponse], error) {
	return c.updateBank.CallUnary(ctx, req)
}

// ListBanks calls city.economy.v2.OrgService.ListBanks.
func (c *orgServiceClient) ListBanks(ctx context.Context, req *connect.Request[v2.ListBanksRequest]) (*connect.Response[v2.ListBanksResponse], error) {
	return c.listBanks.CallUnary(ctx, req)
}

// DeltaUpdateBank calls city.economy.v2.OrgService.DeltaUpdateBank.
func (c *orgServiceClient) DeltaUpdateBank(ctx context.Context, req *connect.Request[v2.DeltaUpdateBankRequest]) (*connect.Response[v2.DeltaUpdateBankResponse], error) {
	return c.deltaUpdateBank.CallUnary(ctx, req)
}

// AddAgent calls city.economy.v2.OrgService.AddAgent.
func (c *orgServiceClient) AddAgent(ctx context.Context, req *connect.Request[v2.AddAgentRequest]) (*connect.Response[v2.AddAgentResponse], error) {
	return c.addAgent.CallUnary(ctx, req)
}

// RemoveAgent calls city.economy.v2.OrgService.RemoveAgent.
func (c *orgServiceClient) RemoveAgent(ctx context.Context, req *connect.Request[v2.RemoveAgentRequest]) (*connect.Response[v2.RemoveAgentResponse], error) {
	return c.removeAgent.CallUnary(ctx, req)
}

// GetAgent calls city.economy.v2.OrgService.GetAgent.
func (c *orgServiceClient) GetAgent(ctx context.Context, req *connect.Request[v2.GetAgentRequest]) (*connect.Response[v2.GetAgentResponse], error) {
	return c.getAgent.CallUnary(ctx, req)
}

// UpdateAgent calls city.economy.v2.OrgService.UpdateAgent.
func (c *orgServiceClient) UpdateAgent(ctx context.Context, req *connect.Request[v2.UpdateAgentRequest]) (*connect.Response[v2.UpdateAgentResponse], error) {
	return c.updateAgent.CallUnary(ctx, req)
}

// ListAgents calls city.economy.v2.OrgService.ListAgents.
func (c *orgServiceClient) ListAgents(ctx context.Context, req *connect.Request[v2.ListAgentsRequest]) (*connect.Response[v2.ListAgentsResponse], error) {
	return c.listAgents.CallUnary(ctx, req)
}

// DeltaUpdateAgent calls city.economy.v2.OrgService.DeltaUpdateAgent.
func (c *orgServiceClient) DeltaUpdateAgent(ctx context.Context, req *connect.Request[v2.DeltaUpdateAgentRequest]) (*connect.Response[v2.DeltaUpdateAgentResponse], error) {
	return c.deltaUpdateAgent.CallUnary(ctx, req)
}

// CalculateTaxesDue calls city.economy.v2.OrgService.CalculateTaxesDue.
func (c *orgServiceClient) CalculateTaxesDue(ctx context.Context, req *connect.Request[v2.CalculateTaxesDueRequest]) (*connect.Response[v2.CalculateTaxesDueResponse], error) {
	return c.calculateTaxesDue.CallUnary(ctx, req)
}

// CalculateConsumption calls city.economy.v2.OrgService.CalculateConsumption.
func (c *orgServiceClient) CalculateConsumption(ctx context.Context, req *connect.Request[v2.CalculateConsumptionRequest]) (*connect.Response[v2.CalculateConsumptionResponse], error) {
	return c.calculateConsumption.CallUnary(ctx, req)
}

// CalculateInterest calls city.economy.v2.OrgService.CalculateInterest.
func (c *orgServiceClient) CalculateInterest(ctx context.Context, req *connect.Request[v2.CalculateInterestRequest]) (*connect.Response[v2.CalculateInterestResponse], error) {
	return c.calculateInterest.CallUnary(ctx, req)
}

// CalculateRealGDP calls city.economy.v2.OrgService.CalculateRealGDP.
func (c *orgServiceClient) CalculateRealGDP(ctx context.Context, req *connect.Request[v2.CalculateRealGDPRequest]) (*connect.Response[v2.CalculateRealGDPResponse], error) {
	return c.calculateRealGDP.CallUnary(ctx, req)
}

// SaveEconomyEntities calls city.economy.v2.OrgService.SaveEconomyEntities.
func (c *orgServiceClient) SaveEconomyEntities(ctx context.Context, req *connect.Request[v2.SaveEconomyEntitiesRequest]) (*connect.Response[v2.SaveEconomyEntitiesResponse], error) {
	return c.saveEconomyEntities.CallUnary(ctx, req)
}

// LoadEconomyEntities calls city.economy.v2.OrgService.LoadEconomyEntities.
func (c *orgServiceClient) LoadEconomyEntities(ctx context.Context, req *connect.Request[v2.LoadEconomyEntitiesRequest]) (*connect.Response[v2.LoadEconomyEntitiesResponse], error) {
	return c.loadEconomyEntities.CallUnary(ctx, req)
}

// OrgServiceHandler is an implementation of the city.economy.v2.OrgService service.
type OrgServiceHandler interface {
	// Creates one or more firm entities
	// Returns the list of created firm IDs
	//
	// 创建一个或多个企业实体
	// 返回创建的企业ID列表
	AddFirm(context.Context, *connect.Request[v2.AddFirmRequest]) (*connect.Response[v2.AddFirmResponse], error)
	// Deletes one or more firms by their IDs
	// Also cleans up related employee associations
	//
	// 根据ID删除一个或多个企业实体
	// 同时清理相关的员工关联关系
	RemoveFirm(context.Context, *connect.Request[v2.RemoveFirmRequest]) (*connect.Response[v2.RemoveFirmResponse], error)
	// Retrieves detailed information for one or more firms
	// Returns a list of firm entities
	//
	// 获取一个或多个企业的详细信息
	// 返回企业实体信息列表
	GetFirm(context.Context, *connect.Request[v2.GetFirmRequest]) (*connect.Response[v2.GetFirmResponse], error)
	// Updates complete information for one or more firms
	//
	// 更新一个或多个企业的完整信息
	UpdateFirm(context.Context, *connect.Request[v2.UpdateFirmRequest]) (*connect.Response[v2.UpdateFirmResponse], error)
	// Lists all firms in the system
	//
	// 获取系统中所有企业的列表
	ListFirms(context.Context, *connect.Request[v2.ListFirmsRequest]) (*connect.Response[v2.ListFirmsResponse], error)
	// Performs incremental updates on one or more firms
	// Allows updating specific fields like price, inventory, demand etc.
	//
	// 对一个或多个企业进行增量更新
	// 可以更新价格、库存、需求等具体字段
	DeltaUpdateFirm(context.Context, *connect.Request[v2.DeltaUpdateFirmRequest]) (*connect.Response[v2.DeltaUpdateFirmResponse], error)
	// Creates a new NBS entity
	//
	// 创建新的国家统计局实体
	AddNBS(context.Context, *connect.Request[v2.AddNBSRequest]) (*connect.Response[v2.AddNBSResponse], error)
	// Deletes an NBS entity by ID
	//
	// 根据ID删除国家统计局实体
	RemoveNBS(context.Context, *connect.Request[v2.RemoveNBSRequest]) (*connect.Response[v2.RemoveNBSResponse], error)
	// Retrieves detailed information for an NBS entity
	//
	// 获取国家统计局的详细信息
	GetNBS(context.Context, *connect.Request[v2.GetNBSRequest]) (*connect.Response[v2.GetNBSResponse], error)
	// Updates complete information for an NBS entity
	//
	// 更新国家统计局的完整信息
	UpdateNBS(context.Context, *connect.Request[v2.UpdateNBSRequest]) (*connect.Response[v2.UpdateNBSResponse], error)
	// Lists all NBS entities in the system
	//
	// 获取系统中所有国家统计局的列表
	ListNBS(context.Context, *connect.Request[v2.ListNBSRequest]) (*connect.Response[v2.ListNBSResponse], error)
	// Performs incremental updates on an NBS entity
	// Allows updating specific statistics and citizen relationships
	//
	// 对国家统计局进行增量更新
	// 可以更新具体统计数据和公民关系
	DeltaUpdateNBS(context.Context, *connect.Request[v2.DeltaUpdateNBSRequest]) (*connect.Response[v2.DeltaUpdateNBSResponse], error)
	// Creates a new government entity
	//
	// 创建新的政府实体
	AddGovernment(context.Context, *connect.Request[v2.AddGovernmentRequest]) (*connect.Response[v2.AddGovernmentResponse], error)
	// Deletes a government entity by ID
	//
	// 根据ID删除政府实体
	RemoveGovernment(context.Context, *connect.Request[v2.RemoveGovernmentRequest]) (*connect.Response[v2.RemoveGovernmentResponse], error)
	// Retrieves detailed information for a government entity
	//
	// 获取政府实体的详细信息
	GetGovernment(context.Context, *connect.Request[v2.GetGovernmentRequest]) (*connect.Response[v2.GetGovernmentResponse], error)
	// Updates complete information for a government entity
	//
	// 更新政府实体的完整信息
	UpdateGovernment(context.Context, *connect.Request[v2.UpdateGovernmentRequest]) (*connect.Response[v2.UpdateGovernmentResponse], error)
	// Lists all government entities in the system
	//
	// 获取系统中所有政府实体的列表
	ListGovernments(context.Context, *connect.Request[v2.ListGovernmentsRequest]) (*connect.Response[v2.ListGovernmentsResponse], error)
	// Performs incremental updates on a government entity
	// Allows updating tax brackets and citizen relationships
	//
	// 对政府实体进行增量更新
	// 可以更新税收档位和公民关系
	DeltaUpdateGovernment(context.Context, *connect.Request[v2.DeltaUpdateGovernmentRequest]) (*connect.Response[v2.DeltaUpdateGovernmentResponse], error)
	// Creates a new bank entity
	//
	// 创建新的银行实体
	AddBank(context.Context, *connect.Request[v2.AddBankRequest]) (*connect.Response[v2.AddBankResponse], error)
	// Deletes a bank entity by ID
	//
	// 根据ID删除银行实体
	RemoveBank(context.Context, *connect.Request[v2.RemoveBankRequest]) (*connect.Response[v2.RemoveBankResponse], error)
	// Retrieves detailed information for a bank entity
	//
	// 获取银行实体的详细信息
	GetBank(context.Context, *connect.Request[v2.GetBankRequest]) (*connect.Response[v2.GetBankResponse], error)
	// Updates complete information for a bank entity
	//
	// 更新银行实体的完整信息
	UpdateBank(context.Context, *connect.Request[v2.UpdateBankRequest]) (*connect.Response[v2.UpdateBankResponse], error)
	// Lists all bank entities in the system
	//
	// 获取系统中所有银行实体的列表
	ListBanks(context.Context, *connect.Request[v2.ListBanksRequest]) (*connect.Response[v2.ListBanksResponse], error)
	// Performs incremental updates on a bank entity
	// Allows updating interest rates and customer relationships
	//
	// 对银行实体进行增量更新
	// 可以更新利率和客户关系
	DeltaUpdateBank(context.Context, *connect.Request[v2.DeltaUpdateBankRequest]) (*connect.Response[v2.DeltaUpdateBankResponse], error)
	// Creates one or more agent entities
	// Returns the list of created agent IDs
	//
	// 创建一个或多个经济主体
	// 返回创建的经济主体ID列表
	AddAgent(context.Context, *connect.Request[v2.AddAgentRequest]) (*connect.Response[v2.AddAgentResponse], error)
	// Deletes one or more agents by their IDs
	//
	// 根据ID删除一个或多个经济主体
	RemoveAgent(context.Context, *connect.Request[v2.RemoveAgentRequest]) (*connect.Response[v2.RemoveAgentResponse], error)
	// Retrieves detailed information for one or more agents
	//
	// 获取一个或多个经济主体的详细信息
	GetAgent(context.Context, *connect.Request[v2.GetAgentRequest]) (*connect.Response[v2.GetAgentResponse], error)
	// Updates complete information for one or more agents
	//
	// 更新一个或多个经济主体的完整信息
	UpdateAgent(context.Context, *connect.Request[v2.UpdateAgentRequest]) (*connect.Response[v2.UpdateAgentResponse], error)
	// Lists all agent entities in the system
	//
	// 获取系统中所有经济主体的列表
	ListAgents(context.Context, *connect.Request[v2.ListAgentsRequest]) (*connect.Response[v2.ListAgentsResponse], error)
	// Performs incremental updates on one or more agents
	// Allows updating specific attributes like currency, skills etc.
	//
	// 对一个或多个经济主体进行增量更新
	// 可以更新货币、技能等具体属性
	DeltaUpdateAgent(context.Context, *connect.Request[v2.DeltaUpdateAgentRequest]) (*connect.Response[v2.DeltaUpdateAgentResponse], error)
	// Calculates taxes due for specified agents
	// Supports income redistribution if enabled
	//
	// 计算指定经济主体的应缴税额
	// 支持开启收入再分配功能
	CalculateTaxesDue(context.Context, *connect.Request[v2.CalculateTaxesDueRequest]) (*connect.Response[v2.CalculateTaxesDueResponse], error)
	// Calculates actual consumption based on supply and demand
	//
	// 基于供给和需求计算实际消费量
	CalculateConsumption(context.Context, *connect.Request[v2.CalculateConsumptionRequest]) (*connect.Response[v2.CalculateConsumptionResponse], error)
	// Calculates interest for specified agents
	//
	// 计算指定经济主体的利息
	CalculateInterest(context.Context, *connect.Request[v2.CalculateInterestRequest]) (*connect.Response[v2.CalculateInterestResponse], error)
	// Calculates real GDP adjusted for inflation
	//
	// 计算经通货膨胀调整后的实际GDP
	CalculateRealGDP(context.Context, *connect.Request[v2.CalculateRealGDPRequest]) (*connect.Response[v2.CalculateRealGDPResponse], error)
	// Saves the current state of all economic entities to a file
	//
	// 将当前所有经济实体的状态保存到文件
	SaveEconomyEntities(context.Context, *connect.Request[v2.SaveEconomyEntitiesRequest]) (*connect.Response[v2.SaveEconomyEntitiesResponse], error)
	// Loads economic entities state from a file
	//
	// 从文件中加载经济实体的状态
	LoadEconomyEntities(context.Context, *connect.Request[v2.LoadEconomyEntitiesRequest]) (*connect.Response[v2.LoadEconomyEntitiesResponse], error)
}

// NewOrgServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrgServiceHandler(svc OrgServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	orgServiceMethods := v2.File_city_economy_v2_org_service_proto.Services().ByName("OrgService").Methods()
	orgServiceAddFirmHandler := connect.NewUnaryHandler(
		OrgServiceAddFirmProcedure,
		svc.AddFirm,
		connect.WithSchema(orgServiceMethods.ByName("AddFirm")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceRemoveFirmHandler := connect.NewUnaryHandler(
		OrgServiceRemoveFirmProcedure,
		svc.RemoveFirm,
		connect.WithSchema(orgServiceMethods.ByName("RemoveFirm")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceGetFirmHandler := connect.NewUnaryHandler(
		OrgServiceGetFirmProcedure,
		svc.GetFirm,
		connect.WithSchema(orgServiceMethods.ByName("GetFirm")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceUpdateFirmHandler := connect.NewUnaryHandler(
		OrgServiceUpdateFirmProcedure,
		svc.UpdateFirm,
		connect.WithSchema(orgServiceMethods.ByName("UpdateFirm")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceListFirmsHandler := connect.NewUnaryHandler(
		OrgServiceListFirmsProcedure,
		svc.ListFirms,
		connect.WithSchema(orgServiceMethods.ByName("ListFirms")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceDeltaUpdateFirmHandler := connect.NewUnaryHandler(
		OrgServiceDeltaUpdateFirmProcedure,
		svc.DeltaUpdateFirm,
		connect.WithSchema(orgServiceMethods.ByName("DeltaUpdateFirm")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceAddNBSHandler := connect.NewUnaryHandler(
		OrgServiceAddNBSProcedure,
		svc.AddNBS,
		connect.WithSchema(orgServiceMethods.ByName("AddNBS")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceRemoveNBSHandler := connect.NewUnaryHandler(
		OrgServiceRemoveNBSProcedure,
		svc.RemoveNBS,
		connect.WithSchema(orgServiceMethods.ByName("RemoveNBS")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceGetNBSHandler := connect.NewUnaryHandler(
		OrgServiceGetNBSProcedure,
		svc.GetNBS,
		connect.WithSchema(orgServiceMethods.ByName("GetNBS")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceUpdateNBSHandler := connect.NewUnaryHandler(
		OrgServiceUpdateNBSProcedure,
		svc.UpdateNBS,
		connect.WithSchema(orgServiceMethods.ByName("UpdateNBS")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceListNBSHandler := connect.NewUnaryHandler(
		OrgServiceListNBSProcedure,
		svc.ListNBS,
		connect.WithSchema(orgServiceMethods.ByName("ListNBS")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceDeltaUpdateNBSHandler := connect.NewUnaryHandler(
		OrgServiceDeltaUpdateNBSProcedure,
		svc.DeltaUpdateNBS,
		connect.WithSchema(orgServiceMethods.ByName("DeltaUpdateNBS")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceAddGovernmentHandler := connect.NewUnaryHandler(
		OrgServiceAddGovernmentProcedure,
		svc.AddGovernment,
		connect.WithSchema(orgServiceMethods.ByName("AddGovernment")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceRemoveGovernmentHandler := connect.NewUnaryHandler(
		OrgServiceRemoveGovernmentProcedure,
		svc.RemoveGovernment,
		connect.WithSchema(orgServiceMethods.ByName("RemoveGovernment")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceGetGovernmentHandler := connect.NewUnaryHandler(
		OrgServiceGetGovernmentProcedure,
		svc.GetGovernment,
		connect.WithSchema(orgServiceMethods.ByName("GetGovernment")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceUpdateGovernmentHandler := connect.NewUnaryHandler(
		OrgServiceUpdateGovernmentProcedure,
		svc.UpdateGovernment,
		connect.WithSchema(orgServiceMethods.ByName("UpdateGovernment")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceListGovernmentsHandler := connect.NewUnaryHandler(
		OrgServiceListGovernmentsProcedure,
		svc.ListGovernments,
		connect.WithSchema(orgServiceMethods.ByName("ListGovernments")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceDeltaUpdateGovernmentHandler := connect.NewUnaryHandler(
		OrgServiceDeltaUpdateGovernmentProcedure,
		svc.DeltaUpdateGovernment,
		connect.WithSchema(orgServiceMethods.ByName("DeltaUpdateGovernment")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceAddBankHandler := connect.NewUnaryHandler(
		OrgServiceAddBankProcedure,
		svc.AddBank,
		connect.WithSchema(orgServiceMethods.ByName("AddBank")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceRemoveBankHandler := connect.NewUnaryHandler(
		OrgServiceRemoveBankProcedure,
		svc.RemoveBank,
		connect.WithSchema(orgServiceMethods.ByName("RemoveBank")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceGetBankHandler := connect.NewUnaryHandler(
		OrgServiceGetBankProcedure,
		svc.GetBank,
		connect.WithSchema(orgServiceMethods.ByName("GetBank")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceUpdateBankHandler := connect.NewUnaryHandler(
		OrgServiceUpdateBankProcedure,
		svc.UpdateBank,
		connect.WithSchema(orgServiceMethods.ByName("UpdateBank")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceListBanksHandler := connect.NewUnaryHandler(
		OrgServiceListBanksProcedure,
		svc.ListBanks,
		connect.WithSchema(orgServiceMethods.ByName("ListBanks")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceDeltaUpdateBankHandler := connect.NewUnaryHandler(
		OrgServiceDeltaUpdateBankProcedure,
		svc.DeltaUpdateBank,
		connect.WithSchema(orgServiceMethods.ByName("DeltaUpdateBank")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceAddAgentHandler := connect.NewUnaryHandler(
		OrgServiceAddAgentProcedure,
		svc.AddAgent,
		connect.WithSchema(orgServiceMethods.ByName("AddAgent")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceRemoveAgentHandler := connect.NewUnaryHandler(
		OrgServiceRemoveAgentProcedure,
		svc.RemoveAgent,
		connect.WithSchema(orgServiceMethods.ByName("RemoveAgent")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceGetAgentHandler := connect.NewUnaryHandler(
		OrgServiceGetAgentProcedure,
		svc.GetAgent,
		connect.WithSchema(orgServiceMethods.ByName("GetAgent")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceUpdateAgentHandler := connect.NewUnaryHandler(
		OrgServiceUpdateAgentProcedure,
		svc.UpdateAgent,
		connect.WithSchema(orgServiceMethods.ByName("UpdateAgent")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceListAgentsHandler := connect.NewUnaryHandler(
		OrgServiceListAgentsProcedure,
		svc.ListAgents,
		connect.WithSchema(orgServiceMethods.ByName("ListAgents")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceDeltaUpdateAgentHandler := connect.NewUnaryHandler(
		OrgServiceDeltaUpdateAgentProcedure,
		svc.DeltaUpdateAgent,
		connect.WithSchema(orgServiceMethods.ByName("DeltaUpdateAgent")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceCalculateTaxesDueHandler := connect.NewUnaryHandler(
		OrgServiceCalculateTaxesDueProcedure,
		svc.CalculateTaxesDue,
		connect.WithSchema(orgServiceMethods.ByName("CalculateTaxesDue")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceCalculateConsumptionHandler := connect.NewUnaryHandler(
		OrgServiceCalculateConsumptionProcedure,
		svc.CalculateConsumption,
		connect.WithSchema(orgServiceMethods.ByName("CalculateConsumption")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceCalculateInterestHandler := connect.NewUnaryHandler(
		OrgServiceCalculateInterestProcedure,
		svc.CalculateInterest,
		connect.WithSchema(orgServiceMethods.ByName("CalculateInterest")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceCalculateRealGDPHandler := connect.NewUnaryHandler(
		OrgServiceCalculateRealGDPProcedure,
		svc.CalculateRealGDP,
		connect.WithSchema(orgServiceMethods.ByName("CalculateRealGDP")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceSaveEconomyEntitiesHandler := connect.NewUnaryHandler(
		OrgServiceSaveEconomyEntitiesProcedure,
		svc.SaveEconomyEntities,
		connect.WithSchema(orgServiceMethods.ByName("SaveEconomyEntities")),
		connect.WithHandlerOptions(opts...),
	)
	orgServiceLoadEconomyEntitiesHandler := connect.NewUnaryHandler(
		OrgServiceLoadEconomyEntitiesProcedure,
		svc.LoadEconomyEntities,
		connect.WithSchema(orgServiceMethods.ByName("LoadEconomyEntities")),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.economy.v2.OrgService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrgServiceAddFirmProcedure:
			orgServiceAddFirmHandler.ServeHTTP(w, r)
		case OrgServiceRemoveFirmProcedure:
			orgServiceRemoveFirmHandler.ServeHTTP(w, r)
		case OrgServiceGetFirmProcedure:
			orgServiceGetFirmHandler.ServeHTTP(w, r)
		case OrgServiceUpdateFirmProcedure:
			orgServiceUpdateFirmHandler.ServeHTTP(w, r)
		case OrgServiceListFirmsProcedure:
			orgServiceListFirmsHandler.ServeHTTP(w, r)
		case OrgServiceDeltaUpdateFirmProcedure:
			orgServiceDeltaUpdateFirmHandler.ServeHTTP(w, r)
		case OrgServiceAddNBSProcedure:
			orgServiceAddNBSHandler.ServeHTTP(w, r)
		case OrgServiceRemoveNBSProcedure:
			orgServiceRemoveNBSHandler.ServeHTTP(w, r)
		case OrgServiceGetNBSProcedure:
			orgServiceGetNBSHandler.ServeHTTP(w, r)
		case OrgServiceUpdateNBSProcedure:
			orgServiceUpdateNBSHandler.ServeHTTP(w, r)
		case OrgServiceListNBSProcedure:
			orgServiceListNBSHandler.ServeHTTP(w, r)
		case OrgServiceDeltaUpdateNBSProcedure:
			orgServiceDeltaUpdateNBSHandler.ServeHTTP(w, r)
		case OrgServiceAddGovernmentProcedure:
			orgServiceAddGovernmentHandler.ServeHTTP(w, r)
		case OrgServiceRemoveGovernmentProcedure:
			orgServiceRemoveGovernmentHandler.ServeHTTP(w, r)
		case OrgServiceGetGovernmentProcedure:
			orgServiceGetGovernmentHandler.ServeHTTP(w, r)
		case OrgServiceUpdateGovernmentProcedure:
			orgServiceUpdateGovernmentHandler.ServeHTTP(w, r)
		case OrgServiceListGovernmentsProcedure:
			orgServiceListGovernmentsHandler.ServeHTTP(w, r)
		case OrgServiceDeltaUpdateGovernmentProcedure:
			orgServiceDeltaUpdateGovernmentHandler.ServeHTTP(w, r)
		case OrgServiceAddBankProcedure:
			orgServiceAddBankHandler.ServeHTTP(w, r)
		case OrgServiceRemoveBankProcedure:
			orgServiceRemoveBankHandler.ServeHTTP(w, r)
		case OrgServiceGetBankProcedure:
			orgServiceGetBankHandler.ServeHTTP(w, r)
		case OrgServiceUpdateBankProcedure:
			orgServiceUpdateBankHandler.ServeHTTP(w, r)
		case OrgServiceListBanksProcedure:
			orgServiceListBanksHandler.ServeHTTP(w, r)
		case OrgServiceDeltaUpdateBankProcedure:
			orgServiceDeltaUpdateBankHandler.ServeHTTP(w, r)
		case OrgServiceAddAgentProcedure:
			orgServiceAddAgentHandler.ServeHTTP(w, r)
		case OrgServiceRemoveAgentProcedure:
			orgServiceRemoveAgentHandler.ServeHTTP(w, r)
		case OrgServiceGetAgentProcedure:
			orgServiceGetAgentHandler.ServeHTTP(w, r)
		case OrgServiceUpdateAgentProcedure:
			orgServiceUpdateAgentHandler.ServeHTTP(w, r)
		case OrgServiceListAgentsProcedure:
			orgServiceListAgentsHandler.ServeHTTP(w, r)
		case OrgServiceDeltaUpdateAgentProcedure:
			orgServiceDeltaUpdateAgentHandler.ServeHTTP(w, r)
		case OrgServiceCalculateTaxesDueProcedure:
			orgServiceCalculateTaxesDueHandler.ServeHTTP(w, r)
		case OrgServiceCalculateConsumptionProcedure:
			orgServiceCalculateConsumptionHandler.ServeHTTP(w, r)
		case OrgServiceCalculateInterestProcedure:
			orgServiceCalculateInterestHandler.ServeHTTP(w, r)
		case OrgServiceCalculateRealGDPProcedure:
			orgServiceCalculateRealGDPHandler.ServeHTTP(w, r)
		case OrgServiceSaveEconomyEntitiesProcedure:
			orgServiceSaveEconomyEntitiesHandler.ServeHTTP(w, r)
		case OrgServiceLoadEconomyEntitiesProcedure:
			orgServiceLoadEconomyEntitiesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrgServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrgServiceHandler struct{}

func (UnimplementedOrgServiceHandler) AddFirm(context.Context, *connect.Request[v2.AddFirmRequest]) (*connect.Response[v2.AddFirmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.AddFirm is not implemented"))
}

func (UnimplementedOrgServiceHandler) RemoveFirm(context.Context, *connect.Request[v2.RemoveFirmRequest]) (*connect.Response[v2.RemoveFirmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.RemoveFirm is not implemented"))
}

func (UnimplementedOrgServiceHandler) GetFirm(context.Context, *connect.Request[v2.GetFirmRequest]) (*connect.Response[v2.GetFirmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.GetFirm is not implemented"))
}

func (UnimplementedOrgServiceHandler) UpdateFirm(context.Context, *connect.Request[v2.UpdateFirmRequest]) (*connect.Response[v2.UpdateFirmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.UpdateFirm is not implemented"))
}

func (UnimplementedOrgServiceHandler) ListFirms(context.Context, *connect.Request[v2.ListFirmsRequest]) (*connect.Response[v2.ListFirmsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.ListFirms is not implemented"))
}

func (UnimplementedOrgServiceHandler) DeltaUpdateFirm(context.Context, *connect.Request[v2.DeltaUpdateFirmRequest]) (*connect.Response[v2.DeltaUpdateFirmResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.DeltaUpdateFirm is not implemented"))
}

func (UnimplementedOrgServiceHandler) AddNBS(context.Context, *connect.Request[v2.AddNBSRequest]) (*connect.Response[v2.AddNBSResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.AddNBS is not implemented"))
}

func (UnimplementedOrgServiceHandler) RemoveNBS(context.Context, *connect.Request[v2.RemoveNBSRequest]) (*connect.Response[v2.RemoveNBSResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.RemoveNBS is not implemented"))
}

func (UnimplementedOrgServiceHandler) GetNBS(context.Context, *connect.Request[v2.GetNBSRequest]) (*connect.Response[v2.GetNBSResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.GetNBS is not implemented"))
}

func (UnimplementedOrgServiceHandler) UpdateNBS(context.Context, *connect.Request[v2.UpdateNBSRequest]) (*connect.Response[v2.UpdateNBSResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.UpdateNBS is not implemented"))
}

func (UnimplementedOrgServiceHandler) ListNBS(context.Context, *connect.Request[v2.ListNBSRequest]) (*connect.Response[v2.ListNBSResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.ListNBS is not implemented"))
}

func (UnimplementedOrgServiceHandler) DeltaUpdateNBS(context.Context, *connect.Request[v2.DeltaUpdateNBSRequest]) (*connect.Response[v2.DeltaUpdateNBSResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.DeltaUpdateNBS is not implemented"))
}

func (UnimplementedOrgServiceHandler) AddGovernment(context.Context, *connect.Request[v2.AddGovernmentRequest]) (*connect.Response[v2.AddGovernmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.AddGovernment is not implemented"))
}

func (UnimplementedOrgServiceHandler) RemoveGovernment(context.Context, *connect.Request[v2.RemoveGovernmentRequest]) (*connect.Response[v2.RemoveGovernmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.RemoveGovernment is not implemented"))
}

func (UnimplementedOrgServiceHandler) GetGovernment(context.Context, *connect.Request[v2.GetGovernmentRequest]) (*connect.Response[v2.GetGovernmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.GetGovernment is not implemented"))
}

func (UnimplementedOrgServiceHandler) UpdateGovernment(context.Context, *connect.Request[v2.UpdateGovernmentRequest]) (*connect.Response[v2.UpdateGovernmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.UpdateGovernment is not implemented"))
}

func (UnimplementedOrgServiceHandler) ListGovernments(context.Context, *connect.Request[v2.ListGovernmentsRequest]) (*connect.Response[v2.ListGovernmentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.ListGovernments is not implemented"))
}

func (UnimplementedOrgServiceHandler) DeltaUpdateGovernment(context.Context, *connect.Request[v2.DeltaUpdateGovernmentRequest]) (*connect.Response[v2.DeltaUpdateGovernmentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.DeltaUpdateGovernment is not implemented"))
}

func (UnimplementedOrgServiceHandler) AddBank(context.Context, *connect.Request[v2.AddBankRequest]) (*connect.Response[v2.AddBankResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.AddBank is not implemented"))
}

func (UnimplementedOrgServiceHandler) RemoveBank(context.Context, *connect.Request[v2.RemoveBankRequest]) (*connect.Response[v2.RemoveBankResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.RemoveBank is not implemented"))
}

func (UnimplementedOrgServiceHandler) GetBank(context.Context, *connect.Request[v2.GetBankRequest]) (*connect.Response[v2.GetBankResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.GetBank is not implemented"))
}

func (UnimplementedOrgServiceHandler) UpdateBank(context.Context, *connect.Request[v2.UpdateBankRequest]) (*connect.Response[v2.UpdateBankResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.UpdateBank is not implemented"))
}

func (UnimplementedOrgServiceHandler) ListBanks(context.Context, *connect.Request[v2.ListBanksRequest]) (*connect.Response[v2.ListBanksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.ListBanks is not implemented"))
}

func (UnimplementedOrgServiceHandler) DeltaUpdateBank(context.Context, *connect.Request[v2.DeltaUpdateBankRequest]) (*connect.Response[v2.DeltaUpdateBankResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.DeltaUpdateBank is not implemented"))
}

func (UnimplementedOrgServiceHandler) AddAgent(context.Context, *connect.Request[v2.AddAgentRequest]) (*connect.Response[v2.AddAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.AddAgent is not implemented"))
}

func (UnimplementedOrgServiceHandler) RemoveAgent(context.Context, *connect.Request[v2.RemoveAgentRequest]) (*connect.Response[v2.RemoveAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.RemoveAgent is not implemented"))
}

func (UnimplementedOrgServiceHandler) GetAgent(context.Context, *connect.Request[v2.GetAgentRequest]) (*connect.Response[v2.GetAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.GetAgent is not implemented"))
}

func (UnimplementedOrgServiceHandler) UpdateAgent(context.Context, *connect.Request[v2.UpdateAgentRequest]) (*connect.Response[v2.UpdateAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.UpdateAgent is not implemented"))
}

func (UnimplementedOrgServiceHandler) ListAgents(context.Context, *connect.Request[v2.ListAgentsRequest]) (*connect.Response[v2.ListAgentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.ListAgents is not implemented"))
}

func (UnimplementedOrgServiceHandler) DeltaUpdateAgent(context.Context, *connect.Request[v2.DeltaUpdateAgentRequest]) (*connect.Response[v2.DeltaUpdateAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.DeltaUpdateAgent is not implemented"))
}

func (UnimplementedOrgServiceHandler) CalculateTaxesDue(context.Context, *connect.Request[v2.CalculateTaxesDueRequest]) (*connect.Response[v2.CalculateTaxesDueResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.CalculateTaxesDue is not implemented"))
}

func (UnimplementedOrgServiceHandler) CalculateConsumption(context.Context, *connect.Request[v2.CalculateConsumptionRequest]) (*connect.Response[v2.CalculateConsumptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.CalculateConsumption is not implemented"))
}

func (UnimplementedOrgServiceHandler) CalculateInterest(context.Context, *connect.Request[v2.CalculateInterestRequest]) (*connect.Response[v2.CalculateInterestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.CalculateInterest is not implemented"))
}

func (UnimplementedOrgServiceHandler) CalculateRealGDP(context.Context, *connect.Request[v2.CalculateRealGDPRequest]) (*connect.Response[v2.CalculateRealGDPResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.CalculateRealGDP is not implemented"))
}

func (UnimplementedOrgServiceHandler) SaveEconomyEntities(context.Context, *connect.Request[v2.SaveEconomyEntitiesRequest]) (*connect.Response[v2.SaveEconomyEntitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.SaveEconomyEntities is not implemented"))
}

func (UnimplementedOrgServiceHandler) LoadEconomyEntities(context.Context, *connect.Request[v2.LoadEconomyEntitiesRequest]) (*connect.Response[v2.LoadEconomyEntitiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.economy.v2.OrgService.LoadEconomyEntities is not implemented"))
}
