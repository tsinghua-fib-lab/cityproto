// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/traffic/interaction/lane/v1/lane_service.proto

package lanev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "git.fiblab.net/sim/protos/go/city/traffic/interaction/lane/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LaneServiceName is the fully-qualified name of the LaneService service.
	LaneServiceName = "city.traffic.interaction.lane.v1.LaneService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LaneServiceSetMaxVProcedure is the fully-qualified name of the LaneService's SetMaxV RPC.
	LaneServiceSetMaxVProcedure = "/city.traffic.interaction.lane.v1.LaneService/SetMaxV"
	// LaneServiceGetLaneProcedure is the fully-qualified name of the LaneService's GetLane RPC.
	LaneServiceGetLaneProcedure = "/city.traffic.interaction.lane.v1.LaneService/GetLane"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	laneServiceServiceDescriptor       = v1.File_city_traffic_interaction_lane_v1_lane_service_proto.Services().ByName("LaneService")
	laneServiceSetMaxVMethodDescriptor = laneServiceServiceDescriptor.Methods().ByName("SetMaxV")
	laneServiceGetLaneMethodDescriptor = laneServiceServiceDescriptor.Methods().ByName("GetLane")
)

// LaneServiceClient is a client for the city.traffic.interaction.lane.v1.LaneService service.
type LaneServiceClient interface {
	// 设置Lane的最大速度
	SetMaxV(context.Context, *connect.Request[v1.SetMaxVRequest]) (*connect.Response[v1.SetMaxVResponse], error)
	// 获取Lane的信息
	GetLane(context.Context, *connect.Request[v1.GetLaneRequest]) (*connect.Response[v1.GetLaneResponse], error)
}

// NewLaneServiceClient constructs a client for the city.traffic.interaction.lane.v1.LaneService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLaneServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LaneServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &laneServiceClient{
		setMaxV: connect.NewClient[v1.SetMaxVRequest, v1.SetMaxVResponse](
			httpClient,
			baseURL+LaneServiceSetMaxVProcedure,
			connect.WithSchema(laneServiceSetMaxVMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getLane: connect.NewClient[v1.GetLaneRequest, v1.GetLaneResponse](
			httpClient,
			baseURL+LaneServiceGetLaneProcedure,
			connect.WithSchema(laneServiceGetLaneMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// laneServiceClient implements LaneServiceClient.
type laneServiceClient struct {
	setMaxV *connect.Client[v1.SetMaxVRequest, v1.SetMaxVResponse]
	getLane *connect.Client[v1.GetLaneRequest, v1.GetLaneResponse]
}

// SetMaxV calls city.traffic.interaction.lane.v1.LaneService.SetMaxV.
func (c *laneServiceClient) SetMaxV(ctx context.Context, req *connect.Request[v1.SetMaxVRequest]) (*connect.Response[v1.SetMaxVResponse], error) {
	return c.setMaxV.CallUnary(ctx, req)
}

// GetLane calls city.traffic.interaction.lane.v1.LaneService.GetLane.
func (c *laneServiceClient) GetLane(ctx context.Context, req *connect.Request[v1.GetLaneRequest]) (*connect.Response[v1.GetLaneResponse], error) {
	return c.getLane.CallUnary(ctx, req)
}

// LaneServiceHandler is an implementation of the city.traffic.interaction.lane.v1.LaneService
// service.
type LaneServiceHandler interface {
	// 设置Lane的最大速度
	SetMaxV(context.Context, *connect.Request[v1.SetMaxVRequest]) (*connect.Response[v1.SetMaxVResponse], error)
	// 获取Lane的信息
	GetLane(context.Context, *connect.Request[v1.GetLaneRequest]) (*connect.Response[v1.GetLaneResponse], error)
}

// NewLaneServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLaneServiceHandler(svc LaneServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	laneServiceSetMaxVHandler := connect.NewUnaryHandler(
		LaneServiceSetMaxVProcedure,
		svc.SetMaxV,
		connect.WithSchema(laneServiceSetMaxVMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	laneServiceGetLaneHandler := connect.NewUnaryHandler(
		LaneServiceGetLaneProcedure,
		svc.GetLane,
		connect.WithSchema(laneServiceGetLaneMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.traffic.interaction.lane.v1.LaneService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LaneServiceSetMaxVProcedure:
			laneServiceSetMaxVHandler.ServeHTTP(w, r)
		case LaneServiceGetLaneProcedure:
			laneServiceGetLaneHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLaneServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLaneServiceHandler struct{}

func (UnimplementedLaneServiceHandler) SetMaxV(context.Context, *connect.Request[v1.SetMaxVRequest]) (*connect.Response[v1.SetMaxVResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.traffic.interaction.lane.v1.LaneService.SetMaxV is not implemented"))
}

func (UnimplementedLaneServiceHandler) GetLane(context.Context, *connect.Request[v1.GetLaneRequest]) (*connect.Response[v1.GetLaneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.traffic.interaction.lane.v1.LaneService.GetLane is not implemented"))
}
