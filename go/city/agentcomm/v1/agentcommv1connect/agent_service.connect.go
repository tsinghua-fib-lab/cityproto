// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/agentcomm/v1/agent_service.proto

package agentcommv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "git.fiblab.net/sim/protos/v2/go/city/agentcomm/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "city.agentcomm.v1.AgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentServiceCommunicateProcedure is the fully-qualified name of the AgentService's Communicate
	// RPC.
	AgentServiceCommunicateProcedure = "/city.agentcomm.v1.AgentService/Communicate"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	agentServiceServiceDescriptor           = v1.File_city_agentcomm_v1_agent_service_proto.Services().ByName("AgentService")
	agentServiceCommunicateMethodDescriptor = agentServiceServiceDescriptor.Methods().ByName("Communicate")
)

// AgentServiceClient is a client for the city.agentcomm.v1.AgentService service.
type AgentServiceClient interface {
	Communicate(context.Context) *connect.BidiStreamForClient[v1.CommunicateRequest, v1.CommunicateResponse]
}

// NewAgentServiceClient constructs a client for the city.agentcomm.v1.AgentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentServiceClient{
		communicate: connect.NewClient[v1.CommunicateRequest, v1.CommunicateResponse](
			httpClient,
			baseURL+AgentServiceCommunicateProcedure,
			connect.WithSchema(agentServiceCommunicateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	communicate *connect.Client[v1.CommunicateRequest, v1.CommunicateResponse]
}

// Communicate calls city.agentcomm.v1.AgentService.Communicate.
func (c *agentServiceClient) Communicate(ctx context.Context) *connect.BidiStreamForClient[v1.CommunicateRequest, v1.CommunicateResponse] {
	return c.communicate.CallBidiStream(ctx)
}

// AgentServiceHandler is an implementation of the city.agentcomm.v1.AgentService service.
type AgentServiceHandler interface {
	Communicate(context.Context, *connect.BidiStream[v1.CommunicateRequest, v1.CommunicateResponse]) error
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentServiceCommunicateHandler := connect.NewBidiStreamHandler(
		AgentServiceCommunicateProcedure,
		svc.Communicate,
		connect.WithSchema(agentServiceCommunicateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.agentcomm.v1.AgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentServiceCommunicateProcedure:
			agentServiceCommunicateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) Communicate(context.Context, *connect.BidiStream[v1.CommunicateRequest, v1.CommunicateResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("city.agentcomm.v1.AgentService.Communicate is not implemented"))
}
