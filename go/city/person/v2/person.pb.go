// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: city/person/v2/person.proto

package personv2

import (
	v2 "git.fiblab.net/sim/protos/v2/go/city/geo/v2"
	v21 "git.fiblab.net/sim/protos/v2/go/city/trip/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 车辆引擎类型
// vehicle type
type VehicleEngineType int32

const (
	// 未指定
	// unspecified
	VehicleEngineType_VEHICLE_ENGINE_TYPE_UNSPECIFIED VehicleEngineType = 0
	// 油车
	// gasoline vehicle
	VehicleEngineType_VEHICLE_ENGINE_TYPE_FUEL VehicleEngineType = 1
	// 电车
	// electric vehicle
	VehicleEngineType_VEHICLE_ENGINE_TYPE_ELECTRIC VehicleEngineType = 2
	// 混合动力汽车
	// hybrid vehicle
	VehicleEngineType_VEHICLE_ENGINE_TYPE_HYBRID VehicleEngineType = 3
)

// Enum value maps for VehicleEngineType.
var (
	VehicleEngineType_name = map[int32]string{
		0: "VEHICLE_ENGINE_TYPE_UNSPECIFIED",
		1: "VEHICLE_ENGINE_TYPE_FUEL",
		2: "VEHICLE_ENGINE_TYPE_ELECTRIC",
		3: "VEHICLE_ENGINE_TYPE_HYBRID",
	}
	VehicleEngineType_value = map[string]int32{
		"VEHICLE_ENGINE_TYPE_UNSPECIFIED": 0,
		"VEHICLE_ENGINE_TYPE_FUEL":        1,
		"VEHICLE_ENGINE_TYPE_ELECTRIC":    2,
		"VEHICLE_ENGINE_TYPE_HYBRID":      3,
	}
)

func (x VehicleEngineType) Enum() *VehicleEngineType {
	p := new(VehicleEngineType)
	*p = x
	return p
}

func (x VehicleEngineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleEngineType) Descriptor() protoreflect.EnumDescriptor {
	return file_city_person_v2_person_proto_enumTypes[0].Descriptor()
}

func (VehicleEngineType) Type() protoreflect.EnumType {
	return &file_city_person_v2_person_proto_enumTypes[0]
}

func (x VehicleEngineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleEngineType.Descriptor instead.
func (VehicleEngineType) EnumDescriptor() ([]byte, []int) {
	return file_city_person_v2_person_proto_rawDescGZIP(), []int{0}
}

// 公交车
// Type of Bus
type BusType int32

const (
	// 未指定
	// unspecified
	BusType_BUS_TYPE_UNSPECIFIED BusType = 0
	// 公交类型
	// The bus is a trolleybus, BRT, eta.
	BusType_BUS_TYPE_BUS BusType = 1
	// 地铁类型
	// The bus is a subway
	BusType_BUS_TYPE_SUBWAY BusType = 2
)

// Enum value maps for BusType.
var (
	BusType_name = map[int32]string{
		0: "BUS_TYPE_UNSPECIFIED",
		1: "BUS_TYPE_BUS",
		2: "BUS_TYPE_SUBWAY",
	}
	BusType_value = map[string]int32{
		"BUS_TYPE_UNSPECIFIED": 0,
		"BUS_TYPE_BUS":         1,
		"BUS_TYPE_SUBWAY":      2,
	}
)

func (x BusType) Enum() *BusType {
	p := new(BusType)
	*p = x
	return p
}

func (x BusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusType) Descriptor() protoreflect.EnumDescriptor {
	return file_city_person_v2_person_proto_enumTypes[1].Descriptor()
}

func (BusType) Type() protoreflect.EnumType {
	return &file_city_person_v2_person_proto_enumTypes[1]
}

func (x BusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusType.Descriptor instead.
func (BusType) EnumDescriptor() ([]byte, []int) {
	return file_city_person_v2_person_proto_rawDescGZIP(), []int{1}
}

// 智能体教育等级
// Agent education level
type Education int32

const (
	// 未指定
	// unspecified
	Education_EDUCATION_UNSPECIFIED Education = 0
	// 博士
	// doctor
	Education_EDUCATION_DOCTOR Education = 1
	// 硕士
	// master
	Education_EDUCATION_MASTER Education = 2
	// 本科
	// bachelor
	Education_EDUCATION_BACHELOR Education = 3
	// 高中
	// high school
	Education_EDUCATION_HIGH_SCHOOL Education = 4
	// 初中
	// junior high school
	Education_EDUCATION_JUNIOR_HIGH_SCHOOL Education = 5
	// 小学
	// primary school
	Education_EDUCATION_PRIMARY_SCHOOL Education = 6
	// 大专
	// college
	Education_EDUCATION_COLLEGE Education = 7
)

// Enum value maps for Education.
var (
	Education_name = map[int32]string{
		0: "EDUCATION_UNSPECIFIED",
		1: "EDUCATION_DOCTOR",
		2: "EDUCATION_MASTER",
		3: "EDUCATION_BACHELOR",
		4: "EDUCATION_HIGH_SCHOOL",
		5: "EDUCATION_JUNIOR_HIGH_SCHOOL",
		6: "EDUCATION_PRIMARY_SCHOOL",
		7: "EDUCATION_COLLEGE",
	}
	Education_value = map[string]int32{
		"EDUCATION_UNSPECIFIED":        0,
		"EDUCATION_DOCTOR":             1,
		"EDUCATION_MASTER":             2,
		"EDUCATION_BACHELOR":           3,
		"EDUCATION_HIGH_SCHOOL":        4,
		"EDUCATION_JUNIOR_HIGH_SCHOOL": 5,
		"EDUCATION_PRIMARY_SCHOOL":     6,
		"EDUCATION_COLLEGE":            7,
	}
)

func (x Education) Enum() *Education {
	p := new(Education)
	*p = x
	return p
}

func (x Education) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Education) Descriptor() protoreflect.EnumDescriptor {
	return file_city_person_v2_person_proto_enumTypes[2].Descriptor()
}

func (Education) Type() protoreflect.EnumType {
	return &file_city_person_v2_person_proto_enumTypes[2]
}

func (x Education) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Education.Descriptor instead.
func (Education) EnumDescriptor() ([]byte, []int) {
	return file_city_person_v2_person_proto_rawDescGZIP(), []int{2}
}

// 智能体性别
// agent gender
type Gender int32

const (
	// 未指定
	// unspecified
	Gender_GENDER_UNSPECIFIED Gender = 0
	// 男性
	// male
	Gender_GENDER_MALE Gender = 1
	// 女性
	// female
	Gender_GENDER_FEMALE Gender = 2
)

// Enum value maps for Gender.
var (
	Gender_name = map[int32]string{
		0: "GENDER_UNSPECIFIED",
		1: "GENDER_MALE",
		2: "GENDER_FEMALE",
	}
	Gender_value = map[string]int32{
		"GENDER_UNSPECIFIED": 0,
		"GENDER_MALE":        1,
		"GENDER_FEMALE":      2,
	}
)

func (x Gender) Enum() *Gender {
	p := new(Gender)
	*p = x
	return p
}

func (x Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_city_person_v2_person_proto_enumTypes[3].Descriptor()
}

func (Gender) Type() protoreflect.EnumType {
	return &file_city_person_v2_person_proto_enumTypes[3]
}

func (x Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Gender.Descriptor instead.
func (Gender) EnumDescriptor() ([]byte, []int) {
	return file_city_person_v2_person_proto_rawDescGZIP(), []int{3}
}

// 智能体消费水平
// agent consumption level
type Consumption int32

const (
	// 未指定
	// unspecified
	Consumption_CONSUMPTION_UNSPECIFIED Consumption = 0
	// 低
	// low
	Consumption_CONSUMPTION_LOW Consumption = 1
	// 较低
	// relatively low
	Consumption_CONSUMPTION_RELATIVELY_LOW Consumption = 2
	// 中等
	// medium
	Consumption_CONSUMPTION_MEDIUM Consumption = 3
	// 较高
	// relatively high
	Consumption_CONSUMPTION_RELATIVELY_HIGH Consumption = 4
	// 高
	// high
	Consumption_CONSUMPTION_HIGH Consumption = 5
)

// Enum value maps for Consumption.
var (
	Consumption_name = map[int32]string{
		0: "CONSUMPTION_UNSPECIFIED",
		1: "CONSUMPTION_LOW",
		2: "CONSUMPTION_RELATIVELY_LOW",
		3: "CONSUMPTION_MEDIUM",
		4: "CONSUMPTION_RELATIVELY_HIGH",
		5: "CONSUMPTION_HIGH",
	}
	Consumption_value = map[string]int32{
		"CONSUMPTION_UNSPECIFIED":     0,
		"CONSUMPTION_LOW":             1,
		"CONSUMPTION_RELATIVELY_LOW":  2,
		"CONSUMPTION_MEDIUM":          3,
		"CONSUMPTION_RELATIVELY_HIGH": 4,
		"CONSUMPTION_HIGH":            5,
	}
)

func (x Consumption) Enum() *Consumption {
	p := new(Consumption)
	*p = x
	return p
}

func (x Consumption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Consumption) Descriptor() protoreflect.EnumDescriptor {
	return file_city_person_v2_person_proto_enumTypes[4].Descriptor()
}

func (Consumption) Type() protoreflect.EnumType {
	return &file_city_person_v2_person_proto_enumTypes[4]
}

func (x Consumption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Consumption.Descriptor instead.
func (Consumption) EnumDescriptor() ([]byte, []int) {
	return file_city_person_v2_person_proto_rawDescGZIP(), []int{4}
}

// 智能体属性（通用）
// Agent properties (general)
type PersonAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PersonAttribute) Reset() {
	*x = PersonAttribute{}
	mi := &file_city_person_v2_person_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersonAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonAttribute) ProtoMessage() {}

func (x *PersonAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_city_person_v2_person_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonAttribute.ProtoReflect.Descriptor instead.
func (*PersonAttribute) Descriptor() ([]byte, []int) {
	return file_city_person_v2_person_proto_rawDescGZIP(), []int{0}
}

type VehicleEngineEfficiency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 能量转换效率：车辆消耗的能量 / 燃料的能量
	// the energy conversion efficiency: E_{vehicle consumed} / E_{fuel or electricity}
	EnergyConversionEfficiency float64 `protobuf:"fixed64,1,opt,name=energy_conversion_efficiency,json=energyConversionEfficiency,proto3" json:"energy_conversion_efficiency,omitempty" yaml:"energy_conversion_efficiency" bson:"energy_conversion_efficiency" db:"energy_conversion_efficiency"`
	// 消耗能量(MJ) 折合到CO2排放(g)的系数
	// the conversion factor from consumed energy (MJ) to CO2 emissions (g)
	CEf float64 `protobuf:"fixed64,2,opt,name=c_ef,json=cEf,proto3" json:"c_ef,omitempty" db:"c_ef" yaml:"c_ef" bson:"c_ef"`
}

func (x *VehicleEngineEfficiency) Reset() {
	*x = VehicleEngineEfficiency{}
	mi := &file_city_person_v2_person_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehicleEngineEfficiency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleEngineEfficiency) ProtoMessage() {}

func (x *VehicleEngineEfficiency) ProtoReflect() protoreflect.Message {
	mi := &file_city_person_v2_person_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleEngineEfficiency.ProtoReflect.Descriptor instead.
func (*VehicleEngineEfficiency) Descriptor() ([]byte, []int) {
	return file_city_person_v2_person_proto_rawDescGZIP(), []int{1}
}

func (x *VehicleEngineEfficiency) GetEnergyConversionEfficiency() float64 {
	if x != nil {
		return x.EnergyConversionEfficiency
	}
	return 0
}

func (x *VehicleEngineEfficiency) GetCEf() float64 {
	if x != nil {
		return x.CEf
	}
	return 0
}

// 车辆碳排附加属性
// Carbon emission additional attributes for Vehicles
type EmissionAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 单位: kg，车重
	// vehicle weight: kg
	Weight float64 `protobuf:"fixed64,1,opt,name=weight,proto3" json:"weight,omitempty" yaml:"weight" bson:"weight" db:"weight"`
	// 车辆引擎类型
	// vehicle engine type
	Type VehicleEngineType `protobuf:"varint,2,opt,name=type,proto3,enum=city.person.v2.VehicleEngineType" json:"type,omitempty" yaml:"type" bson:"type" db:"type"`
	// 汽车空气阻力系数
	// Drag coefficient of the vehicle
	CoefficientDrag float64 `protobuf:"fixed64,3,opt,name=coefficient_drag,json=coefficientDrag,proto3" json:"coefficient_drag,omitempty" yaml:"coefficient_drag" bson:"coefficient_drag" db:"coefficient_drag"`
	// 路面摩擦系数
	// Pavement friction coefficient
	LambdaS float64 `protobuf:"fixed64,4,opt,name=lambda_s,json=lambdaS,proto3" json:"lambda_s,omitempty" yaml:"lambda_s" bson:"lambda_s" db:"lambda_s"`
	// 单位: m^2，迎风面积
	// Frontal area: m^2
	FrontalArea float64 `protobuf:"fixed64,5,opt,name=frontal_area,json=frontalArea,proto3" json:"frontal_area,omitempty" yaml:"frontal_area" bson:"frontal_area" db:"frontal_area"`
	// 燃油引擎车辆效率
	// Fuel vehicle efficiency
	FuelEfficiency *VehicleEngineEfficiency `protobuf:"bytes,6,opt,name=fuel_efficiency,json=fuelEfficiency,proto3,oneof" json:"fuel_efficiency,omitempty" yaml:"fuel_efficiency" bson:"fuel_efficiency" db:"fuel_efficiency"`
	// 电动引擎车辆效率
	// Fuel vehicle efficiency
	ElectricEfficiency *VehicleEngineEfficiency `protobuf:"bytes,7,opt,name=electric_efficiency,json=electricEfficiency,proto3,oneof" json:"electric_efficiency,omitempty" yaml:"electric_efficiency" bson:"electric_efficiency" db:"electric_efficiency"`
}

func (x *EmissionAttribute) Reset() {
	*x = EmissionAttribute{}
	mi := &file_city_person_v2_person_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmissionAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmissionAttribute) ProtoMessage() {}

func (x *EmissionAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_city_person_v2_person_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmissionAttribute.ProtoReflect.Descriptor instead.
func (*EmissionAttribute) Descriptor() ([]byte, []int) {
	return file_city_person_v2_person_proto_rawDescGZIP(), []int{2}
}

func (x *EmissionAttribute) GetWeight() float64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *EmissionAttribute) GetType() VehicleEngineType {
	if x != nil {
		return x.Type
	}
	return VehicleEngineType_VEHICLE_ENGINE_TYPE_UNSPECIFIED
}

func (x *EmissionAttribute) GetCoefficientDrag() float64 {
	if x != nil {
		return x.CoefficientDrag
	}
	return 0
}

func (x *EmissionAttribute) GetLambdaS() float64 {
	if x != nil {
		return x.LambdaS
	}
	return 0
}

func (x *EmissionAttribute) GetFrontalArea() float64 {
	if x != nil {
		return x.FrontalArea
	}
	return 0
}

func (x *EmissionAttribute) GetFuelEfficiency() *VehicleEngineEfficiency {
	if x != nil {
		return x.FuelEfficiency
	}
	return nil
}

func (x *EmissionAttribute) GetElectricEfficiency() *VehicleEngineEfficiency {
	if x != nil {
		return x.ElectricEfficiency
	}
	return nil
}

// 车辆附加属性
// Vehicle additional attributes
type VehicleAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 单位: m，长度
	// length: m
	Length float64 `protobuf:"fixed64,1,opt,name=length,proto3" json:"length,omitempty" bson:"length" db:"length" yaml:"length"`
	// 单位: m，宽度
	// width: m
	Width float64 `protobuf:"fixed64,2,opt,name=width,proto3" json:"width,omitempty" yaml:"width" bson:"width" db:"width"`
	// 单位: m/s
	// max speed: m/s
	MaxSpeed float64 `protobuf:"fixed64,3,opt,name=max_speed,json=maxSpeed,proto3" json:"max_speed,omitempty" yaml:"max_speed" bson:"max_speed" db:"max_speed"`
	// 单位: m/s^2, 最大加速度（正值）
	// max accelaration: m/s^2 (positive value)
	MaxAcceleration float64 `protobuf:"fixed64,4,opt,name=max_acceleration,json=maxAcceleration,proto3" json:"max_acceleration,omitempty" yaml:"max_acceleration" bson:"max_acceleration" db:"max_acceleration"`
	// 单位: m/s^2, 最大减速度（负值）
	// max deceleration: m/s^2 (negative value)
	MaxBrakingAcceleration float64 `protobuf:"fixed64,5,opt,name=max_braking_acceleration,json=maxBrakingAcceleration,proto3" json:"max_braking_acceleration,omitempty" bson:"max_braking_acceleration" db:"max_braking_acceleration" yaml:"max_braking_acceleration"`
	// 单位: m/s^2, 一般加速度（正值），要求小于最大加速度
	// usual acceleration: m/s^2 (positive value), required to be less than the max acceleration
	UsualAcceleration float64 `protobuf:"fixed64,6,opt,name=usual_acceleration,json=usualAcceleration,proto3" json:"usual_acceleration,omitempty" yaml:"usual_acceleration" bson:"usual_acceleration" db:"usual_acceleration"`
	// 单位: m/s^2, 一般减速度（负值），要求大于最大减速度
	// usual deceleration: m/s^2 (negative value), required to be greater than the max deceleration
	UsualBrakingAcceleration float64 `protobuf:"fixed64,7,opt,name=usual_braking_acceleration,json=usualBrakingAcceleration,proto3" json:"usual_braking_acceleration,omitempty" yaml:"usual_braking_acceleration" bson:"usual_braking_acceleration" db:"usual_braking_acceleration"`
	// 单位: m, 完成变道所需路程
	// Distance required to complete lane change: m
	LaneChangeLength float64 `protobuf:"fixed64,8,opt,name=lane_change_length,json=laneChangeLength,proto3" json:"lane_change_length,omitempty" yaml:"lane_change_length" bson:"lane_change_length" db:"lane_change_length"`
	// 单位：米，本车距离前车的最小距离
	// The minimum distance between the vehicle and the vehicle in front: m
	MinGap float64 `protobuf:"fixed64,9,opt,name=min_gap,json=minGap,proto3" json:"min_gap,omitempty" yaml:"min_gap" bson:"min_gap" db:"min_gap"`
	// 安全车头时距
	// Safe time headway
	Headway float64 `protobuf:"fixed64,10,opt,name=headway,proto3" json:"headway,omitempty" yaml:"headway" bson:"headway" db:"headway"`
	// 车辆模型标签
	// Vehicle model tag
	Model *string `protobuf:"bytes,11,opt,name=model,proto3,oneof" json:"model,omitempty" yaml:"model" bson:"model" db:"model"`
	// 本车对车道限速认知的偏差百分比
	// The deviation of the vehicle's recognition of lane max speed
	LaneMaxSpeedRecognitionDeviation float64 `protobuf:"fixed64,12,opt,name=lane_max_speed_recognition_deviation,json=laneMaxSpeedRecognitionDeviation,proto3" json:"lane_max_speed_recognition_deviation,omitempty" yaml:"lane_max_speed_recognition_deviation" bson:"lane_max_speed_recognition_deviation" db:"lane_max_speed_recognition_deviation"`
	// 碳排属性
	// Carbon emission attribute
	EmissionAttribute *EmissionAttribute `protobuf:"bytes,13,opt,name=emission_attribute,json=emissionAttribute,proto3" json:"emission_attribute,omitempty" yaml:"emission_attribute" bson:"emission_attribute" db:"emission_attribute"`
}

func (x *VehicleAttribute) Reset() {
	*x = VehicleAttribute{}
	mi := &file_city_person_v2_person_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehicleAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleAttribute) ProtoMessage() {}

func (x *VehicleAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_city_person_v2_person_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleAttribute.ProtoReflect.Descriptor instead.
func (*VehicleAttribute) Descriptor() ([]byte, []int) {
	return file_city_person_v2_person_proto_rawDescGZIP(), []int{3}
}

func (x *VehicleAttribute) GetLength() float64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *VehicleAttribute) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *VehicleAttribute) GetMaxSpeed() float64 {
	if x != nil {
		return x.MaxSpeed
	}
	return 0
}

func (x *VehicleAttribute) GetMaxAcceleration() float64 {
	if x != nil {
		return x.MaxAcceleration
	}
	return 0
}

func (x *VehicleAttribute) GetMaxBrakingAcceleration() float64 {
	if x != nil {
		return x.MaxBrakingAcceleration
	}
	return 0
}

func (x *VehicleAttribute) GetUsualAcceleration() float64 {
	if x != nil {
		return x.UsualAcceleration
	}
	return 0
}

func (x *VehicleAttribute) GetUsualBrakingAcceleration() float64 {
	if x != nil {
		return x.UsualBrakingAcceleration
	}
	return 0
}

func (x *VehicleAttribute) GetLaneChangeLength() float64 {
	if x != nil {
		return x.LaneChangeLength
	}
	return 0
}

func (x *VehicleAttribute) GetMinGap() float64 {
	if x != nil {
		return x.MinGap
	}
	return 0
}

func (x *VehicleAttribute) GetHeadway() float64 {
	if x != nil {
		return x.Headway
	}
	return 0
}

func (x *VehicleAttribute) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *VehicleAttribute) GetLaneMaxSpeedRecognitionDeviation() float64 {
	if x != nil {
		return x.LaneMaxSpeedRecognitionDeviation
	}
	return 0
}

func (x *VehicleAttribute) GetEmissionAttribute() *EmissionAttribute {
	if x != nil {
		return x.EmissionAttribute
	}
	return nil
}

// 公交车附加属性
// Bus additional attributes
type BusAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 公交线路ID
	// bus line ID
	SublineId int32 `protobuf:"varint,1,opt,name=subline_id,json=sublineId,proto3" json:"subline_id,omitempty" yaml:"subline_id" bson:"subline_id" db:"subline_id"`
	// 公交车容量
	// bus capacity
	Capacity int32 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty" yaml:"capacity" bson:"capacity" db:"capacity"`
	// 公交车类型
	// type of bus
	Type BusType `protobuf:"varint,5,opt,name=type,proto3,enum=city.person.v2.BusType" json:"type,omitempty" yaml:"type" bson:"type" db:"type"`
}

func (x *BusAttribute) Reset() {
	*x = BusAttribute{}
	mi := &file_city_person_v2_person_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BusAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusAttribute) ProtoMessage() {}

func (x *BusAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_city_person_v2_person_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusAttribute.ProtoReflect.Descriptor instead.
func (*BusAttribute) Descriptor() ([]byte, []int) {
	return file_city_person_v2_person_proto_rawDescGZIP(), []int{4}
}

func (x *BusAttribute) GetSublineId() int32 {
	if x != nil {
		return x.SublineId
	}
	return 0
}

func (x *BusAttribute) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *BusAttribute) GetType() BusType {
	if x != nil {
		return x.Type
	}
	return BusType_BUS_TYPE_UNSPECIFIED
}

// 行人附加属性
// Pedestrian additional attributes
type PedestrianAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 单位: m/s
	// speed: m/s
	Speed float64 `protobuf:"fixed64,1,opt,name=speed,proto3" json:"speed,omitempty" yaml:"speed" bson:"speed" db:"speed"`
	// 行人模型标签
	// Pedestrian model tag
	Model *string `protobuf:"bytes,2,opt,name=model,proto3,oneof" json:"model,omitempty" bson:"model" db:"model" yaml:"model"`
}

func (x *PedestrianAttribute) Reset() {
	*x = PedestrianAttribute{}
	mi := &file_city_person_v2_person_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PedestrianAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PedestrianAttribute) ProtoMessage() {}

func (x *PedestrianAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_city_person_v2_person_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PedestrianAttribute.ProtoReflect.Descriptor instead.
func (*PedestrianAttribute) Descriptor() ([]byte, []int) {
	return file_city_person_v2_person_proto_rawDescGZIP(), []int{5}
}

func (x *PedestrianAttribute) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *PedestrianAttribute) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

// 自行车附加属性
// Bike additional attributes
type BikeAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 单位: m/s
	// speed: m/s
	Speed float64 `protobuf:"fixed64,1,opt,name=speed,proto3" json:"speed,omitempty" yaml:"speed" bson:"speed" db:"speed"`
	// 自行车模型标签
	// Bike model tag
	Model *string `protobuf:"bytes,2,opt,name=model,proto3,oneof" json:"model,omitempty" db:"model" yaml:"model" bson:"model"`
}

func (x *BikeAttribute) Reset() {
	*x = BikeAttribute{}
	mi := &file_city_person_v2_person_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BikeAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BikeAttribute) ProtoMessage() {}

func (x *BikeAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_city_person_v2_person_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BikeAttribute.ProtoReflect.Descriptor instead.
func (*BikeAttribute) Descriptor() ([]byte, []int) {
	return file_city_person_v2_person_proto_rawDescGZIP(), []int{6}
}

func (x *BikeAttribute) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *BikeAttribute) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

// 智能体简介
// agent profile
type PersonProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 年龄
	// age
	Age int32 `protobuf:"varint,1,opt,name=age,proto3" json:"age,omitempty" yaml:"age" bson:"age" db:"age"`
	// 教育水平
	// education level
	Education Education `protobuf:"varint,2,opt,name=education,proto3,enum=city.person.v2.Education" json:"education,omitempty" db:"education" yaml:"education" bson:"education"`
	// 性别
	// gender
	Gender Gender `protobuf:"varint,3,opt,name=gender,proto3,enum=city.person.v2.Gender" json:"gender,omitempty" yaml:"gender" bson:"gender" db:"gender"`
	// 消费水平
	// consumption level
	Consumption Consumption `protobuf:"varint,4,opt,name=consumption,proto3,enum=city.person.v2.Consumption" json:"consumption,omitempty" yaml:"consumption" bson:"consumption" db:"consumption"`
	// 房屋ID 区分不同家庭
	// House ID, identify which family this person belongs to
	HouseId int32 `protobuf:"varint,5,opt,name=house_id,json=houseId,proto3" json:"house_id,omitempty" yaml:"house_id" bson:"house_id" db:"house_id"`
}

func (x *PersonProfile) Reset() {
	*x = PersonProfile{}
	mi := &file_city_person_v2_person_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PersonProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonProfile) ProtoMessage() {}

func (x *PersonProfile) ProtoReflect() protoreflect.Message {
	mi := &file_city_person_v2_person_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonProfile.ProtoReflect.Descriptor instead.
func (*PersonProfile) Descriptor() ([]byte, []int) {
	return file_city_person_v2_person_proto_rawDescGZIP(), []int{7}
}

func (x *PersonProfile) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *PersonProfile) GetEducation() Education {
	if x != nil {
		return x.Education
	}
	return Education_EDUCATION_UNSPECIFIED
}

func (x *PersonProfile) GetGender() Gender {
	if x != nil {
		return x.Gender
	}
	return Gender_GENDER_UNSPECIFIED
}

func (x *PersonProfile) GetConsumption() Consumption {
	if x != nil {
		return x.Consumption
	}
	return Consumption_CONSUMPTION_UNSPECIFIED
}

func (x *PersonProfile) GetHouseId() int32 {
	if x != nil {
		return x.HouseId
	}
	return 0
}

// 智能体
// agent
type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 智能体ID
	// agent ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id" yaml:"id" bson:"id"`
	// 参数
	// attribute
	Attribute *PersonAttribute `protobuf:"bytes,2,opt,name=attribute,proto3" json:"attribute,omitempty" yaml:"attribute" bson:"attribute" db:"attribute"`
	// 初始位置
	// initial position
	Home *v2.Position `protobuf:"bytes,3,opt,name=home,proto3" json:"home,omitempty" yaml:"home" bson:"home" db:"home"`
	// 初始日程
	// initial schedules
	Schedules []*v21.Schedule `protobuf:"bytes,4,rep,name=schedules,proto3" json:"schedules,omitempty" bson:"schedules" db:"schedules" yaml:"schedules"`
	// 车辆附加属性
	// vehicle addtional attribute
	VehicleAttribute *VehicleAttribute `protobuf:"bytes,7,opt,name=vehicle_attribute,json=vehicleAttribute,proto3,oneof" json:"vehicle_attribute,omitempty" yaml:"vehicle_attribute" bson:"vehicle_attribute" db:"vehicle_attribute"`
	// 公交车附加属性
	// bus additional attribute
	BusAttribute *BusAttribute `protobuf:"bytes,8,opt,name=bus_attribute,json=busAttribute,proto3,oneof" json:"bus_attribute,omitempty" yaml:"bus_attribute" bson:"bus_attribute" db:"bus_attribute"`
	// 行人附加属性
	// pedestrian additional attribute
	PedestrianAttribute *PedestrianAttribute `protobuf:"bytes,12,opt,name=pedestrian_attribute,json=pedestrianAttribute,proto3,oneof" json:"pedestrian_attribute,omitempty" db:"pedestrian_attribute" yaml:"pedestrian_attribute" bson:"pedestrian_attribute"`
	// 自行车附加属性
	// bike addition attribute
	BikeAttribute *BikeAttribute `protobuf:"bytes,9,opt,name=bike_attribute,json=bikeAttribute,proto3,oneof" json:"bike_attribute,omitempty" yaml:"bike_attribute" bson:"bike_attribute" db:"bike_attribute"`
	// [可空] 额外的标签（例如：抢修车类型->电网）
	// [can be empty] additional tags (e.g. repair vehicle type -> power grid)
	Labels map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" yaml:"labels" bson:"labels" db:"labels"`
	// [可空] 智能体简介
	// [can be empty] agent profile
	Profile *PersonProfile `protobuf:"bytes,11,opt,name=profile,proto3,oneof" json:"profile,omitempty" bson:"profile" db:"profile" yaml:"profile"`
	// 工作地位置
	// work position
	Work *v2.Position `protobuf:"bytes,13,opt,name=work,proto3,oneof" json:"work,omitempty" yaml:"work" bson:"work" db:"work"`
	// 是否在SLEEP状态下也输出可视化（仅限车辆）
	// Whether to output visualization in the SLEEP state (vehicles only)
	OutputWhenSleep *bool `protobuf:"varint,14,opt,name=output_when_sleep,json=outputWhenSleep,proto3,oneof" json:"output_when_sleep,omitempty" yaml:"output_when_sleep" bson:"output_when_sleep" db:"output_when_sleep"`
}

func (x *Person) Reset() {
	*x = Person{}
	mi := &file_city_person_v2_person_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_city_person_v2_person_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_city_person_v2_person_proto_rawDescGZIP(), []int{8}
}

func (x *Person) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Person) GetAttribute() *PersonAttribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *Person) GetHome() *v2.Position {
	if x != nil {
		return x.Home
	}
	return nil
}

func (x *Person) GetSchedules() []*v21.Schedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *Person) GetVehicleAttribute() *VehicleAttribute {
	if x != nil {
		return x.VehicleAttribute
	}
	return nil
}

func (x *Person) GetBusAttribute() *BusAttribute {
	if x != nil {
		return x.BusAttribute
	}
	return nil
}

func (x *Person) GetPedestrianAttribute() *PedestrianAttribute {
	if x != nil {
		return x.PedestrianAttribute
	}
	return nil
}

func (x *Person) GetBikeAttribute() *BikeAttribute {
	if x != nil {
		return x.BikeAttribute
	}
	return nil
}

func (x *Person) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Person) GetProfile() *PersonProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *Person) GetWork() *v2.Position {
	if x != nil {
		return x.Work
	}
	return nil
}

func (x *Person) GetOutputWhenSleep() bool {
	if x != nil && x.OutputWhenSleep != nil {
		return *x.OutputWhenSleep
	}
	return false
}

// 智能体集合，对应一个智能体pb文件或一个智能体mongodb collection
// Agent collection, corresponding to an agent pb file or an agent mongodb collection
type Persons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Persons []*Person `protobuf:"bytes,1,rep,name=persons,proto3" json:"persons,omitempty" yaml:"persons" bson:"persons" db:"persons"`
}

func (x *Persons) Reset() {
	*x = Persons{}
	mi := &file_city_person_v2_person_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Persons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Persons) ProtoMessage() {}

func (x *Persons) ProtoReflect() protoreflect.Message {
	mi := &file_city_person_v2_person_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Persons.ProtoReflect.Descriptor instead.
func (*Persons) Descriptor() ([]byte, []int) {
	return file_city_person_v2_person_proto_rawDescGZIP(), []int{9}
}

func (x *Persons) GetPersons() []*Person {
	if x != nil {
		return x.Persons
	}
	return nil
}

var File_city_person_v2_person_proto protoreflect.FileDescriptor

var file_city_person_v2_person_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x69, 0x74, 0x79, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2f, 0x76, 0x32,
	0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x1a, 0x15, 0x63,
	0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x69, 0x74, 0x79, 0x2f, 0x74, 0x72, 0x69, 0x70, 0x2f,
	0x76, 0x32, 0x2f, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x11, 0x0a,
	0x0f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x22, 0x6e, 0x0a, 0x17, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x40, 0x0a, 0x1c, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x1a, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x11, 0x0a,
	0x04, 0x63, 0x5f, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x45, 0x66,
	0x22, 0xad, 0x03, 0x0a, 0x11, 0x45, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x61, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x5f, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x53, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x12, 0x55,
	0x0a, 0x0f, 0x66, 0x75, 0x65, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x48, 0x00, 0x52, 0x0e, 0x66, 0x75, 0x65, 0x6c, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x13, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x48, 0x01, 0x52, 0x12, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63,
	0x79, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x75, 0x65, 0x6c, 0x5f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x22, 0xd7, 0x04, 0x0a, 0x10, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x41,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x72, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6d,
	0x61, 0x78, 0x42, 0x72, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x62, 0x72,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x42,
	0x72, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x6c, 0x61, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x47, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x77, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x77, 0x61, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x4e,
	0x0a, 0x24, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x20, 0x6c, 0x61,
	0x6e, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x12, 0x65, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x11, 0x65,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x76, 0x0a, 0x0c, 0x42, 0x75,
	0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75,
	0x62, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x50, 0x0a, 0x13, 0x50, 0x65, 0x64, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x22, 0x4a, 0x0a, 0x0d, 0x42, 0x69, 0x6b, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x22, 0xe4, 0x01, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x22, 0x91, 0x07, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x29, 0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x74, 0x72, 0x69, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x10, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x42,
	0x75, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x48, 0x01, 0x52, 0x0c, 0x62,
	0x75, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5b,
	0x0a, 0x14, 0x70, 0x65, 0x64, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x69, 0x74, 0x79, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x48, 0x02, 0x52, 0x13, 0x70, 0x65, 0x64, 0x65, 0x73, 0x74, 0x72, 0x69, 0x61, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0e, 0x62,
	0x69, 0x6b, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x69, 0x6b, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x48, 0x03, 0x52, 0x0d, 0x62, 0x69, 0x6b, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x48, 0x04, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x05, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f,
	0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x88, 0x01,
	0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x75, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x65, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x62, 0x69, 0x6b, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x22, 0x3b, 0x0a, 0x07, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x07, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x2a, 0x98, 0x01, 0x0a, 0x11, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x1f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x45,
	0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x45, 0x4c, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x47,
	0x49, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x49,
	0x43, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x45,
	0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x59, 0x42, 0x52, 0x49,
	0x44, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x07, 0x42, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x42, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x55, 0x53, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x55,
	0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x57, 0x41, 0x59, 0x10, 0x02, 0x2a,
	0xdc, 0x01, 0x0a, 0x09, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x15, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x44, 0x55, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x53, 0x54,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x41, 0x43, 0x48, 0x45, 0x4c, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x44, 0x55, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x53,
	0x43, 0x48, 0x4f, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x44, 0x55, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4a, 0x55, 0x4e, 0x49, 0x4f, 0x52, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x5f, 0x53, 0x43, 0x48, 0x4f, 0x4f, 0x4c, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x44, 0x55,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x53,
	0x43, 0x48, 0x4f, 0x4f, 0x4c, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x44, 0x55, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x47, 0x45, 0x10, 0x07, 0x2a, 0x44,
	0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x45, 0x4d, 0x41,
	0x4c, 0x45, 0x10, 0x02, 0x2a, 0xae, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x4c, 0x59,
	0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x4c, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x05, 0x42, 0xb4, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x76, 0x32, 0x42, 0x0b, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74,
	0x2e, 0x66, 0x69, 0x62, 0x6c, 0x61, 0x62, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x69, 0x6d, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x69, 0x74,
	0x79, 0x2f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2f, 0x76, 0x32, 0x3b, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x76, 0x32, 0xa2, 0x02, 0x03, 0x43, 0x50, 0x58, 0xaa, 0x02, 0x0e, 0x43, 0x69, 0x74,
	0x79, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x0e, 0x43, 0x69,
	0x74, 0x79, 0x5c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x1a, 0x43,
	0x69, 0x74, 0x79, 0x5c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5c, 0x56, 0x32, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x43, 0x69, 0x74, 0x79,
	0x3a, 0x3a, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_city_person_v2_person_proto_rawDescOnce sync.Once
	file_city_person_v2_person_proto_rawDescData = file_city_person_v2_person_proto_rawDesc
)

func file_city_person_v2_person_proto_rawDescGZIP() []byte {
	file_city_person_v2_person_proto_rawDescOnce.Do(func() {
		file_city_person_v2_person_proto_rawDescData = protoimpl.X.CompressGZIP(file_city_person_v2_person_proto_rawDescData)
	})
	return file_city_person_v2_person_proto_rawDescData
}

var file_city_person_v2_person_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_city_person_v2_person_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_city_person_v2_person_proto_goTypes = []any{
	(VehicleEngineType)(0),          // 0: city.person.v2.VehicleEngineType
	(BusType)(0),                    // 1: city.person.v2.BusType
	(Education)(0),                  // 2: city.person.v2.Education
	(Gender)(0),                     // 3: city.person.v2.Gender
	(Consumption)(0),                // 4: city.person.v2.Consumption
	(*PersonAttribute)(nil),         // 5: city.person.v2.PersonAttribute
	(*VehicleEngineEfficiency)(nil), // 6: city.person.v2.VehicleEngineEfficiency
	(*EmissionAttribute)(nil),       // 7: city.person.v2.EmissionAttribute
	(*VehicleAttribute)(nil),        // 8: city.person.v2.VehicleAttribute
	(*BusAttribute)(nil),            // 9: city.person.v2.BusAttribute
	(*PedestrianAttribute)(nil),     // 10: city.person.v2.PedestrianAttribute
	(*BikeAttribute)(nil),           // 11: city.person.v2.BikeAttribute
	(*PersonProfile)(nil),           // 12: city.person.v2.PersonProfile
	(*Person)(nil),                  // 13: city.person.v2.Person
	(*Persons)(nil),                 // 14: city.person.v2.Persons
	nil,                             // 15: city.person.v2.Person.LabelsEntry
	(*v2.Position)(nil),             // 16: city.geo.v2.Position
	(*v21.Schedule)(nil),            // 17: city.trip.v2.Schedule
}
var file_city_person_v2_person_proto_depIdxs = []int32{
	0,  // 0: city.person.v2.EmissionAttribute.type:type_name -> city.person.v2.VehicleEngineType
	6,  // 1: city.person.v2.EmissionAttribute.fuel_efficiency:type_name -> city.person.v2.VehicleEngineEfficiency
	6,  // 2: city.person.v2.EmissionAttribute.electric_efficiency:type_name -> city.person.v2.VehicleEngineEfficiency
	7,  // 3: city.person.v2.VehicleAttribute.emission_attribute:type_name -> city.person.v2.EmissionAttribute
	1,  // 4: city.person.v2.BusAttribute.type:type_name -> city.person.v2.BusType
	2,  // 5: city.person.v2.PersonProfile.education:type_name -> city.person.v2.Education
	3,  // 6: city.person.v2.PersonProfile.gender:type_name -> city.person.v2.Gender
	4,  // 7: city.person.v2.PersonProfile.consumption:type_name -> city.person.v2.Consumption
	5,  // 8: city.person.v2.Person.attribute:type_name -> city.person.v2.PersonAttribute
	16, // 9: city.person.v2.Person.home:type_name -> city.geo.v2.Position
	17, // 10: city.person.v2.Person.schedules:type_name -> city.trip.v2.Schedule
	8,  // 11: city.person.v2.Person.vehicle_attribute:type_name -> city.person.v2.VehicleAttribute
	9,  // 12: city.person.v2.Person.bus_attribute:type_name -> city.person.v2.BusAttribute
	10, // 13: city.person.v2.Person.pedestrian_attribute:type_name -> city.person.v2.PedestrianAttribute
	11, // 14: city.person.v2.Person.bike_attribute:type_name -> city.person.v2.BikeAttribute
	15, // 15: city.person.v2.Person.labels:type_name -> city.person.v2.Person.LabelsEntry
	12, // 16: city.person.v2.Person.profile:type_name -> city.person.v2.PersonProfile
	16, // 17: city.person.v2.Person.work:type_name -> city.geo.v2.Position
	13, // 18: city.person.v2.Persons.persons:type_name -> city.person.v2.Person
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_city_person_v2_person_proto_init() }
func file_city_person_v2_person_proto_init() {
	if File_city_person_v2_person_proto != nil {
		return
	}
	file_city_person_v2_person_proto_msgTypes[2].OneofWrappers = []any{}
	file_city_person_v2_person_proto_msgTypes[3].OneofWrappers = []any{}
	file_city_person_v2_person_proto_msgTypes[5].OneofWrappers = []any{}
	file_city_person_v2_person_proto_msgTypes[6].OneofWrappers = []any{}
	file_city_person_v2_person_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_city_person_v2_person_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_city_person_v2_person_proto_goTypes,
		DependencyIndexes: file_city_person_v2_person_proto_depIdxs,
		EnumInfos:         file_city_person_v2_person_proto_enumTypes,
		MessageInfos:      file_city_person_v2_person_proto_msgTypes,
	}.Build()
	File_city_person_v2_person_proto = out.File
	file_city_person_v2_person_proto_rawDesc = nil
	file_city_person_v2_person_proto_goTypes = nil
	file_city_person_v2_person_proto_depIdxs = nil
}
