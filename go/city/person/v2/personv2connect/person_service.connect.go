// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/person/v2/person_service.proto

package personv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "git.fiblab.net/sim/protos/v2/go/city/person/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PersonServiceName is the fully-qualified name of the PersonService service.
	PersonServiceName = "city.person.v2.PersonService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PersonServiceGetPersonProcedure is the fully-qualified name of the PersonService's GetPerson RPC.
	PersonServiceGetPersonProcedure = "/city.person.v2.PersonService/GetPerson"
	// PersonServiceAddPersonProcedure is the fully-qualified name of the PersonService's AddPerson RPC.
	PersonServiceAddPersonProcedure = "/city.person.v2.PersonService/AddPerson"
	// PersonServiceSetScheduleProcedure is the fully-qualified name of the PersonService's SetSchedule
	// RPC.
	PersonServiceSetScheduleProcedure = "/city.person.v2.PersonService/SetSchedule"
	// PersonServiceGetPersonsProcedure is the fully-qualified name of the PersonService's GetPersons
	// RPC.
	PersonServiceGetPersonsProcedure = "/city.person.v2.PersonService/GetPersons"
	// PersonServiceGetPersonByLongLatBBoxProcedure is the fully-qualified name of the PersonService's
	// GetPersonByLongLatBBox RPC.
	PersonServiceGetPersonByLongLatBBoxProcedure = "/city.person.v2.PersonService/GetPersonByLongLatBBox"
	// PersonServiceGetAllVehiclesProcedure is the fully-qualified name of the PersonService's
	// GetAllVehicles RPC.
	PersonServiceGetAllVehiclesProcedure = "/city.person.v2.PersonService/GetAllVehicles"
	// PersonServiceGetAllPedestriansProcedure is the fully-qualified name of the PersonService's
	// GetAllPedestrians RPC.
	PersonServiceGetAllPedestriansProcedure = "/city.person.v2.PersonService/GetAllPedestrians"
	// PersonServiceResetPersonPositionProcedure is the fully-qualified name of the PersonService's
	// ResetPersonPosition RPC.
	PersonServiceResetPersonPositionProcedure = "/city.person.v2.PersonService/ResetPersonPosition"
	// PersonServiceSetPersonVehicleAttributeProcedure is the fully-qualified name of the
	// PersonService's SetPersonVehicleAttribute RPC.
	PersonServiceSetPersonVehicleAttributeProcedure = "/city.person.v2.PersonService/SetPersonVehicleAttribute"
	// PersonServiceSetControlledVehicleIDsProcedure is the fully-qualified name of the PersonService's
	// SetControlledVehicleIDs RPC.
	PersonServiceSetControlledVehicleIDsProcedure = "/city.person.v2.PersonService/SetControlledVehicleIDs"
	// PersonServiceFetchControlledVehicleEnvsProcedure is the fully-qualified name of the
	// PersonService's FetchControlledVehicleEnvs RPC.
	PersonServiceFetchControlledVehicleEnvsProcedure = "/city.person.v2.PersonService/FetchControlledVehicleEnvs"
	// PersonServiceSetControlledVehicleActionsProcedure is the fully-qualified name of the
	// PersonService's SetControlledVehicleActions RPC.
	PersonServiceSetControlledVehicleActionsProcedure = "/city.person.v2.PersonService/SetControlledVehicleActions"
	// PersonServiceSetControlledTaxiIDsProcedure is the fully-qualified name of the PersonService's
	// SetControlledTaxiIDs RPC.
	PersonServiceSetControlledTaxiIDsProcedure = "/city.person.v2.PersonService/SetControlledTaxiIDs"
	// PersonServiceGetAllOrdersProcedure is the fully-qualified name of the PersonService's
	// GetAllOrders RPC.
	PersonServiceGetAllOrdersProcedure = "/city.person.v2.PersonService/GetAllOrders"
	// PersonServiceSetControlledTaxiToOrdersProcedure is the fully-qualified name of the
	// PersonService's SetControlledTaxiToOrders RPC.
	PersonServiceSetControlledTaxiToOrdersProcedure = "/city.person.v2.PersonService/SetControlledTaxiToOrders"
	// PersonServiceSetControlledPedestriansProcedure is the fully-qualified name of the PersonService's
	// SetControlledPedestrians RPC.
	PersonServiceSetControlledPedestriansProcedure = "/city.person.v2.PersonService/SetControlledPedestrians"
	// PersonServiceFetchControlledPedestriansEnvsProcedure is the fully-qualified name of the
	// PersonService's FetchControlledPedestriansEnvs RPC.
	PersonServiceFetchControlledPedestriansEnvsProcedure = "/city.person.v2.PersonService/FetchControlledPedestriansEnvs"
	// PersonServiceSetControlledPedestriansActionsProcedure is the fully-qualified name of the
	// PersonService's SetControlledPedestriansActions RPC.
	PersonServiceSetControlledPedestriansActionsProcedure = "/city.person.v2.PersonService/SetControlledPedestriansActions"
	// PersonServiceGetControlledTaxiOrderAllocationPlanProcedure is the fully-qualified name of the
	// PersonService's GetControlledTaxiOrderAllocationPlan RPC.
	PersonServiceGetControlledTaxiOrderAllocationPlanProcedure = "/city.person.v2.PersonService/GetControlledTaxiOrderAllocationPlan"
	// PersonServiceSetControlledTaxiOrderAllocationPlanProcedure is the fully-qualified name of the
	// PersonService's SetControlledTaxiOrderAllocationPlan RPC.
	PersonServiceSetControlledTaxiOrderAllocationPlanProcedure = "/city.person.v2.PersonService/SetControlledTaxiOrderAllocationPlan"
	// PersonServiceGetGlobalStatisticsProcedure is the fully-qualified name of the PersonService's
	// GetGlobalStatistics RPC.
	PersonServiceGetGlobalStatisticsProcedure = "/city.person.v2.PersonService/GetGlobalStatistics"
)

// PersonServiceClient is a client for the city.person.v2.PersonService service.
type PersonServiceClient interface {
	// 获取person信息
	// Get person information
	GetPerson(context.Context, *connect.Request[v2.GetPersonRequest]) (*connect.Response[v2.GetPersonResponse], error)
	// 新增person 传入person初始位置、目的地表、属性 返回personid
	// Add a new person. Input person's initial location, destination table, and
	// attributes, return personid
	AddPerson(context.Context, *connect.Request[v2.AddPersonRequest]) (*connect.Response[v2.AddPersonResponse], error)
	// 修改person的schedule 传入personid、目的地表
	// Set person's schedule. Input personid and destination table
	SetSchedule(context.Context, *connect.Request[v2.SetScheduleRequest]) (*connect.Response[v2.SetScheduleResponse], error)
	// 获取多个person信息
	// Get information of multiple persons
	GetPersons(context.Context, *connect.Request[v2.GetPersonsRequest]) (*connect.Response[v2.GetPersonsResponse], error)
	// 获取特定区域内的person
	// Get persons in a specific region
	GetPersonByLongLatBBox(context.Context, *connect.Request[v2.GetPersonByLongLatBBoxRequest]) (*connect.Response[v2.GetPersonByLongLatBBoxResponse], error)
	// 获取所有车辆
	// Get all vehicles
	GetAllVehicles(context.Context, *connect.Request[v2.GetAllVehiclesRequest]) (*connect.Response[v2.GetAllVehiclesResponse], error)
	// 获取所有行人
	// Get all pedestrians
	GetAllPedestrians(context.Context, *connect.Request[v2.GetAllPedestriansRequest]) (*connect.Response[v2.GetAllPedestriansResponse], error)
	// 重置人的位置（将停止当前正在进行的出行，转为sleep状态）
	// Reset person's position (stop the current trip and switch to sleep status)
	ResetPersonPosition(context.Context, *connect.Request[v2.ResetPersonPositionRequest]) (*connect.Response[v2.ResetPersonPositionResponse], error)
	// 设置车辆的属性
	// Set person's vehicle attribute
	SetPersonVehicleAttribute(context.Context, *connect.Request[v2.SetPersonVehicleAttributeRequest]) (*connect.Response[v2.SetPersonVehicleAttributeResponse], error)
	// 设置由外部控制行为的vehicle
	// Set vehicle controlled by external behavior
	SetControlledVehicleIDs(context.Context, *connect.Request[v2.SetControlledVehicleIDsRequest]) (*connect.Response[v2.SetControlledVehicleIDsResponse], error)
	// 获取由外部控制行为的vehicle信息
	// Get information of vehicle controlled by external behavior
	FetchControlledVehicleEnvs(context.Context, *connect.Request[v2.FetchControlledVehicleEnvsRequest]) (*connect.Response[v2.FetchControlledVehicleEnvsResponse], error)
	// 设置由外部控制行为的vehicle的行为
	// Set behavior of vehicle controlled by external behavior
	SetControlledVehicleActions(context.Context, *connect.Request[v2.SetControlledVehicleActionsRequest]) (*connect.Response[v2.SetControlledVehicleActionsResponse], error)
	// 设置由外部控制的taxi
	// Set taxi controlled by external behavior
	SetControlledTaxiIDs(context.Context, *connect.Request[v2.SetControlledTaxiIDsRequest]) (*connect.Response[v2.SetControlledTaxiIDsResponse], error)
	// 获取所有订单信息
	// Get information of all orders
	GetAllOrders(context.Context, *connect.Request[v2.GetAllOrdersRequest]) (*connect.Response[v2.GetAllOrdersResponse], error)
	// 设置所有外部控制的出租车接指定的单
	// Set all externally controlled taxis to specified orders
	SetControlledTaxiToOrders(context.Context, *connect.Request[v2.SetControlledTaxiToOrdersRequest]) (*connect.Response[v2.SetControlledTaxiToOrdersResponse], error)
	// 设置由外部控制的行人
	// Set pedestrian controlled by external behavior
	SetControlledPedestrians(context.Context, *connect.Request[v2.SetControlledPedestriansRequest]) (*connect.Response[v2.SetControlledPedestriansResponse], error)
	// 获取由外部控制的行人信息
	// Get information of pedestrian controlled by external behavior
	FetchControlledPedestriansEnvs(context.Context, *connect.Request[v2.FetchControlledPedestriansEnvsRequest]) (*connect.Response[v2.FetchControlledPedestriansEnvsResponse], error)
	// 设置由外部控制的行人行为
	// Set behavior of pedestrian controlled by external behavior
	SetControlledPedestriansActions(context.Context, *connect.Request[v2.SetControlledPedestriansActionsRequest]) (*connect.Response[v2.SetControlledPedestriansActionsResponse], error)
	// 获取当前所有受控出租车的订单分配方案
	// Get current order allocation plan for all controlled taxis
	GetControlledTaxiOrderAllocationPlan(context.Context, *connect.Request[v2.GetControlledTaxiOrderAllocationPlanRequest]) (*connect.Response[v2.GetControlledTaxiOrderAllocationPlanResponse], error)
	// 设置当前所有受控出租车的订单分配方案
	// Set current order allocation plan for all controlled taxis
	SetControlledTaxiOrderAllocationPlan(context.Context, *connect.Request[v2.SetControlledTaxiOrderAllocationPlanRequest]) (*connect.Response[v2.SetControlledTaxiOrderAllocationPlanResponse], error)
	// 获取全局统计信息
	// Get global statistics
	GetGlobalStatistics(context.Context, *connect.Request[v2.GetGlobalStatisticsRequest]) (*connect.Response[v2.GetGlobalStatisticsResponse], error)
}

// NewPersonServiceClient constructs a client for the city.person.v2.PersonService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPersonServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PersonServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	personServiceMethods := v2.File_city_person_v2_person_service_proto.Services().ByName("PersonService").Methods()
	return &personServiceClient{
		getPerson: connect.NewClient[v2.GetPersonRequest, v2.GetPersonResponse](
			httpClient,
			baseURL+PersonServiceGetPersonProcedure,
			connect.WithSchema(personServiceMethods.ByName("GetPerson")),
			connect.WithClientOptions(opts...),
		),
		addPerson: connect.NewClient[v2.AddPersonRequest, v2.AddPersonResponse](
			httpClient,
			baseURL+PersonServiceAddPersonProcedure,
			connect.WithSchema(personServiceMethods.ByName("AddPerson")),
			connect.WithClientOptions(opts...),
		),
		setSchedule: connect.NewClient[v2.SetScheduleRequest, v2.SetScheduleResponse](
			httpClient,
			baseURL+PersonServiceSetScheduleProcedure,
			connect.WithSchema(personServiceMethods.ByName("SetSchedule")),
			connect.WithClientOptions(opts...),
		),
		getPersons: connect.NewClient[v2.GetPersonsRequest, v2.GetPersonsResponse](
			httpClient,
			baseURL+PersonServiceGetPersonsProcedure,
			connect.WithSchema(personServiceMethods.ByName("GetPersons")),
			connect.WithClientOptions(opts...),
		),
		getPersonByLongLatBBox: connect.NewClient[v2.GetPersonByLongLatBBoxRequest, v2.GetPersonByLongLatBBoxResponse](
			httpClient,
			baseURL+PersonServiceGetPersonByLongLatBBoxProcedure,
			connect.WithSchema(personServiceMethods.ByName("GetPersonByLongLatBBox")),
			connect.WithClientOptions(opts...),
		),
		getAllVehicles: connect.NewClient[v2.GetAllVehiclesRequest, v2.GetAllVehiclesResponse](
			httpClient,
			baseURL+PersonServiceGetAllVehiclesProcedure,
			connect.WithSchema(personServiceMethods.ByName("GetAllVehicles")),
			connect.WithClientOptions(opts...),
		),
		getAllPedestrians: connect.NewClient[v2.GetAllPedestriansRequest, v2.GetAllPedestriansResponse](
			httpClient,
			baseURL+PersonServiceGetAllPedestriansProcedure,
			connect.WithSchema(personServiceMethods.ByName("GetAllPedestrians")),
			connect.WithClientOptions(opts...),
		),
		resetPersonPosition: connect.NewClient[v2.ResetPersonPositionRequest, v2.ResetPersonPositionResponse](
			httpClient,
			baseURL+PersonServiceResetPersonPositionProcedure,
			connect.WithSchema(personServiceMethods.ByName("ResetPersonPosition")),
			connect.WithClientOptions(opts...),
		),
		setPersonVehicleAttribute: connect.NewClient[v2.SetPersonVehicleAttributeRequest, v2.SetPersonVehicleAttributeResponse](
			httpClient,
			baseURL+PersonServiceSetPersonVehicleAttributeProcedure,
			connect.WithSchema(personServiceMethods.ByName("SetPersonVehicleAttribute")),
			connect.WithClientOptions(opts...),
		),
		setControlledVehicleIDs: connect.NewClient[v2.SetControlledVehicleIDsRequest, v2.SetControlledVehicleIDsResponse](
			httpClient,
			baseURL+PersonServiceSetControlledVehicleIDsProcedure,
			connect.WithSchema(personServiceMethods.ByName("SetControlledVehicleIDs")),
			connect.WithClientOptions(opts...),
		),
		fetchControlledVehicleEnvs: connect.NewClient[v2.FetchControlledVehicleEnvsRequest, v2.FetchControlledVehicleEnvsResponse](
			httpClient,
			baseURL+PersonServiceFetchControlledVehicleEnvsProcedure,
			connect.WithSchema(personServiceMethods.ByName("FetchControlledVehicleEnvs")),
			connect.WithClientOptions(opts...),
		),
		setControlledVehicleActions: connect.NewClient[v2.SetControlledVehicleActionsRequest, v2.SetControlledVehicleActionsResponse](
			httpClient,
			baseURL+PersonServiceSetControlledVehicleActionsProcedure,
			connect.WithSchema(personServiceMethods.ByName("SetControlledVehicleActions")),
			connect.WithClientOptions(opts...),
		),
		setControlledTaxiIDs: connect.NewClient[v2.SetControlledTaxiIDsRequest, v2.SetControlledTaxiIDsResponse](
			httpClient,
			baseURL+PersonServiceSetControlledTaxiIDsProcedure,
			connect.WithSchema(personServiceMethods.ByName("SetControlledTaxiIDs")),
			connect.WithClientOptions(opts...),
		),
		getAllOrders: connect.NewClient[v2.GetAllOrdersRequest, v2.GetAllOrdersResponse](
			httpClient,
			baseURL+PersonServiceGetAllOrdersProcedure,
			connect.WithSchema(personServiceMethods.ByName("GetAllOrders")),
			connect.WithClientOptions(opts...),
		),
		setControlledTaxiToOrders: connect.NewClient[v2.SetControlledTaxiToOrdersRequest, v2.SetControlledTaxiToOrdersResponse](
			httpClient,
			baseURL+PersonServiceSetControlledTaxiToOrdersProcedure,
			connect.WithSchema(personServiceMethods.ByName("SetControlledTaxiToOrders")),
			connect.WithClientOptions(opts...),
		),
		setControlledPedestrians: connect.NewClient[v2.SetControlledPedestriansRequest, v2.SetControlledPedestriansResponse](
			httpClient,
			baseURL+PersonServiceSetControlledPedestriansProcedure,
			connect.WithSchema(personServiceMethods.ByName("SetControlledPedestrians")),
			connect.WithClientOptions(opts...),
		),
		fetchControlledPedestriansEnvs: connect.NewClient[v2.FetchControlledPedestriansEnvsRequest, v2.FetchControlledPedestriansEnvsResponse](
			httpClient,
			baseURL+PersonServiceFetchControlledPedestriansEnvsProcedure,
			connect.WithSchema(personServiceMethods.ByName("FetchControlledPedestriansEnvs")),
			connect.WithClientOptions(opts...),
		),
		setControlledPedestriansActions: connect.NewClient[v2.SetControlledPedestriansActionsRequest, v2.SetControlledPedestriansActionsResponse](
			httpClient,
			baseURL+PersonServiceSetControlledPedestriansActionsProcedure,
			connect.WithSchema(personServiceMethods.ByName("SetControlledPedestriansActions")),
			connect.WithClientOptions(opts...),
		),
		getControlledTaxiOrderAllocationPlan: connect.NewClient[v2.GetControlledTaxiOrderAllocationPlanRequest, v2.GetControlledTaxiOrderAllocationPlanResponse](
			httpClient,
			baseURL+PersonServiceGetControlledTaxiOrderAllocationPlanProcedure,
			connect.WithSchema(personServiceMethods.ByName("GetControlledTaxiOrderAllocationPlan")),
			connect.WithClientOptions(opts...),
		),
		setControlledTaxiOrderAllocationPlan: connect.NewClient[v2.SetControlledTaxiOrderAllocationPlanRequest, v2.SetControlledTaxiOrderAllocationPlanResponse](
			httpClient,
			baseURL+PersonServiceSetControlledTaxiOrderAllocationPlanProcedure,
			connect.WithSchema(personServiceMethods.ByName("SetControlledTaxiOrderAllocationPlan")),
			connect.WithClientOptions(opts...),
		),
		getGlobalStatistics: connect.NewClient[v2.GetGlobalStatisticsRequest, v2.GetGlobalStatisticsResponse](
			httpClient,
			baseURL+PersonServiceGetGlobalStatisticsProcedure,
			connect.WithSchema(personServiceMethods.ByName("GetGlobalStatistics")),
			connect.WithClientOptions(opts...),
		),
	}
}

// personServiceClient implements PersonServiceClient.
type personServiceClient struct {
	getPerson                            *connect.Client[v2.GetPersonRequest, v2.GetPersonResponse]
	addPerson                            *connect.Client[v2.AddPersonRequest, v2.AddPersonResponse]
	setSchedule                          *connect.Client[v2.SetScheduleRequest, v2.SetScheduleResponse]
	getPersons                           *connect.Client[v2.GetPersonsRequest, v2.GetPersonsResponse]
	getPersonByLongLatBBox               *connect.Client[v2.GetPersonByLongLatBBoxRequest, v2.GetPersonByLongLatBBoxResponse]
	getAllVehicles                       *connect.Client[v2.GetAllVehiclesRequest, v2.GetAllVehiclesResponse]
	getAllPedestrians                    *connect.Client[v2.GetAllPedestriansRequest, v2.GetAllPedestriansResponse]
	resetPersonPosition                  *connect.Client[v2.ResetPersonPositionRequest, v2.ResetPersonPositionResponse]
	setPersonVehicleAttribute            *connect.Client[v2.SetPersonVehicleAttributeRequest, v2.SetPersonVehicleAttributeResponse]
	setControlledVehicleIDs              *connect.Client[v2.SetControlledVehicleIDsRequest, v2.SetControlledVehicleIDsResponse]
	fetchControlledVehicleEnvs           *connect.Client[v2.FetchControlledVehicleEnvsRequest, v2.FetchControlledVehicleEnvsResponse]
	setControlledVehicleActions          *connect.Client[v2.SetControlledVehicleActionsRequest, v2.SetControlledVehicleActionsResponse]
	setControlledTaxiIDs                 *connect.Client[v2.SetControlledTaxiIDsRequest, v2.SetControlledTaxiIDsResponse]
	getAllOrders                         *connect.Client[v2.GetAllOrdersRequest, v2.GetAllOrdersResponse]
	setControlledTaxiToOrders            *connect.Client[v2.SetControlledTaxiToOrdersRequest, v2.SetControlledTaxiToOrdersResponse]
	setControlledPedestrians             *connect.Client[v2.SetControlledPedestriansRequest, v2.SetControlledPedestriansResponse]
	fetchControlledPedestriansEnvs       *connect.Client[v2.FetchControlledPedestriansEnvsRequest, v2.FetchControlledPedestriansEnvsResponse]
	setControlledPedestriansActions      *connect.Client[v2.SetControlledPedestriansActionsRequest, v2.SetControlledPedestriansActionsResponse]
	getControlledTaxiOrderAllocationPlan *connect.Client[v2.GetControlledTaxiOrderAllocationPlanRequest, v2.GetControlledTaxiOrderAllocationPlanResponse]
	setControlledTaxiOrderAllocationPlan *connect.Client[v2.SetControlledTaxiOrderAllocationPlanRequest, v2.SetControlledTaxiOrderAllocationPlanResponse]
	getGlobalStatistics                  *connect.Client[v2.GetGlobalStatisticsRequest, v2.GetGlobalStatisticsResponse]
}

// GetPerson calls city.person.v2.PersonService.GetPerson.
func (c *personServiceClient) GetPerson(ctx context.Context, req *connect.Request[v2.GetPersonRequest]) (*connect.Response[v2.GetPersonResponse], error) {
	return c.getPerson.CallUnary(ctx, req)
}

// AddPerson calls city.person.v2.PersonService.AddPerson.
func (c *personServiceClient) AddPerson(ctx context.Context, req *connect.Request[v2.AddPersonRequest]) (*connect.Response[v2.AddPersonResponse], error) {
	return c.addPerson.CallUnary(ctx, req)
}

// SetSchedule calls city.person.v2.PersonService.SetSchedule.
func (c *personServiceClient) SetSchedule(ctx context.Context, req *connect.Request[v2.SetScheduleRequest]) (*connect.Response[v2.SetScheduleResponse], error) {
	return c.setSchedule.CallUnary(ctx, req)
}

// GetPersons calls city.person.v2.PersonService.GetPersons.
func (c *personServiceClient) GetPersons(ctx context.Context, req *connect.Request[v2.GetPersonsRequest]) (*connect.Response[v2.GetPersonsResponse], error) {
	return c.getPersons.CallUnary(ctx, req)
}

// GetPersonByLongLatBBox calls city.person.v2.PersonService.GetPersonByLongLatBBox.
func (c *personServiceClient) GetPersonByLongLatBBox(ctx context.Context, req *connect.Request[v2.GetPersonByLongLatBBoxRequest]) (*connect.Response[v2.GetPersonByLongLatBBoxResponse], error) {
	return c.getPersonByLongLatBBox.CallUnary(ctx, req)
}

// GetAllVehicles calls city.person.v2.PersonService.GetAllVehicles.
func (c *personServiceClient) GetAllVehicles(ctx context.Context, req *connect.Request[v2.GetAllVehiclesRequest]) (*connect.Response[v2.GetAllVehiclesResponse], error) {
	return c.getAllVehicles.CallUnary(ctx, req)
}

// GetAllPedestrians calls city.person.v2.PersonService.GetAllPedestrians.
func (c *personServiceClient) GetAllPedestrians(ctx context.Context, req *connect.Request[v2.GetAllPedestriansRequest]) (*connect.Response[v2.GetAllPedestriansResponse], error) {
	return c.getAllPedestrians.CallUnary(ctx, req)
}

// ResetPersonPosition calls city.person.v2.PersonService.ResetPersonPosition.
func (c *personServiceClient) ResetPersonPosition(ctx context.Context, req *connect.Request[v2.ResetPersonPositionRequest]) (*connect.Response[v2.ResetPersonPositionResponse], error) {
	return c.resetPersonPosition.CallUnary(ctx, req)
}

// SetPersonVehicleAttribute calls city.person.v2.PersonService.SetPersonVehicleAttribute.
func (c *personServiceClient) SetPersonVehicleAttribute(ctx context.Context, req *connect.Request[v2.SetPersonVehicleAttributeRequest]) (*connect.Response[v2.SetPersonVehicleAttributeResponse], error) {
	return c.setPersonVehicleAttribute.CallUnary(ctx, req)
}

// SetControlledVehicleIDs calls city.person.v2.PersonService.SetControlledVehicleIDs.
func (c *personServiceClient) SetControlledVehicleIDs(ctx context.Context, req *connect.Request[v2.SetControlledVehicleIDsRequest]) (*connect.Response[v2.SetControlledVehicleIDsResponse], error) {
	return c.setControlledVehicleIDs.CallUnary(ctx, req)
}

// FetchControlledVehicleEnvs calls city.person.v2.PersonService.FetchControlledVehicleEnvs.
func (c *personServiceClient) FetchControlledVehicleEnvs(ctx context.Context, req *connect.Request[v2.FetchControlledVehicleEnvsRequest]) (*connect.Response[v2.FetchControlledVehicleEnvsResponse], error) {
	return c.fetchControlledVehicleEnvs.CallUnary(ctx, req)
}

// SetControlledVehicleActions calls city.person.v2.PersonService.SetControlledVehicleActions.
func (c *personServiceClient) SetControlledVehicleActions(ctx context.Context, req *connect.Request[v2.SetControlledVehicleActionsRequest]) (*connect.Response[v2.SetControlledVehicleActionsResponse], error) {
	return c.setControlledVehicleActions.CallUnary(ctx, req)
}

// SetControlledTaxiIDs calls city.person.v2.PersonService.SetControlledTaxiIDs.
func (c *personServiceClient) SetControlledTaxiIDs(ctx context.Context, req *connect.Request[v2.SetControlledTaxiIDsRequest]) (*connect.Response[v2.SetControlledTaxiIDsResponse], error) {
	return c.setControlledTaxiIDs.CallUnary(ctx, req)
}

// GetAllOrders calls city.person.v2.PersonService.GetAllOrders.
func (c *personServiceClient) GetAllOrders(ctx context.Context, req *connect.Request[v2.GetAllOrdersRequest]) (*connect.Response[v2.GetAllOrdersResponse], error) {
	return c.getAllOrders.CallUnary(ctx, req)
}

// SetControlledTaxiToOrders calls city.person.v2.PersonService.SetControlledTaxiToOrders.
func (c *personServiceClient) SetControlledTaxiToOrders(ctx context.Context, req *connect.Request[v2.SetControlledTaxiToOrdersRequest]) (*connect.Response[v2.SetControlledTaxiToOrdersResponse], error) {
	return c.setControlledTaxiToOrders.CallUnary(ctx, req)
}

// SetControlledPedestrians calls city.person.v2.PersonService.SetControlledPedestrians.
func (c *personServiceClient) SetControlledPedestrians(ctx context.Context, req *connect.Request[v2.SetControlledPedestriansRequest]) (*connect.Response[v2.SetControlledPedestriansResponse], error) {
	return c.setControlledPedestrians.CallUnary(ctx, req)
}

// FetchControlledPedestriansEnvs calls city.person.v2.PersonService.FetchControlledPedestriansEnvs.
func (c *personServiceClient) FetchControlledPedestriansEnvs(ctx context.Context, req *connect.Request[v2.FetchControlledPedestriansEnvsRequest]) (*connect.Response[v2.FetchControlledPedestriansEnvsResponse], error) {
	return c.fetchControlledPedestriansEnvs.CallUnary(ctx, req)
}

// SetControlledPedestriansActions calls
// city.person.v2.PersonService.SetControlledPedestriansActions.
func (c *personServiceClient) SetControlledPedestriansActions(ctx context.Context, req *connect.Request[v2.SetControlledPedestriansActionsRequest]) (*connect.Response[v2.SetControlledPedestriansActionsResponse], error) {
	return c.setControlledPedestriansActions.CallUnary(ctx, req)
}

// GetControlledTaxiOrderAllocationPlan calls
// city.person.v2.PersonService.GetControlledTaxiOrderAllocationPlan.
func (c *personServiceClient) GetControlledTaxiOrderAllocationPlan(ctx context.Context, req *connect.Request[v2.GetControlledTaxiOrderAllocationPlanRequest]) (*connect.Response[v2.GetControlledTaxiOrderAllocationPlanResponse], error) {
	return c.getControlledTaxiOrderAllocationPlan.CallUnary(ctx, req)
}

// SetControlledTaxiOrderAllocationPlan calls
// city.person.v2.PersonService.SetControlledTaxiOrderAllocationPlan.
func (c *personServiceClient) SetControlledTaxiOrderAllocationPlan(ctx context.Context, req *connect.Request[v2.SetControlledTaxiOrderAllocationPlanRequest]) (*connect.Response[v2.SetControlledTaxiOrderAllocationPlanResponse], error) {
	return c.setControlledTaxiOrderAllocationPlan.CallUnary(ctx, req)
}

// GetGlobalStatistics calls city.person.v2.PersonService.GetGlobalStatistics.
func (c *personServiceClient) GetGlobalStatistics(ctx context.Context, req *connect.Request[v2.GetGlobalStatisticsRequest]) (*connect.Response[v2.GetGlobalStatisticsResponse], error) {
	return c.getGlobalStatistics.CallUnary(ctx, req)
}

// PersonServiceHandler is an implementation of the city.person.v2.PersonService service.
type PersonServiceHandler interface {
	// 获取person信息
	// Get person information
	GetPerson(context.Context, *connect.Request[v2.GetPersonRequest]) (*connect.Response[v2.GetPersonResponse], error)
	// 新增person 传入person初始位置、目的地表、属性 返回personid
	// Add a new person. Input person's initial location, destination table, and
	// attributes, return personid
	AddPerson(context.Context, *connect.Request[v2.AddPersonRequest]) (*connect.Response[v2.AddPersonResponse], error)
	// 修改person的schedule 传入personid、目的地表
	// Set person's schedule. Input personid and destination table
	SetSchedule(context.Context, *connect.Request[v2.SetScheduleRequest]) (*connect.Response[v2.SetScheduleResponse], error)
	// 获取多个person信息
	// Get information of multiple persons
	GetPersons(context.Context, *connect.Request[v2.GetPersonsRequest]) (*connect.Response[v2.GetPersonsResponse], error)
	// 获取特定区域内的person
	// Get persons in a specific region
	GetPersonByLongLatBBox(context.Context, *connect.Request[v2.GetPersonByLongLatBBoxRequest]) (*connect.Response[v2.GetPersonByLongLatBBoxResponse], error)
	// 获取所有车辆
	// Get all vehicles
	GetAllVehicles(context.Context, *connect.Request[v2.GetAllVehiclesRequest]) (*connect.Response[v2.GetAllVehiclesResponse], error)
	// 获取所有行人
	// Get all pedestrians
	GetAllPedestrians(context.Context, *connect.Request[v2.GetAllPedestriansRequest]) (*connect.Response[v2.GetAllPedestriansResponse], error)
	// 重置人的位置（将停止当前正在进行的出行，转为sleep状态）
	// Reset person's position (stop the current trip and switch to sleep status)
	ResetPersonPosition(context.Context, *connect.Request[v2.ResetPersonPositionRequest]) (*connect.Response[v2.ResetPersonPositionResponse], error)
	// 设置车辆的属性
	// Set person's vehicle attribute
	SetPersonVehicleAttribute(context.Context, *connect.Request[v2.SetPersonVehicleAttributeRequest]) (*connect.Response[v2.SetPersonVehicleAttributeResponse], error)
	// 设置由外部控制行为的vehicle
	// Set vehicle controlled by external behavior
	SetControlledVehicleIDs(context.Context, *connect.Request[v2.SetControlledVehicleIDsRequest]) (*connect.Response[v2.SetControlledVehicleIDsResponse], error)
	// 获取由外部控制行为的vehicle信息
	// Get information of vehicle controlled by external behavior
	FetchControlledVehicleEnvs(context.Context, *connect.Request[v2.FetchControlledVehicleEnvsRequest]) (*connect.Response[v2.FetchControlledVehicleEnvsResponse], error)
	// 设置由外部控制行为的vehicle的行为
	// Set behavior of vehicle controlled by external behavior
	SetControlledVehicleActions(context.Context, *connect.Request[v2.SetControlledVehicleActionsRequest]) (*connect.Response[v2.SetControlledVehicleActionsResponse], error)
	// 设置由外部控制的taxi
	// Set taxi controlled by external behavior
	SetControlledTaxiIDs(context.Context, *connect.Request[v2.SetControlledTaxiIDsRequest]) (*connect.Response[v2.SetControlledTaxiIDsResponse], error)
	// 获取所有订单信息
	// Get information of all orders
	GetAllOrders(context.Context, *connect.Request[v2.GetAllOrdersRequest]) (*connect.Response[v2.GetAllOrdersResponse], error)
	// 设置所有外部控制的出租车接指定的单
	// Set all externally controlled taxis to specified orders
	SetControlledTaxiToOrders(context.Context, *connect.Request[v2.SetControlledTaxiToOrdersRequest]) (*connect.Response[v2.SetControlledTaxiToOrdersResponse], error)
	// 设置由外部控制的行人
	// Set pedestrian controlled by external behavior
	SetControlledPedestrians(context.Context, *connect.Request[v2.SetControlledPedestriansRequest]) (*connect.Response[v2.SetControlledPedestriansResponse], error)
	// 获取由外部控制的行人信息
	// Get information of pedestrian controlled by external behavior
	FetchControlledPedestriansEnvs(context.Context, *connect.Request[v2.FetchControlledPedestriansEnvsRequest]) (*connect.Response[v2.FetchControlledPedestriansEnvsResponse], error)
	// 设置由外部控制的行人行为
	// Set behavior of pedestrian controlled by external behavior
	SetControlledPedestriansActions(context.Context, *connect.Request[v2.SetControlledPedestriansActionsRequest]) (*connect.Response[v2.SetControlledPedestriansActionsResponse], error)
	// 获取当前所有受控出租车的订单分配方案
	// Get current order allocation plan for all controlled taxis
	GetControlledTaxiOrderAllocationPlan(context.Context, *connect.Request[v2.GetControlledTaxiOrderAllocationPlanRequest]) (*connect.Response[v2.GetControlledTaxiOrderAllocationPlanResponse], error)
	// 设置当前所有受控出租车的订单分配方案
	// Set current order allocation plan for all controlled taxis
	SetControlledTaxiOrderAllocationPlan(context.Context, *connect.Request[v2.SetControlledTaxiOrderAllocationPlanRequest]) (*connect.Response[v2.SetControlledTaxiOrderAllocationPlanResponse], error)
	// 获取全局统计信息
	// Get global statistics
	GetGlobalStatistics(context.Context, *connect.Request[v2.GetGlobalStatisticsRequest]) (*connect.Response[v2.GetGlobalStatisticsResponse], error)
}

// NewPersonServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPersonServiceHandler(svc PersonServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	personServiceMethods := v2.File_city_person_v2_person_service_proto.Services().ByName("PersonService").Methods()
	personServiceGetPersonHandler := connect.NewUnaryHandler(
		PersonServiceGetPersonProcedure,
		svc.GetPerson,
		connect.WithSchema(personServiceMethods.ByName("GetPerson")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceAddPersonHandler := connect.NewUnaryHandler(
		PersonServiceAddPersonProcedure,
		svc.AddPerson,
		connect.WithSchema(personServiceMethods.ByName("AddPerson")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceSetScheduleHandler := connect.NewUnaryHandler(
		PersonServiceSetScheduleProcedure,
		svc.SetSchedule,
		connect.WithSchema(personServiceMethods.ByName("SetSchedule")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceGetPersonsHandler := connect.NewUnaryHandler(
		PersonServiceGetPersonsProcedure,
		svc.GetPersons,
		connect.WithSchema(personServiceMethods.ByName("GetPersons")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceGetPersonByLongLatBBoxHandler := connect.NewUnaryHandler(
		PersonServiceGetPersonByLongLatBBoxProcedure,
		svc.GetPersonByLongLatBBox,
		connect.WithSchema(personServiceMethods.ByName("GetPersonByLongLatBBox")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceGetAllVehiclesHandler := connect.NewUnaryHandler(
		PersonServiceGetAllVehiclesProcedure,
		svc.GetAllVehicles,
		connect.WithSchema(personServiceMethods.ByName("GetAllVehicles")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceGetAllPedestriansHandler := connect.NewUnaryHandler(
		PersonServiceGetAllPedestriansProcedure,
		svc.GetAllPedestrians,
		connect.WithSchema(personServiceMethods.ByName("GetAllPedestrians")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceResetPersonPositionHandler := connect.NewUnaryHandler(
		PersonServiceResetPersonPositionProcedure,
		svc.ResetPersonPosition,
		connect.WithSchema(personServiceMethods.ByName("ResetPersonPosition")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceSetPersonVehicleAttributeHandler := connect.NewUnaryHandler(
		PersonServiceSetPersonVehicleAttributeProcedure,
		svc.SetPersonVehicleAttribute,
		connect.WithSchema(personServiceMethods.ByName("SetPersonVehicleAttribute")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceSetControlledVehicleIDsHandler := connect.NewUnaryHandler(
		PersonServiceSetControlledVehicleIDsProcedure,
		svc.SetControlledVehicleIDs,
		connect.WithSchema(personServiceMethods.ByName("SetControlledVehicleIDs")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceFetchControlledVehicleEnvsHandler := connect.NewUnaryHandler(
		PersonServiceFetchControlledVehicleEnvsProcedure,
		svc.FetchControlledVehicleEnvs,
		connect.WithSchema(personServiceMethods.ByName("FetchControlledVehicleEnvs")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceSetControlledVehicleActionsHandler := connect.NewUnaryHandler(
		PersonServiceSetControlledVehicleActionsProcedure,
		svc.SetControlledVehicleActions,
		connect.WithSchema(personServiceMethods.ByName("SetControlledVehicleActions")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceSetControlledTaxiIDsHandler := connect.NewUnaryHandler(
		PersonServiceSetControlledTaxiIDsProcedure,
		svc.SetControlledTaxiIDs,
		connect.WithSchema(personServiceMethods.ByName("SetControlledTaxiIDs")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceGetAllOrdersHandler := connect.NewUnaryHandler(
		PersonServiceGetAllOrdersProcedure,
		svc.GetAllOrders,
		connect.WithSchema(personServiceMethods.ByName("GetAllOrders")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceSetControlledTaxiToOrdersHandler := connect.NewUnaryHandler(
		PersonServiceSetControlledTaxiToOrdersProcedure,
		svc.SetControlledTaxiToOrders,
		connect.WithSchema(personServiceMethods.ByName("SetControlledTaxiToOrders")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceSetControlledPedestriansHandler := connect.NewUnaryHandler(
		PersonServiceSetControlledPedestriansProcedure,
		svc.SetControlledPedestrians,
		connect.WithSchema(personServiceMethods.ByName("SetControlledPedestrians")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceFetchControlledPedestriansEnvsHandler := connect.NewUnaryHandler(
		PersonServiceFetchControlledPedestriansEnvsProcedure,
		svc.FetchControlledPedestriansEnvs,
		connect.WithSchema(personServiceMethods.ByName("FetchControlledPedestriansEnvs")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceSetControlledPedestriansActionsHandler := connect.NewUnaryHandler(
		PersonServiceSetControlledPedestriansActionsProcedure,
		svc.SetControlledPedestriansActions,
		connect.WithSchema(personServiceMethods.ByName("SetControlledPedestriansActions")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceGetControlledTaxiOrderAllocationPlanHandler := connect.NewUnaryHandler(
		PersonServiceGetControlledTaxiOrderAllocationPlanProcedure,
		svc.GetControlledTaxiOrderAllocationPlan,
		connect.WithSchema(personServiceMethods.ByName("GetControlledTaxiOrderAllocationPlan")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceSetControlledTaxiOrderAllocationPlanHandler := connect.NewUnaryHandler(
		PersonServiceSetControlledTaxiOrderAllocationPlanProcedure,
		svc.SetControlledTaxiOrderAllocationPlan,
		connect.WithSchema(personServiceMethods.ByName("SetControlledTaxiOrderAllocationPlan")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceGetGlobalStatisticsHandler := connect.NewUnaryHandler(
		PersonServiceGetGlobalStatisticsProcedure,
		svc.GetGlobalStatistics,
		connect.WithSchema(personServiceMethods.ByName("GetGlobalStatistics")),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.person.v2.PersonService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PersonServiceGetPersonProcedure:
			personServiceGetPersonHandler.ServeHTTP(w, r)
		case PersonServiceAddPersonProcedure:
			personServiceAddPersonHandler.ServeHTTP(w, r)
		case PersonServiceSetScheduleProcedure:
			personServiceSetScheduleHandler.ServeHTTP(w, r)
		case PersonServiceGetPersonsProcedure:
			personServiceGetPersonsHandler.ServeHTTP(w, r)
		case PersonServiceGetPersonByLongLatBBoxProcedure:
			personServiceGetPersonByLongLatBBoxHandler.ServeHTTP(w, r)
		case PersonServiceGetAllVehiclesProcedure:
			personServiceGetAllVehiclesHandler.ServeHTTP(w, r)
		case PersonServiceGetAllPedestriansProcedure:
			personServiceGetAllPedestriansHandler.ServeHTTP(w, r)
		case PersonServiceResetPersonPositionProcedure:
			personServiceResetPersonPositionHandler.ServeHTTP(w, r)
		case PersonServiceSetPersonVehicleAttributeProcedure:
			personServiceSetPersonVehicleAttributeHandler.ServeHTTP(w, r)
		case PersonServiceSetControlledVehicleIDsProcedure:
			personServiceSetControlledVehicleIDsHandler.ServeHTTP(w, r)
		case PersonServiceFetchControlledVehicleEnvsProcedure:
			personServiceFetchControlledVehicleEnvsHandler.ServeHTTP(w, r)
		case PersonServiceSetControlledVehicleActionsProcedure:
			personServiceSetControlledVehicleActionsHandler.ServeHTTP(w, r)
		case PersonServiceSetControlledTaxiIDsProcedure:
			personServiceSetControlledTaxiIDsHandler.ServeHTTP(w, r)
		case PersonServiceGetAllOrdersProcedure:
			personServiceGetAllOrdersHandler.ServeHTTP(w, r)
		case PersonServiceSetControlledTaxiToOrdersProcedure:
			personServiceSetControlledTaxiToOrdersHandler.ServeHTTP(w, r)
		case PersonServiceSetControlledPedestriansProcedure:
			personServiceSetControlledPedestriansHandler.ServeHTTP(w, r)
		case PersonServiceFetchControlledPedestriansEnvsProcedure:
			personServiceFetchControlledPedestriansEnvsHandler.ServeHTTP(w, r)
		case PersonServiceSetControlledPedestriansActionsProcedure:
			personServiceSetControlledPedestriansActionsHandler.ServeHTTP(w, r)
		case PersonServiceGetControlledTaxiOrderAllocationPlanProcedure:
			personServiceGetControlledTaxiOrderAllocationPlanHandler.ServeHTTP(w, r)
		case PersonServiceSetControlledTaxiOrderAllocationPlanProcedure:
			personServiceSetControlledTaxiOrderAllocationPlanHandler.ServeHTTP(w, r)
		case PersonServiceGetGlobalStatisticsProcedure:
			personServiceGetGlobalStatisticsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPersonServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPersonServiceHandler struct{}

func (UnimplementedPersonServiceHandler) GetPerson(context.Context, *connect.Request[v2.GetPersonRequest]) (*connect.Response[v2.GetPersonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.GetPerson is not implemented"))
}

func (UnimplementedPersonServiceHandler) AddPerson(context.Context, *connect.Request[v2.AddPersonRequest]) (*connect.Response[v2.AddPersonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.AddPerson is not implemented"))
}

func (UnimplementedPersonServiceHandler) SetSchedule(context.Context, *connect.Request[v2.SetScheduleRequest]) (*connect.Response[v2.SetScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.SetSchedule is not implemented"))
}

func (UnimplementedPersonServiceHandler) GetPersons(context.Context, *connect.Request[v2.GetPersonsRequest]) (*connect.Response[v2.GetPersonsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.GetPersons is not implemented"))
}

func (UnimplementedPersonServiceHandler) GetPersonByLongLatBBox(context.Context, *connect.Request[v2.GetPersonByLongLatBBoxRequest]) (*connect.Response[v2.GetPersonByLongLatBBoxResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.GetPersonByLongLatBBox is not implemented"))
}

func (UnimplementedPersonServiceHandler) GetAllVehicles(context.Context, *connect.Request[v2.GetAllVehiclesRequest]) (*connect.Response[v2.GetAllVehiclesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.GetAllVehicles is not implemented"))
}

func (UnimplementedPersonServiceHandler) GetAllPedestrians(context.Context, *connect.Request[v2.GetAllPedestriansRequest]) (*connect.Response[v2.GetAllPedestriansResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.GetAllPedestrians is not implemented"))
}

func (UnimplementedPersonServiceHandler) ResetPersonPosition(context.Context, *connect.Request[v2.ResetPersonPositionRequest]) (*connect.Response[v2.ResetPersonPositionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.ResetPersonPosition is not implemented"))
}

func (UnimplementedPersonServiceHandler) SetPersonVehicleAttribute(context.Context, *connect.Request[v2.SetPersonVehicleAttributeRequest]) (*connect.Response[v2.SetPersonVehicleAttributeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.SetPersonVehicleAttribute is not implemented"))
}

func (UnimplementedPersonServiceHandler) SetControlledVehicleIDs(context.Context, *connect.Request[v2.SetControlledVehicleIDsRequest]) (*connect.Response[v2.SetControlledVehicleIDsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.SetControlledVehicleIDs is not implemented"))
}

func (UnimplementedPersonServiceHandler) FetchControlledVehicleEnvs(context.Context, *connect.Request[v2.FetchControlledVehicleEnvsRequest]) (*connect.Response[v2.FetchControlledVehicleEnvsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.FetchControlledVehicleEnvs is not implemented"))
}

func (UnimplementedPersonServiceHandler) SetControlledVehicleActions(context.Context, *connect.Request[v2.SetControlledVehicleActionsRequest]) (*connect.Response[v2.SetControlledVehicleActionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.SetControlledVehicleActions is not implemented"))
}

func (UnimplementedPersonServiceHandler) SetControlledTaxiIDs(context.Context, *connect.Request[v2.SetControlledTaxiIDsRequest]) (*connect.Response[v2.SetControlledTaxiIDsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.SetControlledTaxiIDs is not implemented"))
}

func (UnimplementedPersonServiceHandler) GetAllOrders(context.Context, *connect.Request[v2.GetAllOrdersRequest]) (*connect.Response[v2.GetAllOrdersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.GetAllOrders is not implemented"))
}

func (UnimplementedPersonServiceHandler) SetControlledTaxiToOrders(context.Context, *connect.Request[v2.SetControlledTaxiToOrdersRequest]) (*connect.Response[v2.SetControlledTaxiToOrdersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.SetControlledTaxiToOrders is not implemented"))
}

func (UnimplementedPersonServiceHandler) SetControlledPedestrians(context.Context, *connect.Request[v2.SetControlledPedestriansRequest]) (*connect.Response[v2.SetControlledPedestriansResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.SetControlledPedestrians is not implemented"))
}

func (UnimplementedPersonServiceHandler) FetchControlledPedestriansEnvs(context.Context, *connect.Request[v2.FetchControlledPedestriansEnvsRequest]) (*connect.Response[v2.FetchControlledPedestriansEnvsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.FetchControlledPedestriansEnvs is not implemented"))
}

func (UnimplementedPersonServiceHandler) SetControlledPedestriansActions(context.Context, *connect.Request[v2.SetControlledPedestriansActionsRequest]) (*connect.Response[v2.SetControlledPedestriansActionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.SetControlledPedestriansActions is not implemented"))
}

func (UnimplementedPersonServiceHandler) GetControlledTaxiOrderAllocationPlan(context.Context, *connect.Request[v2.GetControlledTaxiOrderAllocationPlanRequest]) (*connect.Response[v2.GetControlledTaxiOrderAllocationPlanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.GetControlledTaxiOrderAllocationPlan is not implemented"))
}

func (UnimplementedPersonServiceHandler) SetControlledTaxiOrderAllocationPlan(context.Context, *connect.Request[v2.SetControlledTaxiOrderAllocationPlanRequest]) (*connect.Response[v2.SetControlledTaxiOrderAllocationPlanResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.SetControlledTaxiOrderAllocationPlan is not implemented"))
}

func (UnimplementedPersonServiceHandler) GetGlobalStatistics(context.Context, *connect.Request[v2.GetGlobalStatisticsRequest]) (*connect.Response[v2.GetGlobalStatisticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.person.v2.PersonService.GetGlobalStatistics is not implemented"))
}
