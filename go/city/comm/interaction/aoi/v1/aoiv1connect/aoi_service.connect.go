// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/comm/interaction/aoi/v1/aoi_service.proto

package aoiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "git.fiblab.net/sim/protos/go/v2/city/comm/interaction/aoi/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AoiServiceName is the fully-qualified name of the AoiService service.
	AoiServiceName = "city.comm.interaction.aoi.v1.AoiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AoiServiceGetBadAoiIDProcedure is the fully-qualified name of the AoiService's GetBadAoiID RPC.
	AoiServiceGetBadAoiIDProcedure = "/city.comm.interaction.aoi.v1.AoiService/GetBadAoiID"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	aoiServiceServiceDescriptor           = v1.File_city_comm_interaction_aoi_v1_aoi_service_proto.Services().ByName("AoiService")
	aoiServiceGetBadAoiIDMethodDescriptor = aoiServiceServiceDescriptor.Methods().ByName("GetBadAoiID")
)

// AoiServiceClient is a client for the city.comm.interaction.aoi.v1.AoiService service.
type AoiServiceClient interface {
	GetBadAoiID(context.Context, *connect.Request[v1.GetBadAoiIDRequest]) (*connect.Response[v1.GetBadAoiIDResponse], error)
}

// NewAoiServiceClient constructs a client for the city.comm.interaction.aoi.v1.AoiService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAoiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AoiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aoiServiceClient{
		getBadAoiID: connect.NewClient[v1.GetBadAoiIDRequest, v1.GetBadAoiIDResponse](
			httpClient,
			baseURL+AoiServiceGetBadAoiIDProcedure,
			connect.WithSchema(aoiServiceGetBadAoiIDMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// aoiServiceClient implements AoiServiceClient.
type aoiServiceClient struct {
	getBadAoiID *connect.Client[v1.GetBadAoiIDRequest, v1.GetBadAoiIDResponse]
}

// GetBadAoiID calls city.comm.interaction.aoi.v1.AoiService.GetBadAoiID.
func (c *aoiServiceClient) GetBadAoiID(ctx context.Context, req *connect.Request[v1.GetBadAoiIDRequest]) (*connect.Response[v1.GetBadAoiIDResponse], error) {
	return c.getBadAoiID.CallUnary(ctx, req)
}

// AoiServiceHandler is an implementation of the city.comm.interaction.aoi.v1.AoiService service.
type AoiServiceHandler interface {
	GetBadAoiID(context.Context, *connect.Request[v1.GetBadAoiIDRequest]) (*connect.Response[v1.GetBadAoiIDResponse], error)
}

// NewAoiServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAoiServiceHandler(svc AoiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aoiServiceGetBadAoiIDHandler := connect.NewUnaryHandler(
		AoiServiceGetBadAoiIDProcedure,
		svc.GetBadAoiID,
		connect.WithSchema(aoiServiceGetBadAoiIDMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.comm.interaction.aoi.v1.AoiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AoiServiceGetBadAoiIDProcedure:
			aoiServiceGetBadAoiIDHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAoiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAoiServiceHandler struct{}

func (UnimplementedAoiServiceHandler) GetBadAoiID(context.Context, *connect.Request[v1.GetBadAoiIDRequest]) (*connect.Response[v1.GetBadAoiIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.comm.interaction.aoi.v1.AoiService.GetBadAoiID is not implemented"))
}
