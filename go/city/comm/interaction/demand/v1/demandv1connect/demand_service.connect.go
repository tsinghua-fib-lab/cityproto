// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/comm/interaction/demand/v1/demand_service.proto

package demandv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "git.fiblab.net/sim/protos/v2/go/city/comm/interaction/demand/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DemandServiceName is the fully-qualified name of the DemandService service.
	DemandServiceName = "city.comm.interaction.demand.v1.DemandService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DemandServiceSetDemandStatusProcedure is the fully-qualified name of the DemandService's
	// SetDemandStatus RPC.
	DemandServiceSetDemandStatusProcedure = "/city.comm.interaction.demand.v1.DemandService/SetDemandStatus"
)

// DemandServiceClient is a client for the city.comm.interaction.demand.v1.DemandService service.
type DemandServiceClient interface {
	SetDemandStatus(context.Context, *connect.Request[v1.SetDemandStatusRequest]) (*connect.Response[v1.SetDemandStatusResponse], error)
}

// NewDemandServiceClient constructs a client for the city.comm.interaction.demand.v1.DemandService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDemandServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DemandServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	demandServiceMethods := v1.File_city_comm_interaction_demand_v1_demand_service_proto.Services().ByName("DemandService").Methods()
	return &demandServiceClient{
		setDemandStatus: connect.NewClient[v1.SetDemandStatusRequest, v1.SetDemandStatusResponse](
			httpClient,
			baseURL+DemandServiceSetDemandStatusProcedure,
			connect.WithSchema(demandServiceMethods.ByName("SetDemandStatus")),
			connect.WithClientOptions(opts...),
		),
	}
}

// demandServiceClient implements DemandServiceClient.
type demandServiceClient struct {
	setDemandStatus *connect.Client[v1.SetDemandStatusRequest, v1.SetDemandStatusResponse]
}

// SetDemandStatus calls city.comm.interaction.demand.v1.DemandService.SetDemandStatus.
func (c *demandServiceClient) SetDemandStatus(ctx context.Context, req *connect.Request[v1.SetDemandStatusRequest]) (*connect.Response[v1.SetDemandStatusResponse], error) {
	return c.setDemandStatus.CallUnary(ctx, req)
}

// DemandServiceHandler is an implementation of the city.comm.interaction.demand.v1.DemandService
// service.
type DemandServiceHandler interface {
	SetDemandStatus(context.Context, *connect.Request[v1.SetDemandStatusRequest]) (*connect.Response[v1.SetDemandStatusResponse], error)
}

// NewDemandServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDemandServiceHandler(svc DemandServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	demandServiceMethods := v1.File_city_comm_interaction_demand_v1_demand_service_proto.Services().ByName("DemandService").Methods()
	demandServiceSetDemandStatusHandler := connect.NewUnaryHandler(
		DemandServiceSetDemandStatusProcedure,
		svc.SetDemandStatus,
		connect.WithSchema(demandServiceMethods.ByName("SetDemandStatus")),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.comm.interaction.demand.v1.DemandService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DemandServiceSetDemandStatusProcedure:
			demandServiceSetDemandStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDemandServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDemandServiceHandler struct{}

func (UnimplementedDemandServiceHandler) SetDemandStatus(context.Context, *connect.Request[v1.SetDemandStatusRequest]) (*connect.Response[v1.SetDemandStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.comm.interaction.demand.v1.DemandService.SetDemandStatus is not implemented"))
}
