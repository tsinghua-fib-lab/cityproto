// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: city/water/input/v1/water.proto

package inputv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RainPeriod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 起始时间点，单位为秒，但必须整小时
	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty" bson:"start" db:"start" yaml:"start"`
	// 降雨量：单位mm
	Rainfall      float64 `protobuf:"fixed64,2,opt,name=rainfall,proto3" json:"rainfall,omitempty" bson:"rainfall" db:"rainfall" yaml:"rainfall"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RainPeriod) Reset() {
	*x = RainPeriod{}
	mi := &file_city_water_input_v1_water_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RainPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RainPeriod) ProtoMessage() {}

func (x *RainPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_city_water_input_v1_water_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RainPeriod.ProtoReflect.Descriptor instead.
func (*RainPeriod) Descriptor() ([]byte, []int) {
	return file_city_water_input_v1_water_proto_rawDescGZIP(), []int{0}
}

func (x *RainPeriod) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *RainPeriod) GetRainfall() float64 {
	if x != nil {
		return x.Rainfall
	}
	return 0
}

// 全天降雨情况，在数据库中体现为一条数据
type Rain struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rains         []*RainPeriod          `protobuf:"bytes,1,rep,name=rains,proto3" json:"rains,omitempty" bson:"rains" db:"rains" yaml:"rains"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Rain) Reset() {
	*x = Rain{}
	mi := &file_city_water_input_v1_water_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rain) ProtoMessage() {}

func (x *Rain) ProtoReflect() protoreflect.Message {
	mi := &file_city_water_input_v1_water_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rain.ProtoReflect.Descriptor instead.
func (*Rain) Descriptor() ([]byte, []int) {
	return file_city_water_input_v1_water_proto_rawDescGZIP(), []int{1}
}

func (x *Rain) GetRains() []*RainPeriod {
	if x != nil {
		return x.Rains
	}
	return nil
}

var File_city_water_input_v1_water_proto protoreflect.FileDescriptor

const file_city_water_input_v1_water_proto_rawDesc = "" +
	"\n" +
	"\x1fcity/water/input/v1/water.proto\x12\x13city.water.input.v1\">\n" +
	"\n" +
	"RainPeriod\x12\x14\n" +
	"\x05start\x18\x01 \x01(\x05R\x05start\x12\x1a\n" +
	"\brainfall\x18\x02 \x01(\x01R\brainfall\"=\n" +
	"\x04Rain\x125\n" +
	"\x05rains\x18\x01 \x03(\v2\x1f.city.water.input.v1.RainPeriodR\x05rainsB\xd1\x01\n" +
	"\x17com.city.water.input.v1B\n" +
	"WaterProtoP\x01Z;git.fiblab.net/sim/protos/v2/go/city/water/input/v1;inputv1\xa2\x02\x03CWI\xaa\x02\x13City.Water.Input.V1\xca\x02\x13City\\Water\\Input\\V1\xe2\x02\x1fCity\\Water\\Input\\V1\\GPBMetadata\xea\x02\x16City::Water::Input::V1b\x06proto3"

var (
	file_city_water_input_v1_water_proto_rawDescOnce sync.Once
	file_city_water_input_v1_water_proto_rawDescData []byte
)

func file_city_water_input_v1_water_proto_rawDescGZIP() []byte {
	file_city_water_input_v1_water_proto_rawDescOnce.Do(func() {
		file_city_water_input_v1_water_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_city_water_input_v1_water_proto_rawDesc), len(file_city_water_input_v1_water_proto_rawDesc)))
	})
	return file_city_water_input_v1_water_proto_rawDescData
}

var file_city_water_input_v1_water_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_city_water_input_v1_water_proto_goTypes = []any{
	(*RainPeriod)(nil), // 0: city.water.input.v1.RainPeriod
	(*Rain)(nil),       // 1: city.water.input.v1.Rain
}
var file_city_water_input_v1_water_proto_depIdxs = []int32{
	0, // 0: city.water.input.v1.Rain.rains:type_name -> city.water.input.v1.RainPeriod
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_city_water_input_v1_water_proto_init() }
func file_city_water_input_v1_water_proto_init() {
	if File_city_water_input_v1_water_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_city_water_input_v1_water_proto_rawDesc), len(file_city_water_input_v1_water_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_city_water_input_v1_water_proto_goTypes,
		DependencyIndexes: file_city_water_input_v1_water_proto_depIdxs,
		MessageInfos:      file_city_water_input_v1_water_proto_msgTypes,
	}.Build()
	File_city_water_input_v1_water_proto = out.File
	file_city_water_input_v1_water_proto_goTypes = nil
	file_city_water_input_v1_water_proto_depIdxs = nil
}
