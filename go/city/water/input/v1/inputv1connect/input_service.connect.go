// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/water/input/v1/input_service.proto

package inputv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "git.fiblab.net/sim/protos/v2/go/city/water/input/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InputServiceName is the fully-qualified name of the InputService service.
	InputServiceName = "city.water.input.v1.InputService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InputServiceInitProcedure is the fully-qualified name of the InputService's Init RPC.
	InputServiceInitProcedure = "/city.water.input.v1.InputService/Init"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	inputServiceServiceDescriptor    = v1.File_city_water_input_v1_input_service_proto.Services().ByName("InputService")
	inputServiceInitMethodDescriptor = inputServiceServiceDescriptor.Methods().ByName("Init")
)

// InputServiceClient is a client for the city.water.input.v1.InputService service.
type InputServiceClient interface {
	Init(context.Context, *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error)
}

// NewInputServiceClient constructs a client for the city.water.input.v1.InputService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInputServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InputServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &inputServiceClient{
		init: connect.NewClient[v1.InitRequest, v1.InitResponse](
			httpClient,
			baseURL+InputServiceInitProcedure,
			connect.WithSchema(inputServiceInitMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// inputServiceClient implements InputServiceClient.
type inputServiceClient struct {
	init *connect.Client[v1.InitRequest, v1.InitResponse]
}

// Init calls city.water.input.v1.InputService.Init.
func (c *inputServiceClient) Init(ctx context.Context, req *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error) {
	return c.init.CallUnary(ctx, req)
}

// InputServiceHandler is an implementation of the city.water.input.v1.InputService service.
type InputServiceHandler interface {
	Init(context.Context, *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error)
}

// NewInputServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInputServiceHandler(svc InputServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	inputServiceInitHandler := connect.NewUnaryHandler(
		InputServiceInitProcedure,
		svc.Init,
		connect.WithSchema(inputServiceInitMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.water.input.v1.InputService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InputServiceInitProcedure:
			inputServiceInitHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInputServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInputServiceHandler struct{}

func (UnimplementedInputServiceHandler) Init(context.Context, *connect.Request[v1.InitRequest]) (*connect.Response[v1.InitResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.water.input.v1.InputService.Init is not implemented"))
}
