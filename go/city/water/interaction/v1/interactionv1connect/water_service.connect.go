// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/water/interaction/v1/water_service.proto

package interactionv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "git.fiblab.net/sim/protos/go/city/water/interaction/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WaterServiceName is the fully-qualified name of the WaterService service.
	WaterServiceName = "city.water.interaction.v1.WaterService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WaterServiceSetPumpPowerStatusProcedure is the fully-qualified name of the WaterService's
	// SetPumpPowerStatus RPC.
	WaterServiceSetPumpPowerStatusProcedure = "/city.water.interaction.v1.WaterService/SetPumpPowerStatus"
	// WaterServiceSetPumpNetworkStatusProcedure is the fully-qualified name of the WaterService's
	// SetPumpNetworkStatus RPC.
	WaterServiceSetPumpNetworkStatusProcedure = "/city.water.interaction.v1.WaterService/SetPumpNetworkStatus"
	// WaterServiceSetPumpStatusProcedure is the fully-qualified name of the WaterService's
	// SetPumpStatus RPC.
	WaterServiceSetPumpStatusProcedure = "/city.water.interaction.v1.WaterService/SetPumpStatus"
	// WaterServiceGetPumpStatusProcedure is the fully-qualified name of the WaterService's
	// GetPumpStatus RPC.
	WaterServiceGetPumpStatusProcedure = "/city.water.interaction.v1.WaterService/GetPumpStatus"
	// WaterServiceGetNoWaterAOIProcedure is the fully-qualified name of the WaterService's
	// GetNoWaterAOI RPC.
	WaterServiceGetNoWaterAOIProcedure = "/city.water.interaction.v1.WaterService/GetNoWaterAOI"
	// WaterServiceGetRuinInfoProcedure is the fully-qualified name of the WaterService's GetRuinInfo
	// RPC.
	WaterServiceGetRuinInfoProcedure = "/city.water.interaction.v1.WaterService/GetRuinInfo"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	waterServiceServiceDescriptor                    = v1.File_city_water_interaction_v1_water_service_proto.Services().ByName("WaterService")
	waterServiceSetPumpPowerStatusMethodDescriptor   = waterServiceServiceDescriptor.Methods().ByName("SetPumpPowerStatus")
	waterServiceSetPumpNetworkStatusMethodDescriptor = waterServiceServiceDescriptor.Methods().ByName("SetPumpNetworkStatus")
	waterServiceSetPumpStatusMethodDescriptor        = waterServiceServiceDescriptor.Methods().ByName("SetPumpStatus")
	waterServiceGetPumpStatusMethodDescriptor        = waterServiceServiceDescriptor.Methods().ByName("GetPumpStatus")
	waterServiceGetNoWaterAOIMethodDescriptor        = waterServiceServiceDescriptor.Methods().ByName("GetNoWaterAOI")
	waterServiceGetRuinInfoMethodDescriptor          = waterServiceServiceDescriptor.Methods().ByName("GetRuinInfo")
)

// WaterServiceClient is a client for the city.water.interaction.v1.WaterService service.
type WaterServiceClient interface {
	SetPumpPowerStatus(context.Context, *connect.Request[v1.SetPumpPowerStatusRequest]) (*connect.Response[v1.SetPumpPowerStatusResponse], error)
	SetPumpNetworkStatus(context.Context, *connect.Request[v1.SetPumpNetworkStatusRequest]) (*connect.Response[v1.SetPumpNetworkStatusResponse], error)
	SetPumpStatus(context.Context, *connect.Request[v1.SetPumpStatusRequest]) (*connect.Response[v1.SetPumpStatusResponse], error)
	GetPumpStatus(context.Context, *connect.Request[v1.GetPumpStatusRequest]) (*connect.Response[v1.GetPumpStatusResponse], error)
	GetNoWaterAOI(context.Context, *connect.Request[v1.GetNoWaterAOIRequest]) (*connect.Response[v1.GetNoWaterAOIResponse], error)
	GetRuinInfo(context.Context, *connect.Request[v1.GetRuinInfoRequest]) (*connect.Response[v1.GetRuinInfoResponse], error)
}

// NewWaterServiceClient constructs a client for the city.water.interaction.v1.WaterService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWaterServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WaterServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &waterServiceClient{
		setPumpPowerStatus: connect.NewClient[v1.SetPumpPowerStatusRequest, v1.SetPumpPowerStatusResponse](
			httpClient,
			baseURL+WaterServiceSetPumpPowerStatusProcedure,
			connect.WithSchema(waterServiceSetPumpPowerStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setPumpNetworkStatus: connect.NewClient[v1.SetPumpNetworkStatusRequest, v1.SetPumpNetworkStatusResponse](
			httpClient,
			baseURL+WaterServiceSetPumpNetworkStatusProcedure,
			connect.WithSchema(waterServiceSetPumpNetworkStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setPumpStatus: connect.NewClient[v1.SetPumpStatusRequest, v1.SetPumpStatusResponse](
			httpClient,
			baseURL+WaterServiceSetPumpStatusProcedure,
			connect.WithSchema(waterServiceSetPumpStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPumpStatus: connect.NewClient[v1.GetPumpStatusRequest, v1.GetPumpStatusResponse](
			httpClient,
			baseURL+WaterServiceGetPumpStatusProcedure,
			connect.WithSchema(waterServiceGetPumpStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNoWaterAOI: connect.NewClient[v1.GetNoWaterAOIRequest, v1.GetNoWaterAOIResponse](
			httpClient,
			baseURL+WaterServiceGetNoWaterAOIProcedure,
			connect.WithSchema(waterServiceGetNoWaterAOIMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRuinInfo: connect.NewClient[v1.GetRuinInfoRequest, v1.GetRuinInfoResponse](
			httpClient,
			baseURL+WaterServiceGetRuinInfoProcedure,
			connect.WithSchema(waterServiceGetRuinInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// waterServiceClient implements WaterServiceClient.
type waterServiceClient struct {
	setPumpPowerStatus   *connect.Client[v1.SetPumpPowerStatusRequest, v1.SetPumpPowerStatusResponse]
	setPumpNetworkStatus *connect.Client[v1.SetPumpNetworkStatusRequest, v1.SetPumpNetworkStatusResponse]
	setPumpStatus        *connect.Client[v1.SetPumpStatusRequest, v1.SetPumpStatusResponse]
	getPumpStatus        *connect.Client[v1.GetPumpStatusRequest, v1.GetPumpStatusResponse]
	getNoWaterAOI        *connect.Client[v1.GetNoWaterAOIRequest, v1.GetNoWaterAOIResponse]
	getRuinInfo          *connect.Client[v1.GetRuinInfoRequest, v1.GetRuinInfoResponse]
}

// SetPumpPowerStatus calls city.water.interaction.v1.WaterService.SetPumpPowerStatus.
func (c *waterServiceClient) SetPumpPowerStatus(ctx context.Context, req *connect.Request[v1.SetPumpPowerStatusRequest]) (*connect.Response[v1.SetPumpPowerStatusResponse], error) {
	return c.setPumpPowerStatus.CallUnary(ctx, req)
}

// SetPumpNetworkStatus calls city.water.interaction.v1.WaterService.SetPumpNetworkStatus.
func (c *waterServiceClient) SetPumpNetworkStatus(ctx context.Context, req *connect.Request[v1.SetPumpNetworkStatusRequest]) (*connect.Response[v1.SetPumpNetworkStatusResponse], error) {
	return c.setPumpNetworkStatus.CallUnary(ctx, req)
}

// SetPumpStatus calls city.water.interaction.v1.WaterService.SetPumpStatus.
func (c *waterServiceClient) SetPumpStatus(ctx context.Context, req *connect.Request[v1.SetPumpStatusRequest]) (*connect.Response[v1.SetPumpStatusResponse], error) {
	return c.setPumpStatus.CallUnary(ctx, req)
}

// GetPumpStatus calls city.water.interaction.v1.WaterService.GetPumpStatus.
func (c *waterServiceClient) GetPumpStatus(ctx context.Context, req *connect.Request[v1.GetPumpStatusRequest]) (*connect.Response[v1.GetPumpStatusResponse], error) {
	return c.getPumpStatus.CallUnary(ctx, req)
}

// GetNoWaterAOI calls city.water.interaction.v1.WaterService.GetNoWaterAOI.
func (c *waterServiceClient) GetNoWaterAOI(ctx context.Context, req *connect.Request[v1.GetNoWaterAOIRequest]) (*connect.Response[v1.GetNoWaterAOIResponse], error) {
	return c.getNoWaterAOI.CallUnary(ctx, req)
}

// GetRuinInfo calls city.water.interaction.v1.WaterService.GetRuinInfo.
func (c *waterServiceClient) GetRuinInfo(ctx context.Context, req *connect.Request[v1.GetRuinInfoRequest]) (*connect.Response[v1.GetRuinInfoResponse], error) {
	return c.getRuinInfo.CallUnary(ctx, req)
}

// WaterServiceHandler is an implementation of the city.water.interaction.v1.WaterService service.
type WaterServiceHandler interface {
	SetPumpPowerStatus(context.Context, *connect.Request[v1.SetPumpPowerStatusRequest]) (*connect.Response[v1.SetPumpPowerStatusResponse], error)
	SetPumpNetworkStatus(context.Context, *connect.Request[v1.SetPumpNetworkStatusRequest]) (*connect.Response[v1.SetPumpNetworkStatusResponse], error)
	SetPumpStatus(context.Context, *connect.Request[v1.SetPumpStatusRequest]) (*connect.Response[v1.SetPumpStatusResponse], error)
	GetPumpStatus(context.Context, *connect.Request[v1.GetPumpStatusRequest]) (*connect.Response[v1.GetPumpStatusResponse], error)
	GetNoWaterAOI(context.Context, *connect.Request[v1.GetNoWaterAOIRequest]) (*connect.Response[v1.GetNoWaterAOIResponse], error)
	GetRuinInfo(context.Context, *connect.Request[v1.GetRuinInfoRequest]) (*connect.Response[v1.GetRuinInfoResponse], error)
}

// NewWaterServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWaterServiceHandler(svc WaterServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	waterServiceSetPumpPowerStatusHandler := connect.NewUnaryHandler(
		WaterServiceSetPumpPowerStatusProcedure,
		svc.SetPumpPowerStatus,
		connect.WithSchema(waterServiceSetPumpPowerStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	waterServiceSetPumpNetworkStatusHandler := connect.NewUnaryHandler(
		WaterServiceSetPumpNetworkStatusProcedure,
		svc.SetPumpNetworkStatus,
		connect.WithSchema(waterServiceSetPumpNetworkStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	waterServiceSetPumpStatusHandler := connect.NewUnaryHandler(
		WaterServiceSetPumpStatusProcedure,
		svc.SetPumpStatus,
		connect.WithSchema(waterServiceSetPumpStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	waterServiceGetPumpStatusHandler := connect.NewUnaryHandler(
		WaterServiceGetPumpStatusProcedure,
		svc.GetPumpStatus,
		connect.WithSchema(waterServiceGetPumpStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	waterServiceGetNoWaterAOIHandler := connect.NewUnaryHandler(
		WaterServiceGetNoWaterAOIProcedure,
		svc.GetNoWaterAOI,
		connect.WithSchema(waterServiceGetNoWaterAOIMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	waterServiceGetRuinInfoHandler := connect.NewUnaryHandler(
		WaterServiceGetRuinInfoProcedure,
		svc.GetRuinInfo,
		connect.WithSchema(waterServiceGetRuinInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.water.interaction.v1.WaterService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WaterServiceSetPumpPowerStatusProcedure:
			waterServiceSetPumpPowerStatusHandler.ServeHTTP(w, r)
		case WaterServiceSetPumpNetworkStatusProcedure:
			waterServiceSetPumpNetworkStatusHandler.ServeHTTP(w, r)
		case WaterServiceSetPumpStatusProcedure:
			waterServiceSetPumpStatusHandler.ServeHTTP(w, r)
		case WaterServiceGetPumpStatusProcedure:
			waterServiceGetPumpStatusHandler.ServeHTTP(w, r)
		case WaterServiceGetNoWaterAOIProcedure:
			waterServiceGetNoWaterAOIHandler.ServeHTTP(w, r)
		case WaterServiceGetRuinInfoProcedure:
			waterServiceGetRuinInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWaterServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWaterServiceHandler struct{}

func (UnimplementedWaterServiceHandler) SetPumpPowerStatus(context.Context, *connect.Request[v1.SetPumpPowerStatusRequest]) (*connect.Response[v1.SetPumpPowerStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.water.interaction.v1.WaterService.SetPumpPowerStatus is not implemented"))
}

func (UnimplementedWaterServiceHandler) SetPumpNetworkStatus(context.Context, *connect.Request[v1.SetPumpNetworkStatusRequest]) (*connect.Response[v1.SetPumpNetworkStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.water.interaction.v1.WaterService.SetPumpNetworkStatus is not implemented"))
}

func (UnimplementedWaterServiceHandler) SetPumpStatus(context.Context, *connect.Request[v1.SetPumpStatusRequest]) (*connect.Response[v1.SetPumpStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.water.interaction.v1.WaterService.SetPumpStatus is not implemented"))
}

func (UnimplementedWaterServiceHandler) GetPumpStatus(context.Context, *connect.Request[v1.GetPumpStatusRequest]) (*connect.Response[v1.GetPumpStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.water.interaction.v1.WaterService.GetPumpStatus is not implemented"))
}

func (UnimplementedWaterServiceHandler) GetNoWaterAOI(context.Context, *connect.Request[v1.GetNoWaterAOIRequest]) (*connect.Response[v1.GetNoWaterAOIResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.water.interaction.v1.WaterService.GetNoWaterAOI is not implemented"))
}

func (UnimplementedWaterServiceHandler) GetRuinInfo(context.Context, *connect.Request[v1.GetRuinInfoRequest]) (*connect.Response[v1.GetRuinInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.water.interaction.v1.WaterService.GetRuinInfo is not implemented"))
}
