// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/agent/v2/agent_service.proto

package agentv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "git.fiblab.net/sim/protos/go/city/agent/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "city.agent.v2.AgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentServiceGetAgentProcedure is the fully-qualified name of the AgentService's GetAgent RPC.
	AgentServiceGetAgentProcedure = "/city.agent.v2.AgentService/GetAgent"
	// AgentServiceAddAgentProcedure is the fully-qualified name of the AgentService's AddAgent RPC.
	AgentServiceAddAgentProcedure = "/city.agent.v2.AgentService/AddAgent"
	// AgentServiceSetScheduleProcedure is the fully-qualified name of the AgentService's SetSchedule
	// RPC.
	AgentServiceSetScheduleProcedure = "/city.agent.v2.AgentService/SetSchedule"
	// AgentServiceGetAgentsByLongLatAreaProcedure is the fully-qualified name of the AgentService's
	// GetAgentsByLongLatArea RPC.
	AgentServiceGetAgentsByLongLatAreaProcedure = "/city.agent.v2.AgentService/GetAgentsByLongLatArea"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	agentServiceServiceDescriptor                      = v2.File_city_agent_v2_agent_service_proto.Services().ByName("AgentService")
	agentServiceGetAgentMethodDescriptor               = agentServiceServiceDescriptor.Methods().ByName("GetAgent")
	agentServiceAddAgentMethodDescriptor               = agentServiceServiceDescriptor.Methods().ByName("AddAgent")
	agentServiceSetScheduleMethodDescriptor            = agentServiceServiceDescriptor.Methods().ByName("SetSchedule")
	agentServiceGetAgentsByLongLatAreaMethodDescriptor = agentServiceServiceDescriptor.Methods().ByName("GetAgentsByLongLatArea")
)

// AgentServiceClient is a client for the city.agent.v2.AgentService service.
type AgentServiceClient interface {
	// 获取agent信息
	//
	// Deprecated: do not use.
	GetAgent(context.Context, *connect.Request[v2.GetAgentRequest]) (*connect.Response[v2.GetAgentResponse], error)
	// 新增agent 传入agent初始位置、目的地表、属性 返回agentid
	//
	// Deprecated: do not use.
	AddAgent(context.Context, *connect.Request[v2.AddAgentRequest]) (*connect.Response[v2.AddAgentResponse], error)
	// 修改agent的schedule 传入agentid、目的地表
	//
	// Deprecated: do not use.
	SetSchedule(context.Context, *connect.Request[v2.SetScheduleRequest]) (*connect.Response[v2.SetScheduleResponse], error)
	// 获取特定区域内的agent
	//
	// Deprecated: do not use.
	GetAgentsByLongLatArea(context.Context, *connect.Request[v2.GetAgentsByLongLatAreaRequest]) (*connect.Response[v2.GetAgentsByLongLatAreaResponse], error)
}

// NewAgentServiceClient constructs a client for the city.agent.v2.AgentService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentServiceClient{
		getAgent: connect.NewClient[v2.GetAgentRequest, v2.GetAgentResponse](
			httpClient,
			baseURL+AgentServiceGetAgentProcedure,
			connect.WithSchema(agentServiceGetAgentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addAgent: connect.NewClient[v2.AddAgentRequest, v2.AddAgentResponse](
			httpClient,
			baseURL+AgentServiceAddAgentProcedure,
			connect.WithSchema(agentServiceAddAgentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setSchedule: connect.NewClient[v2.SetScheduleRequest, v2.SetScheduleResponse](
			httpClient,
			baseURL+AgentServiceSetScheduleProcedure,
			connect.WithSchema(agentServiceSetScheduleMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAgentsByLongLatArea: connect.NewClient[v2.GetAgentsByLongLatAreaRequest, v2.GetAgentsByLongLatAreaResponse](
			httpClient,
			baseURL+AgentServiceGetAgentsByLongLatAreaProcedure,
			connect.WithSchema(agentServiceGetAgentsByLongLatAreaMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	getAgent               *connect.Client[v2.GetAgentRequest, v2.GetAgentResponse]
	addAgent               *connect.Client[v2.AddAgentRequest, v2.AddAgentResponse]
	setSchedule            *connect.Client[v2.SetScheduleRequest, v2.SetScheduleResponse]
	getAgentsByLongLatArea *connect.Client[v2.GetAgentsByLongLatAreaRequest, v2.GetAgentsByLongLatAreaResponse]
}

// GetAgent calls city.agent.v2.AgentService.GetAgent.
//
// Deprecated: do not use.
func (c *agentServiceClient) GetAgent(ctx context.Context, req *connect.Request[v2.GetAgentRequest]) (*connect.Response[v2.GetAgentResponse], error) {
	return c.getAgent.CallUnary(ctx, req)
}

// AddAgent calls city.agent.v2.AgentService.AddAgent.
//
// Deprecated: do not use.
func (c *agentServiceClient) AddAgent(ctx context.Context, req *connect.Request[v2.AddAgentRequest]) (*connect.Response[v2.AddAgentResponse], error) {
	return c.addAgent.CallUnary(ctx, req)
}

// SetSchedule calls city.agent.v2.AgentService.SetSchedule.
//
// Deprecated: do not use.
func (c *agentServiceClient) SetSchedule(ctx context.Context, req *connect.Request[v2.SetScheduleRequest]) (*connect.Response[v2.SetScheduleResponse], error) {
	return c.setSchedule.CallUnary(ctx, req)
}

// GetAgentsByLongLatArea calls city.agent.v2.AgentService.GetAgentsByLongLatArea.
//
// Deprecated: do not use.
func (c *agentServiceClient) GetAgentsByLongLatArea(ctx context.Context, req *connect.Request[v2.GetAgentsByLongLatAreaRequest]) (*connect.Response[v2.GetAgentsByLongLatAreaResponse], error) {
	return c.getAgentsByLongLatArea.CallUnary(ctx, req)
}

// AgentServiceHandler is an implementation of the city.agent.v2.AgentService service.
type AgentServiceHandler interface {
	// 获取agent信息
	//
	// Deprecated: do not use.
	GetAgent(context.Context, *connect.Request[v2.GetAgentRequest]) (*connect.Response[v2.GetAgentResponse], error)
	// 新增agent 传入agent初始位置、目的地表、属性 返回agentid
	//
	// Deprecated: do not use.
	AddAgent(context.Context, *connect.Request[v2.AddAgentRequest]) (*connect.Response[v2.AddAgentResponse], error)
	// 修改agent的schedule 传入agentid、目的地表
	//
	// Deprecated: do not use.
	SetSchedule(context.Context, *connect.Request[v2.SetScheduleRequest]) (*connect.Response[v2.SetScheduleResponse], error)
	// 获取特定区域内的agent
	//
	// Deprecated: do not use.
	GetAgentsByLongLatArea(context.Context, *connect.Request[v2.GetAgentsByLongLatAreaRequest]) (*connect.Response[v2.GetAgentsByLongLatAreaResponse], error)
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentServiceGetAgentHandler := connect.NewUnaryHandler(
		AgentServiceGetAgentProcedure,
		svc.GetAgent,
		connect.WithSchema(agentServiceGetAgentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceAddAgentHandler := connect.NewUnaryHandler(
		AgentServiceAddAgentProcedure,
		svc.AddAgent,
		connect.WithSchema(agentServiceAddAgentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceSetScheduleHandler := connect.NewUnaryHandler(
		AgentServiceSetScheduleProcedure,
		svc.SetSchedule,
		connect.WithSchema(agentServiceSetScheduleMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceGetAgentsByLongLatAreaHandler := connect.NewUnaryHandler(
		AgentServiceGetAgentsByLongLatAreaProcedure,
		svc.GetAgentsByLongLatArea,
		connect.WithSchema(agentServiceGetAgentsByLongLatAreaMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.agent.v2.AgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentServiceGetAgentProcedure:
			agentServiceGetAgentHandler.ServeHTTP(w, r)
		case AgentServiceAddAgentProcedure:
			agentServiceAddAgentHandler.ServeHTTP(w, r)
		case AgentServiceSetScheduleProcedure:
			agentServiceSetScheduleHandler.ServeHTTP(w, r)
		case AgentServiceGetAgentsByLongLatAreaProcedure:
			agentServiceGetAgentsByLongLatAreaHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) GetAgent(context.Context, *connect.Request[v2.GetAgentRequest]) (*connect.Response[v2.GetAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.agent.v2.AgentService.GetAgent is not implemented"))
}

func (UnimplementedAgentServiceHandler) AddAgent(context.Context, *connect.Request[v2.AddAgentRequest]) (*connect.Response[v2.AddAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.agent.v2.AgentService.AddAgent is not implemented"))
}

func (UnimplementedAgentServiceHandler) SetSchedule(context.Context, *connect.Request[v2.SetScheduleRequest]) (*connect.Response[v2.SetScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.agent.v2.AgentService.SetSchedule is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetAgentsByLongLatArea(context.Context, *connect.Request[v2.GetAgentsByLongLatAreaRequest]) (*connect.Response[v2.GetAgentsByLongLatAreaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.agent.v2.AgentService.GetAgentsByLongLatArea is not implemented"))
}
