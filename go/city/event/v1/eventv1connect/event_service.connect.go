// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/event/v1/event_service.proto

package eventv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "git.fiblab.net/sim/protos/v2/go/city/event/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventServiceName is the fully-qualified name of the EventService service.
	EventServiceName = "city.event.v1.EventService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventServicePublishProcedure is the fully-qualified name of the EventService's Publish RPC.
	EventServicePublishProcedure = "/city.event.v1.EventService/Publish"
	// EventServicePullProcedure is the fully-qualified name of the EventService's Pull RPC.
	EventServicePullProcedure = "/city.event.v1.EventService/Pull"
)

// EventServiceClient is a client for the city.event.v1.EventService service.
type EventServiceClient interface {
	// 发布事件
	Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error)
	// 从事件中心拉取事件
	Pull(context.Context, *connect.Request[v1.PullRequest]) (*connect.Response[v1.PullResponse], error)
}

// NewEventServiceClient constructs a client for the city.event.v1.EventService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	eventServiceMethods := v1.File_city_event_v1_event_service_proto.Services().ByName("EventService").Methods()
	return &eventServiceClient{
		publish: connect.NewClient[v1.PublishRequest, v1.PublishResponse](
			httpClient,
			baseURL+EventServicePublishProcedure,
			connect.WithSchema(eventServiceMethods.ByName("Publish")),
			connect.WithClientOptions(opts...),
		),
		pull: connect.NewClient[v1.PullRequest, v1.PullResponse](
			httpClient,
			baseURL+EventServicePullProcedure,
			connect.WithSchema(eventServiceMethods.ByName("Pull")),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventServiceClient implements EventServiceClient.
type eventServiceClient struct {
	publish *connect.Client[v1.PublishRequest, v1.PublishResponse]
	pull    *connect.Client[v1.PullRequest, v1.PullResponse]
}

// Publish calls city.event.v1.EventService.Publish.
func (c *eventServiceClient) Publish(ctx context.Context, req *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error) {
	return c.publish.CallUnary(ctx, req)
}

// Pull calls city.event.v1.EventService.Pull.
func (c *eventServiceClient) Pull(ctx context.Context, req *connect.Request[v1.PullRequest]) (*connect.Response[v1.PullResponse], error) {
	return c.pull.CallUnary(ctx, req)
}

// EventServiceHandler is an implementation of the city.event.v1.EventService service.
type EventServiceHandler interface {
	// 发布事件
	Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error)
	// 从事件中心拉取事件
	Pull(context.Context, *connect.Request[v1.PullRequest]) (*connect.Response[v1.PullResponse], error)
}

// NewEventServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventServiceHandler(svc EventServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventServiceMethods := v1.File_city_event_v1_event_service_proto.Services().ByName("EventService").Methods()
	eventServicePublishHandler := connect.NewUnaryHandler(
		EventServicePublishProcedure,
		svc.Publish,
		connect.WithSchema(eventServiceMethods.ByName("Publish")),
		connect.WithHandlerOptions(opts...),
	)
	eventServicePullHandler := connect.NewUnaryHandler(
		EventServicePullProcedure,
		svc.Pull,
		connect.WithSchema(eventServiceMethods.ByName("Pull")),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.event.v1.EventService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventServicePublishProcedure:
			eventServicePublishHandler.ServeHTTP(w, r)
		case EventServicePullProcedure:
			eventServicePullHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventServiceHandler struct{}

func (UnimplementedEventServiceHandler) Publish(context.Context, *connect.Request[v1.PublishRequest]) (*connect.Response[v1.PublishResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.event.v1.EventService.Publish is not implemented"))
}

func (UnimplementedEventServiceHandler) Pull(context.Context, *connect.Request[v1.PullRequest]) (*connect.Response[v1.PullResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.event.v1.EventService.Pull is not implemented"))
}
