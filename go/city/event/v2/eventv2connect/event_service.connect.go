// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/event/v2/event_service.proto

package eventv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "git.fiblab.net/sim/protos/go/city/event/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventServiceName is the fully-qualified name of the EventService service.
	EventServiceName = "city.event.v2.EventService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventServiceGetEventsByTopicProcedure is the fully-qualified name of the EventService's
	// GetEventsByTopic RPC.
	EventServiceGetEventsByTopicProcedure = "/city.event.v2.EventService/GetEventsByTopic"
	// EventServiceResolveEventsProcedure is the fully-qualified name of the EventService's
	// ResolveEvents RPC.
	EventServiceResolveEventsProcedure = "/city.event.v2.EventService/ResolveEvents"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	eventServiceServiceDescriptor                = v2.File_city_event_v2_event_service_proto.Services().ByName("EventService")
	eventServiceGetEventsByTopicMethodDescriptor = eventServiceServiceDescriptor.Methods().ByName("GetEventsByTopic")
	eventServiceResolveEventsMethodDescriptor    = eventServiceServiceDescriptor.Methods().ByName("ResolveEvents")
)

// EventServiceClient is a client for the city.event.v2.EventService service.
type EventServiceClient interface {
	// 按照topic查询事件
	GetEventsByTopic(context.Context, *connect.Request[v2.GetEventsByTopicRequest]) (*connect.Response[v2.GetEventsByTopicResponse], error)
	// 确认事件已被处理
	ResolveEvents(context.Context, *connect.Request[v2.ResolveEventsRequest]) (*connect.Response[v2.ResolveEventsResponse], error)
}

// NewEventServiceClient constructs a client for the city.event.v2.EventService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eventServiceClient{
		getEventsByTopic: connect.NewClient[v2.GetEventsByTopicRequest, v2.GetEventsByTopicResponse](
			httpClient,
			baseURL+EventServiceGetEventsByTopicProcedure,
			connect.WithSchema(eventServiceGetEventsByTopicMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resolveEvents: connect.NewClient[v2.ResolveEventsRequest, v2.ResolveEventsResponse](
			httpClient,
			baseURL+EventServiceResolveEventsProcedure,
			connect.WithSchema(eventServiceResolveEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventServiceClient implements EventServiceClient.
type eventServiceClient struct {
	getEventsByTopic *connect.Client[v2.GetEventsByTopicRequest, v2.GetEventsByTopicResponse]
	resolveEvents    *connect.Client[v2.ResolveEventsRequest, v2.ResolveEventsResponse]
}

// GetEventsByTopic calls city.event.v2.EventService.GetEventsByTopic.
func (c *eventServiceClient) GetEventsByTopic(ctx context.Context, req *connect.Request[v2.GetEventsByTopicRequest]) (*connect.Response[v2.GetEventsByTopicResponse], error) {
	return c.getEventsByTopic.CallUnary(ctx, req)
}

// ResolveEvents calls city.event.v2.EventService.ResolveEvents.
func (c *eventServiceClient) ResolveEvents(ctx context.Context, req *connect.Request[v2.ResolveEventsRequest]) (*connect.Response[v2.ResolveEventsResponse], error) {
	return c.resolveEvents.CallUnary(ctx, req)
}

// EventServiceHandler is an implementation of the city.event.v2.EventService service.
type EventServiceHandler interface {
	// 按照topic查询事件
	GetEventsByTopic(context.Context, *connect.Request[v2.GetEventsByTopicRequest]) (*connect.Response[v2.GetEventsByTopicResponse], error)
	// 确认事件已被处理
	ResolveEvents(context.Context, *connect.Request[v2.ResolveEventsRequest]) (*connect.Response[v2.ResolveEventsResponse], error)
}

// NewEventServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventServiceHandler(svc EventServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventServiceGetEventsByTopicHandler := connect.NewUnaryHandler(
		EventServiceGetEventsByTopicProcedure,
		svc.GetEventsByTopic,
		connect.WithSchema(eventServiceGetEventsByTopicMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	eventServiceResolveEventsHandler := connect.NewUnaryHandler(
		EventServiceResolveEventsProcedure,
		svc.ResolveEvents,
		connect.WithSchema(eventServiceResolveEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.event.v2.EventService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventServiceGetEventsByTopicProcedure:
			eventServiceGetEventsByTopicHandler.ServeHTTP(w, r)
		case EventServiceResolveEventsProcedure:
			eventServiceResolveEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventServiceHandler struct{}

func (UnimplementedEventServiceHandler) GetEventsByTopic(context.Context, *connect.Request[v2.GetEventsByTopicRequest]) (*connect.Response[v2.GetEventsByTopicResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.event.v2.EventService.GetEventsByTopic is not implemented"))
}

func (UnimplementedEventServiceHandler) ResolveEvents(context.Context, *connect.Request[v2.ResolveEventsRequest]) (*connect.Response[v2.ResolveEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.event.v2.EventService.ResolveEvents is not implemented"))
}
