// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/map/v2/road_service.proto

package mapv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "git.fiblab.net/sim/protos/v2/go/city/map/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RoadServiceName is the fully-qualified name of the RoadService service.
	RoadServiceName = "city.map.v2.RoadService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoadServiceGetRoadProcedure is the fully-qualified name of the RoadService's GetRoad RPC.
	RoadServiceGetRoadProcedure = "/city.map.v2.RoadService/GetRoad"
	// RoadServiceGetRuinInfoProcedure is the fully-qualified name of the RoadService's GetRuinInfo RPC.
	RoadServiceGetRuinInfoProcedure = "/city.map.v2.RoadService/GetRuinInfo"
	// RoadServiceGetEventsProcedure is the fully-qualified name of the RoadService's GetEvents RPC.
	RoadServiceGetEventsProcedure = "/city.map.v2.RoadService/GetEvents"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	roadServiceServiceDescriptor           = v2.File_city_map_v2_road_service_proto.Services().ByName("RoadService")
	roadServiceGetRoadMethodDescriptor     = roadServiceServiceDescriptor.Methods().ByName("GetRoad")
	roadServiceGetRuinInfoMethodDescriptor = roadServiceServiceDescriptor.Methods().ByName("GetRuinInfo")
	roadServiceGetEventsMethodDescriptor   = roadServiceServiceDescriptor.Methods().ByName("GetEvents")
)

// RoadServiceClient is a client for the city.map.v2.RoadService service.
type RoadServiceClient interface {
	// 查询道路信息
	// Get road information
	GetRoad(context.Context, *connect.Request[v2.GetRoadRequest]) (*connect.Response[v2.GetRoadResponse], error)
	GetRuinInfo(context.Context, *connect.Request[v2.GetRuinInfoRequest]) (*connect.Response[v2.GetRuinInfoResponse], error)
	GetEvents(context.Context, *connect.Request[v2.GetEventsRequest]) (*connect.Response[v2.GetEventsResponse], error)
}

// NewRoadServiceClient constructs a client for the city.map.v2.RoadService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoadServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RoadServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &roadServiceClient{
		getRoad: connect.NewClient[v2.GetRoadRequest, v2.GetRoadResponse](
			httpClient,
			baseURL+RoadServiceGetRoadProcedure,
			connect.WithSchema(roadServiceGetRoadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRuinInfo: connect.NewClient[v2.GetRuinInfoRequest, v2.GetRuinInfoResponse](
			httpClient,
			baseURL+RoadServiceGetRuinInfoProcedure,
			connect.WithSchema(roadServiceGetRuinInfoMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getEvents: connect.NewClient[v2.GetEventsRequest, v2.GetEventsResponse](
			httpClient,
			baseURL+RoadServiceGetEventsProcedure,
			connect.WithSchema(roadServiceGetEventsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// roadServiceClient implements RoadServiceClient.
type roadServiceClient struct {
	getRoad     *connect.Client[v2.GetRoadRequest, v2.GetRoadResponse]
	getRuinInfo *connect.Client[v2.GetRuinInfoRequest, v2.GetRuinInfoResponse]
	getEvents   *connect.Client[v2.GetEventsRequest, v2.GetEventsResponse]
}

// GetRoad calls city.map.v2.RoadService.GetRoad.
func (c *roadServiceClient) GetRoad(ctx context.Context, req *connect.Request[v2.GetRoadRequest]) (*connect.Response[v2.GetRoadResponse], error) {
	return c.getRoad.CallUnary(ctx, req)
}

// GetRuinInfo calls city.map.v2.RoadService.GetRuinInfo.
func (c *roadServiceClient) GetRuinInfo(ctx context.Context, req *connect.Request[v2.GetRuinInfoRequest]) (*connect.Response[v2.GetRuinInfoResponse], error) {
	return c.getRuinInfo.CallUnary(ctx, req)
}

// GetEvents calls city.map.v2.RoadService.GetEvents.
func (c *roadServiceClient) GetEvents(ctx context.Context, req *connect.Request[v2.GetEventsRequest]) (*connect.Response[v2.GetEventsResponse], error) {
	return c.getEvents.CallUnary(ctx, req)
}

// RoadServiceHandler is an implementation of the city.map.v2.RoadService service.
type RoadServiceHandler interface {
	// 查询道路信息
	// Get road information
	GetRoad(context.Context, *connect.Request[v2.GetRoadRequest]) (*connect.Response[v2.GetRoadResponse], error)
	GetRuinInfo(context.Context, *connect.Request[v2.GetRuinInfoRequest]) (*connect.Response[v2.GetRuinInfoResponse], error)
	GetEvents(context.Context, *connect.Request[v2.GetEventsRequest]) (*connect.Response[v2.GetEventsResponse], error)
}

// NewRoadServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoadServiceHandler(svc RoadServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	roadServiceGetRoadHandler := connect.NewUnaryHandler(
		RoadServiceGetRoadProcedure,
		svc.GetRoad,
		connect.WithSchema(roadServiceGetRoadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roadServiceGetRuinInfoHandler := connect.NewUnaryHandler(
		RoadServiceGetRuinInfoProcedure,
		svc.GetRuinInfo,
		connect.WithSchema(roadServiceGetRuinInfoMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	roadServiceGetEventsHandler := connect.NewUnaryHandler(
		RoadServiceGetEventsProcedure,
		svc.GetEvents,
		connect.WithSchema(roadServiceGetEventsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.map.v2.RoadService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RoadServiceGetRoadProcedure:
			roadServiceGetRoadHandler.ServeHTTP(w, r)
		case RoadServiceGetRuinInfoProcedure:
			roadServiceGetRuinInfoHandler.ServeHTTP(w, r)
		case RoadServiceGetEventsProcedure:
			roadServiceGetEventsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoadServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoadServiceHandler struct{}

func (UnimplementedRoadServiceHandler) GetRoad(context.Context, *connect.Request[v2.GetRoadRequest]) (*connect.Response[v2.GetRoadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.map.v2.RoadService.GetRoad is not implemented"))
}

func (UnimplementedRoadServiceHandler) GetRuinInfo(context.Context, *connect.Request[v2.GetRuinInfoRequest]) (*connect.Response[v2.GetRuinInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.map.v2.RoadService.GetRuinInfo is not implemented"))
}

func (UnimplementedRoadServiceHandler) GetEvents(context.Context, *connect.Request[v2.GetEventsRequest]) (*connect.Response[v2.GetEventsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.map.v2.RoadService.GetEvents is not implemented"))
}
