// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: city/map/v2/map.proto

package mapv2

import (
	v2 "git.fiblab.net/sim/protos/v2/go/city/geo/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 车道类型
// Lane type
type LaneType int32

const (
	// 未指定
	// unspecified
	LaneType_LANE_TYPE_UNSPECIFIED LaneType = 0
	// 行车
	// driving
	LaneType_LANE_TYPE_DRIVING LaneType = 1
	// 步行
	// walking
	LaneType_LANE_TYPE_WALKING LaneType = 2
	// 轨道交通
	// rail transit
	LaneType_LANE_TYPE_RAIL_TRANSIT LaneType = 3
)

// Enum value maps for LaneType.
var (
	LaneType_name = map[int32]string{
		0: "LANE_TYPE_UNSPECIFIED",
		1: "LANE_TYPE_DRIVING",
		2: "LANE_TYPE_WALKING",
		3: "LANE_TYPE_RAIL_TRANSIT",
	}
	LaneType_value = map[string]int32{
		"LANE_TYPE_UNSPECIFIED":  0,
		"LANE_TYPE_DRIVING":      1,
		"LANE_TYPE_WALKING":      2,
		"LANE_TYPE_RAIL_TRANSIT": 3,
	}
)

func (x LaneType) Enum() *LaneType {
	p := new(LaneType)
	*p = x
	return p
}

func (x LaneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaneType) Descriptor() protoreflect.EnumDescriptor {
	return file_city_map_v2_map_proto_enumTypes[0].Descriptor()
}

func (LaneType) Type() protoreflect.EnumType {
	return &file_city_map_v2_map_proto_enumTypes[0]
}

func (x LaneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaneType.Descriptor instead.
func (LaneType) EnumDescriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{0}
}

// 车道转向
// lane turn type
type LaneTurn int32

const (
	// 未指定
	// unspecified
	LaneTurn_LANE_TURN_UNSPECIFIED LaneTurn = 0
	// 直行
	// go straight
	LaneTurn_LANE_TURN_STRAIGHT LaneTurn = 1
	// 左转
	// turn left
	LaneTurn_LANE_TURN_LEFT LaneTurn = 2
	// 右转
	// turn right
	LaneTurn_LANE_TURN_RIGHT LaneTurn = 3
	// 掉头
	// turn around
	LaneTurn_LANE_TURN_AROUND LaneTurn = 4
)

// Enum value maps for LaneTurn.
var (
	LaneTurn_name = map[int32]string{
		0: "LANE_TURN_UNSPECIFIED",
		1: "LANE_TURN_STRAIGHT",
		2: "LANE_TURN_LEFT",
		3: "LANE_TURN_RIGHT",
		4: "LANE_TURN_AROUND",
	}
	LaneTurn_value = map[string]int32{
		"LANE_TURN_UNSPECIFIED": 0,
		"LANE_TURN_STRAIGHT":    1,
		"LANE_TURN_LEFT":        2,
		"LANE_TURN_RIGHT":       3,
		"LANE_TURN_AROUND":      4,
	}
)

func (x LaneTurn) Enum() *LaneTurn {
	p := new(LaneTurn)
	*p = x
	return p
}

func (x LaneTurn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaneTurn) Descriptor() protoreflect.EnumDescriptor {
	return file_city_map_v2_map_proto_enumTypes[1].Descriptor()
}

func (LaneTurn) Type() protoreflect.EnumType {
	return &file_city_map_v2_map_proto_enumTypes[1]
}

func (x LaneTurn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaneTurn.Descriptor instead.
func (LaneTurn) EnumDescriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{1}
}

// 车道连接类型
// Lane connection type
type LaneConnectionType int32

const (
	// 未指定
	// unspecified
	LaneConnectionType_LANE_CONNECTION_TYPE_UNSPECIFIED LaneConnectionType = 0
	// 连接处为道路开头
	// The connection is at the lane head
	LaneConnectionType_LANE_CONNECTION_TYPE_HEAD LaneConnectionType = 1
	// 连接处为道路结尾
	// The connection is at the lane tail
	LaneConnectionType_LANE_CONNECTION_TYPE_TAIL LaneConnectionType = 2
)

// Enum value maps for LaneConnectionType.
var (
	LaneConnectionType_name = map[int32]string{
		0: "LANE_CONNECTION_TYPE_UNSPECIFIED",
		1: "LANE_CONNECTION_TYPE_HEAD",
		2: "LANE_CONNECTION_TYPE_TAIL",
	}
	LaneConnectionType_value = map[string]int32{
		"LANE_CONNECTION_TYPE_UNSPECIFIED": 0,
		"LANE_CONNECTION_TYPE_HEAD":        1,
		"LANE_CONNECTION_TYPE_TAIL":        2,
	}
)

func (x LaneConnectionType) Enum() *LaneConnectionType {
	p := new(LaneConnectionType)
	*p = x
	return p
}

func (x LaneConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaneConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_city_map_v2_map_proto_enumTypes[2].Descriptor()
}

func (LaneConnectionType) Type() protoreflect.EnumType {
	return &file_city_map_v2_map_proto_enumTypes[2]
}

func (x LaneConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaneConnectionType.Descriptor instead.
func (LaneConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{2}
}

// Aoi类型 Aoi Type
type AoiType int32

const (
	// 未指定
	// unspecified
	AoiType_AOI_TYPE_UNSPECIFIED AoiType = 0
	// 公交站点
	// bus station
	AoiType_AOI_TYPE_BUS_STATION AoiType = 1
	// 其他
	// other
	AoiType_AOI_TYPE_OTHER AoiType = 2
)

// Enum value maps for AoiType.
var (
	AoiType_name = map[int32]string{
		0: "AOI_TYPE_UNSPECIFIED",
		1: "AOI_TYPE_BUS_STATION",
		2: "AOI_TYPE_OTHER",
	}
	AoiType_value = map[string]int32{
		"AOI_TYPE_UNSPECIFIED": 0,
		"AOI_TYPE_BUS_STATION": 1,
		"AOI_TYPE_OTHER":       2,
	}
)

func (x AoiType) Enum() *AoiType {
	p := new(AoiType)
	*p = x
	return p
}

func (x AoiType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AoiType) Descriptor() protoreflect.EnumDescriptor {
	return file_city_map_v2_map_proto_enumTypes[3].Descriptor()
}

func (AoiType) Type() protoreflect.EnumType {
	return &file_city_map_v2_map_proto_enumTypes[3]
}

func (x AoiType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AoiType.Descriptor instead.
func (AoiType) EnumDescriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{3}
}

// 土地利用类型，参照国标GB/T 21010—2007
// Land use type, refer to the national standard GB/T 21010-2007
// http://www.gscloud.cn/static/cases/%E3%80%8A%E5%9C%9F%E5%9C%B0%E5%88%A9%E7%94%A8%E7%8E%B0%E7%8A%B6%E5%88%86%E7%B1%BB%E3%80%8B%E5%9B%BD%E5%AE%B6%E6%A0%87%E5%87%86gb_t21010-2007(1).pdf
type LandUseType int32

const (
	// 未指定
	// unspecified
	LandUseType_LAND_USE_TYPE_UNSPECIFIED LandUseType = 0
	// 商服用地
	// commercial land
	LandUseType_LAND_USE_TYPE_COMMERCIAL LandUseType = 5
	// 工矿仓储用地
	// Industrial and storage land
	LandUseType_LAND_USE_TYPE_INDUSTRIAL LandUseType = 6
	// 住宅用地
	// residential land
	LandUseType_LAND_USE_TYPE_RESIDENTIAL LandUseType = 7
	// 公共管理与公共服务用地
	// Public management and public service land
	LandUseType_LAND_USE_TYPE_PUBLIC LandUseType = 8
	// 交通运输用地
	// transportation land
	LandUseType_LAND_USE_TYPE_TRANSPORTATION LandUseType = 10
	// 其他土地
	// other land
	LandUseType_LAND_USE_TYPE_OTHER LandUseType = 12
)

// Enum value maps for LandUseType.
var (
	LandUseType_name = map[int32]string{
		0:  "LAND_USE_TYPE_UNSPECIFIED",
		5:  "LAND_USE_TYPE_COMMERCIAL",
		6:  "LAND_USE_TYPE_INDUSTRIAL",
		7:  "LAND_USE_TYPE_RESIDENTIAL",
		8:  "LAND_USE_TYPE_PUBLIC",
		10: "LAND_USE_TYPE_TRANSPORTATION",
		12: "LAND_USE_TYPE_OTHER",
	}
	LandUseType_value = map[string]int32{
		"LAND_USE_TYPE_UNSPECIFIED":    0,
		"LAND_USE_TYPE_COMMERCIAL":     5,
		"LAND_USE_TYPE_INDUSTRIAL":     6,
		"LAND_USE_TYPE_RESIDENTIAL":    7,
		"LAND_USE_TYPE_PUBLIC":         8,
		"LAND_USE_TYPE_TRANSPORTATION": 10,
		"LAND_USE_TYPE_OTHER":          12,
	}
)

func (x LandUseType) Enum() *LandUseType {
	p := new(LandUseType)
	*p = x
	return p
}

func (x LandUseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LandUseType) Descriptor() protoreflect.EnumDescriptor {
	return file_city_map_v2_map_proto_enumTypes[4].Descriptor()
}

func (LandUseType) Type() protoreflect.EnumType {
	return &file_city_map_v2_map_proto_enumTypes[4]
}

func (x LandUseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LandUseType.Descriptor instead.
func (LandUseType) EnumDescriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{4}
}

// 支线类型
// Type of subline
type SublineType int32

const (
	// 未指定
	// unspecified
	SublineType_SUBLINE_TYPE_UNSPECIFIED SublineType = 0
	// 公交类型支线
	// The subline is a bus line
	SublineType_SUBLINE_TYPE_BUS SublineType = 1
	// 地铁类型支线
	// The subline is a subway line
	SublineType_SUBLINE_TYPE_SUBWAY SublineType = 2
)

// Enum value maps for SublineType.
var (
	SublineType_name = map[int32]string{
		0: "SUBLINE_TYPE_UNSPECIFIED",
		1: "SUBLINE_TYPE_BUS",
		2: "SUBLINE_TYPE_SUBWAY",
	}
	SublineType_value = map[string]int32{
		"SUBLINE_TYPE_UNSPECIFIED": 0,
		"SUBLINE_TYPE_BUS":         1,
		"SUBLINE_TYPE_SUBWAY":      2,
	}
)

func (x SublineType) Enum() *SublineType {
	p := new(SublineType)
	*p = x
	return p
}

func (x SublineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SublineType) Descriptor() protoreflect.EnumDescriptor {
	return file_city_map_v2_map_proto_enumTypes[5].Descriptor()
}

func (SublineType) Type() protoreflect.EnumType {
	return &file_city_map_v2_map_proto_enumTypes[5]
}

func (x SublineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SublineType.Descriptor instead.
func (SublineType) EnumDescriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{5}
}

// 折线，用于定义车道等的形状
// Polyline, used to define the shape of lanes, etc.
type Polyline struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 折线上的点
	// Points of the polyline
	Nodes         []*v2.XYPosition `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty" bson:"nodes" db:"nodes" yaml:"nodes"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Polyline) Reset() {
	*x = Polyline{}
	mi := &file_city_map_v2_map_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Polyline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Polyline) ProtoMessage() {}

func (x *Polyline) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Polyline.ProtoReflect.Descriptor instead.
func (*Polyline) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{0}
}

func (x *Polyline) GetNodes() []*v2.XYPosition {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// 地图元信息
// Map meta information
type Header struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 地图名称
	// Map name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name" db:"name" yaml:"name"`
	// 地图创建时间
	// Map creation time
	Date string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty" bson:"date" db:"date" yaml:"date"`
	// 最大纬度对应的y坐标
	// y coordinate corresponding to the maximum latitude
	North float64 `protobuf:"fixed64,3,opt,name=north,proto3" json:"north,omitempty" bson:"north" db:"north" yaml:"north"`
	// 最小纬度对应的y坐标
	// y coordinate corresponding to the minimum latitude
	South float64 `protobuf:"fixed64,4,opt,name=south,proto3" json:"south,omitempty" bson:"south" db:"south" yaml:"south"`
	// 最大经度对应的x坐标
	// x coordinate corresponding to the maximum longitude
	East float64 `protobuf:"fixed64,5,opt,name=east,proto3" json:"east,omitempty" bson:"east" db:"east" yaml:"east"`
	// 最小经度对应的x坐标
	// x coordinate corresponding to the minimum longitude
	West float64 `protobuf:"fixed64,6,opt,name=west,proto3" json:"west,omitempty" bson:"west" db:"west" yaml:"west"`
	// PROJ.4 投影字符串，用以支持xy坐标到其他坐标系的转换
	// PROJ.4 projection string to support the conversion of xy coordinates to other coordinate systems
	Projection string `protobuf:"bytes,7,opt,name=projection,proto3" json:"projection,omitempty" bson:"projection" db:"projection" yaml:"projection"`
	// 在x方向划分TAZ的步长
	// Step size of the TAZ in the x-direction
	TazXStep *float64 `protobuf:"fixed64,8,opt,name=taz_x_step,json=tazXStep,proto3,oneof" json:"taz_x_step,omitempty" bson:"taz_x_step" db:"taz_x_step" yaml:"taz_x_step"`
	// 在y方向划分TAZ的步长
	// Step size of the TAZ in the y-direction
	TazYStep      *float64 `protobuf:"fixed64,9,opt,name=taz_y_step,json=tazYStep,proto3,oneof" json:"taz_y_step,omitempty" bson:"taz_y_step" db:"taz_y_step" yaml:"taz_y_step"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_city_map_v2_map_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{1}
}

func (x *Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Header) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Header) GetNorth() float64 {
	if x != nil {
		return x.North
	}
	return 0
}

func (x *Header) GetSouth() float64 {
	if x != nil {
		return x.South
	}
	return 0
}

func (x *Header) GetEast() float64 {
	if x != nil {
		return x.East
	}
	return 0
}

func (x *Header) GetWest() float64 {
	if x != nil {
		return x.West
	}
	return 0
}

func (x *Header) GetProjection() string {
	if x != nil {
		return x.Projection
	}
	return ""
}

func (x *Header) GetTazXStep() float64 {
	if x != nil && x.TazXStep != nil {
		return *x.TazXStep
	}
	return 0
}

func (x *Header) GetTazYStep() float64 {
	if x != nil && x.TazYStep != nil {
		return *x.TazYStep
	}
	return 0
}

// 两个lane的冲突区域
// Conflict area between two lanes
type LaneOverlap struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 冲突点在本车道上的坐标
	// Coordinates of the conflict point on this lane
	Self *v2.LanePosition `protobuf:"bytes,1,opt,name=self,proto3" json:"self,omitempty" bson:"self" db:"self" yaml:"self"`
	// 冲突点在冲突车道上的坐标
	// Coordinates of the conflict point on the conflicted lane
	Other *v2.LanePosition `protobuf:"bytes,2,opt,name=other,proto3" json:"other,omitempty" bson:"other" db:"other" yaml:"other"`
	// 本车道是否有优先通行权
	// Whether this lane has priority
	SelfFirst     bool `protobuf:"varint,3,opt,name=self_first,json=selfFirst,proto3" json:"self_first,omitempty" bson:"self_first" db:"self_first" yaml:"self_first"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LaneOverlap) Reset() {
	*x = LaneOverlap{}
	mi := &file_city_map_v2_map_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaneOverlap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaneOverlap) ProtoMessage() {}

func (x *LaneOverlap) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaneOverlap.ProtoReflect.Descriptor instead.
func (*LaneOverlap) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{2}
}

func (x *LaneOverlap) GetSelf() *v2.LanePosition {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *LaneOverlap) GetOther() *v2.LanePosition {
	if x != nil {
		return x.Other
	}
	return nil
}

func (x *LaneOverlap) GetSelfFirst() bool {
	if x != nil {
		return x.SelfFirst
	}
	return false
}

// 车道连接信息
// Lane connection information
type LaneConnection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 所连接的车道Lane的ID
	// ID of the connected lane
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"id" db:"id" yaml:"id"`
	// 连接类型
	// Connection type
	Type          LaneConnectionType `protobuf:"varint,2,opt,name=type,proto3,enum=city.map.v2.LaneConnectionType" json:"type,omitempty" bson:"type" db:"type" yaml:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LaneConnection) Reset() {
	*x = LaneConnection{}
	mi := &file_city_map_v2_map_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LaneConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaneConnection) ProtoMessage() {}

func (x *LaneConnection) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaneConnection.ProtoReflect.Descriptor instead.
func (*LaneConnection) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{3}
}

func (x *LaneConnection) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LaneConnection) GetType() LaneConnectionType {
	if x != nil {
		return x.Type
	}
	return LaneConnectionType_LANE_CONNECTION_TYPE_UNSPECIFIED
}

// Lane，用于描述道路上的车道、人行道等
// Lane, used to describe lanes, sidewalks, etc. on the road
type Lane struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 车道id（从0开始）
	// lane id (starts from 0)
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"id" db:"id" yaml:"id"`
	// 车道类型
	// lane type
	Type LaneType `protobuf:"varint,2,opt,name=type,proto3,enum=city.map.v2.LaneType" json:"type,omitempty" bson:"type" db:"type" yaml:"type"`
	// 车道转向
	// lane turn type
	Turn LaneTurn `protobuf:"varint,3,opt,name=turn,proto3,enum=city.map.v2.LaneTurn" json:"turn,omitempty" bson:"turn" db:"turn" yaml:"turn"`
	// 限速 (m/s)
	// max speed (m/s)
	MaxSpeed float64 `protobuf:"fixed64,4,opt,name=max_speed,json=maxSpeed,proto3" json:"max_speed,omitempty" bson:"max_speed" db:"max_speed" yaml:"max_speed"`
	// 中心线长度（单位：米）
	// centerline length (in meters)
	Length float64 `protobuf:"fixed64,5,opt,name=length,proto3" json:"length,omitempty" bson:"length" db:"length" yaml:"length"`
	// 车道宽度（单位：米）
	// lane width (in meters)
	Width float64 `protobuf:"fixed64,6,opt,name=width,proto3" json:"width,omitempty" bson:"width" db:"width" yaml:"width"`
	// 车道中心线（车辆/行车轨迹线）
	// Lane center line (vehicle/driving line)
	CenterLine *Polyline `protobuf:"bytes,7,opt,name=center_line,json=centerLine,proto3" json:"center_line,omitempty" bson:"center_line" db:"center_line" yaml:"center_line"`
	// 车道左边界线
	// Lane left boundary line
	//
	// Deprecated: Marked as deprecated in city/map/v2/map.proto.
	LeftBorderLine *Polyline `protobuf:"bytes,8,opt,name=left_border_line,json=leftBorderLine,proto3" json:"left_border_line,omitempty" bson:"left_border_line" db:"left_border_line" yaml:"left_border_line"` // 弃用 deprecated
	// 车道右边界线
	// Lane right boundary line
	//
	// Deprecated: Marked as deprecated in city/map/v2/map.proto.
	RightBorderLine *Polyline `protobuf:"bytes,9,opt,name=right_border_line,json=rightBorderLine,proto3" json:"right_border_line,omitempty" bson:"right_border_line" db:"right_border_line" yaml:"right_border_line"` // 弃用 deprecated
	// Lanes can drive / walk from
	// 对于Junction内的车道至多1个前驱
	// For lanes within junction, there is at most 1 predecessor
	// 对于LANE_TYPE_DRIVING，连接类型必为LANE_CONNECTION_TYPE_TAIL
	// For LANE_TYPE_DRIVING, the connection type must be LANE_CONNECTION_TYPE_TAIL
	// 对于LANE_TYPE_WALKING连接类型，两种都有可能
	// For LANE_TYPE_WALKING, both connection types are possible
	Predecessors []*LaneConnection `protobuf:"bytes,10,rep,name=predecessors,proto3" json:"predecessors,omitempty" bson:"predecessors" db:"predecessors" yaml:"predecessors"`
	// Lanes can drive / walk to
	// 对于Junction内的车道至多1个后继
	// For lanes within junction, there is at most 1 successor
	// 对于LANE_TYPE_DRIVING，连接类型必为LANE_CONNECTION_TYPE_HEAD
	// For LANE_TYPE_DRIVING, the connection type must be LANE_CONNECTION_TYPE_HEAD
	// 对于LANE_TYPE_WALKING连接类型，两种都有可能
	// For LANE_TYPE_WALKING, both connection types are possible
	Successors []*LaneConnection `protobuf:"bytes,11,rep,name=successors,proto3" json:"successors,omitempty" bson:"successors" db:"successors" yaml:"successors"`
	// 左侧相邻车道（按从近到远排列）
	// Adjacent lanes on the left (arranged from nearest to far)
	LeftLaneIds []int32 `protobuf:"varint,12,rep,packed,name=left_lane_ids,json=leftLaneIds,proto3" json:"left_lane_ids,omitempty" bson:"left_lane_ids" db:"left_lane_ids" yaml:"left_lane_ids"`
	// 右侧相邻车道（按从近到远排列）
	// Adjacent lanes on the right (arranged from nearest to far)
	RightLaneIds []int32 `protobuf:"varint,13,rep,packed,name=right_lane_ids,json=rightLaneIds,proto3" json:"right_lane_ids,omitempty" bson:"right_lane_ids" db:"right_lane_ids" yaml:"right_lane_ids"`
	// 所属的道路road id或路口junction id
	// The road id or junction id it belongs to
	ParentId int32 `protobuf:"varint,14,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty" bson:"parent_id" db:"parent_id" yaml:"parent_id"`
	// 车道之间的冲突点（仅在Junction内有效），保证按照self_s从小到大排序
	// Conflict points between lanes (valid only within Junction), guaranteed to be sorted from small to large according to self_s
	Overlaps []*LaneOverlap `protobuf:"bytes,15,rep,name=overlaps,proto3" json:"overlaps,omitempty" bson:"overlaps" db:"overlaps" yaml:"overlaps"`
	// 连接到该车道的所有AOI
	// All AOIs connected to this lane
	AoiIds        []int32 `protobuf:"varint,16,rep,packed,name=aoi_ids,json=aoiIds,proto3" json:"aoi_ids,omitempty" bson:"aoi_ids" db:"aoi_ids" yaml:"aoi_ids"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Lane) Reset() {
	*x = Lane{}
	mi := &file_city_map_v2_map_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Lane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lane) ProtoMessage() {}

func (x *Lane) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lane.ProtoReflect.Descriptor instead.
func (*Lane) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{4}
}

func (x *Lane) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Lane) GetType() LaneType {
	if x != nil {
		return x.Type
	}
	return LaneType_LANE_TYPE_UNSPECIFIED
}

func (x *Lane) GetTurn() LaneTurn {
	if x != nil {
		return x.Turn
	}
	return LaneTurn_LANE_TURN_UNSPECIFIED
}

func (x *Lane) GetMaxSpeed() float64 {
	if x != nil {
		return x.MaxSpeed
	}
	return 0
}

func (x *Lane) GetLength() float64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Lane) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Lane) GetCenterLine() *Polyline {
	if x != nil {
		return x.CenterLine
	}
	return nil
}

// Deprecated: Marked as deprecated in city/map/v2/map.proto.
func (x *Lane) GetLeftBorderLine() *Polyline {
	if x != nil {
		return x.LeftBorderLine
	}
	return nil
}

// Deprecated: Marked as deprecated in city/map/v2/map.proto.
func (x *Lane) GetRightBorderLine() *Polyline {
	if x != nil {
		return x.RightBorderLine
	}
	return nil
}

func (x *Lane) GetPredecessors() []*LaneConnection {
	if x != nil {
		return x.Predecessors
	}
	return nil
}

func (x *Lane) GetSuccessors() []*LaneConnection {
	if x != nil {
		return x.Successors
	}
	return nil
}

func (x *Lane) GetLeftLaneIds() []int32 {
	if x != nil {
		return x.LeftLaneIds
	}
	return nil
}

func (x *Lane) GetRightLaneIds() []int32 {
	if x != nil {
		return x.RightLaneIds
	}
	return nil
}

func (x *Lane) GetParentId() int32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Lane) GetOverlaps() []*LaneOverlap {
	if x != nil {
		return x.Overlaps
	}
	return nil
}

func (x *Lane) GetAoiIds() []int32 {
	if x != nil {
		return x.AoiIds
	}
	return nil
}

type NextRoadLane struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 下一条路的id
	// ID of the next road
	RoadId int32 `protobuf:"varint,1,opt,name=road_id,json=roadId,proto3" json:"road_id,omitempty" bson:"road_id" db:"road_id" yaml:"road_id"`
	// 我们假定能去往对应道路的车道id范围是连续的，用[a,b]表示
	// We assume that the range of lane IDs of the next road is continuous, represented by [a, b]
	LaneIdA       int32 `protobuf:"varint,2,opt,name=lane_id_a,json=laneIdA,proto3" json:"lane_id_a,omitempty" bson:"lane_id_a" db:"lane_id_a" yaml:"lane_id_a"`
	LaneIdB       int32 `protobuf:"varint,3,opt,name=lane_id_b,json=laneIdB,proto3" json:"lane_id_b,omitempty" bson:"lane_id_b" db:"lane_id_b" yaml:"lane_id_b"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NextRoadLane) Reset() {
	*x = NextRoadLane{}
	mi := &file_city_map_v2_map_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextRoadLane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextRoadLane) ProtoMessage() {}

func (x *NextRoadLane) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextRoadLane.ProtoReflect.Descriptor instead.
func (*NextRoadLane) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{5}
}

func (x *NextRoadLane) GetRoadId() int32 {
	if x != nil {
		return x.RoadId
	}
	return 0
}

func (x *NextRoadLane) GetLaneIdA() int32 {
	if x != nil {
		return x.LaneIdA
	}
	return 0
}

func (x *NextRoadLane) GetLaneIdB() int32 {
	if x != nil {
		return x.LaneIdB
	}
	return 0
}

type NextRoadLanePlan struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 记录去往目标next_road的可行lane集合
	// set of feasible lanes for going to the next_road
	NextRoadLanes []*NextRoadLane `protobuf:"bytes,1,rep,name=next_road_lanes,json=nextRoadLanes,proto3" json:"next_road_lanes,omitempty" bson:"next_road_lanes" db:"next_road_lanes" yaml:"next_road_lanes"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NextRoadLanePlan) Reset() {
	*x = NextRoadLanePlan{}
	mi := &file_city_map_v2_map_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NextRoadLanePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextRoadLanePlan) ProtoMessage() {}

func (x *NextRoadLanePlan) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextRoadLanePlan.ProtoReflect.Descriptor instead.
func (*NextRoadLanePlan) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{6}
}

func (x *NextRoadLanePlan) GetNextRoadLanes() []*NextRoadLane {
	if x != nil {
		return x.NextRoadLanes
	}
	return nil
}

// Road，用于描述道路
// Road, describing roads
type Road struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 道路id（从2_0000_0000开始）
	// Road ID (starting from 2_0000_0000)
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"id" db:"id" yaml:"id"`
	// 道路名字
	// road name
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" bson:"name" db:"name" yaml:"name"`
	// 属于该道路Road的所有车道/人行道等lane
	// All lanes/sidewalks belonging to the road
	// lane_id是按从最左侧车道到最右侧车道(从前进方向来看)的顺序给出的
	// lane_ids are given in order from the leftmost lane to the rightmost lane (viewed from the forward direction)
	LaneIds []int32 `protobuf:"varint,2,rep,packed,name=lane_ids,json=laneIds,proto3" json:"lane_ids,omitempty" bson:"lane_ids" db:"lane_ids" yaml:"lane_ids"`
	// 对于包含动态车道的道路，需要通过这一项来指定所有的候选方案
	// For roads containing dynamic lanes, this is required to specify all candidates
	NextRoadLanePlans []*NextRoadLanePlan `protobuf:"bytes,3,rep,name=next_road_lane_plans,json=nextRoadLanePlans,proto3" json:"next_road_lane_plans,omitempty" bson:"next_road_lane_plans" db:"next_road_lane_plans" yaml:"next_road_lane_plans"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Road) Reset() {
	*x = Road{}
	mi := &file_city_map_v2_map_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Road) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Road) ProtoMessage() {}

func (x *Road) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Road.ProtoReflect.Descriptor instead.
func (*Road) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{7}
}

func (x *Road) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Road) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Road) GetLaneIds() []int32 {
	if x != nil {
		return x.LaneIds
	}
	return nil
}

func (x *Road) GetNextRoadLanePlans() []*NextRoadLanePlan {
	if x != nil {
		return x.NextRoadLanePlans
	}
	return nil
}

// 车道组，用于描述路口内的车道组合
// Lane group, describing the combination of lanes within an intersection
// 具有相同入口道路和出口道路的车道组成一个车道组
// Lanes with the same entrance and exit roads form a lane group
// 车道组是信控处理、路口通行的基本单元
// Lane group is the basic unit for signal control and traffic in the junction.
type JunctionLaneGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 该车道组的入口道路
	// The entrance road to this lane group
	InRoadId int32 `protobuf:"varint,1,opt,name=in_road_id,json=inRoadId,proto3" json:"in_road_id,omitempty" bson:"in_road_id" db:"in_road_id" yaml:"in_road_id"`
	// 该车道组的入口角度（弧度制）
	// The entrance angle of this lane group (in radians)
	InAngle float64 `protobuf:"fixed64,2,opt,name=in_angle,json=inAngle,proto3" json:"in_angle,omitempty" bson:"in_angle" db:"in_angle" yaml:"in_angle"`
	// 该车道组的出口道路
	// The exit road for this lane group
	OutRoadId int32 `protobuf:"varint,3,opt,name=out_road_id,json=outRoadId,proto3" json:"out_road_id,omitempty" bson:"out_road_id" db:"out_road_id" yaml:"out_road_id"`
	// 该车道组的出口角度（弧度制）
	// The exit angle of this lane group (in radians)
	OutAngle float64 `protobuf:"fixed64,4,opt,name=out_angle,json=outAngle,proto3" json:"out_angle,omitempty" bson:"out_angle" db:"out_angle" yaml:"out_angle"`
	// 该车道组包含的车道
	// Lanes in the group
	LaneIds []int32 `protobuf:"varint,5,rep,packed,name=lane_ids,json=laneIds,proto3" json:"lane_ids,omitempty" bson:"lane_ids" db:"lane_ids" yaml:"lane_ids"`
	// 该车道组的转向属性
	// The turn type of this lane group
	Turn          LaneTurn `protobuf:"varint,6,opt,name=turn,proto3,enum=city.map.v2.LaneTurn" json:"turn,omitempty" bson:"turn" db:"turn" yaml:"turn"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JunctionLaneGroup) Reset() {
	*x = JunctionLaneGroup{}
	mi := &file_city_map_v2_map_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JunctionLaneGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JunctionLaneGroup) ProtoMessage() {}

func (x *JunctionLaneGroup) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JunctionLaneGroup.ProtoReflect.Descriptor instead.
func (*JunctionLaneGroup) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{8}
}

func (x *JunctionLaneGroup) GetInRoadId() int32 {
	if x != nil {
		return x.InRoadId
	}
	return 0
}

func (x *JunctionLaneGroup) GetInAngle() float64 {
	if x != nil {
		return x.InAngle
	}
	return 0
}

func (x *JunctionLaneGroup) GetOutRoadId() int32 {
	if x != nil {
		return x.OutRoadId
	}
	return 0
}

func (x *JunctionLaneGroup) GetOutAngle() float64 {
	if x != nil {
		return x.OutAngle
	}
	return 0
}

func (x *JunctionLaneGroup) GetLaneIds() []int32 {
	if x != nil {
		return x.LaneIds
	}
	return nil
}

func (x *JunctionLaneGroup) GetTurn() LaneTurn {
	if x != nil {
		return x.Turn
	}
	return LaneTurn_LANE_TURN_UNSPECIFIED
}

// Junction，用于描述路口
// Junction, describing road intersections
type Junction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 路口id（从3_0000_0000开始）
	// Junction id (starting from 3_0000_0000)
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"id" db:"id" yaml:"id"`
	// 属于该路口Junction的所有车道/人行道等lane
	// All driving/walking lanes belonging to this junction.
	LaneIds []int32 `protobuf:"varint,2,rep,packed,name=lane_ids,json=laneIds,proto3" json:"lane_ids,omitempty" bson:"lane_ids" db:"lane_ids" yaml:"lane_ids"`
	// 属于该路口Junction的所有行车车道组
	// All driving lane groups belonging to this junction
	DrivingLaneGroups []*JunctionLaneGroup `protobuf:"bytes,3,rep,name=driving_lane_groups,json=drivingLaneGroups,proto3" json:"driving_lane_groups,omitempty" bson:"driving_lane_groups" db:"driving_lane_groups" yaml:"driving_lane_groups"`
	// 所有可用信号灯相位
	// All available phases for max pressure algorithm
	Phases []*AvailablePhase `protobuf:"bytes,4,rep,name=phases,proto3" json:"phases,omitempty" bson:"phases" db:"phases" yaml:"phases"`
	// 默认固定相位信号灯
	// Default fixed phases traffic light
	FixedProgram  *TrafficLight `protobuf:"bytes,5,opt,name=fixed_program,json=fixedProgram,proto3,oneof" json:"fixed_program,omitempty" bson:"fixed_program" db:"fixed_program" yaml:"fixed_program"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Junction) Reset() {
	*x = Junction{}
	mi := &file_city_map_v2_map_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Junction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Junction) ProtoMessage() {}

func (x *Junction) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Junction.ProtoReflect.Descriptor instead.
func (*Junction) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{9}
}

func (x *Junction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Junction) GetLaneIds() []int32 {
	if x != nil {
		return x.LaneIds
	}
	return nil
}

func (x *Junction) GetDrivingLaneGroups() []*JunctionLaneGroup {
	if x != nil {
		return x.DrivingLaneGroups
	}
	return nil
}

func (x *Junction) GetPhases() []*AvailablePhase {
	if x != nil {
		return x.Phases
	}
	return nil
}

func (x *Junction) GetFixedProgram() *TrafficLight {
	if x != nil {
		return x.FixedProgram
	}
	return nil
}

type RoadIds struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RoadIds       []int32                `protobuf:"varint,1,rep,packed,name=road_ids,json=roadIds,proto3" json:"road_ids,omitempty" bson:"road_ids" db:"road_ids" yaml:"road_ids"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RoadIds) Reset() {
	*x = RoadIds{}
	mi := &file_city_map_v2_map_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoadIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoadIds) ProtoMessage() {}

func (x *RoadIds) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoadIds.ProtoReflect.Descriptor instead.
func (*RoadIds) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{10}
}

func (x *RoadIds) GetRoadIds() []int32 {
	if x != nil {
		return x.RoadIds
	}
	return nil
}

// 发车时刻表
// Subline departure schedule
type SublineSchedules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 始发站发车时间
	// Departure time from the departure station
	DepartureTimes []float64 `protobuf:"fixed64,1,rep,packed,name=departure_times,json=departureTimes,proto3" json:"departure_times,omitempty" bson:"departure_times" db:"departure_times" yaml:"departure_times"`
	// 到达沿途站点预计时间
	// Estimated time to arrive at stops along the way
	OffsetTimes   []float64 `protobuf:"fixed64,2,rep,packed,name=offset_times,json=offsetTimes,proto3" json:"offset_times,omitempty" bson:"offset_times" db:"offset_times" yaml:"offset_times"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SublineSchedules) Reset() {
	*x = SublineSchedules{}
	mi := &file_city_map_v2_map_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SublineSchedules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SublineSchedules) ProtoMessage() {}

func (x *SublineSchedules) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SublineSchedules.ProtoReflect.Descriptor instead.
func (*SublineSchedules) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{11}
}

func (x *SublineSchedules) GetDepartureTimes() []float64 {
	if x != nil {
		return x.DepartureTimes
	}
	return nil
}

func (x *SublineSchedules) GetOffsetTimes() []float64 {
	if x != nil {
		return x.OffsetTimes
	}
	return nil
}

// // 交通分析区，用于预计算公共交通权重
// // TAZ, used to precalculate public transport costs
//
//	message TransportationAnalysisZone{
//	  int32 x_id = 1;
//	  int32 y_id = 2;
//	  double x_minimum = 3;
//	  double x_maximum = 4;
//	  double y_minimum = 5;
//	  double y_maximum = 6;
//	}
//
// 预计算公共交通权重
// Precalculate public transport costs
type HeuristicTAZCost struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TazXId        int32                  `protobuf:"varint,1,opt,name=taz_x_id,json=tazXId,proto3" json:"taz_x_id,omitempty" bson:"taz_x_id" db:"taz_x_id" yaml:"taz_x_id"`
	TazYId        int32                  `protobuf:"varint,2,opt,name=taz_y_id,json=tazYId,proto3" json:"taz_y_id,omitempty" bson:"taz_y_id" db:"taz_y_id" yaml:"taz_y_id"`
	AoiId         int32                  `protobuf:"varint,3,opt,name=aoi_id,json=aoiId,proto3" json:"aoi_id,omitempty" bson:"aoi_id" db:"aoi_id" yaml:"aoi_id"`
	Cost          float64                `protobuf:"fixed64,4,opt,name=cost,proto3" json:"cost,omitempty" bson:"cost" db:"cost" yaml:"cost"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeuristicTAZCost) Reset() {
	*x = HeuristicTAZCost{}
	mi := &file_city_map_v2_map_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeuristicTAZCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeuristicTAZCost) ProtoMessage() {}

func (x *HeuristicTAZCost) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeuristicTAZCost.ProtoReflect.Descriptor instead.
func (*HeuristicTAZCost) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{12}
}

func (x *HeuristicTAZCost) GetTazXId() int32 {
	if x != nil {
		return x.TazXId
	}
	return 0
}

func (x *HeuristicTAZCost) GetTazYId() int32 {
	if x != nil {
		return x.TazYId
	}
	return 0
}

func (x *HeuristicTAZCost) GetAoiId() int32 {
	if x != nil {
		return x.AoiId
	}
	return 0
}

func (x *HeuristicTAZCost) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

// 公共交通支线 描述依附于行车路网的公共交通线路
// Public transport sub-lines, describe public transport routes attached to the road network
type PublicTransportSubline struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 支线ID
	// Subline ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"id" db:"id" yaml:"id"`
	// 支线名字
	// Subline name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" bson:"name" db:"name" yaml:"name"`
	// 该条支线沿途的所有车站AOI，按支线前进顺序排列
	// All stations along this subline, in the order of advancement of the subline."
	AoiIds []int32 `protobuf:"varint,3,rep,packed,name=aoi_ids,json=aoiIds,proto3" json:"aoi_ids,omitempty" bson:"aoi_ids" db:"aoi_ids" yaml:"aoi_ids"`
	// 依次连接两个相邻车站的road ids
	// Road IDs between two adjacent stations.
	StationConnectionRoadIds []*RoadIds `protobuf:"bytes,4,rep,name=station_connection_road_ids,json=stationConnectionRoadIds,proto3" json:"station_connection_road_ids,omitempty" bson:"station_connection_road_ids" db:"station_connection_road_ids" yaml:"station_connection_road_ids"`
	// 支线类型
	// Type of subline
	Type SublineType `protobuf:"varint,5,opt,name=type,proto3,enum=city.map.v2.SublineType" json:"type,omitempty" bson:"type" db:"type" yaml:"type"`
	// 所属线路名称
	// Name of the belonging line
	ParentName string `protobuf:"bytes,6,opt,name=parent_name,json=parentName,proto3" json:"parent_name,omitempty" bson:"parent_name" db:"parent_name" yaml:"parent_name"`
	// 发车时刻表
	// departure schedule
	Schedules *SublineSchedules `protobuf:"bytes,7,opt,name=schedules,proto3" json:"schedules,omitempty" bson:"schedules" db:"schedules" yaml:"schedules"`
	// 预计算公共交通权重
	// Precalculate public transport costs
	TazCosts      []*HeuristicTAZCost `protobuf:"bytes,8,rep,name=taz_costs,json=tazCosts,proto3" json:"taz_costs,omitempty" bson:"taz_costs" db:"taz_costs" yaml:"taz_costs"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublicTransportSubline) Reset() {
	*x = PublicTransportSubline{}
	mi := &file_city_map_v2_map_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicTransportSubline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicTransportSubline) ProtoMessage() {}

func (x *PublicTransportSubline) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicTransportSubline.ProtoReflect.Descriptor instead.
func (*PublicTransportSubline) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{13}
}

func (x *PublicTransportSubline) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PublicTransportSubline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicTransportSubline) GetAoiIds() []int32 {
	if x != nil {
		return x.AoiIds
	}
	return nil
}

func (x *PublicTransportSubline) GetStationConnectionRoadIds() []*RoadIds {
	if x != nil {
		return x.StationConnectionRoadIds
	}
	return nil
}

func (x *PublicTransportSubline) GetType() SublineType {
	if x != nil {
		return x.Type
	}
	return SublineType_SUBLINE_TYPE_UNSPECIFIED
}

func (x *PublicTransportSubline) GetParentName() string {
	if x != nil {
		return x.ParentName
	}
	return ""
}

func (x *PublicTransportSubline) GetSchedules() *SublineSchedules {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *PublicTransportSubline) GetTazCosts() []*HeuristicTAZCost {
	if x != nil {
		return x.TazCosts
	}
	return nil
}

// Aoi，用于描述地图上的区域
// Aoi, describing a region on the map
type Aoi struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Aoi ID（从5_0000_0000开始）
	// Aoi ID (starting from 5_0000_0000)
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"id" db:"id" yaml:"id"`
	// Aoi名字
	// Aoi name
	Name string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty" bson:"name" db:"name" yaml:"name"`
	// Aoi类型
	// Aoi type
	Type AoiType `protobuf:"varint,2,opt,name=type,proto3,enum=city.map.v2.AoiType" json:"type,omitempty" bson:"type" db:"type" yaml:"type"`
	// Aoi与行车路网的连接点
	// Connection point between Aoi and driving lanes
	DrivingPositions []*v2.LanePosition `protobuf:"bytes,3,rep,name=driving_positions,json=drivingPositions,proto3" json:"driving_positions,omitempty" bson:"driving_positions" db:"driving_positions" yaml:"driving_positions"`
	// Aoi与步行路网的连接点
	// Connection point between Aoi and walking lanes
	WalkingPositions []*v2.LanePosition `protobuf:"bytes,4,rep,name=walking_positions,json=walkingPositions,proto3" json:"walking_positions,omitempty" bson:"walking_positions" db:"walking_positions" yaml:"walking_positions"`
	// Aoi原始位置（如果只有一个值，则为Aoi所在的点，否则为Aoi多边形的边界）
	// Aoi original position (if there is only one value, it is the point where Aoi is located, otherwise it is the boundary of the Aoi polygon)
	Positions []*v2.XYPosition `protobuf:"bytes,5,rep,name=positions,proto3" json:"positions,omitempty" bson:"positions" db:"positions" yaml:"positions"`
	// Aoi与行车路网连接时在自身边界上的连接点, 与driving_positions按索引一一对应
	// The connection point on its own boundary when Aoi is connected to the driving lanes corresponds one-to-one with driving_positions by index.
	DrivingGates []*v2.XYPosition `protobuf:"bytes,6,rep,name=driving_gates,json=drivingGates,proto3" json:"driving_gates,omitempty" bson:"driving_gates" db:"driving_gates" yaml:"driving_gates"`
	// Aoi与步行路网连接时在自身边界上的连接点, 与walking_positions按索引一一对应
	// The connection point on its own boundary when Aoi is connected to the walking lanes corresponds one-to-one with walking_positions by index.
	WalkingGates []*v2.XYPosition `protobuf:"bytes,7,rep,name=walking_gates,json=walkingGates,proto3" json:"walking_gates,omitempty" bson:"walking_gates" db:"walking_gates" yaml:"walking_gates"`
	// Aoi面积, 若是Poi则无此字段
	// Aoi area, if it is Poi, there is no such field
	Area *float64 `protobuf:"fixed64,8,opt,name=area,proto3,oneof" json:"area,omitempty" bson:"area" db:"area" yaml:"area"`
	// 土地利用分类，若是Poi则无此字段
	// Land use type, if it is Poi, there is no such field
	//
	// Deprecated: Marked as deprecated in city/map/v2/map.proto.
	LandUse *LandUseType `protobuf:"varint,10,opt,name=land_use,json=landUse,proto3,enum=city.map.v2.LandUseType,oneof" json:"land_use,omitempty" bson:"land_use" db:"land_use" yaml:"land_use"` // 弃用 deprecated
	// 城市建设用地分类，参照执行标准GB 50137-2011（https://www.planning.org.cn/law/uploads/2013/1383993139.pdf）
	// Urban Land use type, refer to the national standard GB 50137-2011
	UrbanLandUse *string `protobuf:"bytes,12,opt,name=urban_land_use,json=urbanLandUse,proto3,oneof" json:"urban_land_use,omitempty" bson:"urban_land_use" db:"urban_land_use" yaml:"urban_land_use"`
	// Aoi包含的Poi
	// Pois contained in Aoi
	PoiIds        []int32 `protobuf:"varint,9,rep,packed,name=poi_ids,json=poiIds,proto3" json:"poi_ids,omitempty" bson:"poi_ids" db:"poi_ids" yaml:"poi_ids"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Aoi) Reset() {
	*x = Aoi{}
	mi := &file_city_map_v2_map_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Aoi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aoi) ProtoMessage() {}

func (x *Aoi) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aoi.ProtoReflect.Descriptor instead.
func (*Aoi) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{14}
}

func (x *Aoi) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Aoi) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Aoi) GetType() AoiType {
	if x != nil {
		return x.Type
	}
	return AoiType_AOI_TYPE_UNSPECIFIED
}

func (x *Aoi) GetDrivingPositions() []*v2.LanePosition {
	if x != nil {
		return x.DrivingPositions
	}
	return nil
}

func (x *Aoi) GetWalkingPositions() []*v2.LanePosition {
	if x != nil {
		return x.WalkingPositions
	}
	return nil
}

func (x *Aoi) GetPositions() []*v2.XYPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *Aoi) GetDrivingGates() []*v2.XYPosition {
	if x != nil {
		return x.DrivingGates
	}
	return nil
}

func (x *Aoi) GetWalkingGates() []*v2.XYPosition {
	if x != nil {
		return x.WalkingGates
	}
	return nil
}

func (x *Aoi) GetArea() float64 {
	if x != nil && x.Area != nil {
		return *x.Area
	}
	return 0
}

// Deprecated: Marked as deprecated in city/map/v2/map.proto.
func (x *Aoi) GetLandUse() LandUseType {
	if x != nil && x.LandUse != nil {
		return *x.LandUse
	}
	return LandUseType_LAND_USE_TYPE_UNSPECIFIED
}

func (x *Aoi) GetUrbanLandUse() string {
	if x != nil && x.UrbanLandUse != nil {
		return *x.UrbanLandUse
	}
	return ""
}

func (x *Aoi) GetPoiIds() []int32 {
	if x != nil {
		return x.PoiIds
	}
	return nil
}

// Poi，用于描述地图上的兴趣点
// Poi, describing points of interest on the map
type Poi struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Poi id(从7_0000_0000开始)
	// Poi id (starting from 7_0000_0000)
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"id" db:"id" yaml:"id"`
	// Poi名称
	// Poi name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" bson:"name" db:"name" yaml:"name"`
	// Poi分类编码
	// Poi category code
	Category string `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty" bson:"category" db:"category" yaml:"category"`
	// Poi原始位置
	// Poi original position
	Position *v2.XYPosition `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty" bson:"position" db:"position" yaml:"position"`
	// Poi所属的Aoi
	// Aoi to which the Poi belongs
	AoiId int32 `protobuf:"varint,5,opt,name=aoi_id,json=aoiId,proto3" json:"aoi_id,omitempty" bson:"aoi_id" db:"aoi_id" yaml:"aoi_id"`
	// Poi的容量（能同时容纳的人数），若无则表示无人数限制
	// The capacity of Poi (the number of people it can accommodate at the same time), if none, it means there is no limit on the number of people
	Capacity *int32 `protobuf:"varint,6,opt,name=capacity,proto3,oneof" json:"capacity,omitempty" bson:"capacity" db:"capacity" yaml:"capacity"`
	// Poi所能提供的功能
	// The functions the Poi can offer
	Functions     []string `protobuf:"bytes,7,rep,name=functions,proto3" json:"functions,omitempty" bson:"functions" db:"functions" yaml:"functions"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Poi) Reset() {
	*x = Poi{}
	mi := &file_city_map_v2_map_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Poi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poi) ProtoMessage() {}

func (x *Poi) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poi.ProtoReflect.Descriptor instead.
func (*Poi) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{15}
}

func (x *Poi) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Poi) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Poi) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Poi) GetPosition() *v2.XYPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Poi) GetAoiId() int32 {
	if x != nil {
		return x.AoiId
	}
	return 0
}

func (x *Poi) GetCapacity() int32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

func (x *Poi) GetFunctions() []string {
	if x != nil {
		return x.Functions
	}
	return nil
}

// 地图，对应一个地图pb文件或一个地图mongodb collection
// Map, corresponding to a map pb file or a map MongoDB collection
type Map struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Header        *Header                   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty" bson:"header" db:"header" yaml:"header"`
	Lanes         []*Lane                   `protobuf:"bytes,2,rep,name=lanes,proto3" json:"lanes,omitempty" bson:"lanes" db:"lanes" yaml:"lanes"`
	Roads         []*Road                   `protobuf:"bytes,3,rep,name=roads,proto3" json:"roads,omitempty" bson:"roads" db:"roads" yaml:"roads"`
	Junctions     []*Junction               `protobuf:"bytes,4,rep,name=junctions,proto3" json:"junctions,omitempty" bson:"junctions" db:"junctions" yaml:"junctions"`
	Aois          []*Aoi                    `protobuf:"bytes,5,rep,name=aois,proto3" json:"aois,omitempty" bson:"aois" db:"aois" yaml:"aois"`
	Pois          []*Poi                    `protobuf:"bytes,6,rep,name=pois,proto3" json:"pois,omitempty" bson:"pois" db:"pois" yaml:"pois"`
	Sublines      []*PublicTransportSubline `protobuf:"bytes,7,rep,name=sublines,proto3" json:"sublines,omitempty" bson:"sublines" db:"sublines" yaml:"sublines"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Map) Reset() {
	*x = Map{}
	mi := &file_city_map_v2_map_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_map_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_city_map_v2_map_proto_rawDescGZIP(), []int{16}
}

func (x *Map) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Map) GetLanes() []*Lane {
	if x != nil {
		return x.Lanes
	}
	return nil
}

func (x *Map) GetRoads() []*Road {
	if x != nil {
		return x.Roads
	}
	return nil
}

func (x *Map) GetJunctions() []*Junction {
	if x != nil {
		return x.Junctions
	}
	return nil
}

func (x *Map) GetAois() []*Aoi {
	if x != nil {
		return x.Aois
	}
	return nil
}

func (x *Map) GetPois() []*Poi {
	if x != nil {
		return x.Pois
	}
	return nil
}

func (x *Map) GetSublines() []*PublicTransportSubline {
	if x != nil {
		return x.Sublines
	}
	return nil
}

var File_city_map_v2_map_proto protoreflect.FileDescriptor

const file_city_map_v2_map_proto_rawDesc = "" +
	"\n" +
	"\x15city/map/v2/map.proto\x12\vcity.map.v2\x1a\x15city/geo/v2/geo.proto\x1a\x17city/map/v2/light.proto\"9\n" +
	"\bPolyline\x12-\n" +
	"\x05nodes\x18\x01 \x03(\v2\x17.city.geo.v2.XYPositionR\x05nodes\"\x88\x02\n" +
	"\x06Header\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04date\x18\x02 \x01(\tR\x04date\x12\x14\n" +
	"\x05north\x18\x03 \x01(\x01R\x05north\x12\x14\n" +
	"\x05south\x18\x04 \x01(\x01R\x05south\x12\x12\n" +
	"\x04east\x18\x05 \x01(\x01R\x04east\x12\x12\n" +
	"\x04west\x18\x06 \x01(\x01R\x04west\x12\x1e\n" +
	"\n" +
	"projection\x18\a \x01(\tR\n" +
	"projection\x12!\n" +
	"\n" +
	"taz_x_step\x18\b \x01(\x01H\x00R\btazXStep\x88\x01\x01\x12!\n" +
	"\n" +
	"taz_y_step\x18\t \x01(\x01H\x01R\btazYStep\x88\x01\x01B\r\n" +
	"\v_taz_x_stepB\r\n" +
	"\v_taz_y_step\"\x8c\x01\n" +
	"\vLaneOverlap\x12-\n" +
	"\x04self\x18\x01 \x01(\v2\x19.city.geo.v2.LanePositionR\x04self\x12/\n" +
	"\x05other\x18\x02 \x01(\v2\x19.city.geo.v2.LanePositionR\x05other\x12\x1d\n" +
	"\n" +
	"self_first\x18\x03 \x01(\bR\tselfFirst\"U\n" +
	"\x0eLaneConnection\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x123\n" +
	"\x04type\x18\x02 \x01(\x0e2\x1f.city.map.v2.LaneConnectionTypeR\x04type\"\xaf\x05\n" +
	"\x04Lane\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12)\n" +
	"\x04type\x18\x02 \x01(\x0e2\x15.city.map.v2.LaneTypeR\x04type\x12)\n" +
	"\x04turn\x18\x03 \x01(\x0e2\x15.city.map.v2.LaneTurnR\x04turn\x12\x1b\n" +
	"\tmax_speed\x18\x04 \x01(\x01R\bmaxSpeed\x12\x16\n" +
	"\x06length\x18\x05 \x01(\x01R\x06length\x12\x14\n" +
	"\x05width\x18\x06 \x01(\x01R\x05width\x126\n" +
	"\vcenter_line\x18\a \x01(\v2\x15.city.map.v2.PolylineR\n" +
	"centerLine\x12C\n" +
	"\x10left_border_line\x18\b \x01(\v2\x15.city.map.v2.PolylineB\x02\x18\x01R\x0eleftBorderLine\x12E\n" +
	"\x11right_border_line\x18\t \x01(\v2\x15.city.map.v2.PolylineB\x02\x18\x01R\x0frightBorderLine\x12?\n" +
	"\fpredecessors\x18\n" +
	" \x03(\v2\x1b.city.map.v2.LaneConnectionR\fpredecessors\x12;\n" +
	"\n" +
	"successors\x18\v \x03(\v2\x1b.city.map.v2.LaneConnectionR\n" +
	"successors\x12\"\n" +
	"\rleft_lane_ids\x18\f \x03(\x05R\vleftLaneIds\x12$\n" +
	"\x0eright_lane_ids\x18\r \x03(\x05R\frightLaneIds\x12\x1b\n" +
	"\tparent_id\x18\x0e \x01(\x05R\bparentId\x124\n" +
	"\boverlaps\x18\x0f \x03(\v2\x18.city.map.v2.LaneOverlapR\boverlaps\x12\x17\n" +
	"\aaoi_ids\x18\x10 \x03(\x05R\x06aoiIds\"_\n" +
	"\fNextRoadLane\x12\x17\n" +
	"\aroad_id\x18\x01 \x01(\x05R\x06roadId\x12\x1a\n" +
	"\tlane_id_a\x18\x02 \x01(\x05R\alaneIdA\x12\x1a\n" +
	"\tlane_id_b\x18\x03 \x01(\x05R\alaneIdB\"U\n" +
	"\x10NextRoadLanePlan\x12A\n" +
	"\x0fnext_road_lanes\x18\x01 \x03(\v2\x19.city.map.v2.NextRoadLaneR\rnextRoadLanes\"\x95\x01\n" +
	"\x04Road\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x19\n" +
	"\blane_ids\x18\x02 \x03(\x05R\alaneIds\x12N\n" +
	"\x14next_road_lane_plans\x18\x03 \x03(\v2\x1d.city.map.v2.NextRoadLanePlanR\x11nextRoadLanePlans\"\xcf\x01\n" +
	"\x11JunctionLaneGroup\x12\x1c\n" +
	"\n" +
	"in_road_id\x18\x01 \x01(\x05R\binRoadId\x12\x19\n" +
	"\bin_angle\x18\x02 \x01(\x01R\ainAngle\x12\x1e\n" +
	"\vout_road_id\x18\x03 \x01(\x05R\toutRoadId\x12\x1b\n" +
	"\tout_angle\x18\x04 \x01(\x01R\boutAngle\x12\x19\n" +
	"\blane_ids\x18\x05 \x03(\x05R\alaneIds\x12)\n" +
	"\x04turn\x18\x06 \x01(\x0e2\x15.city.map.v2.LaneTurnR\x04turn\"\x91\x02\n" +
	"\bJunction\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x19\n" +
	"\blane_ids\x18\x02 \x03(\x05R\alaneIds\x12N\n" +
	"\x13driving_lane_groups\x18\x03 \x03(\v2\x1e.city.map.v2.JunctionLaneGroupR\x11drivingLaneGroups\x123\n" +
	"\x06phases\x18\x04 \x03(\v2\x1b.city.map.v2.AvailablePhaseR\x06phases\x12C\n" +
	"\rfixed_program\x18\x05 \x01(\v2\x19.city.map.v2.TrafficLightH\x00R\ffixedProgram\x88\x01\x01B\x10\n" +
	"\x0e_fixed_program\"$\n" +
	"\aRoadIds\x12\x19\n" +
	"\broad_ids\x18\x01 \x03(\x05R\aroadIds\"^\n" +
	"\x10SublineSchedules\x12'\n" +
	"\x0fdeparture_times\x18\x01 \x03(\x01R\x0edepartureTimes\x12!\n" +
	"\foffset_times\x18\x02 \x03(\x01R\voffsetTimes\"q\n" +
	"\x10HeuristicTAZCost\x12\x18\n" +
	"\btaz_x_id\x18\x01 \x01(\x05R\x06tazXId\x12\x18\n" +
	"\btaz_y_id\x18\x02 \x01(\x05R\x06tazYId\x12\x15\n" +
	"\x06aoi_id\x18\x03 \x01(\x05R\x05aoiId\x12\x12\n" +
	"\x04cost\x18\x04 \x01(\x01R\x04cost\"\xf2\x02\n" +
	"\x16PublicTransportSubline\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x17\n" +
	"\aaoi_ids\x18\x03 \x03(\x05R\x06aoiIds\x12S\n" +
	"\x1bstation_connection_road_ids\x18\x04 \x03(\v2\x14.city.map.v2.RoadIdsR\x18stationConnectionRoadIds\x12,\n" +
	"\x04type\x18\x05 \x01(\x0e2\x18.city.map.v2.SublineTypeR\x04type\x12\x1f\n" +
	"\vparent_name\x18\x06 \x01(\tR\n" +
	"parentName\x12;\n" +
	"\tschedules\x18\a \x01(\v2\x1d.city.map.v2.SublineSchedulesR\tschedules\x12:\n" +
	"\ttaz_costs\x18\b \x03(\v2\x1d.city.map.v2.HeuristicTAZCostR\btazCosts\"\xda\x04\n" +
	"\x03Aoi\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\v \x01(\tR\x04name\x12(\n" +
	"\x04type\x18\x02 \x01(\x0e2\x14.city.map.v2.AoiTypeR\x04type\x12F\n" +
	"\x11driving_positions\x18\x03 \x03(\v2\x19.city.geo.v2.LanePositionR\x10drivingPositions\x12F\n" +
	"\x11walking_positions\x18\x04 \x03(\v2\x19.city.geo.v2.LanePositionR\x10walkingPositions\x125\n" +
	"\tpositions\x18\x05 \x03(\v2\x17.city.geo.v2.XYPositionR\tpositions\x12<\n" +
	"\rdriving_gates\x18\x06 \x03(\v2\x17.city.geo.v2.XYPositionR\fdrivingGates\x12<\n" +
	"\rwalking_gates\x18\a \x03(\v2\x17.city.geo.v2.XYPositionR\fwalkingGates\x12\x17\n" +
	"\x04area\x18\b \x01(\x01H\x00R\x04area\x88\x01\x01\x12<\n" +
	"\bland_use\x18\n" +
	" \x01(\x0e2\x18.city.map.v2.LandUseTypeB\x02\x18\x01H\x01R\alandUse\x88\x01\x01\x12)\n" +
	"\x0eurban_land_use\x18\f \x01(\tH\x02R\furbanLandUse\x88\x01\x01\x12\x17\n" +
	"\apoi_ids\x18\t \x03(\x05R\x06poiIdsB\a\n" +
	"\x05_areaB\v\n" +
	"\t_land_useB\x11\n" +
	"\x0f_urban_land_use\"\xdd\x01\n" +
	"\x03Poi\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\bcategory\x18\x03 \x01(\tR\bcategory\x123\n" +
	"\bposition\x18\x04 \x01(\v2\x17.city.geo.v2.XYPositionR\bposition\x12\x15\n" +
	"\x06aoi_id\x18\x05 \x01(\x05R\x05aoiId\x12\x1f\n" +
	"\bcapacity\x18\x06 \x01(\x05H\x00R\bcapacity\x88\x01\x01\x12\x1c\n" +
	"\tfunctions\x18\a \x03(\tR\tfunctionsB\v\n" +
	"\t_capacity\"\xc6\x02\n" +
	"\x03Map\x12+\n" +
	"\x06header\x18\x01 \x01(\v2\x13.city.map.v2.HeaderR\x06header\x12'\n" +
	"\x05lanes\x18\x02 \x03(\v2\x11.city.map.v2.LaneR\x05lanes\x12'\n" +
	"\x05roads\x18\x03 \x03(\v2\x11.city.map.v2.RoadR\x05roads\x123\n" +
	"\tjunctions\x18\x04 \x03(\v2\x15.city.map.v2.JunctionR\tjunctions\x12$\n" +
	"\x04aois\x18\x05 \x03(\v2\x10.city.map.v2.AoiR\x04aois\x12$\n" +
	"\x04pois\x18\x06 \x03(\v2\x10.city.map.v2.PoiR\x04pois\x12?\n" +
	"\bsublines\x18\a \x03(\v2#.city.map.v2.PublicTransportSublineR\bsublines*o\n" +
	"\bLaneType\x12\x19\n" +
	"\x15LANE_TYPE_UNSPECIFIED\x10\x00\x12\x15\n" +
	"\x11LANE_TYPE_DRIVING\x10\x01\x12\x15\n" +
	"\x11LANE_TYPE_WALKING\x10\x02\x12\x1a\n" +
	"\x16LANE_TYPE_RAIL_TRANSIT\x10\x03*|\n" +
	"\bLaneTurn\x12\x19\n" +
	"\x15LANE_TURN_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12LANE_TURN_STRAIGHT\x10\x01\x12\x12\n" +
	"\x0eLANE_TURN_LEFT\x10\x02\x12\x13\n" +
	"\x0fLANE_TURN_RIGHT\x10\x03\x12\x14\n" +
	"\x10LANE_TURN_AROUND\x10\x04*x\n" +
	"\x12LaneConnectionType\x12$\n" +
	" LANE_CONNECTION_TYPE_UNSPECIFIED\x10\x00\x12\x1d\n" +
	"\x19LANE_CONNECTION_TYPE_HEAD\x10\x01\x12\x1d\n" +
	"\x19LANE_CONNECTION_TYPE_TAIL\x10\x02*Q\n" +
	"\aAoiType\x12\x18\n" +
	"\x14AOI_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14AOI_TYPE_BUS_STATION\x10\x01\x12\x12\n" +
	"\x0eAOI_TYPE_OTHER\x10\x02*\xdc\x01\n" +
	"\vLandUseType\x12\x1d\n" +
	"\x19LAND_USE_TYPE_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18LAND_USE_TYPE_COMMERCIAL\x10\x05\x12\x1c\n" +
	"\x18LAND_USE_TYPE_INDUSTRIAL\x10\x06\x12\x1d\n" +
	"\x19LAND_USE_TYPE_RESIDENTIAL\x10\a\x12\x18\n" +
	"\x14LAND_USE_TYPE_PUBLIC\x10\b\x12 \n" +
	"\x1cLAND_USE_TYPE_TRANSPORTATION\x10\n" +
	"\x12\x17\n" +
	"\x13LAND_USE_TYPE_OTHER\x10\f*Z\n" +
	"\vSublineType\x12\x1c\n" +
	"\x18SUBLINE_TYPE_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10SUBLINE_TYPE_BUS\x10\x01\x12\x17\n" +
	"\x13SUBLINE_TYPE_SUBWAY\x10\x02B\x9c\x01\n" +
	"\x0fcom.city.map.v2B\bMapProtoP\x01Z1git.fiblab.net/sim/protos/v2/go/city/map/v2;mapv2\xa2\x02\x03CMX\xaa\x02\vCity.Map.V2\xca\x02\vCity\\Map\\V2\xe2\x02\x17City\\Map\\V2\\GPBMetadata\xea\x02\rCity::Map::V2b\x06proto3"

var (
	file_city_map_v2_map_proto_rawDescOnce sync.Once
	file_city_map_v2_map_proto_rawDescData []byte
)

func file_city_map_v2_map_proto_rawDescGZIP() []byte {
	file_city_map_v2_map_proto_rawDescOnce.Do(func() {
		file_city_map_v2_map_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_city_map_v2_map_proto_rawDesc), len(file_city_map_v2_map_proto_rawDesc)))
	})
	return file_city_map_v2_map_proto_rawDescData
}

var file_city_map_v2_map_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_city_map_v2_map_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_city_map_v2_map_proto_goTypes = []any{
	(LaneType)(0),                  // 0: city.map.v2.LaneType
	(LaneTurn)(0),                  // 1: city.map.v2.LaneTurn
	(LaneConnectionType)(0),        // 2: city.map.v2.LaneConnectionType
	(AoiType)(0),                   // 3: city.map.v2.AoiType
	(LandUseType)(0),               // 4: city.map.v2.LandUseType
	(SublineType)(0),               // 5: city.map.v2.SublineType
	(*Polyline)(nil),               // 6: city.map.v2.Polyline
	(*Header)(nil),                 // 7: city.map.v2.Header
	(*LaneOverlap)(nil),            // 8: city.map.v2.LaneOverlap
	(*LaneConnection)(nil),         // 9: city.map.v2.LaneConnection
	(*Lane)(nil),                   // 10: city.map.v2.Lane
	(*NextRoadLane)(nil),           // 11: city.map.v2.NextRoadLane
	(*NextRoadLanePlan)(nil),       // 12: city.map.v2.NextRoadLanePlan
	(*Road)(nil),                   // 13: city.map.v2.Road
	(*JunctionLaneGroup)(nil),      // 14: city.map.v2.JunctionLaneGroup
	(*Junction)(nil),               // 15: city.map.v2.Junction
	(*RoadIds)(nil),                // 16: city.map.v2.RoadIds
	(*SublineSchedules)(nil),       // 17: city.map.v2.SublineSchedules
	(*HeuristicTAZCost)(nil),       // 18: city.map.v2.HeuristicTAZCost
	(*PublicTransportSubline)(nil), // 19: city.map.v2.PublicTransportSubline
	(*Aoi)(nil),                    // 20: city.map.v2.Aoi
	(*Poi)(nil),                    // 21: city.map.v2.Poi
	(*Map)(nil),                    // 22: city.map.v2.Map
	(*v2.XYPosition)(nil),          // 23: city.geo.v2.XYPosition
	(*v2.LanePosition)(nil),        // 24: city.geo.v2.LanePosition
	(*AvailablePhase)(nil),         // 25: city.map.v2.AvailablePhase
	(*TrafficLight)(nil),           // 26: city.map.v2.TrafficLight
}
var file_city_map_v2_map_proto_depIdxs = []int32{
	23, // 0: city.map.v2.Polyline.nodes:type_name -> city.geo.v2.XYPosition
	24, // 1: city.map.v2.LaneOverlap.self:type_name -> city.geo.v2.LanePosition
	24, // 2: city.map.v2.LaneOverlap.other:type_name -> city.geo.v2.LanePosition
	2,  // 3: city.map.v2.LaneConnection.type:type_name -> city.map.v2.LaneConnectionType
	0,  // 4: city.map.v2.Lane.type:type_name -> city.map.v2.LaneType
	1,  // 5: city.map.v2.Lane.turn:type_name -> city.map.v2.LaneTurn
	6,  // 6: city.map.v2.Lane.center_line:type_name -> city.map.v2.Polyline
	6,  // 7: city.map.v2.Lane.left_border_line:type_name -> city.map.v2.Polyline
	6,  // 8: city.map.v2.Lane.right_border_line:type_name -> city.map.v2.Polyline
	9,  // 9: city.map.v2.Lane.predecessors:type_name -> city.map.v2.LaneConnection
	9,  // 10: city.map.v2.Lane.successors:type_name -> city.map.v2.LaneConnection
	8,  // 11: city.map.v2.Lane.overlaps:type_name -> city.map.v2.LaneOverlap
	11, // 12: city.map.v2.NextRoadLanePlan.next_road_lanes:type_name -> city.map.v2.NextRoadLane
	12, // 13: city.map.v2.Road.next_road_lane_plans:type_name -> city.map.v2.NextRoadLanePlan
	1,  // 14: city.map.v2.JunctionLaneGroup.turn:type_name -> city.map.v2.LaneTurn
	14, // 15: city.map.v2.Junction.driving_lane_groups:type_name -> city.map.v2.JunctionLaneGroup
	25, // 16: city.map.v2.Junction.phases:type_name -> city.map.v2.AvailablePhase
	26, // 17: city.map.v2.Junction.fixed_program:type_name -> city.map.v2.TrafficLight
	16, // 18: city.map.v2.PublicTransportSubline.station_connection_road_ids:type_name -> city.map.v2.RoadIds
	5,  // 19: city.map.v2.PublicTransportSubline.type:type_name -> city.map.v2.SublineType
	17, // 20: city.map.v2.PublicTransportSubline.schedules:type_name -> city.map.v2.SublineSchedules
	18, // 21: city.map.v2.PublicTransportSubline.taz_costs:type_name -> city.map.v2.HeuristicTAZCost
	3,  // 22: city.map.v2.Aoi.type:type_name -> city.map.v2.AoiType
	24, // 23: city.map.v2.Aoi.driving_positions:type_name -> city.geo.v2.LanePosition
	24, // 24: city.map.v2.Aoi.walking_positions:type_name -> city.geo.v2.LanePosition
	23, // 25: city.map.v2.Aoi.positions:type_name -> city.geo.v2.XYPosition
	23, // 26: city.map.v2.Aoi.driving_gates:type_name -> city.geo.v2.XYPosition
	23, // 27: city.map.v2.Aoi.walking_gates:type_name -> city.geo.v2.XYPosition
	4,  // 28: city.map.v2.Aoi.land_use:type_name -> city.map.v2.LandUseType
	23, // 29: city.map.v2.Poi.position:type_name -> city.geo.v2.XYPosition
	7,  // 30: city.map.v2.Map.header:type_name -> city.map.v2.Header
	10, // 31: city.map.v2.Map.lanes:type_name -> city.map.v2.Lane
	13, // 32: city.map.v2.Map.roads:type_name -> city.map.v2.Road
	15, // 33: city.map.v2.Map.junctions:type_name -> city.map.v2.Junction
	20, // 34: city.map.v2.Map.aois:type_name -> city.map.v2.Aoi
	21, // 35: city.map.v2.Map.pois:type_name -> city.map.v2.Poi
	19, // 36: city.map.v2.Map.sublines:type_name -> city.map.v2.PublicTransportSubline
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_city_map_v2_map_proto_init() }
func file_city_map_v2_map_proto_init() {
	if File_city_map_v2_map_proto != nil {
		return
	}
	file_city_map_v2_light_proto_init()
	file_city_map_v2_map_proto_msgTypes[1].OneofWrappers = []any{}
	file_city_map_v2_map_proto_msgTypes[9].OneofWrappers = []any{}
	file_city_map_v2_map_proto_msgTypes[14].OneofWrappers = []any{}
	file_city_map_v2_map_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_city_map_v2_map_proto_rawDesc), len(file_city_map_v2_map_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_city_map_v2_map_proto_goTypes,
		DependencyIndexes: file_city_map_v2_map_proto_depIdxs,
		EnumInfos:         file_city_map_v2_map_proto_enumTypes,
		MessageInfos:      file_city_map_v2_map_proto_msgTypes,
	}.Build()
	File_city_map_v2_map_proto = out.File
	file_city_map_v2_map_proto_goTypes = nil
	file_city_map_v2_map_proto_depIdxs = nil
}
