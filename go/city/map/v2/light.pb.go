// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: city/map/v2/light.proto

package mapv2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 交通灯的状态
// traffic light state
type LightState int32

const (
	// 未指定
	// unspecified
	LightState_LIGHT_STATE_UNSPECIFIED LightState = 0
	// 红灯
	// red light
	LightState_LIGHT_STATE_RED LightState = 1
	// 绿灯
	// green light
	LightState_LIGHT_STATE_GREEN LightState = 2
	// 黄灯
	// yellow light
	LightState_LIGHT_STATE_YELLOW LightState = 3
)

// Enum value maps for LightState.
var (
	LightState_name = map[int32]string{
		0: "LIGHT_STATE_UNSPECIFIED",
		1: "LIGHT_STATE_RED",
		2: "LIGHT_STATE_GREEN",
		3: "LIGHT_STATE_YELLOW",
	}
	LightState_value = map[string]int32{
		"LIGHT_STATE_UNSPECIFIED": 0,
		"LIGHT_STATE_RED":         1,
		"LIGHT_STATE_GREEN":       2,
		"LIGHT_STATE_YELLOW":      3,
	}
)

func (x LightState) Enum() *LightState {
	p := new(LightState)
	*p = x
	return p
}

func (x LightState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LightState) Descriptor() protoreflect.EnumDescriptor {
	return file_city_map_v2_light_proto_enumTypes[0].Descriptor()
}

func (LightState) Type() protoreflect.EnumType {
	return &file_city_map_v2_light_proto_enumTypes[0]
}

func (x LightState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LightState.Descriptor instead.
func (LightState) EnumDescriptor() ([]byte, []int) {
	return file_city_map_v2_light_proto_rawDescGZIP(), []int{0}
}

// 交通灯相位
// traffic light phase
type Phase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 相位持续时间，单位秒
	// Phase duration in seconds
	Duration float64 `protobuf:"fixed64,1,opt,name=duration,proto3" json:"duration,omitempty" bson:"duration" db:"duration" yaml:"duration"`
	// 描述该相位下每个lane的灯控情况，lane与Junction.lane_ids一一对应
	// The lighting control situation of each lane in this phase, and the lane
	// corresponds one-to-one with junction.lane_ids
	States        []LightState `protobuf:"varint,2,rep,packed,name=states,proto3,enum=city.map.v2.LightState" json:"states,omitempty" bson:"states" db:"states" yaml:"states"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Phase) Reset() {
	*x = Phase{}
	mi := &file_city_map_v2_light_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Phase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Phase) ProtoMessage() {}

func (x *Phase) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_light_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Phase.ProtoReflect.Descriptor instead.
func (*Phase) Descriptor() ([]byte, []int) {
	return file_city_map_v2_light_proto_rawDescGZIP(), []int{0}
}

func (x *Phase) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Phase) GetStates() []LightState {
	if x != nil {
		return x.States
	}
	return nil
}

type AvailablePhase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 描述最大压力信控的可行相位，由每个lane的灯控情况组成，lane与Junction.lane_ids一一对应
	// Describes the feasible phase for max pressure algorithm, consisting of the
	// lighting control situation for each lane in the junction, nd the lane
	// corresponds one-to-one with junction.lane_ids
	States        []LightState `protobuf:"varint,1,rep,packed,name=states,proto3,enum=city.map.v2.LightState" json:"states,omitempty" bson:"states" db:"states" yaml:"states"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AvailablePhase) Reset() {
	*x = AvailablePhase{}
	mi := &file_city_map_v2_light_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvailablePhase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailablePhase) ProtoMessage() {}

func (x *AvailablePhase) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_light_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailablePhase.ProtoReflect.Descriptor instead.
func (*AvailablePhase) Descriptor() ([]byte, []int) {
	return file_city_map_v2_light_proto_rawDescGZIP(), []int{1}
}

func (x *AvailablePhase) GetStates() []LightState {
	if x != nil {
		return x.States
	}
	return nil
}

// 交通灯
// traffic light
type TrafficLight struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 所在路口id
	// ID of the junction where the traffic light is at
	JunctionId int32 `protobuf:"varint,1,opt,name=junction_id,json=junctionId,proto3" json:"junction_id,omitempty" bson:"junction_id" db:"junction_id" yaml:"junction_id"`
	// 相位循环的一个循环周期
	// One cycle of phase cycling
	Phases        []*Phase `protobuf:"bytes,2,rep,name=phases,proto3" json:"phases,omitempty" bson:"phases" db:"phases" yaml:"phases"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrafficLight) Reset() {
	*x = TrafficLight{}
	mi := &file_city_map_v2_light_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrafficLight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficLight) ProtoMessage() {}

func (x *TrafficLight) ProtoReflect() protoreflect.Message {
	mi := &file_city_map_v2_light_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficLight.ProtoReflect.Descriptor instead.
func (*TrafficLight) Descriptor() ([]byte, []int) {
	return file_city_map_v2_light_proto_rawDescGZIP(), []int{2}
}

func (x *TrafficLight) GetJunctionId() int32 {
	if x != nil {
		return x.JunctionId
	}
	return 0
}

func (x *TrafficLight) GetPhases() []*Phase {
	if x != nil {
		return x.Phases
	}
	return nil
}

var File_city_map_v2_light_proto protoreflect.FileDescriptor

const file_city_map_v2_light_proto_rawDesc = "" +
	"\n" +
	"\x17city/map/v2/light.proto\x12\vcity.map.v2\"T\n" +
	"\x05Phase\x12\x1a\n" +
	"\bduration\x18\x01 \x01(\x01R\bduration\x12/\n" +
	"\x06states\x18\x02 \x03(\x0e2\x17.city.map.v2.LightStateR\x06states\"A\n" +
	"\x0eAvailablePhase\x12/\n" +
	"\x06states\x18\x01 \x03(\x0e2\x17.city.map.v2.LightStateR\x06states\"[\n" +
	"\fTrafficLight\x12\x1f\n" +
	"\vjunction_id\x18\x01 \x01(\x05R\n" +
	"junctionId\x12*\n" +
	"\x06phases\x18\x02 \x03(\v2\x12.city.map.v2.PhaseR\x06phases*m\n" +
	"\n" +
	"LightState\x12\x1b\n" +
	"\x17LIGHT_STATE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fLIGHT_STATE_RED\x10\x01\x12\x15\n" +
	"\x11LIGHT_STATE_GREEN\x10\x02\x12\x16\n" +
	"\x12LIGHT_STATE_YELLOW\x10\x03B\x9e\x01\n" +
	"\x0fcom.city.map.v2B\n" +
	"LightProtoP\x01Z1git.fiblab.net/sim/protos/v2/go/city/map/v2;mapv2\xa2\x02\x03CMX\xaa\x02\vCity.Map.V2\xca\x02\vCity\\Map\\V2\xe2\x02\x17City\\Map\\V2\\GPBMetadata\xea\x02\rCity::Map::V2b\x06proto3"

var (
	file_city_map_v2_light_proto_rawDescOnce sync.Once
	file_city_map_v2_light_proto_rawDescData []byte
)

func file_city_map_v2_light_proto_rawDescGZIP() []byte {
	file_city_map_v2_light_proto_rawDescOnce.Do(func() {
		file_city_map_v2_light_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_city_map_v2_light_proto_rawDesc), len(file_city_map_v2_light_proto_rawDesc)))
	})
	return file_city_map_v2_light_proto_rawDescData
}

var file_city_map_v2_light_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_city_map_v2_light_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_city_map_v2_light_proto_goTypes = []any{
	(LightState)(0),        // 0: city.map.v2.LightState
	(*Phase)(nil),          // 1: city.map.v2.Phase
	(*AvailablePhase)(nil), // 2: city.map.v2.AvailablePhase
	(*TrafficLight)(nil),   // 3: city.map.v2.TrafficLight
}
var file_city_map_v2_light_proto_depIdxs = []int32{
	0, // 0: city.map.v2.Phase.states:type_name -> city.map.v2.LightState
	0, // 1: city.map.v2.AvailablePhase.states:type_name -> city.map.v2.LightState
	1, // 2: city.map.v2.TrafficLight.phases:type_name -> city.map.v2.Phase
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_city_map_v2_light_proto_init() }
func file_city_map_v2_light_proto_init() {
	if File_city_map_v2_light_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_city_map_v2_light_proto_rawDesc), len(file_city_map_v2_light_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_city_map_v2_light_proto_goTypes,
		DependencyIndexes: file_city_map_v2_light_proto_depIdxs,
		EnumInfos:         file_city_map_v2_light_proto_enumTypes,
		MessageInfos:      file_city_map_v2_light_proto_msgTypes,
	}.Build()
	File_city_map_v2_light_proto = out.File
	file_city_map_v2_light_proto_goTypes = nil
	file_city_map_v2_light_proto_depIdxs = nil
}
