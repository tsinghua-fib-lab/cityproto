// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/wargame/v1/wargame_service.proto

package wargamev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "git.fiblab.net/sim/protos/go/city/wargame/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WarGameServiceName is the fully-qualified name of the WarGameService service.
	WarGameServiceName = "city.wargame.v1.WarGameService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WarGameServicePickPointsProcedure is the fully-qualified name of the WarGameService's PickPoints
	// RPC.
	WarGameServicePickPointsProcedure = "/city.wargame.v1.WarGameService/PickPoints"
	// WarGameServiceGetPickPointsProcedure is the fully-qualified name of the WarGameService's
	// GetPickPoints RPC.
	WarGameServiceGetPickPointsProcedure = "/city.wargame.v1.WarGameService/GetPickPoints"
	// WarGameServiceGiveDefenseOrderProcedure is the fully-qualified name of the WarGameService's
	// GiveDefenseOrder RPC.
	WarGameServiceGiveDefenseOrderProcedure = "/city.wargame.v1.WarGameService/GiveDefenseOrder"
	// WarGameServiceSetScoreWeightProcedure is the fully-qualified name of the WarGameService's
	// SetScoreWeight RPC.
	WarGameServiceSetScoreWeightProcedure = "/city.wargame.v1.WarGameService/SetScoreWeight"
	// WarGameServiceGetHitHistoryProcedure is the fully-qualified name of the WarGameService's
	// GetHitHistory RPC.
	WarGameServiceGetHitHistoryProcedure = "/city.wargame.v1.WarGameService/GetHitHistory"
	// WarGameServiceGetRecoPointsProcedure is the fully-qualified name of the WarGameService's
	// GetRecoPoints RPC.
	WarGameServiceGetRecoPointsProcedure = "/city.wargame.v1.WarGameService/GetRecoPoints"
	// WarGameServiceGetStepProcedure is the fully-qualified name of the WarGameService's GetStep RPC.
	WarGameServiceGetStepProcedure = "/city.wargame.v1.WarGameService/GetStep"
	// WarGameServiceGetCasualtiesProcedure is the fully-qualified name of the WarGameService's
	// GetCasualties RPC.
	WarGameServiceGetCasualtiesProcedure = "/city.wargame.v1.WarGameService/GetCasualties"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	warGameServiceServiceDescriptor                = v1.File_city_wargame_v1_wargame_service_proto.Services().ByName("WarGameService")
	warGameServicePickPointsMethodDescriptor       = warGameServiceServiceDescriptor.Methods().ByName("PickPoints")
	warGameServiceGetPickPointsMethodDescriptor    = warGameServiceServiceDescriptor.Methods().ByName("GetPickPoints")
	warGameServiceGiveDefenseOrderMethodDescriptor = warGameServiceServiceDescriptor.Methods().ByName("GiveDefenseOrder")
	warGameServiceSetScoreWeightMethodDescriptor   = warGameServiceServiceDescriptor.Methods().ByName("SetScoreWeight")
	warGameServiceGetHitHistoryMethodDescriptor    = warGameServiceServiceDescriptor.Methods().ByName("GetHitHistory")
	warGameServiceGetRecoPointsMethodDescriptor    = warGameServiceServiceDescriptor.Methods().ByName("GetRecoPoints")
	warGameServiceGetStepMethodDescriptor          = warGameServiceServiceDescriptor.Methods().ByName("GetStep")
	warGameServiceGetCasualtiesMethodDescriptor    = warGameServiceServiceDescriptor.Methods().ByName("GetCasualties")
)

// WarGameServiceClient is a client for the city.wargame.v1.WarGameService service.
type WarGameServiceClient interface {
	// 地图选点
	PickPoints(context.Context, *connect.Request[v1.PickPointsRequest]) (*connect.Response[v1.PickPointsResponse], error)
	// 获取当前轮选点
	GetPickPoints(context.Context, *connect.Request[v1.GetPickPointsRequest]) (*connect.Response[v1.GetPickPointsResponse], error)
	// 指定防守方条令
	GiveDefenseOrder(context.Context, *connect.Request[v1.GiveDefenseOrderRequest]) (*connect.Response[v1.GiveDefenseOrderResponse], error)
	// 分值权重设定
	SetScoreWeight(context.Context, *connect.Request[v1.SetScoreWeightRequest]) (*connect.Response[v1.SetScoreWeightResponse], error)
	// 打击历史获取
	GetHitHistory(context.Context, *connect.Request[v1.GetHitHistoryRequest]) (*connect.Response[v1.GetHitHistoryResponse], error)
	// 推荐选点获取
	GetRecoPoints(context.Context, *connect.Request[v1.GetRecoPointsRequest]) (*connect.Response[v1.GetRecoPointsResponse], error)
	// 当前步与状态获取
	GetStep(context.Context, *connect.Request[v1.GetStepRequest]) (*connect.Response[v1.GetStepResponse], error)
	// 人口损伤人数和aoi的id获取
	GetCasualties(context.Context, *connect.Request[v1.GetCasualtiesRequest]) (*connect.Response[v1.GetCasualtiesResponse], error)
}

// NewWarGameServiceClient constructs a client for the city.wargame.v1.WarGameService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWarGameServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WarGameServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &warGameServiceClient{
		pickPoints: connect.NewClient[v1.PickPointsRequest, v1.PickPointsResponse](
			httpClient,
			baseURL+WarGameServicePickPointsProcedure,
			connect.WithSchema(warGameServicePickPointsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getPickPoints: connect.NewClient[v1.GetPickPointsRequest, v1.GetPickPointsResponse](
			httpClient,
			baseURL+WarGameServiceGetPickPointsProcedure,
			connect.WithSchema(warGameServiceGetPickPointsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		giveDefenseOrder: connect.NewClient[v1.GiveDefenseOrderRequest, v1.GiveDefenseOrderResponse](
			httpClient,
			baseURL+WarGameServiceGiveDefenseOrderProcedure,
			connect.WithSchema(warGameServiceGiveDefenseOrderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setScoreWeight: connect.NewClient[v1.SetScoreWeightRequest, v1.SetScoreWeightResponse](
			httpClient,
			baseURL+WarGameServiceSetScoreWeightProcedure,
			connect.WithSchema(warGameServiceSetScoreWeightMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getHitHistory: connect.NewClient[v1.GetHitHistoryRequest, v1.GetHitHistoryResponse](
			httpClient,
			baseURL+WarGameServiceGetHitHistoryProcedure,
			connect.WithSchema(warGameServiceGetHitHistoryMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRecoPoints: connect.NewClient[v1.GetRecoPointsRequest, v1.GetRecoPointsResponse](
			httpClient,
			baseURL+WarGameServiceGetRecoPointsProcedure,
			connect.WithSchema(warGameServiceGetRecoPointsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getStep: connect.NewClient[v1.GetStepRequest, v1.GetStepResponse](
			httpClient,
			baseURL+WarGameServiceGetStepProcedure,
			connect.WithSchema(warGameServiceGetStepMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCasualties: connect.NewClient[v1.GetCasualtiesRequest, v1.GetCasualtiesResponse](
			httpClient,
			baseURL+WarGameServiceGetCasualtiesProcedure,
			connect.WithSchema(warGameServiceGetCasualtiesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// warGameServiceClient implements WarGameServiceClient.
type warGameServiceClient struct {
	pickPoints       *connect.Client[v1.PickPointsRequest, v1.PickPointsResponse]
	getPickPoints    *connect.Client[v1.GetPickPointsRequest, v1.GetPickPointsResponse]
	giveDefenseOrder *connect.Client[v1.GiveDefenseOrderRequest, v1.GiveDefenseOrderResponse]
	setScoreWeight   *connect.Client[v1.SetScoreWeightRequest, v1.SetScoreWeightResponse]
	getHitHistory    *connect.Client[v1.GetHitHistoryRequest, v1.GetHitHistoryResponse]
	getRecoPoints    *connect.Client[v1.GetRecoPointsRequest, v1.GetRecoPointsResponse]
	getStep          *connect.Client[v1.GetStepRequest, v1.GetStepResponse]
	getCasualties    *connect.Client[v1.GetCasualtiesRequest, v1.GetCasualtiesResponse]
}

// PickPoints calls city.wargame.v1.WarGameService.PickPoints.
func (c *warGameServiceClient) PickPoints(ctx context.Context, req *connect.Request[v1.PickPointsRequest]) (*connect.Response[v1.PickPointsResponse], error) {
	return c.pickPoints.CallUnary(ctx, req)
}

// GetPickPoints calls city.wargame.v1.WarGameService.GetPickPoints.
func (c *warGameServiceClient) GetPickPoints(ctx context.Context, req *connect.Request[v1.GetPickPointsRequest]) (*connect.Response[v1.GetPickPointsResponse], error) {
	return c.getPickPoints.CallUnary(ctx, req)
}

// GiveDefenseOrder calls city.wargame.v1.WarGameService.GiveDefenseOrder.
func (c *warGameServiceClient) GiveDefenseOrder(ctx context.Context, req *connect.Request[v1.GiveDefenseOrderRequest]) (*connect.Response[v1.GiveDefenseOrderResponse], error) {
	return c.giveDefenseOrder.CallUnary(ctx, req)
}

// SetScoreWeight calls city.wargame.v1.WarGameService.SetScoreWeight.
func (c *warGameServiceClient) SetScoreWeight(ctx context.Context, req *connect.Request[v1.SetScoreWeightRequest]) (*connect.Response[v1.SetScoreWeightResponse], error) {
	return c.setScoreWeight.CallUnary(ctx, req)
}

// GetHitHistory calls city.wargame.v1.WarGameService.GetHitHistory.
func (c *warGameServiceClient) GetHitHistory(ctx context.Context, req *connect.Request[v1.GetHitHistoryRequest]) (*connect.Response[v1.GetHitHistoryResponse], error) {
	return c.getHitHistory.CallUnary(ctx, req)
}

// GetRecoPoints calls city.wargame.v1.WarGameService.GetRecoPoints.
func (c *warGameServiceClient) GetRecoPoints(ctx context.Context, req *connect.Request[v1.GetRecoPointsRequest]) (*connect.Response[v1.GetRecoPointsResponse], error) {
	return c.getRecoPoints.CallUnary(ctx, req)
}

// GetStep calls city.wargame.v1.WarGameService.GetStep.
func (c *warGameServiceClient) GetStep(ctx context.Context, req *connect.Request[v1.GetStepRequest]) (*connect.Response[v1.GetStepResponse], error) {
	return c.getStep.CallUnary(ctx, req)
}

// GetCasualties calls city.wargame.v1.WarGameService.GetCasualties.
func (c *warGameServiceClient) GetCasualties(ctx context.Context, req *connect.Request[v1.GetCasualtiesRequest]) (*connect.Response[v1.GetCasualtiesResponse], error) {
	return c.getCasualties.CallUnary(ctx, req)
}

// WarGameServiceHandler is an implementation of the city.wargame.v1.WarGameService service.
type WarGameServiceHandler interface {
	// 地图选点
	PickPoints(context.Context, *connect.Request[v1.PickPointsRequest]) (*connect.Response[v1.PickPointsResponse], error)
	// 获取当前轮选点
	GetPickPoints(context.Context, *connect.Request[v1.GetPickPointsRequest]) (*connect.Response[v1.GetPickPointsResponse], error)
	// 指定防守方条令
	GiveDefenseOrder(context.Context, *connect.Request[v1.GiveDefenseOrderRequest]) (*connect.Response[v1.GiveDefenseOrderResponse], error)
	// 分值权重设定
	SetScoreWeight(context.Context, *connect.Request[v1.SetScoreWeightRequest]) (*connect.Response[v1.SetScoreWeightResponse], error)
	// 打击历史获取
	GetHitHistory(context.Context, *connect.Request[v1.GetHitHistoryRequest]) (*connect.Response[v1.GetHitHistoryResponse], error)
	// 推荐选点获取
	GetRecoPoints(context.Context, *connect.Request[v1.GetRecoPointsRequest]) (*connect.Response[v1.GetRecoPointsResponse], error)
	// 当前步与状态获取
	GetStep(context.Context, *connect.Request[v1.GetStepRequest]) (*connect.Response[v1.GetStepResponse], error)
	// 人口损伤人数和aoi的id获取
	GetCasualties(context.Context, *connect.Request[v1.GetCasualtiesRequest]) (*connect.Response[v1.GetCasualtiesResponse], error)
}

// NewWarGameServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWarGameServiceHandler(svc WarGameServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	warGameServicePickPointsHandler := connect.NewUnaryHandler(
		WarGameServicePickPointsProcedure,
		svc.PickPoints,
		connect.WithSchema(warGameServicePickPointsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	warGameServiceGetPickPointsHandler := connect.NewUnaryHandler(
		WarGameServiceGetPickPointsProcedure,
		svc.GetPickPoints,
		connect.WithSchema(warGameServiceGetPickPointsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	warGameServiceGiveDefenseOrderHandler := connect.NewUnaryHandler(
		WarGameServiceGiveDefenseOrderProcedure,
		svc.GiveDefenseOrder,
		connect.WithSchema(warGameServiceGiveDefenseOrderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	warGameServiceSetScoreWeightHandler := connect.NewUnaryHandler(
		WarGameServiceSetScoreWeightProcedure,
		svc.SetScoreWeight,
		connect.WithSchema(warGameServiceSetScoreWeightMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	warGameServiceGetHitHistoryHandler := connect.NewUnaryHandler(
		WarGameServiceGetHitHistoryProcedure,
		svc.GetHitHistory,
		connect.WithSchema(warGameServiceGetHitHistoryMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	warGameServiceGetRecoPointsHandler := connect.NewUnaryHandler(
		WarGameServiceGetRecoPointsProcedure,
		svc.GetRecoPoints,
		connect.WithSchema(warGameServiceGetRecoPointsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	warGameServiceGetStepHandler := connect.NewUnaryHandler(
		WarGameServiceGetStepProcedure,
		svc.GetStep,
		connect.WithSchema(warGameServiceGetStepMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	warGameServiceGetCasualtiesHandler := connect.NewUnaryHandler(
		WarGameServiceGetCasualtiesProcedure,
		svc.GetCasualties,
		connect.WithSchema(warGameServiceGetCasualtiesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.wargame.v1.WarGameService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WarGameServicePickPointsProcedure:
			warGameServicePickPointsHandler.ServeHTTP(w, r)
		case WarGameServiceGetPickPointsProcedure:
			warGameServiceGetPickPointsHandler.ServeHTTP(w, r)
		case WarGameServiceGiveDefenseOrderProcedure:
			warGameServiceGiveDefenseOrderHandler.ServeHTTP(w, r)
		case WarGameServiceSetScoreWeightProcedure:
			warGameServiceSetScoreWeightHandler.ServeHTTP(w, r)
		case WarGameServiceGetHitHistoryProcedure:
			warGameServiceGetHitHistoryHandler.ServeHTTP(w, r)
		case WarGameServiceGetRecoPointsProcedure:
			warGameServiceGetRecoPointsHandler.ServeHTTP(w, r)
		case WarGameServiceGetStepProcedure:
			warGameServiceGetStepHandler.ServeHTTP(w, r)
		case WarGameServiceGetCasualtiesProcedure:
			warGameServiceGetCasualtiesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWarGameServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWarGameServiceHandler struct{}

func (UnimplementedWarGameServiceHandler) PickPoints(context.Context, *connect.Request[v1.PickPointsRequest]) (*connect.Response[v1.PickPointsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.wargame.v1.WarGameService.PickPoints is not implemented"))
}

func (UnimplementedWarGameServiceHandler) GetPickPoints(context.Context, *connect.Request[v1.GetPickPointsRequest]) (*connect.Response[v1.GetPickPointsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.wargame.v1.WarGameService.GetPickPoints is not implemented"))
}

func (UnimplementedWarGameServiceHandler) GiveDefenseOrder(context.Context, *connect.Request[v1.GiveDefenseOrderRequest]) (*connect.Response[v1.GiveDefenseOrderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.wargame.v1.WarGameService.GiveDefenseOrder is not implemented"))
}

func (UnimplementedWarGameServiceHandler) SetScoreWeight(context.Context, *connect.Request[v1.SetScoreWeightRequest]) (*connect.Response[v1.SetScoreWeightResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.wargame.v1.WarGameService.SetScoreWeight is not implemented"))
}

func (UnimplementedWarGameServiceHandler) GetHitHistory(context.Context, *connect.Request[v1.GetHitHistoryRequest]) (*connect.Response[v1.GetHitHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.wargame.v1.WarGameService.GetHitHistory is not implemented"))
}

func (UnimplementedWarGameServiceHandler) GetRecoPoints(context.Context, *connect.Request[v1.GetRecoPointsRequest]) (*connect.Response[v1.GetRecoPointsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.wargame.v1.WarGameService.GetRecoPoints is not implemented"))
}

func (UnimplementedWarGameServiceHandler) GetStep(context.Context, *connect.Request[v1.GetStepRequest]) (*connect.Response[v1.GetStepResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.wargame.v1.WarGameService.GetStep is not implemented"))
}

func (UnimplementedWarGameServiceHandler) GetCasualties(context.Context, *connect.Request[v1.GetCasualtiesRequest]) (*connect.Response[v1.GetCasualtiesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.wargame.v1.WarGameService.GetCasualties is not implemented"))
}
