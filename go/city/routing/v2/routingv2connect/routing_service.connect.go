// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: city/routing/v2/routing_service.proto

package routingv2connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2 "git.fiblab.net/sim/protos/v2/go/city/routing/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RoutingServiceName is the fully-qualified name of the RoutingService service.
	RoutingServiceName = "city.routing.v2.RoutingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoutingServiceGetRouteProcedure is the fully-qualified name of the RoutingService's GetRoute RPC.
	RoutingServiceGetRouteProcedure = "/city.routing.v2.RoutingService/GetRoute"
	// RoutingServiceSetDrivingCostsProcedure is the fully-qualified name of the RoutingService's
	// SetDrivingCosts RPC.
	RoutingServiceSetDrivingCostsProcedure = "/city.routing.v2.RoutingService/SetDrivingCosts"
	// RoutingServiceGetDrivingCostsProcedure is the fully-qualified name of the RoutingService's
	// GetDrivingCosts RPC.
	RoutingServiceGetDrivingCostsProcedure = "/city.routing.v2.RoutingService/GetDrivingCosts"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	routingServiceServiceDescriptor               = v2.File_city_routing_v2_routing_service_proto.Services().ByName("RoutingService")
	routingServiceGetRouteMethodDescriptor        = routingServiceServiceDescriptor.Methods().ByName("GetRoute")
	routingServiceSetDrivingCostsMethodDescriptor = routingServiceServiceDescriptor.Methods().ByName("SetDrivingCosts")
	routingServiceGetDrivingCostsMethodDescriptor = routingServiceServiceDescriptor.Methods().ByName("GetDrivingCosts")
)

// RoutingServiceClient is a client for the city.routing.v2.RoutingService service.
type RoutingServiceClient interface {
	// 获取导航路线
	// Get routing path
	GetRoute(context.Context, *connect.Request[v2.GetRouteRequest]) (*connect.Response[v2.GetRouteResponse], error)
	// 设置行车导航道路通行成本
	// Set traveling cost of driving routing
	SetDrivingCosts(context.Context, *connect.Request[v2.SetDrivingCostsRequest]) (*connect.Response[v2.SetDrivingCostsResponse], error)
	// 获取行车导航道路通行成本
	// Get traveling cost of driving routing
	GetDrivingCosts(context.Context, *connect.Request[v2.GetDrivingCostsRequest]) (*connect.Response[v2.GetDrivingCostsResponse], error)
}

// NewRoutingServiceClient constructs a client for the city.routing.v2.RoutingService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoutingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RoutingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &routingServiceClient{
		getRoute: connect.NewClient[v2.GetRouteRequest, v2.GetRouteResponse](
			httpClient,
			baseURL+RoutingServiceGetRouteProcedure,
			connect.WithSchema(routingServiceGetRouteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setDrivingCosts: connect.NewClient[v2.SetDrivingCostsRequest, v2.SetDrivingCostsResponse](
			httpClient,
			baseURL+RoutingServiceSetDrivingCostsProcedure,
			connect.WithSchema(routingServiceSetDrivingCostsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDrivingCosts: connect.NewClient[v2.GetDrivingCostsRequest, v2.GetDrivingCostsResponse](
			httpClient,
			baseURL+RoutingServiceGetDrivingCostsProcedure,
			connect.WithSchema(routingServiceGetDrivingCostsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// routingServiceClient implements RoutingServiceClient.
type routingServiceClient struct {
	getRoute        *connect.Client[v2.GetRouteRequest, v2.GetRouteResponse]
	setDrivingCosts *connect.Client[v2.SetDrivingCostsRequest, v2.SetDrivingCostsResponse]
	getDrivingCosts *connect.Client[v2.GetDrivingCostsRequest, v2.GetDrivingCostsResponse]
}

// GetRoute calls city.routing.v2.RoutingService.GetRoute.
func (c *routingServiceClient) GetRoute(ctx context.Context, req *connect.Request[v2.GetRouteRequest]) (*connect.Response[v2.GetRouteResponse], error) {
	return c.getRoute.CallUnary(ctx, req)
}

// SetDrivingCosts calls city.routing.v2.RoutingService.SetDrivingCosts.
func (c *routingServiceClient) SetDrivingCosts(ctx context.Context, req *connect.Request[v2.SetDrivingCostsRequest]) (*connect.Response[v2.SetDrivingCostsResponse], error) {
	return c.setDrivingCosts.CallUnary(ctx, req)
}

// GetDrivingCosts calls city.routing.v2.RoutingService.GetDrivingCosts.
func (c *routingServiceClient) GetDrivingCosts(ctx context.Context, req *connect.Request[v2.GetDrivingCostsRequest]) (*connect.Response[v2.GetDrivingCostsResponse], error) {
	return c.getDrivingCosts.CallUnary(ctx, req)
}

// RoutingServiceHandler is an implementation of the city.routing.v2.RoutingService service.
type RoutingServiceHandler interface {
	// 获取导航路线
	// Get routing path
	GetRoute(context.Context, *connect.Request[v2.GetRouteRequest]) (*connect.Response[v2.GetRouteResponse], error)
	// 设置行车导航道路通行成本
	// Set traveling cost of driving routing
	SetDrivingCosts(context.Context, *connect.Request[v2.SetDrivingCostsRequest]) (*connect.Response[v2.SetDrivingCostsResponse], error)
	// 获取行车导航道路通行成本
	// Get traveling cost of driving routing
	GetDrivingCosts(context.Context, *connect.Request[v2.GetDrivingCostsRequest]) (*connect.Response[v2.GetDrivingCostsResponse], error)
}

// NewRoutingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoutingServiceHandler(svc RoutingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	routingServiceGetRouteHandler := connect.NewUnaryHandler(
		RoutingServiceGetRouteProcedure,
		svc.GetRoute,
		connect.WithSchema(routingServiceGetRouteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	routingServiceSetDrivingCostsHandler := connect.NewUnaryHandler(
		RoutingServiceSetDrivingCostsProcedure,
		svc.SetDrivingCosts,
		connect.WithSchema(routingServiceSetDrivingCostsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	routingServiceGetDrivingCostsHandler := connect.NewUnaryHandler(
		RoutingServiceGetDrivingCostsProcedure,
		svc.GetDrivingCosts,
		connect.WithSchema(routingServiceGetDrivingCostsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/city.routing.v2.RoutingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RoutingServiceGetRouteProcedure:
			routingServiceGetRouteHandler.ServeHTTP(w, r)
		case RoutingServiceSetDrivingCostsProcedure:
			routingServiceSetDrivingCostsHandler.ServeHTTP(w, r)
		case RoutingServiceGetDrivingCostsProcedure:
			routingServiceGetDrivingCostsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRoutingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoutingServiceHandler struct{}

func (UnimplementedRoutingServiceHandler) GetRoute(context.Context, *connect.Request[v2.GetRouteRequest]) (*connect.Response[v2.GetRouteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.routing.v2.RoutingService.GetRoute is not implemented"))
}

func (UnimplementedRoutingServiceHandler) SetDrivingCosts(context.Context, *connect.Request[v2.SetDrivingCostsRequest]) (*connect.Response[v2.SetDrivingCostsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.routing.v2.RoutingService.SetDrivingCosts is not implemented"))
}

func (UnimplementedRoutingServiceHandler) GetDrivingCosts(context.Context, *connect.Request[v2.GetDrivingCostsRequest]) (*connect.Response[v2.GetDrivingCostsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("city.routing.v2.RoutingService.GetDrivingCosts is not implemented"))
}
