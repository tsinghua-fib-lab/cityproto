// @generated by protoc-gen-es v1.10.0
// @generated from file city/economy/v1/economy.proto (package city.economy.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * 个人（与Person一一对应，
 * 没有绑定到city.economy.v1.Person的Person将无法参与经济模拟）
 *
 * @generated from message city.economy.v1.Person
 */
export declare class Person extends Message<Person> {
  /**
   * 与person id一致
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * 起始资金
   *
   * @generated from field: double money = 2;
   */
  money: number;

  /**
   * 所在组织ID（初始化时不提供，由组织中的员工列表设定）
   *
   * @generated from field: optional int32 org_id = 3;
   */
  orgId?: number;

  constructor(data?: PartialMessage<Person>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.economy.v1.Person";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Person;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Person;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Person;

  static equals(a: Person | PlainMessage<Person> | undefined, b: Person | PlainMessage<Person> | undefined): boolean;
}

/**
 * 员工
 *
 * @generated from message city.economy.v1.Employee
 */
export declare class Employee extends Message<Employee> {
  /**
   * 员工ID
   *
   * @generated from field: int32 person_id = 1;
   */
  personId: number;

  /**
   * 薪水
   *
   * @generated from field: double salary = 2;
   */
  salary: number;

  constructor(data?: PartialMessage<Employee>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.economy.v1.Employee";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Employee;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Employee;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Employee;

  static equals(a: Employee | PlainMessage<Employee> | undefined, b: Employee | PlainMessage<Employee> | undefined): boolean;
}

/**
 * 岗位
 *
 * @generated from message city.economy.v1.Job
 */
export declare class Job extends Message<Job> {
  /**
   * 岗位名称
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * 岗位所需员工数量
   *
   * @generated from field: int32 employee_count = 2;
   */
  employeeCount: number;

  /**
   * 岗位薪水
   *
   * @generated from field: optional double salary = 3;
   */
  salary?: number;

  constructor(data?: PartialMessage<Job>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.economy.v1.Job";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Job;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Job;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Job;

  static equals(a: Job | PlainMessage<Job> | undefined, b: Job | PlainMessage<Job> | undefined): boolean;
}

/**
 * 货物
 *
 * @generated from message city.economy.v1.Goods
 */
export declare class Goods extends Message<Goods> {
  /**
   * 货物类型
   *
   * @generated from field: string type = 1;
   */
  type: string;

  /**
   * 货物名称
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * 货物数量
   *
   * @generated from field: int32 count = 3;
   */
  count: number;

  /**
   * 货物价格（允许暂未定价）
   *
   * @generated from field: optional double price = 4;
   */
  price?: number;

  constructor(data?: PartialMessage<Goods>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.economy.v1.Goods";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Goods;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Goods;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Goods;

  static equals(a: Goods | PlainMessage<Goods> | undefined, b: Goods | PlainMessage<Goods> | undefined): boolean;
}

/**
 * 组织，具有员工、货物、资金等属性
 *
 * @generated from message city.economy.v1.Org
 */
export declare class Org extends Message<Org> {
  /**
   * 组织ID
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * 组织所在的POI ID
   *
   * @generated from field: int32 poi_id = 2;
   */
  poiId: number;

  /**
   * 员工列表（初始化时由Orgs列表提供，单向绑定到person上）
   *
   * @generated from field: repeated city.economy.v1.Employee employees = 3;
   */
  employees: Employee[];

  /**
   * 岗位列表
   *
   * @generated from field: repeated city.economy.v1.Job jobs = 4;
   */
  jobs: Job[];

  /**
   * 资金
   *
   * @generated from field: double money = 5;
   */
  money: number;

  /**
   * 货物
   *
   * @generated from field: repeated city.economy.v1.Goods goods = 6;
   */
  goods: Goods[];

  /**
   * 功能列表
   * buy: 购买货物
   * apply: 申请岗位
   * ...
   *
   * @generated from field: repeated string functions = 7;
   */
  functions: string[];

  constructor(data?: PartialMessage<Org>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.economy.v1.Org";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Org;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Org;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Org;

  static equals(a: Org | PlainMessage<Org> | undefined, b: Org | PlainMessage<Org> | undefined): boolean;
}

/**
 * 组织列表，对应MongoDB中的集合
 *
 * @generated from message city.economy.v1.Economy
 */
export declare class Economy extends Message<Economy> {
  /**
   * 人
   *
   * @generated from field: repeated city.economy.v1.Person persons = 1;
   */
  persons: Person[];

  /**
   * 组织列表
   *
   * @generated from field: repeated city.economy.v1.Org orgs = 2;
   */
  orgs: Org[];

  constructor(data?: PartialMessage<Economy>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.economy.v1.Economy";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Economy;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Economy;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Economy;

  static equals(a: Economy | PlainMessage<Economy> | undefined, b: Economy | PlainMessage<Economy> | undefined): boolean;
}

