// @generated by protoc-gen-es v1.10.0
// @generated from file city/trip/v2/trip.proto (package city.trip.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { AoiPosition, LanePosition, Position } from "../../geo/v2/geo_pb.js";
import type { Journey } from "../../routing/v2/routing_pb.js";

/**
 * 出行偏好
 * Preferred trip travel mode
 *
 * @generated from enum city.trip.v2.TripMode
 */
export declare enum TripMode {
  /**
   * 未指定出行方式
   * unspecified
   *
   * @generated from enum value: TRIP_MODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 仅步行
   * walking only
   *
   * @generated from enum value: TRIP_MODE_WALK_ONLY = 1;
   */
  WALK_ONLY = 1,

  /**
   * 仅开车
   * driving only
   *
   * @generated from enum value: TRIP_MODE_DRIVE_ONLY = 2;
   */
  DRIVE_ONLY = 2,

  /**
   * 乘坐公交车（含站点间步行换乘）
   * taking bus with walking to transit bus line between stations
   *
   * @generated from enum value: TRIP_MODE_BUS_WALK = 4;
   */
  BUS_WALK = 4,

  /**
   * 当有自行车时选择骑自行车，否则步行
   * Riding bikes if avaible, otherwise walking
   *
   * @generated from enum value: TRIP_MODE_BIKE_WALK = 5;
   */
  BIKE_WALK = 5,
}

/**
 * 停靠点
 * stop points of person
 *
 * @generated from message city.trip.v2.TripStop
 */
export declare class TripStop extends Message<TripStop> {
  /**
   * 停车点AOI坐标（可选）
   * Parking position coordinates AOI (optional)
   *
   * @generated from field: optional city.geo.v2.AoiPosition aoi_position = 1;
   */
  aoiPosition?: AoiPosition;

  /**
   * 停车点Lane+S坐标（必须提供）
   * Parking position coordinates Lane+S (must be provided)
   *
   * @generated from field: city.geo.v2.LanePosition lane_position = 2;
   */
  lanePosition?: LanePosition;

  /**
   * 停车持续时间
   * Parking duration time (s)
   *
   * @generated from field: double duration = 3;
   */
  duration: number;

  constructor(data?: PartialMessage<TripStop>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.trip.v2.TripStop";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TripStop;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TripStop;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TripStop;

  static equals(a: TripStop | PlainMessage<TripStop> | undefined, b: TripStop | PlainMessage<TripStop> | undefined): boolean;
}

/**
 * 出行
 * Trip
 *
 * @generated from message city.trip.v2.Trip
 */
export declare class Trip extends Message<Trip> {
  /**
   * 出行方式
   * trip mode
   *
   * @generated from field: city.trip.v2.TripMode mode = 1;
   */
  mode: TripMode;

  /**
   * 目的地，如果目的地是AOI且指定了XYPosition，则以XYPosition为室内步行的终点
   * destination, if the destination is AOI and XYPosition is specified, XYPosition is the end point of indoor walking
   *
   * @generated from field: city.geo.v2.Position end = 2;
   */
  end?: Position;

  /**
   * 期望的出发时间（单位: 秒）
   * Expected departure time (in seconds)
   *
   * @generated from field: optional double departure_time = 3;
   */
  departureTime?: number;

  /**
   * 期望的等待时间（单位：秒），如果departure_time为空则wait_time默认为0
   * The expected waiting time (in seconds), if departure_time is empty, wait_time defaults to 0
   *
   * @generated from field: optional double wait_time = 4;
   */
  waitTime?: number;

  /**
   * 期望的到达时间（单位: 秒）
   * Expected arrival time (in seconds)
   *
   * @generated from field: optional double arrival_time = 5;
   */
  arrivalTime?: number;

  /**
   * 本次出行目的地的活动名
   * The activity name of the destination for this trip
   *
   * @generated from field: optional string activity = 6;
   */
  activity?: string;

  /**
   * 本次出行对应的可视化模型（覆盖Person Attribute中的默认模型）
   * The visual model corresponding to this trip (overriding the default model in Person Attribute)
   *
   * @generated from field: optional string model = 8;
   */
  model?: string;

  /**
   * 预计算的导航结果
   * Pre calculated routing results
   *
   * @generated from field: repeated city.routing.v2.Journey routes = 7;
   */
  routes: Journey[];

  /**
   * 本次出行的所有停靠点
   * stop points of this trip
   *
   * @generated from field: repeated city.trip.v2.TripStop trip_stops = 9;
   */
  tripStops: TripStop[];

  constructor(data?: PartialMessage<Trip>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.trip.v2.Trip";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Trip;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Trip;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Trip;

  static equals(a: Trip | PlainMessage<Trip> | undefined, b: Trip | PlainMessage<Trip> | undefined): boolean;
}

/**
 * 时刻表
 * Schedule
 * 关于出发时间的说明如下：
 * The explanation about the departure time is as follows:
 * 1. Schedule的开始时刻是 departure_time 或者 参考时刻+wait_time，
 * 1. The start time of the Schedule is either departure_time or reference time+wait_time,
 *    参考时刻定义为上一Schedule的结束时刻(即它最后一个Trip的结束时刻)，
 *    The reference time is defined as the end time of the previous Schedule (i.e. the end time of its last Trip),
 *    或者当它为第一个Schedule时定义为Person更新Schedule后的首次Update
 *    Alternatively, when it is the first Schedule, it can be defined as the first Update time after Person updates the Schedule
 *    时刻(当有准确时间要求时建议直接指定departure_time)
 *    (it is recommended to specify departuretime directly when there is an accurate time requirement)
 * 2. Trip的开始时刻是 departure_time 或者 参考时刻+wait_time，参考
 * 2. The start time of the Trip is either departure_time or reference time+wait_time,
 *    时刻定义为上一Trip的结束时刻，或者当它为第一个Trip时定义为所属的
 *    The reference time is defined as the end time of the previous Trip, or when it is the first Trip,
 *    Schedule的开始时刻
 *    it is defined as the start time of the Schedule to which it belongs
 * 3. Person的实际运行时刻取决于Trip的开始时刻，例如它的首次运行是第一
 * 3. The actual running time of a Person depends on the start time of the Trip,
 *    个Schedule中第一个Trip的开始时刻
 *    for example, its first run is the start time of the first Trip in the first Schedule
 * FAQ
 * Q1: 同时指定Schedule和第一个Trip的departure_time会怎样？
 * Q1: What would happen if both the Schedule and the departuretime of the first Trip were specified simultaneously?
 * A1: 参照(2)，只看Trip的departure_time
 * A1: Referring to (2), only depend on the departuretime of Trip
 * Q2: Schedule和第一个Trip同时指定wait_time=10会怎样？
 * Q2: What would happen if both the Schedule and the first Trip were specified with wait_time=10 at the same time?
 * A2: 参照(2)，等待时间为10+10=20
 * A2: Referring to (2), the waiting time is 10+10=20
 *
 * @generated from message city.trip.v2.Schedule
 */
export declare class Schedule extends Message<Schedule> {
  /**
   * 出行列表
   * List of trips
   *
   * @generated from field: repeated city.trip.v2.Trip trips = 1;
   */
  trips: Trip[];

  /**
   * trips的执行次数，0表示无限循环，大于0表示执行几次
   * The number of times trips are executed, where 0 represents infinite loops and greater than 0 represents how many times they are executed
   *
   * @generated from field: int32 loop_count = 2;
   */
  loopCount: number;

  /**
   * 期望的出发时间（单位: 秒）
   * Expected departure time (in seconds)
   *
   * @generated from field: optional double departure_time = 3;
   */
  departureTime?: number;

  /**
   * 期望的等待时间（单位：秒），如果departure_time为空则wait_time默认为0
   * Expected waiting time (in seconds), if departure_time is empty, wait_time defaults to 0
   *
   * @generated from field: optional double wait_time = 4;
   */
  waitTime?: number;

  constructor(data?: PartialMessage<Schedule>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.trip.v2.Schedule";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Schedule;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Schedule;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Schedule;

  static equals(a: Schedule | PlainMessage<Schedule> | undefined, b: Schedule | PlainMessage<Schedule> | undefined): boolean;
}

