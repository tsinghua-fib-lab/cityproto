// @generated by protoc-gen-es v1.6.0
// @generated from file city/event/v2/event_service.proto (package city.event.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Event } from "./event_pb.js";

/**
 * 按照topic查询事件请求
 *
 * @generated from message city.event.v2.GetEventsByTopicRequest
 */
export declare class GetEventsByTopicRequest extends Message<GetEventsByTopicRequest> {
  /**
   * 主题
   *
   * @generated from field: string topic = 1;
   */
  topic: string;

  constructor(data?: PartialMessage<GetEventsByTopicRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.event.v2.GetEventsByTopicRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventsByTopicRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventsByTopicRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventsByTopicRequest;

  static equals(a: GetEventsByTopicRequest | PlainMessage<GetEventsByTopicRequest> | undefined, b: GetEventsByTopicRequest | PlainMessage<GetEventsByTopicRequest> | undefined): boolean;
}

/**
 * 按照topic查询事件响应
 *
 * @generated from message city.event.v2.GetEventsByTopicResponse
 */
export declare class GetEventsByTopicResponse extends Message<GetEventsByTopicResponse> {
  /**
   * 事件列表
   *
   * @generated from field: repeated city.event.v2.Event events = 1;
   */
  events: Event[];

  constructor(data?: PartialMessage<GetEventsByTopicResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.event.v2.GetEventsByTopicResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEventsByTopicResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEventsByTopicResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEventsByTopicResponse;

  static equals(a: GetEventsByTopicResponse | PlainMessage<GetEventsByTopicResponse> | undefined, b: GetEventsByTopicResponse | PlainMessage<GetEventsByTopicResponse> | undefined): boolean;
}

/**
 * 确认事件已被处理请求
 *
 * @generated from message city.event.v2.ResolveEventsRequest
 */
export declare class ResolveEventsRequest extends Message<ResolveEventsRequest> {
  /**
   * 事件列表
   *
   * @generated from field: repeated city.event.v2.Event events = 1;
   */
  events: Event[];

  constructor(data?: PartialMessage<ResolveEventsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.event.v2.ResolveEventsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveEventsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveEventsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveEventsRequest;

  static equals(a: ResolveEventsRequest | PlainMessage<ResolveEventsRequest> | undefined, b: ResolveEventsRequest | PlainMessage<ResolveEventsRequest> | undefined): boolean;
}

/**
 * 确认事件已被处理响应
 *
 * @generated from message city.event.v2.ResolveEventsResponse
 */
export declare class ResolveEventsResponse extends Message<ResolveEventsResponse> {
  constructor(data?: PartialMessage<ResolveEventsResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.event.v2.ResolveEventsResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveEventsResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveEventsResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveEventsResponse;

  static equals(a: ResolveEventsResponse | PlainMessage<ResolveEventsResponse> | undefined, b: ResolveEventsResponse | PlainMessage<ResolveEventsResponse> | undefined): boolean;
}

