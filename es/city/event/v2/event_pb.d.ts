// @generated by protoc-gen-es v1.10.0
// @generated from file city/event/v2/event.proto (package city.event.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { Position } from "../../geo/v2/geo_pb.js";

/**
 * 实体类型
 *
 * @generated from enum city.event.v2.EntityType
 */
export declare enum EntityType {
  /**
   * 未指定
   *
   * @generated from enum value: ENTITY_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Lane
   *
   * @generated from enum value: ENTITY_TYPE_LANE = 1;
   */
  LANE = 1,

  /**
   * Road
   *
   * @generated from enum value: ENTITY_TYPE_ROAD = 2;
   */
  ROAD = 2,

  /**
   * Junction
   *
   * @generated from enum value: ENTITY_TYPE_JUNCTION = 3;
   */
  JUNCTION = 3,

  /**
   * AOI
   *
   * @generated from enum value: ENTITY_TYPE_AOI = 4;
   */
  AOI = 4,

  /**
   * POI
   *
   * @generated from enum value: ENTITY_TYPE_POI = 5;
   */
  POI = 5,

  /**
   * 人
   *
   * @generated from enum value: ENTITY_TYPE_PERSON = 6;
   */
  PERSON = 6,

  /**
   * 组织
   *
   * @generated from enum value: ENTITY_TYPE_ORG = 7;
   */
  ORG = 7,
}

/**
 * 主语
 *
 * @generated from message city.event.v2.Entity
 */
export declare class Entity extends Message<Entity> {
  /**
   * 实体类型
   *
   * @generated from field: city.event.v2.EntityType type = 1;
   */
  type: EntityType;

  /**
   * 实体ID
   *
   * @generated from field: int32 id = 2;
   */
  id: number;

  constructor(data?: PartialMessage<Entity>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.event.v2.Entity";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Entity;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Entity;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Entity;

  static equals(a: Entity | PlainMessage<Entity> | undefined, b: Entity | PlainMessage<Entity> | undefined): boolean;
}

/**
 * 模拟器中的事件
 * 包含主题、主语（Who）、谓词（内容）、地点（Where）、时间（When）
 *
 * @generated from message city.event.v2.Event
 */
export declare class Event extends Message<Event> {
  /**
   * 主题
   *
   * @generated from field: string topic = 1;
   */
  topic: string;

  /**
   * ID
   *
   * @generated from field: optional int32 id = 2;
   */
  id?: number;

  /**
   * 主语
   *
   * @generated from field: city.event.v2.Entity subject = 3;
   */
  subject?: Entity;

  /**
   * 谓词
   *
   * @generated from field: string content = 4;
   */
  content: string;

  /**
   * 地点
   *
   * @generated from field: city.geo.v2.Position position = 5;
   */
  position?: Position;

  /**
   * 时间
   *
   * @generated from field: double t = 6;
   */
  t: number;

  constructor(data?: PartialMessage<Event>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.event.v2.Event";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Event;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Event;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Event;

  static equals(a: Event | PlainMessage<Event> | undefined, b: Event | PlainMessage<Event> | undefined): boolean;
}

