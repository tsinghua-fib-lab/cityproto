// @generated by protoc-gen-es v1.6.0
// @generated from file city/traffic_light/v2/traffic_light.proto (package city.traffic_light.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * 交通灯的状态
 *
 * @generated from enum city.traffic_light.v2.LightState
 */
export declare enum LightState {
  /**
   * 未指定
   *
   * @generated from enum value: LIGHT_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 红灯
   *
   * @generated from enum value: LIGHT_STATE_RED = 1;
   */
  RED = 1,

  /**
   * 绿灯
   *
   * @generated from enum value: LIGHT_STATE_GREEN = 2;
   */
  GREEN = 2,

  /**
   * 黄灯
   *
   * @generated from enum value: LIGHT_STATE_YELLOW = 3;
   */
  YELLOW = 3,
}

/**
 * 交通灯相位
 *
 * @generated from message city.traffic_light.v2.Phase
 */
export declare class Phase extends Message<Phase> {
  /**
   * 相位持续时间，单位秒
   *
   * @generated from field: double duration = 1;
   */
  duration: number;

  /**
   * 描述该相位下每个lane的灯控情况，lane与Junction.lane_ids一一对应
   *
   * @generated from field: repeated city.traffic_light.v2.LightState states = 2;
   */
  states: LightState[];

  constructor(data?: PartialMessage<Phase>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.traffic_light.v2.Phase";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Phase;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Phase;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Phase;

  static equals(a: Phase | PlainMessage<Phase> | undefined, b: Phase | PlainMessage<Phase> | undefined): boolean;
}

/**
 * 交通灯
 *
 * @generated from message city.traffic_light.v2.TrafficLight
 */
export declare class TrafficLight extends Message<TrafficLight> {
  /**
   * 所在路口id
   *
   * @generated from field: int32 junction_id = 1;
   */
  junctionId: number;

  /**
   * 相位循环的一个循环周期
   *
   * @generated from field: repeated city.traffic_light.v2.Phase phases = 2;
   */
  phases: Phase[];

  constructor(data?: PartialMessage<TrafficLight>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.traffic_light.v2.TrafficLight";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrafficLight;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrafficLight;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrafficLight;

  static equals(a: TrafficLight | PlainMessage<TrafficLight> | undefined, b: TrafficLight | PlainMessage<TrafficLight> | undefined): boolean;
}

/**
 * 信控集合，对应一个信控pb文件或一个信控mongodb collection
 *
 * @generated from message city.traffic_light.v2.TrafficLights
 */
export declare class TrafficLights extends Message<TrafficLights> {
  /**
   * @generated from field: repeated city.traffic_light.v2.TrafficLight traffic_lights = 1;
   */
  trafficLights: TrafficLight[];

  constructor(data?: PartialMessage<TrafficLights>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.traffic_light.v2.TrafficLights";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TrafficLights;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TrafficLights;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TrafficLights;

  static equals(a: TrafficLights | PlainMessage<TrafficLights> | undefined, b: TrafficLights | PlainMessage<TrafficLights> | undefined): boolean;
}

