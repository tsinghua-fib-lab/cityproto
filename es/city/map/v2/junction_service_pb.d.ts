// @generated by protoc-gen-es v1.10.0
// @generated from file city/map/v2/junction_service.proto (package city.map.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { LaneState } from "./lane_state_pb.js";

/**
 * 查询路口信息请求
 * Request for getting junction information
 *
 * @generated from message city.map.v2.GetJunctionRequest
 */
export declare class GetJunctionRequest extends Message<GetJunctionRequest> {
  /**
   * 指定查询的路口ID列表，为空代表查询所有路口
   * List of targeted junction IDs. If empty, it means querying all junctions.
   *
   * @generated from field: repeated int32 junction_ids = 1;
   */
  junctionIds: number[];

  /**
   * 是否要排除车道信息
   * Whether to exclude lane information
   *
   * @generated from field: bool exclude_lane = 2;
   */
  excludeLane: boolean;

  /**
   * 是否要排除车道上的人的信息（仅在包含车道信息时有效）
   * Whether to exclude information about person in the lane (only valid when lane information is included)
   *
   * @generated from field: bool exclude_person = 3;
   */
  excludePerson: boolean;

  constructor(data?: PartialMessage<GetJunctionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.GetJunctionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetJunctionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetJunctionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetJunctionRequest;

  static equals(a: GetJunctionRequest | PlainMessage<GetJunctionRequest> | undefined, b: GetJunctionRequest | PlainMessage<GetJunctionRequest> | undefined): boolean;
}

/**
 * 查询路口信息响应
 * Response of getting junction information
 *
 * @generated from message city.map.v2.GetJunctionResponse
 */
export declare class GetJunctionResponse extends Message<GetJunctionResponse> {
  /**
   * 路口信息列表
   * List of junction information
   *
   * @generated from field: repeated city.map.v2.JunctionState states = 1;
   */
  states: JunctionState[];

  constructor(data?: PartialMessage<GetJunctionResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.GetJunctionResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetJunctionResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetJunctionResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetJunctionResponse;

  static equals(a: GetJunctionResponse | PlainMessage<GetJunctionResponse> | undefined, b: GetJunctionResponse | PlainMessage<GetJunctionResponse> | undefined): boolean;
}

/**
 * 路口状态
 * junction state
 *
 * @generated from message city.map.v2.JunctionState
 */
export declare class JunctionState extends Message<JunctionState> {
  /**
   * 路口ID
   * junction ID
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * 当前进入道路的车辆数
   * current entering road vehicle count
   *
   * @generated from field: int32 in_vehicle_cnt = 2;
   */
  inVehicleCnt: number;

  /**
   * 当前离开道路的车辆数
   * current leaving road vehicle count
   *
   * @generated from field: int32 out_vehicle_cnt = 3;
   */
  outVehicleCnt: number;

  /**
   * 当前道路车辆数
   * current road vehicle count
   *
   * @generated from field: int32 vehicle_cnt = 4;
   */
  vehicleCnt: number;

  /**
   * 累计进入道路的车辆数
   * cumulative entering road vehicle count
   *
   * @generated from field: int32 cum_in_vehicle_cnt = 5;
   */
  cumInVehicleCnt: number;

  /**
   * 累计离开道路的车辆数
   * cumulative leaving road vehicle count
   *
   * @generated from field: int32 cum_out_vehicle_cnt = 6;
   */
  cumOutVehicleCnt: number;

  /**
   * 车道情况
   * lane state
   *
   * @generated from field: repeated city.map.v2.LaneState lanes = 7;
   */
  lanes: LaneState[];

  /**
   * 前驱车道情况（用于查看驶入路口的车道情况）
   * predecessor lane state (used to view the lane situation of entering the junction)
   *
   * @generated from field: repeated city.map.v2.LaneState predecessor_driving_lanes = 8;
   */
  predecessorDrivingLanes: LaneState[];

  /**
   * 总排队车辆数
   * total queuing vehicle count
   *
   * @generated from field: int32 total_queuing_vehicle_cnt = 9;
   */
  totalQueuingVehicleCnt: number;

  /**
   * 总排队时间
   * total queuing time
   *
   * @generated from field: double total_queuing_time = 10;
   */
  totalQueuingTime: number;

  /**
   * 当前平均排队时间
   * current average queuing time
   *
   * @generated from field: double avg_queuing_time = 11;
   */
  avgQueuingTime: number;

  /**
   * 最大排队长度（按车道）
   * max queuing vehicle count
   *
   * @generated from field: int32 max_queuing_vehicle_cnt = 12;
   */
  maxQueuingVehicleCnt: number;

  /**
   * 是否有信号灯
   * whether there is a traffic light
   *
   * @generated from field: bool has_traffic_light = 13;
   */
  hasTrafficLight: boolean;

  constructor(data?: PartialMessage<JunctionState>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.JunctionState";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JunctionState;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JunctionState;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JunctionState;

  static equals(a: JunctionState | PlainMessage<JunctionState> | undefined, b: JunctionState | PlainMessage<JunctionState> | undefined): boolean;
}

