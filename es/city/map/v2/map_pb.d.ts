// @generated by protoc-gen-es v1.6.0
// @generated from file city/map/v2/map.proto (package city.map.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { LanePosition, XYPosition } from "../../geo/v2/geo_pb.js";

/**
 * 车道类型
 * Lane type
 *
 * @generated from enum city.map.v2.LaneType
 */
export declare enum LaneType {
  /**
   * 未指定
   * unspecified
   *
   * @generated from enum value: LANE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 行车
   * driving
   *
   * @generated from enum value: LANE_TYPE_DRIVING = 1;
   */
  DRIVING = 1,

  /**
   * 步行
   * walking
   *
   * @generated from enum value: LANE_TYPE_WALKING = 2;
   */
  WALKING = 2,
}

/**
 * 车道转向
 * lane turn type
 *
 * @generated from enum city.map.v2.LaneTurn
 */
export declare enum LaneTurn {
  /**
   * 未指定
   * unspecified
   *
   * @generated from enum value: LANE_TURN_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 直行
   * go straight
   *
   * @generated from enum value: LANE_TURN_STRAIGHT = 1;
   */
  STRAIGHT = 1,

  /**
   * 左转
   * turn left
   *
   * @generated from enum value: LANE_TURN_LEFT = 2;
   */
  LEFT = 2,

  /**
   * 右转
   * turn right
   *
   * @generated from enum value: LANE_TURN_RIGHT = 3;
   */
  RIGHT = 3,

  /**
   * 掉头
   * turn around
   *
   * @generated from enum value: LANE_TURN_AROUND = 4;
   */
  AROUND = 4,
}

/**
 * 车道连接类型
 * Lane connection type
 *
 * @generated from enum city.map.v2.LaneConnectionType
 */
export declare enum LaneConnectionType {
  /**
   * 未指定
   * unspecified
   *
   * @generated from enum value: LANE_CONNECTION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 连接处为道路开头
   * The connection is at the lane head
   *
   * @generated from enum value: LANE_CONNECTION_TYPE_HEAD = 1;
   */
  HEAD = 1,

  /**
   * 连接处为道路结尾
   * The connection is at the lane tail
   *
   * @generated from enum value: LANE_CONNECTION_TYPE_TAIL = 2;
   */
  TAIL = 2,
}

/**
 * TODO(张钧): 移除该项，重新设计公交地铁系统
 *
 * @generated from enum city.map.v2.AoiType
 */
export declare enum AoiType {
  /**
   * 未指定
   * unspecified
   *
   * @generated from enum value: AOI_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 公交站点
   * bus station
   *
   * @generated from enum value: AOI_TYPE_BUS_STATION = 1;
   */
  BUS_STATION = 1,

  /**
   * 其他
   * other
   *
   * @generated from enum value: AOI_TYPE_OTHER = 2;
   */
  OTHER = 2,
}

/**
 * 土地利用类型，参照国标GB/T 21010—2007
 * Land use type, refer to the national standard GB/T 21010-2007
 * http://www.gscloud.cn/static/cases/%E3%80%8A%E5%9C%9F%E5%9C%B0%E5%88%A9%E7%94%A8%E7%8E%B0%E7%8A%B6%E5%88%86%E7%B1%BB%E3%80%8B%E5%9B%BD%E5%AE%B6%E6%A0%87%E5%87%86gb_t21010-2007(1).pdf
 *
 * @generated from enum city.map.v2.LandUseType
 */
export declare enum LandUseType {
  /**
   * 未指定
   * unspecified
   *
   * @generated from enum value: LAND_USE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 商服用地
   * commercial land
   *
   * @generated from enum value: LAND_USE_TYPE_COMMERCIAL = 5;
   */
  COMMERCIAL = 5,

  /**
   * 工矿仓储用地
   * Industrial and storage land
   *
   * @generated from enum value: LAND_USE_TYPE_INDUSTRIAL = 6;
   */
  INDUSTRIAL = 6,

  /**
   * 住宅用地
   * residential land
   *
   * @generated from enum value: LAND_USE_TYPE_RESIDENTIAL = 7;
   */
  RESIDENTIAL = 7,

  /**
   * 公共管理与公共服务用地
   * Public management and public service land
   *
   * @generated from enum value: LAND_USE_TYPE_PUBLIC = 8;
   */
  PUBLIC = 8,

  /**
   * 交通运输用地
   * transportation land
   *
   * @generated from enum value: LAND_USE_TYPE_TRANSPORTATION = 10;
   */
  TRANSPORTATION = 10,

  /**
   * 其他土地
   * other land
   *
   * @generated from enum value: LAND_USE_TYPE_OTHER = 12;
   */
  OTHER = 12,
}

/**
 * 折线，用于定义车道等的形状
 * Polyline, used to define the shape of lanes, etc.
 *
 * @generated from message city.map.v2.Polyline
 */
export declare class Polyline extends Message<Polyline> {
  /**
   * 折线上的点
   * Points of the polyline
   *
   * @generated from field: repeated city.geo.v2.XYPosition nodes = 1;
   */
  nodes: XYPosition[];

  constructor(data?: PartialMessage<Polyline>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.Polyline";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Polyline;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Polyline;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Polyline;

  static equals(a: Polyline | PlainMessage<Polyline> | undefined, b: Polyline | PlainMessage<Polyline> | undefined): boolean;
}

/**
 * 地图元信息
 * Map meta information
 *
 * @generated from message city.map.v2.Header
 */
export declare class Header extends Message<Header> {
  /**
   * 地图名称
   * Map name
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * 地图创建时间
   * Map creation time
   *
   * @generated from field: string date = 2;
   */
  date: string;

  /**
   * 最大纬度对应的y坐标
   * y coordinate corresponding to the maximum latitude
   *
   * @generated from field: double north = 3;
   */
  north: number;

  /**
   * 最小纬度对应的y坐标
   * y coordinate corresponding to the minimum latitude
   *
   * @generated from field: double south = 4;
   */
  south: number;

  /**
   * 最大经度对应的x坐标
   * x coordinate corresponding to the maximum longitude
   *
   * @generated from field: double east = 5;
   */
  east: number;

  /**
   * 最小经度对应的x坐标
   * x coordinate corresponding to the minimum longitude
   *
   * @generated from field: double west = 6;
   */
  west: number;

  /**
   * PROJ.4 投影字符串，用以支持xy坐标到其他坐标系的转换
   * PROJ.4 projection string to support the conversion of xy coordinates to other coordinate systems
   *
   * @generated from field: string projection = 7;
   */
  projection: string;

  constructor(data?: PartialMessage<Header>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.Header";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Header;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Header;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Header;

  static equals(a: Header | PlainMessage<Header> | undefined, b: Header | PlainMessage<Header> | undefined): boolean;
}

/**
 * 两个lane的冲突区域
 * Conflict area between two lanes
 *
 * @generated from message city.map.v2.LaneOverlap
 */
export declare class LaneOverlap extends Message<LaneOverlap> {
  /**
   * 冲突点在本车道上的坐标
   * Coordinates of the conflict point on this lane
   *
   * @generated from field: city.geo.v2.LanePosition self = 1;
   */
  self?: LanePosition;

  /**
   * 冲突点在冲突车道上的坐标
   * Coordinates of the conflict point on the conflicted lane
   *
   * @generated from field: city.geo.v2.LanePosition other = 2;
   */
  other?: LanePosition;

  /**
   * 本车道是否有优先通行权
   * Whether this lane has priority
   *
   * @generated from field: bool self_first = 3;
   */
  selfFirst: boolean;

  constructor(data?: PartialMessage<LaneOverlap>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.LaneOverlap";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LaneOverlap;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LaneOverlap;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LaneOverlap;

  static equals(a: LaneOverlap | PlainMessage<LaneOverlap> | undefined, b: LaneOverlap | PlainMessage<LaneOverlap> | undefined): boolean;
}

/**
 * 车道连接信息
 * Lane connection information
 *
 * @generated from message city.map.v2.LaneConnection
 */
export declare class LaneConnection extends Message<LaneConnection> {
  /**
   * 所连接的车道Lane的ID
   * ID of the connected lane
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * 连接类型
   * Connection type
   *
   * @generated from field: city.map.v2.LaneConnectionType type = 2;
   */
  type: LaneConnectionType;

  constructor(data?: PartialMessage<LaneConnection>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.LaneConnection";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LaneConnection;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LaneConnection;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LaneConnection;

  static equals(a: LaneConnection | PlainMessage<LaneConnection> | undefined, b: LaneConnection | PlainMessage<LaneConnection> | undefined): boolean;
}

/**
 * Lane，用于描述道路上的车道、人行道等
 * Lane, used to describe lanes, sidewalks, etc. on the road
 *
 * @generated from message city.map.v2.Lane
 */
export declare class Lane extends Message<Lane> {
  /**
   * 车道id（从0开始）
   * lane id (starts from 0)
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * 车道类型
   * lane type
   *
   * @generated from field: city.map.v2.LaneType type = 2;
   */
  type: LaneType;

  /**
   * 车道转向
   * lane turn type
   *
   * @generated from field: city.map.v2.LaneTurn turn = 3;
   */
  turn: LaneTurn;

  /**
   * 限速 (m/s)
   * max speed (m/s)
   *
   * @generated from field: double max_speed = 4;
   */
  maxSpeed: number;

  /**
   * 中心线长度（单位：米）
   * centerline length (in meters)
   *
   * @generated from field: double length = 5;
   */
  length: number;

  /**
   * 车道宽度（单位：米）
   * lane width (in meters)
   *
   * @generated from field: double width = 6;
   */
  width: number;

  /**
   * 车道中心线（车辆/行车轨迹线）
   * Lane center line (vehicle/driving line)
   *
   * @generated from field: city.map.v2.Polyline center_line = 7;
   */
  centerLine?: Polyline;

  /**
   * 车道左边界线
   * Lane left boundary line
   *
   * 弃用 deprecated
   *
   * @generated from field: city.map.v2.Polyline left_border_line = 8 [deprecated = true];
   * @deprecated
   */
  leftBorderLine?: Polyline;

  /**
   * 车道右边界线
   * Lane right boundary line
   *
   * 弃用 deprecated
   *
   * @generated from field: city.map.v2.Polyline right_border_line = 9 [deprecated = true];
   * @deprecated
   */
  rightBorderLine?: Polyline;

  /**
   * Lanes can drive / walk from
   * 对于Junction内的车道至多1个前驱
   * For lanes within junction, there is at most 1 predecessor
   * 对于LANE_TYPE_DRIVING，连接类型必为LANE_CONNECTION_TYPE_TAIL
   * For LANE_TYPE_DRIVING, the connection type must be LANE_CONNECTION_TYPE_TAIL
   * 对于LANE_TYPE_WALKING连接类型，两种都有可能
   * For LANE_TYPE_WALKING, both connection types are possible
   *
   * @generated from field: repeated city.map.v2.LaneConnection predecessors = 10;
   */
  predecessors: LaneConnection[];

  /**
   * Lanes can drive / walk to
   * 对于Junction内的车道至多1个后继
   * For lanes within junction, there is at most 1 successor
   * 对于LANE_TYPE_DRIVING，连接类型必为LANE_CONNECTION_TYPE_HEAD
   * For LANE_TYPE_DRIVING, the connection type must be LANE_CONNECTION_TYPE_HEAD
   * 对于LANE_TYPE_WALKING连接类型，两种都有可能
   * For LANE_TYPE_WALKING, both connection types are possible
   *
   * @generated from field: repeated city.map.v2.LaneConnection successors = 11;
   */
  successors: LaneConnection[];

  /**
   * 左侧相邻车道（按从近到远排列）
   * Adjacent lanes on the left (arranged from nearest to far)
   *
   * @generated from field: repeated int32 left_lane_ids = 12;
   */
  leftLaneIds: number[];

  /**
   * 右侧相邻车道（按从近到远排列）
   * Adjacent lanes on the right (arranged from nearest to far)
   *
   * @generated from field: repeated int32 right_lane_ids = 13;
   */
  rightLaneIds: number[];

  /**
   * 所属的道路road id或路口junction id
   * The road id or junction id it belongs to
   *
   * @generated from field: int32 parent_id = 14;
   */
  parentId: number;

  /**
   * 车道之间的冲突点（仅在Junction内有效），保证按照self_s从小到大排序
   * Conflict points between lanes (valid only within Junction), guaranteed to be sorted from small to large according to self_s
   *
   * @generated from field: repeated city.map.v2.LaneOverlap overlaps = 15;
   */
  overlaps: LaneOverlap[];

  /**
   * 连接到该车道的所有AOI
   * All AOIs connected to this lane
   *
   * @generated from field: repeated int32 aoi_ids = 16;
   */
  aoiIds: number[];

  constructor(data?: PartialMessage<Lane>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.Lane";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Lane;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Lane;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Lane;

  static equals(a: Lane | PlainMessage<Lane> | undefined, b: Lane | PlainMessage<Lane> | undefined): boolean;
}

/**
 * @generated from message city.map.v2.NextRoadLane
 */
export declare class NextRoadLane extends Message<NextRoadLane> {
  /**
   * 下一条路的id
   * ID of the next road
   *
   * @generated from field: int32 road_id = 1;
   */
  roadId: number;

  /**
   * 我们假定能去往对应道路的车道id范围是连续的，用[a,b]表示
   * We assume that the range of lane IDs of the next road is continuous, represented by [a, b]
   *
   * @generated from field: int32 lane_id_a = 2;
   */
  laneIdA: number;

  /**
   * @generated from field: int32 lane_id_b = 3;
   */
  laneIdB: number;

  constructor(data?: PartialMessage<NextRoadLane>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.NextRoadLane";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NextRoadLane;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NextRoadLane;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NextRoadLane;

  static equals(a: NextRoadLane | PlainMessage<NextRoadLane> | undefined, b: NextRoadLane | PlainMessage<NextRoadLane> | undefined): boolean;
}

/**
 * @generated from message city.map.v2.NextRoadLanePlan
 */
export declare class NextRoadLanePlan extends Message<NextRoadLanePlan> {
  /**
   * 记录去往目标next_road的可行lane集合
   * set of feasible lanes for going to the next_road
   *
   * @generated from field: repeated city.map.v2.NextRoadLane next_road_lanes = 1;
   */
  nextRoadLanes: NextRoadLane[];

  constructor(data?: PartialMessage<NextRoadLanePlan>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.NextRoadLanePlan";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NextRoadLanePlan;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NextRoadLanePlan;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NextRoadLanePlan;

  static equals(a: NextRoadLanePlan | PlainMessage<NextRoadLanePlan> | undefined, b: NextRoadLanePlan | PlainMessage<NextRoadLanePlan> | undefined): boolean;
}

/**
 * Road，用于描述道路
 * Road, describing roads
 *
 * @generated from message city.map.v2.Road
 */
export declare class Road extends Message<Road> {
  /**
   * 道路id（从2_0000_0000开始）
   * Road ID (starting from 2_0000_0000)
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * 道路名字
   * road name
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * 属于该道路Road的所有车道/人行道等lane
   * All lanes/sidewalks belonging to the road
   * lane_id是按从最左侧车道到最右侧车道(从前进方向来看)的顺序给出的
   * lane_ids are given in order from the leftmost lane to the rightmost lane (viewed from the forward direction)
   *
   * @generated from field: repeated int32 lane_ids = 2;
   */
  laneIds: number[];

  /**
   * 对于包含动态车道的道路，需要通过这一项来指定所有的候选方案
   * For roads containing dynamic lanes, this is required to specify all candidates
   *
   * @generated from field: repeated city.map.v2.NextRoadLanePlan next_road_lane_plans = 3;
   */
  nextRoadLanePlans: NextRoadLanePlan[];

  constructor(data?: PartialMessage<Road>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.Road";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Road;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Road;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Road;

  static equals(a: Road | PlainMessage<Road> | undefined, b: Road | PlainMessage<Road> | undefined): boolean;
}

/**
 * 车道组，用于描述路口内的车道组合
 * Lane group, describing the combination of lanes within an intersection
 * 具有相同入口道路和出口道路的车道组成一个车道组
 * Lanes with the same entrance and exit roads form a lane group
 * 车道组是信控处理、路口通行的基本单元
 * Lane group is the basic unit for signal control and traffic in the junction.
 *
 * @generated from message city.map.v2.JunctionLaneGroup
 */
export declare class JunctionLaneGroup extends Message<JunctionLaneGroup> {
  /**
   * 该车道组的入口道路
   * The entrance road to this lane group
   *
   * @generated from field: int32 in_road_id = 1;
   */
  inRoadId: number;

  /**
   * 该车道组的入口角度（弧度制）
   * The entrance angle of this lane group (in radians)
   *
   * @generated from field: double in_angle = 2;
   */
  inAngle: number;

  /**
   * 该车道组的出口道路
   * The exit road for this lane group
   *
   * @generated from field: int32 out_road_id = 3;
   */
  outRoadId: number;

  /**
   * 该车道组的出口角度（弧度制）
   * The exit angle of this lane group (in radians)
   *
   * @generated from field: double out_angle = 4;
   */
  outAngle: number;

  /**
   * 该车道组包含的车道
   * Lanes in the group
   *
   * @generated from field: repeated int32 lane_ids = 5;
   */
  laneIds: number[];

  /**
   * 该车道组的转向属性
   * The turn type of this lane group
   *
   * @generated from field: city.map.v2.LaneTurn turn = 6;
   */
  turn: LaneTurn;

  constructor(data?: PartialMessage<JunctionLaneGroup>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.JunctionLaneGroup";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JunctionLaneGroup;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JunctionLaneGroup;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JunctionLaneGroup;

  static equals(a: JunctionLaneGroup | PlainMessage<JunctionLaneGroup> | undefined, b: JunctionLaneGroup | PlainMessage<JunctionLaneGroup> | undefined): boolean;
}

/**
 * Junction，用于描述路口
 * Junction, describing road intersections
 *
 * @generated from message city.map.v2.Junction
 */
export declare class Junction extends Message<Junction> {
  /**
   * 路口id（从3_0000_0000开始）
   * Junction id (starting from 3_0000_0000)
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * 属于该路口Junction的所有车道/人行道等lane
   * All driving/walking lanes belonging to this junction.
   *
   * @generated from field: repeated int32 lane_ids = 2;
   */
  laneIds: number[];

  /**
   * 属于该路口Junction的所有行车车道组
   * All driving lane groups belonging to this junction
   *
   * @generated from field: repeated city.map.v2.JunctionLaneGroup driving_lane_groups = 3;
   */
  drivingLaneGroups: JunctionLaneGroup[];

  constructor(data?: PartialMessage<Junction>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.Junction";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Junction;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Junction;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Junction;

  static equals(a: Junction | PlainMessage<Junction> | undefined, b: Junction | PlainMessage<Junction> | undefined): boolean;
}

/**
 * Aoi，用于描述地图上的区域
 * Aoi, describing a region on the map
 *
 * @generated from message city.map.v2.Aoi
 */
export declare class Aoi extends Message<Aoi> {
  /**
   * Aoi ID（从5_0000_0000开始）
   * Aoi ID (starting from 5_0000_0000)
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * Aoi名字
   * Aoi name
   *
   * @generated from field: string name = 11;
   */
  name: string;

  /**
   * Aoi类型
   * Aoi type
   *
   * @generated from field: city.map.v2.AoiType type = 2 [deprecated = true];
   * @deprecated
   */
  type: AoiType;

  /**
   * Aoi与行车路网的连接点
   * Connection point between Aoi and driving lanes
   *
   * @generated from field: repeated city.geo.v2.LanePosition driving_positions = 3;
   */
  drivingPositions: LanePosition[];

  /**
   * Aoi与步行路网的连接点
   * Connection point between Aoi and walking lanes
   *
   * @generated from field: repeated city.geo.v2.LanePosition walking_positions = 4;
   */
  walkingPositions: LanePosition[];

  /**
   * Aoi原始位置（如果只有一个值，则为Aoi所在的点，否则为Aoi多边形的边界）
   * Aoi original position (if there is only one value, it is the point where Aoi is located, otherwise it is the boundary of the Aoi polygon)
   *
   * @generated from field: repeated city.geo.v2.XYPosition positions = 5;
   */
  positions: XYPosition[];

  /**
   * Aoi与行车路网连接时在自身边界上的连接点, 与driving_positions按索引一一对应
   * The connection point on its own boundary when Aoi is connected to the driving lanes corresponds one-to-one with driving_positions by index.
   *
   * @generated from field: repeated city.geo.v2.XYPosition driving_gates = 6;
   */
  drivingGates: XYPosition[];

  /**
   * Aoi与步行路网连接时在自身边界上的连接点, 与walking_positions按索引一一对应
   * The connection point on its own boundary when Aoi is connected to the walking lanes corresponds one-to-one with walking_positions by index.
   *
   * @generated from field: repeated city.geo.v2.XYPosition walking_gates = 7;
   */
  walkingGates: XYPosition[];

  /**
   * Aoi面积, 若是Poi则无此字段
   * Aoi area, if it is Poi, there is no such field
   *
   * @generated from field: optional double area = 8;
   */
  area?: number;

  /**
   * 土地利用分类，若是Poi则无此字段
   * Land use type, if it is Poi, there is no such field
   *
   * @generated from field: optional city.map.v2.LandUseType land_use = 10;
   */
  landUse?: LandUseType;

  /**
   * Aoi包含的Poi
   * Pois contained in Aoi
   *
   * @generated from field: repeated int32 poi_ids = 9;
   */
  poiIds: number[];

  constructor(data?: PartialMessage<Aoi>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.Aoi";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Aoi;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Aoi;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Aoi;

  static equals(a: Aoi | PlainMessage<Aoi> | undefined, b: Aoi | PlainMessage<Aoi> | undefined): boolean;
}

/**
 * Poi，用于描述地图上的兴趣点
 * Poi, describing points of interest on the map
 *
 * @generated from message city.map.v2.Poi
 */
export declare class Poi extends Message<Poi> {
  /**
   * Poi id(从7_0000_0000开始)
   * Poi id (starting from 7_0000_0000)
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * Poi名称
   * Poi name
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Poi分类编码
   * Poi category code
   *
   * @generated from field: string category = 3;
   */
  category: string;

  /**
   * Poi原始位置
   * Poi original position
   *
   * @generated from field: city.geo.v2.XYPosition position = 4;
   */
  position?: XYPosition;

  /**
   * Poi所属的Aoi
   * Aoi to which the Poi belongs
   *
   * @generated from field: int32 aoi_id = 5;
   */
  aoiId: number;

  /**
   * Poi的容量（能同时容纳的人数），若无则表示无人数限制
   * The capacity of Poi (the number of people it can accommodate at the same time), if none, it means there is no limit on the number of people
   *
   * @generated from field: optional int32 capacity = 6;
   */
  capacity?: number;

  /**
   * Poi所能提供的功能
   * The functions the Poi can offer
   *
   * @generated from field: repeated string functions = 7;
   */
  functions: string[];

  constructor(data?: PartialMessage<Poi>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.Poi";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Poi;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Poi;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Poi;

  static equals(a: Poi | PlainMessage<Poi> | undefined, b: Poi | PlainMessage<Poi> | undefined): boolean;
}

/**
 * 地图，对应一个地图pb文件或一个地图mongodb collection
 * Map, corresponding to a map pb file or a map MongoDB collection
 *
 * @generated from message city.map.v2.Map
 */
export declare class Map extends Message<Map> {
  /**
   * @generated from field: city.map.v2.Header header = 1;
   */
  header?: Header;

  /**
   * @generated from field: repeated city.map.v2.Lane lanes = 2;
   */
  lanes: Lane[];

  /**
   * @generated from field: repeated city.map.v2.Road roads = 3;
   */
  roads: Road[];

  /**
   * @generated from field: repeated city.map.v2.Junction junctions = 4;
   */
  junctions: Junction[];

  /**
   * @generated from field: repeated city.map.v2.Aoi aois = 5;
   */
  aois: Aoi[];

  /**
   * @generated from field: repeated city.map.v2.Poi pois = 6;
   */
  pois: Poi[];

  constructor(data?: PartialMessage<Map>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.map.v2.Map";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Map;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Map;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Map;

  static equals(a: Map | PlainMessage<Map> | undefined, b: Map | PlainMessage<Map> | undefined): boolean;
}

