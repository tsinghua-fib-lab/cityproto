// @generated by protoc-gen-es v1.6.0
// @generated from file city/map/v2/map.proto (package city.map.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { LanePosition, XYPosition } from "../../geo/v2/geo_pb.js";

/**
 * 车道类型
 * Lane type
 *
 * @generated from enum city.map.v2.LaneType
 */
export const LaneType = proto3.makeEnum(
  "city.map.v2.LaneType",
  [
    {no: 0, name: "LANE_TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "LANE_TYPE_DRIVING", localName: "DRIVING"},
    {no: 2, name: "LANE_TYPE_WALKING", localName: "WALKING"},
  ],
);

/**
 * 车道转向
 * lane turn type
 *
 * @generated from enum city.map.v2.LaneTurn
 */
export const LaneTurn = proto3.makeEnum(
  "city.map.v2.LaneTurn",
  [
    {no: 0, name: "LANE_TURN_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "LANE_TURN_STRAIGHT", localName: "STRAIGHT"},
    {no: 2, name: "LANE_TURN_LEFT", localName: "LEFT"},
    {no: 3, name: "LANE_TURN_RIGHT", localName: "RIGHT"},
    {no: 4, name: "LANE_TURN_AROUND", localName: "AROUND"},
  ],
);

/**
 * 车道连接类型
 * Lane connection type
 *
 * @generated from enum city.map.v2.LaneConnectionType
 */
export const LaneConnectionType = proto3.makeEnum(
  "city.map.v2.LaneConnectionType",
  [
    {no: 0, name: "LANE_CONNECTION_TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "LANE_CONNECTION_TYPE_HEAD", localName: "HEAD"},
    {no: 2, name: "LANE_CONNECTION_TYPE_TAIL", localName: "TAIL"},
  ],
);

/**
 * TODO(张钧): 移除该项，重新设计公交地铁系统
 *
 * @generated from enum city.map.v2.AoiType
 */
export const AoiType = proto3.makeEnum(
  "city.map.v2.AoiType",
  [
    {no: 0, name: "AOI_TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "AOI_TYPE_BUS_STATION", localName: "BUS_STATION"},
    {no: 2, name: "AOI_TYPE_OTHER", localName: "OTHER"},
  ],
);

/**
 * 土地利用类型，参照国标GB/T 21010—2007
 * Land use type, refer to the national standard GB/T 21010-2007
 * http://www.gscloud.cn/static/cases/%E3%80%8A%E5%9C%9F%E5%9C%B0%E5%88%A9%E7%94%A8%E7%8E%B0%E7%8A%B6%E5%88%86%E7%B1%BB%E3%80%8B%E5%9B%BD%E5%AE%B6%E6%A0%87%E5%87%86gb_t21010-2007(1).pdf
 *
 * @generated from enum city.map.v2.LandUseType
 */
export const LandUseType = proto3.makeEnum(
  "city.map.v2.LandUseType",
  [
    {no: 0, name: "LAND_USE_TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 5, name: "LAND_USE_TYPE_COMMERCIAL", localName: "COMMERCIAL"},
    {no: 6, name: "LAND_USE_TYPE_INDUSTRIAL", localName: "INDUSTRIAL"},
    {no: 7, name: "LAND_USE_TYPE_RESIDENTIAL", localName: "RESIDENTIAL"},
    {no: 8, name: "LAND_USE_TYPE_PUBLIC", localName: "PUBLIC"},
    {no: 10, name: "LAND_USE_TYPE_TRANSPORTATION", localName: "TRANSPORTATION"},
    {no: 12, name: "LAND_USE_TYPE_OTHER", localName: "OTHER"},
  ],
);

/**
 * 折线，用于定义车道等的形状
 * Polyline, used to define the shape of lanes, etc.
 *
 * @generated from message city.map.v2.Polyline
 */
export const Polyline = proto3.makeMessageType(
  "city.map.v2.Polyline",
  () => [
    { no: 1, name: "nodes", kind: "message", T: XYPosition, repeated: true },
  ],
);

/**
 * 地图元信息
 * Map meta information
 *
 * @generated from message city.map.v2.Header
 */
export const Header = proto3.makeMessageType(
  "city.map.v2.Header",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "north", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "south", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "east", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "west", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "projection", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * 两个lane的冲突区域
 * Conflict area between two lanes
 *
 * @generated from message city.map.v2.LaneOverlap
 */
export const LaneOverlap = proto3.makeMessageType(
  "city.map.v2.LaneOverlap",
  () => [
    { no: 1, name: "self", kind: "message", T: LanePosition },
    { no: 2, name: "other", kind: "message", T: LanePosition },
    { no: 3, name: "self_first", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * 车道连接信息
 * Lane connection information
 *
 * @generated from message city.map.v2.LaneConnection
 */
export const LaneConnection = proto3.makeMessageType(
  "city.map.v2.LaneConnection",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(LaneConnectionType) },
  ],
);

/**
 * Lane，用于描述道路上的车道、人行道等
 * Lane, used to describe lanes, sidewalks, etc. on the road
 *
 * @generated from message city.map.v2.Lane
 */
export const Lane = proto3.makeMessageType(
  "city.map.v2.Lane",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(LaneType) },
    { no: 3, name: "turn", kind: "enum", T: proto3.getEnumType(LaneTurn) },
    { no: 4, name: "max_speed", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "length", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "width", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "center_line", kind: "message", T: Polyline },
    { no: 8, name: "left_border_line", kind: "message", T: Polyline },
    { no: 9, name: "right_border_line", kind: "message", T: Polyline },
    { no: 10, name: "predecessors", kind: "message", T: LaneConnection, repeated: true },
    { no: 11, name: "successors", kind: "message", T: LaneConnection, repeated: true },
    { no: 12, name: "left_lane_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 13, name: "right_lane_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 14, name: "parent_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "overlaps", kind: "message", T: LaneOverlap, repeated: true },
    { no: 16, name: "aoi_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ],
);

/**
 * @generated from message city.map.v2.NextRoadLane
 */
export const NextRoadLane = proto3.makeMessageType(
  "city.map.v2.NextRoadLane",
  () => [
    { no: 1, name: "road_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "lane_id_a", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "lane_id_b", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * @generated from message city.map.v2.NextRoadLanePlan
 */
export const NextRoadLanePlan = proto3.makeMessageType(
  "city.map.v2.NextRoadLanePlan",
  () => [
    { no: 1, name: "next_road_lanes", kind: "message", T: NextRoadLane, repeated: true },
  ],
);

/**
 * Road，用于描述道路
 * Road, describing roads
 *
 * @generated from message city.map.v2.Road
 */
export const Road = proto3.makeMessageType(
  "city.map.v2.Road",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lane_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 3, name: "next_road_lane_plans", kind: "message", T: NextRoadLanePlan, repeated: true },
  ],
);

/**
 * 车道组，用于描述路口内的车道组合
 * Lane group, describing the combination of lanes within an intersection
 * 具有相同入口道路和出口道路的车道组成一个车道组
 * Lanes with the same entrance and exit roads form a lane group
 * 车道组是信控处理、路口通行的基本单元
 * Lane group is the basic unit for signal control and traffic in the junction.
 *
 * @generated from message city.map.v2.JunctionLaneGroup
 */
export const JunctionLaneGroup = proto3.makeMessageType(
  "city.map.v2.JunctionLaneGroup",
  () => [
    { no: 1, name: "in_road_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "in_angle", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "out_road_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "out_angle", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "lane_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 6, name: "turn", kind: "enum", T: proto3.getEnumType(LaneTurn) },
  ],
);

/**
 * Junction，用于描述路口
 * Junction, describing road intersections
 *
 * @generated from message city.map.v2.Junction
 */
export const Junction = proto3.makeMessageType(
  "city.map.v2.Junction",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "lane_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 3, name: "driving_lane_groups", kind: "message", T: JunctionLaneGroup, repeated: true },
  ],
);

/**
 * Aoi，用于描述地图上的区域
 * Aoi, describing a region on the map
 *
 * @generated from message city.map.v2.Aoi
 */
export const Aoi = proto3.makeMessageType(
  "city.map.v2.Aoi",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(AoiType) },
    { no: 3, name: "driving_positions", kind: "message", T: LanePosition, repeated: true },
    { no: 4, name: "walking_positions", kind: "message", T: LanePosition, repeated: true },
    { no: 5, name: "positions", kind: "message", T: XYPosition, repeated: true },
    { no: 6, name: "driving_gates", kind: "message", T: XYPosition, repeated: true },
    { no: 7, name: "walking_gates", kind: "message", T: XYPosition, repeated: true },
    { no: 8, name: "area", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 10, name: "land_use", kind: "enum", T: proto3.getEnumType(LandUseType), opt: true },
    { no: 9, name: "poi_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ],
);

/**
 * Poi，用于描述地图上的兴趣点
 * Poi, describing points of interest on the map
 *
 * @generated from message city.map.v2.Poi
 */
export const Poi = proto3.makeMessageType(
  "city.map.v2.Poi",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "position", kind: "message", T: XYPosition },
    { no: 5, name: "aoi_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "capacity", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 7, name: "functions", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * 地图，对应一个地图pb文件或一个地图mongodb collection
 * Map, corresponding to a map pb file or a map MongoDB collection
 *
 * @generated from message city.map.v2.Map
 */
export const Map = proto3.makeMessageType(
  "city.map.v2.Map",
  () => [
    { no: 1, name: "header", kind: "message", T: Header },
    { no: 2, name: "lanes", kind: "message", T: Lane, repeated: true },
    { no: 3, name: "roads", kind: "message", T: Road, repeated: true },
    { no: 4, name: "junctions", kind: "message", T: Junction, repeated: true },
    { no: 5, name: "aois", kind: "message", T: Aoi, repeated: true },
    { no: 6, name: "pois", kind: "message", T: Poi, repeated: true },
  ],
);

