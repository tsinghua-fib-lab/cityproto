// @generated by protoc-gen-connect-es v1.5.0
// @generated from file city/sync/v2/sync_service.proto (package city.sync.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { EnterStepSyncRequest, EnterStepSyncResponse, ExitStepSyncRequest, ExitStepSyncResponse, GetURLRequest, GetURLResponse, SetURLRequest, SetURLResponse } from "./sync_service_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service city.sync.v2.SyncService
 */
export declare const SyncService: {
  readonly typeName: "city.sync.v2.SyncService",
  readonly methods: {
    /**
     * 注册程序URL
     *
     * @generated from rpc city.sync.v2.SyncService.SetURL
     */
    readonly setURL: {
      readonly name: "SetURL",
      readonly I: typeof SetURLRequest,
      readonly O: typeof SetURLResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * 获取程序URL
     *
     * @generated from rpc city.sync.v2.SyncService.GetURL
     */
    readonly getURL: {
      readonly name: "GetURL",
      readonly I: typeof GetURLRequest,
      readonly O: typeof GetURLResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * 程序完成本步所有操作，进入同步状态。
     * 要求：进入同步状态的程序不再向其他程序发送消息，直到下一步开始。
     *
     * @generated from rpc city.sync.v2.SyncService.EnterStepSync
     */
    readonly enterStepSync: {
      readonly name: "EnterStepSync",
      readonly I: typeof EnterStepSyncRequest,
      readonly O: typeof EnterStepSyncResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * 程序完成同步阶段（无通信的安全区域）中必要的处理，如为prepare阶段加锁，可以进入准备阶段（恢复通信）。
     *
     * @generated from rpc city.sync.v2.SyncService.ExitStepSync
     */
    readonly exitStepSync: {
      readonly name: "ExitStepSync",
      readonly I: typeof ExitStepSyncRequest,
      readonly O: typeof ExitStepSyncResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

