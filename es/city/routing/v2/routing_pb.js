// @generated by protoc-gen-es v1.6.0
// @generated from file city/routing/v2/routing.proto (package city.routing.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * 导航请求类型
 * routing type
 *
 * @generated from enum city.routing.v2.RouteType
 */
export const RouteType = proto3.makeEnum(
  "city.routing.v2.RouteType",
  [
    {no: 0, name: "ROUTE_TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "ROUTE_TYPE_DRIVING", localName: "DRIVING"},
    {no: 2, name: "ROUTE_TYPE_WALKING", localName: "WALKING"},
    {no: 3, name: "ROUTE_TYPE_BY_BUS", localName: "BY_BUS"},
  ],
);

/**
 * 移动方式
 * travelling mode
 * Journey用以描述采用一种特定交通方式从一点出发到达另一点的路径。
 * Journey is used to describe the path from one point to another using one specific travelling mode
 * 一般来说，多个Journey是一个Trip的“实现”。
 * Generally, multiple Journeys are used to "implement" a Trip
 * 例如：Trip(从清华乘地铁到天安门):
 * For example: Trip (taking the subway from Tsinghua to Tiananmen Square):
 * Journey(步行到地铁站)->Journey(地铁)->Journey(步行到天安门)
 * Journey (walking to subway station) -> Journey (subway) -> Journey (walking to Tiananmen Square)
 *
 * @generated from enum city.routing.v2.JourneyType
 */
export const JourneyType = proto3.makeEnum(
  "city.routing.v2.JourneyType",
  [
    {no: 0, name: "JOURNEY_TYPE_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "JOURNEY_TYPE_DRIVING", localName: "DRIVING"},
    {no: 2, name: "JOURNEY_TYPE_WALKING", localName: "WALKING"},
    {no: 3, name: "JOURNEY_TYPE_BY_BUS", localName: "BY_BUS"},
  ],
);

/**
 * 步行移动方向
 * Walking direction
 * 行人前进的方向与Lane的正方向（s增大的方向）的关系
 * The relationship between the direction of pedestrian movement and the positive direction of Lane (the direction where s increases)
 *
 * @generated from enum city.routing.v2.MovingDirection
 */
export const MovingDirection = proto3.makeEnum(
  "city.routing.v2.MovingDirection",
  [
    {no: 0, name: "MOVING_DIRECTION_UNSPECIFIED", localName: "UNSPECIFIED"},
    {no: 1, name: "MOVING_DIRECTION_FORWARD", localName: "FORWARD"},
    {no: 2, name: "MOVING_DIRECTION_BACKWARD", localName: "BACKWARD"},
  ],
);

/**
 * 驾车出行方式的路径规划结果
 * Routing results for driving journey
 *
 * @generated from message city.routing.v2.DrivingJourneyBody
 */
export const DrivingJourneyBody = proto3.makeMessageType(
  "city.routing.v2.DrivingJourneyBody",
  () => [
    { no: 2, name: "road_ids", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 3, name: "eta", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ],
);

/**
 * 步行出行方式的路径规划结果中的一段
 * A segment in the routing results of walking journey
 *
 * @generated from message city.routing.v2.WalkingRouteSegment
 */
export const WalkingRouteSegment = proto3.makeMessageType(
  "city.routing.v2.WalkingRouteSegment",
  () => [
    { no: 1, name: "lane_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "moving_direction", kind: "enum", T: proto3.getEnumType(MovingDirection) },
  ],
);

/**
 * 步行出行方式的路径规划结果
 * Routing results of walking journey
 *
 * @generated from message city.routing.v2.WalkingJourneyBody
 */
export const WalkingJourneyBody = proto3.makeMessageType(
  "city.routing.v2.WalkingJourneyBody",
  () => [
    { no: 1, name: "route", kind: "message", T: WalkingRouteSegment, repeated: true },
    { no: 2, name: "eta", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ],
);

/**
 * @generated from message city.routing.v2.BusJourneyBody
 */
export const BusJourneyBody = proto3.makeMessageType(
  "city.routing.v2.BusJourneyBody",
  () => [
    { no: 1, name: "line_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "start_station_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "end_station_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * 路径规划结果的一部分，含且仅含采用一种交通出行方式的完整出行序列
 * Part of the routing results, including a complete travel sequence using exactly one travelling mode
 *
 * @generated from message city.routing.v2.Journey
 */
export const Journey = proto3.makeMessageType(
  "city.routing.v2.Journey",
  () => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(JourneyType) },
    { no: 2, name: "driving", kind: "message", T: DrivingJourneyBody, opt: true },
    { no: 3, name: "walking", kind: "message", T: WalkingJourneyBody, opt: true },
    { no: 4, name: "by_bus", kind: "message", T: BusJourneyBody, opt: true },
  ],
);

/**
 * 公交线路
 * Bus line
 *
 * @generated from message city.routing.v2.BusLine
 */
export const BusLine = proto3.makeMessageType(
  "city.routing.v2.BusLine",
  () => [
    { no: 1, name: "line_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "stops", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 3, name: "distances", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 4, name: "interval", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ],
);

/**
 * 公交线路集合，对应一个公交线路pb文件或一个公交线路mongodb collection
 * Bus lines collection, corresponding to a bus line PB file or a bus line mongodb collection
 *
 * @generated from message city.routing.v2.BusLines
 */
export const BusLines = proto3.makeMessageType(
  "city.routing.v2.BusLines",
  () => [
    { no: 1, name: "lines", kind: "message", T: BusLine, repeated: true },
  ],
);

/**
 * 预计算路况信息
 * Pre calculate road condition information
 *
 * @generated from message city.routing.v2.RoadStatus
 */
export const RoadStatus = proto3.makeMessageType(
  "city.routing.v2.RoadStatus",
  () => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "speed", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
  ],
);

/**
 * 预计算道路路况信息集合，对应一个预计算道路况信息pb文件或一个预计算路况信息mongodb collection
 * Pre calculated road condition information set, corresponding to a pre calculated road condition information PB file or a pre calculated road condition information mongodb collection
 *
 * @generated from message city.routing.v2.RoadStatuses
 */
export const RoadStatuses = proto3.makeMessageType(
  "city.routing.v2.RoadStatuses",
  () => [
    { no: 1, name: "road_statuses", kind: "message", T: RoadStatus, repeated: true },
  ],
);

