// @generated by protoc-gen-es v1.10.0
// @generated from file city/routing/v2/routing.proto (package city.routing.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * 导航请求类型
 * routing type
 *
 * @generated from enum city.routing.v2.RouteType
 */
export declare enum RouteType {
  /**
   * 未指定
   * unspecified
   *
   * @generated from enum value: ROUTE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 驾车
   * driving
   *
   * @generated from enum value: ROUTE_TYPE_DRIVING = 1;
   */
  DRIVING = 1,

  /**
   * 步行
   * walking
   *
   * @generated from enum value: ROUTE_TYPE_WALKING = 2;
   */
  WALKING = 2,

  /**
   * 公交
   * by bus
   *
   * @generated from enum value: ROUTE_TYPE_BUS = 3;
   */
  BUS = 3,

  /**
   * 地铁
   * by subway
   *
   * @generated from enum value: ROUTE_TYPE_SUBWAY = 4;
   */
  SUBWAY = 4,

  /**
   * 地铁+公交，包含两者的换乘
   * both bus and subway are available, including multimodal transfers
   *
   * @generated from enum value: ROUTE_TYPE_BUS_SUBWAY = 5;
   */
  BUS_SUBWAY = 5,
}

/**
 * 移动方式
 * travelling mode
 * Journey用以描述采用一种特定交通方式从一点出发到达另一点的路径。
 * Journey is used to describe the path from one point to another using one specific travelling mode
 * 一般来说，多个Journey是一个Trip的“实现”。
 * Generally, multiple Journeys are used to "implement" a Trip
 * 例如：Trip(从清华乘地铁到天安门):
 * For example: Trip (taking the subway from Tsinghua to Tiananmen Square):
 * Journey(步行到地铁站)->Journey(地铁)->Journey(步行到天安门)
 * Journey (walking to subway station) -> Journey (subway) -> Journey (walking to Tiananmen Square)
 *
 * @generated from enum city.routing.v2.JourneyType
 */
export declare enum JourneyType {
  /**
   * 未指定
   * unspecified
   *
   * @generated from enum value: JOURNEY_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 驾车
   * driving
   *
   * @generated from enum value: JOURNEY_TYPE_DRIVING = 1;
   */
  DRIVING = 1,

  /**
   * 步行
   * walking
   *
   * @generated from enum value: JOURNEY_TYPE_WALKING = 2;
   */
  WALKING = 2,

  /**
   * 公交
   * taking bus
   *
   * @generated from enum value: JOURNEY_TYPE_BY_BUS = 3;
   */
  BY_BUS = 3,
}

/**
 * 步行移动方向
 * Walking direction
 * 行人前进的方向与Lane的正方向（s增大的方向）的关系
 * The relationship between the direction of pedestrian movement and the positive direction of Lane (the direction where s increases)
 *
 * @generated from enum city.routing.v2.MovingDirection
 */
export declare enum MovingDirection {
  /**
   * 未指定
   * unspecified
   *
   * @generated from enum value: MOVING_DIRECTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 与正方向同向
   * In the same direction as the positive lane direction
   *
   * @generated from enum value: MOVING_DIRECTION_FORWARD = 1;
   */
  FORWARD = 1,

  /**
   * 与正方向反向
   * In the opposite direction as the positive lane direction
   *
   * @generated from enum value: MOVING_DIRECTION_BACKWARD = 2;
   */
  BACKWARD = 2,
}

/**
 * 驾车出行方式的路径规划结果
 * Routing results for driving journey
 *
 * @generated from message city.routing.v2.DrivingJourneyBody
 */
export declare class DrivingJourneyBody extends Message<DrivingJourneyBody> {
  /**
   * 从起点到终点的道路序列
   * Road sequence from origin to destination
   * 采用道路序列的原因是主动变道对车道级的导航需要频繁修改
   * The reason for using road sequences is that active lane changing requires frequent modifications to lane level navigation
   * 优先使用road_ids，如果road_ids为空，则使用route（也可以直接忽略route）
   * Prioritize using road_ids. If road_ids is empty, use route (or simply ignore route)
   *
   * @generated from field: repeated int32 road_ids = 2;
   */
  roadIds: number[];

  /**
   * 从起点到终点预计的时间(estimation time of arrival)
   * estimation time of arrival
   *
   * @generated from field: double eta = 3;
   */
  eta: number;

  constructor(data?: PartialMessage<DrivingJourneyBody>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.routing.v2.DrivingJourneyBody";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DrivingJourneyBody;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DrivingJourneyBody;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DrivingJourneyBody;

  static equals(a: DrivingJourneyBody | PlainMessage<DrivingJourneyBody> | undefined, b: DrivingJourneyBody | PlainMessage<DrivingJourneyBody> | undefined): boolean;
}

/**
 * 步行出行方式的路径规划结果中的一段
 * A segment in the routing results of walking journey
 *
 * @generated from message city.routing.v2.WalkingRouteSegment
 */
export declare class WalkingRouteSegment extends Message<WalkingRouteSegment> {
  /**
   * Lane ID
   *
   * @generated from field: int32 lane_id = 1;
   */
  laneId: number;

  /**
   * 移动方向
   * moving direction
   *
   * @generated from field: city.routing.v2.MovingDirection moving_direction = 2;
   */
  movingDirection: MovingDirection;

  constructor(data?: PartialMessage<WalkingRouteSegment>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.routing.v2.WalkingRouteSegment";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WalkingRouteSegment;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WalkingRouteSegment;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WalkingRouteSegment;

  static equals(a: WalkingRouteSegment | PlainMessage<WalkingRouteSegment> | undefined, b: WalkingRouteSegment | PlainMessage<WalkingRouteSegment> | undefined): boolean;
}

/**
 * 步行出行方式的路径规划结果
 * Routing results of walking journey
 *
 * @generated from message city.routing.v2.WalkingJourneyBody
 */
export declare class WalkingJourneyBody extends Message<WalkingJourneyBody> {
  /**
   * 从起点到终点的（Lane+方向）序列
   * The (Lane+direction) sequence from the origin to destination
   *
   * @generated from field: repeated city.routing.v2.WalkingRouteSegment route = 1;
   */
  route: WalkingRouteSegment[];

  /**
   * 从起点到终点预计的时间(estimation time of arrival)
   * estimation time of arrival
   *
   * @generated from field: double eta = 2;
   */
  eta: number;

  constructor(data?: PartialMessage<WalkingJourneyBody>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.routing.v2.WalkingJourneyBody";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WalkingJourneyBody;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WalkingJourneyBody;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WalkingJourneyBody;

  static equals(a: WalkingJourneyBody | PlainMessage<WalkingJourneyBody> | undefined, b: WalkingJourneyBody | PlainMessage<WalkingJourneyBody> | undefined): boolean;
}

/**
 * message BusJourneyBody {
 *   int32 line_id = 1;
 *   int32 start_station_id = 2;
 *   int32 end_station_id = 3;
 * }
 *
 * @generated from message city.routing.v2.TransferSegment
 */
export declare class TransferSegment extends Message<TransferSegment> {
  /**
   * @generated from field: int32 subline_id = 1;
   */
  sublineId: number;

  /**
   * @generated from field: int32 start_station_id = 2;
   */
  startStationId: number;

  /**
   * @generated from field: int32 end_station_id = 3;
   */
  endStationId: number;

  constructor(data?: PartialMessage<TransferSegment>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.routing.v2.TransferSegment";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransferSegment;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransferSegment;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransferSegment;

  static equals(a: TransferSegment | PlainMessage<TransferSegment> | undefined, b: TransferSegment | PlainMessage<TransferSegment> | undefined): boolean;
}

/**
 * @generated from message city.routing.v2.BusJourneyBody
 */
export declare class BusJourneyBody extends Message<BusJourneyBody> {
  /**
   * @generated from field: repeated city.routing.v2.TransferSegment transfers = 1;
   */
  transfers: TransferSegment[];

  /**
   * 从起点到终点预计的时间(estimation time of arrival)
   * estimation time of arrival
   *
   * @generated from field: double eta = 2;
   */
  eta: number;

  constructor(data?: PartialMessage<BusJourneyBody>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.routing.v2.BusJourneyBody";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BusJourneyBody;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BusJourneyBody;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BusJourneyBody;

  static equals(a: BusJourneyBody | PlainMessage<BusJourneyBody> | undefined, b: BusJourneyBody | PlainMessage<BusJourneyBody> | undefined): boolean;
}

/**
 * 路径规划结果的一部分，含且仅含采用一种交通出行方式的完整出行序列
 * Part of the routing results, including a complete travel sequence using exactly one travelling mode
 *
 * @generated from message city.routing.v2.Journey
 */
export declare class Journey extends Message<Journey> {
  /**
   * 出行方式
   * journey travelling mode
   *
   * @generated from field: city.routing.v2.JourneyType type = 1;
   */
  type: JourneyType;

  /**
   * 驾车
   * Routing results for driving journey
   *
   * @generated from field: optional city.routing.v2.DrivingJourneyBody driving = 2;
   */
  driving?: DrivingJourneyBody;

  /**
   * 步行
   * Routing results of walking journey
   *
   * @generated from field: optional city.routing.v2.WalkingJourneyBody walking = 3;
   */
  walking?: WalkingJourneyBody;

  /**
   * 公交
   * Routing results of bus journey
   *
   * @generated from field: optional city.routing.v2.BusJourneyBody by_bus = 4;
   */
  byBus?: BusJourneyBody;

  constructor(data?: PartialMessage<Journey>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.routing.v2.Journey";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Journey;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Journey;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Journey;

  static equals(a: Journey | PlainMessage<Journey> | undefined, b: Journey | PlainMessage<Journey> | undefined): boolean;
}

/**
 * 预计算路况信息
 * Pre calculate road condition information
 *
 * @generated from message city.routing.v2.RoadStatus
 */
export declare class RoadStatus extends Message<RoadStatus> {
  /**
   * 车道ID
   * Lane ID
   *
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * 车道在各个时间片（每个5min）的速度
   * The speed of the lane at each time slot (5 minutes each)
   *
   * @generated from field: repeated double speed = 2;
   */
  speed: number[];

  constructor(data?: PartialMessage<RoadStatus>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.routing.v2.RoadStatus";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoadStatus;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoadStatus;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoadStatus;

  static equals(a: RoadStatus | PlainMessage<RoadStatus> | undefined, b: RoadStatus | PlainMessage<RoadStatus> | undefined): boolean;
}

/**
 * 预计算道路路况信息集合，对应一个预计算道路况信息pb文件或一个预计算路况信息mongodb collection
 * Pre calculated road condition information set, corresponding to a pre calculated road condition information PB file or a pre calculated road condition information mongodb collection
 *
 * @generated from message city.routing.v2.RoadStatuses
 */
export declare class RoadStatuses extends Message<RoadStatuses> {
  /**
   * @generated from field: repeated city.routing.v2.RoadStatus road_statuses = 1;
   */
  roadStatuses: RoadStatus[];

  constructor(data?: PartialMessage<RoadStatuses>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.routing.v2.RoadStatuses";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoadStatuses;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoadStatuses;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoadStatuses;

  static equals(a: RoadStatuses | PlainMessage<RoadStatuses> | undefined, b: RoadStatuses | PlainMessage<RoadStatuses> | undefined): boolean;
}

