// @generated by protoc-gen-es v1.10.0
// @generated from file city/water/output/v1/output.proto (package city.water.output.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { LongLatPosition } from "../../../geo/v2/geo_pb.js";

/**
 * @generated from enum city.water.output.v1.LinkType
 */
export declare enum LinkType {
  /**
   * @generated from enum value: LINK_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LINK_TYPE_PIPE = 1;
   */
  PIPE = 1,

  /**
   * @generated from enum value: LINK_TYPE_PUMP = 2;
   */
  PUMP = 2,
}

/**
 * 宏观道路水深
 *
 * @generated from message city.water.output.v1.Road
 */
export declare class Road extends Message<Road> {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from field: double depth = 2;
   */
  depth: number;

  constructor(data?: PartialMessage<Road>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.water.output.v1.Road";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Road;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Road;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Road;

  static equals(a: Road | PlainMessage<Road> | undefined, b: Road | PlainMessage<Road> | undefined): boolean;
}

/**
 * 微观水深点
 *
 * @generated from message city.water.output.v1.RoadFlood
 */
export declare class RoadFlood extends Message<RoadFlood> {
  /**
   * @generated from field: city.geo.v2.LongLatPosition position = 1;
   */
  position?: LongLatPosition;

  /**
   * @generated from field: double depth = 2;
   */
  depth: number;

  constructor(data?: PartialMessage<RoadFlood>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.water.output.v1.RoadFlood";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoadFlood;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoadFlood;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoadFlood;

  static equals(a: RoadFlood | PlainMessage<RoadFlood> | undefined, b: RoadFlood | PlainMessage<RoadFlood> | undefined): boolean;
}

/**
 * @generated from message city.water.output.v1.DetailedRoad
 */
export declare class DetailedRoad extends Message<DetailedRoad> {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * @generated from field: repeated city.water.output.v1.RoadFlood depths = 2;
   */
  depths: RoadFlood[];

  constructor(data?: PartialMessage<DetailedRoad>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.water.output.v1.DetailedRoad";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DetailedRoad;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DetailedRoad;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DetailedRoad;

  static equals(a: DetailedRoad | PlainMessage<DetailedRoad> | undefined, b: DetailedRoad | PlainMessage<DetailedRoad> | undefined): boolean;
}

/**
 * 节点状态
 *
 * @generated from message city.water.output.v1.Node
 */
export declare class Node extends Message<Node> {
  /**
   * Node分两种, junction和outfall, outfall的id将以"_out"后缀
   * 但输出不关心NodeType, 不需用type字段显示记录
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * 水头，单位：米
   *
   * @generated from field: double head = 2;
   */
  head: number;

  constructor(data?: PartialMessage<Node>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.water.output.v1.Node";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node;

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean;
}

/**
 * 边的状态
 *
 * @generated from message city.water.output.v1.Link
 */
export declare class Link extends Message<Link> {
  /**
   * type为LINK_TYPE_PUMP的id将以"Pump_"前缀
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: city.water.output.v1.LinkType type = 2;
   */
  type: LinkType;

  /**
   * 流量
   * 排水网，单位：m3/s
   * 供水网，单位：L/s
   *
   * @generated from field: double flow = 3;
   */
  flow: number;

  /**
   * @generated from field: bool ok = 4;
   */
  ok: boolean;

  constructor(data?: PartialMessage<Link>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.water.output.v1.Link";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Link;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Link;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Link;

  static equals(a: Link | PlainMessage<Link> | undefined, b: Link | PlainMessage<Link> | undefined): boolean;
}

/**
 * @generated from message city.water.output.v1.Aoi
 */
export declare class Aoi extends Message<Aoi> {
  /**
   * @generated from field: int32 id = 1;
   */
  id: number;

  /**
   * AOI用水需求不满足人数
   *
   * @generated from field: int32 unsatisfied_num = 2;
   */
  unsatisfiedNum: number;

  /**
   * AOI用水需求不满足比例
   *
   * @generated from field: double unsatisfied_ratio = 3;
   */
  unsatisfiedRatio: number;

  /**
   * AOI用水需求量 m3/s
   *
   * @generated from field: double demand = 4;
   */
  demand: number;

  /**
   * AOI供水量 m3/s
   *
   * @generated from field: double supply = 5;
   */
  supply: number;

  constructor(data?: PartialMessage<Aoi>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.water.output.v1.Aoi";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Aoi;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Aoi;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Aoi;

  static equals(a: Aoi | PlainMessage<Aoi> | undefined, b: Aoi | PlainMessage<Aoi> | undefined): boolean;
}

/**
 * 排水基础信息
 *
 * @generated from message city.water.output.v1.DrainageBasicInfo
 */
export declare class DrainageBasicInfo extends Message<DrainageBasicInfo> {
  /**
   * 排水泵平均功率 kW
   *
   * @generated from field: double average_power = 1;
   */
  averagePower: number;

  /**
   * 待排水量 m3
   *
   * @generated from field: double undrained_volume = 2;
   */
  undrainedVolume: number;

  /**
   * 已排水量 m3
   *
   * @generated from field: double drained_volume = 3;
   */
  drainedVolume: number;

  /**
   * 平均流量 m3/s
   *
   * @generated from field: double average_flow = 4;
   */
  averageFlow: number;

  /**
   * 积水水量 m3
   *
   * @generated from field: double flooded_volume = 5;
   */
  floodedVolume: number;

  constructor(data?: PartialMessage<DrainageBasicInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.water.output.v1.DrainageBasicInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DrainageBasicInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DrainageBasicInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DrainageBasicInfo;

  static equals(a: DrainageBasicInfo | PlainMessage<DrainageBasicInfo> | undefined, b: DrainageBasicInfo | PlainMessage<DrainageBasicInfo> | undefined): boolean;
}

/**
 * 供水基础信息
 *
 * @generated from message city.water.output.v1.SupplyBasicInfo
 */
export declare class SupplyBasicInfo extends Message<SupplyBasicInfo> {
  /**
   * 供水泵平均功率 kW
   *
   * @generated from field: double average_power = 1;
   */
  averagePower: number;

  /**
   * 平均流量 m3/s
   *
   * @generated from field: double average_flow = 2;
   */
  averageFlow: number;

  constructor(data?: PartialMessage<SupplyBasicInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.water.output.v1.SupplyBasicInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SupplyBasicInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SupplyBasicInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SupplyBasicInfo;

  static equals(a: SupplyBasicInfo | PlainMessage<SupplyBasicInfo> | undefined, b: SupplyBasicInfo | PlainMessage<SupplyBasicInfo> | undefined): boolean;
}

/**
 * 供水需求及满足情况
 *
 * @generated from message city.water.output.v1.SupplyDemandStatistics
 */
export declare class SupplyDemandStatistics extends Message<SupplyDemandStatistics> {
  /**
   * 居民总用水需求 m3/s
   *
   * @generated from field: double persons_demand = 1;
   */
  personsDemand: number;

  /**
   * 居民需求不满足人数
   *
   * @generated from field: int32 unsatisfied_persons = 2;
   */
  unsatisfiedPersons: number;

  /**
   * 居民需求不满足比例
   *
   * @generated from field: double unsatisfied_persons_ratio = 3;
   */
  unsatisfiedPersonsRatio: number;

  /**
   * AOI总用水需求 m3/s
   *
   * @generated from field: double aois_demand = 4;
   */
  aoisDemand: number;

  /**
   * AOI需求不满足个数
   *
   * @generated from field: int32 unsatisfied_aois = 5;
   */
  unsatisfiedAois: number;

  /**
   * AOI需求不满足比例
   *
   * @generated from field: double unsatisfied_aois_ratio = 6;
   */
  unsatisfiedAoisRatio: number;

  constructor(data?: PartialMessage<SupplyDemandStatistics>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.water.output.v1.SupplyDemandStatistics";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SupplyDemandStatistics;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SupplyDemandStatistics;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SupplyDemandStatistics;

  static equals(a: SupplyDemandStatistics | PlainMessage<SupplyDemandStatistics> | undefined, b: SupplyDemandStatistics | PlainMessage<SupplyDemandStatistics> | undefined): boolean;
}

/**
 * 水泵损坏情况
 *
 * @generated from message city.water.output.v1.FailureStatistics
 */
export declare class FailureStatistics extends Message<FailureStatistics> {
  /**
   * @generated from field: int32 failure_num = 1;
   */
  failureNum: number;

  /**
   * @generated from field: int32 normal_num = 2;
   */
  normalNum: number;

  /**
   * @generated from field: double failure_ratio = 3;
   */
  failureRatio: number;

  constructor(data?: PartialMessage<FailureStatistics>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.water.output.v1.FailureStatistics";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FailureStatistics;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FailureStatistics;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FailureStatistics;

  static equals(a: FailureStatistics | PlainMessage<FailureStatistics> | undefined, b: FailureStatistics | PlainMessage<FailureStatistics> | undefined): boolean;
}

/**
 * 排水指标
 *
 * @generated from message city.water.output.v1.DrainageMetrics
 */
export declare class DrainageMetrics extends Message<DrainageMetrics> {
  /**
   * @generated from field: city.water.output.v1.DrainageBasicInfo drainage_basic_info = 1;
   */
  drainageBasicInfo?: DrainageBasicInfo;

  /**
   * 负载
   *
   * @generated from field: double load_ratio = 2;
   */
  loadRatio: number;

  /**
   * @generated from field: city.water.output.v1.FailureStatistics failure_statistics = 3;
   */
  failureStatistics?: FailureStatistics;

  constructor(data?: PartialMessage<DrainageMetrics>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.water.output.v1.DrainageMetrics";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DrainageMetrics;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DrainageMetrics;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DrainageMetrics;

  static equals(a: DrainageMetrics | PlainMessage<DrainageMetrics> | undefined, b: DrainageMetrics | PlainMessage<DrainageMetrics> | undefined): boolean;
}

/**
 * 供水指标
 *
 * @generated from message city.water.output.v1.SupplyMetrics
 */
export declare class SupplyMetrics extends Message<SupplyMetrics> {
  /**
   * @generated from field: city.water.output.v1.SupplyBasicInfo supply_basic_info = 1;
   */
  supplyBasicInfo?: SupplyBasicInfo;

  /**
   * @generated from field: city.water.output.v1.SupplyDemandStatistics supply_demand_statistics = 2;
   */
  supplyDemandStatistics?: SupplyDemandStatistics;

  /**
   * 负载
   *
   * @generated from field: double load_ratio = 3;
   */
  loadRatio: number;

  /**
   * @generated from field: city.water.output.v1.FailureStatistics failure_statistics = 4;
   */
  failureStatistics?: FailureStatistics;

  constructor(data?: PartialMessage<SupplyMetrics>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "city.water.output.v1.SupplyMetrics";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SupplyMetrics;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SupplyMetrics;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SupplyMetrics;

  static equals(a: SupplyMetrics | PlainMessage<SupplyMetrics> | undefined, b: SupplyMetrics | PlainMessage<SupplyMetrics> | undefined): boolean;
}

