// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/wargame/v1/wargame.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fwargame_2fv1_2fwargame_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fwargame_2fv1_2fwargame_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "city/geo/v2/geo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fwargame_2fv1_2fwargame_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fwargame_2fv1_2fwargame_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto;
namespace city {
namespace wargame {
namespace v1 {
class Casualty;
struct CasualtyDefaultTypeInternal;
extern CasualtyDefaultTypeInternal _Casualty_default_instance_;
class Hit;
struct HitDefaultTypeInternal;
extern HitDefaultTypeInternal _Hit_default_instance_;
class HitHistory;
struct HitHistoryDefaultTypeInternal;
extern HitHistoryDefaultTypeInternal _HitHistory_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class RecoPoint;
struct RecoPointDefaultTypeInternal;
extern RecoPointDefaultTypeInternal _RecoPoint_default_instance_;
class Weapon;
struct WeaponDefaultTypeInternal;
extern WeaponDefaultTypeInternal _Weapon_default_instance_;
}  // namespace v1
}  // namespace wargame
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::wargame::v1::Casualty* Arena::CreateMaybeMessage<::city::wargame::v1::Casualty>(Arena*);
template<> ::city::wargame::v1::Hit* Arena::CreateMaybeMessage<::city::wargame::v1::Hit>(Arena*);
template<> ::city::wargame::v1::HitHistory* Arena::CreateMaybeMessage<::city::wargame::v1::HitHistory>(Arena*);
template<> ::city::wargame::v1::Point* Arena::CreateMaybeMessage<::city::wargame::v1::Point>(Arena*);
template<> ::city::wargame::v1::RecoPoint* Arena::CreateMaybeMessage<::city::wargame::v1::RecoPoint>(Arena*);
template<> ::city::wargame::v1::Weapon* Arena::CreateMaybeMessage<::city::wargame::v1::Weapon>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace wargame {
namespace v1 {

enum RedWeaponType : int {
  RED_WEAPON_TYPE_UNSPECIFIED = 0,
  RED_WEAPON_TYPE_AGM_158 = 1,
  RED_WEAPON_TYPE_AGM_183 = 2,
  RED_WEAPON_TYPE_AGM_88 = 3,
  RED_WEAPON_TYPE_UGM_109 = 4,
  RED_WEAPON_TYPE_AGM_142 = 5,
  RedWeaponType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RedWeaponType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RedWeaponType_IsValid(int value);
constexpr RedWeaponType RedWeaponType_MIN = RED_WEAPON_TYPE_UNSPECIFIED;
constexpr RedWeaponType RedWeaponType_MAX = RED_WEAPON_TYPE_AGM_142;
constexpr int RedWeaponType_ARRAYSIZE = RedWeaponType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RedWeaponType_descriptor();
template<typename T>
inline const std::string& RedWeaponType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RedWeaponType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RedWeaponType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RedWeaponType_descriptor(), enum_t_value);
}
inline bool RedWeaponType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RedWeaponType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RedWeaponType>(
    RedWeaponType_descriptor(), name, value);
}
enum BlueWeaponType : int {
  BLUE_WEAPON_TYPE_UNSPECIFIED = 0,
  BLUE_WEAPON_TYPE_HQ_9 = 1,
  BLUE_WEAPON_TYPE_HQ_12 = 2,
  BLUE_WEAPON_TYPE_HQ_16 = 3,
  BLUE_WEAPON_TYPE_HQ_22 = 4,
  BlueWeaponType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BlueWeaponType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BlueWeaponType_IsValid(int value);
constexpr BlueWeaponType BlueWeaponType_MIN = BLUE_WEAPON_TYPE_UNSPECIFIED;
constexpr BlueWeaponType BlueWeaponType_MAX = BLUE_WEAPON_TYPE_HQ_22;
constexpr int BlueWeaponType_ARRAYSIZE = BlueWeaponType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlueWeaponType_descriptor();
template<typename T>
inline const std::string& BlueWeaponType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlueWeaponType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlueWeaponType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BlueWeaponType_descriptor(), enum_t_value);
}
inline bool BlueWeaponType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BlueWeaponType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BlueWeaponType>(
    BlueWeaponType_descriptor(), name, value);
}
enum Camp : int {
  CAMP_UNSPECIFIED = 0,
  CAMP_RED = 1,
  CAMP_BLUE = 2,
  Camp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Camp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Camp_IsValid(int value);
constexpr Camp Camp_MIN = CAMP_UNSPECIFIED;
constexpr Camp Camp_MAX = CAMP_BLUE;
constexpr int Camp_ARRAYSIZE = Camp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Camp_descriptor();
template<typename T>
inline const std::string& Camp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Camp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Camp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Camp_descriptor(), enum_t_value);
}
inline bool Camp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Camp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Camp>(
    Camp_descriptor(), name, value);
}
enum RecoType : int {
  RECO_TYPE_UNSPECIFIED = 0,
  RECO_TYPE_MISSILE = 1,
  RECO_TYPE_ELEC = 2,
  RecoType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RecoType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RecoType_IsValid(int value);
constexpr RecoType RecoType_MIN = RECO_TYPE_UNSPECIFIED;
constexpr RecoType RecoType_MAX = RECO_TYPE_ELEC;
constexpr int RecoType_ARRAYSIZE = RecoType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecoType_descriptor();
template<typename T>
inline const std::string& RecoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecoType_descriptor(), enum_t_value);
}
inline bool RecoType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecoType>(
    RecoType_descriptor(), name, value);
}
enum RecoAlgoType : int {
  RECO_ALGO_TYPE_UNSPECIFIED = 0,
  RECO_ALGO_TYPE_MAX_DESTORY = 1,
  RECO_ALGO_TYPE_RANDOM = 2,
  RECO_ALGO_TYPE_MIN_DESTORY = 3,
  RecoAlgoType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RecoAlgoType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RecoAlgoType_IsValid(int value);
constexpr RecoAlgoType RecoAlgoType_MIN = RECO_ALGO_TYPE_UNSPECIFIED;
constexpr RecoAlgoType RecoAlgoType_MAX = RECO_ALGO_TYPE_MIN_DESTORY;
constexpr int RecoAlgoType_ARRAYSIZE = RecoAlgoType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecoAlgoType_descriptor();
template<typename T>
inline const std::string& RecoAlgoType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RecoAlgoType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RecoAlgoType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RecoAlgoType_descriptor(), enum_t_value);
}
inline bool RecoAlgoType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RecoAlgoType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RecoAlgoType>(
    RecoAlgoType_descriptor(), name, value);
}
// ===================================================================

class RecoPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.wargame.v1.RecoPoint) */ {
 public:
  inline RecoPoint() : RecoPoint(nullptr) {}
  ~RecoPoint() override;
  explicit PROTOBUF_CONSTEXPR RecoPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecoPoint(const RecoPoint& from);
  RecoPoint(RecoPoint&& from) noexcept
    : RecoPoint() {
    *this = ::std::move(from);
  }

  inline RecoPoint& operator=(const RecoPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecoPoint& operator=(RecoPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecoPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecoPoint* internal_default_instance() {
    return reinterpret_cast<const RecoPoint*>(
               &_RecoPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecoPoint& a, RecoPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(RecoPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecoPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecoPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecoPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecoPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecoPoint& from) {
    RecoPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecoPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.wargame.v1.RecoPoint";
  }
  protected:
  explicit RecoPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .city.geo.v2.LongLatPosition pos = 1 [json_name = "pos"];
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::city::geo::v2::LongLatPosition& pos() const;
  PROTOBUF_NODISCARD ::city::geo::v2::LongLatPosition* release_pos();
  ::city::geo::v2::LongLatPosition* mutable_pos();
  void set_allocated_pos(::city::geo::v2::LongLatPosition* pos);
  private:
  const ::city::geo::v2::LongLatPosition& _internal_pos() const;
  ::city::geo::v2::LongLatPosition* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::city::geo::v2::LongLatPosition* pos);
  ::city::geo::v2::LongLatPosition* unsafe_arena_release_pos();

  // .city.wargame.v1.RecoType type = 2 [json_name = "type"];
  void clear_type();
  ::city::wargame::v1::RecoType type() const;
  void set_type(::city::wargame::v1::RecoType value);
  private:
  ::city::wargame::v1::RecoType _internal_type() const;
  void _internal_set_type(::city::wargame::v1::RecoType value);
  public:

  // @@protoc_insertion_point(class_scope:city.wargame.v1.RecoPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::geo::v2::LongLatPosition* pos_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwargame_2fv1_2fwargame_2eproto;
};
// -------------------------------------------------------------------

class Weapon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.wargame.v1.Weapon) */ {
 public:
  inline Weapon() : Weapon(nullptr) {}
  ~Weapon() override;
  explicit PROTOBUF_CONSTEXPR Weapon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Weapon(const Weapon& from);
  Weapon(Weapon&& from) noexcept
    : Weapon() {
    *this = ::std::move(from);
  }

  inline Weapon& operator=(const Weapon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Weapon& operator=(Weapon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Weapon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Weapon* internal_default_instance() {
    return reinterpret_cast<const Weapon*>(
               &_Weapon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Weapon& a, Weapon& b) {
    a.Swap(&b);
  }
  inline void Swap(Weapon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Weapon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Weapon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Weapon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Weapon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Weapon& from) {
    Weapon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weapon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.wargame.v1.Weapon";
  }
  protected:
  explicit Weapon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedTypeFieldNumber = 2,
    kBlueTypeFieldNumber = 3,
    kNumFieldNumber = 4,
  };
  // optional .city.wargame.v1.RedWeaponType red_type = 2 [json_name = "redType"];
  bool has_red_type() const;
  private:
  bool _internal_has_red_type() const;
  public:
  void clear_red_type();
  ::city::wargame::v1::RedWeaponType red_type() const;
  void set_red_type(::city::wargame::v1::RedWeaponType value);
  private:
  ::city::wargame::v1::RedWeaponType _internal_red_type() const;
  void _internal_set_red_type(::city::wargame::v1::RedWeaponType value);
  public:

  // optional .city.wargame.v1.BlueWeaponType blue_type = 3 [json_name = "blueType"];
  bool has_blue_type() const;
  private:
  bool _internal_has_blue_type() const;
  public:
  void clear_blue_type();
  ::city::wargame::v1::BlueWeaponType blue_type() const;
  void set_blue_type(::city::wargame::v1::BlueWeaponType value);
  private:
  ::city::wargame::v1::BlueWeaponType _internal_blue_type() const;
  void _internal_set_blue_type(::city::wargame::v1::BlueWeaponType value);
  public:

  // int32 num = 4 [json_name = "num"];
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.wargame.v1.Weapon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int red_type_;
    int blue_type_;
    int32_t num_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwargame_2fv1_2fwargame_2eproto;
};
// -------------------------------------------------------------------

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.wargame.v1.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.wargame.v1.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeaponFieldNumber = 1,
    kPosFieldNumber = 2,
    kRadiusFieldNumber = 3,
  };
  // .city.wargame.v1.Weapon weapon = 1 [json_name = "weapon"];
  bool has_weapon() const;
  private:
  bool _internal_has_weapon() const;
  public:
  void clear_weapon();
  const ::city::wargame::v1::Weapon& weapon() const;
  PROTOBUF_NODISCARD ::city::wargame::v1::Weapon* release_weapon();
  ::city::wargame::v1::Weapon* mutable_weapon();
  void set_allocated_weapon(::city::wargame::v1::Weapon* weapon);
  private:
  const ::city::wargame::v1::Weapon& _internal_weapon() const;
  ::city::wargame::v1::Weapon* _internal_mutable_weapon();
  public:
  void unsafe_arena_set_allocated_weapon(
      ::city::wargame::v1::Weapon* weapon);
  ::city::wargame::v1::Weapon* unsafe_arena_release_weapon();

  // .city.geo.v2.LongLatPosition pos = 2 [json_name = "pos"];
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::city::geo::v2::LongLatPosition& pos() const;
  PROTOBUF_NODISCARD ::city::geo::v2::LongLatPosition* release_pos();
  ::city::geo::v2::LongLatPosition* mutable_pos();
  void set_allocated_pos(::city::geo::v2::LongLatPosition* pos);
  private:
  const ::city::geo::v2::LongLatPosition& _internal_pos() const;
  ::city::geo::v2::LongLatPosition* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::city::geo::v2::LongLatPosition* pos);
  ::city::geo::v2::LongLatPosition* unsafe_arena_release_pos();

  // double radius = 3 [json_name = "radius"];
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.wargame.v1.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::wargame::v1::Weapon* weapon_;
    ::city::geo::v2::LongLatPosition* pos_;
    double radius_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwargame_2fv1_2fwargame_2eproto;
};
// -------------------------------------------------------------------

class Hit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.wargame.v1.Hit) */ {
 public:
  inline Hit() : Hit(nullptr) {}
  ~Hit() override;
  explicit PROTOBUF_CONSTEXPR Hit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Hit(const Hit& from);
  Hit(Hit&& from) noexcept
    : Hit() {
    *this = ::std::move(from);
  }

  inline Hit& operator=(const Hit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hit& operator=(Hit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Hit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hit* internal_default_instance() {
    return reinterpret_cast<const Hit*>(
               &_Hit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Hit& a, Hit& b) {
    a.Swap(&b);
  }
  inline void Swap(Hit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Hit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Hit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Hit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Hit& from) {
    Hit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.wargame.v1.Hit";
  }
  protected:
  explicit Hit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefensesFieldNumber = 2,
    kAttackFieldNumber = 1,
    kResultFieldNumber = 3,
    kArriveFieldNumber = 4,
  };
  // repeated .city.wargame.v1.Point defenses = 2 [json_name = "defenses"];
  int defenses_size() const;
  private:
  int _internal_defenses_size() const;
  public:
  void clear_defenses();
  ::city::wargame::v1::Point* mutable_defenses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::wargame::v1::Point >*
      mutable_defenses();
  private:
  const ::city::wargame::v1::Point& _internal_defenses(int index) const;
  ::city::wargame::v1::Point* _internal_add_defenses();
  public:
  const ::city::wargame::v1::Point& defenses(int index) const;
  ::city::wargame::v1::Point* add_defenses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::wargame::v1::Point >&
      defenses() const;

  // .city.wargame.v1.Point attack = 1 [json_name = "attack"];
  bool has_attack() const;
  private:
  bool _internal_has_attack() const;
  public:
  void clear_attack();
  const ::city::wargame::v1::Point& attack() const;
  PROTOBUF_NODISCARD ::city::wargame::v1::Point* release_attack();
  ::city::wargame::v1::Point* mutable_attack();
  void set_allocated_attack(::city::wargame::v1::Point* attack);
  private:
  const ::city::wargame::v1::Point& _internal_attack() const;
  ::city::wargame::v1::Point* _internal_mutable_attack();
  public:
  void unsafe_arena_set_allocated_attack(
      ::city::wargame::v1::Point* attack);
  ::city::wargame::v1::Point* unsafe_arena_release_attack();

  // bool result = 3 [json_name = "result"];
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // int32 arrive = 4 [json_name = "arrive"];
  void clear_arrive();
  int32_t arrive() const;
  void set_arrive(int32_t value);
  private:
  int32_t _internal_arrive() const;
  void _internal_set_arrive(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.wargame.v1.Hit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::wargame::v1::Point > defenses_;
    ::city::wargame::v1::Point* attack_;
    bool result_;
    int32_t arrive_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwargame_2fv1_2fwargame_2eproto;
};
// -------------------------------------------------------------------

class HitHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.wargame.v1.HitHistory) */ {
 public:
  inline HitHistory() : HitHistory(nullptr) {}
  ~HitHistory() override;
  explicit PROTOBUF_CONSTEXPR HitHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HitHistory(const HitHistory& from);
  HitHistory(HitHistory&& from) noexcept
    : HitHistory() {
    *this = ::std::move(from);
  }

  inline HitHistory& operator=(const HitHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline HitHistory& operator=(HitHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HitHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const HitHistory* internal_default_instance() {
    return reinterpret_cast<const HitHistory*>(
               &_HitHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HitHistory& a, HitHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(HitHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HitHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HitHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HitHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HitHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HitHistory& from) {
    HitHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HitHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.wargame.v1.HitHistory";
  }
  protected:
  explicit HitHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitsFieldNumber = 1,
  };
  // repeated .city.wargame.v1.Hit hits = 1 [json_name = "hits"];
  int hits_size() const;
  private:
  int _internal_hits_size() const;
  public:
  void clear_hits();
  ::city::wargame::v1::Hit* mutable_hits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::wargame::v1::Hit >*
      mutable_hits();
  private:
  const ::city::wargame::v1::Hit& _internal_hits(int index) const;
  ::city::wargame::v1::Hit* _internal_add_hits();
  public:
  const ::city::wargame::v1::Hit& hits(int index) const;
  ::city::wargame::v1::Hit* add_hits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::wargame::v1::Hit >&
      hits() const;

  // @@protoc_insertion_point(class_scope:city.wargame.v1.HitHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::wargame::v1::Hit > hits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwargame_2fv1_2fwargame_2eproto;
};
// -------------------------------------------------------------------

class Casualty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.wargame.v1.Casualty) */ {
 public:
  inline Casualty() : Casualty(nullptr) {}
  ~Casualty() override;
  explicit PROTOBUF_CONSTEXPR Casualty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Casualty(const Casualty& from);
  Casualty(Casualty&& from) noexcept
    : Casualty() {
    *this = ::std::move(from);
  }

  inline Casualty& operator=(const Casualty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Casualty& operator=(Casualty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Casualty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Casualty* internal_default_instance() {
    return reinterpret_cast<const Casualty*>(
               &_Casualty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Casualty& a, Casualty& b) {
    a.Swap(&b);
  }
  inline void Swap(Casualty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Casualty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Casualty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Casualty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Casualty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Casualty& from) {
    Casualty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Casualty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.wargame.v1.Casualty";
  }
  protected:
  explicit Casualty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAoiIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 aoi_id = 1 [json_name = "aoiId"];
  void clear_aoi_id();
  int32_t aoi_id() const;
  void set_aoi_id(int32_t value);
  private:
  int32_t _internal_aoi_id() const;
  void _internal_set_aoi_id(int32_t value);
  public:

  // int32 num = 2 [json_name = "num"];
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.wargame.v1.Casualty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t aoi_id_;
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwargame_2fv1_2fwargame_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecoPoint

// .city.geo.v2.LongLatPosition pos = 1 [json_name = "pos"];
inline bool RecoPoint::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool RecoPoint::has_pos() const {
  return _internal_has_pos();
}
inline const ::city::geo::v2::LongLatPosition& RecoPoint::_internal_pos() const {
  const ::city::geo::v2::LongLatPosition* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::LongLatPosition&>(
      ::city::geo::v2::_LongLatPosition_default_instance_);
}
inline const ::city::geo::v2::LongLatPosition& RecoPoint::pos() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.RecoPoint.pos)
  return _internal_pos();
}
inline void RecoPoint::unsafe_arena_set_allocated_pos(
    ::city::geo::v2::LongLatPosition* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.wargame.v1.RecoPoint.pos)
}
inline ::city::geo::v2::LongLatPosition* RecoPoint::release_pos() {
  
  ::city::geo::v2::LongLatPosition* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::geo::v2::LongLatPosition* RecoPoint::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:city.wargame.v1.RecoPoint.pos)
  
  ::city::geo::v2::LongLatPosition* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::city::geo::v2::LongLatPosition* RecoPoint::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::LongLatPosition>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::city::geo::v2::LongLatPosition* RecoPoint::mutable_pos() {
  ::city::geo::v2::LongLatPosition* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:city.wargame.v1.RecoPoint.pos)
  return _msg;
}
inline void RecoPoint::set_allocated_pos(::city::geo::v2::LongLatPosition* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:city.wargame.v1.RecoPoint.pos)
}

// .city.wargame.v1.RecoType type = 2 [json_name = "type"];
inline void RecoPoint::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::wargame::v1::RecoType RecoPoint::_internal_type() const {
  return static_cast< ::city::wargame::v1::RecoType >(_impl_.type_);
}
inline ::city::wargame::v1::RecoType RecoPoint::type() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.RecoPoint.type)
  return _internal_type();
}
inline void RecoPoint::_internal_set_type(::city::wargame::v1::RecoType value) {
  
  _impl_.type_ = value;
}
inline void RecoPoint::set_type(::city::wargame::v1::RecoType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.RecoPoint.type)
}

// -------------------------------------------------------------------

// Weapon

// optional .city.wargame.v1.RedWeaponType red_type = 2 [json_name = "redType"];
inline bool Weapon::_internal_has_red_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Weapon::has_red_type() const {
  return _internal_has_red_type();
}
inline void Weapon::clear_red_type() {
  _impl_.red_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::city::wargame::v1::RedWeaponType Weapon::_internal_red_type() const {
  return static_cast< ::city::wargame::v1::RedWeaponType >(_impl_.red_type_);
}
inline ::city::wargame::v1::RedWeaponType Weapon::red_type() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Weapon.red_type)
  return _internal_red_type();
}
inline void Weapon::_internal_set_red_type(::city::wargame::v1::RedWeaponType value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.red_type_ = value;
}
inline void Weapon::set_red_type(::city::wargame::v1::RedWeaponType value) {
  _internal_set_red_type(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Weapon.red_type)
}

// optional .city.wargame.v1.BlueWeaponType blue_type = 3 [json_name = "blueType"];
inline bool Weapon::_internal_has_blue_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Weapon::has_blue_type() const {
  return _internal_has_blue_type();
}
inline void Weapon::clear_blue_type() {
  _impl_.blue_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::city::wargame::v1::BlueWeaponType Weapon::_internal_blue_type() const {
  return static_cast< ::city::wargame::v1::BlueWeaponType >(_impl_.blue_type_);
}
inline ::city::wargame::v1::BlueWeaponType Weapon::blue_type() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Weapon.blue_type)
  return _internal_blue_type();
}
inline void Weapon::_internal_set_blue_type(::city::wargame::v1::BlueWeaponType value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.blue_type_ = value;
}
inline void Weapon::set_blue_type(::city::wargame::v1::BlueWeaponType value) {
  _internal_set_blue_type(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Weapon.blue_type)
}

// int32 num = 4 [json_name = "num"];
inline void Weapon::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t Weapon::_internal_num() const {
  return _impl_.num_;
}
inline int32_t Weapon::num() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Weapon.num)
  return _internal_num();
}
inline void Weapon::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void Weapon::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Weapon.num)
}

// -------------------------------------------------------------------

// Point

// .city.wargame.v1.Weapon weapon = 1 [json_name = "weapon"];
inline bool Point::_internal_has_weapon() const {
  return this != internal_default_instance() && _impl_.weapon_ != nullptr;
}
inline bool Point::has_weapon() const {
  return _internal_has_weapon();
}
inline void Point::clear_weapon() {
  if (GetArenaForAllocation() == nullptr && _impl_.weapon_ != nullptr) {
    delete _impl_.weapon_;
  }
  _impl_.weapon_ = nullptr;
}
inline const ::city::wargame::v1::Weapon& Point::_internal_weapon() const {
  const ::city::wargame::v1::Weapon* p = _impl_.weapon_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::wargame::v1::Weapon&>(
      ::city::wargame::v1::_Weapon_default_instance_);
}
inline const ::city::wargame::v1::Weapon& Point::weapon() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Point.weapon)
  return _internal_weapon();
}
inline void Point::unsafe_arena_set_allocated_weapon(
    ::city::wargame::v1::Weapon* weapon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weapon_);
  }
  _impl_.weapon_ = weapon;
  if (weapon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.wargame.v1.Point.weapon)
}
inline ::city::wargame::v1::Weapon* Point::release_weapon() {
  
  ::city::wargame::v1::Weapon* temp = _impl_.weapon_;
  _impl_.weapon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::wargame::v1::Weapon* Point::unsafe_arena_release_weapon() {
  // @@protoc_insertion_point(field_release:city.wargame.v1.Point.weapon)
  
  ::city::wargame::v1::Weapon* temp = _impl_.weapon_;
  _impl_.weapon_ = nullptr;
  return temp;
}
inline ::city::wargame::v1::Weapon* Point::_internal_mutable_weapon() {
  
  if (_impl_.weapon_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::wargame::v1::Weapon>(GetArenaForAllocation());
    _impl_.weapon_ = p;
  }
  return _impl_.weapon_;
}
inline ::city::wargame::v1::Weapon* Point::mutable_weapon() {
  ::city::wargame::v1::Weapon* _msg = _internal_mutable_weapon();
  // @@protoc_insertion_point(field_mutable:city.wargame.v1.Point.weapon)
  return _msg;
}
inline void Point::set_allocated_weapon(::city::wargame::v1::Weapon* weapon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weapon_;
  }
  if (weapon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weapon);
    if (message_arena != submessage_arena) {
      weapon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weapon, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.weapon_ = weapon;
  // @@protoc_insertion_point(field_set_allocated:city.wargame.v1.Point.weapon)
}

// .city.geo.v2.LongLatPosition pos = 2 [json_name = "pos"];
inline bool Point::_internal_has_pos() const {
  return this != internal_default_instance() && _impl_.pos_ != nullptr;
}
inline bool Point::has_pos() const {
  return _internal_has_pos();
}
inline const ::city::geo::v2::LongLatPosition& Point::_internal_pos() const {
  const ::city::geo::v2::LongLatPosition* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::LongLatPosition&>(
      ::city::geo::v2::_LongLatPosition_default_instance_);
}
inline const ::city::geo::v2::LongLatPosition& Point::pos() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Point.pos)
  return _internal_pos();
}
inline void Point::unsafe_arena_set_allocated_pos(
    ::city::geo::v2::LongLatPosition* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.wargame.v1.Point.pos)
}
inline ::city::geo::v2::LongLatPosition* Point::release_pos() {
  
  ::city::geo::v2::LongLatPosition* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::geo::v2::LongLatPosition* Point::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:city.wargame.v1.Point.pos)
  
  ::city::geo::v2::LongLatPosition* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::city::geo::v2::LongLatPosition* Point::_internal_mutable_pos() {
  
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::LongLatPosition>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::city::geo::v2::LongLatPosition* Point::mutable_pos() {
  ::city::geo::v2::LongLatPosition* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:city.wargame.v1.Point.pos)
  return _msg;
}
inline void Point::set_allocated_pos(::city::geo::v2::LongLatPosition* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:city.wargame.v1.Point.pos)
}

// double radius = 3 [json_name = "radius"];
inline void Point::clear_radius() {
  _impl_.radius_ = 0;
}
inline double Point::_internal_radius() const {
  return _impl_.radius_;
}
inline double Point::radius() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Point.radius)
  return _internal_radius();
}
inline void Point::_internal_set_radius(double value) {
  
  _impl_.radius_ = value;
}
inline void Point::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Point.radius)
}

// -------------------------------------------------------------------

// Hit

// .city.wargame.v1.Point attack = 1 [json_name = "attack"];
inline bool Hit::_internal_has_attack() const {
  return this != internal_default_instance() && _impl_.attack_ != nullptr;
}
inline bool Hit::has_attack() const {
  return _internal_has_attack();
}
inline void Hit::clear_attack() {
  if (GetArenaForAllocation() == nullptr && _impl_.attack_ != nullptr) {
    delete _impl_.attack_;
  }
  _impl_.attack_ = nullptr;
}
inline const ::city::wargame::v1::Point& Hit::_internal_attack() const {
  const ::city::wargame::v1::Point* p = _impl_.attack_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::wargame::v1::Point&>(
      ::city::wargame::v1::_Point_default_instance_);
}
inline const ::city::wargame::v1::Point& Hit::attack() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Hit.attack)
  return _internal_attack();
}
inline void Hit::unsafe_arena_set_allocated_attack(
    ::city::wargame::v1::Point* attack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attack_);
  }
  _impl_.attack_ = attack;
  if (attack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.wargame.v1.Hit.attack)
}
inline ::city::wargame::v1::Point* Hit::release_attack() {
  
  ::city::wargame::v1::Point* temp = _impl_.attack_;
  _impl_.attack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::wargame::v1::Point* Hit::unsafe_arena_release_attack() {
  // @@protoc_insertion_point(field_release:city.wargame.v1.Hit.attack)
  
  ::city::wargame::v1::Point* temp = _impl_.attack_;
  _impl_.attack_ = nullptr;
  return temp;
}
inline ::city::wargame::v1::Point* Hit::_internal_mutable_attack() {
  
  if (_impl_.attack_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::wargame::v1::Point>(GetArenaForAllocation());
    _impl_.attack_ = p;
  }
  return _impl_.attack_;
}
inline ::city::wargame::v1::Point* Hit::mutable_attack() {
  ::city::wargame::v1::Point* _msg = _internal_mutable_attack();
  // @@protoc_insertion_point(field_mutable:city.wargame.v1.Hit.attack)
  return _msg;
}
inline void Hit::set_allocated_attack(::city::wargame::v1::Point* attack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attack_;
  }
  if (attack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attack);
    if (message_arena != submessage_arena) {
      attack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attack, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attack_ = attack;
  // @@protoc_insertion_point(field_set_allocated:city.wargame.v1.Hit.attack)
}

// repeated .city.wargame.v1.Point defenses = 2 [json_name = "defenses"];
inline int Hit::_internal_defenses_size() const {
  return _impl_.defenses_.size();
}
inline int Hit::defenses_size() const {
  return _internal_defenses_size();
}
inline void Hit::clear_defenses() {
  _impl_.defenses_.Clear();
}
inline ::city::wargame::v1::Point* Hit::mutable_defenses(int index) {
  // @@protoc_insertion_point(field_mutable:city.wargame.v1.Hit.defenses)
  return _impl_.defenses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::wargame::v1::Point >*
Hit::mutable_defenses() {
  // @@protoc_insertion_point(field_mutable_list:city.wargame.v1.Hit.defenses)
  return &_impl_.defenses_;
}
inline const ::city::wargame::v1::Point& Hit::_internal_defenses(int index) const {
  return _impl_.defenses_.Get(index);
}
inline const ::city::wargame::v1::Point& Hit::defenses(int index) const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Hit.defenses)
  return _internal_defenses(index);
}
inline ::city::wargame::v1::Point* Hit::_internal_add_defenses() {
  return _impl_.defenses_.Add();
}
inline ::city::wargame::v1::Point* Hit::add_defenses() {
  ::city::wargame::v1::Point* _add = _internal_add_defenses();
  // @@protoc_insertion_point(field_add:city.wargame.v1.Hit.defenses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::wargame::v1::Point >&
Hit::defenses() const {
  // @@protoc_insertion_point(field_list:city.wargame.v1.Hit.defenses)
  return _impl_.defenses_;
}

// bool result = 3 [json_name = "result"];
inline void Hit::clear_result() {
  _impl_.result_ = false;
}
inline bool Hit::_internal_result() const {
  return _impl_.result_;
}
inline bool Hit::result() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Hit.result)
  return _internal_result();
}
inline void Hit::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void Hit::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Hit.result)
}

// int32 arrive = 4 [json_name = "arrive"];
inline void Hit::clear_arrive() {
  _impl_.arrive_ = 0;
}
inline int32_t Hit::_internal_arrive() const {
  return _impl_.arrive_;
}
inline int32_t Hit::arrive() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Hit.arrive)
  return _internal_arrive();
}
inline void Hit::_internal_set_arrive(int32_t value) {
  
  _impl_.arrive_ = value;
}
inline void Hit::set_arrive(int32_t value) {
  _internal_set_arrive(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Hit.arrive)
}

// -------------------------------------------------------------------

// HitHistory

// repeated .city.wargame.v1.Hit hits = 1 [json_name = "hits"];
inline int HitHistory::_internal_hits_size() const {
  return _impl_.hits_.size();
}
inline int HitHistory::hits_size() const {
  return _internal_hits_size();
}
inline void HitHistory::clear_hits() {
  _impl_.hits_.Clear();
}
inline ::city::wargame::v1::Hit* HitHistory::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:city.wargame.v1.HitHistory.hits)
  return _impl_.hits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::wargame::v1::Hit >*
HitHistory::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:city.wargame.v1.HitHistory.hits)
  return &_impl_.hits_;
}
inline const ::city::wargame::v1::Hit& HitHistory::_internal_hits(int index) const {
  return _impl_.hits_.Get(index);
}
inline const ::city::wargame::v1::Hit& HitHistory::hits(int index) const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.HitHistory.hits)
  return _internal_hits(index);
}
inline ::city::wargame::v1::Hit* HitHistory::_internal_add_hits() {
  return _impl_.hits_.Add();
}
inline ::city::wargame::v1::Hit* HitHistory::add_hits() {
  ::city::wargame::v1::Hit* _add = _internal_add_hits();
  // @@protoc_insertion_point(field_add:city.wargame.v1.HitHistory.hits)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::wargame::v1::Hit >&
HitHistory::hits() const {
  // @@protoc_insertion_point(field_list:city.wargame.v1.HitHistory.hits)
  return _impl_.hits_;
}

// -------------------------------------------------------------------

// Casualty

// int32 aoi_id = 1 [json_name = "aoiId"];
inline void Casualty::clear_aoi_id() {
  _impl_.aoi_id_ = 0;
}
inline int32_t Casualty::_internal_aoi_id() const {
  return _impl_.aoi_id_;
}
inline int32_t Casualty::aoi_id() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Casualty.aoi_id)
  return _internal_aoi_id();
}
inline void Casualty::_internal_set_aoi_id(int32_t value) {
  
  _impl_.aoi_id_ = value;
}
inline void Casualty::set_aoi_id(int32_t value) {
  _internal_set_aoi_id(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Casualty.aoi_id)
}

// int32 num = 2 [json_name = "num"];
inline void Casualty::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t Casualty::_internal_num() const {
  return _impl_.num_;
}
inline int32_t Casualty::num() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Casualty.num)
  return _internal_num();
}
inline void Casualty::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void Casualty::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Casualty.num)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace wargame
}  // namespace city

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::city::wargame::v1::RedWeaponType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::wargame::v1::RedWeaponType>() {
  return ::city::wargame::v1::RedWeaponType_descriptor();
}
template <> struct is_proto_enum< ::city::wargame::v1::BlueWeaponType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::wargame::v1::BlueWeaponType>() {
  return ::city::wargame::v1::BlueWeaponType_descriptor();
}
template <> struct is_proto_enum< ::city::wargame::v1::Camp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::wargame::v1::Camp>() {
  return ::city::wargame::v1::Camp_descriptor();
}
template <> struct is_proto_enum< ::city::wargame::v1::RecoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::wargame::v1::RecoType>() {
  return ::city::wargame::v1::RecoType_descriptor();
}
template <> struct is_proto_enum< ::city::wargame::v1::RecoAlgoType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::wargame::v1::RecoAlgoType>() {
  return ::city::wargame::v1::RecoAlgoType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fwargame_2fv1_2fwargame_2eproto
