// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/wargame/v1/wargame.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fwargame_2fv1_2fwargame_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_city_2fwargame_2fv1_2fwargame_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "city/geo/v2/geo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_city_2fwargame_2fv1_2fwargame_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fwargame_2fv1_2fwargame_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto;
namespace city {
namespace wargame {
namespace v1 {
class Casualty;
struct CasualtyDefaultTypeInternal;
extern CasualtyDefaultTypeInternal _Casualty_default_instance_;
class Hit;
struct HitDefaultTypeInternal;
extern HitDefaultTypeInternal _Hit_default_instance_;
class HitHistory;
struct HitHistoryDefaultTypeInternal;
extern HitHistoryDefaultTypeInternal _HitHistory_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class RecoPoint;
struct RecoPointDefaultTypeInternal;
extern RecoPointDefaultTypeInternal _RecoPoint_default_instance_;
class Weapon;
struct WeaponDefaultTypeInternal;
extern WeaponDefaultTypeInternal _Weapon_default_instance_;
}  // namespace v1
}  // namespace wargame
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace city {
namespace wargame {
namespace v1 {
enum RedWeaponType : int {
  RED_WEAPON_TYPE_UNSPECIFIED = 0,
  RED_WEAPON_TYPE_AGM_158 = 1,
  RED_WEAPON_TYPE_AGM_183 = 2,
  RED_WEAPON_TYPE_AGM_88 = 3,
  RED_WEAPON_TYPE_UGM_109 = 4,
  RED_WEAPON_TYPE_AGM_142 = 5,
  RedWeaponType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RedWeaponType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RedWeaponType_IsValid(int value);
constexpr RedWeaponType RedWeaponType_MIN = static_cast<RedWeaponType>(0);
constexpr RedWeaponType RedWeaponType_MAX = static_cast<RedWeaponType>(5);
constexpr int RedWeaponType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
RedWeaponType_descriptor();
template <typename T>
const std::string& RedWeaponType_Name(T value) {
  static_assert(std::is_same<T, RedWeaponType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RedWeaponType_Name().");
  return RedWeaponType_Name(static_cast<RedWeaponType>(value));
}
template <>
inline const std::string& RedWeaponType_Name(RedWeaponType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RedWeaponType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool RedWeaponType_Parse(absl::string_view name, RedWeaponType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RedWeaponType>(
      RedWeaponType_descriptor(), name, value);
}
enum BlueWeaponType : int {
  BLUE_WEAPON_TYPE_UNSPECIFIED = 0,
  BLUE_WEAPON_TYPE_HQ_9 = 1,
  BLUE_WEAPON_TYPE_HQ_12 = 2,
  BLUE_WEAPON_TYPE_HQ_16 = 3,
  BLUE_WEAPON_TYPE_HQ_22 = 4,
  BlueWeaponType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BlueWeaponType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BlueWeaponType_IsValid(int value);
constexpr BlueWeaponType BlueWeaponType_MIN = static_cast<BlueWeaponType>(0);
constexpr BlueWeaponType BlueWeaponType_MAX = static_cast<BlueWeaponType>(4);
constexpr int BlueWeaponType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
BlueWeaponType_descriptor();
template <typename T>
const std::string& BlueWeaponType_Name(T value) {
  static_assert(std::is_same<T, BlueWeaponType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BlueWeaponType_Name().");
  return BlueWeaponType_Name(static_cast<BlueWeaponType>(value));
}
template <>
inline const std::string& BlueWeaponType_Name(BlueWeaponType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BlueWeaponType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool BlueWeaponType_Parse(absl::string_view name, BlueWeaponType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlueWeaponType>(
      BlueWeaponType_descriptor(), name, value);
}
enum Camp : int {
  CAMP_UNSPECIFIED = 0,
  CAMP_RED = 1,
  CAMP_BLUE = 2,
  Camp_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Camp_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Camp_IsValid(int value);
constexpr Camp Camp_MIN = static_cast<Camp>(0);
constexpr Camp Camp_MAX = static_cast<Camp>(2);
constexpr int Camp_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Camp_descriptor();
template <typename T>
const std::string& Camp_Name(T value) {
  static_assert(std::is_same<T, Camp>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Camp_Name().");
  return Camp_Name(static_cast<Camp>(value));
}
template <>
inline const std::string& Camp_Name(Camp value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Camp_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Camp_Parse(absl::string_view name, Camp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Camp>(
      Camp_descriptor(), name, value);
}
enum RecoType : int {
  RECO_TYPE_UNSPECIFIED = 0,
  RECO_TYPE_MISSILE = 1,
  RECO_TYPE_ELEC = 2,
  RecoType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RecoType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RecoType_IsValid(int value);
constexpr RecoType RecoType_MIN = static_cast<RecoType>(0);
constexpr RecoType RecoType_MAX = static_cast<RecoType>(2);
constexpr int RecoType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
RecoType_descriptor();
template <typename T>
const std::string& RecoType_Name(T value) {
  static_assert(std::is_same<T, RecoType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RecoType_Name().");
  return RecoType_Name(static_cast<RecoType>(value));
}
template <>
inline const std::string& RecoType_Name(RecoType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RecoType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool RecoType_Parse(absl::string_view name, RecoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecoType>(
      RecoType_descriptor(), name, value);
}
enum RecoAlgoType : int {
  RECO_ALGO_TYPE_UNSPECIFIED = 0,
  RECO_ALGO_TYPE_MAX_DESTORY = 1,
  RECO_ALGO_TYPE_RANDOM = 2,
  RECO_ALGO_TYPE_MIN_DESTORY = 3,
  RecoAlgoType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RecoAlgoType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RecoAlgoType_IsValid(int value);
constexpr RecoAlgoType RecoAlgoType_MIN = static_cast<RecoAlgoType>(0);
constexpr RecoAlgoType RecoAlgoType_MAX = static_cast<RecoAlgoType>(3);
constexpr int RecoAlgoType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
RecoAlgoType_descriptor();
template <typename T>
const std::string& RecoAlgoType_Name(T value) {
  static_assert(std::is_same<T, RecoAlgoType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RecoAlgoType_Name().");
  return RecoAlgoType_Name(static_cast<RecoAlgoType>(value));
}
template <>
inline const std::string& RecoAlgoType_Name(RecoAlgoType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RecoAlgoType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool RecoAlgoType_Parse(absl::string_view name, RecoAlgoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecoAlgoType>(
      RecoAlgoType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RecoPoint final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.wargame.v1.RecoPoint) */ {
 public:
  inline RecoPoint() : RecoPoint(nullptr) {}
  ~RecoPoint() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RecoPoint(::google::protobuf::internal::ConstantInitialized);

  RecoPoint(const RecoPoint& from);
  RecoPoint(RecoPoint&& from) noexcept
    : RecoPoint() {
    *this = ::std::move(from);
  }

  inline RecoPoint& operator=(const RecoPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecoPoint& operator=(RecoPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecoPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecoPoint* internal_default_instance() {
    return reinterpret_cast<const RecoPoint*>(
               &_RecoPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecoPoint& a, RecoPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(RecoPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecoPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecoPoint* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecoPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RecoPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RecoPoint& from) {
    RecoPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecoPoint* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.wargame.v1.RecoPoint";
  }
  protected:
  explicit RecoPoint(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .city.geo.v2.LongLatPosition pos = 1 [json_name = "pos"];
  bool has_pos() const;
  void clear_pos() ;
  const ::city::geo::v2::LongLatPosition& pos() const;
  PROTOBUF_NODISCARD ::city::geo::v2::LongLatPosition* release_pos();
  ::city::geo::v2::LongLatPosition* mutable_pos();
  void set_allocated_pos(::city::geo::v2::LongLatPosition* value);
  void unsafe_arena_set_allocated_pos(::city::geo::v2::LongLatPosition* value);
  ::city::geo::v2::LongLatPosition* unsafe_arena_release_pos();

  private:
  const ::city::geo::v2::LongLatPosition& _internal_pos() const;
  ::city::geo::v2::LongLatPosition* _internal_mutable_pos();

  public:
  // .city.wargame.v1.RecoType type = 2 [json_name = "type"];
  void clear_type() ;
  ::city::wargame::v1::RecoType type() const;
  void set_type(::city::wargame::v1::RecoType value);

  private:
  ::city::wargame::v1::RecoType _internal_type() const;
  void _internal_set_type(::city::wargame::v1::RecoType value);

  public:
  // @@protoc_insertion_point(class_scope:city.wargame.v1.RecoPoint)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::city::geo::v2::LongLatPosition* pos_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwargame_2fv1_2fwargame_2eproto;
};// -------------------------------------------------------------------

class Weapon final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.wargame.v1.Weapon) */ {
 public:
  inline Weapon() : Weapon(nullptr) {}
  ~Weapon() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Weapon(::google::protobuf::internal::ConstantInitialized);

  Weapon(const Weapon& from);
  Weapon(Weapon&& from) noexcept
    : Weapon() {
    *this = ::std::move(from);
  }

  inline Weapon& operator=(const Weapon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Weapon& operator=(Weapon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Weapon& default_instance() {
    return *internal_default_instance();
  }
  static inline const Weapon* internal_default_instance() {
    return reinterpret_cast<const Weapon*>(
               &_Weapon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Weapon& a, Weapon& b) {
    a.Swap(&b);
  }
  inline void Swap(Weapon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Weapon* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Weapon* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Weapon>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Weapon& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Weapon& from) {
    Weapon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Weapon* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.wargame.v1.Weapon";
  }
  protected:
  explicit Weapon(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedTypeFieldNumber = 2,
    kBlueTypeFieldNumber = 3,
    kNumFieldNumber = 4,
  };
  // optional .city.wargame.v1.RedWeaponType red_type = 2 [json_name = "redType"];
  bool has_red_type() const;
  void clear_red_type() ;
  ::city::wargame::v1::RedWeaponType red_type() const;
  void set_red_type(::city::wargame::v1::RedWeaponType value);

  private:
  ::city::wargame::v1::RedWeaponType _internal_red_type() const;
  void _internal_set_red_type(::city::wargame::v1::RedWeaponType value);

  public:
  // optional .city.wargame.v1.BlueWeaponType blue_type = 3 [json_name = "blueType"];
  bool has_blue_type() const;
  void clear_blue_type() ;
  ::city::wargame::v1::BlueWeaponType blue_type() const;
  void set_blue_type(::city::wargame::v1::BlueWeaponType value);

  private:
  ::city::wargame::v1::BlueWeaponType _internal_blue_type() const;
  void _internal_set_blue_type(::city::wargame::v1::BlueWeaponType value);

  public:
  // int32 num = 4 [json_name = "num"];
  void clear_num() ;
  ::int32_t num() const;
  void set_num(::int32_t value);

  private:
  ::int32_t _internal_num() const;
  void _internal_set_num(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.wargame.v1.Weapon)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int red_type_;
    int blue_type_;
    ::int32_t num_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwargame_2fv1_2fwargame_2eproto;
};// -------------------------------------------------------------------

class Point final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.wargame.v1.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Point(::google::protobuf::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.wargame.v1.Point";
  }
  protected:
  explicit Point(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeaponFieldNumber = 1,
    kPosFieldNumber = 2,
    kRadiusFieldNumber = 3,
  };
  // .city.wargame.v1.Weapon weapon = 1 [json_name = "weapon"];
  bool has_weapon() const;
  void clear_weapon() ;
  const ::city::wargame::v1::Weapon& weapon() const;
  PROTOBUF_NODISCARD ::city::wargame::v1::Weapon* release_weapon();
  ::city::wargame::v1::Weapon* mutable_weapon();
  void set_allocated_weapon(::city::wargame::v1::Weapon* value);
  void unsafe_arena_set_allocated_weapon(::city::wargame::v1::Weapon* value);
  ::city::wargame::v1::Weapon* unsafe_arena_release_weapon();

  private:
  const ::city::wargame::v1::Weapon& _internal_weapon() const;
  ::city::wargame::v1::Weapon* _internal_mutable_weapon();

  public:
  // .city.geo.v2.LongLatPosition pos = 2 [json_name = "pos"];
  bool has_pos() const;
  void clear_pos() ;
  const ::city::geo::v2::LongLatPosition& pos() const;
  PROTOBUF_NODISCARD ::city::geo::v2::LongLatPosition* release_pos();
  ::city::geo::v2::LongLatPosition* mutable_pos();
  void set_allocated_pos(::city::geo::v2::LongLatPosition* value);
  void unsafe_arena_set_allocated_pos(::city::geo::v2::LongLatPosition* value);
  ::city::geo::v2::LongLatPosition* unsafe_arena_release_pos();

  private:
  const ::city::geo::v2::LongLatPosition& _internal_pos() const;
  ::city::geo::v2::LongLatPosition* _internal_mutable_pos();

  public:
  // double radius = 3 [json_name = "radius"];
  void clear_radius() ;
  double radius() const;
  void set_radius(double value);

  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);

  public:
  // @@protoc_insertion_point(class_scope:city.wargame.v1.Point)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::city::wargame::v1::Weapon* weapon_;
    ::city::geo::v2::LongLatPosition* pos_;
    double radius_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwargame_2fv1_2fwargame_2eproto;
};// -------------------------------------------------------------------

class Hit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.wargame.v1.Hit) */ {
 public:
  inline Hit() : Hit(nullptr) {}
  ~Hit() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Hit(::google::protobuf::internal::ConstantInitialized);

  Hit(const Hit& from);
  Hit(Hit&& from) noexcept
    : Hit() {
    *this = ::std::move(from);
  }

  inline Hit& operator=(const Hit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hit& operator=(Hit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Hit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hit* internal_default_instance() {
    return reinterpret_cast<const Hit*>(
               &_Hit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Hit& a, Hit& b) {
    a.Swap(&b);
  }
  inline void Swap(Hit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Hit* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Hit>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Hit& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Hit& from) {
    Hit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hit* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.wargame.v1.Hit";
  }
  protected:
  explicit Hit(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefensesFieldNumber = 2,
    kAttackFieldNumber = 1,
    kResultFieldNumber = 3,
    kArriveFieldNumber = 4,
  };
  // repeated .city.wargame.v1.Point defenses = 2 [json_name = "defenses"];
  int defenses_size() const;
  private:
  int _internal_defenses_size() const;

  public:
  void clear_defenses() ;
  ::city::wargame::v1::Point* mutable_defenses(int index);
  ::google::protobuf::RepeatedPtrField< ::city::wargame::v1::Point >*
      mutable_defenses();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::wargame::v1::Point>& _internal_defenses() const;
  ::google::protobuf::RepeatedPtrField<::city::wargame::v1::Point>* _internal_mutable_defenses();
  public:
  const ::city::wargame::v1::Point& defenses(int index) const;
  ::city::wargame::v1::Point* add_defenses();
  const ::google::protobuf::RepeatedPtrField< ::city::wargame::v1::Point >&
      defenses() const;
  // .city.wargame.v1.Point attack = 1 [json_name = "attack"];
  bool has_attack() const;
  void clear_attack() ;
  const ::city::wargame::v1::Point& attack() const;
  PROTOBUF_NODISCARD ::city::wargame::v1::Point* release_attack();
  ::city::wargame::v1::Point* mutable_attack();
  void set_allocated_attack(::city::wargame::v1::Point* value);
  void unsafe_arena_set_allocated_attack(::city::wargame::v1::Point* value);
  ::city::wargame::v1::Point* unsafe_arena_release_attack();

  private:
  const ::city::wargame::v1::Point& _internal_attack() const;
  ::city::wargame::v1::Point* _internal_mutable_attack();

  public:
  // bool result = 3 [json_name = "result"];
  void clear_result() ;
  bool result() const;
  void set_result(bool value);

  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);

  public:
  // int32 arrive = 4 [json_name = "arrive"];
  void clear_arrive() ;
  ::int32_t arrive() const;
  void set_arrive(::int32_t value);

  private:
  ::int32_t _internal_arrive() const;
  void _internal_set_arrive(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.wargame.v1.Hit)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::city::wargame::v1::Point > defenses_;
    ::city::wargame::v1::Point* attack_;
    bool result_;
    ::int32_t arrive_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwargame_2fv1_2fwargame_2eproto;
};// -------------------------------------------------------------------

class HitHistory final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.wargame.v1.HitHistory) */ {
 public:
  inline HitHistory() : HitHistory(nullptr) {}
  ~HitHistory() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HitHistory(::google::protobuf::internal::ConstantInitialized);

  HitHistory(const HitHistory& from);
  HitHistory(HitHistory&& from) noexcept
    : HitHistory() {
    *this = ::std::move(from);
  }

  inline HitHistory& operator=(const HitHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline HitHistory& operator=(HitHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HitHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const HitHistory* internal_default_instance() {
    return reinterpret_cast<const HitHistory*>(
               &_HitHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HitHistory& a, HitHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(HitHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HitHistory* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HitHistory* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HitHistory>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HitHistory& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HitHistory& from) {
    HitHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HitHistory* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.wargame.v1.HitHistory";
  }
  protected:
  explicit HitHistory(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHitsFieldNumber = 1,
  };
  // repeated .city.wargame.v1.Hit hits = 1 [json_name = "hits"];
  int hits_size() const;
  private:
  int _internal_hits_size() const;

  public:
  void clear_hits() ;
  ::city::wargame::v1::Hit* mutable_hits(int index);
  ::google::protobuf::RepeatedPtrField< ::city::wargame::v1::Hit >*
      mutable_hits();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::wargame::v1::Hit>& _internal_hits() const;
  ::google::protobuf::RepeatedPtrField<::city::wargame::v1::Hit>* _internal_mutable_hits();
  public:
  const ::city::wargame::v1::Hit& hits(int index) const;
  ::city::wargame::v1::Hit* add_hits();
  const ::google::protobuf::RepeatedPtrField< ::city::wargame::v1::Hit >&
      hits() const;
  // @@protoc_insertion_point(class_scope:city.wargame.v1.HitHistory)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::city::wargame::v1::Hit > hits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwargame_2fv1_2fwargame_2eproto;
};// -------------------------------------------------------------------

class Casualty final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.wargame.v1.Casualty) */ {
 public:
  inline Casualty() : Casualty(nullptr) {}
  ~Casualty() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Casualty(::google::protobuf::internal::ConstantInitialized);

  Casualty(const Casualty& from);
  Casualty(Casualty&& from) noexcept
    : Casualty() {
    *this = ::std::move(from);
  }

  inline Casualty& operator=(const Casualty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Casualty& operator=(Casualty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Casualty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Casualty* internal_default_instance() {
    return reinterpret_cast<const Casualty*>(
               &_Casualty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Casualty& a, Casualty& b) {
    a.Swap(&b);
  }
  inline void Swap(Casualty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Casualty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Casualty* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Casualty>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Casualty& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Casualty& from) {
    Casualty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Casualty* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.wargame.v1.Casualty";
  }
  protected:
  explicit Casualty(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAoiIdFieldNumber = 1,
    kNumFieldNumber = 2,
  };
  // int32 aoi_id = 1 [json_name = "aoiId"];
  void clear_aoi_id() ;
  ::int32_t aoi_id() const;
  void set_aoi_id(::int32_t value);

  private:
  ::int32_t _internal_aoi_id() const;
  void _internal_set_aoi_id(::int32_t value);

  public:
  // int32 num = 2 [json_name = "num"];
  void clear_num() ;
  ::int32_t num() const;
  void set_num(::int32_t value);

  private:
  ::int32_t _internal_num() const;
  void _internal_set_num(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.wargame.v1.Casualty)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t aoi_id_;
    ::int32_t num_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwargame_2fv1_2fwargame_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RecoPoint

// .city.geo.v2.LongLatPosition pos = 1 [json_name = "pos"];
inline bool RecoPoint::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline const ::city::geo::v2::LongLatPosition& RecoPoint::_internal_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::geo::v2::LongLatPosition* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::LongLatPosition&>(::city::geo::v2::_LongLatPosition_default_instance_);
}
inline const ::city::geo::v2::LongLatPosition& RecoPoint::pos() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.RecoPoint.pos)
  return _internal_pos();
}
inline void RecoPoint::unsafe_arena_set_allocated_pos(::city::geo::v2::LongLatPosition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = reinterpret_cast<::city::geo::v2::LongLatPosition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.wargame.v1.RecoPoint.pos)
}
inline ::city::geo::v2::LongLatPosition* RecoPoint::release_pos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::LongLatPosition* released = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::geo::v2::LongLatPosition* RecoPoint::unsafe_arena_release_pos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.wargame.v1.RecoPoint.pos)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::LongLatPosition* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::city::geo::v2::LongLatPosition* RecoPoint::_internal_mutable_pos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::LongLatPosition>(GetArenaForAllocation());
    _impl_.pos_ = reinterpret_cast<::city::geo::v2::LongLatPosition*>(p);
  }
  return _impl_.pos_;
}
inline ::city::geo::v2::LongLatPosition* RecoPoint::mutable_pos() {
  ::city::geo::v2::LongLatPosition* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:city.wargame.v1.RecoPoint.pos)
  return _msg;
}
inline void RecoPoint::set_allocated_pos(::city::geo::v2::LongLatPosition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pos_ = reinterpret_cast<::city::geo::v2::LongLatPosition*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.wargame.v1.RecoPoint.pos)
}

// .city.wargame.v1.RecoType type = 2 [json_name = "type"];
inline void RecoPoint::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::wargame::v1::RecoType RecoPoint::type() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.RecoPoint.type)
  return _internal_type();
}
inline void RecoPoint::set_type(::city::wargame::v1::RecoType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.RecoPoint.type)
}
inline ::city::wargame::v1::RecoType RecoPoint::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::wargame::v1::RecoType>(_impl_.type_);
}
inline void RecoPoint::_internal_set_type(::city::wargame::v1::RecoType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// Weapon

// optional .city.wargame.v1.RedWeaponType red_type = 2 [json_name = "redType"];
inline bool Weapon::has_red_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Weapon::clear_red_type() {
  _impl_.red_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::city::wargame::v1::RedWeaponType Weapon::red_type() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Weapon.red_type)
  return _internal_red_type();
}
inline void Weapon::set_red_type(::city::wargame::v1::RedWeaponType value) {
  _internal_set_red_type(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Weapon.red_type)
}
inline ::city::wargame::v1::RedWeaponType Weapon::_internal_red_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::wargame::v1::RedWeaponType>(_impl_.red_type_);
}
inline void Weapon::_internal_set_red_type(::city::wargame::v1::RedWeaponType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.red_type_ = value;
}

// optional .city.wargame.v1.BlueWeaponType blue_type = 3 [json_name = "blueType"];
inline bool Weapon::has_blue_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Weapon::clear_blue_type() {
  _impl_.blue_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::city::wargame::v1::BlueWeaponType Weapon::blue_type() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Weapon.blue_type)
  return _internal_blue_type();
}
inline void Weapon::set_blue_type(::city::wargame::v1::BlueWeaponType value) {
  _internal_set_blue_type(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Weapon.blue_type)
}
inline ::city::wargame::v1::BlueWeaponType Weapon::_internal_blue_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::wargame::v1::BlueWeaponType>(_impl_.blue_type_);
}
inline void Weapon::_internal_set_blue_type(::city::wargame::v1::BlueWeaponType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.blue_type_ = value;
}

// int32 num = 4 [json_name = "num"];
inline void Weapon::clear_num() {
  _impl_.num_ = 0;
}
inline ::int32_t Weapon::num() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Weapon.num)
  return _internal_num();
}
inline void Weapon::set_num(::int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Weapon.num)
}
inline ::int32_t Weapon::_internal_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_;
}
inline void Weapon::_internal_set_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_ = value;
}

// -------------------------------------------------------------------

// Point

// .city.wargame.v1.Weapon weapon = 1 [json_name = "weapon"];
inline bool Point::has_weapon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weapon_ != nullptr);
  return value;
}
inline void Point::clear_weapon() {
  if (_impl_.weapon_ != nullptr) _impl_.weapon_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::city::wargame::v1::Weapon& Point::_internal_weapon() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::wargame::v1::Weapon* p = _impl_.weapon_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::wargame::v1::Weapon&>(::city::wargame::v1::_Weapon_default_instance_);
}
inline const ::city::wargame::v1::Weapon& Point::weapon() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Point.weapon)
  return _internal_weapon();
}
inline void Point::unsafe_arena_set_allocated_weapon(::city::wargame::v1::Weapon* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.weapon_);
  }
  _impl_.weapon_ = reinterpret_cast<::city::wargame::v1::Weapon*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.wargame.v1.Point.weapon)
}
inline ::city::wargame::v1::Weapon* Point::release_weapon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::wargame::v1::Weapon* released = _impl_.weapon_;
  _impl_.weapon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::wargame::v1::Weapon* Point::unsafe_arena_release_weapon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.wargame.v1.Point.weapon)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::wargame::v1::Weapon* temp = _impl_.weapon_;
  _impl_.weapon_ = nullptr;
  return temp;
}
inline ::city::wargame::v1::Weapon* Point::_internal_mutable_weapon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.weapon_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::wargame::v1::Weapon>(GetArenaForAllocation());
    _impl_.weapon_ = reinterpret_cast<::city::wargame::v1::Weapon*>(p);
  }
  return _impl_.weapon_;
}
inline ::city::wargame::v1::Weapon* Point::mutable_weapon() {
  ::city::wargame::v1::Weapon* _msg = _internal_mutable_weapon();
  // @@protoc_insertion_point(field_mutable:city.wargame.v1.Point.weapon)
  return _msg;
}
inline void Point::set_allocated_weapon(::city::wargame::v1::Weapon* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::city::wargame::v1::Weapon*>(_impl_.weapon_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::city::wargame::v1::Weapon*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.weapon_ = reinterpret_cast<::city::wargame::v1::Weapon*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.wargame.v1.Point.weapon)
}

// .city.geo.v2.LongLatPosition pos = 2 [json_name = "pos"];
inline bool Point::has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline const ::city::geo::v2::LongLatPosition& Point::_internal_pos() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::geo::v2::LongLatPosition* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::LongLatPosition&>(::city::geo::v2::_LongLatPosition_default_instance_);
}
inline const ::city::geo::v2::LongLatPosition& Point::pos() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Point.pos)
  return _internal_pos();
}
inline void Point::unsafe_arena_set_allocated_pos(::city::geo::v2::LongLatPosition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = reinterpret_cast<::city::geo::v2::LongLatPosition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.wargame.v1.Point.pos)
}
inline ::city::geo::v2::LongLatPosition* Point::release_pos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::geo::v2::LongLatPosition* released = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::geo::v2::LongLatPosition* Point::unsafe_arena_release_pos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.wargame.v1.Point.pos)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::geo::v2::LongLatPosition* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::city::geo::v2::LongLatPosition* Point::_internal_mutable_pos() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::LongLatPosition>(GetArenaForAllocation());
    _impl_.pos_ = reinterpret_cast<::city::geo::v2::LongLatPosition*>(p);
  }
  return _impl_.pos_;
}
inline ::city::geo::v2::LongLatPosition* Point::mutable_pos() {
  ::city::geo::v2::LongLatPosition* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:city.wargame.v1.Point.pos)
  return _msg;
}
inline void Point::set_allocated_pos(::city::geo::v2::LongLatPosition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pos_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.pos_ = reinterpret_cast<::city::geo::v2::LongLatPosition*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.wargame.v1.Point.pos)
}

// double radius = 3 [json_name = "radius"];
inline void Point::clear_radius() {
  _impl_.radius_ = 0;
}
inline double Point::radius() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Point.radius)
  return _internal_radius();
}
inline void Point::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Point.radius)
}
inline double Point::_internal_radius() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.radius_;
}
inline void Point::_internal_set_radius(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.radius_ = value;
}

// -------------------------------------------------------------------

// Hit

// .city.wargame.v1.Point attack = 1 [json_name = "attack"];
inline bool Hit::has_attack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attack_ != nullptr);
  return value;
}
inline void Hit::clear_attack() {
  if (_impl_.attack_ != nullptr) _impl_.attack_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::city::wargame::v1::Point& Hit::_internal_attack() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::wargame::v1::Point* p = _impl_.attack_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::wargame::v1::Point&>(::city::wargame::v1::_Point_default_instance_);
}
inline const ::city::wargame::v1::Point& Hit::attack() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Hit.attack)
  return _internal_attack();
}
inline void Hit::unsafe_arena_set_allocated_attack(::city::wargame::v1::Point* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attack_);
  }
  _impl_.attack_ = reinterpret_cast<::city::wargame::v1::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.wargame.v1.Hit.attack)
}
inline ::city::wargame::v1::Point* Hit::release_attack() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::wargame::v1::Point* released = _impl_.attack_;
  _impl_.attack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::wargame::v1::Point* Hit::unsafe_arena_release_attack() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.wargame.v1.Hit.attack)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::wargame::v1::Point* temp = _impl_.attack_;
  _impl_.attack_ = nullptr;
  return temp;
}
inline ::city::wargame::v1::Point* Hit::_internal_mutable_attack() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.attack_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::wargame::v1::Point>(GetArenaForAllocation());
    _impl_.attack_ = reinterpret_cast<::city::wargame::v1::Point*>(p);
  }
  return _impl_.attack_;
}
inline ::city::wargame::v1::Point* Hit::mutable_attack() {
  ::city::wargame::v1::Point* _msg = _internal_mutable_attack();
  // @@protoc_insertion_point(field_mutable:city.wargame.v1.Hit.attack)
  return _msg;
}
inline void Hit::set_allocated_attack(::city::wargame::v1::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::city::wargame::v1::Point*>(_impl_.attack_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::city::wargame::v1::Point*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.attack_ = reinterpret_cast<::city::wargame::v1::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.wargame.v1.Hit.attack)
}

// repeated .city.wargame.v1.Point defenses = 2 [json_name = "defenses"];
inline int Hit::_internal_defenses_size() const {
  return _internal_defenses().size();
}
inline int Hit::defenses_size() const {
  return _internal_defenses_size();
}
inline void Hit::clear_defenses() {
  _internal_mutable_defenses()->Clear();
}
inline ::city::wargame::v1::Point* Hit::mutable_defenses(int index) {
  // @@protoc_insertion_point(field_mutable:city.wargame.v1.Hit.defenses)
  return _internal_mutable_defenses()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::wargame::v1::Point >*
Hit::mutable_defenses() {
  // @@protoc_insertion_point(field_mutable_list:city.wargame.v1.Hit.defenses)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_defenses();
}
inline const ::city::wargame::v1::Point& Hit::defenses(int index) const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Hit.defenses)
    return _internal_defenses().Get(index);
}
inline ::city::wargame::v1::Point* Hit::add_defenses() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::wargame::v1::Point* _add = _internal_mutable_defenses()->Add();
  // @@protoc_insertion_point(field_add:city.wargame.v1.Hit.defenses)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::wargame::v1::Point >&
Hit::defenses() const {
  // @@protoc_insertion_point(field_list:city.wargame.v1.Hit.defenses)
  return _internal_defenses();
}
inline const ::google::protobuf::RepeatedPtrField<::city::wargame::v1::Point>&
Hit::_internal_defenses() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.defenses_;
}
inline ::google::protobuf::RepeatedPtrField<::city::wargame::v1::Point>*
Hit::_internal_mutable_defenses() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.defenses_;
}

// bool result = 3 [json_name = "result"];
inline void Hit::clear_result() {
  _impl_.result_ = false;
}
inline bool Hit::result() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Hit.result)
  return _internal_result();
}
inline void Hit::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Hit.result)
}
inline bool Hit::_internal_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.result_;
}
inline void Hit::_internal_set_result(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.result_ = value;
}

// int32 arrive = 4 [json_name = "arrive"];
inline void Hit::clear_arrive() {
  _impl_.arrive_ = 0;
}
inline ::int32_t Hit::arrive() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Hit.arrive)
  return _internal_arrive();
}
inline void Hit::set_arrive(::int32_t value) {
  _internal_set_arrive(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Hit.arrive)
}
inline ::int32_t Hit::_internal_arrive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.arrive_;
}
inline void Hit::_internal_set_arrive(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.arrive_ = value;
}

// -------------------------------------------------------------------

// HitHistory

// repeated .city.wargame.v1.Hit hits = 1 [json_name = "hits"];
inline int HitHistory::_internal_hits_size() const {
  return _internal_hits().size();
}
inline int HitHistory::hits_size() const {
  return _internal_hits_size();
}
inline void HitHistory::clear_hits() {
  _internal_mutable_hits()->Clear();
}
inline ::city::wargame::v1::Hit* HitHistory::mutable_hits(int index) {
  // @@protoc_insertion_point(field_mutable:city.wargame.v1.HitHistory.hits)
  return _internal_mutable_hits()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::wargame::v1::Hit >*
HitHistory::mutable_hits() {
  // @@protoc_insertion_point(field_mutable_list:city.wargame.v1.HitHistory.hits)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_hits();
}
inline const ::city::wargame::v1::Hit& HitHistory::hits(int index) const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.HitHistory.hits)
    return _internal_hits().Get(index);
}
inline ::city::wargame::v1::Hit* HitHistory::add_hits() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::wargame::v1::Hit* _add = _internal_mutable_hits()->Add();
  // @@protoc_insertion_point(field_add:city.wargame.v1.HitHistory.hits)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::wargame::v1::Hit >&
HitHistory::hits() const {
  // @@protoc_insertion_point(field_list:city.wargame.v1.HitHistory.hits)
  return _internal_hits();
}
inline const ::google::protobuf::RepeatedPtrField<::city::wargame::v1::Hit>&
HitHistory::_internal_hits() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hits_;
}
inline ::google::protobuf::RepeatedPtrField<::city::wargame::v1::Hit>*
HitHistory::_internal_mutable_hits() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.hits_;
}

// -------------------------------------------------------------------

// Casualty

// int32 aoi_id = 1 [json_name = "aoiId"];
inline void Casualty::clear_aoi_id() {
  _impl_.aoi_id_ = 0;
}
inline ::int32_t Casualty::aoi_id() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Casualty.aoi_id)
  return _internal_aoi_id();
}
inline void Casualty::set_aoi_id(::int32_t value) {
  _internal_set_aoi_id(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Casualty.aoi_id)
}
inline ::int32_t Casualty::_internal_aoi_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aoi_id_;
}
inline void Casualty::_internal_set_aoi_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.aoi_id_ = value;
}

// int32 num = 2 [json_name = "num"];
inline void Casualty::clear_num() {
  _impl_.num_ = 0;
}
inline ::int32_t Casualty::num() const {
  // @@protoc_insertion_point(field_get:city.wargame.v1.Casualty.num)
  return _internal_num();
}
inline void Casualty::set_num(::int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:city.wargame.v1.Casualty.num)
}
inline ::int32_t Casualty::_internal_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_;
}
inline void Casualty::_internal_set_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wargame
}  // namespace city


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::city::wargame::v1::RedWeaponType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::wargame::v1::RedWeaponType>() {
  return ::city::wargame::v1::RedWeaponType_descriptor();
}
template <>
struct is_proto_enum<::city::wargame::v1::BlueWeaponType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::wargame::v1::BlueWeaponType>() {
  return ::city::wargame::v1::BlueWeaponType_descriptor();
}
template <>
struct is_proto_enum<::city::wargame::v1::Camp> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::wargame::v1::Camp>() {
  return ::city::wargame::v1::Camp_descriptor();
}
template <>
struct is_proto_enum<::city::wargame::v1::RecoType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::wargame::v1::RecoType>() {
  return ::city::wargame::v1::RecoType_descriptor();
}
template <>
struct is_proto_enum<::city::wargame::v1::RecoAlgoType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::wargame::v1::RecoAlgoType>() {
  return ::city::wargame::v1::RecoAlgoType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_city_2fwargame_2fv1_2fwargame_2eproto_2epb_2eh
