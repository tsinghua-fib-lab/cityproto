// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/wargame/v1/wargame_service.proto

#include "city/wargame/v1/wargame_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace wargame {
namespace v1 {
PROTOBUF_CONSTEXPR PickPointsRequest::PickPointsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_.camp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PickPointsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PickPointsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PickPointsRequestDefaultTypeInternal() {}
  union {
    PickPointsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PickPointsRequestDefaultTypeInternal _PickPointsRequest_default_instance_;
PROTOBUF_CONSTEXPR PickPointsResponse::PickPointsResponse(
    ::_pbi::ConstantInitialized) {}
struct PickPointsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PickPointsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PickPointsResponseDefaultTypeInternal() {}
  union {
    PickPointsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PickPointsResponseDefaultTypeInternal _PickPointsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetPickPointsRequest::GetPickPointsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPickPointsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPickPointsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPickPointsRequestDefaultTypeInternal() {}
  union {
    GetPickPointsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPickPointsRequestDefaultTypeInternal _GetPickPointsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPickPointsResponse::GetPickPointsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPickPointsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPickPointsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPickPointsResponseDefaultTypeInternal() {}
  union {
    GetPickPointsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPickPointsResponseDefaultTypeInternal _GetPickPointsResponse_default_instance_;
PROTOBUF_CONSTEXPR SetScoreWeightRequest::SetScoreWeightRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.money_)*/0
  , /*decltype(_impl_.population_loss_)*/0
  , /*decltype(_impl_.elec_power_)*/0
  , /*decltype(_impl_.elec_distory_1_)*/0
  , /*decltype(_impl_.water_distory_1_)*/0
  , /*decltype(_impl_.bs_distory_1_)*/0
  , /*decltype(_impl_.traffic_distory_1_)*/0
  , /*decltype(_impl_.elec_distory_2_)*/0
  , /*decltype(_impl_.water_distory_2_)*/0
  , /*decltype(_impl_.bs_distory_2_)*/0
  , /*decltype(_impl_.traffic_distory_2_)*/0
  , /*decltype(_impl_.elec_distory_3_)*/0
  , /*decltype(_impl_.water_distory_3_)*/0
  , /*decltype(_impl_.bs_distory_3_)*/0
  , /*decltype(_impl_.traffic_distory_3_)*/0
  , /*decltype(_impl_.defense_success_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetScoreWeightRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetScoreWeightRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetScoreWeightRequestDefaultTypeInternal() {}
  union {
    SetScoreWeightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetScoreWeightRequestDefaultTypeInternal _SetScoreWeightRequest_default_instance_;
PROTOBUF_CONSTEXPR SetScoreWeightResponse::SetScoreWeightResponse(
    ::_pbi::ConstantInitialized) {}
struct SetScoreWeightResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetScoreWeightResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetScoreWeightResponseDefaultTypeInternal() {}
  union {
    SetScoreWeightResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetScoreWeightResponseDefaultTypeInternal _SetScoreWeightResponse_default_instance_;
PROTOBUF_CONSTEXPR GiveDefenseOrderRequest::GiveDefenseOrderRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weight_radius_)*/0
  , /*decltype(_impl_.weight_550_)*/0
  , /*decltype(_impl_.weight_220_)*/0
  , /*decltype(_impl_.weight_110_)*/0
  , /*decltype(_impl_.prob_threshold_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GiveDefenseOrderRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GiveDefenseOrderRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GiveDefenseOrderRequestDefaultTypeInternal() {}
  union {
    GiveDefenseOrderRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GiveDefenseOrderRequestDefaultTypeInternal _GiveDefenseOrderRequest_default_instance_;
PROTOBUF_CONSTEXPR GiveDefenseOrderResponse::GiveDefenseOrderResponse(
    ::_pbi::ConstantInitialized) {}
struct GiveDefenseOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GiveDefenseOrderResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GiveDefenseOrderResponseDefaultTypeInternal() {}
  union {
    GiveDefenseOrderResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GiveDefenseOrderResponseDefaultTypeInternal _GiveDefenseOrderResponse_default_instance_;
PROTOBUF_CONSTEXPR GetHitHistoryRequest::GetHitHistoryRequest(
    ::_pbi::ConstantInitialized) {}
struct GetHitHistoryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHitHistoryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHitHistoryRequestDefaultTypeInternal() {}
  union {
    GetHitHistoryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHitHistoryRequestDefaultTypeInternal _GetHitHistoryRequest_default_instance_;
PROTOBUF_CONSTEXPR GetHitHistoryResponse::GetHitHistoryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.histories_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetHitHistoryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHitHistoryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHitHistoryResponseDefaultTypeInternal() {}
  union {
    GetHitHistoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHitHistoryResponseDefaultTypeInternal _GetHitHistoryResponse_default_instance_;
PROTOBUF_CONSTEXPR GetRecoPointsRequest::GetRecoPointsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camp_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRecoPointsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRecoPointsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRecoPointsRequestDefaultTypeInternal() {}
  union {
    GetRecoPointsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRecoPointsRequestDefaultTypeInternal _GetRecoPointsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetRecoPointsResponse::GetRecoPointsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRecoPointsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRecoPointsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRecoPointsResponseDefaultTypeInternal() {}
  union {
    GetRecoPointsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRecoPointsResponseDefaultTypeInternal _GetRecoPointsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetStepRequest::GetStepRequest(
    ::_pbi::ConstantInitialized) {}
struct GetStepRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStepRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStepRequestDefaultTypeInternal() {}
  union {
    GetStepRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStepRequestDefaultTypeInternal _GetStepRequest_default_instance_;
PROTOBUF_CONSTEXPR GetStepResponse::GetStepResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.step_)*/0
  , /*decltype(_impl_.red_pick_ready_)*/false
  , /*decltype(_impl_.blue_pick_ready_)*/false
  , /*decltype(_impl_.is_game_started_)*/false
  , /*decltype(_impl_.round_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetStepResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStepResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStepResponseDefaultTypeInternal() {}
  union {
    GetStepResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStepResponseDefaultTypeInternal _GetStepResponse_default_instance_;
PROTOBUF_CONSTEXPR GetCasualtiesRequest::GetCasualtiesRequest(
    ::_pbi::ConstantInitialized) {}
struct GetCasualtiesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCasualtiesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCasualtiesRequestDefaultTypeInternal() {}
  union {
    GetCasualtiesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCasualtiesRequestDefaultTypeInternal _GetCasualtiesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetCasualtiesResponse::GetCasualtiesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.casualties_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCasualtiesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCasualtiesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCasualtiesResponseDefaultTypeInternal() {}
  union {
    GetCasualtiesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCasualtiesResponseDefaultTypeInternal _GetCasualtiesResponse_default_instance_;
}  // namespace v1
}  // namespace wargame
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[16];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_city_2fwargame_2fv1_2fwargame_5fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fwargame_2fv1_2fwargame_5fservice_2eproto = nullptr;

const uint32_t TableStruct_city_2fwargame_2fv1_2fwargame_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::PickPointsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::PickPointsRequest, _impl_.camp_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::PickPointsRequest, _impl_.points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::PickPointsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetPickPointsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetPickPointsRequest, _impl_.camp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetPickPointsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetPickPointsResponse, _impl_.points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.money_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.population_loss_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.elec_power_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.elec_distory_1_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.water_distory_1_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.bs_distory_1_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.traffic_distory_1_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.elec_distory_2_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.water_distory_2_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.bs_distory_2_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.traffic_distory_2_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.elec_distory_3_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.water_distory_3_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.bs_distory_3_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.traffic_distory_3_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightRequest, _impl_.defense_success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::SetScoreWeightResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GiveDefenseOrderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GiveDefenseOrderRequest, _impl_.weight_radius_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GiveDefenseOrderRequest, _impl_.weight_550_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GiveDefenseOrderRequest, _impl_.weight_220_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GiveDefenseOrderRequest, _impl_.weight_110_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GiveDefenseOrderRequest, _impl_.prob_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GiveDefenseOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetHitHistoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetHitHistoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetHitHistoryResponse, _impl_.histories_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetRecoPointsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetRecoPointsRequest, _impl_.camp_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetRecoPointsRequest, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetRecoPointsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetRecoPointsResponse, _impl_.points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetStepRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetStepResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetStepResponse, _impl_.step_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetStepResponse, _impl_.red_pick_ready_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetStepResponse, _impl_.blue_pick_ready_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetStepResponse, _impl_.round_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetStepResponse, _impl_.is_game_started_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetCasualtiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetCasualtiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::GetCasualtiesResponse, _impl_.casualties_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::wargame::v1::PickPointsRequest)},
  { 8, -1, -1, sizeof(::city::wargame::v1::PickPointsResponse)},
  { 14, -1, -1, sizeof(::city::wargame::v1::GetPickPointsRequest)},
  { 21, -1, -1, sizeof(::city::wargame::v1::GetPickPointsResponse)},
  { 28, -1, -1, sizeof(::city::wargame::v1::SetScoreWeightRequest)},
  { 50, -1, -1, sizeof(::city::wargame::v1::SetScoreWeightResponse)},
  { 56, -1, -1, sizeof(::city::wargame::v1::GiveDefenseOrderRequest)},
  { 67, -1, -1, sizeof(::city::wargame::v1::GiveDefenseOrderResponse)},
  { 73, -1, -1, sizeof(::city::wargame::v1::GetHitHistoryRequest)},
  { 79, -1, -1, sizeof(::city::wargame::v1::GetHitHistoryResponse)},
  { 86, -1, -1, sizeof(::city::wargame::v1::GetRecoPointsRequest)},
  { 94, -1, -1, sizeof(::city::wargame::v1::GetRecoPointsResponse)},
  { 101, -1, -1, sizeof(::city::wargame::v1::GetStepRequest)},
  { 107, -1, -1, sizeof(::city::wargame::v1::GetStepResponse)},
  { 118, -1, -1, sizeof(::city::wargame::v1::GetCasualtiesRequest)},
  { 124, -1, -1, sizeof(::city::wargame::v1::GetCasualtiesResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::wargame::v1::_PickPointsRequest_default_instance_._instance,
  &::city::wargame::v1::_PickPointsResponse_default_instance_._instance,
  &::city::wargame::v1::_GetPickPointsRequest_default_instance_._instance,
  &::city::wargame::v1::_GetPickPointsResponse_default_instance_._instance,
  &::city::wargame::v1::_SetScoreWeightRequest_default_instance_._instance,
  &::city::wargame::v1::_SetScoreWeightResponse_default_instance_._instance,
  &::city::wargame::v1::_GiveDefenseOrderRequest_default_instance_._instance,
  &::city::wargame::v1::_GiveDefenseOrderResponse_default_instance_._instance,
  &::city::wargame::v1::_GetHitHistoryRequest_default_instance_._instance,
  &::city::wargame::v1::_GetHitHistoryResponse_default_instance_._instance,
  &::city::wargame::v1::_GetRecoPointsRequest_default_instance_._instance,
  &::city::wargame::v1::_GetRecoPointsResponse_default_instance_._instance,
  &::city::wargame::v1::_GetStepRequest_default_instance_._instance,
  &::city::wargame::v1::_GetStepResponse_default_instance_._instance,
  &::city::wargame::v1::_GetCasualtiesRequest_default_instance_._instance,
  &::city::wargame::v1::_GetCasualtiesResponse_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%city/wargame/v1/wargame_service.proto\022"
  "\017city.wargame.v1\032\035city/wargame/v1/wargam"
  "e.proto\"n\n\021PickPointsRequest\022)\n\004camp\030\001 \001"
  "(\0162\025.city.wargame.v1.CampR\004camp\022.\n\006point"
  "s\030\002 \003(\0132\026.city.wargame.v1.PointR\006points\""
  "\024\n\022PickPointsResponse\"A\n\024GetPickPointsRe"
  "quest\022)\n\004camp\030\001 \001(\0162\025.city.wargame.v1.Ca"
  "mpR\004camp\"G\n\025GetPickPointsResponse\022.\n\006poi"
  "nts\030\001 \003(\0132\026.city.wargame.v1.PointR\006point"
  "s\"\362\004\n\025SetScoreWeightRequest\022\024\n\005money\030\001 \001"
  "(\001R\005money\022\'\n\017population_loss\030\002 \001(\001R\016popu"
  "lationLoss\022\035\n\nelec_power\030\003 \001(\001R\telecPowe"
  "r\022$\n\016elec_distory_1\030\004 \001(\001R\014elecDistory1\022"
  "&\n\017water_distory_1\030\005 \001(\001R\rwaterDistory1\022"
  " \n\014bs_distory_1\030\006 \001(\001R\nbsDistory1\022*\n\021tra"
  "ffic_distory_1\030\007 \001(\001R\017trafficDistory1\022$\n"
  "\016elec_distory_2\030\010 \001(\001R\014elecDistory2\022&\n\017w"
  "ater_distory_2\030\t \001(\001R\rwaterDistory2\022 \n\014b"
  "s_distory_2\030\n \001(\001R\nbsDistory2\022*\n\021traffic"
  "_distory_2\030\013 \001(\001R\017trafficDistory2\022$\n\016ele"
  "c_distory_3\030\014 \001(\001R\014elecDistory3\022&\n\017water"
  "_distory_3\030\r \001(\001R\rwaterDistory3\022 \n\014bs_di"
  "story_3\030\016 \001(\001R\nbsDistory3\022*\n\021traffic_dis"
  "tory_3\030\017 \001(\001R\017trafficDistory3\022\'\n\017defense"
  "_success\030\020 \001(\001R\016defenseSuccess\"\030\n\026SetSco"
  "reWeightResponse\"\302\001\n\027GiveDefenseOrderReq"
  "uest\022#\n\rweight_radius\030\001 \001(\001R\014weightRadiu"
  "s\022\035\n\nweight_550\030\002 \001(\001R\tweight550\022\035\n\nweig"
  "ht_220\030\003 \001(\001R\tweight220\022\035\n\nweight_110\030\004 "
  "\001(\001R\tweight110\022%\n\016prob_threshold\030\005 \001(\001R\r"
  "probThreshold\"\032\n\030GiveDefenseOrderRespons"
  "e\"\026\n\024GetHitHistoryRequest\"R\n\025GetHitHisto"
  "ryResponse\0229\n\thistories\030\001 \003(\0132\033.city.war"
  "game.v1.HitHistoryR\thistories\"t\n\024GetReco"
  "PointsRequest\022)\n\004camp\030\001 \001(\0162\025.city.warga"
  "me.v1.CampR\004camp\0221\n\004type\030\002 \001(\0162\035.city.wa"
  "rgame.v1.RecoAlgoTypeR\004type\"K\n\025GetRecoPo"
  "intsResponse\0222\n\006points\030\001 \003(\0132\032.city.warg"
  "ame.v1.RecoPointR\006points\"\020\n\016GetStepReque"
  "st\"\261\001\n\017GetStepResponse\022\022\n\004step\030\001 \001(\005R\004st"
  "ep\022$\n\016red_pick_ready\030\002 \001(\010R\014redPickReady"
  "\022&\n\017blue_pick_ready\030\003 \001(\010R\rbluePickReady"
  "\022\024\n\005round\030\004 \001(\005R\005round\022&\n\017is_game_starte"
  "d\030\005 \001(\010R\risGameStarted\"\026\n\024GetCasualtiesR"
  "equest\"R\n\025GetCasualtiesResponse\0229\n\ncasua"
  "lties\030\001 \003(\0132\031.city.wargame.v1.CasualtyR\n"
  "casualties2\201\006\n\016WarGameService\022U\n\nPickPoi"
  "nts\022\".city.wargame.v1.PickPointsRequest\032"
  "#.city.wargame.v1.PickPointsResponse\022^\n\r"
  "GetPickPoints\022%.city.wargame.v1.GetPickP"
  "ointsRequest\032&.city.wargame.v1.GetPickPo"
  "intsResponse\022g\n\020GiveDefenseOrder\022(.city."
  "wargame.v1.GiveDefenseOrderRequest\032).cit"
  "y.wargame.v1.GiveDefenseOrderResponse\022a\n"
  "\016SetScoreWeight\022&.city.wargame.v1.SetSco"
  "reWeightRequest\032\'.city.wargame.v1.SetSco"
  "reWeightResponse\022^\n\rGetHitHistory\022%.city"
  ".wargame.v1.GetHitHistoryRequest\032&.city."
  "wargame.v1.GetHitHistoryResponse\022^\n\rGetR"
  "ecoPoints\022%.city.wargame.v1.GetRecoPoint"
  "sRequest\032&.city.wargame.v1.GetRecoPoints"
  "Response\022L\n\007GetStep\022\037.city.wargame.v1.Ge"
  "tStepRequest\032 .city.wargame.v1.GetStepRe"
  "sponse\022^\n\rGetCasualties\022%.city.wargame.v"
  "1.GetCasualtiesRequest\032&.city.wargame.v1"
  ".GetCasualtiesResponseB\300\001\n\023com.city.warg"
  "ame.v1B\023WargameServiceProtoP\001Z6git.fibla"
  "b.net/sim/protos/go/city/wargame/v1;warg"
  "amev1\242\002\003CWX\252\002\017City.Wargame.V1\312\002\017City\\War"
  "game\\V1\342\002\033City\\Wargame\\V1\\GPBMetadata\352\002\021"
  "City::Wargame::V1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_deps[1] = {
  &::descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto,
};
static ::_pbi::once_flag descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto = {
    false, false, 2825, descriptor_table_protodef_city_2fwargame_2fv1_2fwargame_5fservice_2eproto,
    "city/wargame/v1/wargame_service.proto",
    &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once, descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_deps, 1, 16,
    schemas, file_default_instances, TableStruct_city_2fwargame_2fv1_2fwargame_5fservice_2eproto::offsets,
    file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto, file_level_enum_descriptors_city_2fwargame_2fv1_2fwargame_5fservice_2eproto,
    file_level_service_descriptors_city_2fwargame_2fv1_2fwargame_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter() {
  return &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fwargame_2fv1_2fwargame_5fservice_2eproto(&descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto);
namespace city {
namespace wargame {
namespace v1 {

// ===================================================================

class PickPointsRequest::_Internal {
 public:
};

void PickPointsRequest::clear_points() {
  _impl_.points_.Clear();
}
PickPointsRequest::PickPointsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.PickPointsRequest)
}
PickPointsRequest::PickPointsRequest(const PickPointsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PickPointsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , decltype(_impl_.camp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.camp_ = from._impl_.camp_;
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.PickPointsRequest)
}

inline void PickPointsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , decltype(_impl_.camp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PickPointsRequest::~PickPointsRequest() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.PickPointsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PickPointsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
}

void PickPointsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PickPointsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.PickPointsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _impl_.camp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PickPointsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.wargame.v1.Camp camp = 1 [json_name = "camp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_camp(static_cast<::city::wargame::v1::Camp>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .city.wargame.v1.Point points = 2 [json_name = "points"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PickPointsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.PickPointsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.wargame.v1.Camp camp = 1 [json_name = "camp"];
  if (this->_internal_camp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_camp(), target);
  }

  // repeated .city.wargame.v1.Point points = 2 [json_name = "points"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.PickPointsRequest)
  return target;
}

size_t PickPointsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.PickPointsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.wargame.v1.Point points = 2 [json_name = "points"];
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .city.wargame.v1.Camp camp = 1 [json_name = "camp"];
  if (this->_internal_camp() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_camp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PickPointsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PickPointsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PickPointsRequest::GetClassData() const { return &_class_data_; }


void PickPointsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PickPointsRequest*>(&to_msg);
  auto& from = static_cast<const PickPointsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.PickPointsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  if (from._internal_camp() != 0) {
    _this->_internal_set_camp(from._internal_camp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PickPointsRequest::CopyFrom(const PickPointsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.PickPointsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PickPointsRequest::IsInitialized() const {
  return true;
}

void PickPointsRequest::InternalSwap(PickPointsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
  swap(_impl_.camp_, other->_impl_.camp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PickPointsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[0]);
}

// ===================================================================

class PickPointsResponse::_Internal {
 public:
};

PickPointsResponse::PickPointsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.PickPointsResponse)
}
PickPointsResponse::PickPointsResponse(const PickPointsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PickPointsResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.PickPointsResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PickPointsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PickPointsResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PickPointsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[1]);
}

// ===================================================================

class GetPickPointsRequest::_Internal {
 public:
};

GetPickPointsRequest::GetPickPointsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.GetPickPointsRequest)
}
GetPickPointsRequest::GetPickPointsRequest(const GetPickPointsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPickPointsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.camp_ = from._impl_.camp_;
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.GetPickPointsRequest)
}

inline void GetPickPointsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.camp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetPickPointsRequest::~GetPickPointsRequest() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.GetPickPointsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPickPointsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetPickPointsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPickPointsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.GetPickPointsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPickPointsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.wargame.v1.Camp camp = 1 [json_name = "camp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_camp(static_cast<::city::wargame::v1::Camp>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPickPointsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.GetPickPointsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.wargame.v1.Camp camp = 1 [json_name = "camp"];
  if (this->_internal_camp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_camp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.GetPickPointsRequest)
  return target;
}

size_t GetPickPointsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.GetPickPointsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.wargame.v1.Camp camp = 1 [json_name = "camp"];
  if (this->_internal_camp() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_camp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPickPointsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPickPointsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPickPointsRequest::GetClassData() const { return &_class_data_; }


void GetPickPointsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPickPointsRequest*>(&to_msg);
  auto& from = static_cast<const GetPickPointsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.GetPickPointsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_camp() != 0) {
    _this->_internal_set_camp(from._internal_camp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPickPointsRequest::CopyFrom(const GetPickPointsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.GetPickPointsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPickPointsRequest::IsInitialized() const {
  return true;
}

void GetPickPointsRequest::InternalSwap(GetPickPointsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.camp_, other->_impl_.camp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPickPointsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[2]);
}

// ===================================================================

class GetPickPointsResponse::_Internal {
 public:
};

void GetPickPointsResponse::clear_points() {
  _impl_.points_.Clear();
}
GetPickPointsResponse::GetPickPointsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.GetPickPointsResponse)
}
GetPickPointsResponse::GetPickPointsResponse(const GetPickPointsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPickPointsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.GetPickPointsResponse)
}

inline void GetPickPointsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetPickPointsResponse::~GetPickPointsResponse() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.GetPickPointsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPickPointsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
}

void GetPickPointsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPickPointsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.GetPickPointsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPickPointsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .city.wargame.v1.Point points = 1 [json_name = "points"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPickPointsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.GetPickPointsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .city.wargame.v1.Point points = 1 [json_name = "points"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.GetPickPointsResponse)
  return target;
}

size_t GetPickPointsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.GetPickPointsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.wargame.v1.Point points = 1 [json_name = "points"];
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPickPointsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPickPointsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPickPointsResponse::GetClassData() const { return &_class_data_; }


void GetPickPointsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPickPointsResponse*>(&to_msg);
  auto& from = static_cast<const GetPickPointsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.GetPickPointsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPickPointsResponse::CopyFrom(const GetPickPointsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.GetPickPointsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPickPointsResponse::IsInitialized() const {
  return true;
}

void GetPickPointsResponse::InternalSwap(GetPickPointsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPickPointsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[3]);
}

// ===================================================================

class SetScoreWeightRequest::_Internal {
 public:
};

SetScoreWeightRequest::SetScoreWeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.SetScoreWeightRequest)
}
SetScoreWeightRequest::SetScoreWeightRequest(const SetScoreWeightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetScoreWeightRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.money_){}
    , decltype(_impl_.population_loss_){}
    , decltype(_impl_.elec_power_){}
    , decltype(_impl_.elec_distory_1_){}
    , decltype(_impl_.water_distory_1_){}
    , decltype(_impl_.bs_distory_1_){}
    , decltype(_impl_.traffic_distory_1_){}
    , decltype(_impl_.elec_distory_2_){}
    , decltype(_impl_.water_distory_2_){}
    , decltype(_impl_.bs_distory_2_){}
    , decltype(_impl_.traffic_distory_2_){}
    , decltype(_impl_.elec_distory_3_){}
    , decltype(_impl_.water_distory_3_){}
    , decltype(_impl_.bs_distory_3_){}
    , decltype(_impl_.traffic_distory_3_){}
    , decltype(_impl_.defense_success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.money_, &from._impl_.money_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.defense_success_) -
    reinterpret_cast<char*>(&_impl_.money_)) + sizeof(_impl_.defense_success_));
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.SetScoreWeightRequest)
}

inline void SetScoreWeightRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.money_){0}
    , decltype(_impl_.population_loss_){0}
    , decltype(_impl_.elec_power_){0}
    , decltype(_impl_.elec_distory_1_){0}
    , decltype(_impl_.water_distory_1_){0}
    , decltype(_impl_.bs_distory_1_){0}
    , decltype(_impl_.traffic_distory_1_){0}
    , decltype(_impl_.elec_distory_2_){0}
    , decltype(_impl_.water_distory_2_){0}
    , decltype(_impl_.bs_distory_2_){0}
    , decltype(_impl_.traffic_distory_2_){0}
    , decltype(_impl_.elec_distory_3_){0}
    , decltype(_impl_.water_distory_3_){0}
    , decltype(_impl_.bs_distory_3_){0}
    , decltype(_impl_.traffic_distory_3_){0}
    , decltype(_impl_.defense_success_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetScoreWeightRequest::~SetScoreWeightRequest() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.SetScoreWeightRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetScoreWeightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetScoreWeightRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetScoreWeightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.SetScoreWeightRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.defense_success_) -
      reinterpret_cast<char*>(&_impl_.money_)) + sizeof(_impl_.defense_success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetScoreWeightRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double money = 1 [json_name = "money"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.money_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double population_loss = 2 [json_name = "populationLoss"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.population_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double elec_power = 3 [json_name = "elecPower"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.elec_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double elec_distory_1 = 4 [json_name = "elecDistory1"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.elec_distory_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double water_distory_1 = 5 [json_name = "waterDistory1"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.water_distory_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double bs_distory_1 = 6 [json_name = "bsDistory1"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.bs_distory_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double traffic_distory_1 = 7 [json_name = "trafficDistory1"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.traffic_distory_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double elec_distory_2 = 8 [json_name = "elecDistory2"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.elec_distory_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double water_distory_2 = 9 [json_name = "waterDistory2"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.water_distory_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double bs_distory_2 = 10 [json_name = "bsDistory2"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.bs_distory_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double traffic_distory_2 = 11 [json_name = "trafficDistory2"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.traffic_distory_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double elec_distory_3 = 12 [json_name = "elecDistory3"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.elec_distory_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double water_distory_3 = 13 [json_name = "waterDistory3"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.water_distory_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double bs_distory_3 = 14 [json_name = "bsDistory3"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.bs_distory_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double traffic_distory_3 = 15 [json_name = "trafficDistory3"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.traffic_distory_3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double defense_success = 16 [json_name = "defenseSuccess"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.defense_success_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetScoreWeightRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.SetScoreWeightRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double money = 1 [json_name = "money"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_money = this->_internal_money();
  uint64_t raw_money;
  memcpy(&raw_money, &tmp_money, sizeof(tmp_money));
  if (raw_money != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_money(), target);
  }

  // double population_loss = 2 [json_name = "populationLoss"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_population_loss = this->_internal_population_loss();
  uint64_t raw_population_loss;
  memcpy(&raw_population_loss, &tmp_population_loss, sizeof(tmp_population_loss));
  if (raw_population_loss != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_population_loss(), target);
  }

  // double elec_power = 3 [json_name = "elecPower"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elec_power = this->_internal_elec_power();
  uint64_t raw_elec_power;
  memcpy(&raw_elec_power, &tmp_elec_power, sizeof(tmp_elec_power));
  if (raw_elec_power != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_elec_power(), target);
  }

  // double elec_distory_1 = 4 [json_name = "elecDistory1"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elec_distory_1 = this->_internal_elec_distory_1();
  uint64_t raw_elec_distory_1;
  memcpy(&raw_elec_distory_1, &tmp_elec_distory_1, sizeof(tmp_elec_distory_1));
  if (raw_elec_distory_1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_elec_distory_1(), target);
  }

  // double water_distory_1 = 5 [json_name = "waterDistory1"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_water_distory_1 = this->_internal_water_distory_1();
  uint64_t raw_water_distory_1;
  memcpy(&raw_water_distory_1, &tmp_water_distory_1, sizeof(tmp_water_distory_1));
  if (raw_water_distory_1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_water_distory_1(), target);
  }

  // double bs_distory_1 = 6 [json_name = "bsDistory1"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bs_distory_1 = this->_internal_bs_distory_1();
  uint64_t raw_bs_distory_1;
  memcpy(&raw_bs_distory_1, &tmp_bs_distory_1, sizeof(tmp_bs_distory_1));
  if (raw_bs_distory_1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_bs_distory_1(), target);
  }

  // double traffic_distory_1 = 7 [json_name = "trafficDistory1"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traffic_distory_1 = this->_internal_traffic_distory_1();
  uint64_t raw_traffic_distory_1;
  memcpy(&raw_traffic_distory_1, &tmp_traffic_distory_1, sizeof(tmp_traffic_distory_1));
  if (raw_traffic_distory_1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_traffic_distory_1(), target);
  }

  // double elec_distory_2 = 8 [json_name = "elecDistory2"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elec_distory_2 = this->_internal_elec_distory_2();
  uint64_t raw_elec_distory_2;
  memcpy(&raw_elec_distory_2, &tmp_elec_distory_2, sizeof(tmp_elec_distory_2));
  if (raw_elec_distory_2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_elec_distory_2(), target);
  }

  // double water_distory_2 = 9 [json_name = "waterDistory2"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_water_distory_2 = this->_internal_water_distory_2();
  uint64_t raw_water_distory_2;
  memcpy(&raw_water_distory_2, &tmp_water_distory_2, sizeof(tmp_water_distory_2));
  if (raw_water_distory_2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_water_distory_2(), target);
  }

  // double bs_distory_2 = 10 [json_name = "bsDistory2"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bs_distory_2 = this->_internal_bs_distory_2();
  uint64_t raw_bs_distory_2;
  memcpy(&raw_bs_distory_2, &tmp_bs_distory_2, sizeof(tmp_bs_distory_2));
  if (raw_bs_distory_2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_bs_distory_2(), target);
  }

  // double traffic_distory_2 = 11 [json_name = "trafficDistory2"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traffic_distory_2 = this->_internal_traffic_distory_2();
  uint64_t raw_traffic_distory_2;
  memcpy(&raw_traffic_distory_2, &tmp_traffic_distory_2, sizeof(tmp_traffic_distory_2));
  if (raw_traffic_distory_2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_traffic_distory_2(), target);
  }

  // double elec_distory_3 = 12 [json_name = "elecDistory3"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elec_distory_3 = this->_internal_elec_distory_3();
  uint64_t raw_elec_distory_3;
  memcpy(&raw_elec_distory_3, &tmp_elec_distory_3, sizeof(tmp_elec_distory_3));
  if (raw_elec_distory_3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_elec_distory_3(), target);
  }

  // double water_distory_3 = 13 [json_name = "waterDistory3"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_water_distory_3 = this->_internal_water_distory_3();
  uint64_t raw_water_distory_3;
  memcpy(&raw_water_distory_3, &tmp_water_distory_3, sizeof(tmp_water_distory_3));
  if (raw_water_distory_3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_water_distory_3(), target);
  }

  // double bs_distory_3 = 14 [json_name = "bsDistory3"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bs_distory_3 = this->_internal_bs_distory_3();
  uint64_t raw_bs_distory_3;
  memcpy(&raw_bs_distory_3, &tmp_bs_distory_3, sizeof(tmp_bs_distory_3));
  if (raw_bs_distory_3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_bs_distory_3(), target);
  }

  // double traffic_distory_3 = 15 [json_name = "trafficDistory3"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traffic_distory_3 = this->_internal_traffic_distory_3();
  uint64_t raw_traffic_distory_3;
  memcpy(&raw_traffic_distory_3, &tmp_traffic_distory_3, sizeof(tmp_traffic_distory_3));
  if (raw_traffic_distory_3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_traffic_distory_3(), target);
  }

  // double defense_success = 16 [json_name = "defenseSuccess"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_defense_success = this->_internal_defense_success();
  uint64_t raw_defense_success;
  memcpy(&raw_defense_success, &tmp_defense_success, sizeof(tmp_defense_success));
  if (raw_defense_success != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_defense_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.SetScoreWeightRequest)
  return target;
}

size_t SetScoreWeightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.SetScoreWeightRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double money = 1 [json_name = "money"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_money = this->_internal_money();
  uint64_t raw_money;
  memcpy(&raw_money, &tmp_money, sizeof(tmp_money));
  if (raw_money != 0) {
    total_size += 1 + 8;
  }

  // double population_loss = 2 [json_name = "populationLoss"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_population_loss = this->_internal_population_loss();
  uint64_t raw_population_loss;
  memcpy(&raw_population_loss, &tmp_population_loss, sizeof(tmp_population_loss));
  if (raw_population_loss != 0) {
    total_size += 1 + 8;
  }

  // double elec_power = 3 [json_name = "elecPower"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elec_power = this->_internal_elec_power();
  uint64_t raw_elec_power;
  memcpy(&raw_elec_power, &tmp_elec_power, sizeof(tmp_elec_power));
  if (raw_elec_power != 0) {
    total_size += 1 + 8;
  }

  // double elec_distory_1 = 4 [json_name = "elecDistory1"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elec_distory_1 = this->_internal_elec_distory_1();
  uint64_t raw_elec_distory_1;
  memcpy(&raw_elec_distory_1, &tmp_elec_distory_1, sizeof(tmp_elec_distory_1));
  if (raw_elec_distory_1 != 0) {
    total_size += 1 + 8;
  }

  // double water_distory_1 = 5 [json_name = "waterDistory1"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_water_distory_1 = this->_internal_water_distory_1();
  uint64_t raw_water_distory_1;
  memcpy(&raw_water_distory_1, &tmp_water_distory_1, sizeof(tmp_water_distory_1));
  if (raw_water_distory_1 != 0) {
    total_size += 1 + 8;
  }

  // double bs_distory_1 = 6 [json_name = "bsDistory1"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bs_distory_1 = this->_internal_bs_distory_1();
  uint64_t raw_bs_distory_1;
  memcpy(&raw_bs_distory_1, &tmp_bs_distory_1, sizeof(tmp_bs_distory_1));
  if (raw_bs_distory_1 != 0) {
    total_size += 1 + 8;
  }

  // double traffic_distory_1 = 7 [json_name = "trafficDistory1"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traffic_distory_1 = this->_internal_traffic_distory_1();
  uint64_t raw_traffic_distory_1;
  memcpy(&raw_traffic_distory_1, &tmp_traffic_distory_1, sizeof(tmp_traffic_distory_1));
  if (raw_traffic_distory_1 != 0) {
    total_size += 1 + 8;
  }

  // double elec_distory_2 = 8 [json_name = "elecDistory2"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elec_distory_2 = this->_internal_elec_distory_2();
  uint64_t raw_elec_distory_2;
  memcpy(&raw_elec_distory_2, &tmp_elec_distory_2, sizeof(tmp_elec_distory_2));
  if (raw_elec_distory_2 != 0) {
    total_size += 1 + 8;
  }

  // double water_distory_2 = 9 [json_name = "waterDistory2"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_water_distory_2 = this->_internal_water_distory_2();
  uint64_t raw_water_distory_2;
  memcpy(&raw_water_distory_2, &tmp_water_distory_2, sizeof(tmp_water_distory_2));
  if (raw_water_distory_2 != 0) {
    total_size += 1 + 8;
  }

  // double bs_distory_2 = 10 [json_name = "bsDistory2"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bs_distory_2 = this->_internal_bs_distory_2();
  uint64_t raw_bs_distory_2;
  memcpy(&raw_bs_distory_2, &tmp_bs_distory_2, sizeof(tmp_bs_distory_2));
  if (raw_bs_distory_2 != 0) {
    total_size += 1 + 8;
  }

  // double traffic_distory_2 = 11 [json_name = "trafficDistory2"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traffic_distory_2 = this->_internal_traffic_distory_2();
  uint64_t raw_traffic_distory_2;
  memcpy(&raw_traffic_distory_2, &tmp_traffic_distory_2, sizeof(tmp_traffic_distory_2));
  if (raw_traffic_distory_2 != 0) {
    total_size += 1 + 8;
  }

  // double elec_distory_3 = 12 [json_name = "elecDistory3"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elec_distory_3 = this->_internal_elec_distory_3();
  uint64_t raw_elec_distory_3;
  memcpy(&raw_elec_distory_3, &tmp_elec_distory_3, sizeof(tmp_elec_distory_3));
  if (raw_elec_distory_3 != 0) {
    total_size += 1 + 8;
  }

  // double water_distory_3 = 13 [json_name = "waterDistory3"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_water_distory_3 = this->_internal_water_distory_3();
  uint64_t raw_water_distory_3;
  memcpy(&raw_water_distory_3, &tmp_water_distory_3, sizeof(tmp_water_distory_3));
  if (raw_water_distory_3 != 0) {
    total_size += 1 + 8;
  }

  // double bs_distory_3 = 14 [json_name = "bsDistory3"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bs_distory_3 = this->_internal_bs_distory_3();
  uint64_t raw_bs_distory_3;
  memcpy(&raw_bs_distory_3, &tmp_bs_distory_3, sizeof(tmp_bs_distory_3));
  if (raw_bs_distory_3 != 0) {
    total_size += 1 + 8;
  }

  // double traffic_distory_3 = 15 [json_name = "trafficDistory3"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traffic_distory_3 = this->_internal_traffic_distory_3();
  uint64_t raw_traffic_distory_3;
  memcpy(&raw_traffic_distory_3, &tmp_traffic_distory_3, sizeof(tmp_traffic_distory_3));
  if (raw_traffic_distory_3 != 0) {
    total_size += 1 + 8;
  }

  // double defense_success = 16 [json_name = "defenseSuccess"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_defense_success = this->_internal_defense_success();
  uint64_t raw_defense_success;
  memcpy(&raw_defense_success, &tmp_defense_success, sizeof(tmp_defense_success));
  if (raw_defense_success != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetScoreWeightRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetScoreWeightRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetScoreWeightRequest::GetClassData() const { return &_class_data_; }


void SetScoreWeightRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetScoreWeightRequest*>(&to_msg);
  auto& from = static_cast<const SetScoreWeightRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.SetScoreWeightRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_money = from._internal_money();
  uint64_t raw_money;
  memcpy(&raw_money, &tmp_money, sizeof(tmp_money));
  if (raw_money != 0) {
    _this->_internal_set_money(from._internal_money());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_population_loss = from._internal_population_loss();
  uint64_t raw_population_loss;
  memcpy(&raw_population_loss, &tmp_population_loss, sizeof(tmp_population_loss));
  if (raw_population_loss != 0) {
    _this->_internal_set_population_loss(from._internal_population_loss());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elec_power = from._internal_elec_power();
  uint64_t raw_elec_power;
  memcpy(&raw_elec_power, &tmp_elec_power, sizeof(tmp_elec_power));
  if (raw_elec_power != 0) {
    _this->_internal_set_elec_power(from._internal_elec_power());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elec_distory_1 = from._internal_elec_distory_1();
  uint64_t raw_elec_distory_1;
  memcpy(&raw_elec_distory_1, &tmp_elec_distory_1, sizeof(tmp_elec_distory_1));
  if (raw_elec_distory_1 != 0) {
    _this->_internal_set_elec_distory_1(from._internal_elec_distory_1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_water_distory_1 = from._internal_water_distory_1();
  uint64_t raw_water_distory_1;
  memcpy(&raw_water_distory_1, &tmp_water_distory_1, sizeof(tmp_water_distory_1));
  if (raw_water_distory_1 != 0) {
    _this->_internal_set_water_distory_1(from._internal_water_distory_1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bs_distory_1 = from._internal_bs_distory_1();
  uint64_t raw_bs_distory_1;
  memcpy(&raw_bs_distory_1, &tmp_bs_distory_1, sizeof(tmp_bs_distory_1));
  if (raw_bs_distory_1 != 0) {
    _this->_internal_set_bs_distory_1(from._internal_bs_distory_1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traffic_distory_1 = from._internal_traffic_distory_1();
  uint64_t raw_traffic_distory_1;
  memcpy(&raw_traffic_distory_1, &tmp_traffic_distory_1, sizeof(tmp_traffic_distory_1));
  if (raw_traffic_distory_1 != 0) {
    _this->_internal_set_traffic_distory_1(from._internal_traffic_distory_1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elec_distory_2 = from._internal_elec_distory_2();
  uint64_t raw_elec_distory_2;
  memcpy(&raw_elec_distory_2, &tmp_elec_distory_2, sizeof(tmp_elec_distory_2));
  if (raw_elec_distory_2 != 0) {
    _this->_internal_set_elec_distory_2(from._internal_elec_distory_2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_water_distory_2 = from._internal_water_distory_2();
  uint64_t raw_water_distory_2;
  memcpy(&raw_water_distory_2, &tmp_water_distory_2, sizeof(tmp_water_distory_2));
  if (raw_water_distory_2 != 0) {
    _this->_internal_set_water_distory_2(from._internal_water_distory_2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bs_distory_2 = from._internal_bs_distory_2();
  uint64_t raw_bs_distory_2;
  memcpy(&raw_bs_distory_2, &tmp_bs_distory_2, sizeof(tmp_bs_distory_2));
  if (raw_bs_distory_2 != 0) {
    _this->_internal_set_bs_distory_2(from._internal_bs_distory_2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traffic_distory_2 = from._internal_traffic_distory_2();
  uint64_t raw_traffic_distory_2;
  memcpy(&raw_traffic_distory_2, &tmp_traffic_distory_2, sizeof(tmp_traffic_distory_2));
  if (raw_traffic_distory_2 != 0) {
    _this->_internal_set_traffic_distory_2(from._internal_traffic_distory_2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elec_distory_3 = from._internal_elec_distory_3();
  uint64_t raw_elec_distory_3;
  memcpy(&raw_elec_distory_3, &tmp_elec_distory_3, sizeof(tmp_elec_distory_3));
  if (raw_elec_distory_3 != 0) {
    _this->_internal_set_elec_distory_3(from._internal_elec_distory_3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_water_distory_3 = from._internal_water_distory_3();
  uint64_t raw_water_distory_3;
  memcpy(&raw_water_distory_3, &tmp_water_distory_3, sizeof(tmp_water_distory_3));
  if (raw_water_distory_3 != 0) {
    _this->_internal_set_water_distory_3(from._internal_water_distory_3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bs_distory_3 = from._internal_bs_distory_3();
  uint64_t raw_bs_distory_3;
  memcpy(&raw_bs_distory_3, &tmp_bs_distory_3, sizeof(tmp_bs_distory_3));
  if (raw_bs_distory_3 != 0) {
    _this->_internal_set_bs_distory_3(from._internal_bs_distory_3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traffic_distory_3 = from._internal_traffic_distory_3();
  uint64_t raw_traffic_distory_3;
  memcpy(&raw_traffic_distory_3, &tmp_traffic_distory_3, sizeof(tmp_traffic_distory_3));
  if (raw_traffic_distory_3 != 0) {
    _this->_internal_set_traffic_distory_3(from._internal_traffic_distory_3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_defense_success = from._internal_defense_success();
  uint64_t raw_defense_success;
  memcpy(&raw_defense_success, &tmp_defense_success, sizeof(tmp_defense_success));
  if (raw_defense_success != 0) {
    _this->_internal_set_defense_success(from._internal_defense_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetScoreWeightRequest::CopyFrom(const SetScoreWeightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.SetScoreWeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetScoreWeightRequest::IsInitialized() const {
  return true;
}

void SetScoreWeightRequest::InternalSwap(SetScoreWeightRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetScoreWeightRequest, _impl_.defense_success_)
      + sizeof(SetScoreWeightRequest::_impl_.defense_success_)
      - PROTOBUF_FIELD_OFFSET(SetScoreWeightRequest, _impl_.money_)>(
          reinterpret_cast<char*>(&_impl_.money_),
          reinterpret_cast<char*>(&other->_impl_.money_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetScoreWeightRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[4]);
}

// ===================================================================

class SetScoreWeightResponse::_Internal {
 public:
};

SetScoreWeightResponse::SetScoreWeightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.SetScoreWeightResponse)
}
SetScoreWeightResponse::SetScoreWeightResponse(const SetScoreWeightResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetScoreWeightResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.SetScoreWeightResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetScoreWeightResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetScoreWeightResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetScoreWeightResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[5]);
}

// ===================================================================

class GiveDefenseOrderRequest::_Internal {
 public:
};

GiveDefenseOrderRequest::GiveDefenseOrderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.GiveDefenseOrderRequest)
}
GiveDefenseOrderRequest::GiveDefenseOrderRequest(const GiveDefenseOrderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GiveDefenseOrderRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_radius_){}
    , decltype(_impl_.weight_550_){}
    , decltype(_impl_.weight_220_){}
    , decltype(_impl_.weight_110_){}
    , decltype(_impl_.prob_threshold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.weight_radius_, &from._impl_.weight_radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prob_threshold_) -
    reinterpret_cast<char*>(&_impl_.weight_radius_)) + sizeof(_impl_.prob_threshold_));
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.GiveDefenseOrderRequest)
}

inline void GiveDefenseOrderRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_radius_){0}
    , decltype(_impl_.weight_550_){0}
    , decltype(_impl_.weight_220_){0}
    , decltype(_impl_.weight_110_){0}
    , decltype(_impl_.prob_threshold_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GiveDefenseOrderRequest::~GiveDefenseOrderRequest() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.GiveDefenseOrderRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GiveDefenseOrderRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GiveDefenseOrderRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GiveDefenseOrderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.GiveDefenseOrderRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.weight_radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.prob_threshold_) -
      reinterpret_cast<char*>(&_impl_.weight_radius_)) + sizeof(_impl_.prob_threshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GiveDefenseOrderRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double weight_radius = 1 [json_name = "weightRadius"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.weight_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double weight_550 = 2 [json_name = "weight550"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.weight_550_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double weight_220 = 3 [json_name = "weight220"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.weight_220_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double weight_110 = 4 [json_name = "weight110"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.weight_110_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double prob_threshold = 5 [json_name = "probThreshold"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.prob_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GiveDefenseOrderRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.GiveDefenseOrderRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double weight_radius = 1 [json_name = "weightRadius"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_radius = this->_internal_weight_radius();
  uint64_t raw_weight_radius;
  memcpy(&raw_weight_radius, &tmp_weight_radius, sizeof(tmp_weight_radius));
  if (raw_weight_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight_radius(), target);
  }

  // double weight_550 = 2 [json_name = "weight550"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_550 = this->_internal_weight_550();
  uint64_t raw_weight_550;
  memcpy(&raw_weight_550, &tmp_weight_550, sizeof(tmp_weight_550));
  if (raw_weight_550 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight_550(), target);
  }

  // double weight_220 = 3 [json_name = "weight220"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_220 = this->_internal_weight_220();
  uint64_t raw_weight_220;
  memcpy(&raw_weight_220, &tmp_weight_220, sizeof(tmp_weight_220));
  if (raw_weight_220 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight_220(), target);
  }

  // double weight_110 = 4 [json_name = "weight110"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_110 = this->_internal_weight_110();
  uint64_t raw_weight_110;
  memcpy(&raw_weight_110, &tmp_weight_110, sizeof(tmp_weight_110));
  if (raw_weight_110 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_weight_110(), target);
  }

  // double prob_threshold = 5 [json_name = "probThreshold"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_prob_threshold = this->_internal_prob_threshold();
  uint64_t raw_prob_threshold;
  memcpy(&raw_prob_threshold, &tmp_prob_threshold, sizeof(tmp_prob_threshold));
  if (raw_prob_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_prob_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.GiveDefenseOrderRequest)
  return target;
}

size_t GiveDefenseOrderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.GiveDefenseOrderRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double weight_radius = 1 [json_name = "weightRadius"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_radius = this->_internal_weight_radius();
  uint64_t raw_weight_radius;
  memcpy(&raw_weight_radius, &tmp_weight_radius, sizeof(tmp_weight_radius));
  if (raw_weight_radius != 0) {
    total_size += 1 + 8;
  }

  // double weight_550 = 2 [json_name = "weight550"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_550 = this->_internal_weight_550();
  uint64_t raw_weight_550;
  memcpy(&raw_weight_550, &tmp_weight_550, sizeof(tmp_weight_550));
  if (raw_weight_550 != 0) {
    total_size += 1 + 8;
  }

  // double weight_220 = 3 [json_name = "weight220"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_220 = this->_internal_weight_220();
  uint64_t raw_weight_220;
  memcpy(&raw_weight_220, &tmp_weight_220, sizeof(tmp_weight_220));
  if (raw_weight_220 != 0) {
    total_size += 1 + 8;
  }

  // double weight_110 = 4 [json_name = "weight110"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_110 = this->_internal_weight_110();
  uint64_t raw_weight_110;
  memcpy(&raw_weight_110, &tmp_weight_110, sizeof(tmp_weight_110));
  if (raw_weight_110 != 0) {
    total_size += 1 + 8;
  }

  // double prob_threshold = 5 [json_name = "probThreshold"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_prob_threshold = this->_internal_prob_threshold();
  uint64_t raw_prob_threshold;
  memcpy(&raw_prob_threshold, &tmp_prob_threshold, sizeof(tmp_prob_threshold));
  if (raw_prob_threshold != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GiveDefenseOrderRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GiveDefenseOrderRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GiveDefenseOrderRequest::GetClassData() const { return &_class_data_; }


void GiveDefenseOrderRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GiveDefenseOrderRequest*>(&to_msg);
  auto& from = static_cast<const GiveDefenseOrderRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.GiveDefenseOrderRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_radius = from._internal_weight_radius();
  uint64_t raw_weight_radius;
  memcpy(&raw_weight_radius, &tmp_weight_radius, sizeof(tmp_weight_radius));
  if (raw_weight_radius != 0) {
    _this->_internal_set_weight_radius(from._internal_weight_radius());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_550 = from._internal_weight_550();
  uint64_t raw_weight_550;
  memcpy(&raw_weight_550, &tmp_weight_550, sizeof(tmp_weight_550));
  if (raw_weight_550 != 0) {
    _this->_internal_set_weight_550(from._internal_weight_550());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_220 = from._internal_weight_220();
  uint64_t raw_weight_220;
  memcpy(&raw_weight_220, &tmp_weight_220, sizeof(tmp_weight_220));
  if (raw_weight_220 != 0) {
    _this->_internal_set_weight_220(from._internal_weight_220());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_110 = from._internal_weight_110();
  uint64_t raw_weight_110;
  memcpy(&raw_weight_110, &tmp_weight_110, sizeof(tmp_weight_110));
  if (raw_weight_110 != 0) {
    _this->_internal_set_weight_110(from._internal_weight_110());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_prob_threshold = from._internal_prob_threshold();
  uint64_t raw_prob_threshold;
  memcpy(&raw_prob_threshold, &tmp_prob_threshold, sizeof(tmp_prob_threshold));
  if (raw_prob_threshold != 0) {
    _this->_internal_set_prob_threshold(from._internal_prob_threshold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GiveDefenseOrderRequest::CopyFrom(const GiveDefenseOrderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.GiveDefenseOrderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiveDefenseOrderRequest::IsInitialized() const {
  return true;
}

void GiveDefenseOrderRequest::InternalSwap(GiveDefenseOrderRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GiveDefenseOrderRequest, _impl_.prob_threshold_)
      + sizeof(GiveDefenseOrderRequest::_impl_.prob_threshold_)
      - PROTOBUF_FIELD_OFFSET(GiveDefenseOrderRequest, _impl_.weight_radius_)>(
          reinterpret_cast<char*>(&_impl_.weight_radius_),
          reinterpret_cast<char*>(&other->_impl_.weight_radius_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GiveDefenseOrderRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[6]);
}

// ===================================================================

class GiveDefenseOrderResponse::_Internal {
 public:
};

GiveDefenseOrderResponse::GiveDefenseOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.GiveDefenseOrderResponse)
}
GiveDefenseOrderResponse::GiveDefenseOrderResponse(const GiveDefenseOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GiveDefenseOrderResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.GiveDefenseOrderResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GiveDefenseOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GiveDefenseOrderResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GiveDefenseOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[7]);
}

// ===================================================================

class GetHitHistoryRequest::_Internal {
 public:
};

GetHitHistoryRequest::GetHitHistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.GetHitHistoryRequest)
}
GetHitHistoryRequest::GetHitHistoryRequest(const GetHitHistoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetHitHistoryRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.GetHitHistoryRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHitHistoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHitHistoryRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetHitHistoryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[8]);
}

// ===================================================================

class GetHitHistoryResponse::_Internal {
 public:
};

void GetHitHistoryResponse::clear_histories() {
  _impl_.histories_.Clear();
}
GetHitHistoryResponse::GetHitHistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.GetHitHistoryResponse)
}
GetHitHistoryResponse::GetHitHistoryResponse(const GetHitHistoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetHitHistoryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.histories_){from._impl_.histories_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.GetHitHistoryResponse)
}

inline void GetHitHistoryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.histories_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetHitHistoryResponse::~GetHitHistoryResponse() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.GetHitHistoryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetHitHistoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.histories_.~RepeatedPtrField();
}

void GetHitHistoryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetHitHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.GetHitHistoryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.histories_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHitHistoryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .city.wargame.v1.HitHistory histories = 1 [json_name = "histories"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_histories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetHitHistoryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.GetHitHistoryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .city.wargame.v1.HitHistory histories = 1 [json_name = "histories"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_histories_size()); i < n; i++) {
    const auto& repfield = this->_internal_histories(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.GetHitHistoryResponse)
  return target;
}

size_t GetHitHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.GetHitHistoryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.wargame.v1.HitHistory histories = 1 [json_name = "histories"];
  total_size += 1UL * this->_internal_histories_size();
  for (const auto& msg : this->_impl_.histories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetHitHistoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetHitHistoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetHitHistoryResponse::GetClassData() const { return &_class_data_; }


void GetHitHistoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetHitHistoryResponse*>(&to_msg);
  auto& from = static_cast<const GetHitHistoryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.GetHitHistoryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.histories_.MergeFrom(from._impl_.histories_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetHitHistoryResponse::CopyFrom(const GetHitHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.GetHitHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHitHistoryResponse::IsInitialized() const {
  return true;
}

void GetHitHistoryResponse::InternalSwap(GetHitHistoryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.histories_.InternalSwap(&other->_impl_.histories_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHitHistoryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[9]);
}

// ===================================================================

class GetRecoPointsRequest::_Internal {
 public:
};

GetRecoPointsRequest::GetRecoPointsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.GetRecoPointsRequest)
}
GetRecoPointsRequest::GetRecoPointsRequest(const GetRecoPointsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRecoPointsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camp_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.camp_, &from._impl_.camp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.camp_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.GetRecoPointsRequest)
}

inline void GetRecoPointsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.camp_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRecoPointsRequest::~GetRecoPointsRequest() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.GetRecoPointsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRecoPointsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetRecoPointsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRecoPointsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.GetRecoPointsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.camp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.camp_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecoPointsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.wargame.v1.Camp camp = 1 [json_name = "camp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_camp(static_cast<::city::wargame::v1::Camp>(val));
        } else
          goto handle_unusual;
        continue;
      // .city.wargame.v1.RecoAlgoType type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::city::wargame::v1::RecoAlgoType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRecoPointsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.GetRecoPointsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.wargame.v1.Camp camp = 1 [json_name = "camp"];
  if (this->_internal_camp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_camp(), target);
  }

  // .city.wargame.v1.RecoAlgoType type = 2 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.GetRecoPointsRequest)
  return target;
}

size_t GetRecoPointsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.GetRecoPointsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.wargame.v1.Camp camp = 1 [json_name = "camp"];
  if (this->_internal_camp() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_camp());
  }

  // .city.wargame.v1.RecoAlgoType type = 2 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRecoPointsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRecoPointsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRecoPointsRequest::GetClassData() const { return &_class_data_; }


void GetRecoPointsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRecoPointsRequest*>(&to_msg);
  auto& from = static_cast<const GetRecoPointsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.GetRecoPointsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_camp() != 0) {
    _this->_internal_set_camp(from._internal_camp());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRecoPointsRequest::CopyFrom(const GetRecoPointsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.GetRecoPointsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecoPointsRequest::IsInitialized() const {
  return true;
}

void GetRecoPointsRequest::InternalSwap(GetRecoPointsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRecoPointsRequest, _impl_.type_)
      + sizeof(GetRecoPointsRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GetRecoPointsRequest, _impl_.camp_)>(
          reinterpret_cast<char*>(&_impl_.camp_),
          reinterpret_cast<char*>(&other->_impl_.camp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecoPointsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[10]);
}

// ===================================================================

class GetRecoPointsResponse::_Internal {
 public:
};

void GetRecoPointsResponse::clear_points() {
  _impl_.points_.Clear();
}
GetRecoPointsResponse::GetRecoPointsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.GetRecoPointsResponse)
}
GetRecoPointsResponse::GetRecoPointsResponse(const GetRecoPointsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRecoPointsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.GetRecoPointsResponse)
}

inline void GetRecoPointsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRecoPointsResponse::~GetRecoPointsResponse() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.GetRecoPointsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRecoPointsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
}

void GetRecoPointsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRecoPointsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.GetRecoPointsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecoPointsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .city.wargame.v1.RecoPoint points = 1 [json_name = "points"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRecoPointsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.GetRecoPointsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .city.wargame.v1.RecoPoint points = 1 [json_name = "points"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.GetRecoPointsResponse)
  return target;
}

size_t GetRecoPointsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.GetRecoPointsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.wargame.v1.RecoPoint points = 1 [json_name = "points"];
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRecoPointsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRecoPointsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRecoPointsResponse::GetClassData() const { return &_class_data_; }


void GetRecoPointsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRecoPointsResponse*>(&to_msg);
  auto& from = static_cast<const GetRecoPointsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.GetRecoPointsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRecoPointsResponse::CopyFrom(const GetRecoPointsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.GetRecoPointsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecoPointsResponse::IsInitialized() const {
  return true;
}

void GetRecoPointsResponse::InternalSwap(GetRecoPointsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecoPointsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[11]);
}

// ===================================================================

class GetStepRequest::_Internal {
 public:
};

GetStepRequest::GetStepRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.GetStepRequest)
}
GetStepRequest::GetStepRequest(const GetStepRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetStepRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.GetStepRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStepRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStepRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetStepRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[12]);
}

// ===================================================================

class GetStepResponse::_Internal {
 public:
};

GetStepResponse::GetStepResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.GetStepResponse)
}
GetStepResponse::GetStepResponse(const GetStepResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetStepResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.step_){}
    , decltype(_impl_.red_pick_ready_){}
    , decltype(_impl_.blue_pick_ready_){}
    , decltype(_impl_.is_game_started_){}
    , decltype(_impl_.round_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.step_, &from._impl_.step_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.round_) -
    reinterpret_cast<char*>(&_impl_.step_)) + sizeof(_impl_.round_));
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.GetStepResponse)
}

inline void GetStepResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.step_){0}
    , decltype(_impl_.red_pick_ready_){false}
    , decltype(_impl_.blue_pick_ready_){false}
    , decltype(_impl_.is_game_started_){false}
    , decltype(_impl_.round_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetStepResponse::~GetStepResponse() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.GetStepResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetStepResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetStepResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetStepResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.GetStepResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.round_) -
      reinterpret_cast<char*>(&_impl_.step_)) + sizeof(_impl_.round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStepResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 step = 1 [json_name = "step"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool red_pick_ready = 2 [json_name = "redPickReady"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.red_pick_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blue_pick_ready = 3 [json_name = "bluePickReady"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.blue_pick_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 round = 4 [json_name = "round"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_game_started = 5 [json_name = "isGameStarted"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_game_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetStepResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.GetStepResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 step = 1 [json_name = "step"];
  if (this->_internal_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_step(), target);
  }

  // bool red_pick_ready = 2 [json_name = "redPickReady"];
  if (this->_internal_red_pick_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_red_pick_ready(), target);
  }

  // bool blue_pick_ready = 3 [json_name = "bluePickReady"];
  if (this->_internal_blue_pick_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_blue_pick_ready(), target);
  }

  // int32 round = 4 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_round(), target);
  }

  // bool is_game_started = 5 [json_name = "isGameStarted"];
  if (this->_internal_is_game_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_game_started(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.GetStepResponse)
  return target;
}

size_t GetStepResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.GetStepResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 step = 1 [json_name = "step"];
  if (this->_internal_step() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_step());
  }

  // bool red_pick_ready = 2 [json_name = "redPickReady"];
  if (this->_internal_red_pick_ready() != 0) {
    total_size += 1 + 1;
  }

  // bool blue_pick_ready = 3 [json_name = "bluePickReady"];
  if (this->_internal_blue_pick_ready() != 0) {
    total_size += 1 + 1;
  }

  // bool is_game_started = 5 [json_name = "isGameStarted"];
  if (this->_internal_is_game_started() != 0) {
    total_size += 1 + 1;
  }

  // int32 round = 4 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStepResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetStepResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStepResponse::GetClassData() const { return &_class_data_; }


void GetStepResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetStepResponse*>(&to_msg);
  auto& from = static_cast<const GetStepResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.GetStepResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_step() != 0) {
    _this->_internal_set_step(from._internal_step());
  }
  if (from._internal_red_pick_ready() != 0) {
    _this->_internal_set_red_pick_ready(from._internal_red_pick_ready());
  }
  if (from._internal_blue_pick_ready() != 0) {
    _this->_internal_set_blue_pick_ready(from._internal_blue_pick_ready());
  }
  if (from._internal_is_game_started() != 0) {
    _this->_internal_set_is_game_started(from._internal_is_game_started());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStepResponse::CopyFrom(const GetStepResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.GetStepResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStepResponse::IsInitialized() const {
  return true;
}

void GetStepResponse::InternalSwap(GetStepResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStepResponse, _impl_.round_)
      + sizeof(GetStepResponse::_impl_.round_)
      - PROTOBUF_FIELD_OFFSET(GetStepResponse, _impl_.step_)>(
          reinterpret_cast<char*>(&_impl_.step_),
          reinterpret_cast<char*>(&other->_impl_.step_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStepResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[13]);
}

// ===================================================================

class GetCasualtiesRequest::_Internal {
 public:
};

GetCasualtiesRequest::GetCasualtiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.GetCasualtiesRequest)
}
GetCasualtiesRequest::GetCasualtiesRequest(const GetCasualtiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetCasualtiesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.GetCasualtiesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCasualtiesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCasualtiesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetCasualtiesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[14]);
}

// ===================================================================

class GetCasualtiesResponse::_Internal {
 public:
};

void GetCasualtiesResponse::clear_casualties() {
  _impl_.casualties_.Clear();
}
GetCasualtiesResponse::GetCasualtiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.GetCasualtiesResponse)
}
GetCasualtiesResponse::GetCasualtiesResponse(const GetCasualtiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCasualtiesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.casualties_){from._impl_.casualties_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.GetCasualtiesResponse)
}

inline void GetCasualtiesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.casualties_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetCasualtiesResponse::~GetCasualtiesResponse() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.GetCasualtiesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCasualtiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.casualties_.~RepeatedPtrField();
}

void GetCasualtiesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCasualtiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.GetCasualtiesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.casualties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCasualtiesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .city.wargame.v1.Casualty casualties = 1 [json_name = "casualties"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_casualties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCasualtiesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.GetCasualtiesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .city.wargame.v1.Casualty casualties = 1 [json_name = "casualties"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_casualties_size()); i < n; i++) {
    const auto& repfield = this->_internal_casualties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.GetCasualtiesResponse)
  return target;
}

size_t GetCasualtiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.GetCasualtiesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.wargame.v1.Casualty casualties = 1 [json_name = "casualties"];
  total_size += 1UL * this->_internal_casualties_size();
  for (const auto& msg : this->_impl_.casualties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCasualtiesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCasualtiesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCasualtiesResponse::GetClassData() const { return &_class_data_; }


void GetCasualtiesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCasualtiesResponse*>(&to_msg);
  auto& from = static_cast<const GetCasualtiesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.GetCasualtiesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.casualties_.MergeFrom(from._impl_.casualties_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCasualtiesResponse::CopyFrom(const GetCasualtiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.GetCasualtiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCasualtiesResponse::IsInitialized() const {
  return true;
}

void GetCasualtiesResponse::InternalSwap(GetCasualtiesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.casualties_.InternalSwap(&other->_impl_.casualties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCasualtiesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_5fservice_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_5fservice_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wargame
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::wargame::v1::PickPointsRequest*
Arena::CreateMaybeMessage< ::city::wargame::v1::PickPointsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::PickPointsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::PickPointsResponse*
Arena::CreateMaybeMessage< ::city::wargame::v1::PickPointsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::PickPointsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::GetPickPointsRequest*
Arena::CreateMaybeMessage< ::city::wargame::v1::GetPickPointsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::GetPickPointsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::GetPickPointsResponse*
Arena::CreateMaybeMessage< ::city::wargame::v1::GetPickPointsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::GetPickPointsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::SetScoreWeightRequest*
Arena::CreateMaybeMessage< ::city::wargame::v1::SetScoreWeightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::SetScoreWeightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::SetScoreWeightResponse*
Arena::CreateMaybeMessage< ::city::wargame::v1::SetScoreWeightResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::SetScoreWeightResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::GiveDefenseOrderRequest*
Arena::CreateMaybeMessage< ::city::wargame::v1::GiveDefenseOrderRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::GiveDefenseOrderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::GiveDefenseOrderResponse*
Arena::CreateMaybeMessage< ::city::wargame::v1::GiveDefenseOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::GiveDefenseOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::GetHitHistoryRequest*
Arena::CreateMaybeMessage< ::city::wargame::v1::GetHitHistoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::GetHitHistoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::GetHitHistoryResponse*
Arena::CreateMaybeMessage< ::city::wargame::v1::GetHitHistoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::GetHitHistoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::GetRecoPointsRequest*
Arena::CreateMaybeMessage< ::city::wargame::v1::GetRecoPointsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::GetRecoPointsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::GetRecoPointsResponse*
Arena::CreateMaybeMessage< ::city::wargame::v1::GetRecoPointsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::GetRecoPointsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::GetStepRequest*
Arena::CreateMaybeMessage< ::city::wargame::v1::GetStepRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::GetStepRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::GetStepResponse*
Arena::CreateMaybeMessage< ::city::wargame::v1::GetStepResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::GetStepResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::GetCasualtiesRequest*
Arena::CreateMaybeMessage< ::city::wargame::v1::GetCasualtiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::GetCasualtiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::GetCasualtiesResponse*
Arena::CreateMaybeMessage< ::city::wargame::v1::GetCasualtiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::GetCasualtiesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
