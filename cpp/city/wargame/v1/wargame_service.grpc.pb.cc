// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/wargame/v1/wargame_service.proto

#include "city/wargame/v1/wargame_service.pb.h"
#include "city/wargame/v1/wargame_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace city {
namespace wargame {
namespace v1 {

static const char* WarGameService_method_names[] = {
  "/city.wargame.v1.WarGameService/PickPoints",
  "/city.wargame.v1.WarGameService/GetPickPoints",
  "/city.wargame.v1.WarGameService/GiveDefenseOrder",
  "/city.wargame.v1.WarGameService/SetScoreWeight",
  "/city.wargame.v1.WarGameService/GetHitHistory",
  "/city.wargame.v1.WarGameService/GetRecoPoints",
  "/city.wargame.v1.WarGameService/GetStep",
  "/city.wargame.v1.WarGameService/GetCasualties",
};

std::unique_ptr< WarGameService::Stub> WarGameService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WarGameService::Stub> stub(new WarGameService::Stub(channel, options));
  return stub;
}

WarGameService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PickPoints_(WarGameService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPickPoints_(WarGameService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GiveDefenseOrder_(WarGameService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetScoreWeight_(WarGameService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHitHistory_(WarGameService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRecoPoints_(WarGameService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStep_(WarGameService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCasualties_(WarGameService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WarGameService::Stub::PickPoints(::grpc::ClientContext* context, const ::city::wargame::v1::PickPointsRequest& request, ::city::wargame::v1::PickPointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::wargame::v1::PickPointsRequest, ::city::wargame::v1::PickPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PickPoints_, context, request, response);
}

void WarGameService::Stub::async::PickPoints(::grpc::ClientContext* context, const ::city::wargame::v1::PickPointsRequest* request, ::city::wargame::v1::PickPointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::wargame::v1::PickPointsRequest, ::city::wargame::v1::PickPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PickPoints_, context, request, response, std::move(f));
}

void WarGameService::Stub::async::PickPoints(::grpc::ClientContext* context, const ::city::wargame::v1::PickPointsRequest* request, ::city::wargame::v1::PickPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PickPoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::PickPointsResponse>* WarGameService::Stub::PrepareAsyncPickPointsRaw(::grpc::ClientContext* context, const ::city::wargame::v1::PickPointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::wargame::v1::PickPointsResponse, ::city::wargame::v1::PickPointsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PickPoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::PickPointsResponse>* WarGameService::Stub::AsyncPickPointsRaw(::grpc::ClientContext* context, const ::city::wargame::v1::PickPointsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPickPointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarGameService::Stub::GetPickPoints(::grpc::ClientContext* context, const ::city::wargame::v1::GetPickPointsRequest& request, ::city::wargame::v1::GetPickPointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::wargame::v1::GetPickPointsRequest, ::city::wargame::v1::GetPickPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPickPoints_, context, request, response);
}

void WarGameService::Stub::async::GetPickPoints(::grpc::ClientContext* context, const ::city::wargame::v1::GetPickPointsRequest* request, ::city::wargame::v1::GetPickPointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::wargame::v1::GetPickPointsRequest, ::city::wargame::v1::GetPickPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPickPoints_, context, request, response, std::move(f));
}

void WarGameService::Stub::async::GetPickPoints(::grpc::ClientContext* context, const ::city::wargame::v1::GetPickPointsRequest* request, ::city::wargame::v1::GetPickPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPickPoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::GetPickPointsResponse>* WarGameService::Stub::PrepareAsyncGetPickPointsRaw(::grpc::ClientContext* context, const ::city::wargame::v1::GetPickPointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::wargame::v1::GetPickPointsResponse, ::city::wargame::v1::GetPickPointsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPickPoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::GetPickPointsResponse>* WarGameService::Stub::AsyncGetPickPointsRaw(::grpc::ClientContext* context, const ::city::wargame::v1::GetPickPointsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPickPointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarGameService::Stub::GiveDefenseOrder(::grpc::ClientContext* context, const ::city::wargame::v1::GiveDefenseOrderRequest& request, ::city::wargame::v1::GiveDefenseOrderResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::wargame::v1::GiveDefenseOrderRequest, ::city::wargame::v1::GiveDefenseOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GiveDefenseOrder_, context, request, response);
}

void WarGameService::Stub::async::GiveDefenseOrder(::grpc::ClientContext* context, const ::city::wargame::v1::GiveDefenseOrderRequest* request, ::city::wargame::v1::GiveDefenseOrderResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::wargame::v1::GiveDefenseOrderRequest, ::city::wargame::v1::GiveDefenseOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GiveDefenseOrder_, context, request, response, std::move(f));
}

void WarGameService::Stub::async::GiveDefenseOrder(::grpc::ClientContext* context, const ::city::wargame::v1::GiveDefenseOrderRequest* request, ::city::wargame::v1::GiveDefenseOrderResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GiveDefenseOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::GiveDefenseOrderResponse>* WarGameService::Stub::PrepareAsyncGiveDefenseOrderRaw(::grpc::ClientContext* context, const ::city::wargame::v1::GiveDefenseOrderRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::wargame::v1::GiveDefenseOrderResponse, ::city::wargame::v1::GiveDefenseOrderRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GiveDefenseOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::GiveDefenseOrderResponse>* WarGameService::Stub::AsyncGiveDefenseOrderRaw(::grpc::ClientContext* context, const ::city::wargame::v1::GiveDefenseOrderRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGiveDefenseOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarGameService::Stub::SetScoreWeight(::grpc::ClientContext* context, const ::city::wargame::v1::SetScoreWeightRequest& request, ::city::wargame::v1::SetScoreWeightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::wargame::v1::SetScoreWeightRequest, ::city::wargame::v1::SetScoreWeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetScoreWeight_, context, request, response);
}

void WarGameService::Stub::async::SetScoreWeight(::grpc::ClientContext* context, const ::city::wargame::v1::SetScoreWeightRequest* request, ::city::wargame::v1::SetScoreWeightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::wargame::v1::SetScoreWeightRequest, ::city::wargame::v1::SetScoreWeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetScoreWeight_, context, request, response, std::move(f));
}

void WarGameService::Stub::async::SetScoreWeight(::grpc::ClientContext* context, const ::city::wargame::v1::SetScoreWeightRequest* request, ::city::wargame::v1::SetScoreWeightResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetScoreWeight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::SetScoreWeightResponse>* WarGameService::Stub::PrepareAsyncSetScoreWeightRaw(::grpc::ClientContext* context, const ::city::wargame::v1::SetScoreWeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::wargame::v1::SetScoreWeightResponse, ::city::wargame::v1::SetScoreWeightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetScoreWeight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::SetScoreWeightResponse>* WarGameService::Stub::AsyncSetScoreWeightRaw(::grpc::ClientContext* context, const ::city::wargame::v1::SetScoreWeightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetScoreWeightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarGameService::Stub::GetHitHistory(::grpc::ClientContext* context, const ::city::wargame::v1::GetHitHistoryRequest& request, ::city::wargame::v1::GetHitHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::wargame::v1::GetHitHistoryRequest, ::city::wargame::v1::GetHitHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetHitHistory_, context, request, response);
}

void WarGameService::Stub::async::GetHitHistory(::grpc::ClientContext* context, const ::city::wargame::v1::GetHitHistoryRequest* request, ::city::wargame::v1::GetHitHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::wargame::v1::GetHitHistoryRequest, ::city::wargame::v1::GetHitHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHitHistory_, context, request, response, std::move(f));
}

void WarGameService::Stub::async::GetHitHistory(::grpc::ClientContext* context, const ::city::wargame::v1::GetHitHistoryRequest* request, ::city::wargame::v1::GetHitHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetHitHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::GetHitHistoryResponse>* WarGameService::Stub::PrepareAsyncGetHitHistoryRaw(::grpc::ClientContext* context, const ::city::wargame::v1::GetHitHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::wargame::v1::GetHitHistoryResponse, ::city::wargame::v1::GetHitHistoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetHitHistory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::GetHitHistoryResponse>* WarGameService::Stub::AsyncGetHitHistoryRaw(::grpc::ClientContext* context, const ::city::wargame::v1::GetHitHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetHitHistoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarGameService::Stub::GetRecoPoints(::grpc::ClientContext* context, const ::city::wargame::v1::GetRecoPointsRequest& request, ::city::wargame::v1::GetRecoPointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::wargame::v1::GetRecoPointsRequest, ::city::wargame::v1::GetRecoPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRecoPoints_, context, request, response);
}

void WarGameService::Stub::async::GetRecoPoints(::grpc::ClientContext* context, const ::city::wargame::v1::GetRecoPointsRequest* request, ::city::wargame::v1::GetRecoPointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::wargame::v1::GetRecoPointsRequest, ::city::wargame::v1::GetRecoPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRecoPoints_, context, request, response, std::move(f));
}

void WarGameService::Stub::async::GetRecoPoints(::grpc::ClientContext* context, const ::city::wargame::v1::GetRecoPointsRequest* request, ::city::wargame::v1::GetRecoPointsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRecoPoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::GetRecoPointsResponse>* WarGameService::Stub::PrepareAsyncGetRecoPointsRaw(::grpc::ClientContext* context, const ::city::wargame::v1::GetRecoPointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::wargame::v1::GetRecoPointsResponse, ::city::wargame::v1::GetRecoPointsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRecoPoints_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::GetRecoPointsResponse>* WarGameService::Stub::AsyncGetRecoPointsRaw(::grpc::ClientContext* context, const ::city::wargame::v1::GetRecoPointsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRecoPointsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarGameService::Stub::GetStep(::grpc::ClientContext* context, const ::city::wargame::v1::GetStepRequest& request, ::city::wargame::v1::GetStepResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::wargame::v1::GetStepRequest, ::city::wargame::v1::GetStepResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStep_, context, request, response);
}

void WarGameService::Stub::async::GetStep(::grpc::ClientContext* context, const ::city::wargame::v1::GetStepRequest* request, ::city::wargame::v1::GetStepResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::wargame::v1::GetStepRequest, ::city::wargame::v1::GetStepResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStep_, context, request, response, std::move(f));
}

void WarGameService::Stub::async::GetStep(::grpc::ClientContext* context, const ::city::wargame::v1::GetStepRequest* request, ::city::wargame::v1::GetStepResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStep_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::GetStepResponse>* WarGameService::Stub::PrepareAsyncGetStepRaw(::grpc::ClientContext* context, const ::city::wargame::v1::GetStepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::wargame::v1::GetStepResponse, ::city::wargame::v1::GetStepRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStep_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::GetStepResponse>* WarGameService::Stub::AsyncGetStepRaw(::grpc::ClientContext* context, const ::city::wargame::v1::GetStepRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStepRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WarGameService::Stub::GetCasualties(::grpc::ClientContext* context, const ::city::wargame::v1::GetCasualtiesRequest& request, ::city::wargame::v1::GetCasualtiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::wargame::v1::GetCasualtiesRequest, ::city::wargame::v1::GetCasualtiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCasualties_, context, request, response);
}

void WarGameService::Stub::async::GetCasualties(::grpc::ClientContext* context, const ::city::wargame::v1::GetCasualtiesRequest* request, ::city::wargame::v1::GetCasualtiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::wargame::v1::GetCasualtiesRequest, ::city::wargame::v1::GetCasualtiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCasualties_, context, request, response, std::move(f));
}

void WarGameService::Stub::async::GetCasualties(::grpc::ClientContext* context, const ::city::wargame::v1::GetCasualtiesRequest* request, ::city::wargame::v1::GetCasualtiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCasualties_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::GetCasualtiesResponse>* WarGameService::Stub::PrepareAsyncGetCasualtiesRaw(::grpc::ClientContext* context, const ::city::wargame::v1::GetCasualtiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::wargame::v1::GetCasualtiesResponse, ::city::wargame::v1::GetCasualtiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCasualties_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::wargame::v1::GetCasualtiesResponse>* WarGameService::Stub::AsyncGetCasualtiesRaw(::grpc::ClientContext* context, const ::city::wargame::v1::GetCasualtiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCasualtiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

WarGameService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarGameService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarGameService::Service, ::city::wargame::v1::PickPointsRequest, ::city::wargame::v1::PickPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarGameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::wargame::v1::PickPointsRequest* req,
             ::city::wargame::v1::PickPointsResponse* resp) {
               return service->PickPoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarGameService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarGameService::Service, ::city::wargame::v1::GetPickPointsRequest, ::city::wargame::v1::GetPickPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarGameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::wargame::v1::GetPickPointsRequest* req,
             ::city::wargame::v1::GetPickPointsResponse* resp) {
               return service->GetPickPoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarGameService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarGameService::Service, ::city::wargame::v1::GiveDefenseOrderRequest, ::city::wargame::v1::GiveDefenseOrderResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarGameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::wargame::v1::GiveDefenseOrderRequest* req,
             ::city::wargame::v1::GiveDefenseOrderResponse* resp) {
               return service->GiveDefenseOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarGameService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarGameService::Service, ::city::wargame::v1::SetScoreWeightRequest, ::city::wargame::v1::SetScoreWeightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarGameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::wargame::v1::SetScoreWeightRequest* req,
             ::city::wargame::v1::SetScoreWeightResponse* resp) {
               return service->SetScoreWeight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarGameService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarGameService::Service, ::city::wargame::v1::GetHitHistoryRequest, ::city::wargame::v1::GetHitHistoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarGameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::wargame::v1::GetHitHistoryRequest* req,
             ::city::wargame::v1::GetHitHistoryResponse* resp) {
               return service->GetHitHistory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarGameService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarGameService::Service, ::city::wargame::v1::GetRecoPointsRequest, ::city::wargame::v1::GetRecoPointsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarGameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::wargame::v1::GetRecoPointsRequest* req,
             ::city::wargame::v1::GetRecoPointsResponse* resp) {
               return service->GetRecoPoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarGameService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarGameService::Service, ::city::wargame::v1::GetStepRequest, ::city::wargame::v1::GetStepResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarGameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::wargame::v1::GetStepRequest* req,
             ::city::wargame::v1::GetStepResponse* resp) {
               return service->GetStep(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WarGameService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WarGameService::Service, ::city::wargame::v1::GetCasualtiesRequest, ::city::wargame::v1::GetCasualtiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WarGameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::wargame::v1::GetCasualtiesRequest* req,
             ::city::wargame::v1::GetCasualtiesResponse* resp) {
               return service->GetCasualties(ctx, req, resp);
             }, this)));
}

WarGameService::Service::~Service() {
}

::grpc::Status WarGameService::Service::PickPoints(::grpc::ServerContext* context, const ::city::wargame::v1::PickPointsRequest* request, ::city::wargame::v1::PickPointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarGameService::Service::GetPickPoints(::grpc::ServerContext* context, const ::city::wargame::v1::GetPickPointsRequest* request, ::city::wargame::v1::GetPickPointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarGameService::Service::GiveDefenseOrder(::grpc::ServerContext* context, const ::city::wargame::v1::GiveDefenseOrderRequest* request, ::city::wargame::v1::GiveDefenseOrderResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarGameService::Service::SetScoreWeight(::grpc::ServerContext* context, const ::city::wargame::v1::SetScoreWeightRequest* request, ::city::wargame::v1::SetScoreWeightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarGameService::Service::GetHitHistory(::grpc::ServerContext* context, const ::city::wargame::v1::GetHitHistoryRequest* request, ::city::wargame::v1::GetHitHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarGameService::Service::GetRecoPoints(::grpc::ServerContext* context, const ::city::wargame::v1::GetRecoPointsRequest* request, ::city::wargame::v1::GetRecoPointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarGameService::Service::GetStep(::grpc::ServerContext* context, const ::city::wargame::v1::GetStepRequest* request, ::city::wargame::v1::GetStepResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WarGameService::Service::GetCasualties(::grpc::ServerContext* context, const ::city::wargame::v1::GetCasualtiesRequest* request, ::city::wargame::v1::GetCasualtiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace city
}  // namespace wargame
}  // namespace v1

