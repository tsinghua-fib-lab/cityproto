// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/wargame/v1/wargame.proto

#include "city/wargame/v1/wargame.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace wargame {
namespace v1 {
PROTOBUF_CONSTEXPR RecoPoint::RecoPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecoPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecoPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecoPointDefaultTypeInternal() {}
  union {
    RecoPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecoPointDefaultTypeInternal _RecoPoint_default_instance_;
PROTOBUF_CONSTEXPR Weapon::Weapon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.red_type_)*/0
  , /*decltype(_impl_.blue_type_)*/0
  , /*decltype(_impl_.num_)*/0} {}
struct WeaponDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WeaponDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WeaponDefaultTypeInternal() {}
  union {
    Weapon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WeaponDefaultTypeInternal _Weapon_default_instance_;
PROTOBUF_CONSTEXPR Point::Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weapon_)*/nullptr
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;
PROTOBUF_CONSTEXPR Hit::Hit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.defenses_)*/{}
  , /*decltype(_impl_.attack_)*/nullptr
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_.arrive_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HitDefaultTypeInternal() {}
  union {
    Hit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HitDefaultTypeInternal _Hit_default_instance_;
PROTOBUF_CONSTEXPR HitHistory::HitHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HitHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HitHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HitHistoryDefaultTypeInternal() {}
  union {
    HitHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HitHistoryDefaultTypeInternal _HitHistory_default_instance_;
PROTOBUF_CONSTEXPR Casualty::Casualty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aoi_id_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CasualtyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CasualtyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CasualtyDefaultTypeInternal() {}
  union {
    Casualty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CasualtyDefaultTypeInternal _Casualty_default_instance_;
}  // namespace v1
}  // namespace wargame
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fwargame_2fv1_2fwargame_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_city_2fwargame_2fv1_2fwargame_2eproto[5];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fwargame_2fv1_2fwargame_2eproto = nullptr;

const uint32_t TableStruct_city_2fwargame_2fv1_2fwargame_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::RecoPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::RecoPoint, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::RecoPoint, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Weapon, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Weapon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Weapon, _impl_.red_type_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Weapon, _impl_.blue_type_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Weapon, _impl_.num_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Point, _impl_.weapon_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Point, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Point, _impl_.radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Hit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Hit, _impl_.attack_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Hit, _impl_.defenses_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Hit, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Hit, _impl_.arrive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::HitHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::HitHistory, _impl_.hits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Casualty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Casualty, _impl_.aoi_id_),
  PROTOBUF_FIELD_OFFSET(::city::wargame::v1::Casualty, _impl_.num_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::wargame::v1::RecoPoint)},
  { 8, 17, -1, sizeof(::city::wargame::v1::Weapon)},
  { 20, -1, -1, sizeof(::city::wargame::v1::Point)},
  { 29, -1, -1, sizeof(::city::wargame::v1::Hit)},
  { 39, -1, -1, sizeof(::city::wargame::v1::HitHistory)},
  { 46, -1, -1, sizeof(::city::wargame::v1::Casualty)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::wargame::v1::_RecoPoint_default_instance_._instance,
  &::city::wargame::v1::_Weapon_default_instance_._instance,
  &::city::wargame::v1::_Point_default_instance_._instance,
  &::city::wargame::v1::_Hit_default_instance_._instance,
  &::city::wargame::v1::_HitHistory_default_instance_._instance,
  &::city::wargame::v1::_Casualty_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fwargame_2fv1_2fwargame_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035city/wargame/v1/wargame.proto\022\017city.wa"
  "rgame.v1\032\025city/geo/v2/geo.proto\"j\n\tRecoP"
  "oint\022.\n\003pos\030\001 \001(\0132\034.city.geo.v2.LongLatP"
  "ositionR\003pos\022-\n\004type\030\002 \001(\0162\031.city.wargam"
  "e.v1.RecoTypeR\004type\"\270\001\n\006Weapon\022>\n\010red_ty"
  "pe\030\002 \001(\0162\036.city.wargame.v1.RedWeaponType"
  "H\000R\007redType\210\001\001\022A\n\tblue_type\030\003 \001(\0162\037.city"
  ".wargame.v1.BlueWeaponTypeH\001R\010blueType\210\001"
  "\001\022\020\n\003num\030\004 \001(\005R\003numB\013\n\t_red_typeB\014\n\n_blu"
  "e_type\"\200\001\n\005Point\022/\n\006weapon\030\001 \001(\0132\027.city."
  "wargame.v1.WeaponR\006weapon\022.\n\003pos\030\002 \001(\0132\034"
  ".city.geo.v2.LongLatPositionR\003pos\022\026\n\006rad"
  "ius\030\003 \001(\001R\006radius\"\231\001\n\003Hit\022.\n\006attack\030\001 \001("
  "\0132\026.city.wargame.v1.PointR\006attack\0222\n\010def"
  "enses\030\002 \003(\0132\026.city.wargame.v1.PointR\010def"
  "enses\022\026\n\006result\030\003 \001(\010R\006result\022\026\n\006arrive\030"
  "\004 \001(\005R\006arrive\"6\n\nHitHistory\022(\n\004hits\030\001 \003("
  "\0132\024.city.wargame.v1.HitR\004hits\"3\n\010Casualt"
  "y\022\025\n\006aoi_id\030\001 \001(\005R\005aoiId\022\020\n\003num\030\002 \001(\005R\003n"
  "um*\300\001\n\rRedWeaponType\022\037\n\033RED_WEAPON_TYPE_"
  "UNSPECIFIED\020\000\022\033\n\027RED_WEAPON_TYPE_AGM_158"
  "\020\001\022\033\n\027RED_WEAPON_TYPE_AGM_183\020\002\022\032\n\026RED_W"
  "EAPON_TYPE_AGM_88\020\003\022\033\n\027RED_WEAPON_TYPE_U"
  "GM_109\020\004\022\033\n\027RED_WEAPON_TYPE_AGM_142\020\005*\241\001"
  "\n\016BlueWeaponType\022 \n\034BLUE_WEAPON_TYPE_UNS"
  "PECIFIED\020\000\022\031\n\025BLUE_WEAPON_TYPE_HQ_9\020\001\022\032\n"
  "\026BLUE_WEAPON_TYPE_HQ_12\020\002\022\032\n\026BLUE_WEAPON"
  "_TYPE_HQ_16\020\003\022\032\n\026BLUE_WEAPON_TYPE_HQ_22\020"
  "\004*9\n\004Camp\022\024\n\020CAMP_UNSPECIFIED\020\000\022\014\n\010CAMP_"
  "RED\020\001\022\r\n\tCAMP_BLUE\020\002*P\n\010RecoType\022\031\n\025RECO"
  "_TYPE_UNSPECIFIED\020\000\022\025\n\021RECO_TYPE_MISSILE"
  "\020\001\022\022\n\016RECO_TYPE_ELEC\020\002*\211\001\n\014RecoAlgoType\022"
  "\036\n\032RECO_ALGO_TYPE_UNSPECIFIED\020\000\022\036\n\032RECO_"
  "ALGO_TYPE_MAX_DESTORY\020\001\022\031\n\025RECO_ALGO_TYP"
  "E_RANDOM\020\002\022\036\n\032RECO_ALGO_TYPE_MIN_DESTORY"
  "\020\003B\271\001\n\023com.city.wargame.v1B\014WargameProto"
  "P\001Z6git.fiblab.net/sim/protos/go/city/wa"
  "rgame/v1;wargamev1\242\002\003CWX\252\002\017City.Wargame."
  "V1\312\002\017City\\Wargame\\V1\342\002\033City\\Wargame\\V1\\G"
  "PBMetadata\352\002\021City::Wargame::V1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_deps[1] = {
  &::descriptor_table_city_2fgeo_2fv2_2fgeo_2eproto,
};
static ::_pbi::once_flag descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto = {
    false, false, 1598, descriptor_table_protodef_city_2fwargame_2fv1_2fwargame_2eproto,
    "city/wargame/v1/wargame.proto",
    &descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_once, descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_city_2fwargame_2fv1_2fwargame_2eproto::offsets,
    file_level_metadata_city_2fwargame_2fv1_2fwargame_2eproto, file_level_enum_descriptors_city_2fwargame_2fv1_2fwargame_2eproto,
    file_level_service_descriptors_city_2fwargame_2fv1_2fwargame_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_getter() {
  return &descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fwargame_2fv1_2fwargame_2eproto(&descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto);
namespace city {
namespace wargame {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RedWeaponType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto);
  return file_level_enum_descriptors_city_2fwargame_2fv1_2fwargame_2eproto[0];
}
bool RedWeaponType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlueWeaponType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto);
  return file_level_enum_descriptors_city_2fwargame_2fv1_2fwargame_2eproto[1];
}
bool BlueWeaponType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Camp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto);
  return file_level_enum_descriptors_city_2fwargame_2fv1_2fwargame_2eproto[2];
}
bool Camp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto);
  return file_level_enum_descriptors_city_2fwargame_2fv1_2fwargame_2eproto[3];
}
bool RecoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RecoAlgoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto);
  return file_level_enum_descriptors_city_2fwargame_2fv1_2fwargame_2eproto[4];
}
bool RecoAlgoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RecoPoint::_Internal {
 public:
  static const ::city::geo::v2::LongLatPosition& pos(const RecoPoint* msg);
};

const ::city::geo::v2::LongLatPosition&
RecoPoint::_Internal::pos(const RecoPoint* msg) {
  return *msg->_impl_.pos_;
}
void RecoPoint::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
RecoPoint::RecoPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.RecoPoint)
}
RecoPoint::RecoPoint(const RecoPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecoPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::city::geo::v2::LongLatPosition(*from._impl_.pos_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.RecoPoint)
}

inline void RecoPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RecoPoint::~RecoPoint() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.RecoPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecoPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void RecoPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecoPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.RecoPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecoPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.geo.v2.LongLatPosition pos = 1 [json_name = "pos"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.wargame.v1.RecoType type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::city::wargame::v1::RecoType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecoPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.RecoPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.geo.v2.LongLatPosition pos = 1 [json_name = "pos"];
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // .city.wargame.v1.RecoType type = 2 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.RecoPoint)
  return target;
}

size_t RecoPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.RecoPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.geo.v2.LongLatPosition pos = 1 [json_name = "pos"];
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // .city.wargame.v1.RecoType type = 2 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecoPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecoPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecoPoint::GetClassData() const { return &_class_data_; }


void RecoPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecoPoint*>(&to_msg);
  auto& from = static_cast<const RecoPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.RecoPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::city::geo::v2::LongLatPosition::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecoPoint::CopyFrom(const RecoPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.RecoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoPoint::IsInitialized() const {
  return true;
}

void RecoPoint::InternalSwap(RecoPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecoPoint, _impl_.type_)
      + sizeof(RecoPoint::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RecoPoint, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecoPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_2eproto[0]);
}

// ===================================================================

class Weapon::_Internal {
 public:
  using HasBits = decltype(std::declval<Weapon>()._impl_._has_bits_);
  static void set_has_red_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_blue_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Weapon::Weapon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.Weapon)
}
Weapon::Weapon(const Weapon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Weapon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.red_type_){}
    , decltype(_impl_.blue_type_){}
    , decltype(_impl_.num_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.red_type_, &from._impl_.red_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.red_type_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.Weapon)
}

inline void Weapon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.red_type_){0}
    , decltype(_impl_.blue_type_){0}
    , decltype(_impl_.num_){0}
  };
}

Weapon::~Weapon() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.Weapon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Weapon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Weapon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Weapon::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.Weapon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.red_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.blue_type_) -
        reinterpret_cast<char*>(&_impl_.red_type_)) + sizeof(_impl_.blue_type_));
  }
  _impl_.num_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Weapon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .city.wargame.v1.RedWeaponType red_type = 2 [json_name = "redType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_red_type(static_cast<::city::wargame::v1::RedWeaponType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .city.wargame.v1.BlueWeaponType blue_type = 3 [json_name = "blueType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_blue_type(static_cast<::city::wargame::v1::BlueWeaponType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 num = 4 [json_name = "num"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Weapon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.Weapon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .city.wargame.v1.RedWeaponType red_type = 2 [json_name = "redType"];
  if (_internal_has_red_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_red_type(), target);
  }

  // optional .city.wargame.v1.BlueWeaponType blue_type = 3 [json_name = "blueType"];
  if (_internal_has_blue_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_blue_type(), target);
  }

  // int32 num = 4 [json_name = "num"];
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.Weapon)
  return target;
}

size_t Weapon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.Weapon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .city.wargame.v1.RedWeaponType red_type = 2 [json_name = "redType"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_red_type());
    }

    // optional .city.wargame.v1.BlueWeaponType blue_type = 3 [json_name = "blueType"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_blue_type());
    }

  }
  // int32 num = 4 [json_name = "num"];
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Weapon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Weapon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Weapon::GetClassData() const { return &_class_data_; }


void Weapon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Weapon*>(&to_msg);
  auto& from = static_cast<const Weapon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.Weapon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.red_type_ = from._impl_.red_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.blue_type_ = from._impl_.blue_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Weapon::CopyFrom(const Weapon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.Weapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weapon::IsInitialized() const {
  return true;
}

void Weapon::InternalSwap(Weapon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Weapon, _impl_.num_)
      + sizeof(Weapon::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(Weapon, _impl_.red_type_)>(
          reinterpret_cast<char*>(&_impl_.red_type_),
          reinterpret_cast<char*>(&other->_impl_.red_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Weapon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_2eproto[1]);
}

// ===================================================================

class Point::_Internal {
 public:
  static const ::city::wargame::v1::Weapon& weapon(const Point* msg);
  static const ::city::geo::v2::LongLatPosition& pos(const Point* msg);
};

const ::city::wargame::v1::Weapon&
Point::_Internal::weapon(const Point* msg) {
  return *msg->_impl_.weapon_;
}
const ::city::geo::v2::LongLatPosition&
Point::_Internal::pos(const Point* msg) {
  return *msg->_impl_.pos_;
}
void Point::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weapon_){nullptr}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.radius_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_weapon()) {
    _this->_impl_.weapon_ = new ::city::wargame::v1::Weapon(*from._impl_.weapon_);
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::city::geo::v2::LongLatPosition(*from._impl_.pos_);
  }
  _this->_impl_.radius_ = from._impl_.radius_;
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.Point)
}

inline void Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weapon_){nullptr}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.radius_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.weapon_;
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.weapon_ != nullptr) {
    delete _impl_.weapon_;
  }
  _impl_.weapon_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  _impl_.radius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.wargame.v1.Weapon weapon = 1 [json_name = "weapon"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_weapon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.geo.v2.LongLatPosition pos = 2 [json_name = "pos"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double radius = 3 [json_name = "radius"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.wargame.v1.Weapon weapon = 1 [json_name = "weapon"];
  if (this->_internal_has_weapon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::weapon(this),
        _Internal::weapon(this).GetCachedSize(), target, stream);
  }

  // .city.geo.v2.LongLatPosition pos = 2 [json_name = "pos"];
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // double radius = 3 [json_name = "radius"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_radius = this->_internal_radius();
  uint64_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.wargame.v1.Weapon weapon = 1 [json_name = "weapon"];
  if (this->_internal_has_weapon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.weapon_);
  }

  // .city.geo.v2.LongLatPosition pos = 2 [json_name = "pos"];
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // double radius = 3 [json_name = "radius"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_radius = this->_internal_radius();
  uint64_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }


void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_weapon()) {
    _this->_internal_mutable_weapon()->::city::wargame::v1::Weapon::MergeFrom(
        from._internal_weapon());
  }
  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::city::geo::v2::LongLatPosition::MergeFrom(
        from._internal_pos());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_radius = from._internal_radius();
  uint64_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.radius_)
      + sizeof(Point::_impl_.radius_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.weapon_)>(
          reinterpret_cast<char*>(&_impl_.weapon_),
          reinterpret_cast<char*>(&other->_impl_.weapon_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_2eproto[2]);
}

// ===================================================================

class Hit::_Internal {
 public:
  static const ::city::wargame::v1::Point& attack(const Hit* msg);
};

const ::city::wargame::v1::Point&
Hit::_Internal::attack(const Hit* msg) {
  return *msg->_impl_.attack_;
}
Hit::Hit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.Hit)
}
Hit::Hit(const Hit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Hit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.defenses_){from._impl_.defenses_}
    , decltype(_impl_.attack_){nullptr}
    , decltype(_impl_.result_){}
    , decltype(_impl_.arrive_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_attack()) {
    _this->_impl_.attack_ = new ::city::wargame::v1::Point(*from._impl_.attack_);
  }
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.arrive_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.arrive_));
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.Hit)
}

inline void Hit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.defenses_){arena}
    , decltype(_impl_.attack_){nullptr}
    , decltype(_impl_.result_){false}
    , decltype(_impl_.arrive_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Hit::~Hit() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.Hit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Hit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.defenses_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.attack_;
}

void Hit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Hit::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.Hit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.defenses_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.attack_ != nullptr) {
    delete _impl_.attack_;
  }
  _impl_.attack_ = nullptr;
  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.arrive_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.arrive_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.wargame.v1.Point attack = 1 [json_name = "attack"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_attack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .city.wargame.v1.Point defenses = 2 [json_name = "defenses"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_defenses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool result = 3 [json_name = "result"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 arrive = 4 [json_name = "arrive"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.arrive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Hit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.Hit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.wargame.v1.Point attack = 1 [json_name = "attack"];
  if (this->_internal_has_attack()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::attack(this),
        _Internal::attack(this).GetCachedSize(), target, stream);
  }

  // repeated .city.wargame.v1.Point defenses = 2 [json_name = "defenses"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_defenses_size()); i < n; i++) {
    const auto& repfield = this->_internal_defenses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool result = 3 [json_name = "result"];
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_result(), target);
  }

  // int32 arrive = 4 [json_name = "arrive"];
  if (this->_internal_arrive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_arrive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.Hit)
  return target;
}

size_t Hit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.Hit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.wargame.v1.Point defenses = 2 [json_name = "defenses"];
  total_size += 1UL * this->_internal_defenses_size();
  for (const auto& msg : this->_impl_.defenses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .city.wargame.v1.Point attack = 1 [json_name = "attack"];
  if (this->_internal_has_attack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attack_);
  }

  // bool result = 3 [json_name = "result"];
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  // int32 arrive = 4 [json_name = "arrive"];
  if (this->_internal_arrive() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_arrive());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Hit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Hit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Hit::GetClassData() const { return &_class_data_; }


void Hit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Hit*>(&to_msg);
  auto& from = static_cast<const Hit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.Hit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.defenses_.MergeFrom(from._impl_.defenses_);
  if (from._internal_has_attack()) {
    _this->_internal_mutable_attack()->::city::wargame::v1::Point::MergeFrom(
        from._internal_attack());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_arrive() != 0) {
    _this->_internal_set_arrive(from._internal_arrive());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Hit::CopyFrom(const Hit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.Hit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hit::IsInitialized() const {
  return true;
}

void Hit::InternalSwap(Hit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.defenses_.InternalSwap(&other->_impl_.defenses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hit, _impl_.arrive_)
      + sizeof(Hit::_impl_.arrive_)
      - PROTOBUF_FIELD_OFFSET(Hit, _impl_.attack_)>(
          reinterpret_cast<char*>(&_impl_.attack_),
          reinterpret_cast<char*>(&other->_impl_.attack_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Hit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_2eproto[3]);
}

// ===================================================================

class HitHistory::_Internal {
 public:
};

HitHistory::HitHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.HitHistory)
}
HitHistory::HitHistory(const HitHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HitHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hits_){from._impl_.hits_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.HitHistory)
}

inline void HitHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hits_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HitHistory::~HitHistory() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.HitHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HitHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hits_.~RepeatedPtrField();
}

void HitHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HitHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.HitHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .city.wargame.v1.Hit hits = 1 [json_name = "hits"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HitHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.HitHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .city.wargame.v1.Hit hits = 1 [json_name = "hits"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hits_size()); i < n; i++) {
    const auto& repfield = this->_internal_hits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.HitHistory)
  return target;
}

size_t HitHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.HitHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.wargame.v1.Hit hits = 1 [json_name = "hits"];
  total_size += 1UL * this->_internal_hits_size();
  for (const auto& msg : this->_impl_.hits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HitHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HitHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HitHistory::GetClassData() const { return &_class_data_; }


void HitHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HitHistory*>(&to_msg);
  auto& from = static_cast<const HitHistory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.HitHistory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hits_.MergeFrom(from._impl_.hits_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HitHistory::CopyFrom(const HitHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.HitHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitHistory::IsInitialized() const {
  return true;
}

void HitHistory::InternalSwap(HitHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hits_.InternalSwap(&other->_impl_.hits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HitHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_2eproto[4]);
}

// ===================================================================

class Casualty::_Internal {
 public:
};

Casualty::Casualty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.wargame.v1.Casualty)
}
Casualty::Casualty(const Casualty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Casualty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aoi_id_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.aoi_id_, &from._impl_.aoi_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.aoi_id_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:city.wargame.v1.Casualty)
}

inline void Casualty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aoi_id_){0}
    , decltype(_impl_.num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Casualty::~Casualty() {
  // @@protoc_insertion_point(destructor:city.wargame.v1.Casualty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Casualty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Casualty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Casualty::Clear() {
// @@protoc_insertion_point(message_clear_start:city.wargame.v1.Casualty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.aoi_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.aoi_id_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Casualty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 aoi_id = 1 [json_name = "aoiId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.aoi_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num = 2 [json_name = "num"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Casualty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.wargame.v1.Casualty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 aoi_id = 1 [json_name = "aoiId"];
  if (this->_internal_aoi_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_aoi_id(), target);
  }

  // int32 num = 2 [json_name = "num"];
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.wargame.v1.Casualty)
  return target;
}

size_t Casualty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.wargame.v1.Casualty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 aoi_id = 1 [json_name = "aoiId"];
  if (this->_internal_aoi_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_aoi_id());
  }

  // int32 num = 2 [json_name = "num"];
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Casualty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Casualty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Casualty::GetClassData() const { return &_class_data_; }


void Casualty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Casualty*>(&to_msg);
  auto& from = static_cast<const Casualty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.wargame.v1.Casualty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_aoi_id() != 0) {
    _this->_internal_set_aoi_id(from._internal_aoi_id());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Casualty::CopyFrom(const Casualty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.wargame.v1.Casualty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Casualty::IsInitialized() const {
  return true;
}

void Casualty::InternalSwap(Casualty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Casualty, _impl_.num_)
      + sizeof(Casualty::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(Casualty, _impl_.aoi_id_)>(
          reinterpret_cast<char*>(&_impl_.aoi_id_),
          reinterpret_cast<char*>(&other->_impl_.aoi_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Casualty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_getter, &descriptor_table_city_2fwargame_2fv1_2fwargame_2eproto_once,
      file_level_metadata_city_2fwargame_2fv1_2fwargame_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace wargame
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::wargame::v1::RecoPoint*
Arena::CreateMaybeMessage< ::city::wargame::v1::RecoPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::RecoPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::Weapon*
Arena::CreateMaybeMessage< ::city::wargame::v1::Weapon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::Weapon >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::Point*
Arena::CreateMaybeMessage< ::city::wargame::v1::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::Hit*
Arena::CreateMaybeMessage< ::city::wargame::v1::Hit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::Hit >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::HitHistory*
Arena::CreateMaybeMessage< ::city::wargame::v1::HitHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::HitHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::city::wargame::v1::Casualty*
Arena::CreateMaybeMessage< ::city::wargame::v1::Casualty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::wargame::v1::Casualty >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
