// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/streetview/v1/streetview.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fstreetview_2fv1_2fstreetview_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_city_2fstreetview_2fv1_2fstreetview_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "city/geo/v2/geo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_city_2fstreetview_2fv1_2fstreetview_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fstreetview_2fv1_2fstreetview_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_city_2fstreetview_2fv1_2fstreetview_2eproto;
namespace city {
namespace streetview {
namespace v1 {
class StreetView;
struct StreetViewDefaultTypeInternal;
extern StreetViewDefaultTypeInternal _StreetView_default_instance_;
class StreetViewImage;
struct StreetViewImageDefaultTypeInternal;
extern StreetViewImageDefaultTypeInternal _StreetViewImage_default_instance_;
class StreetViews;
struct StreetViewsDefaultTypeInternal;
extern StreetViewsDefaultTypeInternal _StreetViews_default_instance_;
}  // namespace v1
}  // namespace streetview
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace city {
namespace streetview {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class StreetViewImage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.streetview.v1.StreetViewImage) */ {
 public:
  inline StreetViewImage() : StreetViewImage(nullptr) {}
  ~StreetViewImage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreetViewImage(::google::protobuf::internal::ConstantInitialized);

  StreetViewImage(const StreetViewImage& from);
  StreetViewImage(StreetViewImage&& from) noexcept
    : StreetViewImage() {
    *this = ::std::move(from);
  }

  inline StreetViewImage& operator=(const StreetViewImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreetViewImage& operator=(StreetViewImage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreetViewImage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreetViewImage* internal_default_instance() {
    return reinterpret_cast<const StreetViewImage*>(
               &_StreetViewImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreetViewImage& a, StreetViewImage& b) {
    a.Swap(&b);
  }
  inline void Swap(StreetViewImage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreetViewImage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreetViewImage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreetViewImage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreetViewImage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StreetViewImage& from) {
    StreetViewImage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreetViewImage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.streetview.v1.StreetViewImage";
  }
  protected:
  explicit StreetViewImage(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 2,
    kHeadingFieldNumber = 1,
  };
  // string object = 2 [json_name = "object"];
  void clear_object() ;
  const std::string& object() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_object(Arg_&& arg, Args_... args);
  std::string* mutable_object();
  PROTOBUF_NODISCARD std::string* release_object();
  void set_allocated_object(std::string* ptr);

  private:
  const std::string& _internal_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object(
      const std::string& value);
  std::string* _internal_mutable_object();

  public:
  // double heading = 1 [json_name = "heading"];
  void clear_heading() ;
  double heading() const;
  void set_heading(double value);

  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);

  public:
  // @@protoc_insertion_point(class_scope:city.streetview.v1.StreetViewImage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 49, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr object_;
    double heading_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fstreetview_2fv1_2fstreetview_2eproto;
};// -------------------------------------------------------------------

class StreetView final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.streetview.v1.StreetView) */ {
 public:
  inline StreetView() : StreetView(nullptr) {}
  ~StreetView() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreetView(::google::protobuf::internal::ConstantInitialized);

  StreetView(const StreetView& from);
  StreetView(StreetView&& from) noexcept
    : StreetView() {
    *this = ::std::move(from);
  }

  inline StreetView& operator=(const StreetView& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreetView& operator=(StreetView&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreetView& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreetView* internal_default_instance() {
    return reinterpret_cast<const StreetView*>(
               &_StreetView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreetView& a, StreetView& b) {
    a.Swap(&b);
  }
  inline void Swap(StreetView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreetView* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreetView* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreetView>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreetView& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StreetView& from) {
    StreetView::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreetView* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.streetview.v1.StreetView";
  }
  protected:
  explicit StreetView(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 2,
    kLnglatFieldNumber = 1,
  };
  // repeated .city.streetview.v1.StreetViewImage images = 2 [json_name = "images"];
  int images_size() const;
  private:
  int _internal_images_size() const;

  public:
  void clear_images() ;
  ::city::streetview::v1::StreetViewImage* mutable_images(int index);
  ::google::protobuf::RepeatedPtrField< ::city::streetview::v1::StreetViewImage >*
      mutable_images();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::streetview::v1::StreetViewImage>& _internal_images() const;
  ::google::protobuf::RepeatedPtrField<::city::streetview::v1::StreetViewImage>* _internal_mutable_images();
  public:
  const ::city::streetview::v1::StreetViewImage& images(int index) const;
  ::city::streetview::v1::StreetViewImage* add_images();
  const ::google::protobuf::RepeatedPtrField< ::city::streetview::v1::StreetViewImage >&
      images() const;
  // .city.geo.v2.LongLatPosition lnglat = 1 [json_name = "lnglat"];
  bool has_lnglat() const;
  void clear_lnglat() ;
  const ::city::geo::v2::LongLatPosition& lnglat() const;
  PROTOBUF_NODISCARD ::city::geo::v2::LongLatPosition* release_lnglat();
  ::city::geo::v2::LongLatPosition* mutable_lnglat();
  void set_allocated_lnglat(::city::geo::v2::LongLatPosition* value);
  void unsafe_arena_set_allocated_lnglat(::city::geo::v2::LongLatPosition* value);
  ::city::geo::v2::LongLatPosition* unsafe_arena_release_lnglat();

  private:
  const ::city::geo::v2::LongLatPosition& _internal_lnglat() const;
  ::city::geo::v2::LongLatPosition* _internal_mutable_lnglat();

  public:
  // @@protoc_insertion_point(class_scope:city.streetview.v1.StreetView)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::city::streetview::v1::StreetViewImage > images_;
    ::city::geo::v2::LongLatPosition* lnglat_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fstreetview_2fv1_2fstreetview_2eproto;
};// -------------------------------------------------------------------

class StreetViews final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.streetview.v1.StreetViews) */ {
 public:
  inline StreetViews() : StreetViews(nullptr) {}
  ~StreetViews() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreetViews(::google::protobuf::internal::ConstantInitialized);

  StreetViews(const StreetViews& from);
  StreetViews(StreetViews&& from) noexcept
    : StreetViews() {
    *this = ::std::move(from);
  }

  inline StreetViews& operator=(const StreetViews& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreetViews& operator=(StreetViews&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreetViews& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreetViews* internal_default_instance() {
    return reinterpret_cast<const StreetViews*>(
               &_StreetViews_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StreetViews& a, StreetViews& b) {
    a.Swap(&b);
  }
  inline void Swap(StreetViews* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreetViews* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreetViews* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreetViews>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreetViews& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StreetViews& from) {
    StreetViews::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreetViews* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.streetview.v1.StreetViews";
  }
  protected:
  explicit StreetViews(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreetViewsFieldNumber = 1,
  };
  // repeated .city.streetview.v1.StreetView street_views = 1 [json_name = "streetViews"];
  int street_views_size() const;
  private:
  int _internal_street_views_size() const;

  public:
  void clear_street_views() ;
  ::city::streetview::v1::StreetView* mutable_street_views(int index);
  ::google::protobuf::RepeatedPtrField< ::city::streetview::v1::StreetView >*
      mutable_street_views();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::streetview::v1::StreetView>& _internal_street_views() const;
  ::google::protobuf::RepeatedPtrField<::city::streetview::v1::StreetView>* _internal_mutable_street_views();
  public:
  const ::city::streetview::v1::StreetView& street_views(int index) const;
  ::city::streetview::v1::StreetView* add_street_views();
  const ::google::protobuf::RepeatedPtrField< ::city::streetview::v1::StreetView >&
      street_views() const;
  // @@protoc_insertion_point(class_scope:city.streetview.v1.StreetViews)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::city::streetview::v1::StreetView > street_views_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fstreetview_2fv1_2fstreetview_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StreetViewImage

// double heading = 1 [json_name = "heading"];
inline void StreetViewImage::clear_heading() {
  _impl_.heading_ = 0;
}
inline double StreetViewImage::heading() const {
  // @@protoc_insertion_point(field_get:city.streetview.v1.StreetViewImage.heading)
  return _internal_heading();
}
inline void StreetViewImage::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:city.streetview.v1.StreetViewImage.heading)
}
inline double StreetViewImage::_internal_heading() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.heading_;
}
inline void StreetViewImage::_internal_set_heading(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.heading_ = value;
}

// string object = 2 [json_name = "object"];
inline void StreetViewImage::clear_object() {
  _impl_.object_.ClearToEmpty();
}
inline const std::string& StreetViewImage::object() const {
  // @@protoc_insertion_point(field_get:city.streetview.v1.StreetViewImage.object)
  return _internal_object();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreetViewImage::set_object(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.object_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.streetview.v1.StreetViewImage.object)
}
inline std::string* StreetViewImage::mutable_object() {
  std::string* _s = _internal_mutable_object();
  // @@protoc_insertion_point(field_mutable:city.streetview.v1.StreetViewImage.object)
  return _s;
}
inline const std::string& StreetViewImage::_internal_object() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.object_.Get();
}
inline void StreetViewImage::_internal_set_object(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.object_.Set(value, GetArenaForAllocation());
}
inline std::string* StreetViewImage::_internal_mutable_object() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.object_.Mutable( GetArenaForAllocation());
}
inline std::string* StreetViewImage::release_object() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.streetview.v1.StreetViewImage.object)
  return _impl_.object_.Release();
}
inline void StreetViewImage::set_allocated_object(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.object_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.object_.IsDefault()) {
          _impl_.object_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.streetview.v1.StreetViewImage.object)
}

// -------------------------------------------------------------------

// StreetView

// .city.geo.v2.LongLatPosition lnglat = 1 [json_name = "lnglat"];
inline bool StreetView::has_lnglat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lnglat_ != nullptr);
  return value;
}
inline const ::city::geo::v2::LongLatPosition& StreetView::_internal_lnglat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::geo::v2::LongLatPosition* p = _impl_.lnglat_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::LongLatPosition&>(::city::geo::v2::_LongLatPosition_default_instance_);
}
inline const ::city::geo::v2::LongLatPosition& StreetView::lnglat() const {
  // @@protoc_insertion_point(field_get:city.streetview.v1.StreetView.lnglat)
  return _internal_lnglat();
}
inline void StreetView::unsafe_arena_set_allocated_lnglat(::city::geo::v2::LongLatPosition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lnglat_);
  }
  _impl_.lnglat_ = reinterpret_cast<::city::geo::v2::LongLatPosition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.streetview.v1.StreetView.lnglat)
}
inline ::city::geo::v2::LongLatPosition* StreetView::release_lnglat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::LongLatPosition* released = _impl_.lnglat_;
  _impl_.lnglat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::geo::v2::LongLatPosition* StreetView::unsafe_arena_release_lnglat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.streetview.v1.StreetView.lnglat)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::LongLatPosition* temp = _impl_.lnglat_;
  _impl_.lnglat_ = nullptr;
  return temp;
}
inline ::city::geo::v2::LongLatPosition* StreetView::_internal_mutable_lnglat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.lnglat_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::LongLatPosition>(GetArenaForAllocation());
    _impl_.lnglat_ = reinterpret_cast<::city::geo::v2::LongLatPosition*>(p);
  }
  return _impl_.lnglat_;
}
inline ::city::geo::v2::LongLatPosition* StreetView::mutable_lnglat() {
  ::city::geo::v2::LongLatPosition* _msg = _internal_mutable_lnglat();
  // @@protoc_insertion_point(field_mutable:city.streetview.v1.StreetView.lnglat)
  return _msg;
}
inline void StreetView::set_allocated_lnglat(::city::geo::v2::LongLatPosition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lnglat_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.lnglat_ = reinterpret_cast<::city::geo::v2::LongLatPosition*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.streetview.v1.StreetView.lnglat)
}

// repeated .city.streetview.v1.StreetViewImage images = 2 [json_name = "images"];
inline int StreetView::_internal_images_size() const {
  return _internal_images().size();
}
inline int StreetView::images_size() const {
  return _internal_images_size();
}
inline void StreetView::clear_images() {
  _internal_mutable_images()->Clear();
}
inline ::city::streetview::v1::StreetViewImage* StreetView::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:city.streetview.v1.StreetView.images)
  return _internal_mutable_images()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::streetview::v1::StreetViewImage >*
StreetView::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:city.streetview.v1.StreetView.images)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_images();
}
inline const ::city::streetview::v1::StreetViewImage& StreetView::images(int index) const {
  // @@protoc_insertion_point(field_get:city.streetview.v1.StreetView.images)
    return _internal_images().Get(index);
}
inline ::city::streetview::v1::StreetViewImage* StreetView::add_images() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::streetview::v1::StreetViewImage* _add = _internal_mutable_images()->Add();
  // @@protoc_insertion_point(field_add:city.streetview.v1.StreetView.images)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::streetview::v1::StreetViewImage >&
StreetView::images() const {
  // @@protoc_insertion_point(field_list:city.streetview.v1.StreetView.images)
  return _internal_images();
}
inline const ::google::protobuf::RepeatedPtrField<::city::streetview::v1::StreetViewImage>&
StreetView::_internal_images() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.images_;
}
inline ::google::protobuf::RepeatedPtrField<::city::streetview::v1::StreetViewImage>*
StreetView::_internal_mutable_images() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.images_;
}

// -------------------------------------------------------------------

// StreetViews

// repeated .city.streetview.v1.StreetView street_views = 1 [json_name = "streetViews"];
inline int StreetViews::_internal_street_views_size() const {
  return _internal_street_views().size();
}
inline int StreetViews::street_views_size() const {
  return _internal_street_views_size();
}
inline void StreetViews::clear_street_views() {
  _internal_mutable_street_views()->Clear();
}
inline ::city::streetview::v1::StreetView* StreetViews::mutable_street_views(int index) {
  // @@protoc_insertion_point(field_mutable:city.streetview.v1.StreetViews.street_views)
  return _internal_mutable_street_views()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::streetview::v1::StreetView >*
StreetViews::mutable_street_views() {
  // @@protoc_insertion_point(field_mutable_list:city.streetview.v1.StreetViews.street_views)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_street_views();
}
inline const ::city::streetview::v1::StreetView& StreetViews::street_views(int index) const {
  // @@protoc_insertion_point(field_get:city.streetview.v1.StreetViews.street_views)
    return _internal_street_views().Get(index);
}
inline ::city::streetview::v1::StreetView* StreetViews::add_street_views() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::streetview::v1::StreetView* _add = _internal_mutable_street_views()->Add();
  // @@protoc_insertion_point(field_add:city.streetview.v1.StreetViews.street_views)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::streetview::v1::StreetView >&
StreetViews::street_views() const {
  // @@protoc_insertion_point(field_list:city.streetview.v1.StreetViews.street_views)
  return _internal_street_views();
}
inline const ::google::protobuf::RepeatedPtrField<::city::streetview::v1::StreetView>&
StreetViews::_internal_street_views() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.street_views_;
}
inline ::google::protobuf::RepeatedPtrField<::city::streetview::v1::StreetView>*
StreetViews::_internal_mutable_street_views() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.street_views_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace streetview
}  // namespace city


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_city_2fstreetview_2fv1_2fstreetview_2eproto_2epb_2eh
