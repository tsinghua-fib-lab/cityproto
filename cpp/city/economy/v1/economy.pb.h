// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/economy/v1/economy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv1_2feconomy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv1_2feconomy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2feconomy_2fv1_2feconomy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2feconomy_2fv1_2feconomy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2feconomy_2fv1_2feconomy_2eproto;
namespace city {
namespace economy {
namespace v1 {
class Economy;
struct EconomyDefaultTypeInternal;
extern EconomyDefaultTypeInternal _Economy_default_instance_;
class Employee;
struct EmployeeDefaultTypeInternal;
extern EmployeeDefaultTypeInternal _Employee_default_instance_;
class Goods;
struct GoodsDefaultTypeInternal;
extern GoodsDefaultTypeInternal _Goods_default_instance_;
class Job;
struct JobDefaultTypeInternal;
extern JobDefaultTypeInternal _Job_default_instance_;
class Org;
struct OrgDefaultTypeInternal;
extern OrgDefaultTypeInternal _Org_default_instance_;
class Person;
struct PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
}  // namespace v1
}  // namespace economy
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::economy::v1::Economy* Arena::CreateMaybeMessage<::city::economy::v1::Economy>(Arena*);
template<> ::city::economy::v1::Employee* Arena::CreateMaybeMessage<::city::economy::v1::Employee>(Arena*);
template<> ::city::economy::v1::Goods* Arena::CreateMaybeMessage<::city::economy::v1::Goods>(Arena*);
template<> ::city::economy::v1::Job* Arena::CreateMaybeMessage<::city::economy::v1::Job>(Arena*);
template<> ::city::economy::v1::Org* Arena::CreateMaybeMessage<::city::economy::v1::Org>(Arena*);
template<> ::city::economy::v1::Person* Arena::CreateMaybeMessage<::city::economy::v1::Person>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace economy {
namespace v1 {

// ===================================================================

class Person final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  ~Person() override;
  explicit PROTOBUF_CONSTEXPR Person(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Person& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Person& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Person& from) {
    Person::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoneyFieldNumber = 2,
    kIdFieldNumber = 1,
    kOrgIdFieldNumber = 3,
  };
  // double money = 2 [json_name = "money"];
  void clear_money();
  double money() const;
  void set_money(double value);
  private:
  double _internal_money() const;
  void _internal_set_money(double value);
  public:

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional int32 org_id = 3 [json_name = "orgId"];
  bool has_org_id() const;
  private:
  bool _internal_has_org_id() const;
  public:
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v1.Person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double money_;
    int32_t id_;
    int32_t org_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class Employee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.Employee) */ {
 public:
  inline Employee() : Employee(nullptr) {}
  ~Employee() override;
  explicit PROTOBUF_CONSTEXPR Employee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Employee(const Employee& from);
  Employee(Employee&& from) noexcept
    : Employee() {
    *this = ::std::move(from);
  }

  inline Employee& operator=(const Employee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Employee& operator=(Employee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Employee& default_instance() {
    return *internal_default_instance();
  }
  static inline const Employee* internal_default_instance() {
    return reinterpret_cast<const Employee*>(
               &_Employee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Employee& a, Employee& b) {
    a.Swap(&b);
  }
  inline void Swap(Employee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Employee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Employee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Employee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Employee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Employee& from) {
    Employee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Employee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.Employee";
  }
  protected:
  explicit Employee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSalaryFieldNumber = 2,
    kPersonIdFieldNumber = 1,
  };
  // double salary = 2 [json_name = "salary"];
  void clear_salary();
  double salary() const;
  void set_salary(double value);
  private:
  double _internal_salary() const;
  void _internal_set_salary(double value);
  public:

  // int32 person_id = 1 [json_name = "personId"];
  void clear_person_id();
  int32_t person_id() const;
  void set_person_id(int32_t value);
  private:
  int32_t _internal_person_id() const;
  void _internal_set_person_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v1.Employee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double salary_;
    int32_t person_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class Job final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.Job) */ {
 public:
  inline Job() : Job(nullptr) {}
  ~Job() override;
  explicit PROTOBUF_CONSTEXPR Job(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Job(const Job& from);
  Job(Job&& from) noexcept
    : Job() {
    *this = ::std::move(from);
  }

  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }
  inline Job& operator=(Job&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Job& default_instance() {
    return *internal_default_instance();
  }
  static inline const Job* internal_default_instance() {
    return reinterpret_cast<const Job*>(
               &_Job_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Job& a, Job& b) {
    a.Swap(&b);
  }
  inline void Swap(Job* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Job* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Job* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Job>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Job& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Job& from) {
    Job::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Job* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.Job";
  }
  protected:
  explicit Job(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSalaryFieldNumber = 3,
    kEmployeeCountFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional double salary = 3 [json_name = "salary"];
  bool has_salary() const;
  private:
  bool _internal_has_salary() const;
  public:
  void clear_salary();
  double salary() const;
  void set_salary(double value);
  private:
  double _internal_salary() const;
  void _internal_set_salary(double value);
  public:

  // int32 employee_count = 2 [json_name = "employeeCount"];
  void clear_employee_count();
  int32_t employee_count() const;
  void set_employee_count(int32_t value);
  private:
  int32_t _internal_employee_count() const;
  void _internal_set_employee_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v1.Job)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double salary_;
    int32_t employee_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class Goods final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.Goods) */ {
 public:
  inline Goods() : Goods(nullptr) {}
  ~Goods() override;
  explicit PROTOBUF_CONSTEXPR Goods(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Goods(const Goods& from);
  Goods(Goods&& from) noexcept
    : Goods() {
    *this = ::std::move(from);
  }

  inline Goods& operator=(const Goods& from) {
    CopyFrom(from);
    return *this;
  }
  inline Goods& operator=(Goods&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Goods& default_instance() {
    return *internal_default_instance();
  }
  static inline const Goods* internal_default_instance() {
    return reinterpret_cast<const Goods*>(
               &_Goods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Goods& a, Goods& b) {
    a.Swap(&b);
  }
  inline void Swap(Goods* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Goods* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Goods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Goods>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Goods& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Goods& from) {
    Goods::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Goods* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.Goods";
  }
  protected:
  explicit Goods(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kNameFieldNumber = 2,
    kPriceFieldNumber = 4,
    kCountFieldNumber = 3,
  };
  // string type = 1 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional double price = 4 [json_name = "price"];
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int32 count = 3 [json_name = "count"];
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v1.Goods)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double price_;
    int32_t count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class Org final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.Org) */ {
 public:
  inline Org() : Org(nullptr) {}
  ~Org() override;
  explicit PROTOBUF_CONSTEXPR Org(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Org(const Org& from);
  Org(Org&& from) noexcept
    : Org() {
    *this = ::std::move(from);
  }

  inline Org& operator=(const Org& from) {
    CopyFrom(from);
    return *this;
  }
  inline Org& operator=(Org&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Org& default_instance() {
    return *internal_default_instance();
  }
  static inline const Org* internal_default_instance() {
    return reinterpret_cast<const Org*>(
               &_Org_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Org& a, Org& b) {
    a.Swap(&b);
  }
  inline void Swap(Org* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Org* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Org* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Org>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Org& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Org& from) {
    Org::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Org* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.Org";
  }
  protected:
  explicit Org(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmployeesFieldNumber = 3,
    kJobsFieldNumber = 4,
    kGoodsFieldNumber = 6,
    kFunctionsFieldNumber = 7,
    kIdFieldNumber = 1,
    kPoiIdFieldNumber = 2,
    kMoneyFieldNumber = 5,
  };
  // repeated .city.economy.v1.Employee employees = 3 [json_name = "employees"];
  int employees_size() const;
  private:
  int _internal_employees_size() const;
  public:
  void clear_employees();
  ::city::economy::v1::Employee* mutable_employees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Employee >*
      mutable_employees();
  private:
  const ::city::economy::v1::Employee& _internal_employees(int index) const;
  ::city::economy::v1::Employee* _internal_add_employees();
  public:
  const ::city::economy::v1::Employee& employees(int index) const;
  ::city::economy::v1::Employee* add_employees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Employee >&
      employees() const;

  // repeated .city.economy.v1.Job jobs = 4 [json_name = "jobs"];
  int jobs_size() const;
  private:
  int _internal_jobs_size() const;
  public:
  void clear_jobs();
  ::city::economy::v1::Job* mutable_jobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Job >*
      mutable_jobs();
  private:
  const ::city::economy::v1::Job& _internal_jobs(int index) const;
  ::city::economy::v1::Job* _internal_add_jobs();
  public:
  const ::city::economy::v1::Job& jobs(int index) const;
  ::city::economy::v1::Job* add_jobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Job >&
      jobs() const;

  // repeated .city.economy.v1.Goods goods = 6 [json_name = "goods"];
  int goods_size() const;
  private:
  int _internal_goods_size() const;
  public:
  void clear_goods();
  ::city::economy::v1::Goods* mutable_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Goods >*
      mutable_goods();
  private:
  const ::city::economy::v1::Goods& _internal_goods(int index) const;
  ::city::economy::v1::Goods* _internal_add_goods();
  public:
  const ::city::economy::v1::Goods& goods(int index) const;
  ::city::economy::v1::Goods* add_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Goods >&
      goods() const;

  // repeated string functions = 7 [json_name = "functions"];
  int functions_size() const;
  private:
  int _internal_functions_size() const;
  public:
  void clear_functions();
  const std::string& functions(int index) const;
  std::string* mutable_functions(int index);
  void set_functions(int index, const std::string& value);
  void set_functions(int index, std::string&& value);
  void set_functions(int index, const char* value);
  void set_functions(int index, const char* value, size_t size);
  std::string* add_functions();
  void add_functions(const std::string& value);
  void add_functions(std::string&& value);
  void add_functions(const char* value);
  void add_functions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& functions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_functions();
  private:
  const std::string& _internal_functions(int index) const;
  std::string* _internal_add_functions();
  public:

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 poi_id = 2 [json_name = "poiId"];
  void clear_poi_id();
  int32_t poi_id() const;
  void set_poi_id(int32_t value);
  private:
  int32_t _internal_poi_id() const;
  void _internal_set_poi_id(int32_t value);
  public:

  // double money = 5 [json_name = "money"];
  void clear_money();
  double money() const;
  void set_money(double value);
  private:
  double _internal_money() const;
  void _internal_set_money(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v1.Org)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Employee > employees_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Job > jobs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Goods > goods_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> functions_;
    int32_t id_;
    int32_t poi_id_;
    double money_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class Economy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.Economy) */ {
 public:
  inline Economy() : Economy(nullptr) {}
  ~Economy() override;
  explicit PROTOBUF_CONSTEXPR Economy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Economy(const Economy& from);
  Economy(Economy&& from) noexcept
    : Economy() {
    *this = ::std::move(from);
  }

  inline Economy& operator=(const Economy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Economy& operator=(Economy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Economy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Economy* internal_default_instance() {
    return reinterpret_cast<const Economy*>(
               &_Economy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Economy& a, Economy& b) {
    a.Swap(&b);
  }
  inline void Swap(Economy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Economy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Economy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Economy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Economy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Economy& from) {
    Economy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Economy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.Economy";
  }
  protected:
  explicit Economy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonsFieldNumber = 1,
    kOrgsFieldNumber = 2,
  };
  // repeated .city.economy.v1.Person persons = 1 [json_name = "persons"];
  int persons_size() const;
  private:
  int _internal_persons_size() const;
  public:
  void clear_persons();
  ::city::economy::v1::Person* mutable_persons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Person >*
      mutable_persons();
  private:
  const ::city::economy::v1::Person& _internal_persons(int index) const;
  ::city::economy::v1::Person* _internal_add_persons();
  public:
  const ::city::economy::v1::Person& persons(int index) const;
  ::city::economy::v1::Person* add_persons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Person >&
      persons() const;

  // repeated .city.economy.v1.Org orgs = 2 [json_name = "orgs"];
  int orgs_size() const;
  private:
  int _internal_orgs_size() const;
  public:
  void clear_orgs();
  ::city::economy::v1::Org* mutable_orgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >*
      mutable_orgs();
  private:
  const ::city::economy::v1::Org& _internal_orgs(int index) const;
  ::city::economy::v1::Org* _internal_add_orgs();
  public:
  const ::city::economy::v1::Org& orgs(int index) const;
  ::city::economy::v1::Org* add_orgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >&
      orgs() const;

  // @@protoc_insertion_point(class_scope:city.economy.v1.Economy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Person > persons_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org > orgs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2feconomy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Person

// int32 id = 1 [json_name = "id"];
inline void Person::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Person::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Person::id() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Person.id)
  return _internal_id();
}
inline void Person::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Person::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.Person.id)
}

// double money = 2 [json_name = "money"];
inline void Person::clear_money() {
  _impl_.money_ = 0;
}
inline double Person::_internal_money() const {
  return _impl_.money_;
}
inline double Person::money() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Person.money)
  return _internal_money();
}
inline void Person::_internal_set_money(double value) {
  
  _impl_.money_ = value;
}
inline void Person::set_money(double value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.Person.money)
}

// optional int32 org_id = 3 [json_name = "orgId"];
inline bool Person::_internal_has_org_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Person::has_org_id() const {
  return _internal_has_org_id();
}
inline void Person::clear_org_id() {
  _impl_.org_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Person::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t Person::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Person.org_id)
  return _internal_org_id();
}
inline void Person::_internal_set_org_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.org_id_ = value;
}
inline void Person::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.Person.org_id)
}

// -------------------------------------------------------------------

// Employee

// int32 person_id = 1 [json_name = "personId"];
inline void Employee::clear_person_id() {
  _impl_.person_id_ = 0;
}
inline int32_t Employee::_internal_person_id() const {
  return _impl_.person_id_;
}
inline int32_t Employee::person_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Employee.person_id)
  return _internal_person_id();
}
inline void Employee::_internal_set_person_id(int32_t value) {
  
  _impl_.person_id_ = value;
}
inline void Employee::set_person_id(int32_t value) {
  _internal_set_person_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.Employee.person_id)
}

// double salary = 2 [json_name = "salary"];
inline void Employee::clear_salary() {
  _impl_.salary_ = 0;
}
inline double Employee::_internal_salary() const {
  return _impl_.salary_;
}
inline double Employee::salary() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Employee.salary)
  return _internal_salary();
}
inline void Employee::_internal_set_salary(double value) {
  
  _impl_.salary_ = value;
}
inline void Employee::set_salary(double value) {
  _internal_set_salary(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.Employee.salary)
}

// -------------------------------------------------------------------

// Job

// string name = 1 [json_name = "name"];
inline void Job::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Job::name() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Job.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Job::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.economy.v1.Job.name)
}
inline std::string* Job::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:city.economy.v1.Job.name)
  return _s;
}
inline const std::string& Job::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Job::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Job::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Job::release_name() {
  // @@protoc_insertion_point(field_release:city.economy.v1.Job.name)
  return _impl_.name_.Release();
}
inline void Job::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.economy.v1.Job.name)
}

// int32 employee_count = 2 [json_name = "employeeCount"];
inline void Job::clear_employee_count() {
  _impl_.employee_count_ = 0;
}
inline int32_t Job::_internal_employee_count() const {
  return _impl_.employee_count_;
}
inline int32_t Job::employee_count() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Job.employee_count)
  return _internal_employee_count();
}
inline void Job::_internal_set_employee_count(int32_t value) {
  
  _impl_.employee_count_ = value;
}
inline void Job::set_employee_count(int32_t value) {
  _internal_set_employee_count(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.Job.employee_count)
}

// optional double salary = 3 [json_name = "salary"];
inline bool Job::_internal_has_salary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Job::has_salary() const {
  return _internal_has_salary();
}
inline void Job::clear_salary() {
  _impl_.salary_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Job::_internal_salary() const {
  return _impl_.salary_;
}
inline double Job::salary() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Job.salary)
  return _internal_salary();
}
inline void Job::_internal_set_salary(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.salary_ = value;
}
inline void Job::set_salary(double value) {
  _internal_set_salary(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.Job.salary)
}

// -------------------------------------------------------------------

// Goods

// string type = 1 [json_name = "type"];
inline void Goods::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Goods::type() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Goods.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Goods::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.economy.v1.Goods.type)
}
inline std::string* Goods::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:city.economy.v1.Goods.type)
  return _s;
}
inline const std::string& Goods::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Goods::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Goods::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Goods::release_type() {
  // @@protoc_insertion_point(field_release:city.economy.v1.Goods.type)
  return _impl_.type_.Release();
}
inline void Goods::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.economy.v1.Goods.type)
}

// string name = 2 [json_name = "name"];
inline void Goods::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Goods::name() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Goods.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Goods::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.economy.v1.Goods.name)
}
inline std::string* Goods::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:city.economy.v1.Goods.name)
  return _s;
}
inline const std::string& Goods::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Goods::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Goods::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Goods::release_name() {
  // @@protoc_insertion_point(field_release:city.economy.v1.Goods.name)
  return _impl_.name_.Release();
}
inline void Goods::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.economy.v1.Goods.name)
}

// int32 count = 3 [json_name = "count"];
inline void Goods::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t Goods::_internal_count() const {
  return _impl_.count_;
}
inline int32_t Goods::count() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Goods.count)
  return _internal_count();
}
inline void Goods::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void Goods::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.Goods.count)
}

// optional double price = 4 [json_name = "price"];
inline bool Goods::_internal_has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Goods::has_price() const {
  return _internal_has_price();
}
inline void Goods::clear_price() {
  _impl_.price_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Goods::_internal_price() const {
  return _impl_.price_;
}
inline double Goods::price() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Goods.price)
  return _internal_price();
}
inline void Goods::_internal_set_price(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.price_ = value;
}
inline void Goods::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.Goods.price)
}

// -------------------------------------------------------------------

// Org

// int32 id = 1 [json_name = "id"];
inline void Org::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Org::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Org::id() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Org.id)
  return _internal_id();
}
inline void Org::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Org::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.Org.id)
}

// int32 poi_id = 2 [json_name = "poiId"];
inline void Org::clear_poi_id() {
  _impl_.poi_id_ = 0;
}
inline int32_t Org::_internal_poi_id() const {
  return _impl_.poi_id_;
}
inline int32_t Org::poi_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Org.poi_id)
  return _internal_poi_id();
}
inline void Org::_internal_set_poi_id(int32_t value) {
  
  _impl_.poi_id_ = value;
}
inline void Org::set_poi_id(int32_t value) {
  _internal_set_poi_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.Org.poi_id)
}

// repeated .city.economy.v1.Employee employees = 3 [json_name = "employees"];
inline int Org::_internal_employees_size() const {
  return _impl_.employees_.size();
}
inline int Org::employees_size() const {
  return _internal_employees_size();
}
inline void Org::clear_employees() {
  _impl_.employees_.Clear();
}
inline ::city::economy::v1::Employee* Org::mutable_employees(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.Org.employees)
  return _impl_.employees_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Employee >*
Org::mutable_employees() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.Org.employees)
  return &_impl_.employees_;
}
inline const ::city::economy::v1::Employee& Org::_internal_employees(int index) const {
  return _impl_.employees_.Get(index);
}
inline const ::city::economy::v1::Employee& Org::employees(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Org.employees)
  return _internal_employees(index);
}
inline ::city::economy::v1::Employee* Org::_internal_add_employees() {
  return _impl_.employees_.Add();
}
inline ::city::economy::v1::Employee* Org::add_employees() {
  ::city::economy::v1::Employee* _add = _internal_add_employees();
  // @@protoc_insertion_point(field_add:city.economy.v1.Org.employees)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Employee >&
Org::employees() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.Org.employees)
  return _impl_.employees_;
}

// repeated .city.economy.v1.Job jobs = 4 [json_name = "jobs"];
inline int Org::_internal_jobs_size() const {
  return _impl_.jobs_.size();
}
inline int Org::jobs_size() const {
  return _internal_jobs_size();
}
inline void Org::clear_jobs() {
  _impl_.jobs_.Clear();
}
inline ::city::economy::v1::Job* Org::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.Org.jobs)
  return _impl_.jobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Job >*
Org::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.Org.jobs)
  return &_impl_.jobs_;
}
inline const ::city::economy::v1::Job& Org::_internal_jobs(int index) const {
  return _impl_.jobs_.Get(index);
}
inline const ::city::economy::v1::Job& Org::jobs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Org.jobs)
  return _internal_jobs(index);
}
inline ::city::economy::v1::Job* Org::_internal_add_jobs() {
  return _impl_.jobs_.Add();
}
inline ::city::economy::v1::Job* Org::add_jobs() {
  ::city::economy::v1::Job* _add = _internal_add_jobs();
  // @@protoc_insertion_point(field_add:city.economy.v1.Org.jobs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Job >&
Org::jobs() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.Org.jobs)
  return _impl_.jobs_;
}

// double money = 5 [json_name = "money"];
inline void Org::clear_money() {
  _impl_.money_ = 0;
}
inline double Org::_internal_money() const {
  return _impl_.money_;
}
inline double Org::money() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Org.money)
  return _internal_money();
}
inline void Org::_internal_set_money(double value) {
  
  _impl_.money_ = value;
}
inline void Org::set_money(double value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.Org.money)
}

// repeated .city.economy.v1.Goods goods = 6 [json_name = "goods"];
inline int Org::_internal_goods_size() const {
  return _impl_.goods_.size();
}
inline int Org::goods_size() const {
  return _internal_goods_size();
}
inline void Org::clear_goods() {
  _impl_.goods_.Clear();
}
inline ::city::economy::v1::Goods* Org::mutable_goods(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.Org.goods)
  return _impl_.goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Goods >*
Org::mutable_goods() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.Org.goods)
  return &_impl_.goods_;
}
inline const ::city::economy::v1::Goods& Org::_internal_goods(int index) const {
  return _impl_.goods_.Get(index);
}
inline const ::city::economy::v1::Goods& Org::goods(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Org.goods)
  return _internal_goods(index);
}
inline ::city::economy::v1::Goods* Org::_internal_add_goods() {
  return _impl_.goods_.Add();
}
inline ::city::economy::v1::Goods* Org::add_goods() {
  ::city::economy::v1::Goods* _add = _internal_add_goods();
  // @@protoc_insertion_point(field_add:city.economy.v1.Org.goods)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Goods >&
Org::goods() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.Org.goods)
  return _impl_.goods_;
}

// repeated string functions = 7 [json_name = "functions"];
inline int Org::_internal_functions_size() const {
  return _impl_.functions_.size();
}
inline int Org::functions_size() const {
  return _internal_functions_size();
}
inline void Org::clear_functions() {
  _impl_.functions_.Clear();
}
inline std::string* Org::add_functions() {
  std::string* _s = _internal_add_functions();
  // @@protoc_insertion_point(field_add_mutable:city.economy.v1.Org.functions)
  return _s;
}
inline const std::string& Org::_internal_functions(int index) const {
  return _impl_.functions_.Get(index);
}
inline const std::string& Org::functions(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Org.functions)
  return _internal_functions(index);
}
inline std::string* Org::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.Org.functions)
  return _impl_.functions_.Mutable(index);
}
inline void Org::set_functions(int index, const std::string& value) {
  _impl_.functions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.Org.functions)
}
inline void Org::set_functions(int index, std::string&& value) {
  _impl_.functions_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:city.economy.v1.Org.functions)
}
inline void Org::set_functions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.functions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:city.economy.v1.Org.functions)
}
inline void Org::set_functions(int index, const char* value, size_t size) {
  _impl_.functions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:city.economy.v1.Org.functions)
}
inline std::string* Org::_internal_add_functions() {
  return _impl_.functions_.Add();
}
inline void Org::add_functions(const std::string& value) {
  _impl_.functions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:city.economy.v1.Org.functions)
}
inline void Org::add_functions(std::string&& value) {
  _impl_.functions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:city.economy.v1.Org.functions)
}
inline void Org::add_functions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.functions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:city.economy.v1.Org.functions)
}
inline void Org::add_functions(const char* value, size_t size) {
  _impl_.functions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:city.economy.v1.Org.functions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Org::functions() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.Org.functions)
  return _impl_.functions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Org::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.Org.functions)
  return &_impl_.functions_;
}

// -------------------------------------------------------------------

// Economy

// repeated .city.economy.v1.Person persons = 1 [json_name = "persons"];
inline int Economy::_internal_persons_size() const {
  return _impl_.persons_.size();
}
inline int Economy::persons_size() const {
  return _internal_persons_size();
}
inline void Economy::clear_persons() {
  _impl_.persons_.Clear();
}
inline ::city::economy::v1::Person* Economy::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.Economy.persons)
  return _impl_.persons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Person >*
Economy::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.Economy.persons)
  return &_impl_.persons_;
}
inline const ::city::economy::v1::Person& Economy::_internal_persons(int index) const {
  return _impl_.persons_.Get(index);
}
inline const ::city::economy::v1::Person& Economy::persons(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Economy.persons)
  return _internal_persons(index);
}
inline ::city::economy::v1::Person* Economy::_internal_add_persons() {
  return _impl_.persons_.Add();
}
inline ::city::economy::v1::Person* Economy::add_persons() {
  ::city::economy::v1::Person* _add = _internal_add_persons();
  // @@protoc_insertion_point(field_add:city.economy.v1.Economy.persons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Person >&
Economy::persons() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.Economy.persons)
  return _impl_.persons_;
}

// repeated .city.economy.v1.Org orgs = 2 [json_name = "orgs"];
inline int Economy::_internal_orgs_size() const {
  return _impl_.orgs_.size();
}
inline int Economy::orgs_size() const {
  return _internal_orgs_size();
}
inline void Economy::clear_orgs() {
  _impl_.orgs_.Clear();
}
inline ::city::economy::v1::Org* Economy::mutable_orgs(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.Economy.orgs)
  return _impl_.orgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >*
Economy::mutable_orgs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.Economy.orgs)
  return &_impl_.orgs_;
}
inline const ::city::economy::v1::Org& Economy::_internal_orgs(int index) const {
  return _impl_.orgs_.Get(index);
}
inline const ::city::economy::v1::Org& Economy::orgs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.Economy.orgs)
  return _internal_orgs(index);
}
inline ::city::economy::v1::Org* Economy::_internal_add_orgs() {
  return _impl_.orgs_.Add();
}
inline ::city::economy::v1::Org* Economy::add_orgs() {
  ::city::economy::v1::Org* _add = _internal_add_orgs();
  // @@protoc_insertion_point(field_add:city.economy.v1.Economy.orgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >&
Economy::orgs() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.Economy.orgs)
  return _impl_.orgs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace economy
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv1_2feconomy_2eproto
