// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/economy/v1/org_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv1_2forg_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv1_2forg_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "city/economy/v1/economy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2feconomy_2fv1_2forg_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2feconomy_2fv1_2forg_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2feconomy_2fv1_2forg_5fservice_2eproto;
namespace city {
namespace economy {
namespace v1 {
class GetOrgRequest;
struct GetOrgRequestDefaultTypeInternal;
extern GetOrgRequestDefaultTypeInternal _GetOrgRequest_default_instance_;
class GetOrgResponse;
struct GetOrgResponseDefaultTypeInternal;
extern GetOrgResponseDefaultTypeInternal _GetOrgResponse_default_instance_;
class UpdateOrgEmployeeRequest;
struct UpdateOrgEmployeeRequestDefaultTypeInternal;
extern UpdateOrgEmployeeRequestDefaultTypeInternal _UpdateOrgEmployeeRequest_default_instance_;
class UpdateOrgEmployeeRequestItem;
struct UpdateOrgEmployeeRequestItemDefaultTypeInternal;
extern UpdateOrgEmployeeRequestItemDefaultTypeInternal _UpdateOrgEmployeeRequestItem_default_instance_;
class UpdateOrgEmployeeResponse;
struct UpdateOrgEmployeeResponseDefaultTypeInternal;
extern UpdateOrgEmployeeResponseDefaultTypeInternal _UpdateOrgEmployeeResponse_default_instance_;
class UpdateOrgGoodsRequest;
struct UpdateOrgGoodsRequestDefaultTypeInternal;
extern UpdateOrgGoodsRequestDefaultTypeInternal _UpdateOrgGoodsRequest_default_instance_;
class UpdateOrgGoodsRequestItem;
struct UpdateOrgGoodsRequestItemDefaultTypeInternal;
extern UpdateOrgGoodsRequestItemDefaultTypeInternal _UpdateOrgGoodsRequestItem_default_instance_;
class UpdateOrgGoodsResponse;
struct UpdateOrgGoodsResponseDefaultTypeInternal;
extern UpdateOrgGoodsResponseDefaultTypeInternal _UpdateOrgGoodsResponse_default_instance_;
class UpdateOrgJobRequest;
struct UpdateOrgJobRequestDefaultTypeInternal;
extern UpdateOrgJobRequestDefaultTypeInternal _UpdateOrgJobRequest_default_instance_;
class UpdateOrgJobRequestItem;
struct UpdateOrgJobRequestItemDefaultTypeInternal;
extern UpdateOrgJobRequestItemDefaultTypeInternal _UpdateOrgJobRequestItem_default_instance_;
class UpdateOrgJobResponse;
struct UpdateOrgJobResponseDefaultTypeInternal;
extern UpdateOrgJobResponseDefaultTypeInternal _UpdateOrgJobResponse_default_instance_;
class UpdateOrgMoneyRequest;
struct UpdateOrgMoneyRequestDefaultTypeInternal;
extern UpdateOrgMoneyRequestDefaultTypeInternal _UpdateOrgMoneyRequest_default_instance_;
class UpdateOrgMoneyRequestItem;
struct UpdateOrgMoneyRequestItemDefaultTypeInternal;
extern UpdateOrgMoneyRequestItemDefaultTypeInternal _UpdateOrgMoneyRequestItem_default_instance_;
class UpdateOrgMoneyResponse;
struct UpdateOrgMoneyResponseDefaultTypeInternal;
extern UpdateOrgMoneyResponseDefaultTypeInternal _UpdateOrgMoneyResponse_default_instance_;
}  // namespace v1
}  // namespace economy
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::economy::v1::GetOrgRequest* Arena::CreateMaybeMessage<::city::economy::v1::GetOrgRequest>(Arena*);
template<> ::city::economy::v1::GetOrgResponse* Arena::CreateMaybeMessage<::city::economy::v1::GetOrgResponse>(Arena*);
template<> ::city::economy::v1::UpdateOrgEmployeeRequest* Arena::CreateMaybeMessage<::city::economy::v1::UpdateOrgEmployeeRequest>(Arena*);
template<> ::city::economy::v1::UpdateOrgEmployeeRequestItem* Arena::CreateMaybeMessage<::city::economy::v1::UpdateOrgEmployeeRequestItem>(Arena*);
template<> ::city::economy::v1::UpdateOrgEmployeeResponse* Arena::CreateMaybeMessage<::city::economy::v1::UpdateOrgEmployeeResponse>(Arena*);
template<> ::city::economy::v1::UpdateOrgGoodsRequest* Arena::CreateMaybeMessage<::city::economy::v1::UpdateOrgGoodsRequest>(Arena*);
template<> ::city::economy::v1::UpdateOrgGoodsRequestItem* Arena::CreateMaybeMessage<::city::economy::v1::UpdateOrgGoodsRequestItem>(Arena*);
template<> ::city::economy::v1::UpdateOrgGoodsResponse* Arena::CreateMaybeMessage<::city::economy::v1::UpdateOrgGoodsResponse>(Arena*);
template<> ::city::economy::v1::UpdateOrgJobRequest* Arena::CreateMaybeMessage<::city::economy::v1::UpdateOrgJobRequest>(Arena*);
template<> ::city::economy::v1::UpdateOrgJobRequestItem* Arena::CreateMaybeMessage<::city::economy::v1::UpdateOrgJobRequestItem>(Arena*);
template<> ::city::economy::v1::UpdateOrgJobResponse* Arena::CreateMaybeMessage<::city::economy::v1::UpdateOrgJobResponse>(Arena*);
template<> ::city::economy::v1::UpdateOrgMoneyRequest* Arena::CreateMaybeMessage<::city::economy::v1::UpdateOrgMoneyRequest>(Arena*);
template<> ::city::economy::v1::UpdateOrgMoneyRequestItem* Arena::CreateMaybeMessage<::city::economy::v1::UpdateOrgMoneyRequestItem>(Arena*);
template<> ::city::economy::v1::UpdateOrgMoneyResponse* Arena::CreateMaybeMessage<::city::economy::v1::UpdateOrgMoneyResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace economy {
namespace v1 {

// ===================================================================

class GetOrgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.GetOrgRequest) */ {
 public:
  inline GetOrgRequest() : GetOrgRequest(nullptr) {}
  ~GetOrgRequest() override;
  explicit PROTOBUF_CONSTEXPR GetOrgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrgRequest(const GetOrgRequest& from);
  GetOrgRequest(GetOrgRequest&& from) noexcept
    : GetOrgRequest() {
    *this = ::std::move(from);
  }

  inline GetOrgRequest& operator=(const GetOrgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrgRequest& operator=(GetOrgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrgRequest* internal_default_instance() {
    return reinterpret_cast<const GetOrgRequest*>(
               &_GetOrgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetOrgRequest& a, GetOrgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrgRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrgRequest& from) {
    GetOrgRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrgRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.GetOrgRequest";
  }
  protected:
  explicit GetOrgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdsFieldNumber = 1,
  };
  // repeated int32 org_ids = 1 [json_name = "orgIds"];
  int org_ids_size() const;
  private:
  int _internal_org_ids_size() const;
  public:
  void clear_org_ids();
  private:
  int32_t _internal_org_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_org_ids() const;
  void _internal_add_org_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_org_ids();
  public:
  int32_t org_ids(int index) const;
  void set_org_ids(int index, int32_t value);
  void add_org_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      org_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_org_ids();

  // @@protoc_insertion_point(class_scope:city.economy.v1.GetOrgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > org_ids_;
    mutable std::atomic<int> _org_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOrgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.GetOrgResponse) */ {
 public:
  inline GetOrgResponse() : GetOrgResponse(nullptr) {}
  ~GetOrgResponse() override;
  explicit PROTOBUF_CONSTEXPR GetOrgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrgResponse(const GetOrgResponse& from);
  GetOrgResponse(GetOrgResponse&& from) noexcept
    : GetOrgResponse() {
    *this = ::std::move(from);
  }

  inline GetOrgResponse& operator=(const GetOrgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrgResponse& operator=(GetOrgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrgResponse* internal_default_instance() {
    return reinterpret_cast<const GetOrgResponse*>(
               &_GetOrgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetOrgResponse& a, GetOrgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrgResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrgResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrgResponse& from) {
    GetOrgResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrgResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.GetOrgResponse";
  }
  protected:
  explicit GetOrgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgsFieldNumber = 1,
  };
  // repeated .city.economy.v1.Org orgs = 1 [json_name = "orgs"];
  int orgs_size() const;
  private:
  int _internal_orgs_size() const;
  public:
  void clear_orgs();
  ::city::economy::v1::Org* mutable_orgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >*
      mutable_orgs();
  private:
  const ::city::economy::v1::Org& _internal_orgs(int index) const;
  ::city::economy::v1::Org* _internal_add_orgs();
  public:
  const ::city::economy::v1::Org& orgs(int index) const;
  ::city::economy::v1::Org* add_orgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >&
      orgs() const;

  // @@protoc_insertion_point(class_scope:city.economy.v1.GetOrgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org > orgs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgMoneyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.UpdateOrgMoneyRequest) */ {
 public:
  inline UpdateOrgMoneyRequest() : UpdateOrgMoneyRequest(nullptr) {}
  ~UpdateOrgMoneyRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateOrgMoneyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgMoneyRequest(const UpdateOrgMoneyRequest& from);
  UpdateOrgMoneyRequest(UpdateOrgMoneyRequest&& from) noexcept
    : UpdateOrgMoneyRequest() {
    *this = ::std::move(from);
  }

  inline UpdateOrgMoneyRequest& operator=(const UpdateOrgMoneyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgMoneyRequest& operator=(UpdateOrgMoneyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgMoneyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgMoneyRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgMoneyRequest*>(
               &_UpdateOrgMoneyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateOrgMoneyRequest& a, UpdateOrgMoneyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgMoneyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgMoneyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgMoneyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgMoneyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrgMoneyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateOrgMoneyRequest& from) {
    UpdateOrgMoneyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrgMoneyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.UpdateOrgMoneyRequest";
  }
  protected:
  explicit UpdateOrgMoneyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .city.economy.v1.UpdateOrgMoneyRequestItem items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::city::economy::v1::UpdateOrgMoneyRequestItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgMoneyRequestItem >*
      mutable_items();
  private:
  const ::city::economy::v1::UpdateOrgMoneyRequestItem& _internal_items(int index) const;
  ::city::economy::v1::UpdateOrgMoneyRequestItem* _internal_add_items();
  public:
  const ::city::economy::v1::UpdateOrgMoneyRequestItem& items(int index) const;
  ::city::economy::v1::UpdateOrgMoneyRequestItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgMoneyRequestItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:city.economy.v1.UpdateOrgMoneyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgMoneyRequestItem > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgMoneyRequestItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.UpdateOrgMoneyRequestItem) */ {
 public:
  inline UpdateOrgMoneyRequestItem() : UpdateOrgMoneyRequestItem(nullptr) {}
  ~UpdateOrgMoneyRequestItem() override;
  explicit PROTOBUF_CONSTEXPR UpdateOrgMoneyRequestItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgMoneyRequestItem(const UpdateOrgMoneyRequestItem& from);
  UpdateOrgMoneyRequestItem(UpdateOrgMoneyRequestItem&& from) noexcept
    : UpdateOrgMoneyRequestItem() {
    *this = ::std::move(from);
  }

  inline UpdateOrgMoneyRequestItem& operator=(const UpdateOrgMoneyRequestItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgMoneyRequestItem& operator=(UpdateOrgMoneyRequestItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgMoneyRequestItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgMoneyRequestItem* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgMoneyRequestItem*>(
               &_UpdateOrgMoneyRequestItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateOrgMoneyRequestItem& a, UpdateOrgMoneyRequestItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgMoneyRequestItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgMoneyRequestItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgMoneyRequestItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgMoneyRequestItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrgMoneyRequestItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateOrgMoneyRequestItem& from) {
    UpdateOrgMoneyRequestItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrgMoneyRequestItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.UpdateOrgMoneyRequestItem";
  }
  protected:
  explicit UpdateOrgMoneyRequestItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoneyFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // double money = 2 [json_name = "money"];
  void clear_money();
  double money() const;
  void set_money(double value);
  private:
  double _internal_money() const;
  void _internal_set_money(double value);
  public:

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v1.UpdateOrgMoneyRequestItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double money_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgMoneyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.UpdateOrgMoneyResponse) */ {
 public:
  inline UpdateOrgMoneyResponse() : UpdateOrgMoneyResponse(nullptr) {}
  ~UpdateOrgMoneyResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateOrgMoneyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgMoneyResponse(const UpdateOrgMoneyResponse& from);
  UpdateOrgMoneyResponse(UpdateOrgMoneyResponse&& from) noexcept
    : UpdateOrgMoneyResponse() {
    *this = ::std::move(from);
  }

  inline UpdateOrgMoneyResponse& operator=(const UpdateOrgMoneyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgMoneyResponse& operator=(UpdateOrgMoneyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgMoneyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgMoneyResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgMoneyResponse*>(
               &_UpdateOrgMoneyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateOrgMoneyResponse& a, UpdateOrgMoneyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgMoneyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgMoneyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgMoneyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgMoneyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrgMoneyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateOrgMoneyResponse& from) {
    UpdateOrgMoneyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrgMoneyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.UpdateOrgMoneyResponse";
  }
  protected:
  explicit UpdateOrgMoneyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgsFieldNumber = 1,
  };
  // repeated .city.economy.v1.Org orgs = 1 [json_name = "orgs"];
  int orgs_size() const;
  private:
  int _internal_orgs_size() const;
  public:
  void clear_orgs();
  ::city::economy::v1::Org* mutable_orgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >*
      mutable_orgs();
  private:
  const ::city::economy::v1::Org& _internal_orgs(int index) const;
  ::city::economy::v1::Org* _internal_add_orgs();
  public:
  const ::city::economy::v1::Org& orgs(int index) const;
  ::city::economy::v1::Org* add_orgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >&
      orgs() const;

  // @@protoc_insertion_point(class_scope:city.economy.v1.UpdateOrgMoneyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org > orgs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgGoodsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.UpdateOrgGoodsRequest) */ {
 public:
  inline UpdateOrgGoodsRequest() : UpdateOrgGoodsRequest(nullptr) {}
  ~UpdateOrgGoodsRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateOrgGoodsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgGoodsRequest(const UpdateOrgGoodsRequest& from);
  UpdateOrgGoodsRequest(UpdateOrgGoodsRequest&& from) noexcept
    : UpdateOrgGoodsRequest() {
    *this = ::std::move(from);
  }

  inline UpdateOrgGoodsRequest& operator=(const UpdateOrgGoodsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgGoodsRequest& operator=(UpdateOrgGoodsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgGoodsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgGoodsRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgGoodsRequest*>(
               &_UpdateOrgGoodsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateOrgGoodsRequest& a, UpdateOrgGoodsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgGoodsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgGoodsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgGoodsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgGoodsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrgGoodsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateOrgGoodsRequest& from) {
    UpdateOrgGoodsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrgGoodsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.UpdateOrgGoodsRequest";
  }
  protected:
  explicit UpdateOrgGoodsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .city.economy.v1.UpdateOrgGoodsRequestItem items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::city::economy::v1::UpdateOrgGoodsRequestItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgGoodsRequestItem >*
      mutable_items();
  private:
  const ::city::economy::v1::UpdateOrgGoodsRequestItem& _internal_items(int index) const;
  ::city::economy::v1::UpdateOrgGoodsRequestItem* _internal_add_items();
  public:
  const ::city::economy::v1::UpdateOrgGoodsRequestItem& items(int index) const;
  ::city::economy::v1::UpdateOrgGoodsRequestItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgGoodsRequestItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:city.economy.v1.UpdateOrgGoodsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgGoodsRequestItem > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgGoodsRequestItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.UpdateOrgGoodsRequestItem) */ {
 public:
  inline UpdateOrgGoodsRequestItem() : UpdateOrgGoodsRequestItem(nullptr) {}
  ~UpdateOrgGoodsRequestItem() override;
  explicit PROTOBUF_CONSTEXPR UpdateOrgGoodsRequestItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgGoodsRequestItem(const UpdateOrgGoodsRequestItem& from);
  UpdateOrgGoodsRequestItem(UpdateOrgGoodsRequestItem&& from) noexcept
    : UpdateOrgGoodsRequestItem() {
    *this = ::std::move(from);
  }

  inline UpdateOrgGoodsRequestItem& operator=(const UpdateOrgGoodsRequestItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgGoodsRequestItem& operator=(UpdateOrgGoodsRequestItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgGoodsRequestItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgGoodsRequestItem* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgGoodsRequestItem*>(
               &_UpdateOrgGoodsRequestItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateOrgGoodsRequestItem& a, UpdateOrgGoodsRequestItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgGoodsRequestItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgGoodsRequestItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgGoodsRequestItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgGoodsRequestItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrgGoodsRequestItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateOrgGoodsRequestItem& from) {
    UpdateOrgGoodsRequestItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrgGoodsRequestItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.UpdateOrgGoodsRequestItem";
  }
  protected:
  explicit UpdateOrgGoodsRequestItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated .city.economy.v1.Goods goods = 2 [json_name = "goods"];
  int goods_size() const;
  private:
  int _internal_goods_size() const;
  public:
  void clear_goods();
  ::city::economy::v1::Goods* mutable_goods(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Goods >*
      mutable_goods();
  private:
  const ::city::economy::v1::Goods& _internal_goods(int index) const;
  ::city::economy::v1::Goods* _internal_add_goods();
  public:
  const ::city::economy::v1::Goods& goods(int index) const;
  ::city::economy::v1::Goods* add_goods();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Goods >&
      goods() const;

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v1.UpdateOrgGoodsRequestItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Goods > goods_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgGoodsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.UpdateOrgGoodsResponse) */ {
 public:
  inline UpdateOrgGoodsResponse() : UpdateOrgGoodsResponse(nullptr) {}
  ~UpdateOrgGoodsResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateOrgGoodsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgGoodsResponse(const UpdateOrgGoodsResponse& from);
  UpdateOrgGoodsResponse(UpdateOrgGoodsResponse&& from) noexcept
    : UpdateOrgGoodsResponse() {
    *this = ::std::move(from);
  }

  inline UpdateOrgGoodsResponse& operator=(const UpdateOrgGoodsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgGoodsResponse& operator=(UpdateOrgGoodsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgGoodsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgGoodsResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgGoodsResponse*>(
               &_UpdateOrgGoodsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateOrgGoodsResponse& a, UpdateOrgGoodsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgGoodsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgGoodsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgGoodsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgGoodsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrgGoodsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateOrgGoodsResponse& from) {
    UpdateOrgGoodsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrgGoodsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.UpdateOrgGoodsResponse";
  }
  protected:
  explicit UpdateOrgGoodsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgsFieldNumber = 1,
  };
  // repeated .city.economy.v1.Org orgs = 1 [json_name = "orgs"];
  int orgs_size() const;
  private:
  int _internal_orgs_size() const;
  public:
  void clear_orgs();
  ::city::economy::v1::Org* mutable_orgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >*
      mutable_orgs();
  private:
  const ::city::economy::v1::Org& _internal_orgs(int index) const;
  ::city::economy::v1::Org* _internal_add_orgs();
  public:
  const ::city::economy::v1::Org& orgs(int index) const;
  ::city::economy::v1::Org* add_orgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >&
      orgs() const;

  // @@protoc_insertion_point(class_scope:city.economy.v1.UpdateOrgGoodsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org > orgs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgEmployeeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.UpdateOrgEmployeeRequest) */ {
 public:
  inline UpdateOrgEmployeeRequest() : UpdateOrgEmployeeRequest(nullptr) {}
  ~UpdateOrgEmployeeRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateOrgEmployeeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgEmployeeRequest(const UpdateOrgEmployeeRequest& from);
  UpdateOrgEmployeeRequest(UpdateOrgEmployeeRequest&& from) noexcept
    : UpdateOrgEmployeeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateOrgEmployeeRequest& operator=(const UpdateOrgEmployeeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgEmployeeRequest& operator=(UpdateOrgEmployeeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgEmployeeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgEmployeeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgEmployeeRequest*>(
               &_UpdateOrgEmployeeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateOrgEmployeeRequest& a, UpdateOrgEmployeeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgEmployeeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgEmployeeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgEmployeeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgEmployeeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrgEmployeeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateOrgEmployeeRequest& from) {
    UpdateOrgEmployeeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrgEmployeeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.UpdateOrgEmployeeRequest";
  }
  protected:
  explicit UpdateOrgEmployeeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .city.economy.v1.UpdateOrgEmployeeRequestItem items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::city::economy::v1::UpdateOrgEmployeeRequestItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgEmployeeRequestItem >*
      mutable_items();
  private:
  const ::city::economy::v1::UpdateOrgEmployeeRequestItem& _internal_items(int index) const;
  ::city::economy::v1::UpdateOrgEmployeeRequestItem* _internal_add_items();
  public:
  const ::city::economy::v1::UpdateOrgEmployeeRequestItem& items(int index) const;
  ::city::economy::v1::UpdateOrgEmployeeRequestItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgEmployeeRequestItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:city.economy.v1.UpdateOrgEmployeeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgEmployeeRequestItem > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgEmployeeRequestItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.UpdateOrgEmployeeRequestItem) */ {
 public:
  inline UpdateOrgEmployeeRequestItem() : UpdateOrgEmployeeRequestItem(nullptr) {}
  ~UpdateOrgEmployeeRequestItem() override;
  explicit PROTOBUF_CONSTEXPR UpdateOrgEmployeeRequestItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgEmployeeRequestItem(const UpdateOrgEmployeeRequestItem& from);
  UpdateOrgEmployeeRequestItem(UpdateOrgEmployeeRequestItem&& from) noexcept
    : UpdateOrgEmployeeRequestItem() {
    *this = ::std::move(from);
  }

  inline UpdateOrgEmployeeRequestItem& operator=(const UpdateOrgEmployeeRequestItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgEmployeeRequestItem& operator=(UpdateOrgEmployeeRequestItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgEmployeeRequestItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgEmployeeRequestItem* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgEmployeeRequestItem*>(
               &_UpdateOrgEmployeeRequestItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateOrgEmployeeRequestItem& a, UpdateOrgEmployeeRequestItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgEmployeeRequestItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgEmployeeRequestItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgEmployeeRequestItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgEmployeeRequestItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrgEmployeeRequestItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateOrgEmployeeRequestItem& from) {
    UpdateOrgEmployeeRequestItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrgEmployeeRequestItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.UpdateOrgEmployeeRequestItem";
  }
  protected:
  explicit UpdateOrgEmployeeRequestItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddsFieldNumber = 2,
    kDelsFieldNumber = 3,
    kUpdatesFieldNumber = 4,
    kOrgIdFieldNumber = 1,
  };
  // repeated .city.economy.v1.Employee adds = 2 [json_name = "adds"];
  int adds_size() const;
  private:
  int _internal_adds_size() const;
  public:
  void clear_adds();
  ::city::economy::v1::Employee* mutable_adds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Employee >*
      mutable_adds();
  private:
  const ::city::economy::v1::Employee& _internal_adds(int index) const;
  ::city::economy::v1::Employee* _internal_add_adds();
  public:
  const ::city::economy::v1::Employee& adds(int index) const;
  ::city::economy::v1::Employee* add_adds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Employee >&
      adds() const;

  // repeated int32 dels = 3 [json_name = "dels"];
  int dels_size() const;
  private:
  int _internal_dels_size() const;
  public:
  void clear_dels();
  private:
  int32_t _internal_dels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_dels() const;
  void _internal_add_dels(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_dels();
  public:
  int32_t dels(int index) const;
  void set_dels(int index, int32_t value);
  void add_dels(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      dels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_dels();

  // repeated .city.economy.v1.Employee updates = 4 [json_name = "updates"];
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::city::economy::v1::Employee* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Employee >*
      mutable_updates();
  private:
  const ::city::economy::v1::Employee& _internal_updates(int index) const;
  ::city::economy::v1::Employee* _internal_add_updates();
  public:
  const ::city::economy::v1::Employee& updates(int index) const;
  ::city::economy::v1::Employee* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Employee >&
      updates() const;

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v1.UpdateOrgEmployeeRequestItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Employee > adds_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > dels_;
    mutable std::atomic<int> _dels_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Employee > updates_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgEmployeeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.UpdateOrgEmployeeResponse) */ {
 public:
  inline UpdateOrgEmployeeResponse() : UpdateOrgEmployeeResponse(nullptr) {}
  ~UpdateOrgEmployeeResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateOrgEmployeeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgEmployeeResponse(const UpdateOrgEmployeeResponse& from);
  UpdateOrgEmployeeResponse(UpdateOrgEmployeeResponse&& from) noexcept
    : UpdateOrgEmployeeResponse() {
    *this = ::std::move(from);
  }

  inline UpdateOrgEmployeeResponse& operator=(const UpdateOrgEmployeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgEmployeeResponse& operator=(UpdateOrgEmployeeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgEmployeeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgEmployeeResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgEmployeeResponse*>(
               &_UpdateOrgEmployeeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UpdateOrgEmployeeResponse& a, UpdateOrgEmployeeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgEmployeeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgEmployeeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgEmployeeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgEmployeeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrgEmployeeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateOrgEmployeeResponse& from) {
    UpdateOrgEmployeeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrgEmployeeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.UpdateOrgEmployeeResponse";
  }
  protected:
  explicit UpdateOrgEmployeeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgsFieldNumber = 1,
  };
  // repeated .city.economy.v1.Org orgs = 1 [json_name = "orgs"];
  int orgs_size() const;
  private:
  int _internal_orgs_size() const;
  public:
  void clear_orgs();
  ::city::economy::v1::Org* mutable_orgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >*
      mutable_orgs();
  private:
  const ::city::economy::v1::Org& _internal_orgs(int index) const;
  ::city::economy::v1::Org* _internal_add_orgs();
  public:
  const ::city::economy::v1::Org& orgs(int index) const;
  ::city::economy::v1::Org* add_orgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >&
      orgs() const;

  // @@protoc_insertion_point(class_scope:city.economy.v1.UpdateOrgEmployeeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org > orgs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgJobRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.UpdateOrgJobRequest) */ {
 public:
  inline UpdateOrgJobRequest() : UpdateOrgJobRequest(nullptr) {}
  ~UpdateOrgJobRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateOrgJobRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgJobRequest(const UpdateOrgJobRequest& from);
  UpdateOrgJobRequest(UpdateOrgJobRequest&& from) noexcept
    : UpdateOrgJobRequest() {
    *this = ::std::move(from);
  }

  inline UpdateOrgJobRequest& operator=(const UpdateOrgJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgJobRequest& operator=(UpdateOrgJobRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgJobRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgJobRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgJobRequest*>(
               &_UpdateOrgJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UpdateOrgJobRequest& a, UpdateOrgJobRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgJobRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgJobRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgJobRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgJobRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrgJobRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateOrgJobRequest& from) {
    UpdateOrgJobRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrgJobRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.UpdateOrgJobRequest";
  }
  protected:
  explicit UpdateOrgJobRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .city.economy.v1.UpdateOrgJobRequestItem items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::city::economy::v1::UpdateOrgJobRequestItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgJobRequestItem >*
      mutable_items();
  private:
  const ::city::economy::v1::UpdateOrgJobRequestItem& _internal_items(int index) const;
  ::city::economy::v1::UpdateOrgJobRequestItem* _internal_add_items();
  public:
  const ::city::economy::v1::UpdateOrgJobRequestItem& items(int index) const;
  ::city::economy::v1::UpdateOrgJobRequestItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgJobRequestItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:city.economy.v1.UpdateOrgJobRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgJobRequestItem > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgJobRequestItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.UpdateOrgJobRequestItem) */ {
 public:
  inline UpdateOrgJobRequestItem() : UpdateOrgJobRequestItem(nullptr) {}
  ~UpdateOrgJobRequestItem() override;
  explicit PROTOBUF_CONSTEXPR UpdateOrgJobRequestItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgJobRequestItem(const UpdateOrgJobRequestItem& from);
  UpdateOrgJobRequestItem(UpdateOrgJobRequestItem&& from) noexcept
    : UpdateOrgJobRequestItem() {
    *this = ::std::move(from);
  }

  inline UpdateOrgJobRequestItem& operator=(const UpdateOrgJobRequestItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgJobRequestItem& operator=(UpdateOrgJobRequestItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgJobRequestItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgJobRequestItem* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgJobRequestItem*>(
               &_UpdateOrgJobRequestItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UpdateOrgJobRequestItem& a, UpdateOrgJobRequestItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgJobRequestItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgJobRequestItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgJobRequestItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgJobRequestItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrgJobRequestItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateOrgJobRequestItem& from) {
    UpdateOrgJobRequestItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrgJobRequestItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.UpdateOrgJobRequestItem";
  }
  protected:
  explicit UpdateOrgJobRequestItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobsFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated .city.economy.v1.Job jobs = 2 [json_name = "jobs"];
  int jobs_size() const;
  private:
  int _internal_jobs_size() const;
  public:
  void clear_jobs();
  ::city::economy::v1::Job* mutable_jobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Job >*
      mutable_jobs();
  private:
  const ::city::economy::v1::Job& _internal_jobs(int index) const;
  ::city::economy::v1::Job* _internal_add_jobs();
  public:
  const ::city::economy::v1::Job& jobs(int index) const;
  ::city::economy::v1::Job* add_jobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Job >&
      jobs() const;

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v1.UpdateOrgJobRequestItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Job > jobs_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgJobResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.UpdateOrgJobResponse) */ {
 public:
  inline UpdateOrgJobResponse() : UpdateOrgJobResponse(nullptr) {}
  ~UpdateOrgJobResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateOrgJobResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgJobResponse(const UpdateOrgJobResponse& from);
  UpdateOrgJobResponse(UpdateOrgJobResponse&& from) noexcept
    : UpdateOrgJobResponse() {
    *this = ::std::move(from);
  }

  inline UpdateOrgJobResponse& operator=(const UpdateOrgJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgJobResponse& operator=(UpdateOrgJobResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgJobResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgJobResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgJobResponse*>(
               &_UpdateOrgJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UpdateOrgJobResponse& a, UpdateOrgJobResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgJobResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgJobResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgJobResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgJobResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrgJobResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateOrgJobResponse& from) {
    UpdateOrgJobResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrgJobResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.UpdateOrgJobResponse";
  }
  protected:
  explicit UpdateOrgJobResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgsFieldNumber = 1,
  };
  // repeated .city.economy.v1.Org orgs = 1 [json_name = "orgs"];
  int orgs_size() const;
  private:
  int _internal_orgs_size() const;
  public:
  void clear_orgs();
  ::city::economy::v1::Org* mutable_orgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >*
      mutable_orgs();
  private:
  const ::city::economy::v1::Org& _internal_orgs(int index) const;
  ::city::economy::v1::Org* _internal_add_orgs();
  public:
  const ::city::economy::v1::Org& orgs(int index) const;
  ::city::economy::v1::Org* add_orgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >&
      orgs() const;

  // @@protoc_insertion_point(class_scope:city.economy.v1.UpdateOrgJobResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org > orgs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2forg_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetOrgRequest

// repeated int32 org_ids = 1 [json_name = "orgIds"];
inline int GetOrgRequest::_internal_org_ids_size() const {
  return _impl_.org_ids_.size();
}
inline int GetOrgRequest::org_ids_size() const {
  return _internal_org_ids_size();
}
inline void GetOrgRequest::clear_org_ids() {
  _impl_.org_ids_.Clear();
}
inline int32_t GetOrgRequest::_internal_org_ids(int index) const {
  return _impl_.org_ids_.Get(index);
}
inline int32_t GetOrgRequest::org_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.GetOrgRequest.org_ids)
  return _internal_org_ids(index);
}
inline void GetOrgRequest::set_org_ids(int index, int32_t value) {
  _impl_.org_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v1.GetOrgRequest.org_ids)
}
inline void GetOrgRequest::_internal_add_org_ids(int32_t value) {
  _impl_.org_ids_.Add(value);
}
inline void GetOrgRequest::add_org_ids(int32_t value) {
  _internal_add_org_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v1.GetOrgRequest.org_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetOrgRequest::_internal_org_ids() const {
  return _impl_.org_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetOrgRequest::org_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.GetOrgRequest.org_ids)
  return _internal_org_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetOrgRequest::_internal_mutable_org_ids() {
  return &_impl_.org_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetOrgRequest::mutable_org_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.GetOrgRequest.org_ids)
  return _internal_mutable_org_ids();
}

// -------------------------------------------------------------------

// GetOrgResponse

// repeated .city.economy.v1.Org orgs = 1 [json_name = "orgs"];
inline int GetOrgResponse::_internal_orgs_size() const {
  return _impl_.orgs_.size();
}
inline int GetOrgResponse::orgs_size() const {
  return _internal_orgs_size();
}
inline ::city::economy::v1::Org* GetOrgResponse::mutable_orgs(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.GetOrgResponse.orgs)
  return _impl_.orgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >*
GetOrgResponse::mutable_orgs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.GetOrgResponse.orgs)
  return &_impl_.orgs_;
}
inline const ::city::economy::v1::Org& GetOrgResponse::_internal_orgs(int index) const {
  return _impl_.orgs_.Get(index);
}
inline const ::city::economy::v1::Org& GetOrgResponse::orgs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.GetOrgResponse.orgs)
  return _internal_orgs(index);
}
inline ::city::economy::v1::Org* GetOrgResponse::_internal_add_orgs() {
  return _impl_.orgs_.Add();
}
inline ::city::economy::v1::Org* GetOrgResponse::add_orgs() {
  ::city::economy::v1::Org* _add = _internal_add_orgs();
  // @@protoc_insertion_point(field_add:city.economy.v1.GetOrgResponse.orgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >&
GetOrgResponse::orgs() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.GetOrgResponse.orgs)
  return _impl_.orgs_;
}

// -------------------------------------------------------------------

// UpdateOrgMoneyRequest

// repeated .city.economy.v1.UpdateOrgMoneyRequestItem items = 1 [json_name = "items"];
inline int UpdateOrgMoneyRequest::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int UpdateOrgMoneyRequest::items_size() const {
  return _internal_items_size();
}
inline void UpdateOrgMoneyRequest::clear_items() {
  _impl_.items_.Clear();
}
inline ::city::economy::v1::UpdateOrgMoneyRequestItem* UpdateOrgMoneyRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.UpdateOrgMoneyRequest.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgMoneyRequestItem >*
UpdateOrgMoneyRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.UpdateOrgMoneyRequest.items)
  return &_impl_.items_;
}
inline const ::city::economy::v1::UpdateOrgMoneyRequestItem& UpdateOrgMoneyRequest::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::city::economy::v1::UpdateOrgMoneyRequestItem& UpdateOrgMoneyRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgMoneyRequest.items)
  return _internal_items(index);
}
inline ::city::economy::v1::UpdateOrgMoneyRequestItem* UpdateOrgMoneyRequest::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::city::economy::v1::UpdateOrgMoneyRequestItem* UpdateOrgMoneyRequest::add_items() {
  ::city::economy::v1::UpdateOrgMoneyRequestItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:city.economy.v1.UpdateOrgMoneyRequest.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgMoneyRequestItem >&
UpdateOrgMoneyRequest::items() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.UpdateOrgMoneyRequest.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// UpdateOrgMoneyRequestItem

// int32 org_id = 1 [json_name = "orgId"];
inline void UpdateOrgMoneyRequestItem::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t UpdateOrgMoneyRequestItem::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t UpdateOrgMoneyRequestItem::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgMoneyRequestItem.org_id)
  return _internal_org_id();
}
inline void UpdateOrgMoneyRequestItem::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void UpdateOrgMoneyRequestItem::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.UpdateOrgMoneyRequestItem.org_id)
}

// double money = 2 [json_name = "money"];
inline void UpdateOrgMoneyRequestItem::clear_money() {
  _impl_.money_ = 0;
}
inline double UpdateOrgMoneyRequestItem::_internal_money() const {
  return _impl_.money_;
}
inline double UpdateOrgMoneyRequestItem::money() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgMoneyRequestItem.money)
  return _internal_money();
}
inline void UpdateOrgMoneyRequestItem::_internal_set_money(double value) {
  
  _impl_.money_ = value;
}
inline void UpdateOrgMoneyRequestItem::set_money(double value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.UpdateOrgMoneyRequestItem.money)
}

// -------------------------------------------------------------------

// UpdateOrgMoneyResponse

// repeated .city.economy.v1.Org orgs = 1 [json_name = "orgs"];
inline int UpdateOrgMoneyResponse::_internal_orgs_size() const {
  return _impl_.orgs_.size();
}
inline int UpdateOrgMoneyResponse::orgs_size() const {
  return _internal_orgs_size();
}
inline ::city::economy::v1::Org* UpdateOrgMoneyResponse::mutable_orgs(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.UpdateOrgMoneyResponse.orgs)
  return _impl_.orgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >*
UpdateOrgMoneyResponse::mutable_orgs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.UpdateOrgMoneyResponse.orgs)
  return &_impl_.orgs_;
}
inline const ::city::economy::v1::Org& UpdateOrgMoneyResponse::_internal_orgs(int index) const {
  return _impl_.orgs_.Get(index);
}
inline const ::city::economy::v1::Org& UpdateOrgMoneyResponse::orgs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgMoneyResponse.orgs)
  return _internal_orgs(index);
}
inline ::city::economy::v1::Org* UpdateOrgMoneyResponse::_internal_add_orgs() {
  return _impl_.orgs_.Add();
}
inline ::city::economy::v1::Org* UpdateOrgMoneyResponse::add_orgs() {
  ::city::economy::v1::Org* _add = _internal_add_orgs();
  // @@protoc_insertion_point(field_add:city.economy.v1.UpdateOrgMoneyResponse.orgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >&
UpdateOrgMoneyResponse::orgs() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.UpdateOrgMoneyResponse.orgs)
  return _impl_.orgs_;
}

// -------------------------------------------------------------------

// UpdateOrgGoodsRequest

// repeated .city.economy.v1.UpdateOrgGoodsRequestItem items = 1 [json_name = "items"];
inline int UpdateOrgGoodsRequest::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int UpdateOrgGoodsRequest::items_size() const {
  return _internal_items_size();
}
inline void UpdateOrgGoodsRequest::clear_items() {
  _impl_.items_.Clear();
}
inline ::city::economy::v1::UpdateOrgGoodsRequestItem* UpdateOrgGoodsRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.UpdateOrgGoodsRequest.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgGoodsRequestItem >*
UpdateOrgGoodsRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.UpdateOrgGoodsRequest.items)
  return &_impl_.items_;
}
inline const ::city::economy::v1::UpdateOrgGoodsRequestItem& UpdateOrgGoodsRequest::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::city::economy::v1::UpdateOrgGoodsRequestItem& UpdateOrgGoodsRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgGoodsRequest.items)
  return _internal_items(index);
}
inline ::city::economy::v1::UpdateOrgGoodsRequestItem* UpdateOrgGoodsRequest::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::city::economy::v1::UpdateOrgGoodsRequestItem* UpdateOrgGoodsRequest::add_items() {
  ::city::economy::v1::UpdateOrgGoodsRequestItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:city.economy.v1.UpdateOrgGoodsRequest.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgGoodsRequestItem >&
UpdateOrgGoodsRequest::items() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.UpdateOrgGoodsRequest.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// UpdateOrgGoodsRequestItem

// int32 org_id = 1 [json_name = "orgId"];
inline void UpdateOrgGoodsRequestItem::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t UpdateOrgGoodsRequestItem::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t UpdateOrgGoodsRequestItem::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgGoodsRequestItem.org_id)
  return _internal_org_id();
}
inline void UpdateOrgGoodsRequestItem::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void UpdateOrgGoodsRequestItem::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.UpdateOrgGoodsRequestItem.org_id)
}

// repeated .city.economy.v1.Goods goods = 2 [json_name = "goods"];
inline int UpdateOrgGoodsRequestItem::_internal_goods_size() const {
  return _impl_.goods_.size();
}
inline int UpdateOrgGoodsRequestItem::goods_size() const {
  return _internal_goods_size();
}
inline ::city::economy::v1::Goods* UpdateOrgGoodsRequestItem::mutable_goods(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.UpdateOrgGoodsRequestItem.goods)
  return _impl_.goods_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Goods >*
UpdateOrgGoodsRequestItem::mutable_goods() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.UpdateOrgGoodsRequestItem.goods)
  return &_impl_.goods_;
}
inline const ::city::economy::v1::Goods& UpdateOrgGoodsRequestItem::_internal_goods(int index) const {
  return _impl_.goods_.Get(index);
}
inline const ::city::economy::v1::Goods& UpdateOrgGoodsRequestItem::goods(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgGoodsRequestItem.goods)
  return _internal_goods(index);
}
inline ::city::economy::v1::Goods* UpdateOrgGoodsRequestItem::_internal_add_goods() {
  return _impl_.goods_.Add();
}
inline ::city::economy::v1::Goods* UpdateOrgGoodsRequestItem::add_goods() {
  ::city::economy::v1::Goods* _add = _internal_add_goods();
  // @@protoc_insertion_point(field_add:city.economy.v1.UpdateOrgGoodsRequestItem.goods)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Goods >&
UpdateOrgGoodsRequestItem::goods() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.UpdateOrgGoodsRequestItem.goods)
  return _impl_.goods_;
}

// -------------------------------------------------------------------

// UpdateOrgGoodsResponse

// repeated .city.economy.v1.Org orgs = 1 [json_name = "orgs"];
inline int UpdateOrgGoodsResponse::_internal_orgs_size() const {
  return _impl_.orgs_.size();
}
inline int UpdateOrgGoodsResponse::orgs_size() const {
  return _internal_orgs_size();
}
inline ::city::economy::v1::Org* UpdateOrgGoodsResponse::mutable_orgs(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.UpdateOrgGoodsResponse.orgs)
  return _impl_.orgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >*
UpdateOrgGoodsResponse::mutable_orgs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.UpdateOrgGoodsResponse.orgs)
  return &_impl_.orgs_;
}
inline const ::city::economy::v1::Org& UpdateOrgGoodsResponse::_internal_orgs(int index) const {
  return _impl_.orgs_.Get(index);
}
inline const ::city::economy::v1::Org& UpdateOrgGoodsResponse::orgs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgGoodsResponse.orgs)
  return _internal_orgs(index);
}
inline ::city::economy::v1::Org* UpdateOrgGoodsResponse::_internal_add_orgs() {
  return _impl_.orgs_.Add();
}
inline ::city::economy::v1::Org* UpdateOrgGoodsResponse::add_orgs() {
  ::city::economy::v1::Org* _add = _internal_add_orgs();
  // @@protoc_insertion_point(field_add:city.economy.v1.UpdateOrgGoodsResponse.orgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >&
UpdateOrgGoodsResponse::orgs() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.UpdateOrgGoodsResponse.orgs)
  return _impl_.orgs_;
}

// -------------------------------------------------------------------

// UpdateOrgEmployeeRequest

// repeated .city.economy.v1.UpdateOrgEmployeeRequestItem items = 1 [json_name = "items"];
inline int UpdateOrgEmployeeRequest::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int UpdateOrgEmployeeRequest::items_size() const {
  return _internal_items_size();
}
inline void UpdateOrgEmployeeRequest::clear_items() {
  _impl_.items_.Clear();
}
inline ::city::economy::v1::UpdateOrgEmployeeRequestItem* UpdateOrgEmployeeRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.UpdateOrgEmployeeRequest.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgEmployeeRequestItem >*
UpdateOrgEmployeeRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.UpdateOrgEmployeeRequest.items)
  return &_impl_.items_;
}
inline const ::city::economy::v1::UpdateOrgEmployeeRequestItem& UpdateOrgEmployeeRequest::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::city::economy::v1::UpdateOrgEmployeeRequestItem& UpdateOrgEmployeeRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgEmployeeRequest.items)
  return _internal_items(index);
}
inline ::city::economy::v1::UpdateOrgEmployeeRequestItem* UpdateOrgEmployeeRequest::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::city::economy::v1::UpdateOrgEmployeeRequestItem* UpdateOrgEmployeeRequest::add_items() {
  ::city::economy::v1::UpdateOrgEmployeeRequestItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:city.economy.v1.UpdateOrgEmployeeRequest.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgEmployeeRequestItem >&
UpdateOrgEmployeeRequest::items() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.UpdateOrgEmployeeRequest.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// UpdateOrgEmployeeRequestItem

// int32 org_id = 1 [json_name = "orgId"];
inline void UpdateOrgEmployeeRequestItem::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t UpdateOrgEmployeeRequestItem::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t UpdateOrgEmployeeRequestItem::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgEmployeeRequestItem.org_id)
  return _internal_org_id();
}
inline void UpdateOrgEmployeeRequestItem::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void UpdateOrgEmployeeRequestItem::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.UpdateOrgEmployeeRequestItem.org_id)
}

// repeated .city.economy.v1.Employee adds = 2 [json_name = "adds"];
inline int UpdateOrgEmployeeRequestItem::_internal_adds_size() const {
  return _impl_.adds_.size();
}
inline int UpdateOrgEmployeeRequestItem::adds_size() const {
  return _internal_adds_size();
}
inline ::city::economy::v1::Employee* UpdateOrgEmployeeRequestItem::mutable_adds(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.UpdateOrgEmployeeRequestItem.adds)
  return _impl_.adds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Employee >*
UpdateOrgEmployeeRequestItem::mutable_adds() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.UpdateOrgEmployeeRequestItem.adds)
  return &_impl_.adds_;
}
inline const ::city::economy::v1::Employee& UpdateOrgEmployeeRequestItem::_internal_adds(int index) const {
  return _impl_.adds_.Get(index);
}
inline const ::city::economy::v1::Employee& UpdateOrgEmployeeRequestItem::adds(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgEmployeeRequestItem.adds)
  return _internal_adds(index);
}
inline ::city::economy::v1::Employee* UpdateOrgEmployeeRequestItem::_internal_add_adds() {
  return _impl_.adds_.Add();
}
inline ::city::economy::v1::Employee* UpdateOrgEmployeeRequestItem::add_adds() {
  ::city::economy::v1::Employee* _add = _internal_add_adds();
  // @@protoc_insertion_point(field_add:city.economy.v1.UpdateOrgEmployeeRequestItem.adds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Employee >&
UpdateOrgEmployeeRequestItem::adds() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.UpdateOrgEmployeeRequestItem.adds)
  return _impl_.adds_;
}

// repeated int32 dels = 3 [json_name = "dels"];
inline int UpdateOrgEmployeeRequestItem::_internal_dels_size() const {
  return _impl_.dels_.size();
}
inline int UpdateOrgEmployeeRequestItem::dels_size() const {
  return _internal_dels_size();
}
inline void UpdateOrgEmployeeRequestItem::clear_dels() {
  _impl_.dels_.Clear();
}
inline int32_t UpdateOrgEmployeeRequestItem::_internal_dels(int index) const {
  return _impl_.dels_.Get(index);
}
inline int32_t UpdateOrgEmployeeRequestItem::dels(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgEmployeeRequestItem.dels)
  return _internal_dels(index);
}
inline void UpdateOrgEmployeeRequestItem::set_dels(int index, int32_t value) {
  _impl_.dels_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v1.UpdateOrgEmployeeRequestItem.dels)
}
inline void UpdateOrgEmployeeRequestItem::_internal_add_dels(int32_t value) {
  _impl_.dels_.Add(value);
}
inline void UpdateOrgEmployeeRequestItem::add_dels(int32_t value) {
  _internal_add_dels(value);
  // @@protoc_insertion_point(field_add:city.economy.v1.UpdateOrgEmployeeRequestItem.dels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UpdateOrgEmployeeRequestItem::_internal_dels() const {
  return _impl_.dels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
UpdateOrgEmployeeRequestItem::dels() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.UpdateOrgEmployeeRequestItem.dels)
  return _internal_dels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UpdateOrgEmployeeRequestItem::_internal_mutable_dels() {
  return &_impl_.dels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
UpdateOrgEmployeeRequestItem::mutable_dels() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.UpdateOrgEmployeeRequestItem.dels)
  return _internal_mutable_dels();
}

// repeated .city.economy.v1.Employee updates = 4 [json_name = "updates"];
inline int UpdateOrgEmployeeRequestItem::_internal_updates_size() const {
  return _impl_.updates_.size();
}
inline int UpdateOrgEmployeeRequestItem::updates_size() const {
  return _internal_updates_size();
}
inline ::city::economy::v1::Employee* UpdateOrgEmployeeRequestItem::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.UpdateOrgEmployeeRequestItem.updates)
  return _impl_.updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Employee >*
UpdateOrgEmployeeRequestItem::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.UpdateOrgEmployeeRequestItem.updates)
  return &_impl_.updates_;
}
inline const ::city::economy::v1::Employee& UpdateOrgEmployeeRequestItem::_internal_updates(int index) const {
  return _impl_.updates_.Get(index);
}
inline const ::city::economy::v1::Employee& UpdateOrgEmployeeRequestItem::updates(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgEmployeeRequestItem.updates)
  return _internal_updates(index);
}
inline ::city::economy::v1::Employee* UpdateOrgEmployeeRequestItem::_internal_add_updates() {
  return _impl_.updates_.Add();
}
inline ::city::economy::v1::Employee* UpdateOrgEmployeeRequestItem::add_updates() {
  ::city::economy::v1::Employee* _add = _internal_add_updates();
  // @@protoc_insertion_point(field_add:city.economy.v1.UpdateOrgEmployeeRequestItem.updates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Employee >&
UpdateOrgEmployeeRequestItem::updates() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.UpdateOrgEmployeeRequestItem.updates)
  return _impl_.updates_;
}

// -------------------------------------------------------------------

// UpdateOrgEmployeeResponse

// repeated .city.economy.v1.Org orgs = 1 [json_name = "orgs"];
inline int UpdateOrgEmployeeResponse::_internal_orgs_size() const {
  return _impl_.orgs_.size();
}
inline int UpdateOrgEmployeeResponse::orgs_size() const {
  return _internal_orgs_size();
}
inline ::city::economy::v1::Org* UpdateOrgEmployeeResponse::mutable_orgs(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.UpdateOrgEmployeeResponse.orgs)
  return _impl_.orgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >*
UpdateOrgEmployeeResponse::mutable_orgs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.UpdateOrgEmployeeResponse.orgs)
  return &_impl_.orgs_;
}
inline const ::city::economy::v1::Org& UpdateOrgEmployeeResponse::_internal_orgs(int index) const {
  return _impl_.orgs_.Get(index);
}
inline const ::city::economy::v1::Org& UpdateOrgEmployeeResponse::orgs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgEmployeeResponse.orgs)
  return _internal_orgs(index);
}
inline ::city::economy::v1::Org* UpdateOrgEmployeeResponse::_internal_add_orgs() {
  return _impl_.orgs_.Add();
}
inline ::city::economy::v1::Org* UpdateOrgEmployeeResponse::add_orgs() {
  ::city::economy::v1::Org* _add = _internal_add_orgs();
  // @@protoc_insertion_point(field_add:city.economy.v1.UpdateOrgEmployeeResponse.orgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >&
UpdateOrgEmployeeResponse::orgs() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.UpdateOrgEmployeeResponse.orgs)
  return _impl_.orgs_;
}

// -------------------------------------------------------------------

// UpdateOrgJobRequest

// repeated .city.economy.v1.UpdateOrgJobRequestItem items = 1 [json_name = "items"];
inline int UpdateOrgJobRequest::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int UpdateOrgJobRequest::items_size() const {
  return _internal_items_size();
}
inline void UpdateOrgJobRequest::clear_items() {
  _impl_.items_.Clear();
}
inline ::city::economy::v1::UpdateOrgJobRequestItem* UpdateOrgJobRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.UpdateOrgJobRequest.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgJobRequestItem >*
UpdateOrgJobRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.UpdateOrgJobRequest.items)
  return &_impl_.items_;
}
inline const ::city::economy::v1::UpdateOrgJobRequestItem& UpdateOrgJobRequest::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::city::economy::v1::UpdateOrgJobRequestItem& UpdateOrgJobRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgJobRequest.items)
  return _internal_items(index);
}
inline ::city::economy::v1::UpdateOrgJobRequestItem* UpdateOrgJobRequest::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::city::economy::v1::UpdateOrgJobRequestItem* UpdateOrgJobRequest::add_items() {
  ::city::economy::v1::UpdateOrgJobRequestItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:city.economy.v1.UpdateOrgJobRequest.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdateOrgJobRequestItem >&
UpdateOrgJobRequest::items() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.UpdateOrgJobRequest.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// UpdateOrgJobRequestItem

// int32 org_id = 1 [json_name = "orgId"];
inline void UpdateOrgJobRequestItem::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t UpdateOrgJobRequestItem::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t UpdateOrgJobRequestItem::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgJobRequestItem.org_id)
  return _internal_org_id();
}
inline void UpdateOrgJobRequestItem::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void UpdateOrgJobRequestItem::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.UpdateOrgJobRequestItem.org_id)
}

// repeated .city.economy.v1.Job jobs = 2 [json_name = "jobs"];
inline int UpdateOrgJobRequestItem::_internal_jobs_size() const {
  return _impl_.jobs_.size();
}
inline int UpdateOrgJobRequestItem::jobs_size() const {
  return _internal_jobs_size();
}
inline ::city::economy::v1::Job* UpdateOrgJobRequestItem::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.UpdateOrgJobRequestItem.jobs)
  return _impl_.jobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Job >*
UpdateOrgJobRequestItem::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.UpdateOrgJobRequestItem.jobs)
  return &_impl_.jobs_;
}
inline const ::city::economy::v1::Job& UpdateOrgJobRequestItem::_internal_jobs(int index) const {
  return _impl_.jobs_.Get(index);
}
inline const ::city::economy::v1::Job& UpdateOrgJobRequestItem::jobs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgJobRequestItem.jobs)
  return _internal_jobs(index);
}
inline ::city::economy::v1::Job* UpdateOrgJobRequestItem::_internal_add_jobs() {
  return _impl_.jobs_.Add();
}
inline ::city::economy::v1::Job* UpdateOrgJobRequestItem::add_jobs() {
  ::city::economy::v1::Job* _add = _internal_add_jobs();
  // @@protoc_insertion_point(field_add:city.economy.v1.UpdateOrgJobRequestItem.jobs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Job >&
UpdateOrgJobRequestItem::jobs() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.UpdateOrgJobRequestItem.jobs)
  return _impl_.jobs_;
}

// -------------------------------------------------------------------

// UpdateOrgJobResponse

// repeated .city.economy.v1.Org orgs = 1 [json_name = "orgs"];
inline int UpdateOrgJobResponse::_internal_orgs_size() const {
  return _impl_.orgs_.size();
}
inline int UpdateOrgJobResponse::orgs_size() const {
  return _internal_orgs_size();
}
inline ::city::economy::v1::Org* UpdateOrgJobResponse::mutable_orgs(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.UpdateOrgJobResponse.orgs)
  return _impl_.orgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >*
UpdateOrgJobResponse::mutable_orgs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.UpdateOrgJobResponse.orgs)
  return &_impl_.orgs_;
}
inline const ::city::economy::v1::Org& UpdateOrgJobResponse::_internal_orgs(int index) const {
  return _impl_.orgs_.Get(index);
}
inline const ::city::economy::v1::Org& UpdateOrgJobResponse::orgs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdateOrgJobResponse.orgs)
  return _internal_orgs(index);
}
inline ::city::economy::v1::Org* UpdateOrgJobResponse::_internal_add_orgs() {
  return _impl_.orgs_.Add();
}
inline ::city::economy::v1::Org* UpdateOrgJobResponse::add_orgs() {
  ::city::economy::v1::Org* _add = _internal_add_orgs();
  // @@protoc_insertion_point(field_add:city.economy.v1.UpdateOrgJobResponse.orgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Org >&
UpdateOrgJobResponse::orgs() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.UpdateOrgJobResponse.orgs)
  return _impl_.orgs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace economy
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv1_2forg_5fservice_2eproto
