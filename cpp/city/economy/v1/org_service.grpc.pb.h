// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/economy/v1/org_service.proto
#ifndef GRPC_city_2feconomy_2fv1_2forg_5fservice_2eproto__INCLUDED
#define GRPC_city_2feconomy_2fv1_2forg_5fservice_2eproto__INCLUDED

#include "city/economy/v1/org_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace city {
namespace economy {
namespace v1 {

// 组织经济情况接口
class OrgService final {
 public:
  static constexpr char const* service_full_name() {
    return "city.economy.v1.OrgService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 批量查询组织的经济情况（员工、岗位、资金、货物）
    virtual ::grpc::Status GetOrg(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest& request, ::city::economy::v1::GetOrgResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::GetOrgResponse>> AsyncGetOrg(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::GetOrgResponse>>(AsyncGetOrgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::GetOrgResponse>> PrepareAsyncGetOrg(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::GetOrgResponse>>(PrepareAsyncGetOrgRaw(context, request, cq));
    }
    // 批量修改组织的资金
    virtual ::grpc::Status UpdateOrgMoney(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest& request, ::city::economy::v1::UpdateOrgMoneyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgMoneyResponse>> AsyncUpdateOrgMoney(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgMoneyResponse>>(AsyncUpdateOrgMoneyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgMoneyResponse>> PrepareAsyncUpdateOrgMoney(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgMoneyResponse>>(PrepareAsyncUpdateOrgMoneyRaw(context, request, cq));
    }
    // 批量修改组织的货物
    virtual ::grpc::Status UpdateOrgGoods(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest& request, ::city::economy::v1::UpdateOrgGoodsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgGoodsResponse>> AsyncUpdateOrgGoods(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgGoodsResponse>>(AsyncUpdateOrgGoodsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgGoodsResponse>> PrepareAsyncUpdateOrgGoods(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgGoodsResponse>>(PrepareAsyncUpdateOrgGoodsRaw(context, request, cq));
    }
    // 批量修改组织的员工
    virtual ::grpc::Status UpdateOrgEmployee(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest& request, ::city::economy::v1::UpdateOrgEmployeeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgEmployeeResponse>> AsyncUpdateOrgEmployee(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgEmployeeResponse>>(AsyncUpdateOrgEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgEmployeeResponse>> PrepareAsyncUpdateOrgEmployee(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgEmployeeResponse>>(PrepareAsyncUpdateOrgEmployeeRaw(context, request, cq));
    }
    // 批量修改组织的岗位
    virtual ::grpc::Status UpdateOrgJob(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest& request, ::city::economy::v1::UpdateOrgJobResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgJobResponse>> AsyncUpdateOrgJob(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgJobResponse>>(AsyncUpdateOrgJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgJobResponse>> PrepareAsyncUpdateOrgJob(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgJobResponse>>(PrepareAsyncUpdateOrgJobRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 批量查询组织的经济情况（员工、岗位、资金、货物）
      virtual void GetOrg(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest* request, ::city::economy::v1::GetOrgResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOrg(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest* request, ::city::economy::v1::GetOrgResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 批量修改组织的资金
      virtual void UpdateOrgMoney(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest* request, ::city::economy::v1::UpdateOrgMoneyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateOrgMoney(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest* request, ::city::economy::v1::UpdateOrgMoneyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 批量修改组织的货物
      virtual void UpdateOrgGoods(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest* request, ::city::economy::v1::UpdateOrgGoodsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateOrgGoods(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest* request, ::city::economy::v1::UpdateOrgGoodsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 批量修改组织的员工
      virtual void UpdateOrgEmployee(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest* request, ::city::economy::v1::UpdateOrgEmployeeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateOrgEmployee(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest* request, ::city::economy::v1::UpdateOrgEmployeeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 批量修改组织的岗位
      virtual void UpdateOrgJob(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest* request, ::city::economy::v1::UpdateOrgJobResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateOrgJob(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest* request, ::city::economy::v1::UpdateOrgJobResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::GetOrgResponse>* AsyncGetOrgRaw(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::GetOrgResponse>* PrepareAsyncGetOrgRaw(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgMoneyResponse>* AsyncUpdateOrgMoneyRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgMoneyResponse>* PrepareAsyncUpdateOrgMoneyRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgGoodsResponse>* AsyncUpdateOrgGoodsRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgGoodsResponse>* PrepareAsyncUpdateOrgGoodsRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgEmployeeResponse>* AsyncUpdateOrgEmployeeRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgEmployeeResponse>* PrepareAsyncUpdateOrgEmployeeRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgJobResponse>* AsyncUpdateOrgJobRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::economy::v1::UpdateOrgJobResponse>* PrepareAsyncUpdateOrgJobRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetOrg(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest& request, ::city::economy::v1::GetOrgResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::GetOrgResponse>> AsyncGetOrg(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::GetOrgResponse>>(AsyncGetOrgRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::GetOrgResponse>> PrepareAsyncGetOrg(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::GetOrgResponse>>(PrepareAsyncGetOrgRaw(context, request, cq));
    }
    ::grpc::Status UpdateOrgMoney(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest& request, ::city::economy::v1::UpdateOrgMoneyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgMoneyResponse>> AsyncUpdateOrgMoney(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgMoneyResponse>>(AsyncUpdateOrgMoneyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgMoneyResponse>> PrepareAsyncUpdateOrgMoney(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgMoneyResponse>>(PrepareAsyncUpdateOrgMoneyRaw(context, request, cq));
    }
    ::grpc::Status UpdateOrgGoods(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest& request, ::city::economy::v1::UpdateOrgGoodsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgGoodsResponse>> AsyncUpdateOrgGoods(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgGoodsResponse>>(AsyncUpdateOrgGoodsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgGoodsResponse>> PrepareAsyncUpdateOrgGoods(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgGoodsResponse>>(PrepareAsyncUpdateOrgGoodsRaw(context, request, cq));
    }
    ::grpc::Status UpdateOrgEmployee(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest& request, ::city::economy::v1::UpdateOrgEmployeeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgEmployeeResponse>> AsyncUpdateOrgEmployee(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgEmployeeResponse>>(AsyncUpdateOrgEmployeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgEmployeeResponse>> PrepareAsyncUpdateOrgEmployee(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgEmployeeResponse>>(PrepareAsyncUpdateOrgEmployeeRaw(context, request, cq));
    }
    ::grpc::Status UpdateOrgJob(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest& request, ::city::economy::v1::UpdateOrgJobResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgJobResponse>> AsyncUpdateOrgJob(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgJobResponse>>(AsyncUpdateOrgJobRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgJobResponse>> PrepareAsyncUpdateOrgJob(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgJobResponse>>(PrepareAsyncUpdateOrgJobRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetOrg(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest* request, ::city::economy::v1::GetOrgResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOrg(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest* request, ::city::economy::v1::GetOrgResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateOrgMoney(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest* request, ::city::economy::v1::UpdateOrgMoneyResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrgMoney(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest* request, ::city::economy::v1::UpdateOrgMoneyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateOrgGoods(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest* request, ::city::economy::v1::UpdateOrgGoodsResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrgGoods(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest* request, ::city::economy::v1::UpdateOrgGoodsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateOrgEmployee(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest* request, ::city::economy::v1::UpdateOrgEmployeeResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrgEmployee(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest* request, ::city::economy::v1::UpdateOrgEmployeeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateOrgJob(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest* request, ::city::economy::v1::UpdateOrgJobResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrgJob(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest* request, ::city::economy::v1::UpdateOrgJobResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::city::economy::v1::GetOrgResponse>* AsyncGetOrgRaw(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::economy::v1::GetOrgResponse>* PrepareAsyncGetOrgRaw(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgMoneyResponse>* AsyncUpdateOrgMoneyRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgMoneyResponse>* PrepareAsyncUpdateOrgMoneyRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgGoodsResponse>* AsyncUpdateOrgGoodsRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgGoodsResponse>* PrepareAsyncUpdateOrgGoodsRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgEmployeeResponse>* AsyncUpdateOrgEmployeeRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgEmployeeResponse>* PrepareAsyncUpdateOrgEmployeeRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgJobResponse>* AsyncUpdateOrgJobRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgJobResponse>* PrepareAsyncUpdateOrgJobRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetOrg_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOrgMoney_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOrgGoods_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOrgEmployee_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOrgJob_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 批量查询组织的经济情况（员工、岗位、资金、货物）
    virtual ::grpc::Status GetOrg(::grpc::ServerContext* context, const ::city::economy::v1::GetOrgRequest* request, ::city::economy::v1::GetOrgResponse* response);
    // 批量修改组织的资金
    virtual ::grpc::Status UpdateOrgMoney(::grpc::ServerContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest* request, ::city::economy::v1::UpdateOrgMoneyResponse* response);
    // 批量修改组织的货物
    virtual ::grpc::Status UpdateOrgGoods(::grpc::ServerContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest* request, ::city::economy::v1::UpdateOrgGoodsResponse* response);
    // 批量修改组织的员工
    virtual ::grpc::Status UpdateOrgEmployee(::grpc::ServerContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest* request, ::city::economy::v1::UpdateOrgEmployeeResponse* response);
    // 批量修改组织的岗位
    virtual ::grpc::Status UpdateOrgJob(::grpc::ServerContext* context, const ::city::economy::v1::UpdateOrgJobRequest* request, ::city::economy::v1::UpdateOrgJobResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOrg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOrg() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetOrg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrg(::grpc::ServerContext* /*context*/, const ::city::economy::v1::GetOrgRequest* /*request*/, ::city::economy::v1::GetOrgResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrg(::grpc::ServerContext* context, ::city::economy::v1::GetOrgRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::economy::v1::GetOrgResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOrgMoney : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateOrgMoney() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateOrgMoney() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgMoney(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgMoneyRequest* /*request*/, ::city::economy::v1::UpdateOrgMoneyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrgMoney(::grpc::ServerContext* context, ::city::economy::v1::UpdateOrgMoneyRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::economy::v1::UpdateOrgMoneyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOrgGoods : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateOrgGoods() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateOrgGoods() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgGoods(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgGoodsRequest* /*request*/, ::city::economy::v1::UpdateOrgGoodsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrgGoods(::grpc::ServerContext* context, ::city::economy::v1::UpdateOrgGoodsRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::economy::v1::UpdateOrgGoodsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOrgEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateOrgEmployee() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateOrgEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgEmployee(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgEmployeeRequest* /*request*/, ::city::economy::v1::UpdateOrgEmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrgEmployee(::grpc::ServerContext* context, ::city::economy::v1::UpdateOrgEmployeeRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::economy::v1::UpdateOrgEmployeeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOrgJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateOrgJob() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateOrgJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgJob(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgJobRequest* /*request*/, ::city::economy::v1::UpdateOrgJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrgJob(::grpc::ServerContext* context, ::city::economy::v1::UpdateOrgJobRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::economy::v1::UpdateOrgJobResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetOrg<WithAsyncMethod_UpdateOrgMoney<WithAsyncMethod_UpdateOrgGoods<WithAsyncMethod_UpdateOrgEmployee<WithAsyncMethod_UpdateOrgJob<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetOrg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetOrg() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::city::economy::v1::GetOrgRequest, ::city::economy::v1::GetOrgResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::economy::v1::GetOrgRequest* request, ::city::economy::v1::GetOrgResponse* response) { return this->GetOrg(context, request, response); }));}
    void SetMessageAllocatorFor_GetOrg(
        ::grpc::MessageAllocator< ::city::economy::v1::GetOrgRequest, ::city::economy::v1::GetOrgResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::economy::v1::GetOrgRequest, ::city::economy::v1::GetOrgResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetOrg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrg(::grpc::ServerContext* /*context*/, const ::city::economy::v1::GetOrgRequest* /*request*/, ::city::economy::v1::GetOrgResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrg(
      ::grpc::CallbackServerContext* /*context*/, const ::city::economy::v1::GetOrgRequest* /*request*/, ::city::economy::v1::GetOrgResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateOrgMoney : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateOrgMoney() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::city::economy::v1::UpdateOrgMoneyRequest, ::city::economy::v1::UpdateOrgMoneyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest* request, ::city::economy::v1::UpdateOrgMoneyResponse* response) { return this->UpdateOrgMoney(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateOrgMoney(
        ::grpc::MessageAllocator< ::city::economy::v1::UpdateOrgMoneyRequest, ::city::economy::v1::UpdateOrgMoneyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::economy::v1::UpdateOrgMoneyRequest, ::city::economy::v1::UpdateOrgMoneyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateOrgMoney() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgMoney(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgMoneyRequest* /*request*/, ::city::economy::v1::UpdateOrgMoneyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateOrgMoney(
      ::grpc::CallbackServerContext* /*context*/, const ::city::economy::v1::UpdateOrgMoneyRequest* /*request*/, ::city::economy::v1::UpdateOrgMoneyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateOrgGoods : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateOrgGoods() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::city::economy::v1::UpdateOrgGoodsRequest, ::city::economy::v1::UpdateOrgGoodsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest* request, ::city::economy::v1::UpdateOrgGoodsResponse* response) { return this->UpdateOrgGoods(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateOrgGoods(
        ::grpc::MessageAllocator< ::city::economy::v1::UpdateOrgGoodsRequest, ::city::economy::v1::UpdateOrgGoodsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::economy::v1::UpdateOrgGoodsRequest, ::city::economy::v1::UpdateOrgGoodsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateOrgGoods() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgGoods(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgGoodsRequest* /*request*/, ::city::economy::v1::UpdateOrgGoodsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateOrgGoods(
      ::grpc::CallbackServerContext* /*context*/, const ::city::economy::v1::UpdateOrgGoodsRequest* /*request*/, ::city::economy::v1::UpdateOrgGoodsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateOrgEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateOrgEmployee() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::city::economy::v1::UpdateOrgEmployeeRequest, ::city::economy::v1::UpdateOrgEmployeeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest* request, ::city::economy::v1::UpdateOrgEmployeeResponse* response) { return this->UpdateOrgEmployee(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateOrgEmployee(
        ::grpc::MessageAllocator< ::city::economy::v1::UpdateOrgEmployeeRequest, ::city::economy::v1::UpdateOrgEmployeeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::economy::v1::UpdateOrgEmployeeRequest, ::city::economy::v1::UpdateOrgEmployeeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateOrgEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgEmployee(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgEmployeeRequest* /*request*/, ::city::economy::v1::UpdateOrgEmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateOrgEmployee(
      ::grpc::CallbackServerContext* /*context*/, const ::city::economy::v1::UpdateOrgEmployeeRequest* /*request*/, ::city::economy::v1::UpdateOrgEmployeeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateOrgJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateOrgJob() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::city::economy::v1::UpdateOrgJobRequest, ::city::economy::v1::UpdateOrgJobResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::economy::v1::UpdateOrgJobRequest* request, ::city::economy::v1::UpdateOrgJobResponse* response) { return this->UpdateOrgJob(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateOrgJob(
        ::grpc::MessageAllocator< ::city::economy::v1::UpdateOrgJobRequest, ::city::economy::v1::UpdateOrgJobResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::economy::v1::UpdateOrgJobRequest, ::city::economy::v1::UpdateOrgJobResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateOrgJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgJob(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgJobRequest* /*request*/, ::city::economy::v1::UpdateOrgJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateOrgJob(
      ::grpc::CallbackServerContext* /*context*/, const ::city::economy::v1::UpdateOrgJobRequest* /*request*/, ::city::economy::v1::UpdateOrgJobResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetOrg<WithCallbackMethod_UpdateOrgMoney<WithCallbackMethod_UpdateOrgGoods<WithCallbackMethod_UpdateOrgEmployee<WithCallbackMethod_UpdateOrgJob<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetOrg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOrg() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetOrg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrg(::grpc::ServerContext* /*context*/, const ::city::economy::v1::GetOrgRequest* /*request*/, ::city::economy::v1::GetOrgResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOrgMoney : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateOrgMoney() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateOrgMoney() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgMoney(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgMoneyRequest* /*request*/, ::city::economy::v1::UpdateOrgMoneyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOrgGoods : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateOrgGoods() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateOrgGoods() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgGoods(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgGoodsRequest* /*request*/, ::city::economy::v1::UpdateOrgGoodsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOrgEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateOrgEmployee() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateOrgEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgEmployee(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgEmployeeRequest* /*request*/, ::city::economy::v1::UpdateOrgEmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOrgJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateOrgJob() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateOrgJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgJob(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgJobRequest* /*request*/, ::city::economy::v1::UpdateOrgJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOrg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOrg() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetOrg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrg(::grpc::ServerContext* /*context*/, const ::city::economy::v1::GetOrgRequest* /*request*/, ::city::economy::v1::GetOrgResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrg(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOrgMoney : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateOrgMoney() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateOrgMoney() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgMoney(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgMoneyRequest* /*request*/, ::city::economy::v1::UpdateOrgMoneyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrgMoney(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOrgGoods : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateOrgGoods() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateOrgGoods() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgGoods(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgGoodsRequest* /*request*/, ::city::economy::v1::UpdateOrgGoodsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrgGoods(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOrgEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateOrgEmployee() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateOrgEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgEmployee(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgEmployeeRequest* /*request*/, ::city::economy::v1::UpdateOrgEmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrgEmployee(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOrgJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateOrgJob() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateOrgJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgJob(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgJobRequest* /*request*/, ::city::economy::v1::UpdateOrgJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrgJob(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetOrg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetOrg() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOrg(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetOrg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrg(::grpc::ServerContext* /*context*/, const ::city::economy::v1::GetOrgRequest* /*request*/, ::city::economy::v1::GetOrgResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrg(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateOrgMoney : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateOrgMoney() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateOrgMoney(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateOrgMoney() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgMoney(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgMoneyRequest* /*request*/, ::city::economy::v1::UpdateOrgMoneyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateOrgMoney(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateOrgGoods : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateOrgGoods() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateOrgGoods(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateOrgGoods() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgGoods(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgGoodsRequest* /*request*/, ::city::economy::v1::UpdateOrgGoodsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateOrgGoods(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateOrgEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateOrgEmployee() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateOrgEmployee(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateOrgEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgEmployee(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgEmployeeRequest* /*request*/, ::city::economy::v1::UpdateOrgEmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateOrgEmployee(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateOrgJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateOrgJob() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateOrgJob(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateOrgJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrgJob(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgJobRequest* /*request*/, ::city::economy::v1::UpdateOrgJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateOrgJob(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOrg : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOrg() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::economy::v1::GetOrgRequest, ::city::economy::v1::GetOrgResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::economy::v1::GetOrgRequest, ::city::economy::v1::GetOrgResponse>* streamer) {
                       return this->StreamedGetOrg(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOrg() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOrg(::grpc::ServerContext* /*context*/, const ::city::economy::v1::GetOrgRequest* /*request*/, ::city::economy::v1::GetOrgResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOrg(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::economy::v1::GetOrgRequest,::city::economy::v1::GetOrgResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOrgMoney : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateOrgMoney() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::economy::v1::UpdateOrgMoneyRequest, ::city::economy::v1::UpdateOrgMoneyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::economy::v1::UpdateOrgMoneyRequest, ::city::economy::v1::UpdateOrgMoneyResponse>* streamer) {
                       return this->StreamedUpdateOrgMoney(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateOrgMoney() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOrgMoney(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgMoneyRequest* /*request*/, ::city::economy::v1::UpdateOrgMoneyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOrgMoney(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::economy::v1::UpdateOrgMoneyRequest,::city::economy::v1::UpdateOrgMoneyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOrgGoods : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateOrgGoods() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::economy::v1::UpdateOrgGoodsRequest, ::city::economy::v1::UpdateOrgGoodsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::economy::v1::UpdateOrgGoodsRequest, ::city::economy::v1::UpdateOrgGoodsResponse>* streamer) {
                       return this->StreamedUpdateOrgGoods(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateOrgGoods() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOrgGoods(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgGoodsRequest* /*request*/, ::city::economy::v1::UpdateOrgGoodsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOrgGoods(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::economy::v1::UpdateOrgGoodsRequest,::city::economy::v1::UpdateOrgGoodsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOrgEmployee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateOrgEmployee() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::economy::v1::UpdateOrgEmployeeRequest, ::city::economy::v1::UpdateOrgEmployeeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::economy::v1::UpdateOrgEmployeeRequest, ::city::economy::v1::UpdateOrgEmployeeResponse>* streamer) {
                       return this->StreamedUpdateOrgEmployee(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateOrgEmployee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOrgEmployee(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgEmployeeRequest* /*request*/, ::city::economy::v1::UpdateOrgEmployeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOrgEmployee(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::economy::v1::UpdateOrgEmployeeRequest,::city::economy::v1::UpdateOrgEmployeeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOrgJob : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateOrgJob() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::economy::v1::UpdateOrgJobRequest, ::city::economy::v1::UpdateOrgJobResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::economy::v1::UpdateOrgJobRequest, ::city::economy::v1::UpdateOrgJobResponse>* streamer) {
                       return this->StreamedUpdateOrgJob(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateOrgJob() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOrgJob(::grpc::ServerContext* /*context*/, const ::city::economy::v1::UpdateOrgJobRequest* /*request*/, ::city::economy::v1::UpdateOrgJobResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOrgJob(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::economy::v1::UpdateOrgJobRequest,::city::economy::v1::UpdateOrgJobResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetOrg<WithStreamedUnaryMethod_UpdateOrgMoney<WithStreamedUnaryMethod_UpdateOrgGoods<WithStreamedUnaryMethod_UpdateOrgEmployee<WithStreamedUnaryMethod_UpdateOrgJob<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetOrg<WithStreamedUnaryMethod_UpdateOrgMoney<WithStreamedUnaryMethod_UpdateOrgGoods<WithStreamedUnaryMethod_UpdateOrgEmployee<WithStreamedUnaryMethod_UpdateOrgJob<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace economy
}  // namespace city


#endif  // GRPC_city_2feconomy_2fv1_2forg_5fservice_2eproto__INCLUDED
