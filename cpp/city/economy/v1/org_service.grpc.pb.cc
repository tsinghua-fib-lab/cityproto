// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/economy/v1/org_service.proto

#include "city/economy/v1/org_service.pb.h"
#include "city/economy/v1/org_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace city {
namespace economy {
namespace v1 {

static const char* OrgService_method_names[] = {
  "/city.economy.v1.OrgService/GetOrg",
  "/city.economy.v1.OrgService/UpdateOrgMoney",
  "/city.economy.v1.OrgService/UpdateOrgGoods",
  "/city.economy.v1.OrgService/UpdateOrgEmployee",
  "/city.economy.v1.OrgService/UpdateOrgJob",
};

std::unique_ptr< OrgService::Stub> OrgService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< OrgService::Stub> stub(new OrgService::Stub(channel, options));
  return stub;
}

OrgService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetOrg_(OrgService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOrgMoney_(OrgService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOrgGoods_(OrgService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOrgEmployee_(OrgService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateOrgJob_(OrgService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status OrgService::Stub::GetOrg(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest& request, ::city::economy::v1::GetOrgResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::economy::v1::GetOrgRequest, ::city::economy::v1::GetOrgResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOrg_, context, request, response);
}

void OrgService::Stub::async::GetOrg(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest* request, ::city::economy::v1::GetOrgResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::economy::v1::GetOrgRequest, ::city::economy::v1::GetOrgResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrg_, context, request, response, std::move(f));
}

void OrgService::Stub::async::GetOrg(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest* request, ::city::economy::v1::GetOrgResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOrg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::economy::v1::GetOrgResponse>* OrgService::Stub::PrepareAsyncGetOrgRaw(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::economy::v1::GetOrgResponse, ::city::economy::v1::GetOrgRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOrg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::economy::v1::GetOrgResponse>* OrgService::Stub::AsyncGetOrgRaw(::grpc::ClientContext* context, const ::city::economy::v1::GetOrgRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOrgRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrgService::Stub::UpdateOrgMoney(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest& request, ::city::economy::v1::UpdateOrgMoneyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::economy::v1::UpdateOrgMoneyRequest, ::city::economy::v1::UpdateOrgMoneyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateOrgMoney_, context, request, response);
}

void OrgService::Stub::async::UpdateOrgMoney(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest* request, ::city::economy::v1::UpdateOrgMoneyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::economy::v1::UpdateOrgMoneyRequest, ::city::economy::v1::UpdateOrgMoneyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrgMoney_, context, request, response, std::move(f));
}

void OrgService::Stub::async::UpdateOrgMoney(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest* request, ::city::economy::v1::UpdateOrgMoneyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrgMoney_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgMoneyResponse>* OrgService::Stub::PrepareAsyncUpdateOrgMoneyRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::economy::v1::UpdateOrgMoneyResponse, ::city::economy::v1::UpdateOrgMoneyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateOrgMoney_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgMoneyResponse>* OrgService::Stub::AsyncUpdateOrgMoneyRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateOrgMoneyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrgService::Stub::UpdateOrgGoods(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest& request, ::city::economy::v1::UpdateOrgGoodsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::economy::v1::UpdateOrgGoodsRequest, ::city::economy::v1::UpdateOrgGoodsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateOrgGoods_, context, request, response);
}

void OrgService::Stub::async::UpdateOrgGoods(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest* request, ::city::economy::v1::UpdateOrgGoodsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::economy::v1::UpdateOrgGoodsRequest, ::city::economy::v1::UpdateOrgGoodsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrgGoods_, context, request, response, std::move(f));
}

void OrgService::Stub::async::UpdateOrgGoods(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest* request, ::city::economy::v1::UpdateOrgGoodsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrgGoods_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgGoodsResponse>* OrgService::Stub::PrepareAsyncUpdateOrgGoodsRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::economy::v1::UpdateOrgGoodsResponse, ::city::economy::v1::UpdateOrgGoodsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateOrgGoods_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgGoodsResponse>* OrgService::Stub::AsyncUpdateOrgGoodsRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateOrgGoodsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrgService::Stub::UpdateOrgEmployee(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest& request, ::city::economy::v1::UpdateOrgEmployeeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::economy::v1::UpdateOrgEmployeeRequest, ::city::economy::v1::UpdateOrgEmployeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateOrgEmployee_, context, request, response);
}

void OrgService::Stub::async::UpdateOrgEmployee(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest* request, ::city::economy::v1::UpdateOrgEmployeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::economy::v1::UpdateOrgEmployeeRequest, ::city::economy::v1::UpdateOrgEmployeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrgEmployee_, context, request, response, std::move(f));
}

void OrgService::Stub::async::UpdateOrgEmployee(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest* request, ::city::economy::v1::UpdateOrgEmployeeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrgEmployee_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgEmployeeResponse>* OrgService::Stub::PrepareAsyncUpdateOrgEmployeeRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::economy::v1::UpdateOrgEmployeeResponse, ::city::economy::v1::UpdateOrgEmployeeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateOrgEmployee_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgEmployeeResponse>* OrgService::Stub::AsyncUpdateOrgEmployeeRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateOrgEmployeeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status OrgService::Stub::UpdateOrgJob(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest& request, ::city::economy::v1::UpdateOrgJobResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::economy::v1::UpdateOrgJobRequest, ::city::economy::v1::UpdateOrgJobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateOrgJob_, context, request, response);
}

void OrgService::Stub::async::UpdateOrgJob(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest* request, ::city::economy::v1::UpdateOrgJobResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::economy::v1::UpdateOrgJobRequest, ::city::economy::v1::UpdateOrgJobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrgJob_, context, request, response, std::move(f));
}

void OrgService::Stub::async::UpdateOrgJob(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest* request, ::city::economy::v1::UpdateOrgJobResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateOrgJob_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgJobResponse>* OrgService::Stub::PrepareAsyncUpdateOrgJobRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::economy::v1::UpdateOrgJobResponse, ::city::economy::v1::UpdateOrgJobRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateOrgJob_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::economy::v1::UpdateOrgJobResponse>* OrgService::Stub::AsyncUpdateOrgJobRaw(::grpc::ClientContext* context, const ::city::economy::v1::UpdateOrgJobRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateOrgJobRaw(context, request, cq);
  result->StartCall();
  return result;
}

OrgService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrgService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrgService::Service, ::city::economy::v1::GetOrgRequest, ::city::economy::v1::GetOrgResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::economy::v1::GetOrgRequest* req,
             ::city::economy::v1::GetOrgResponse* resp) {
               return service->GetOrg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrgService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrgService::Service, ::city::economy::v1::UpdateOrgMoneyRequest, ::city::economy::v1::UpdateOrgMoneyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::economy::v1::UpdateOrgMoneyRequest* req,
             ::city::economy::v1::UpdateOrgMoneyResponse* resp) {
               return service->UpdateOrgMoney(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrgService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrgService::Service, ::city::economy::v1::UpdateOrgGoodsRequest, ::city::economy::v1::UpdateOrgGoodsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::economy::v1::UpdateOrgGoodsRequest* req,
             ::city::economy::v1::UpdateOrgGoodsResponse* resp) {
               return service->UpdateOrgGoods(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrgService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrgService::Service, ::city::economy::v1::UpdateOrgEmployeeRequest, ::city::economy::v1::UpdateOrgEmployeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::economy::v1::UpdateOrgEmployeeRequest* req,
             ::city::economy::v1::UpdateOrgEmployeeResponse* resp) {
               return service->UpdateOrgEmployee(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      OrgService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< OrgService::Service, ::city::economy::v1::UpdateOrgJobRequest, ::city::economy::v1::UpdateOrgJobResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](OrgService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::economy::v1::UpdateOrgJobRequest* req,
             ::city::economy::v1::UpdateOrgJobResponse* resp) {
               return service->UpdateOrgJob(ctx, req, resp);
             }, this)));
}

OrgService::Service::~Service() {
}

::grpc::Status OrgService::Service::GetOrg(::grpc::ServerContext* context, const ::city::economy::v1::GetOrgRequest* request, ::city::economy::v1::GetOrgResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrgService::Service::UpdateOrgMoney(::grpc::ServerContext* context, const ::city::economy::v1::UpdateOrgMoneyRequest* request, ::city::economy::v1::UpdateOrgMoneyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrgService::Service::UpdateOrgGoods(::grpc::ServerContext* context, const ::city::economy::v1::UpdateOrgGoodsRequest* request, ::city::economy::v1::UpdateOrgGoodsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrgService::Service::UpdateOrgEmployee(::grpc::ServerContext* context, const ::city::economy::v1::UpdateOrgEmployeeRequest* request, ::city::economy::v1::UpdateOrgEmployeeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status OrgService::Service::UpdateOrgJob(::grpc::ServerContext* context, const ::city::economy::v1::UpdateOrgJobRequest* request, ::city::economy::v1::UpdateOrgJobResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace city
}  // namespace economy
}  // namespace v1

