// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/economy/v1/person_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv1_2fperson_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv1_2fperson_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "city/economy/v1/economy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2feconomy_2fv1_2fperson_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2feconomy_2fv1_2fperson_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2feconomy_2fv1_2fperson_5fservice_2eproto;
namespace city {
namespace economy {
namespace v1 {
class GetPersonRequest;
struct GetPersonRequestDefaultTypeInternal;
extern GetPersonRequestDefaultTypeInternal _GetPersonRequest_default_instance_;
class GetPersonResponse;
struct GetPersonResponseDefaultTypeInternal;
extern GetPersonResponseDefaultTypeInternal _GetPersonResponse_default_instance_;
class UpdatePersonMoneyRequest;
struct UpdatePersonMoneyRequestDefaultTypeInternal;
extern UpdatePersonMoneyRequestDefaultTypeInternal _UpdatePersonMoneyRequest_default_instance_;
class UpdatePersonMoneyRequestItem;
struct UpdatePersonMoneyRequestItemDefaultTypeInternal;
extern UpdatePersonMoneyRequestItemDefaultTypeInternal _UpdatePersonMoneyRequestItem_default_instance_;
class UpdatePersonMoneyResponse;
struct UpdatePersonMoneyResponseDefaultTypeInternal;
extern UpdatePersonMoneyResponseDefaultTypeInternal _UpdatePersonMoneyResponse_default_instance_;
}  // namespace v1
}  // namespace economy
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::economy::v1::GetPersonRequest* Arena::CreateMaybeMessage<::city::economy::v1::GetPersonRequest>(Arena*);
template<> ::city::economy::v1::GetPersonResponse* Arena::CreateMaybeMessage<::city::economy::v1::GetPersonResponse>(Arena*);
template<> ::city::economy::v1::UpdatePersonMoneyRequest* Arena::CreateMaybeMessage<::city::economy::v1::UpdatePersonMoneyRequest>(Arena*);
template<> ::city::economy::v1::UpdatePersonMoneyRequestItem* Arena::CreateMaybeMessage<::city::economy::v1::UpdatePersonMoneyRequestItem>(Arena*);
template<> ::city::economy::v1::UpdatePersonMoneyResponse* Arena::CreateMaybeMessage<::city::economy::v1::UpdatePersonMoneyResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace economy {
namespace v1 {

// ===================================================================

class GetPersonRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.GetPersonRequest) */ {
 public:
  inline GetPersonRequest() : GetPersonRequest(nullptr) {}
  ~GetPersonRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPersonRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPersonRequest(const GetPersonRequest& from);
  GetPersonRequest(GetPersonRequest&& from) noexcept
    : GetPersonRequest() {
    *this = ::std::move(from);
  }

  inline GetPersonRequest& operator=(const GetPersonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersonRequest& operator=(GetPersonRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPersonRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPersonRequest* internal_default_instance() {
    return reinterpret_cast<const GetPersonRequest*>(
               &_GetPersonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetPersonRequest& a, GetPersonRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersonRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPersonRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPersonRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPersonRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPersonRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPersonRequest& from) {
    GetPersonRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersonRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.GetPersonRequest";
  }
  protected:
  explicit GetPersonRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonIdsFieldNumber = 1,
  };
  // repeated int32 person_ids = 1 [json_name = "personIds"];
  int person_ids_size() const;
  private:
  int _internal_person_ids_size() const;
  public:
  void clear_person_ids();
  private:
  int32_t _internal_person_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_person_ids() const;
  void _internal_add_person_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_person_ids();
  public:
  int32_t person_ids(int index) const;
  void set_person_ids(int index, int32_t value);
  void add_person_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      person_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_person_ids();

  // @@protoc_insertion_point(class_scope:city.economy.v1.GetPersonRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > person_ids_;
    mutable std::atomic<int> _person_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPersonResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.GetPersonResponse) */ {
 public:
  inline GetPersonResponse() : GetPersonResponse(nullptr) {}
  ~GetPersonResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPersonResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPersonResponse(const GetPersonResponse& from);
  GetPersonResponse(GetPersonResponse&& from) noexcept
    : GetPersonResponse() {
    *this = ::std::move(from);
  }

  inline GetPersonResponse& operator=(const GetPersonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersonResponse& operator=(GetPersonResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPersonResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPersonResponse* internal_default_instance() {
    return reinterpret_cast<const GetPersonResponse*>(
               &_GetPersonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetPersonResponse& a, GetPersonResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersonResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPersonResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPersonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPersonResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPersonResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPersonResponse& from) {
    GetPersonResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersonResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.GetPersonResponse";
  }
  protected:
  explicit GetPersonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonsFieldNumber = 1,
  };
  // repeated .city.economy.v1.Person persons = 1 [json_name = "persons"];
  int persons_size() const;
  private:
  int _internal_persons_size() const;
  public:
  void clear_persons();
  ::city::economy::v1::Person* mutable_persons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Person >*
      mutable_persons();
  private:
  const ::city::economy::v1::Person& _internal_persons(int index) const;
  ::city::economy::v1::Person* _internal_add_persons();
  public:
  const ::city::economy::v1::Person& persons(int index) const;
  ::city::economy::v1::Person* add_persons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Person >&
      persons() const;

  // @@protoc_insertion_point(class_scope:city.economy.v1.GetPersonResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Person > persons_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdatePersonMoneyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.UpdatePersonMoneyRequest) */ {
 public:
  inline UpdatePersonMoneyRequest() : UpdatePersonMoneyRequest(nullptr) {}
  ~UpdatePersonMoneyRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdatePersonMoneyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePersonMoneyRequest(const UpdatePersonMoneyRequest& from);
  UpdatePersonMoneyRequest(UpdatePersonMoneyRequest&& from) noexcept
    : UpdatePersonMoneyRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePersonMoneyRequest& operator=(const UpdatePersonMoneyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePersonMoneyRequest& operator=(UpdatePersonMoneyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePersonMoneyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePersonMoneyRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePersonMoneyRequest*>(
               &_UpdatePersonMoneyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdatePersonMoneyRequest& a, UpdatePersonMoneyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePersonMoneyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePersonMoneyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePersonMoneyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePersonMoneyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePersonMoneyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdatePersonMoneyRequest& from) {
    UpdatePersonMoneyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePersonMoneyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.UpdatePersonMoneyRequest";
  }
  protected:
  explicit UpdatePersonMoneyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .city.economy.v1.UpdatePersonMoneyRequestItem items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::city::economy::v1::UpdatePersonMoneyRequestItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdatePersonMoneyRequestItem >*
      mutable_items();
  private:
  const ::city::economy::v1::UpdatePersonMoneyRequestItem& _internal_items(int index) const;
  ::city::economy::v1::UpdatePersonMoneyRequestItem* _internal_add_items();
  public:
  const ::city::economy::v1::UpdatePersonMoneyRequestItem& items(int index) const;
  ::city::economy::v1::UpdatePersonMoneyRequestItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdatePersonMoneyRequestItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:city.economy.v1.UpdatePersonMoneyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdatePersonMoneyRequestItem > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdatePersonMoneyRequestItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.UpdatePersonMoneyRequestItem) */ {
 public:
  inline UpdatePersonMoneyRequestItem() : UpdatePersonMoneyRequestItem(nullptr) {}
  ~UpdatePersonMoneyRequestItem() override;
  explicit PROTOBUF_CONSTEXPR UpdatePersonMoneyRequestItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePersonMoneyRequestItem(const UpdatePersonMoneyRequestItem& from);
  UpdatePersonMoneyRequestItem(UpdatePersonMoneyRequestItem&& from) noexcept
    : UpdatePersonMoneyRequestItem() {
    *this = ::std::move(from);
  }

  inline UpdatePersonMoneyRequestItem& operator=(const UpdatePersonMoneyRequestItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePersonMoneyRequestItem& operator=(UpdatePersonMoneyRequestItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePersonMoneyRequestItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePersonMoneyRequestItem* internal_default_instance() {
    return reinterpret_cast<const UpdatePersonMoneyRequestItem*>(
               &_UpdatePersonMoneyRequestItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdatePersonMoneyRequestItem& a, UpdatePersonMoneyRequestItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePersonMoneyRequestItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePersonMoneyRequestItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePersonMoneyRequestItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePersonMoneyRequestItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePersonMoneyRequestItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdatePersonMoneyRequestItem& from) {
    UpdatePersonMoneyRequestItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePersonMoneyRequestItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.UpdatePersonMoneyRequestItem";
  }
  protected:
  explicit UpdatePersonMoneyRequestItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoneyFieldNumber = 2,
    kPersonIdFieldNumber = 1,
  };
  // double money = 2 [json_name = "money"];
  void clear_money();
  double money() const;
  void set_money(double value);
  private:
  double _internal_money() const;
  void _internal_set_money(double value);
  public:

  // int32 person_id = 1 [json_name = "personId"];
  void clear_person_id();
  int32_t person_id() const;
  void set_person_id(int32_t value);
  private:
  int32_t _internal_person_id() const;
  void _internal_set_person_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v1.UpdatePersonMoneyRequestItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double money_;
    int32_t person_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdatePersonMoneyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v1.UpdatePersonMoneyResponse) */ {
 public:
  inline UpdatePersonMoneyResponse() : UpdatePersonMoneyResponse(nullptr) {}
  ~UpdatePersonMoneyResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdatePersonMoneyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePersonMoneyResponse(const UpdatePersonMoneyResponse& from);
  UpdatePersonMoneyResponse(UpdatePersonMoneyResponse&& from) noexcept
    : UpdatePersonMoneyResponse() {
    *this = ::std::move(from);
  }

  inline UpdatePersonMoneyResponse& operator=(const UpdatePersonMoneyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePersonMoneyResponse& operator=(UpdatePersonMoneyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePersonMoneyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePersonMoneyResponse* internal_default_instance() {
    return reinterpret_cast<const UpdatePersonMoneyResponse*>(
               &_UpdatePersonMoneyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdatePersonMoneyResponse& a, UpdatePersonMoneyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePersonMoneyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePersonMoneyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePersonMoneyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePersonMoneyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePersonMoneyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdatePersonMoneyResponse& from) {
    UpdatePersonMoneyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePersonMoneyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v1.UpdatePersonMoneyResponse";
  }
  protected:
  explicit UpdatePersonMoneyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonsFieldNumber = 1,
  };
  // repeated .city.economy.v1.Person persons = 1 [json_name = "persons"];
  int persons_size() const;
  private:
  int _internal_persons_size() const;
  public:
  void clear_persons();
  ::city::economy::v1::Person* mutable_persons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Person >*
      mutable_persons();
  private:
  const ::city::economy::v1::Person& _internal_persons(int index) const;
  ::city::economy::v1::Person* _internal_add_persons();
  public:
  const ::city::economy::v1::Person& persons(int index) const;
  ::city::economy::v1::Person* add_persons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Person >&
      persons() const;

  // @@protoc_insertion_point(class_scope:city.economy.v1.UpdatePersonMoneyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Person > persons_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv1_2fperson_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetPersonRequest

// repeated int32 person_ids = 1 [json_name = "personIds"];
inline int GetPersonRequest::_internal_person_ids_size() const {
  return _impl_.person_ids_.size();
}
inline int GetPersonRequest::person_ids_size() const {
  return _internal_person_ids_size();
}
inline void GetPersonRequest::clear_person_ids() {
  _impl_.person_ids_.Clear();
}
inline int32_t GetPersonRequest::_internal_person_ids(int index) const {
  return _impl_.person_ids_.Get(index);
}
inline int32_t GetPersonRequest::person_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.GetPersonRequest.person_ids)
  return _internal_person_ids(index);
}
inline void GetPersonRequest::set_person_ids(int index, int32_t value) {
  _impl_.person_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v1.GetPersonRequest.person_ids)
}
inline void GetPersonRequest::_internal_add_person_ids(int32_t value) {
  _impl_.person_ids_.Add(value);
}
inline void GetPersonRequest::add_person_ids(int32_t value) {
  _internal_add_person_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v1.GetPersonRequest.person_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetPersonRequest::_internal_person_ids() const {
  return _impl_.person_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetPersonRequest::person_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.GetPersonRequest.person_ids)
  return _internal_person_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetPersonRequest::_internal_mutable_person_ids() {
  return &_impl_.person_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetPersonRequest::mutable_person_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.GetPersonRequest.person_ids)
  return _internal_mutable_person_ids();
}

// -------------------------------------------------------------------

// GetPersonResponse

// repeated .city.economy.v1.Person persons = 1 [json_name = "persons"];
inline int GetPersonResponse::_internal_persons_size() const {
  return _impl_.persons_.size();
}
inline int GetPersonResponse::persons_size() const {
  return _internal_persons_size();
}
inline ::city::economy::v1::Person* GetPersonResponse::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.GetPersonResponse.persons)
  return _impl_.persons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Person >*
GetPersonResponse::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.GetPersonResponse.persons)
  return &_impl_.persons_;
}
inline const ::city::economy::v1::Person& GetPersonResponse::_internal_persons(int index) const {
  return _impl_.persons_.Get(index);
}
inline const ::city::economy::v1::Person& GetPersonResponse::persons(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.GetPersonResponse.persons)
  return _internal_persons(index);
}
inline ::city::economy::v1::Person* GetPersonResponse::_internal_add_persons() {
  return _impl_.persons_.Add();
}
inline ::city::economy::v1::Person* GetPersonResponse::add_persons() {
  ::city::economy::v1::Person* _add = _internal_add_persons();
  // @@protoc_insertion_point(field_add:city.economy.v1.GetPersonResponse.persons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Person >&
GetPersonResponse::persons() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.GetPersonResponse.persons)
  return _impl_.persons_;
}

// -------------------------------------------------------------------

// UpdatePersonMoneyRequest

// repeated .city.economy.v1.UpdatePersonMoneyRequestItem items = 1 [json_name = "items"];
inline int UpdatePersonMoneyRequest::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int UpdatePersonMoneyRequest::items_size() const {
  return _internal_items_size();
}
inline void UpdatePersonMoneyRequest::clear_items() {
  _impl_.items_.Clear();
}
inline ::city::economy::v1::UpdatePersonMoneyRequestItem* UpdatePersonMoneyRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.UpdatePersonMoneyRequest.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdatePersonMoneyRequestItem >*
UpdatePersonMoneyRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.UpdatePersonMoneyRequest.items)
  return &_impl_.items_;
}
inline const ::city::economy::v1::UpdatePersonMoneyRequestItem& UpdatePersonMoneyRequest::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::city::economy::v1::UpdatePersonMoneyRequestItem& UpdatePersonMoneyRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdatePersonMoneyRequest.items)
  return _internal_items(index);
}
inline ::city::economy::v1::UpdatePersonMoneyRequestItem* UpdatePersonMoneyRequest::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::city::economy::v1::UpdatePersonMoneyRequestItem* UpdatePersonMoneyRequest::add_items() {
  ::city::economy::v1::UpdatePersonMoneyRequestItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:city.economy.v1.UpdatePersonMoneyRequest.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::UpdatePersonMoneyRequestItem >&
UpdatePersonMoneyRequest::items() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.UpdatePersonMoneyRequest.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// UpdatePersonMoneyRequestItem

// int32 person_id = 1 [json_name = "personId"];
inline void UpdatePersonMoneyRequestItem::clear_person_id() {
  _impl_.person_id_ = 0;
}
inline int32_t UpdatePersonMoneyRequestItem::_internal_person_id() const {
  return _impl_.person_id_;
}
inline int32_t UpdatePersonMoneyRequestItem::person_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdatePersonMoneyRequestItem.person_id)
  return _internal_person_id();
}
inline void UpdatePersonMoneyRequestItem::_internal_set_person_id(int32_t value) {
  
  _impl_.person_id_ = value;
}
inline void UpdatePersonMoneyRequestItem::set_person_id(int32_t value) {
  _internal_set_person_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.UpdatePersonMoneyRequestItem.person_id)
}

// double money = 2 [json_name = "money"];
inline void UpdatePersonMoneyRequestItem::clear_money() {
  _impl_.money_ = 0;
}
inline double UpdatePersonMoneyRequestItem::_internal_money() const {
  return _impl_.money_;
}
inline double UpdatePersonMoneyRequestItem::money() const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdatePersonMoneyRequestItem.money)
  return _internal_money();
}
inline void UpdatePersonMoneyRequestItem::_internal_set_money(double value) {
  
  _impl_.money_ = value;
}
inline void UpdatePersonMoneyRequestItem::set_money(double value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:city.economy.v1.UpdatePersonMoneyRequestItem.money)
}

// -------------------------------------------------------------------

// UpdatePersonMoneyResponse

// repeated .city.economy.v1.Person persons = 1 [json_name = "persons"];
inline int UpdatePersonMoneyResponse::_internal_persons_size() const {
  return _impl_.persons_.size();
}
inline int UpdatePersonMoneyResponse::persons_size() const {
  return _internal_persons_size();
}
inline ::city::economy::v1::Person* UpdatePersonMoneyResponse::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v1.UpdatePersonMoneyResponse.persons)
  return _impl_.persons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Person >*
UpdatePersonMoneyResponse::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v1.UpdatePersonMoneyResponse.persons)
  return &_impl_.persons_;
}
inline const ::city::economy::v1::Person& UpdatePersonMoneyResponse::_internal_persons(int index) const {
  return _impl_.persons_.Get(index);
}
inline const ::city::economy::v1::Person& UpdatePersonMoneyResponse::persons(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v1.UpdatePersonMoneyResponse.persons)
  return _internal_persons(index);
}
inline ::city::economy::v1::Person* UpdatePersonMoneyResponse::_internal_add_persons() {
  return _impl_.persons_.Add();
}
inline ::city::economy::v1::Person* UpdatePersonMoneyResponse::add_persons() {
  ::city::economy::v1::Person* _add = _internal_add_persons();
  // @@protoc_insertion_point(field_add:city.economy.v1.UpdatePersonMoneyResponse.persons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v1::Person >&
UpdatePersonMoneyResponse::persons() const {
  // @@protoc_insertion_point(field_list:city.economy.v1.UpdatePersonMoneyResponse.persons)
  return _impl_.persons_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace economy
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv1_2fperson_5fservice_2eproto
