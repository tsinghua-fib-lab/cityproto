// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/economy/v2/economy.proto

#include "city/economy/v2/economy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace economy {
namespace v2 {
PROTOBUF_CONSTEXPR Org::Org(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.nominal_gdp_)*/{}
  , /*decltype(_impl_.real_gdp_)*/{}
  , /*decltype(_impl_.unemployment_)*/{}
  , /*decltype(_impl_.wages_)*/{}
  , /*decltype(_impl_.prices_)*/{}
  , /*decltype(_impl_.bracket_cutoffs_)*/{}
  , /*decltype(_impl_.bracket_rates_)*/{}
  , /*decltype(_impl_.consumption_currency_)*/{}
  , /*decltype(_impl_.consumption_propensity_)*/{}
  , /*decltype(_impl_.income_currency_)*/{}
  , /*decltype(_impl_.depression_)*/{}
  , /*decltype(_impl_.locus_control_)*/{}
  , /*decltype(_impl_.working_hours_)*/{}
  , /*decltype(_impl_.employees_)*/{}
  , /*decltype(_impl_._employees_cached_byte_size_)*/{0}
  , /*decltype(_impl_.citizens_)*/{}
  , /*decltype(_impl_._citizens_cached_byte_size_)*/{0}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.inventory_)*/0
  , /*decltype(_impl_.price_)*/0
  , /*decltype(_impl_.currency_)*/0
  , /*decltype(_impl_.interest_rate_)*/0
  , /*decltype(_impl_.demand_)*/0
  , /*decltype(_impl_.sales_)*/0} {}
struct OrgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrgDefaultTypeInternal() {}
  union {
    Org _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrgDefaultTypeInternal _Org_default_instance_;
PROTOBUF_CONSTEXPR Agent::Agent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.currency_)*/0
  , /*decltype(_impl_.firm_id_)*/0
  , /*decltype(_impl_.skill_)*/0
  , /*decltype(_impl_.consumption_)*/0
  , /*decltype(_impl_.income_)*/0} {}
struct AgentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentDefaultTypeInternal() {}
  union {
    Agent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentDefaultTypeInternal _Agent_default_instance_;
PROTOBUF_CONSTEXPR EconomyEntities::EconomyEntities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orgs_)*/{}
  , /*decltype(_impl_.agents_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EconomyEntitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EconomyEntitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EconomyEntitiesDefaultTypeInternal() {}
  union {
    EconomyEntities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EconomyEntitiesDefaultTypeInternal _EconomyEntities_default_instance_;
}  // namespace v2
}  // namespace economy
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2feconomy_2fv2_2feconomy_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_city_2feconomy_2fv2_2feconomy_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2feconomy_2fv2_2feconomy_2eproto = nullptr;

const uint32_t TableStruct_city_2feconomy_2fv2_2feconomy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.nominal_gdp_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.real_gdp_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.unemployment_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.wages_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.prices_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.inventory_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.price_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.interest_rate_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.bracket_cutoffs_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.bracket_rates_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.consumption_currency_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.consumption_propensity_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.income_currency_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.depression_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.locus_control_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.working_hours_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.employees_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.citizens_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.demand_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Org, _impl_.sales_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Agent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Agent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Agent, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Agent, _impl_.currency_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Agent, _impl_.firm_id_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Agent, _impl_.skill_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Agent, _impl_.consumption_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::Agent, _impl_.income_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::EconomyEntities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::EconomyEntities, _impl_.orgs_),
  PROTOBUF_FIELD_OFFSET(::city::economy::v2::EconomyEntities, _impl_.agents_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 29, -1, sizeof(::city::economy::v2::Org)},
  { 52, 64, -1, sizeof(::city::economy::v2::Agent)},
  { 70, -1, -1, sizeof(::city::economy::v2::EconomyEntities)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::economy::v2::_Org_default_instance_._instance,
  &::city::economy::v2::_Agent_default_instance_._instance,
  &::city::economy::v2::_EconomyEntities_default_instance_._instance,
};

const char descriptor_table_protodef_city_2feconomy_2fv2_2feconomy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035city/economy/v2/economy.proto\022\017city.ec"
  "onomy.v2\"\343\006\n\003Org\022\016\n\002id\030\001 \001(\005R\002id\022,\n\004type"
  "\030\002 \001(\0162\030.city.economy.v2.OrgTypeR\004type\022\037"
  "\n\013nominal_gdp\030\003 \003(\002R\nnominalGdp\022\031\n\010real_"
  "gdp\030\004 \003(\002R\007realGdp\022\"\n\014unemployment\030\005 \003(\002"
  "R\014unemployment\022\024\n\005wages\030\006 \003(\002R\005wages\022\026\n\006"
  "prices\030\007 \003(\002R\006prices\022!\n\tinventory\030\010 \001(\005H"
  "\000R\tinventory\210\001\001\022\031\n\005price\030\t \001(\002H\001R\005price\210"
  "\001\001\022\037\n\010currency\030\n \001(\002H\002R\010currency\210\001\001\022(\n\ri"
  "nterest_rate\030\013 \001(\002H\003R\014interestRate\210\001\001\022\'\n"
  "\017bracket_cutoffs\030\014 \003(\002R\016bracketCutoffs\022#"
  "\n\rbracket_rates\030\r \003(\002R\014bracketRates\0221\n\024c"
  "onsumption_currency\030\016 \003(\002R\023consumptionCu"
  "rrency\0225\n\026consumption_propensity\030\017 \003(\002R\025"
  "consumptionPropensity\022\'\n\017income_currency"
  "\030\020 \003(\002R\016incomeCurrency\022\036\n\ndepression\030\021 \003"
  "(\002R\ndepression\022#\n\rlocus_control\030\022 \003(\002R\014l"
  "ocusControl\022#\n\rworking_hours\030\023 \003(\002R\014work"
  "ingHours\022\034\n\temployees\030\024 \003(\005R\temployees\022\032"
  "\n\010citizens\030\025 \003(\005R\010citizens\022\033\n\006demand\030\026 \001"
  "(\005H\004R\006demand\210\001\001\022\031\n\005sales\030\027 \001(\005H\005R\005sales\210"
  "\001\001B\014\n\n_inventoryB\010\n\006_priceB\013\n\t_currencyB"
  "\020\n\016_interest_rateB\t\n\007_demandB\010\n\006_sales\"\363"
  "\001\n\005Agent\022\016\n\002id\030\001 \001(\005R\002id\022\037\n\010currency\030\002 \001"
  "(\002H\000R\010currency\210\001\001\022\034\n\007firm_id\030\003 \001(\005H\001R\006fi"
  "rmId\210\001\001\022\031\n\005skill\030\004 \001(\002H\002R\005skill\210\001\001\022%\n\013co"
  "nsumption\030\005 \001(\002H\003R\013consumption\210\001\001\022\033\n\006inc"
  "ome\030\006 \001(\002H\004R\006income\210\001\001B\013\n\t_currencyB\n\n\010_"
  "firm_idB\010\n\006_skillB\016\n\014_consumptionB\t\n\007_in"
  "come\"k\n\017EconomyEntities\022(\n\004orgs\030\001 \003(\0132\024."
  "city.economy.v2.OrgR\004orgs\022.\n\006agents\030\002 \003("
  "\0132\026.city.economy.v2.AgentR\006agents*t\n\007Org"
  "Type\022\030\n\024ORG_TYPE_UNSPECIFIED\020\000\022\020\n\014ORG_TY"
  "PE_NBS\020\001\022\021\n\rORG_TYPE_FIRM\020\002\022\021\n\rORG_TYPE_"
  "BANK\020\003\022\027\n\023ORG_TYPE_GOVERNMENT\020\004B\274\001\n\023com."
  "city.economy.v2B\014EconomyProtoP\001Z9git.fib"
  "lab.net/sim/protos/v2/go/city/economy/v2"
  ";economyv2\242\002\003CEX\252\002\017City.Economy.V2\312\002\017Cit"
  "y\\Economy\\V2\342\002\033City\\Economy\\V2\\GPBMetada"
  "ta\352\002\021City::Economy::V2b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_city_2feconomy_2fv2_2feconomy_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2feconomy_2fv2_2feconomy_2eproto = {
    false, false, 1590, descriptor_table_protodef_city_2feconomy_2fv2_2feconomy_2eproto,
    "city/economy/v2/economy.proto",
    &descriptor_table_city_2feconomy_2fv2_2feconomy_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_city_2feconomy_2fv2_2feconomy_2eproto::offsets,
    file_level_metadata_city_2feconomy_2fv2_2feconomy_2eproto, file_level_enum_descriptors_city_2feconomy_2fv2_2feconomy_2eproto,
    file_level_service_descriptors_city_2feconomy_2fv2_2feconomy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2feconomy_2fv2_2feconomy_2eproto_getter() {
  return &descriptor_table_city_2feconomy_2fv2_2feconomy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2feconomy_2fv2_2feconomy_2eproto(&descriptor_table_city_2feconomy_2fv2_2feconomy_2eproto);
namespace city {
namespace economy {
namespace v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2feconomy_2fv2_2feconomy_2eproto);
  return file_level_enum_descriptors_city_2feconomy_2fv2_2feconomy_2eproto[0];
}
bool OrgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Org::_Internal {
 public:
  using HasBits = decltype(std::declval<Org>()._impl_._has_bits_);
  static void set_has_inventory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_interest_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_demand(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sales(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

Org::Org(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.economy.v2.Org)
}
Org::Org(const Org& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Org* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nominal_gdp_){from._impl_.nominal_gdp_}
    , decltype(_impl_.real_gdp_){from._impl_.real_gdp_}
    , decltype(_impl_.unemployment_){from._impl_.unemployment_}
    , decltype(_impl_.wages_){from._impl_.wages_}
    , decltype(_impl_.prices_){from._impl_.prices_}
    , decltype(_impl_.bracket_cutoffs_){from._impl_.bracket_cutoffs_}
    , decltype(_impl_.bracket_rates_){from._impl_.bracket_rates_}
    , decltype(_impl_.consumption_currency_){from._impl_.consumption_currency_}
    , decltype(_impl_.consumption_propensity_){from._impl_.consumption_propensity_}
    , decltype(_impl_.income_currency_){from._impl_.income_currency_}
    , decltype(_impl_.depression_){from._impl_.depression_}
    , decltype(_impl_.locus_control_){from._impl_.locus_control_}
    , decltype(_impl_.working_hours_){from._impl_.working_hours_}
    , decltype(_impl_.employees_){from._impl_.employees_}
    , /*decltype(_impl_._employees_cached_byte_size_)*/{0}
    , decltype(_impl_.citizens_){from._impl_.citizens_}
    , /*decltype(_impl_._citizens_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.inventory_){}
    , decltype(_impl_.price_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.interest_rate_){}
    , decltype(_impl_.demand_){}
    , decltype(_impl_.sales_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sales_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.sales_));
  // @@protoc_insertion_point(copy_constructor:city.economy.v2.Org)
}

inline void Org::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.nominal_gdp_){arena}
    , decltype(_impl_.real_gdp_){arena}
    , decltype(_impl_.unemployment_){arena}
    , decltype(_impl_.wages_){arena}
    , decltype(_impl_.prices_){arena}
    , decltype(_impl_.bracket_cutoffs_){arena}
    , decltype(_impl_.bracket_rates_){arena}
    , decltype(_impl_.consumption_currency_){arena}
    , decltype(_impl_.consumption_propensity_){arena}
    , decltype(_impl_.income_currency_){arena}
    , decltype(_impl_.depression_){arena}
    , decltype(_impl_.locus_control_){arena}
    , decltype(_impl_.working_hours_){arena}
    , decltype(_impl_.employees_){arena}
    , /*decltype(_impl_._employees_cached_byte_size_)*/{0}
    , decltype(_impl_.citizens_){arena}
    , /*decltype(_impl_._citizens_cached_byte_size_)*/{0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.inventory_){0}
    , decltype(_impl_.price_){0}
    , decltype(_impl_.currency_){0}
    , decltype(_impl_.interest_rate_){0}
    , decltype(_impl_.demand_){0}
    , decltype(_impl_.sales_){0}
  };
}

Org::~Org() {
  // @@protoc_insertion_point(destructor:city.economy.v2.Org)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Org::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nominal_gdp_.~RepeatedField();
  _impl_.real_gdp_.~RepeatedField();
  _impl_.unemployment_.~RepeatedField();
  _impl_.wages_.~RepeatedField();
  _impl_.prices_.~RepeatedField();
  _impl_.bracket_cutoffs_.~RepeatedField();
  _impl_.bracket_rates_.~RepeatedField();
  _impl_.consumption_currency_.~RepeatedField();
  _impl_.consumption_propensity_.~RepeatedField();
  _impl_.income_currency_.~RepeatedField();
  _impl_.depression_.~RepeatedField();
  _impl_.locus_control_.~RepeatedField();
  _impl_.working_hours_.~RepeatedField();
  _impl_.employees_.~RepeatedField();
  _impl_.citizens_.~RepeatedField();
}

void Org::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Org::Clear() {
// @@protoc_insertion_point(message_clear_start:city.economy.v2.Org)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nominal_gdp_.Clear();
  _impl_.real_gdp_.Clear();
  _impl_.unemployment_.Clear();
  _impl_.wages_.Clear();
  _impl_.prices_.Clear();
  _impl_.bracket_cutoffs_.Clear();
  _impl_.bracket_rates_.Clear();
  _impl_.consumption_currency_.Clear();
  _impl_.consumption_propensity_.Clear();
  _impl_.income_currency_.Clear();
  _impl_.depression_.Clear();
  _impl_.locus_control_.Clear();
  _impl_.working_hours_.Clear();
  _impl_.employees_.Clear();
  _impl_.citizens_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.inventory_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sales_) -
        reinterpret_cast<char*>(&_impl_.inventory_)) + sizeof(_impl_.sales_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Org::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.economy.v2.OrgType type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::city::economy::v2::OrgType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated float nominal_gdp = 3 [json_name = "nominalGdp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_nominal_gdp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 29) {
          _internal_add_nominal_gdp(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float real_gdp = 4 [json_name = "realGdp"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_real_gdp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 37) {
          _internal_add_real_gdp(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float unemployment = 5 [json_name = "unemployment"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_unemployment(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_unemployment(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float wages = 6 [json_name = "wages"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_wages(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 53) {
          _internal_add_wages(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float prices = 7 [json_name = "prices"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_prices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 61) {
          _internal_add_prices(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 inventory = 8 [json_name = "inventory"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_inventory(&has_bits);
          _impl_.inventory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float price = 9 [json_name = "price"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_price(&has_bits);
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float currency = 10 [json_name = "currency"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_currency(&has_bits);
          _impl_.currency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float interest_rate = 11 [json_name = "interestRate"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_interest_rate(&has_bits);
          _impl_.interest_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float bracket_cutoffs = 12 [json_name = "bracketCutoffs"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bracket_cutoffs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 101) {
          _internal_add_bracket_cutoffs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float bracket_rates = 13 [json_name = "bracketRates"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bracket_rates(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 109) {
          _internal_add_bracket_rates(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float consumption_currency = 14 [json_name = "consumptionCurrency"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_consumption_currency(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 117) {
          _internal_add_consumption_currency(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float consumption_propensity = 15 [json_name = "consumptionPropensity"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_consumption_propensity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 125) {
          _internal_add_consumption_propensity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float income_currency = 16 [json_name = "incomeCurrency"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_income_currency(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 133) {
          _internal_add_income_currency(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float depression = 17 [json_name = "depression"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_depression(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 141) {
          _internal_add_depression(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float locus_control = 18 [json_name = "locusControl"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_locus_control(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 149) {
          _internal_add_locus_control(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float working_hours = 19 [json_name = "workingHours"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_working_hours(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 157) {
          _internal_add_working_hours(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 employees = 20 [json_name = "employees"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_employees(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 160) {
          _internal_add_employees(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 citizens = 21 [json_name = "citizens"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_citizens(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 168) {
          _internal_add_citizens(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 demand = 22 [json_name = "demand"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_demand(&has_bits);
          _impl_.demand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sales = 23 [json_name = "sales"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_sales(&has_bits);
          _impl_.sales_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Org::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.economy.v2.Org)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .city.economy.v2.OrgType type = 2 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated float nominal_gdp = 3 [json_name = "nominalGdp"];
  if (this->_internal_nominal_gdp_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_nominal_gdp(), target);
  }

  // repeated float real_gdp = 4 [json_name = "realGdp"];
  if (this->_internal_real_gdp_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_real_gdp(), target);
  }

  // repeated float unemployment = 5 [json_name = "unemployment"];
  if (this->_internal_unemployment_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_unemployment(), target);
  }

  // repeated float wages = 6 [json_name = "wages"];
  if (this->_internal_wages_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_wages(), target);
  }

  // repeated float prices = 7 [json_name = "prices"];
  if (this->_internal_prices_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_prices(), target);
  }

  // optional int32 inventory = 8 [json_name = "inventory"];
  if (_internal_has_inventory()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_inventory(), target);
  }

  // optional float price = 9 [json_name = "price"];
  if (_internal_has_price()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_price(), target);
  }

  // optional float currency = 10 [json_name = "currency"];
  if (_internal_has_currency()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_currency(), target);
  }

  // optional float interest_rate = 11 [json_name = "interestRate"];
  if (_internal_has_interest_rate()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_interest_rate(), target);
  }

  // repeated float bracket_cutoffs = 12 [json_name = "bracketCutoffs"];
  if (this->_internal_bracket_cutoffs_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_bracket_cutoffs(), target);
  }

  // repeated float bracket_rates = 13 [json_name = "bracketRates"];
  if (this->_internal_bracket_rates_size() > 0) {
    target = stream->WriteFixedPacked(13, _internal_bracket_rates(), target);
  }

  // repeated float consumption_currency = 14 [json_name = "consumptionCurrency"];
  if (this->_internal_consumption_currency_size() > 0) {
    target = stream->WriteFixedPacked(14, _internal_consumption_currency(), target);
  }

  // repeated float consumption_propensity = 15 [json_name = "consumptionPropensity"];
  if (this->_internal_consumption_propensity_size() > 0) {
    target = stream->WriteFixedPacked(15, _internal_consumption_propensity(), target);
  }

  // repeated float income_currency = 16 [json_name = "incomeCurrency"];
  if (this->_internal_income_currency_size() > 0) {
    target = stream->WriteFixedPacked(16, _internal_income_currency(), target);
  }

  // repeated float depression = 17 [json_name = "depression"];
  if (this->_internal_depression_size() > 0) {
    target = stream->WriteFixedPacked(17, _internal_depression(), target);
  }

  // repeated float locus_control = 18 [json_name = "locusControl"];
  if (this->_internal_locus_control_size() > 0) {
    target = stream->WriteFixedPacked(18, _internal_locus_control(), target);
  }

  // repeated float working_hours = 19 [json_name = "workingHours"];
  if (this->_internal_working_hours_size() > 0) {
    target = stream->WriteFixedPacked(19, _internal_working_hours(), target);
  }

  // repeated int32 employees = 20 [json_name = "employees"];
  {
    int byte_size = _impl_._employees_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          20, _internal_employees(), byte_size, target);
    }
  }

  // repeated int32 citizens = 21 [json_name = "citizens"];
  {
    int byte_size = _impl_._citizens_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          21, _internal_citizens(), byte_size, target);
    }
  }

  // optional int32 demand = 22 [json_name = "demand"];
  if (_internal_has_demand()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_demand(), target);
  }

  // optional int32 sales = 23 [json_name = "sales"];
  if (_internal_has_sales()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_sales(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.economy.v2.Org)
  return target;
}

size_t Org::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.economy.v2.Org)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float nominal_gdp = 3 [json_name = "nominalGdp"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_nominal_gdp_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float real_gdp = 4 [json_name = "realGdp"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_real_gdp_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float unemployment = 5 [json_name = "unemployment"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_unemployment_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float wages = 6 [json_name = "wages"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_wages_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float prices = 7 [json_name = "prices"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_prices_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float bracket_cutoffs = 12 [json_name = "bracketCutoffs"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bracket_cutoffs_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float bracket_rates = 13 [json_name = "bracketRates"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bracket_rates_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float consumption_currency = 14 [json_name = "consumptionCurrency"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_consumption_currency_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float consumption_propensity = 15 [json_name = "consumptionPropensity"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_consumption_propensity_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float income_currency = 16 [json_name = "incomeCurrency"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_income_currency_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float depression = 17 [json_name = "depression"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_depression_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float locus_control = 18 [json_name = "locusControl"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_locus_control_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated float working_hours = 19 [json_name = "workingHours"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_working_hours_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 employees = 20 [json_name = "employees"];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.employees_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._employees_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 citizens = 21 [json_name = "citizens"];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.citizens_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._citizens_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .city.economy.v2.OrgType type = 2 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 inventory = 8 [json_name = "inventory"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_inventory());
    }

    // optional float price = 9 [json_name = "price"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float currency = 10 [json_name = "currency"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float interest_rate = 11 [json_name = "interestRate"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 demand = 22 [json_name = "demand"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_demand());
    }

    // optional int32 sales = 23 [json_name = "sales"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_sales());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Org::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Org::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Org::GetClassData() const { return &_class_data_; }


void Org::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Org*>(&to_msg);
  auto& from = static_cast<const Org&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.economy.v2.Org)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nominal_gdp_.MergeFrom(from._impl_.nominal_gdp_);
  _this->_impl_.real_gdp_.MergeFrom(from._impl_.real_gdp_);
  _this->_impl_.unemployment_.MergeFrom(from._impl_.unemployment_);
  _this->_impl_.wages_.MergeFrom(from._impl_.wages_);
  _this->_impl_.prices_.MergeFrom(from._impl_.prices_);
  _this->_impl_.bracket_cutoffs_.MergeFrom(from._impl_.bracket_cutoffs_);
  _this->_impl_.bracket_rates_.MergeFrom(from._impl_.bracket_rates_);
  _this->_impl_.consumption_currency_.MergeFrom(from._impl_.consumption_currency_);
  _this->_impl_.consumption_propensity_.MergeFrom(from._impl_.consumption_propensity_);
  _this->_impl_.income_currency_.MergeFrom(from._impl_.income_currency_);
  _this->_impl_.depression_.MergeFrom(from._impl_.depression_);
  _this->_impl_.locus_control_.MergeFrom(from._impl_.locus_control_);
  _this->_impl_.working_hours_.MergeFrom(from._impl_.working_hours_);
  _this->_impl_.employees_.MergeFrom(from._impl_.employees_);
  _this->_impl_.citizens_.MergeFrom(from._impl_.citizens_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.inventory_ = from._impl_.inventory_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.price_ = from._impl_.price_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.currency_ = from._impl_.currency_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.interest_rate_ = from._impl_.interest_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.demand_ = from._impl_.demand_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.sales_ = from._impl_.sales_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Org::CopyFrom(const Org& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.economy.v2.Org)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Org::IsInitialized() const {
  return true;
}

void Org::InternalSwap(Org* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.nominal_gdp_.InternalSwap(&other->_impl_.nominal_gdp_);
  _impl_.real_gdp_.InternalSwap(&other->_impl_.real_gdp_);
  _impl_.unemployment_.InternalSwap(&other->_impl_.unemployment_);
  _impl_.wages_.InternalSwap(&other->_impl_.wages_);
  _impl_.prices_.InternalSwap(&other->_impl_.prices_);
  _impl_.bracket_cutoffs_.InternalSwap(&other->_impl_.bracket_cutoffs_);
  _impl_.bracket_rates_.InternalSwap(&other->_impl_.bracket_rates_);
  _impl_.consumption_currency_.InternalSwap(&other->_impl_.consumption_currency_);
  _impl_.consumption_propensity_.InternalSwap(&other->_impl_.consumption_propensity_);
  _impl_.income_currency_.InternalSwap(&other->_impl_.income_currency_);
  _impl_.depression_.InternalSwap(&other->_impl_.depression_);
  _impl_.locus_control_.InternalSwap(&other->_impl_.locus_control_);
  _impl_.working_hours_.InternalSwap(&other->_impl_.working_hours_);
  _impl_.employees_.InternalSwap(&other->_impl_.employees_);
  _impl_.citizens_.InternalSwap(&other->_impl_.citizens_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Org, _impl_.sales_)
      + sizeof(Org::_impl_.sales_)
      - PROTOBUF_FIELD_OFFSET(Org, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Org::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2feconomy_2fv2_2feconomy_2eproto_getter, &descriptor_table_city_2feconomy_2fv2_2feconomy_2eproto_once,
      file_level_metadata_city_2feconomy_2fv2_2feconomy_2eproto[0]);
}

// ===================================================================

class Agent::_Internal {
 public:
  using HasBits = decltype(std::declval<Agent>()._impl_._has_bits_);
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_firm_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_skill(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_consumption(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_income(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

Agent::Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.economy.v2.Agent)
}
Agent::Agent(const Agent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Agent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.currency_){}
    , decltype(_impl_.firm_id_){}
    , decltype(_impl_.skill_){}
    , decltype(_impl_.consumption_){}
    , decltype(_impl_.income_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.income_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.income_));
  // @@protoc_insertion_point(copy_constructor:city.economy.v2.Agent)
}

inline void Agent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.currency_){0}
    , decltype(_impl_.firm_id_){0}
    , decltype(_impl_.skill_){0}
    , decltype(_impl_.consumption_){0}
    , decltype(_impl_.income_){0}
  };
}

Agent::~Agent() {
  // @@protoc_insertion_point(destructor:city.economy.v2.Agent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Agent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Agent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Agent::Clear() {
// @@protoc_insertion_point(message_clear_start:city.economy.v2.Agent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.currency_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.income_) -
        reinterpret_cast<char*>(&_impl_.currency_)) + sizeof(_impl_.income_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Agent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float currency = 2 [json_name = "currency"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_currency(&has_bits);
          _impl_.currency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 firm_id = 3 [json_name = "firmId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_firm_id(&has_bits);
          _impl_.firm_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float skill = 4 [json_name = "skill"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_skill(&has_bits);
          _impl_.skill_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float consumption = 5 [json_name = "consumption"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_consumption(&has_bits);
          _impl_.consumption_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float income = 6 [json_name = "income"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_income(&has_bits);
          _impl_.income_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Agent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.economy.v2.Agent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional float currency = 2 [json_name = "currency"];
  if (_internal_has_currency()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_currency(), target);
  }

  // optional int32 firm_id = 3 [json_name = "firmId"];
  if (_internal_has_firm_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_firm_id(), target);
  }

  // optional float skill = 4 [json_name = "skill"];
  if (_internal_has_skill()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_skill(), target);
  }

  // optional float consumption = 5 [json_name = "consumption"];
  if (_internal_has_consumption()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_consumption(), target);
  }

  // optional float income = 6 [json_name = "income"];
  if (_internal_has_income()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_income(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.economy.v2.Agent)
  return target;
}

size_t Agent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.economy.v2.Agent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional float currency = 2 [json_name = "currency"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional int32 firm_id = 3 [json_name = "firmId"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_firm_id());
    }

    // optional float skill = 4 [json_name = "skill"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float consumption = 5 [json_name = "consumption"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float income = 6 [json_name = "income"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Agent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Agent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Agent::GetClassData() const { return &_class_data_; }


void Agent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Agent*>(&to_msg);
  auto& from = static_cast<const Agent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.economy.v2.Agent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.currency_ = from._impl_.currency_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.firm_id_ = from._impl_.firm_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.skill_ = from._impl_.skill_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.consumption_ = from._impl_.consumption_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.income_ = from._impl_.income_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Agent::CopyFrom(const Agent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.economy.v2.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Agent::IsInitialized() const {
  return true;
}

void Agent::InternalSwap(Agent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Agent, _impl_.income_)
      + sizeof(Agent::_impl_.income_)
      - PROTOBUF_FIELD_OFFSET(Agent, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Agent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2feconomy_2fv2_2feconomy_2eproto_getter, &descriptor_table_city_2feconomy_2fv2_2feconomy_2eproto_once,
      file_level_metadata_city_2feconomy_2fv2_2feconomy_2eproto[1]);
}

// ===================================================================

class EconomyEntities::_Internal {
 public:
};

EconomyEntities::EconomyEntities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.economy.v2.EconomyEntities)
}
EconomyEntities::EconomyEntities(const EconomyEntities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EconomyEntities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orgs_){from._impl_.orgs_}
    , decltype(_impl_.agents_){from._impl_.agents_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.economy.v2.EconomyEntities)
}

inline void EconomyEntities::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.orgs_){arena}
    , decltype(_impl_.agents_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EconomyEntities::~EconomyEntities() {
  // @@protoc_insertion_point(destructor:city.economy.v2.EconomyEntities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EconomyEntities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.orgs_.~RepeatedPtrField();
  _impl_.agents_.~RepeatedPtrField();
}

void EconomyEntities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EconomyEntities::Clear() {
// @@protoc_insertion_point(message_clear_start:city.economy.v2.EconomyEntities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.orgs_.Clear();
  _impl_.agents_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EconomyEntities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .city.economy.v2.Org orgs = 1 [json_name = "orgs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .city.economy.v2.Agent agents = 2 [json_name = "agents"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EconomyEntities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.economy.v2.EconomyEntities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .city.economy.v2.Org orgs = 1 [json_name = "orgs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orgs_size()); i < n; i++) {
    const auto& repfield = this->_internal_orgs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .city.economy.v2.Agent agents = 2 [json_name = "agents"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_agents_size()); i < n; i++) {
    const auto& repfield = this->_internal_agents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.economy.v2.EconomyEntities)
  return target;
}

size_t EconomyEntities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.economy.v2.EconomyEntities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.economy.v2.Org orgs = 1 [json_name = "orgs"];
  total_size += 1UL * this->_internal_orgs_size();
  for (const auto& msg : this->_impl_.orgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .city.economy.v2.Agent agents = 2 [json_name = "agents"];
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->_impl_.agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EconomyEntities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EconomyEntities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EconomyEntities::GetClassData() const { return &_class_data_; }


void EconomyEntities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EconomyEntities*>(&to_msg);
  auto& from = static_cast<const EconomyEntities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.economy.v2.EconomyEntities)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.orgs_.MergeFrom(from._impl_.orgs_);
  _this->_impl_.agents_.MergeFrom(from._impl_.agents_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EconomyEntities::CopyFrom(const EconomyEntities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.economy.v2.EconomyEntities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EconomyEntities::IsInitialized() const {
  return true;
}

void EconomyEntities::InternalSwap(EconomyEntities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.orgs_.InternalSwap(&other->_impl_.orgs_);
  _impl_.agents_.InternalSwap(&other->_impl_.agents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EconomyEntities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2feconomy_2fv2_2feconomy_2eproto_getter, &descriptor_table_city_2feconomy_2fv2_2feconomy_2eproto_once,
      file_level_metadata_city_2feconomy_2fv2_2feconomy_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace economy
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::economy::v2::Org*
Arena::CreateMaybeMessage< ::city::economy::v2::Org >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::economy::v2::Org >(arena);
}
template<> PROTOBUF_NOINLINE ::city::economy::v2::Agent*
Arena::CreateMaybeMessage< ::city::economy::v2::Agent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::economy::v2::Agent >(arena);
}
template<> PROTOBUF_NOINLINE ::city::economy::v2::EconomyEntities*
Arena::CreateMaybeMessage< ::city::economy::v2::EconomyEntities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::economy::v2::EconomyEntities >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
