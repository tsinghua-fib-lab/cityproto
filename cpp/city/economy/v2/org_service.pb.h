// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/economy/v2/org_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv2_2forg_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv2_2forg_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "city/economy/v2/economy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2feconomy_2fv2_2forg_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2feconomy_2fv2_2forg_5fservice_2eproto;
namespace city {
namespace economy {
namespace v2 {
class AddAgentRequest;
struct AddAgentRequestDefaultTypeInternal;
extern AddAgentRequestDefaultTypeInternal _AddAgentRequest_default_instance_;
class AddAgentResponse;
struct AddAgentResponseDefaultTypeInternal;
extern AddAgentResponseDefaultTypeInternal _AddAgentResponse_default_instance_;
class AddOrgRequest;
struct AddOrgRequestDefaultTypeInternal;
extern AddOrgRequestDefaultTypeInternal _AddOrgRequest_default_instance_;
class AddOrgResponse;
struct AddOrgResponseDefaultTypeInternal;
extern AddOrgResponseDefaultTypeInternal _AddOrgResponse_default_instance_;
class BatchDeltaUpdateRequest;
struct BatchDeltaUpdateRequestDefaultTypeInternal;
extern BatchDeltaUpdateRequestDefaultTypeInternal _BatchDeltaUpdateRequest_default_instance_;
class BatchDeltaUpdateResponse;
struct BatchDeltaUpdateResponseDefaultTypeInternal;
extern BatchDeltaUpdateResponseDefaultTypeInternal _BatchDeltaUpdateResponse_default_instance_;
class BatchGetRequest;
struct BatchGetRequestDefaultTypeInternal;
extern BatchGetRequestDefaultTypeInternal _BatchGetRequest_default_instance_;
class BatchGetResponse;
struct BatchGetResponseDefaultTypeInternal;
extern BatchGetResponseDefaultTypeInternal _BatchGetResponse_default_instance_;
class BatchSetRequest;
struct BatchSetRequestDefaultTypeInternal;
extern BatchSetRequestDefaultTypeInternal _BatchSetRequest_default_instance_;
class BatchSetResponse;
struct BatchSetResponseDefaultTypeInternal;
extern BatchSetResponseDefaultTypeInternal _BatchSetResponse_default_instance_;
class BatchUpdateRequest;
struct BatchUpdateRequestDefaultTypeInternal;
extern BatchUpdateRequestDefaultTypeInternal _BatchUpdateRequest_default_instance_;
class BatchUpdateResponse;
struct BatchUpdateResponseDefaultTypeInternal;
extern BatchUpdateResponseDefaultTypeInternal _BatchUpdateResponse_default_instance_;
class CalculateConsumptionRequest;
struct CalculateConsumptionRequestDefaultTypeInternal;
extern CalculateConsumptionRequestDefaultTypeInternal _CalculateConsumptionRequest_default_instance_;
class CalculateConsumptionResponse;
struct CalculateConsumptionResponseDefaultTypeInternal;
extern CalculateConsumptionResponseDefaultTypeInternal _CalculateConsumptionResponse_default_instance_;
class CalculateInterestRequest;
struct CalculateInterestRequestDefaultTypeInternal;
extern CalculateInterestRequestDefaultTypeInternal _CalculateInterestRequest_default_instance_;
class CalculateInterestResponse;
struct CalculateInterestResponseDefaultTypeInternal;
extern CalculateInterestResponseDefaultTypeInternal _CalculateInterestResponse_default_instance_;
class CalculateRealGDPRequest;
struct CalculateRealGDPRequestDefaultTypeInternal;
extern CalculateRealGDPRequestDefaultTypeInternal _CalculateRealGDPRequest_default_instance_;
class CalculateRealGDPResponse;
struct CalculateRealGDPResponseDefaultTypeInternal;
extern CalculateRealGDPResponseDefaultTypeInternal _CalculateRealGDPResponse_default_instance_;
class CalculateTaxesDueRequest;
struct CalculateTaxesDueRequestDefaultTypeInternal;
extern CalculateTaxesDueRequestDefaultTypeInternal _CalculateTaxesDueRequest_default_instance_;
class CalculateTaxesDueResponse;
struct CalculateTaxesDueResponseDefaultTypeInternal;
extern CalculateTaxesDueResponseDefaultTypeInternal _CalculateTaxesDueResponse_default_instance_;
class DeltaUpdateAgentRequest;
struct DeltaUpdateAgentRequestDefaultTypeInternal;
extern DeltaUpdateAgentRequestDefaultTypeInternal _DeltaUpdateAgentRequest_default_instance_;
class DeltaUpdateAgentResponse;
struct DeltaUpdateAgentResponseDefaultTypeInternal;
extern DeltaUpdateAgentResponseDefaultTypeInternal _DeltaUpdateAgentResponse_default_instance_;
class DeltaUpdateOrgRequest;
struct DeltaUpdateOrgRequestDefaultTypeInternal;
extern DeltaUpdateOrgRequestDefaultTypeInternal _DeltaUpdateOrgRequest_default_instance_;
class DeltaUpdateOrgResponse;
struct DeltaUpdateOrgResponseDefaultTypeInternal;
extern DeltaUpdateOrgResponseDefaultTypeInternal _DeltaUpdateOrgResponse_default_instance_;
class GetAgentRequest;
struct GetAgentRequestDefaultTypeInternal;
extern GetAgentRequestDefaultTypeInternal _GetAgentRequest_default_instance_;
class GetAgentResponse;
struct GetAgentResponseDefaultTypeInternal;
extern GetAgentResponseDefaultTypeInternal _GetAgentResponse_default_instance_;
class GetOrgRequest;
struct GetOrgRequestDefaultTypeInternal;
extern GetOrgRequestDefaultTypeInternal _GetOrgRequest_default_instance_;
class GetOrgResponse;
struct GetOrgResponseDefaultTypeInternal;
extern GetOrgResponseDefaultTypeInternal _GetOrgResponse_default_instance_;
class LoadEconomyEntitiesRequest;
struct LoadEconomyEntitiesRequestDefaultTypeInternal;
extern LoadEconomyEntitiesRequestDefaultTypeInternal _LoadEconomyEntitiesRequest_default_instance_;
class LoadEconomyEntitiesResponse;
struct LoadEconomyEntitiesResponseDefaultTypeInternal;
extern LoadEconomyEntitiesResponseDefaultTypeInternal _LoadEconomyEntitiesResponse_default_instance_;
class RemoveAgentRequest;
struct RemoveAgentRequestDefaultTypeInternal;
extern RemoveAgentRequestDefaultTypeInternal _RemoveAgentRequest_default_instance_;
class RemoveAgentResponse;
struct RemoveAgentResponseDefaultTypeInternal;
extern RemoveAgentResponseDefaultTypeInternal _RemoveAgentResponse_default_instance_;
class RemoveOrgRequest;
struct RemoveOrgRequestDefaultTypeInternal;
extern RemoveOrgRequestDefaultTypeInternal _RemoveOrgRequest_default_instance_;
class RemoveOrgResponse;
struct RemoveOrgResponseDefaultTypeInternal;
extern RemoveOrgResponseDefaultTypeInternal _RemoveOrgResponse_default_instance_;
class SaveEconomyEntitiesRequest;
struct SaveEconomyEntitiesRequestDefaultTypeInternal;
extern SaveEconomyEntitiesRequestDefaultTypeInternal _SaveEconomyEntitiesRequest_default_instance_;
class SaveEconomyEntitiesResponse;
struct SaveEconomyEntitiesResponseDefaultTypeInternal;
extern SaveEconomyEntitiesResponseDefaultTypeInternal _SaveEconomyEntitiesResponse_default_instance_;
class UpdateAgentRequest;
struct UpdateAgentRequestDefaultTypeInternal;
extern UpdateAgentRequestDefaultTypeInternal _UpdateAgentRequest_default_instance_;
class UpdateAgentResponse;
struct UpdateAgentResponseDefaultTypeInternal;
extern UpdateAgentResponseDefaultTypeInternal _UpdateAgentResponse_default_instance_;
class UpdateOrgRequest;
struct UpdateOrgRequestDefaultTypeInternal;
extern UpdateOrgRequestDefaultTypeInternal _UpdateOrgRequest_default_instance_;
class UpdateOrgResponse;
struct UpdateOrgResponseDefaultTypeInternal;
extern UpdateOrgResponseDefaultTypeInternal _UpdateOrgResponse_default_instance_;
}  // namespace v2
}  // namespace economy
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::economy::v2::AddAgentRequest* Arena::CreateMaybeMessage<::city::economy::v2::AddAgentRequest>(Arena*);
template<> ::city::economy::v2::AddAgentResponse* Arena::CreateMaybeMessage<::city::economy::v2::AddAgentResponse>(Arena*);
template<> ::city::economy::v2::AddOrgRequest* Arena::CreateMaybeMessage<::city::economy::v2::AddOrgRequest>(Arena*);
template<> ::city::economy::v2::AddOrgResponse* Arena::CreateMaybeMessage<::city::economy::v2::AddOrgResponse>(Arena*);
template<> ::city::economy::v2::BatchDeltaUpdateRequest* Arena::CreateMaybeMessage<::city::economy::v2::BatchDeltaUpdateRequest>(Arena*);
template<> ::city::economy::v2::BatchDeltaUpdateResponse* Arena::CreateMaybeMessage<::city::economy::v2::BatchDeltaUpdateResponse>(Arena*);
template<> ::city::economy::v2::BatchGetRequest* Arena::CreateMaybeMessage<::city::economy::v2::BatchGetRequest>(Arena*);
template<> ::city::economy::v2::BatchGetResponse* Arena::CreateMaybeMessage<::city::economy::v2::BatchGetResponse>(Arena*);
template<> ::city::economy::v2::BatchSetRequest* Arena::CreateMaybeMessage<::city::economy::v2::BatchSetRequest>(Arena*);
template<> ::city::economy::v2::BatchSetResponse* Arena::CreateMaybeMessage<::city::economy::v2::BatchSetResponse>(Arena*);
template<> ::city::economy::v2::BatchUpdateRequest* Arena::CreateMaybeMessage<::city::economy::v2::BatchUpdateRequest>(Arena*);
template<> ::city::economy::v2::BatchUpdateResponse* Arena::CreateMaybeMessage<::city::economy::v2::BatchUpdateResponse>(Arena*);
template<> ::city::economy::v2::CalculateConsumptionRequest* Arena::CreateMaybeMessage<::city::economy::v2::CalculateConsumptionRequest>(Arena*);
template<> ::city::economy::v2::CalculateConsumptionResponse* Arena::CreateMaybeMessage<::city::economy::v2::CalculateConsumptionResponse>(Arena*);
template<> ::city::economy::v2::CalculateInterestRequest* Arena::CreateMaybeMessage<::city::economy::v2::CalculateInterestRequest>(Arena*);
template<> ::city::economy::v2::CalculateInterestResponse* Arena::CreateMaybeMessage<::city::economy::v2::CalculateInterestResponse>(Arena*);
template<> ::city::economy::v2::CalculateRealGDPRequest* Arena::CreateMaybeMessage<::city::economy::v2::CalculateRealGDPRequest>(Arena*);
template<> ::city::economy::v2::CalculateRealGDPResponse* Arena::CreateMaybeMessage<::city::economy::v2::CalculateRealGDPResponse>(Arena*);
template<> ::city::economy::v2::CalculateTaxesDueRequest* Arena::CreateMaybeMessage<::city::economy::v2::CalculateTaxesDueRequest>(Arena*);
template<> ::city::economy::v2::CalculateTaxesDueResponse* Arena::CreateMaybeMessage<::city::economy::v2::CalculateTaxesDueResponse>(Arena*);
template<> ::city::economy::v2::DeltaUpdateAgentRequest* Arena::CreateMaybeMessage<::city::economy::v2::DeltaUpdateAgentRequest>(Arena*);
template<> ::city::economy::v2::DeltaUpdateAgentResponse* Arena::CreateMaybeMessage<::city::economy::v2::DeltaUpdateAgentResponse>(Arena*);
template<> ::city::economy::v2::DeltaUpdateOrgRequest* Arena::CreateMaybeMessage<::city::economy::v2::DeltaUpdateOrgRequest>(Arena*);
template<> ::city::economy::v2::DeltaUpdateOrgResponse* Arena::CreateMaybeMessage<::city::economy::v2::DeltaUpdateOrgResponse>(Arena*);
template<> ::city::economy::v2::GetAgentRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetAgentRequest>(Arena*);
template<> ::city::economy::v2::GetAgentResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetAgentResponse>(Arena*);
template<> ::city::economy::v2::GetOrgRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetOrgRequest>(Arena*);
template<> ::city::economy::v2::GetOrgResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetOrgResponse>(Arena*);
template<> ::city::economy::v2::LoadEconomyEntitiesRequest* Arena::CreateMaybeMessage<::city::economy::v2::LoadEconomyEntitiesRequest>(Arena*);
template<> ::city::economy::v2::LoadEconomyEntitiesResponse* Arena::CreateMaybeMessage<::city::economy::v2::LoadEconomyEntitiesResponse>(Arena*);
template<> ::city::economy::v2::RemoveAgentRequest* Arena::CreateMaybeMessage<::city::economy::v2::RemoveAgentRequest>(Arena*);
template<> ::city::economy::v2::RemoveAgentResponse* Arena::CreateMaybeMessage<::city::economy::v2::RemoveAgentResponse>(Arena*);
template<> ::city::economy::v2::RemoveOrgRequest* Arena::CreateMaybeMessage<::city::economy::v2::RemoveOrgRequest>(Arena*);
template<> ::city::economy::v2::RemoveOrgResponse* Arena::CreateMaybeMessage<::city::economy::v2::RemoveOrgResponse>(Arena*);
template<> ::city::economy::v2::SaveEconomyEntitiesRequest* Arena::CreateMaybeMessage<::city::economy::v2::SaveEconomyEntitiesRequest>(Arena*);
template<> ::city::economy::v2::SaveEconomyEntitiesResponse* Arena::CreateMaybeMessage<::city::economy::v2::SaveEconomyEntitiesResponse>(Arena*);
template<> ::city::economy::v2::UpdateAgentRequest* Arena::CreateMaybeMessage<::city::economy::v2::UpdateAgentRequest>(Arena*);
template<> ::city::economy::v2::UpdateAgentResponse* Arena::CreateMaybeMessage<::city::economy::v2::UpdateAgentResponse>(Arena*);
template<> ::city::economy::v2::UpdateOrgRequest* Arena::CreateMaybeMessage<::city::economy::v2::UpdateOrgRequest>(Arena*);
template<> ::city::economy::v2::UpdateOrgResponse* Arena::CreateMaybeMessage<::city::economy::v2::UpdateOrgResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace economy {
namespace v2 {

// ===================================================================

class AddOrgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.AddOrgRequest) */ {
 public:
  inline AddOrgRequest() : AddOrgRequest(nullptr) {}
  ~AddOrgRequest() override;
  explicit PROTOBUF_CONSTEXPR AddOrgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddOrgRequest(const AddOrgRequest& from);
  AddOrgRequest(AddOrgRequest&& from) noexcept
    : AddOrgRequest() {
    *this = ::std::move(from);
  }

  inline AddOrgRequest& operator=(const AddOrgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrgRequest& operator=(AddOrgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddOrgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddOrgRequest* internal_default_instance() {
    return reinterpret_cast<const AddOrgRequest*>(
               &_AddOrgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddOrgRequest& a, AddOrgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrgRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddOrgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddOrgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddOrgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddOrgRequest& from) {
    AddOrgRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrgRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddOrgRequest";
  }
  protected:
  explicit AddOrgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgFieldNumber = 1,
  };
  // .city.economy.v2.Org org = 1 [json_name = "org"];
  bool has_org() const;
  private:
  bool _internal_has_org() const;
  public:
  void clear_org();
  const ::city::economy::v2::Org& org() const;
  PROTOBUF_NODISCARD ::city::economy::v2::Org* release_org();
  ::city::economy::v2::Org* mutable_org();
  void set_allocated_org(::city::economy::v2::Org* org);
  private:
  const ::city::economy::v2::Org& _internal_org() const;
  ::city::economy::v2::Org* _internal_mutable_org();
  public:
  void unsafe_arena_set_allocated_org(
      ::city::economy::v2::Org* org);
  ::city::economy::v2::Org* unsafe_arena_release_org();

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddOrgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::economy::v2::Org* org_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddOrgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.AddOrgResponse) */ {
 public:
  inline AddOrgResponse() : AddOrgResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AddOrgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddOrgResponse(const AddOrgResponse& from);
  AddOrgResponse(AddOrgResponse&& from) noexcept
    : AddOrgResponse() {
    *this = ::std::move(from);
  }

  inline AddOrgResponse& operator=(const AddOrgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrgResponse& operator=(AddOrgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddOrgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddOrgResponse* internal_default_instance() {
    return reinterpret_cast<const AddOrgResponse*>(
               &_AddOrgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddOrgResponse& a, AddOrgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrgResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddOrgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddOrgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddOrgResponse";
  }
  protected:
  explicit AddOrgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddOrgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveOrgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.RemoveOrgRequest) */ {
 public:
  inline RemoveOrgRequest() : RemoveOrgRequest(nullptr) {}
  ~RemoveOrgRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveOrgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveOrgRequest(const RemoveOrgRequest& from);
  RemoveOrgRequest(RemoveOrgRequest&& from) noexcept
    : RemoveOrgRequest() {
    *this = ::std::move(from);
  }

  inline RemoveOrgRequest& operator=(const RemoveOrgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOrgRequest& operator=(RemoveOrgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveOrgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveOrgRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveOrgRequest*>(
               &_RemoveOrgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RemoveOrgRequest& a, RemoveOrgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOrgRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOrgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveOrgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveOrgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveOrgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveOrgRequest& from) {
    RemoveOrgRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrgRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.RemoveOrgRequest";
  }
  protected:
  explicit RemoveOrgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.RemoveOrgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveOrgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.RemoveOrgResponse) */ {
 public:
  inline RemoveOrgResponse() : RemoveOrgResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RemoveOrgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveOrgResponse(const RemoveOrgResponse& from);
  RemoveOrgResponse(RemoveOrgResponse&& from) noexcept
    : RemoveOrgResponse() {
    *this = ::std::move(from);
  }

  inline RemoveOrgResponse& operator=(const RemoveOrgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOrgResponse& operator=(RemoveOrgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveOrgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveOrgResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveOrgResponse*>(
               &_RemoveOrgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RemoveOrgResponse& a, RemoveOrgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOrgResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOrgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveOrgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveOrgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RemoveOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RemoveOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.RemoveOrgResponse";
  }
  protected:
  explicit RemoveOrgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.RemoveOrgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOrgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetOrgRequest) */ {
 public:
  inline GetOrgRequest() : GetOrgRequest(nullptr) {}
  ~GetOrgRequest() override;
  explicit PROTOBUF_CONSTEXPR GetOrgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrgRequest(const GetOrgRequest& from);
  GetOrgRequest(GetOrgRequest&& from) noexcept
    : GetOrgRequest() {
    *this = ::std::move(from);
  }

  inline GetOrgRequest& operator=(const GetOrgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrgRequest& operator=(GetOrgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrgRequest* internal_default_instance() {
    return reinterpret_cast<const GetOrgRequest*>(
               &_GetOrgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetOrgRequest& a, GetOrgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrgRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrgRequest& from) {
    GetOrgRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrgRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetOrgRequest";
  }
  protected:
  explicit GetOrgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetOrgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOrgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetOrgResponse) */ {
 public:
  inline GetOrgResponse() : GetOrgResponse(nullptr) {}
  ~GetOrgResponse() override;
  explicit PROTOBUF_CONSTEXPR GetOrgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrgResponse(const GetOrgResponse& from);
  GetOrgResponse(GetOrgResponse&& from) noexcept
    : GetOrgResponse() {
    *this = ::std::move(from);
  }

  inline GetOrgResponse& operator=(const GetOrgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrgResponse& operator=(GetOrgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrgResponse* internal_default_instance() {
    return reinterpret_cast<const GetOrgResponse*>(
               &_GetOrgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetOrgResponse& a, GetOrgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrgResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrgResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrgResponse& from) {
    GetOrgResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrgResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetOrgResponse";
  }
  protected:
  explicit GetOrgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgFieldNumber = 1,
  };
  // .city.economy.v2.Org org = 1 [json_name = "org"];
  bool has_org() const;
  private:
  bool _internal_has_org() const;
  public:
  void clear_org();
  const ::city::economy::v2::Org& org() const;
  PROTOBUF_NODISCARD ::city::economy::v2::Org* release_org();
  ::city::economy::v2::Org* mutable_org();
  void set_allocated_org(::city::economy::v2::Org* org);
  private:
  const ::city::economy::v2::Org& _internal_org() const;
  ::city::economy::v2::Org* _internal_mutable_org();
  public:
  void unsafe_arena_set_allocated_org(
      ::city::economy::v2::Org* org);
  ::city::economy::v2::Org* unsafe_arena_release_org();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetOrgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::economy::v2::Org* org_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.UpdateOrgRequest) */ {
 public:
  inline UpdateOrgRequest() : UpdateOrgRequest(nullptr) {}
  ~UpdateOrgRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateOrgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgRequest(const UpdateOrgRequest& from);
  UpdateOrgRequest(UpdateOrgRequest&& from) noexcept
    : UpdateOrgRequest() {
    *this = ::std::move(from);
  }

  inline UpdateOrgRequest& operator=(const UpdateOrgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgRequest& operator=(UpdateOrgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgRequest*>(
               &_UpdateOrgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateOrgRequest& a, UpdateOrgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateOrgRequest& from) {
    UpdateOrgRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrgRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.UpdateOrgRequest";
  }
  protected:
  explicit UpdateOrgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgFieldNumber = 1,
  };
  // .city.economy.v2.Org org = 1 [json_name = "org"];
  bool has_org() const;
  private:
  bool _internal_has_org() const;
  public:
  void clear_org();
  const ::city::economy::v2::Org& org() const;
  PROTOBUF_NODISCARD ::city::economy::v2::Org* release_org();
  ::city::economy::v2::Org* mutable_org();
  void set_allocated_org(::city::economy::v2::Org* org);
  private:
  const ::city::economy::v2::Org& _internal_org() const;
  ::city::economy::v2::Org* _internal_mutable_org();
  public:
  void unsafe_arena_set_allocated_org(
      ::city::economy::v2::Org* org);
  ::city::economy::v2::Org* unsafe_arena_release_org();

  // @@protoc_insertion_point(class_scope:city.economy.v2.UpdateOrgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::economy::v2::Org* org_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.UpdateOrgResponse) */ {
 public:
  inline UpdateOrgResponse() : UpdateOrgResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UpdateOrgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgResponse(const UpdateOrgResponse& from);
  UpdateOrgResponse(UpdateOrgResponse&& from) noexcept
    : UpdateOrgResponse() {
    *this = ::std::move(from);
  }

  inline UpdateOrgResponse& operator=(const UpdateOrgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgResponse& operator=(UpdateOrgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgResponse*>(
               &_UpdateOrgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateOrgResponse& a, UpdateOrgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UpdateOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UpdateOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.UpdateOrgResponse";
  }
  protected:
  explicit UpdateOrgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.UpdateOrgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.AddAgentRequest) */ {
 public:
  inline AddAgentRequest() : AddAgentRequest(nullptr) {}
  ~AddAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR AddAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddAgentRequest(const AddAgentRequest& from);
  AddAgentRequest(AddAgentRequest&& from) noexcept
    : AddAgentRequest() {
    *this = ::std::move(from);
  }

  inline AddAgentRequest& operator=(const AddAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddAgentRequest& operator=(AddAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddAgentRequest* internal_default_instance() {
    return reinterpret_cast<const AddAgentRequest*>(
               &_AddAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AddAgentRequest& a, AddAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddAgentRequest& from) {
    AddAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddAgentRequest";
  }
  protected:
  explicit AddAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentFieldNumber = 1,
  };
  // .city.economy.v2.Agent agent = 1 [json_name = "agent"];
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::city::economy::v2::Agent& agent() const;
  PROTOBUF_NODISCARD ::city::economy::v2::Agent* release_agent();
  ::city::economy::v2::Agent* mutable_agent();
  void set_allocated_agent(::city::economy::v2::Agent* agent);
  private:
  const ::city::economy::v2::Agent& _internal_agent() const;
  ::city::economy::v2::Agent* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::city::economy::v2::Agent* agent);
  ::city::economy::v2::Agent* unsafe_arena_release_agent();

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::economy::v2::Agent* agent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddAgentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.AddAgentResponse) */ {
 public:
  inline AddAgentResponse() : AddAgentResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AddAgentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddAgentResponse(const AddAgentResponse& from);
  AddAgentResponse(AddAgentResponse&& from) noexcept
    : AddAgentResponse() {
    *this = ::std::move(from);
  }

  inline AddAgentResponse& operator=(const AddAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddAgentResponse& operator=(AddAgentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddAgentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddAgentResponse* internal_default_instance() {
    return reinterpret_cast<const AddAgentResponse*>(
               &_AddAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AddAgentResponse& a, AddAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddAgentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddAgentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddAgentResponse";
  }
  protected:
  explicit AddAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.RemoveAgentRequest) */ {
 public:
  inline RemoveAgentRequest() : RemoveAgentRequest(nullptr) {}
  ~RemoveAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveAgentRequest(const RemoveAgentRequest& from);
  RemoveAgentRequest(RemoveAgentRequest&& from) noexcept
    : RemoveAgentRequest() {
    *this = ::std::move(from);
  }

  inline RemoveAgentRequest& operator=(const RemoveAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveAgentRequest& operator=(RemoveAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveAgentRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveAgentRequest*>(
               &_RemoveAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RemoveAgentRequest& a, RemoveAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveAgentRequest& from) {
    RemoveAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.RemoveAgentRequest";
  }
  protected:
  explicit RemoveAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
  };
  // int32 agent_id = 1 [json_name = "agentId"];
  void clear_agent_id();
  int32_t agent_id() const;
  void set_agent_id(int32_t value);
  private:
  int32_t _internal_agent_id() const;
  void _internal_set_agent_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.RemoveAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t agent_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveAgentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.RemoveAgentResponse) */ {
 public:
  inline RemoveAgentResponse() : RemoveAgentResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RemoveAgentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveAgentResponse(const RemoveAgentResponse& from);
  RemoveAgentResponse(RemoveAgentResponse&& from) noexcept
    : RemoveAgentResponse() {
    *this = ::std::move(from);
  }

  inline RemoveAgentResponse& operator=(const RemoveAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveAgentResponse& operator=(RemoveAgentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveAgentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveAgentResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveAgentResponse*>(
               &_RemoveAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RemoveAgentResponse& a, RemoveAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveAgentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveAgentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RemoveAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RemoveAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.RemoveAgentResponse";
  }
  protected:
  explicit RemoveAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.RemoveAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetAgentRequest) */ {
 public:
  inline GetAgentRequest() : GetAgentRequest(nullptr) {}
  ~GetAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAgentRequest(const GetAgentRequest& from);
  GetAgentRequest(GetAgentRequest&& from) noexcept
    : GetAgentRequest() {
    *this = ::std::move(from);
  }

  inline GetAgentRequest& operator=(const GetAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAgentRequest& operator=(GetAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAgentRequest* internal_default_instance() {
    return reinterpret_cast<const GetAgentRequest*>(
               &_GetAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetAgentRequest& a, GetAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAgentRequest& from) {
    GetAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetAgentRequest";
  }
  protected:
  explicit GetAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
  };
  // int32 agent_id = 1 [json_name = "agentId"];
  void clear_agent_id();
  int32_t agent_id() const;
  void set_agent_id(int32_t value);
  private:
  int32_t _internal_agent_id() const;
  void _internal_set_agent_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t agent_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAgentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetAgentResponse) */ {
 public:
  inline GetAgentResponse() : GetAgentResponse(nullptr) {}
  ~GetAgentResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAgentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAgentResponse(const GetAgentResponse& from);
  GetAgentResponse(GetAgentResponse&& from) noexcept
    : GetAgentResponse() {
    *this = ::std::move(from);
  }

  inline GetAgentResponse& operator=(const GetAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAgentResponse& operator=(GetAgentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAgentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAgentResponse* internal_default_instance() {
    return reinterpret_cast<const GetAgentResponse*>(
               &_GetAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetAgentResponse& a, GetAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAgentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAgentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAgentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAgentResponse& from) {
    GetAgentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAgentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetAgentResponse";
  }
  protected:
  explicit GetAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentFieldNumber = 1,
  };
  // .city.economy.v2.Agent agent = 1 [json_name = "agent"];
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::city::economy::v2::Agent& agent() const;
  PROTOBUF_NODISCARD ::city::economy::v2::Agent* release_agent();
  ::city::economy::v2::Agent* mutable_agent();
  void set_allocated_agent(::city::economy::v2::Agent* agent);
  private:
  const ::city::economy::v2::Agent& _internal_agent() const;
  ::city::economy::v2::Agent* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::city::economy::v2::Agent* agent);
  ::city::economy::v2::Agent* unsafe_arena_release_agent();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::economy::v2::Agent* agent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.UpdateAgentRequest) */ {
 public:
  inline UpdateAgentRequest() : UpdateAgentRequest(nullptr) {}
  ~UpdateAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateAgentRequest(const UpdateAgentRequest& from);
  UpdateAgentRequest(UpdateAgentRequest&& from) noexcept
    : UpdateAgentRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAgentRequest& operator=(const UpdateAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAgentRequest& operator=(UpdateAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAgentRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAgentRequest*>(
               &_UpdateAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UpdateAgentRequest& a, UpdateAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateAgentRequest& from) {
    UpdateAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.UpdateAgentRequest";
  }
  protected:
  explicit UpdateAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentFieldNumber = 1,
  };
  // .city.economy.v2.Agent agent = 1 [json_name = "agent"];
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::city::economy::v2::Agent& agent() const;
  PROTOBUF_NODISCARD ::city::economy::v2::Agent* release_agent();
  ::city::economy::v2::Agent* mutable_agent();
  void set_allocated_agent(::city::economy::v2::Agent* agent);
  private:
  const ::city::economy::v2::Agent& _internal_agent() const;
  ::city::economy::v2::Agent* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::city::economy::v2::Agent* agent);
  ::city::economy::v2::Agent* unsafe_arena_release_agent();

  // @@protoc_insertion_point(class_scope:city.economy.v2.UpdateAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::economy::v2::Agent* agent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateAgentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.UpdateAgentResponse) */ {
 public:
  inline UpdateAgentResponse() : UpdateAgentResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UpdateAgentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateAgentResponse(const UpdateAgentResponse& from);
  UpdateAgentResponse(UpdateAgentResponse&& from) noexcept
    : UpdateAgentResponse() {
    *this = ::std::move(from);
  }

  inline UpdateAgentResponse& operator=(const UpdateAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAgentResponse& operator=(UpdateAgentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAgentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAgentResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateAgentResponse*>(
               &_UpdateAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UpdateAgentResponse& a, UpdateAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAgentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateAgentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UpdateAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UpdateAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.UpdateAgentResponse";
  }
  protected:
  explicit UpdateAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.UpdateAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateTaxesDueRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateTaxesDueRequest) */ {
 public:
  inline CalculateTaxesDueRequest() : CalculateTaxesDueRequest(nullptr) {}
  ~CalculateTaxesDueRequest() override;
  explicit PROTOBUF_CONSTEXPR CalculateTaxesDueRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateTaxesDueRequest(const CalculateTaxesDueRequest& from);
  CalculateTaxesDueRequest(CalculateTaxesDueRequest&& from) noexcept
    : CalculateTaxesDueRequest() {
    *this = ::std::move(from);
  }

  inline CalculateTaxesDueRequest& operator=(const CalculateTaxesDueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateTaxesDueRequest& operator=(CalculateTaxesDueRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateTaxesDueRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateTaxesDueRequest* internal_default_instance() {
    return reinterpret_cast<const CalculateTaxesDueRequest*>(
               &_CalculateTaxesDueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CalculateTaxesDueRequest& a, CalculateTaxesDueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateTaxesDueRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateTaxesDueRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateTaxesDueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateTaxesDueRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateTaxesDueRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateTaxesDueRequest& from) {
    CalculateTaxesDueRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateTaxesDueRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateTaxesDueRequest";
  }
  protected:
  explicit CalculateTaxesDueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdsFieldNumber = 2,
    kIncomesFieldNumber = 3,
    kGovernmentIdFieldNumber = 1,
    kEnableRedistributionFieldNumber = 4,
  };
  // repeated int32 agent_ids = 2 [json_name = "agentIds"];
  int agent_ids_size() const;
  private:
  int _internal_agent_ids_size() const;
  public:
  void clear_agent_ids();
  private:
  int32_t _internal_agent_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_agent_ids() const;
  void _internal_add_agent_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_agent_ids();
  public:
  int32_t agent_ids(int index) const;
  void set_agent_ids(int index, int32_t value);
  void add_agent_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      agent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_agent_ids();

  // repeated float incomes = 3 [json_name = "incomes"];
  int incomes_size() const;
  private:
  int _internal_incomes_size() const;
  public:
  void clear_incomes();
  private:
  float _internal_incomes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_incomes() const;
  void _internal_add_incomes(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_incomes();
  public:
  float incomes(int index) const;
  void set_incomes(int index, float value);
  void add_incomes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      incomes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_incomes();

  // int32 government_id = 1 [json_name = "governmentId"];
  void clear_government_id();
  int32_t government_id() const;
  void set_government_id(int32_t value);
  private:
  int32_t _internal_government_id() const;
  void _internal_set_government_id(int32_t value);
  public:

  // bool enable_redistribution = 4 [json_name = "enableRedistribution"];
  void clear_enable_redistribution();
  bool enable_redistribution() const;
  void set_enable_redistribution(bool value);
  private:
  bool _internal_enable_redistribution() const;
  void _internal_set_enable_redistribution(bool value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateTaxesDueRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > agent_ids_;
    mutable std::atomic<int> _agent_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > incomes_;
    int32_t government_id_;
    bool enable_redistribution_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateTaxesDueResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateTaxesDueResponse) */ {
 public:
  inline CalculateTaxesDueResponse() : CalculateTaxesDueResponse(nullptr) {}
  ~CalculateTaxesDueResponse() override;
  explicit PROTOBUF_CONSTEXPR CalculateTaxesDueResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateTaxesDueResponse(const CalculateTaxesDueResponse& from);
  CalculateTaxesDueResponse(CalculateTaxesDueResponse&& from) noexcept
    : CalculateTaxesDueResponse() {
    *this = ::std::move(from);
  }

  inline CalculateTaxesDueResponse& operator=(const CalculateTaxesDueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateTaxesDueResponse& operator=(CalculateTaxesDueResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateTaxesDueResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateTaxesDueResponse* internal_default_instance() {
    return reinterpret_cast<const CalculateTaxesDueResponse*>(
               &_CalculateTaxesDueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CalculateTaxesDueResponse& a, CalculateTaxesDueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateTaxesDueResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateTaxesDueResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateTaxesDueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateTaxesDueResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateTaxesDueResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateTaxesDueResponse& from) {
    CalculateTaxesDueResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateTaxesDueResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateTaxesDueResponse";
  }
  protected:
  explicit CalculateTaxesDueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedIncomesFieldNumber = 2,
    kTaxesDueFieldNumber = 1,
  };
  // repeated float updated_incomes = 2 [json_name = "updatedIncomes"];
  int updated_incomes_size() const;
  private:
  int _internal_updated_incomes_size() const;
  public:
  void clear_updated_incomes();
  private:
  float _internal_updated_incomes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_updated_incomes() const;
  void _internal_add_updated_incomes(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_updated_incomes();
  public:
  float updated_incomes(int index) const;
  void set_updated_incomes(int index, float value);
  void add_updated_incomes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      updated_incomes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_updated_incomes();

  // float taxes_due = 1 [json_name = "taxesDue"];
  void clear_taxes_due();
  float taxes_due() const;
  void set_taxes_due(float value);
  private:
  float _internal_taxes_due() const;
  void _internal_set_taxes_due(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateTaxesDueResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > updated_incomes_;
    float taxes_due_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateConsumptionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateConsumptionRequest) */ {
 public:
  inline CalculateConsumptionRequest() : CalculateConsumptionRequest(nullptr) {}
  ~CalculateConsumptionRequest() override;
  explicit PROTOBUF_CONSTEXPR CalculateConsumptionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateConsumptionRequest(const CalculateConsumptionRequest& from);
  CalculateConsumptionRequest(CalculateConsumptionRequest&& from) noexcept
    : CalculateConsumptionRequest() {
    *this = ::std::move(from);
  }

  inline CalculateConsumptionRequest& operator=(const CalculateConsumptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateConsumptionRequest& operator=(CalculateConsumptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateConsumptionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateConsumptionRequest* internal_default_instance() {
    return reinterpret_cast<const CalculateConsumptionRequest*>(
               &_CalculateConsumptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CalculateConsumptionRequest& a, CalculateConsumptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateConsumptionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateConsumptionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateConsumptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateConsumptionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateConsumptionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateConsumptionRequest& from) {
    CalculateConsumptionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateConsumptionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateConsumptionRequest";
  }
  protected:
  explicit CalculateConsumptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirmIdsFieldNumber = 1,
    kDemandsFieldNumber = 3,
    kAgentIdFieldNumber = 2,
    kConsumptionAccumulationFieldNumber = 4,
  };
  // repeated int32 firm_ids = 1 [json_name = "firmIds"];
  int firm_ids_size() const;
  private:
  int _internal_firm_ids_size() const;
  public:
  void clear_firm_ids();
  private:
  int32_t _internal_firm_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_firm_ids() const;
  void _internal_add_firm_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_firm_ids();
  public:
  int32_t firm_ids(int index) const;
  void set_firm_ids(int index, int32_t value);
  void add_firm_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      firm_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_firm_ids();

  // repeated int32 demands = 3 [json_name = "demands"];
  int demands_size() const;
  private:
  int _internal_demands_size() const;
  public:
  void clear_demands();
  private:
  int32_t _internal_demands(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_demands() const;
  void _internal_add_demands(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_demands();
  public:
  int32_t demands(int index) const;
  void set_demands(int index, int32_t value);
  void add_demands(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      demands() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_demands();

  // int32 agent_id = 2 [json_name = "agentId"];
  void clear_agent_id();
  int32_t agent_id() const;
  void set_agent_id(int32_t value);
  private:
  int32_t _internal_agent_id() const;
  void _internal_set_agent_id(int32_t value);
  public:

  // optional bool consumption_accumulation = 4 [json_name = "consumptionAccumulation"];
  bool has_consumption_accumulation() const;
  private:
  bool _internal_has_consumption_accumulation() const;
  public:
  void clear_consumption_accumulation();
  bool consumption_accumulation() const;
  void set_consumption_accumulation(bool value);
  private:
  bool _internal_consumption_accumulation() const;
  void _internal_set_consumption_accumulation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateConsumptionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > firm_ids_;
    mutable std::atomic<int> _firm_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > demands_;
    mutable std::atomic<int> _demands_cached_byte_size_;
    int32_t agent_id_;
    bool consumption_accumulation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateConsumptionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateConsumptionResponse) */ {
 public:
  inline CalculateConsumptionResponse() : CalculateConsumptionResponse(nullptr) {}
  ~CalculateConsumptionResponse() override;
  explicit PROTOBUF_CONSTEXPR CalculateConsumptionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateConsumptionResponse(const CalculateConsumptionResponse& from);
  CalculateConsumptionResponse(CalculateConsumptionResponse&& from) noexcept
    : CalculateConsumptionResponse() {
    *this = ::std::move(from);
  }

  inline CalculateConsumptionResponse& operator=(const CalculateConsumptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateConsumptionResponse& operator=(CalculateConsumptionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateConsumptionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateConsumptionResponse* internal_default_instance() {
    return reinterpret_cast<const CalculateConsumptionResponse*>(
               &_CalculateConsumptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CalculateConsumptionResponse& a, CalculateConsumptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateConsumptionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateConsumptionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateConsumptionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateConsumptionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateConsumptionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateConsumptionResponse& from) {
    CalculateConsumptionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateConsumptionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateConsumptionResponse";
  }
  protected:
  explicit CalculateConsumptionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActualConsumptionFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // float actual_consumption = 1 [json_name = "actualConsumption"];
  void clear_actual_consumption();
  float actual_consumption() const;
  void set_actual_consumption(float value);
  private:
  float _internal_actual_consumption() const;
  void _internal_set_actual_consumption(float value);
  public:

  // bool success = 2 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateConsumptionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float actual_consumption_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateInterestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateInterestRequest) */ {
 public:
  inline CalculateInterestRequest() : CalculateInterestRequest(nullptr) {}
  ~CalculateInterestRequest() override;
  explicit PROTOBUF_CONSTEXPR CalculateInterestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateInterestRequest(const CalculateInterestRequest& from);
  CalculateInterestRequest(CalculateInterestRequest&& from) noexcept
    : CalculateInterestRequest() {
    *this = ::std::move(from);
  }

  inline CalculateInterestRequest& operator=(const CalculateInterestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateInterestRequest& operator=(CalculateInterestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateInterestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateInterestRequest* internal_default_instance() {
    return reinterpret_cast<const CalculateInterestRequest*>(
               &_CalculateInterestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CalculateInterestRequest& a, CalculateInterestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateInterestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateInterestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateInterestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateInterestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateInterestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateInterestRequest& from) {
    CalculateInterestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateInterestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateInterestRequest";
  }
  protected:
  explicit CalculateInterestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdsFieldNumber = 2,
    kBankIdFieldNumber = 1,
  };
  // repeated int32 agent_ids = 2 [json_name = "agentIds"];
  int agent_ids_size() const;
  private:
  int _internal_agent_ids_size() const;
  public:
  void clear_agent_ids();
  private:
  int32_t _internal_agent_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_agent_ids() const;
  void _internal_add_agent_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_agent_ids();
  public:
  int32_t agent_ids(int index) const;
  void set_agent_ids(int index, int32_t value);
  void add_agent_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      agent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_agent_ids();

  // int32 bank_id = 1 [json_name = "bankId"];
  void clear_bank_id();
  int32_t bank_id() const;
  void set_bank_id(int32_t value);
  private:
  int32_t _internal_bank_id() const;
  void _internal_set_bank_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateInterestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > agent_ids_;
    mutable std::atomic<int> _agent_ids_cached_byte_size_;
    int32_t bank_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateInterestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateInterestResponse) */ {
 public:
  inline CalculateInterestResponse() : CalculateInterestResponse(nullptr) {}
  ~CalculateInterestResponse() override;
  explicit PROTOBUF_CONSTEXPR CalculateInterestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateInterestResponse(const CalculateInterestResponse& from);
  CalculateInterestResponse(CalculateInterestResponse&& from) noexcept
    : CalculateInterestResponse() {
    *this = ::std::move(from);
  }

  inline CalculateInterestResponse& operator=(const CalculateInterestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateInterestResponse& operator=(CalculateInterestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateInterestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateInterestResponse* internal_default_instance() {
    return reinterpret_cast<const CalculateInterestResponse*>(
               &_CalculateInterestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CalculateInterestResponse& a, CalculateInterestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateInterestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateInterestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateInterestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateInterestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateInterestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateInterestResponse& from) {
    CalculateInterestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateInterestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateInterestResponse";
  }
  protected:
  explicit CalculateInterestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedCurrenciesFieldNumber = 2,
    kTotalInterestFieldNumber = 1,
  };
  // repeated float updated_currencies = 2 [json_name = "updatedCurrencies"];
  int updated_currencies_size() const;
  private:
  int _internal_updated_currencies_size() const;
  public:
  void clear_updated_currencies();
  private:
  float _internal_updated_currencies(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_updated_currencies() const;
  void _internal_add_updated_currencies(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_updated_currencies();
  public:
  float updated_currencies(int index) const;
  void set_updated_currencies(int index, float value);
  void add_updated_currencies(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      updated_currencies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_updated_currencies();

  // float total_interest = 1 [json_name = "totalInterest"];
  void clear_total_interest();
  float total_interest() const;
  void set_total_interest(float value);
  private:
  float _internal_total_interest() const;
  void _internal_set_total_interest(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateInterestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > updated_currencies_;
    float total_interest_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateRealGDPRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateRealGDPRequest) */ {
 public:
  inline CalculateRealGDPRequest() : CalculateRealGDPRequest(nullptr) {}
  ~CalculateRealGDPRequest() override;
  explicit PROTOBUF_CONSTEXPR CalculateRealGDPRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateRealGDPRequest(const CalculateRealGDPRequest& from);
  CalculateRealGDPRequest(CalculateRealGDPRequest&& from) noexcept
    : CalculateRealGDPRequest() {
    *this = ::std::move(from);
  }

  inline CalculateRealGDPRequest& operator=(const CalculateRealGDPRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateRealGDPRequest& operator=(CalculateRealGDPRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateRealGDPRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateRealGDPRequest* internal_default_instance() {
    return reinterpret_cast<const CalculateRealGDPRequest*>(
               &_CalculateRealGDPRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CalculateRealGDPRequest& a, CalculateRealGDPRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateRealGDPRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateRealGDPRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateRealGDPRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateRealGDPRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateRealGDPRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateRealGDPRequest& from) {
    CalculateRealGDPRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateRealGDPRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateRealGDPRequest";
  }
  protected:
  explicit CalculateRealGDPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNbsAgentIdFieldNumber = 1,
  };
  // int32 nbs_agent_id = 1 [json_name = "nbsAgentId"];
  void clear_nbs_agent_id();
  int32_t nbs_agent_id() const;
  void set_nbs_agent_id(int32_t value);
  private:
  int32_t _internal_nbs_agent_id() const;
  void _internal_set_nbs_agent_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateRealGDPRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t nbs_agent_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateRealGDPResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateRealGDPResponse) */ {
 public:
  inline CalculateRealGDPResponse() : CalculateRealGDPResponse(nullptr) {}
  ~CalculateRealGDPResponse() override;
  explicit PROTOBUF_CONSTEXPR CalculateRealGDPResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateRealGDPResponse(const CalculateRealGDPResponse& from);
  CalculateRealGDPResponse(CalculateRealGDPResponse&& from) noexcept
    : CalculateRealGDPResponse() {
    *this = ::std::move(from);
  }

  inline CalculateRealGDPResponse& operator=(const CalculateRealGDPResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateRealGDPResponse& operator=(CalculateRealGDPResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateRealGDPResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateRealGDPResponse* internal_default_instance() {
    return reinterpret_cast<const CalculateRealGDPResponse*>(
               &_CalculateRealGDPResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CalculateRealGDPResponse& a, CalculateRealGDPResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateRealGDPResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateRealGDPResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateRealGDPResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateRealGDPResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateRealGDPResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateRealGDPResponse& from) {
    CalculateRealGDPResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateRealGDPResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateRealGDPResponse";
  }
  protected:
  explicit CalculateRealGDPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealGdpFieldNumber = 1,
  };
  // float real_gdp = 1 [json_name = "realGdp"];
  void clear_real_gdp();
  float real_gdp() const;
  void set_real_gdp(float value);
  private:
  float _internal_real_gdp() const;
  void _internal_set_real_gdp(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateRealGDPResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float real_gdp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.BatchGetRequest) */ {
 public:
  inline BatchGetRequest() : BatchGetRequest(nullptr) {}
  ~BatchGetRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchGetRequest(const BatchGetRequest& from);
  BatchGetRequest(BatchGetRequest&& from) noexcept
    : BatchGetRequest() {
    *this = ::std::move(from);
  }

  inline BatchGetRequest& operator=(const BatchGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchGetRequest& operator=(BatchGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchGetRequest* internal_default_instance() {
    return reinterpret_cast<const BatchGetRequest*>(
               &_BatchGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(BatchGetRequest& a, BatchGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchGetRequest& from) {
    BatchGetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.BatchGetRequest";
  }
  protected:
  explicit BatchGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated int32 ids = 1 [json_name = "ids"];
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  int32_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_ids() const;
  void _internal_add_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_ids();
  public:
  int32_t ids(int index) const;
  void set_ids(int index, int32_t value);
  void add_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_ids();

  // string type = 2 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.BatchGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > ids_;
    mutable std::atomic<int> _ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.BatchGetResponse) */ {
 public:
  inline BatchGetResponse() : BatchGetResponse(nullptr) {}
  ~BatchGetResponse() override;
  explicit PROTOBUF_CONSTEXPR BatchGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchGetResponse(const BatchGetResponse& from);
  BatchGetResponse(BatchGetResponse&& from) noexcept
    : BatchGetResponse() {
    *this = ::std::move(from);
  }

  inline BatchGetResponse& operator=(const BatchGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchGetResponse& operator=(BatchGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchGetResponse* internal_default_instance() {
    return reinterpret_cast<const BatchGetResponse*>(
               &_BatchGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(BatchGetResponse& a, BatchGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchGetResponse& from) {
    BatchGetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.BatchGetResponse";
  }
  protected:
  explicit BatchGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgsFieldNumber = 1,
    kAgentsFieldNumber = 2,
  };
  // repeated .city.economy.v2.Org orgs = 1 [json_name = "orgs"];
  int orgs_size() const;
  private:
  int _internal_orgs_size() const;
  public:
  void clear_orgs();
  ::city::economy::v2::Org* mutable_orgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >*
      mutable_orgs();
  private:
  const ::city::economy::v2::Org& _internal_orgs(int index) const;
  ::city::economy::v2::Org* _internal_add_orgs();
  public:
  const ::city::economy::v2::Org& orgs(int index) const;
  ::city::economy::v2::Org* add_orgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >&
      orgs() const;

  // repeated .city.economy.v2.Agent agents = 2 [json_name = "agents"];
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::city::economy::v2::Agent* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >*
      mutable_agents();
  private:
  const ::city::economy::v2::Agent& _internal_agents(int index) const;
  ::city::economy::v2::Agent* _internal_add_agents();
  public:
  const ::city::economy::v2::Agent& agents(int index) const;
  ::city::economy::v2::Agent* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >&
      agents() const;

  // @@protoc_insertion_point(class_scope:city.economy.v2.BatchGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org > orgs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent > agents_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.BatchUpdateRequest) */ {
 public:
  inline BatchUpdateRequest() : BatchUpdateRequest(nullptr) {}
  ~BatchUpdateRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchUpdateRequest(const BatchUpdateRequest& from);
  BatchUpdateRequest(BatchUpdateRequest&& from) noexcept
    : BatchUpdateRequest() {
    *this = ::std::move(from);
  }

  inline BatchUpdateRequest& operator=(const BatchUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchUpdateRequest& operator=(BatchUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateRequest*>(
               &_BatchUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(BatchUpdateRequest& a, BatchUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchUpdateRequest& from) {
    BatchUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.BatchUpdateRequest";
  }
  protected:
  explicit BatchUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgsFieldNumber = 1,
    kAgentsFieldNumber = 2,
  };
  // repeated .city.economy.v2.Org orgs = 1 [json_name = "orgs"];
  int orgs_size() const;
  private:
  int _internal_orgs_size() const;
  public:
  void clear_orgs();
  ::city::economy::v2::Org* mutable_orgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >*
      mutable_orgs();
  private:
  const ::city::economy::v2::Org& _internal_orgs(int index) const;
  ::city::economy::v2::Org* _internal_add_orgs();
  public:
  const ::city::economy::v2::Org& orgs(int index) const;
  ::city::economy::v2::Org* add_orgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >&
      orgs() const;

  // repeated .city.economy.v2.Agent agents = 2 [json_name = "agents"];
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::city::economy::v2::Agent* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >*
      mutable_agents();
  private:
  const ::city::economy::v2::Agent& _internal_agents(int index) const;
  ::city::economy::v2::Agent* _internal_add_agents();
  public:
  const ::city::economy::v2::Agent& agents(int index) const;
  ::city::economy::v2::Agent* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >&
      agents() const;

  // @@protoc_insertion_point(class_scope:city.economy.v2.BatchUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org > orgs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent > agents_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.BatchUpdateResponse) */ {
 public:
  inline BatchUpdateResponse() : BatchUpdateResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BatchUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchUpdateResponse(const BatchUpdateResponse& from);
  BatchUpdateResponse(BatchUpdateResponse&& from) noexcept
    : BatchUpdateResponse() {
    *this = ::std::move(from);
  }

  inline BatchUpdateResponse& operator=(const BatchUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchUpdateResponse& operator=(BatchUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateResponse*>(
               &_BatchUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(BatchUpdateResponse& a, BatchUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchUpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BatchUpdateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BatchUpdateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.BatchUpdateResponse";
  }
  protected:
  explicit BatchUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.BatchUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchSetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.BatchSetRequest) */ {
 public:
  inline BatchSetRequest() : BatchSetRequest(nullptr) {}
  ~BatchSetRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchSetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchSetRequest(const BatchSetRequest& from);
  BatchSetRequest(BatchSetRequest&& from) noexcept
    : BatchSetRequest() {
    *this = ::std::move(from);
  }

  inline BatchSetRequest& operator=(const BatchSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchSetRequest& operator=(BatchSetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchSetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchSetRequest* internal_default_instance() {
    return reinterpret_cast<const BatchSetRequest*>(
               &_BatchSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(BatchSetRequest& a, BatchSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchSetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchSetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchSetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchSetRequest& from) {
    BatchSetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchSetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.BatchSetRequest";
  }
  protected:
  explicit BatchSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgsFieldNumber = 1,
    kAgentsFieldNumber = 2,
  };
  // repeated .city.economy.v2.Org orgs = 1 [json_name = "orgs"];
  int orgs_size() const;
  private:
  int _internal_orgs_size() const;
  public:
  void clear_orgs();
  ::city::economy::v2::Org* mutable_orgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >*
      mutable_orgs();
  private:
  const ::city::economy::v2::Org& _internal_orgs(int index) const;
  ::city::economy::v2::Org* _internal_add_orgs();
  public:
  const ::city::economy::v2::Org& orgs(int index) const;
  ::city::economy::v2::Org* add_orgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >&
      orgs() const;

  // repeated .city.economy.v2.Agent agents = 2 [json_name = "agents"];
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::city::economy::v2::Agent* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >*
      mutable_agents();
  private:
  const ::city::economy::v2::Agent& _internal_agents(int index) const;
  ::city::economy::v2::Agent* _internal_add_agents();
  public:
  const ::city::economy::v2::Agent& agents(int index) const;
  ::city::economy::v2::Agent* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >&
      agents() const;

  // @@protoc_insertion_point(class_scope:city.economy.v2.BatchSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org > orgs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent > agents_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchSetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.BatchSetResponse) */ {
 public:
  inline BatchSetResponse() : BatchSetResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BatchSetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchSetResponse(const BatchSetResponse& from);
  BatchSetResponse(BatchSetResponse&& from) noexcept
    : BatchSetResponse() {
    *this = ::std::move(from);
  }

  inline BatchSetResponse& operator=(const BatchSetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchSetResponse& operator=(BatchSetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchSetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchSetResponse* internal_default_instance() {
    return reinterpret_cast<const BatchSetResponse*>(
               &_BatchSetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(BatchSetResponse& a, BatchSetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchSetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchSetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchSetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchSetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BatchSetResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BatchSetResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.BatchSetResponse";
  }
  protected:
  explicit BatchSetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.BatchSetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeltaUpdateOrgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.DeltaUpdateOrgRequest) */ {
 public:
  inline DeltaUpdateOrgRequest() : DeltaUpdateOrgRequest(nullptr) {}
  ~DeltaUpdateOrgRequest() override;
  explicit PROTOBUF_CONSTEXPR DeltaUpdateOrgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeltaUpdateOrgRequest(const DeltaUpdateOrgRequest& from);
  DeltaUpdateOrgRequest(DeltaUpdateOrgRequest&& from) noexcept
    : DeltaUpdateOrgRequest() {
    *this = ::std::move(from);
  }

  inline DeltaUpdateOrgRequest& operator=(const DeltaUpdateOrgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeltaUpdateOrgRequest& operator=(DeltaUpdateOrgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeltaUpdateOrgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeltaUpdateOrgRequest* internal_default_instance() {
    return reinterpret_cast<const DeltaUpdateOrgRequest*>(
               &_DeltaUpdateOrgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(DeltaUpdateOrgRequest& a, DeltaUpdateOrgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeltaUpdateOrgRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeltaUpdateOrgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeltaUpdateOrgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeltaUpdateOrgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeltaUpdateOrgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeltaUpdateOrgRequest& from) {
    DeltaUpdateOrgRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeltaUpdateOrgRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.DeltaUpdateOrgRequest";
  }
  protected:
  explicit DeltaUpdateOrgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeltaNominalGdpFieldNumber = 2,
    kDeltaRealGdpFieldNumber = 3,
    kDeltaUnemploymentFieldNumber = 4,
    kDeltaWagesFieldNumber = 5,
    kDeltaPricesFieldNumber = 6,
    kDeltaBracketCutoffsFieldNumber = 11,
    kDeltaBracketRatesFieldNumber = 12,
    kAddEmployeesFieldNumber = 15,
    kRemoveEmployeesFieldNumber = 16,
    kAddCitizensFieldNumber = 17,
    kRemoveCitizensFieldNumber = 18,
    kDeltaConsumptionCurrencyFieldNumber = 19,
    kDeltaConsumptionPropensityFieldNumber = 20,
    kDeltaIncomeCurrencyFieldNumber = 21,
    kDeltaDepressionFieldNumber = 22,
    kDeltaLocusControlFieldNumber = 23,
    kDeltaWorkingHoursFieldNumber = 24,
    kOrgIdFieldNumber = 1,
    kDeltaInventoryFieldNumber = 7,
    kDeltaPriceFieldNumber = 8,
    kDeltaCurrencyFieldNumber = 9,
    kDeltaInterestRateFieldNumber = 10,
    kDeltaDemandFieldNumber = 13,
    kDeltaSalesFieldNumber = 14,
  };
  // repeated float delta_nominal_gdp = 2 [json_name = "deltaNominalGdp"];
  int delta_nominal_gdp_size() const;
  private:
  int _internal_delta_nominal_gdp_size() const;
  public:
  void clear_delta_nominal_gdp();
  private:
  float _internal_delta_nominal_gdp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_delta_nominal_gdp() const;
  void _internal_add_delta_nominal_gdp(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_delta_nominal_gdp();
  public:
  float delta_nominal_gdp(int index) const;
  void set_delta_nominal_gdp(int index, float value);
  void add_delta_nominal_gdp(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      delta_nominal_gdp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_delta_nominal_gdp();

  // repeated float delta_real_gdp = 3 [json_name = "deltaRealGdp"];
  int delta_real_gdp_size() const;
  private:
  int _internal_delta_real_gdp_size() const;
  public:
  void clear_delta_real_gdp();
  private:
  float _internal_delta_real_gdp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_delta_real_gdp() const;
  void _internal_add_delta_real_gdp(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_delta_real_gdp();
  public:
  float delta_real_gdp(int index) const;
  void set_delta_real_gdp(int index, float value);
  void add_delta_real_gdp(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      delta_real_gdp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_delta_real_gdp();

  // repeated float delta_unemployment = 4 [json_name = "deltaUnemployment"];
  int delta_unemployment_size() const;
  private:
  int _internal_delta_unemployment_size() const;
  public:
  void clear_delta_unemployment();
  private:
  float _internal_delta_unemployment(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_delta_unemployment() const;
  void _internal_add_delta_unemployment(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_delta_unemployment();
  public:
  float delta_unemployment(int index) const;
  void set_delta_unemployment(int index, float value);
  void add_delta_unemployment(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      delta_unemployment() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_delta_unemployment();

  // repeated float delta_wages = 5 [json_name = "deltaWages"];
  int delta_wages_size() const;
  private:
  int _internal_delta_wages_size() const;
  public:
  void clear_delta_wages();
  private:
  float _internal_delta_wages(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_delta_wages() const;
  void _internal_add_delta_wages(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_delta_wages();
  public:
  float delta_wages(int index) const;
  void set_delta_wages(int index, float value);
  void add_delta_wages(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      delta_wages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_delta_wages();

  // repeated float delta_prices = 6 [json_name = "deltaPrices"];
  int delta_prices_size() const;
  private:
  int _internal_delta_prices_size() const;
  public:
  void clear_delta_prices();
  private:
  float _internal_delta_prices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_delta_prices() const;
  void _internal_add_delta_prices(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_delta_prices();
  public:
  float delta_prices(int index) const;
  void set_delta_prices(int index, float value);
  void add_delta_prices(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      delta_prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_delta_prices();

  // repeated float delta_bracket_cutoffs = 11 [json_name = "deltaBracketCutoffs"];
  int delta_bracket_cutoffs_size() const;
  private:
  int _internal_delta_bracket_cutoffs_size() const;
  public:
  void clear_delta_bracket_cutoffs();
  private:
  float _internal_delta_bracket_cutoffs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_delta_bracket_cutoffs() const;
  void _internal_add_delta_bracket_cutoffs(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_delta_bracket_cutoffs();
  public:
  float delta_bracket_cutoffs(int index) const;
  void set_delta_bracket_cutoffs(int index, float value);
  void add_delta_bracket_cutoffs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      delta_bracket_cutoffs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_delta_bracket_cutoffs();

  // repeated float delta_bracket_rates = 12 [json_name = "deltaBracketRates"];
  int delta_bracket_rates_size() const;
  private:
  int _internal_delta_bracket_rates_size() const;
  public:
  void clear_delta_bracket_rates();
  private:
  float _internal_delta_bracket_rates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_delta_bracket_rates() const;
  void _internal_add_delta_bracket_rates(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_delta_bracket_rates();
  public:
  float delta_bracket_rates(int index) const;
  void set_delta_bracket_rates(int index, float value);
  void add_delta_bracket_rates(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      delta_bracket_rates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_delta_bracket_rates();

  // repeated int32 add_employees = 15 [json_name = "addEmployees"];
  int add_employees_size() const;
  private:
  int _internal_add_employees_size() const;
  public:
  void clear_add_employees();
  private:
  int32_t _internal_add_employees(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_add_employees() const;
  void _internal_add_add_employees(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_add_employees();
  public:
  int32_t add_employees(int index) const;
  void set_add_employees(int index, int32_t value);
  void add_add_employees(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      add_employees() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_add_employees();

  // repeated int32 remove_employees = 16 [json_name = "removeEmployees"];
  int remove_employees_size() const;
  private:
  int _internal_remove_employees_size() const;
  public:
  void clear_remove_employees();
  private:
  int32_t _internal_remove_employees(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_remove_employees() const;
  void _internal_add_remove_employees(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_remove_employees();
  public:
  int32_t remove_employees(int index) const;
  void set_remove_employees(int index, int32_t value);
  void add_remove_employees(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      remove_employees() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_remove_employees();

  // repeated int32 add_citizens = 17 [json_name = "addCitizens"];
  int add_citizens_size() const;
  private:
  int _internal_add_citizens_size() const;
  public:
  void clear_add_citizens();
  private:
  int32_t _internal_add_citizens(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_add_citizens() const;
  void _internal_add_add_citizens(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_add_citizens();
  public:
  int32_t add_citizens(int index) const;
  void set_add_citizens(int index, int32_t value);
  void add_add_citizens(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      add_citizens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_add_citizens();

  // repeated int32 remove_citizens = 18 [json_name = "removeCitizens"];
  int remove_citizens_size() const;
  private:
  int _internal_remove_citizens_size() const;
  public:
  void clear_remove_citizens();
  private:
  int32_t _internal_remove_citizens(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_remove_citizens() const;
  void _internal_add_remove_citizens(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_remove_citizens();
  public:
  int32_t remove_citizens(int index) const;
  void set_remove_citizens(int index, int32_t value);
  void add_remove_citizens(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      remove_citizens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_remove_citizens();

  // repeated float delta_consumption_currency = 19 [json_name = "deltaConsumptionCurrency"];
  int delta_consumption_currency_size() const;
  private:
  int _internal_delta_consumption_currency_size() const;
  public:
  void clear_delta_consumption_currency();
  private:
  float _internal_delta_consumption_currency(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_delta_consumption_currency() const;
  void _internal_add_delta_consumption_currency(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_delta_consumption_currency();
  public:
  float delta_consumption_currency(int index) const;
  void set_delta_consumption_currency(int index, float value);
  void add_delta_consumption_currency(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      delta_consumption_currency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_delta_consumption_currency();

  // repeated float delta_consumption_propensity = 20 [json_name = "deltaConsumptionPropensity"];
  int delta_consumption_propensity_size() const;
  private:
  int _internal_delta_consumption_propensity_size() const;
  public:
  void clear_delta_consumption_propensity();
  private:
  float _internal_delta_consumption_propensity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_delta_consumption_propensity() const;
  void _internal_add_delta_consumption_propensity(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_delta_consumption_propensity();
  public:
  float delta_consumption_propensity(int index) const;
  void set_delta_consumption_propensity(int index, float value);
  void add_delta_consumption_propensity(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      delta_consumption_propensity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_delta_consumption_propensity();

  // repeated float delta_income_currency = 21 [json_name = "deltaIncomeCurrency"];
  int delta_income_currency_size() const;
  private:
  int _internal_delta_income_currency_size() const;
  public:
  void clear_delta_income_currency();
  private:
  float _internal_delta_income_currency(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_delta_income_currency() const;
  void _internal_add_delta_income_currency(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_delta_income_currency();
  public:
  float delta_income_currency(int index) const;
  void set_delta_income_currency(int index, float value);
  void add_delta_income_currency(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      delta_income_currency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_delta_income_currency();

  // repeated float delta_depression = 22 [json_name = "deltaDepression"];
  int delta_depression_size() const;
  private:
  int _internal_delta_depression_size() const;
  public:
  void clear_delta_depression();
  private:
  float _internal_delta_depression(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_delta_depression() const;
  void _internal_add_delta_depression(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_delta_depression();
  public:
  float delta_depression(int index) const;
  void set_delta_depression(int index, float value);
  void add_delta_depression(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      delta_depression() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_delta_depression();

  // repeated float delta_locus_control = 23 [json_name = "deltaLocusControl"];
  int delta_locus_control_size() const;
  private:
  int _internal_delta_locus_control_size() const;
  public:
  void clear_delta_locus_control();
  private:
  float _internal_delta_locus_control(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_delta_locus_control() const;
  void _internal_add_delta_locus_control(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_delta_locus_control();
  public:
  float delta_locus_control(int index) const;
  void set_delta_locus_control(int index, float value);
  void add_delta_locus_control(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      delta_locus_control() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_delta_locus_control();

  // repeated float delta_working_hours = 24 [json_name = "deltaWorkingHours"];
  int delta_working_hours_size() const;
  private:
  int _internal_delta_working_hours_size() const;
  public:
  void clear_delta_working_hours();
  private:
  float _internal_delta_working_hours(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_delta_working_hours() const;
  void _internal_add_delta_working_hours(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_delta_working_hours();
  public:
  float delta_working_hours(int index) const;
  void set_delta_working_hours(int index, float value);
  void add_delta_working_hours(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      delta_working_hours() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_delta_working_hours();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // optional int32 delta_inventory = 7 [json_name = "deltaInventory"];
  bool has_delta_inventory() const;
  private:
  bool _internal_has_delta_inventory() const;
  public:
  void clear_delta_inventory();
  int32_t delta_inventory() const;
  void set_delta_inventory(int32_t value);
  private:
  int32_t _internal_delta_inventory() const;
  void _internal_set_delta_inventory(int32_t value);
  public:

  // optional float delta_price = 8 [json_name = "deltaPrice"];
  bool has_delta_price() const;
  private:
  bool _internal_has_delta_price() const;
  public:
  void clear_delta_price();
  float delta_price() const;
  void set_delta_price(float value);
  private:
  float _internal_delta_price() const;
  void _internal_set_delta_price(float value);
  public:

  // optional float delta_currency = 9 [json_name = "deltaCurrency"];
  bool has_delta_currency() const;
  private:
  bool _internal_has_delta_currency() const;
  public:
  void clear_delta_currency();
  float delta_currency() const;
  void set_delta_currency(float value);
  private:
  float _internal_delta_currency() const;
  void _internal_set_delta_currency(float value);
  public:

  // optional float delta_interest_rate = 10 [json_name = "deltaInterestRate"];
  bool has_delta_interest_rate() const;
  private:
  bool _internal_has_delta_interest_rate() const;
  public:
  void clear_delta_interest_rate();
  float delta_interest_rate() const;
  void set_delta_interest_rate(float value);
  private:
  float _internal_delta_interest_rate() const;
  void _internal_set_delta_interest_rate(float value);
  public:

  // optional int32 delta_demand = 13 [json_name = "deltaDemand"];
  bool has_delta_demand() const;
  private:
  bool _internal_has_delta_demand() const;
  public:
  void clear_delta_demand();
  int32_t delta_demand() const;
  void set_delta_demand(int32_t value);
  private:
  int32_t _internal_delta_demand() const;
  void _internal_set_delta_demand(int32_t value);
  public:

  // optional int32 delta_sales = 14 [json_name = "deltaSales"];
  bool has_delta_sales() const;
  private:
  bool _internal_has_delta_sales() const;
  public:
  void clear_delta_sales();
  int32_t delta_sales() const;
  void set_delta_sales(int32_t value);
  private:
  int32_t _internal_delta_sales() const;
  void _internal_set_delta_sales(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.DeltaUpdateOrgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > delta_nominal_gdp_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > delta_real_gdp_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > delta_unemployment_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > delta_wages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > delta_prices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > delta_bracket_cutoffs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > delta_bracket_rates_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > add_employees_;
    mutable std::atomic<int> _add_employees_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > remove_employees_;
    mutable std::atomic<int> _remove_employees_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > add_citizens_;
    mutable std::atomic<int> _add_citizens_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > remove_citizens_;
    mutable std::atomic<int> _remove_citizens_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > delta_consumption_currency_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > delta_consumption_propensity_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > delta_income_currency_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > delta_depression_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > delta_locus_control_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > delta_working_hours_;
    int32_t org_id_;
    int32_t delta_inventory_;
    float delta_price_;
    float delta_currency_;
    float delta_interest_rate_;
    int32_t delta_demand_;
    int32_t delta_sales_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeltaUpdateOrgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.DeltaUpdateOrgResponse) */ {
 public:
  inline DeltaUpdateOrgResponse() : DeltaUpdateOrgResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DeltaUpdateOrgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeltaUpdateOrgResponse(const DeltaUpdateOrgResponse& from);
  DeltaUpdateOrgResponse(DeltaUpdateOrgResponse&& from) noexcept
    : DeltaUpdateOrgResponse() {
    *this = ::std::move(from);
  }

  inline DeltaUpdateOrgResponse& operator=(const DeltaUpdateOrgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeltaUpdateOrgResponse& operator=(DeltaUpdateOrgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeltaUpdateOrgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeltaUpdateOrgResponse* internal_default_instance() {
    return reinterpret_cast<const DeltaUpdateOrgResponse*>(
               &_DeltaUpdateOrgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(DeltaUpdateOrgResponse& a, DeltaUpdateOrgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeltaUpdateOrgResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeltaUpdateOrgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeltaUpdateOrgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeltaUpdateOrgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeltaUpdateOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeltaUpdateOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.DeltaUpdateOrgResponse";
  }
  protected:
  explicit DeltaUpdateOrgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.DeltaUpdateOrgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeltaUpdateAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.DeltaUpdateAgentRequest) */ {
 public:
  inline DeltaUpdateAgentRequest() : DeltaUpdateAgentRequest(nullptr) {}
  ~DeltaUpdateAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR DeltaUpdateAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeltaUpdateAgentRequest(const DeltaUpdateAgentRequest& from);
  DeltaUpdateAgentRequest(DeltaUpdateAgentRequest&& from) noexcept
    : DeltaUpdateAgentRequest() {
    *this = ::std::move(from);
  }

  inline DeltaUpdateAgentRequest& operator=(const DeltaUpdateAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeltaUpdateAgentRequest& operator=(DeltaUpdateAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeltaUpdateAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeltaUpdateAgentRequest* internal_default_instance() {
    return reinterpret_cast<const DeltaUpdateAgentRequest*>(
               &_DeltaUpdateAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DeltaUpdateAgentRequest& a, DeltaUpdateAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeltaUpdateAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeltaUpdateAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeltaUpdateAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeltaUpdateAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeltaUpdateAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeltaUpdateAgentRequest& from) {
    DeltaUpdateAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeltaUpdateAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.DeltaUpdateAgentRequest";
  }
  protected:
  explicit DeltaUpdateAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kDeltaCurrencyFieldNumber = 2,
    kNewFirmIdFieldNumber = 3,
    kDeltaSkillFieldNumber = 4,
    kDeltaConsumptionFieldNumber = 5,
    kDeltaIncomeFieldNumber = 6,
  };
  // int32 agent_id = 1 [json_name = "agentId"];
  void clear_agent_id();
  int32_t agent_id() const;
  void set_agent_id(int32_t value);
  private:
  int32_t _internal_agent_id() const;
  void _internal_set_agent_id(int32_t value);
  public:

  // optional float delta_currency = 2 [json_name = "deltaCurrency"];
  bool has_delta_currency() const;
  private:
  bool _internal_has_delta_currency() const;
  public:
  void clear_delta_currency();
  float delta_currency() const;
  void set_delta_currency(float value);
  private:
  float _internal_delta_currency() const;
  void _internal_set_delta_currency(float value);
  public:

  // optional int32 new_firm_id = 3 [json_name = "newFirmId"];
  bool has_new_firm_id() const;
  private:
  bool _internal_has_new_firm_id() const;
  public:
  void clear_new_firm_id();
  int32_t new_firm_id() const;
  void set_new_firm_id(int32_t value);
  private:
  int32_t _internal_new_firm_id() const;
  void _internal_set_new_firm_id(int32_t value);
  public:

  // optional float delta_skill = 4 [json_name = "deltaSkill"];
  bool has_delta_skill() const;
  private:
  bool _internal_has_delta_skill() const;
  public:
  void clear_delta_skill();
  float delta_skill() const;
  void set_delta_skill(float value);
  private:
  float _internal_delta_skill() const;
  void _internal_set_delta_skill(float value);
  public:

  // optional float delta_consumption = 5 [json_name = "deltaConsumption"];
  bool has_delta_consumption() const;
  private:
  bool _internal_has_delta_consumption() const;
  public:
  void clear_delta_consumption();
  float delta_consumption() const;
  void set_delta_consumption(float value);
  private:
  float _internal_delta_consumption() const;
  void _internal_set_delta_consumption(float value);
  public:

  // optional float delta_income = 6 [json_name = "deltaIncome"];
  bool has_delta_income() const;
  private:
  bool _internal_has_delta_income() const;
  public:
  void clear_delta_income();
  float delta_income() const;
  void set_delta_income(float value);
  private:
  float _internal_delta_income() const;
  void _internal_set_delta_income(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.DeltaUpdateAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t agent_id_;
    float delta_currency_;
    int32_t new_firm_id_;
    float delta_skill_;
    float delta_consumption_;
    float delta_income_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeltaUpdateAgentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.DeltaUpdateAgentResponse) */ {
 public:
  inline DeltaUpdateAgentResponse() : DeltaUpdateAgentResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DeltaUpdateAgentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeltaUpdateAgentResponse(const DeltaUpdateAgentResponse& from);
  DeltaUpdateAgentResponse(DeltaUpdateAgentResponse&& from) noexcept
    : DeltaUpdateAgentResponse() {
    *this = ::std::move(from);
  }

  inline DeltaUpdateAgentResponse& operator=(const DeltaUpdateAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeltaUpdateAgentResponse& operator=(DeltaUpdateAgentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeltaUpdateAgentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeltaUpdateAgentResponse* internal_default_instance() {
    return reinterpret_cast<const DeltaUpdateAgentResponse*>(
               &_DeltaUpdateAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(DeltaUpdateAgentResponse& a, DeltaUpdateAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeltaUpdateAgentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeltaUpdateAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeltaUpdateAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeltaUpdateAgentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeltaUpdateAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeltaUpdateAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.DeltaUpdateAgentResponse";
  }
  protected:
  explicit DeltaUpdateAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.DeltaUpdateAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchDeltaUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.BatchDeltaUpdateRequest) */ {
 public:
  inline BatchDeltaUpdateRequest() : BatchDeltaUpdateRequest(nullptr) {}
  ~BatchDeltaUpdateRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchDeltaUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchDeltaUpdateRequest(const BatchDeltaUpdateRequest& from);
  BatchDeltaUpdateRequest(BatchDeltaUpdateRequest&& from) noexcept
    : BatchDeltaUpdateRequest() {
    *this = ::std::move(from);
  }

  inline BatchDeltaUpdateRequest& operator=(const BatchDeltaUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchDeltaUpdateRequest& operator=(BatchDeltaUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchDeltaUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchDeltaUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const BatchDeltaUpdateRequest*>(
               &_BatchDeltaUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(BatchDeltaUpdateRequest& a, BatchDeltaUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchDeltaUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchDeltaUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchDeltaUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchDeltaUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchDeltaUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchDeltaUpdateRequest& from) {
    BatchDeltaUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchDeltaUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.BatchDeltaUpdateRequest";
  }
  protected:
  explicit BatchDeltaUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgsFieldNumber = 1,
    kAgentsFieldNumber = 2,
  };
  // repeated .city.economy.v2.DeltaUpdateOrgRequest orgs = 1 [json_name = "orgs"];
  int orgs_size() const;
  private:
  int _internal_orgs_size() const;
  public:
  void clear_orgs();
  ::city::economy::v2::DeltaUpdateOrgRequest* mutable_orgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateOrgRequest >*
      mutable_orgs();
  private:
  const ::city::economy::v2::DeltaUpdateOrgRequest& _internal_orgs(int index) const;
  ::city::economy::v2::DeltaUpdateOrgRequest* _internal_add_orgs();
  public:
  const ::city::economy::v2::DeltaUpdateOrgRequest& orgs(int index) const;
  ::city::economy::v2::DeltaUpdateOrgRequest* add_orgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateOrgRequest >&
      orgs() const;

  // repeated .city.economy.v2.DeltaUpdateAgentRequest agents = 2 [json_name = "agents"];
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::city::economy::v2::DeltaUpdateAgentRequest* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateAgentRequest >*
      mutable_agents();
  private:
  const ::city::economy::v2::DeltaUpdateAgentRequest& _internal_agents(int index) const;
  ::city::economy::v2::DeltaUpdateAgentRequest* _internal_add_agents();
  public:
  const ::city::economy::v2::DeltaUpdateAgentRequest& agents(int index) const;
  ::city::economy::v2::DeltaUpdateAgentRequest* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateAgentRequest >&
      agents() const;

  // @@protoc_insertion_point(class_scope:city.economy.v2.BatchDeltaUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateOrgRequest > orgs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateAgentRequest > agents_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchDeltaUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.BatchDeltaUpdateResponse) */ {
 public:
  inline BatchDeltaUpdateResponse() : BatchDeltaUpdateResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BatchDeltaUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchDeltaUpdateResponse(const BatchDeltaUpdateResponse& from);
  BatchDeltaUpdateResponse(BatchDeltaUpdateResponse&& from) noexcept
    : BatchDeltaUpdateResponse() {
    *this = ::std::move(from);
  }

  inline BatchDeltaUpdateResponse& operator=(const BatchDeltaUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchDeltaUpdateResponse& operator=(BatchDeltaUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchDeltaUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchDeltaUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const BatchDeltaUpdateResponse*>(
               &_BatchDeltaUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(BatchDeltaUpdateResponse& a, BatchDeltaUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchDeltaUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchDeltaUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchDeltaUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchDeltaUpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BatchDeltaUpdateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BatchDeltaUpdateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.BatchDeltaUpdateResponse";
  }
  protected:
  explicit BatchDeltaUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.BatchDeltaUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SaveEconomyEntitiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SaveEconomyEntitiesRequest) */ {
 public:
  inline SaveEconomyEntitiesRequest() : SaveEconomyEntitiesRequest(nullptr) {}
  ~SaveEconomyEntitiesRequest() override;
  explicit PROTOBUF_CONSTEXPR SaveEconomyEntitiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveEconomyEntitiesRequest(const SaveEconomyEntitiesRequest& from);
  SaveEconomyEntitiesRequest(SaveEconomyEntitiesRequest&& from) noexcept
    : SaveEconomyEntitiesRequest() {
    *this = ::std::move(from);
  }

  inline SaveEconomyEntitiesRequest& operator=(const SaveEconomyEntitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveEconomyEntitiesRequest& operator=(SaveEconomyEntitiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveEconomyEntitiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveEconomyEntitiesRequest* internal_default_instance() {
    return reinterpret_cast<const SaveEconomyEntitiesRequest*>(
               &_SaveEconomyEntitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SaveEconomyEntitiesRequest& a, SaveEconomyEntitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveEconomyEntitiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveEconomyEntitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveEconomyEntitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SaveEconomyEntitiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaveEconomyEntitiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SaveEconomyEntitiesRequest& from) {
    SaveEconomyEntitiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveEconomyEntitiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SaveEconomyEntitiesRequest";
  }
  protected:
  explicit SaveEconomyEntitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
  };
  // string file_path = 1 [json_name = "filePath"];
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SaveEconomyEntitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SaveEconomyEntitiesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SaveEconomyEntitiesResponse) */ {
 public:
  inline SaveEconomyEntitiesResponse() : SaveEconomyEntitiesResponse(nullptr) {}
  ~SaveEconomyEntitiesResponse() override;
  explicit PROTOBUF_CONSTEXPR SaveEconomyEntitiesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveEconomyEntitiesResponse(const SaveEconomyEntitiesResponse& from);
  SaveEconomyEntitiesResponse(SaveEconomyEntitiesResponse&& from) noexcept
    : SaveEconomyEntitiesResponse() {
    *this = ::std::move(from);
  }

  inline SaveEconomyEntitiesResponse& operator=(const SaveEconomyEntitiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveEconomyEntitiesResponse& operator=(SaveEconomyEntitiesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveEconomyEntitiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveEconomyEntitiesResponse* internal_default_instance() {
    return reinterpret_cast<const SaveEconomyEntitiesResponse*>(
               &_SaveEconomyEntitiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SaveEconomyEntitiesResponse& a, SaveEconomyEntitiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveEconomyEntitiesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveEconomyEntitiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveEconomyEntitiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SaveEconomyEntitiesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaveEconomyEntitiesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SaveEconomyEntitiesResponse& from) {
    SaveEconomyEntitiesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveEconomyEntitiesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SaveEconomyEntitiesResponse";
  }
  protected:
  explicit SaveEconomyEntitiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdsFieldNumber = 1,
    kAgentIdsFieldNumber = 2,
  };
  // repeated int32 org_ids = 1 [json_name = "orgIds"];
  int org_ids_size() const;
  private:
  int _internal_org_ids_size() const;
  public:
  void clear_org_ids();
  private:
  int32_t _internal_org_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_org_ids() const;
  void _internal_add_org_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_org_ids();
  public:
  int32_t org_ids(int index) const;
  void set_org_ids(int index, int32_t value);
  void add_org_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      org_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_org_ids();

  // repeated int32 agent_ids = 2 [json_name = "agentIds"];
  int agent_ids_size() const;
  private:
  int _internal_agent_ids_size() const;
  public:
  void clear_agent_ids();
  private:
  int32_t _internal_agent_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_agent_ids() const;
  void _internal_add_agent_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_agent_ids();
  public:
  int32_t agent_ids(int index) const;
  void set_agent_ids(int index, int32_t value);
  void add_agent_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      agent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_agent_ids();

  // @@protoc_insertion_point(class_scope:city.economy.v2.SaveEconomyEntitiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > org_ids_;
    mutable std::atomic<int> _org_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > agent_ids_;
    mutable std::atomic<int> _agent_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoadEconomyEntitiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.LoadEconomyEntitiesRequest) */ {
 public:
  inline LoadEconomyEntitiesRequest() : LoadEconomyEntitiesRequest(nullptr) {}
  ~LoadEconomyEntitiesRequest() override;
  explicit PROTOBUF_CONSTEXPR LoadEconomyEntitiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadEconomyEntitiesRequest(const LoadEconomyEntitiesRequest& from);
  LoadEconomyEntitiesRequest(LoadEconomyEntitiesRequest&& from) noexcept
    : LoadEconomyEntitiesRequest() {
    *this = ::std::move(from);
  }

  inline LoadEconomyEntitiesRequest& operator=(const LoadEconomyEntitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadEconomyEntitiesRequest& operator=(LoadEconomyEntitiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadEconomyEntitiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadEconomyEntitiesRequest* internal_default_instance() {
    return reinterpret_cast<const LoadEconomyEntitiesRequest*>(
               &_LoadEconomyEntitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(LoadEconomyEntitiesRequest& a, LoadEconomyEntitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadEconomyEntitiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadEconomyEntitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadEconomyEntitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadEconomyEntitiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadEconomyEntitiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadEconomyEntitiesRequest& from) {
    LoadEconomyEntitiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadEconomyEntitiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.LoadEconomyEntitiesRequest";
  }
  protected:
  explicit LoadEconomyEntitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
  };
  // string file_path = 1 [json_name = "filePath"];
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.LoadEconomyEntitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoadEconomyEntitiesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.LoadEconomyEntitiesResponse) */ {
 public:
  inline LoadEconomyEntitiesResponse() : LoadEconomyEntitiesResponse(nullptr) {}
  ~LoadEconomyEntitiesResponse() override;
  explicit PROTOBUF_CONSTEXPR LoadEconomyEntitiesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadEconomyEntitiesResponse(const LoadEconomyEntitiesResponse& from);
  LoadEconomyEntitiesResponse(LoadEconomyEntitiesResponse&& from) noexcept
    : LoadEconomyEntitiesResponse() {
    *this = ::std::move(from);
  }

  inline LoadEconomyEntitiesResponse& operator=(const LoadEconomyEntitiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadEconomyEntitiesResponse& operator=(LoadEconomyEntitiesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadEconomyEntitiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadEconomyEntitiesResponse* internal_default_instance() {
    return reinterpret_cast<const LoadEconomyEntitiesResponse*>(
               &_LoadEconomyEntitiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(LoadEconomyEntitiesResponse& a, LoadEconomyEntitiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadEconomyEntitiesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadEconomyEntitiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadEconomyEntitiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadEconomyEntitiesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadEconomyEntitiesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadEconomyEntitiesResponse& from) {
    LoadEconomyEntitiesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadEconomyEntitiesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.LoadEconomyEntitiesResponse";
  }
  protected:
  explicit LoadEconomyEntitiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdsFieldNumber = 1,
    kAgentIdsFieldNumber = 2,
  };
  // repeated int32 org_ids = 1 [json_name = "orgIds"];
  int org_ids_size() const;
  private:
  int _internal_org_ids_size() const;
  public:
  void clear_org_ids();
  private:
  int32_t _internal_org_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_org_ids() const;
  void _internal_add_org_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_org_ids();
  public:
  int32_t org_ids(int index) const;
  void set_org_ids(int index, int32_t value);
  void add_org_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      org_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_org_ids();

  // repeated int32 agent_ids = 2 [json_name = "agentIds"];
  int agent_ids_size() const;
  private:
  int _internal_agent_ids_size() const;
  public:
  void clear_agent_ids();
  private:
  int32_t _internal_agent_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_agent_ids() const;
  void _internal_add_agent_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_agent_ids();
  public:
  int32_t agent_ids(int index) const;
  void set_agent_ids(int index, int32_t value);
  void add_agent_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      agent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_agent_ids();

  // @@protoc_insertion_point(class_scope:city.economy.v2.LoadEconomyEntitiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > org_ids_;
    mutable std::atomic<int> _org_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > agent_ids_;
    mutable std::atomic<int> _agent_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddOrgRequest

// .city.economy.v2.Org org = 1 [json_name = "org"];
inline bool AddOrgRequest::_internal_has_org() const {
  return this != internal_default_instance() && _impl_.org_ != nullptr;
}
inline bool AddOrgRequest::has_org() const {
  return _internal_has_org();
}
inline const ::city::economy::v2::Org& AddOrgRequest::_internal_org() const {
  const ::city::economy::v2::Org* p = _impl_.org_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::economy::v2::Org&>(
      ::city::economy::v2::_Org_default_instance_);
}
inline const ::city::economy::v2::Org& AddOrgRequest::org() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddOrgRequest.org)
  return _internal_org();
}
inline void AddOrgRequest::unsafe_arena_set_allocated_org(
    ::city::economy::v2::Org* org) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.org_);
  }
  _impl_.org_ = org;
  if (org) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.economy.v2.AddOrgRequest.org)
}
inline ::city::economy::v2::Org* AddOrgRequest::release_org() {
  
  ::city::economy::v2::Org* temp = _impl_.org_;
  _impl_.org_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::economy::v2::Org* AddOrgRequest::unsafe_arena_release_org() {
  // @@protoc_insertion_point(field_release:city.economy.v2.AddOrgRequest.org)
  
  ::city::economy::v2::Org* temp = _impl_.org_;
  _impl_.org_ = nullptr;
  return temp;
}
inline ::city::economy::v2::Org* AddOrgRequest::_internal_mutable_org() {
  
  if (_impl_.org_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::economy::v2::Org>(GetArenaForAllocation());
    _impl_.org_ = p;
  }
  return _impl_.org_;
}
inline ::city::economy::v2::Org* AddOrgRequest::mutable_org() {
  ::city::economy::v2::Org* _msg = _internal_mutable_org();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.AddOrgRequest.org)
  return _msg;
}
inline void AddOrgRequest::set_allocated_org(::city::economy::v2::Org* org) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.org_);
  }
  if (org) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(org));
    if (message_arena != submessage_arena) {
      org = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, org, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.org_ = org;
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.AddOrgRequest.org)
}

// -------------------------------------------------------------------

// AddOrgResponse

// -------------------------------------------------------------------

// RemoveOrgRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void RemoveOrgRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t RemoveOrgRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t RemoveOrgRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.RemoveOrgRequest.org_id)
  return _internal_org_id();
}
inline void RemoveOrgRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void RemoveOrgRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.RemoveOrgRequest.org_id)
}

// -------------------------------------------------------------------

// RemoveOrgResponse

// -------------------------------------------------------------------

// GetOrgRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetOrgRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetOrgRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetOrgRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetOrgRequest.org_id)
  return _internal_org_id();
}
inline void GetOrgRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetOrgRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetOrgRequest.org_id)
}

// -------------------------------------------------------------------

// GetOrgResponse

// .city.economy.v2.Org org = 1 [json_name = "org"];
inline bool GetOrgResponse::_internal_has_org() const {
  return this != internal_default_instance() && _impl_.org_ != nullptr;
}
inline bool GetOrgResponse::has_org() const {
  return _internal_has_org();
}
inline const ::city::economy::v2::Org& GetOrgResponse::_internal_org() const {
  const ::city::economy::v2::Org* p = _impl_.org_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::economy::v2::Org&>(
      ::city::economy::v2::_Org_default_instance_);
}
inline const ::city::economy::v2::Org& GetOrgResponse::org() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetOrgResponse.org)
  return _internal_org();
}
inline void GetOrgResponse::unsafe_arena_set_allocated_org(
    ::city::economy::v2::Org* org) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.org_);
  }
  _impl_.org_ = org;
  if (org) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.economy.v2.GetOrgResponse.org)
}
inline ::city::economy::v2::Org* GetOrgResponse::release_org() {
  
  ::city::economy::v2::Org* temp = _impl_.org_;
  _impl_.org_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::economy::v2::Org* GetOrgResponse::unsafe_arena_release_org() {
  // @@protoc_insertion_point(field_release:city.economy.v2.GetOrgResponse.org)
  
  ::city::economy::v2::Org* temp = _impl_.org_;
  _impl_.org_ = nullptr;
  return temp;
}
inline ::city::economy::v2::Org* GetOrgResponse::_internal_mutable_org() {
  
  if (_impl_.org_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::economy::v2::Org>(GetArenaForAllocation());
    _impl_.org_ = p;
  }
  return _impl_.org_;
}
inline ::city::economy::v2::Org* GetOrgResponse::mutable_org() {
  ::city::economy::v2::Org* _msg = _internal_mutable_org();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.GetOrgResponse.org)
  return _msg;
}
inline void GetOrgResponse::set_allocated_org(::city::economy::v2::Org* org) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.org_);
  }
  if (org) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(org));
    if (message_arena != submessage_arena) {
      org = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, org, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.org_ = org;
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.GetOrgResponse.org)
}

// -------------------------------------------------------------------

// UpdateOrgRequest

// .city.economy.v2.Org org = 1 [json_name = "org"];
inline bool UpdateOrgRequest::_internal_has_org() const {
  return this != internal_default_instance() && _impl_.org_ != nullptr;
}
inline bool UpdateOrgRequest::has_org() const {
  return _internal_has_org();
}
inline const ::city::economy::v2::Org& UpdateOrgRequest::_internal_org() const {
  const ::city::economy::v2::Org* p = _impl_.org_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::economy::v2::Org&>(
      ::city::economy::v2::_Org_default_instance_);
}
inline const ::city::economy::v2::Org& UpdateOrgRequest::org() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.UpdateOrgRequest.org)
  return _internal_org();
}
inline void UpdateOrgRequest::unsafe_arena_set_allocated_org(
    ::city::economy::v2::Org* org) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.org_);
  }
  _impl_.org_ = org;
  if (org) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.economy.v2.UpdateOrgRequest.org)
}
inline ::city::economy::v2::Org* UpdateOrgRequest::release_org() {
  
  ::city::economy::v2::Org* temp = _impl_.org_;
  _impl_.org_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::economy::v2::Org* UpdateOrgRequest::unsafe_arena_release_org() {
  // @@protoc_insertion_point(field_release:city.economy.v2.UpdateOrgRequest.org)
  
  ::city::economy::v2::Org* temp = _impl_.org_;
  _impl_.org_ = nullptr;
  return temp;
}
inline ::city::economy::v2::Org* UpdateOrgRequest::_internal_mutable_org() {
  
  if (_impl_.org_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::economy::v2::Org>(GetArenaForAllocation());
    _impl_.org_ = p;
  }
  return _impl_.org_;
}
inline ::city::economy::v2::Org* UpdateOrgRequest::mutable_org() {
  ::city::economy::v2::Org* _msg = _internal_mutable_org();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.UpdateOrgRequest.org)
  return _msg;
}
inline void UpdateOrgRequest::set_allocated_org(::city::economy::v2::Org* org) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.org_);
  }
  if (org) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(org));
    if (message_arena != submessage_arena) {
      org = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, org, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.org_ = org;
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.UpdateOrgRequest.org)
}

// -------------------------------------------------------------------

// UpdateOrgResponse

// -------------------------------------------------------------------

// AddAgentRequest

// .city.economy.v2.Agent agent = 1 [json_name = "agent"];
inline bool AddAgentRequest::_internal_has_agent() const {
  return this != internal_default_instance() && _impl_.agent_ != nullptr;
}
inline bool AddAgentRequest::has_agent() const {
  return _internal_has_agent();
}
inline const ::city::economy::v2::Agent& AddAgentRequest::_internal_agent() const {
  const ::city::economy::v2::Agent* p = _impl_.agent_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::economy::v2::Agent&>(
      ::city::economy::v2::_Agent_default_instance_);
}
inline const ::city::economy::v2::Agent& AddAgentRequest::agent() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddAgentRequest.agent)
  return _internal_agent();
}
inline void AddAgentRequest::unsafe_arena_set_allocated_agent(
    ::city::economy::v2::Agent* agent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_);
  }
  _impl_.agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.economy.v2.AddAgentRequest.agent)
}
inline ::city::economy::v2::Agent* AddAgentRequest::release_agent() {
  
  ::city::economy::v2::Agent* temp = _impl_.agent_;
  _impl_.agent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::economy::v2::Agent* AddAgentRequest::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_release:city.economy.v2.AddAgentRequest.agent)
  
  ::city::economy::v2::Agent* temp = _impl_.agent_;
  _impl_.agent_ = nullptr;
  return temp;
}
inline ::city::economy::v2::Agent* AddAgentRequest::_internal_mutable_agent() {
  
  if (_impl_.agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::economy::v2::Agent>(GetArenaForAllocation());
    _impl_.agent_ = p;
  }
  return _impl_.agent_;
}
inline ::city::economy::v2::Agent* AddAgentRequest::mutable_agent() {
  ::city::economy::v2::Agent* _msg = _internal_mutable_agent();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.AddAgentRequest.agent)
  return _msg;
}
inline void AddAgentRequest::set_allocated_agent(::city::economy::v2::Agent* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_);
  }
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent));
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.agent_ = agent;
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.AddAgentRequest.agent)
}

// -------------------------------------------------------------------

// AddAgentResponse

// -------------------------------------------------------------------

// RemoveAgentRequest

// int32 agent_id = 1 [json_name = "agentId"];
inline void RemoveAgentRequest::clear_agent_id() {
  _impl_.agent_id_ = 0;
}
inline int32_t RemoveAgentRequest::_internal_agent_id() const {
  return _impl_.agent_id_;
}
inline int32_t RemoveAgentRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.RemoveAgentRequest.agent_id)
  return _internal_agent_id();
}
inline void RemoveAgentRequest::_internal_set_agent_id(int32_t value) {
  
  _impl_.agent_id_ = value;
}
inline void RemoveAgentRequest::set_agent_id(int32_t value) {
  _internal_set_agent_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.RemoveAgentRequest.agent_id)
}

// -------------------------------------------------------------------

// RemoveAgentResponse

// -------------------------------------------------------------------

// GetAgentRequest

// int32 agent_id = 1 [json_name = "agentId"];
inline void GetAgentRequest::clear_agent_id() {
  _impl_.agent_id_ = 0;
}
inline int32_t GetAgentRequest::_internal_agent_id() const {
  return _impl_.agent_id_;
}
inline int32_t GetAgentRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetAgentRequest.agent_id)
  return _internal_agent_id();
}
inline void GetAgentRequest::_internal_set_agent_id(int32_t value) {
  
  _impl_.agent_id_ = value;
}
inline void GetAgentRequest::set_agent_id(int32_t value) {
  _internal_set_agent_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetAgentRequest.agent_id)
}

// -------------------------------------------------------------------

// GetAgentResponse

// .city.economy.v2.Agent agent = 1 [json_name = "agent"];
inline bool GetAgentResponse::_internal_has_agent() const {
  return this != internal_default_instance() && _impl_.agent_ != nullptr;
}
inline bool GetAgentResponse::has_agent() const {
  return _internal_has_agent();
}
inline const ::city::economy::v2::Agent& GetAgentResponse::_internal_agent() const {
  const ::city::economy::v2::Agent* p = _impl_.agent_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::economy::v2::Agent&>(
      ::city::economy::v2::_Agent_default_instance_);
}
inline const ::city::economy::v2::Agent& GetAgentResponse::agent() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetAgentResponse.agent)
  return _internal_agent();
}
inline void GetAgentResponse::unsafe_arena_set_allocated_agent(
    ::city::economy::v2::Agent* agent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_);
  }
  _impl_.agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.economy.v2.GetAgentResponse.agent)
}
inline ::city::economy::v2::Agent* GetAgentResponse::release_agent() {
  
  ::city::economy::v2::Agent* temp = _impl_.agent_;
  _impl_.agent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::economy::v2::Agent* GetAgentResponse::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_release:city.economy.v2.GetAgentResponse.agent)
  
  ::city::economy::v2::Agent* temp = _impl_.agent_;
  _impl_.agent_ = nullptr;
  return temp;
}
inline ::city::economy::v2::Agent* GetAgentResponse::_internal_mutable_agent() {
  
  if (_impl_.agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::economy::v2::Agent>(GetArenaForAllocation());
    _impl_.agent_ = p;
  }
  return _impl_.agent_;
}
inline ::city::economy::v2::Agent* GetAgentResponse::mutable_agent() {
  ::city::economy::v2::Agent* _msg = _internal_mutable_agent();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.GetAgentResponse.agent)
  return _msg;
}
inline void GetAgentResponse::set_allocated_agent(::city::economy::v2::Agent* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_);
  }
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent));
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.agent_ = agent;
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.GetAgentResponse.agent)
}

// -------------------------------------------------------------------

// UpdateAgentRequest

// .city.economy.v2.Agent agent = 1 [json_name = "agent"];
inline bool UpdateAgentRequest::_internal_has_agent() const {
  return this != internal_default_instance() && _impl_.agent_ != nullptr;
}
inline bool UpdateAgentRequest::has_agent() const {
  return _internal_has_agent();
}
inline const ::city::economy::v2::Agent& UpdateAgentRequest::_internal_agent() const {
  const ::city::economy::v2::Agent* p = _impl_.agent_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::economy::v2::Agent&>(
      ::city::economy::v2::_Agent_default_instance_);
}
inline const ::city::economy::v2::Agent& UpdateAgentRequest::agent() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.UpdateAgentRequest.agent)
  return _internal_agent();
}
inline void UpdateAgentRequest::unsafe_arena_set_allocated_agent(
    ::city::economy::v2::Agent* agent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_);
  }
  _impl_.agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.economy.v2.UpdateAgentRequest.agent)
}
inline ::city::economy::v2::Agent* UpdateAgentRequest::release_agent() {
  
  ::city::economy::v2::Agent* temp = _impl_.agent_;
  _impl_.agent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::economy::v2::Agent* UpdateAgentRequest::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_release:city.economy.v2.UpdateAgentRequest.agent)
  
  ::city::economy::v2::Agent* temp = _impl_.agent_;
  _impl_.agent_ = nullptr;
  return temp;
}
inline ::city::economy::v2::Agent* UpdateAgentRequest::_internal_mutable_agent() {
  
  if (_impl_.agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::economy::v2::Agent>(GetArenaForAllocation());
    _impl_.agent_ = p;
  }
  return _impl_.agent_;
}
inline ::city::economy::v2::Agent* UpdateAgentRequest::mutable_agent() {
  ::city::economy::v2::Agent* _msg = _internal_mutable_agent();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.UpdateAgentRequest.agent)
  return _msg;
}
inline void UpdateAgentRequest::set_allocated_agent(::city::economy::v2::Agent* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_);
  }
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent));
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.agent_ = agent;
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.UpdateAgentRequest.agent)
}

// -------------------------------------------------------------------

// UpdateAgentResponse

// -------------------------------------------------------------------

// CalculateTaxesDueRequest

// int32 government_id = 1 [json_name = "governmentId"];
inline void CalculateTaxesDueRequest::clear_government_id() {
  _impl_.government_id_ = 0;
}
inline int32_t CalculateTaxesDueRequest::_internal_government_id() const {
  return _impl_.government_id_;
}
inline int32_t CalculateTaxesDueRequest::government_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateTaxesDueRequest.government_id)
  return _internal_government_id();
}
inline void CalculateTaxesDueRequest::_internal_set_government_id(int32_t value) {
  
  _impl_.government_id_ = value;
}
inline void CalculateTaxesDueRequest::set_government_id(int32_t value) {
  _internal_set_government_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateTaxesDueRequest.government_id)
}

// repeated int32 agent_ids = 2 [json_name = "agentIds"];
inline int CalculateTaxesDueRequest::_internal_agent_ids_size() const {
  return _impl_.agent_ids_.size();
}
inline int CalculateTaxesDueRequest::agent_ids_size() const {
  return _internal_agent_ids_size();
}
inline void CalculateTaxesDueRequest::clear_agent_ids() {
  _impl_.agent_ids_.Clear();
}
inline int32_t CalculateTaxesDueRequest::_internal_agent_ids(int index) const {
  return _impl_.agent_ids_.Get(index);
}
inline int32_t CalculateTaxesDueRequest::agent_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateTaxesDueRequest.agent_ids)
  return _internal_agent_ids(index);
}
inline void CalculateTaxesDueRequest::set_agent_ids(int index, int32_t value) {
  _impl_.agent_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateTaxesDueRequest.agent_ids)
}
inline void CalculateTaxesDueRequest::_internal_add_agent_ids(int32_t value) {
  _impl_.agent_ids_.Add(value);
}
inline void CalculateTaxesDueRequest::add_agent_ids(int32_t value) {
  _internal_add_agent_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.CalculateTaxesDueRequest.agent_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateTaxesDueRequest::_internal_agent_ids() const {
  return _impl_.agent_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateTaxesDueRequest::agent_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.CalculateTaxesDueRequest.agent_ids)
  return _internal_agent_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateTaxesDueRequest::_internal_mutable_agent_ids() {
  return &_impl_.agent_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateTaxesDueRequest::mutable_agent_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.CalculateTaxesDueRequest.agent_ids)
  return _internal_mutable_agent_ids();
}

// repeated float incomes = 3 [json_name = "incomes"];
inline int CalculateTaxesDueRequest::_internal_incomes_size() const {
  return _impl_.incomes_.size();
}
inline int CalculateTaxesDueRequest::incomes_size() const {
  return _internal_incomes_size();
}
inline void CalculateTaxesDueRequest::clear_incomes() {
  _impl_.incomes_.Clear();
}
inline float CalculateTaxesDueRequest::_internal_incomes(int index) const {
  return _impl_.incomes_.Get(index);
}
inline float CalculateTaxesDueRequest::incomes(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateTaxesDueRequest.incomes)
  return _internal_incomes(index);
}
inline void CalculateTaxesDueRequest::set_incomes(int index, float value) {
  _impl_.incomes_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateTaxesDueRequest.incomes)
}
inline void CalculateTaxesDueRequest::_internal_add_incomes(float value) {
  _impl_.incomes_.Add(value);
}
inline void CalculateTaxesDueRequest::add_incomes(float value) {
  _internal_add_incomes(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.CalculateTaxesDueRequest.incomes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateTaxesDueRequest::_internal_incomes() const {
  return _impl_.incomes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateTaxesDueRequest::incomes() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.CalculateTaxesDueRequest.incomes)
  return _internal_incomes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateTaxesDueRequest::_internal_mutable_incomes() {
  return &_impl_.incomes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateTaxesDueRequest::mutable_incomes() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.CalculateTaxesDueRequest.incomes)
  return _internal_mutable_incomes();
}

// bool enable_redistribution = 4 [json_name = "enableRedistribution"];
inline void CalculateTaxesDueRequest::clear_enable_redistribution() {
  _impl_.enable_redistribution_ = false;
}
inline bool CalculateTaxesDueRequest::_internal_enable_redistribution() const {
  return _impl_.enable_redistribution_;
}
inline bool CalculateTaxesDueRequest::enable_redistribution() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateTaxesDueRequest.enable_redistribution)
  return _internal_enable_redistribution();
}
inline void CalculateTaxesDueRequest::_internal_set_enable_redistribution(bool value) {
  
  _impl_.enable_redistribution_ = value;
}
inline void CalculateTaxesDueRequest::set_enable_redistribution(bool value) {
  _internal_set_enable_redistribution(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateTaxesDueRequest.enable_redistribution)
}

// -------------------------------------------------------------------

// CalculateTaxesDueResponse

// float taxes_due = 1 [json_name = "taxesDue"];
inline void CalculateTaxesDueResponse::clear_taxes_due() {
  _impl_.taxes_due_ = 0;
}
inline float CalculateTaxesDueResponse::_internal_taxes_due() const {
  return _impl_.taxes_due_;
}
inline float CalculateTaxesDueResponse::taxes_due() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateTaxesDueResponse.taxes_due)
  return _internal_taxes_due();
}
inline void CalculateTaxesDueResponse::_internal_set_taxes_due(float value) {
  
  _impl_.taxes_due_ = value;
}
inline void CalculateTaxesDueResponse::set_taxes_due(float value) {
  _internal_set_taxes_due(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateTaxesDueResponse.taxes_due)
}

// repeated float updated_incomes = 2 [json_name = "updatedIncomes"];
inline int CalculateTaxesDueResponse::_internal_updated_incomes_size() const {
  return _impl_.updated_incomes_.size();
}
inline int CalculateTaxesDueResponse::updated_incomes_size() const {
  return _internal_updated_incomes_size();
}
inline void CalculateTaxesDueResponse::clear_updated_incomes() {
  _impl_.updated_incomes_.Clear();
}
inline float CalculateTaxesDueResponse::_internal_updated_incomes(int index) const {
  return _impl_.updated_incomes_.Get(index);
}
inline float CalculateTaxesDueResponse::updated_incomes(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateTaxesDueResponse.updated_incomes)
  return _internal_updated_incomes(index);
}
inline void CalculateTaxesDueResponse::set_updated_incomes(int index, float value) {
  _impl_.updated_incomes_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateTaxesDueResponse.updated_incomes)
}
inline void CalculateTaxesDueResponse::_internal_add_updated_incomes(float value) {
  _impl_.updated_incomes_.Add(value);
}
inline void CalculateTaxesDueResponse::add_updated_incomes(float value) {
  _internal_add_updated_incomes(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.CalculateTaxesDueResponse.updated_incomes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateTaxesDueResponse::_internal_updated_incomes() const {
  return _impl_.updated_incomes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateTaxesDueResponse::updated_incomes() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.CalculateTaxesDueResponse.updated_incomes)
  return _internal_updated_incomes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateTaxesDueResponse::_internal_mutable_updated_incomes() {
  return &_impl_.updated_incomes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateTaxesDueResponse::mutable_updated_incomes() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.CalculateTaxesDueResponse.updated_incomes)
  return _internal_mutable_updated_incomes();
}

// -------------------------------------------------------------------

// CalculateConsumptionRequest

// repeated int32 firm_ids = 1 [json_name = "firmIds"];
inline int CalculateConsumptionRequest::_internal_firm_ids_size() const {
  return _impl_.firm_ids_.size();
}
inline int CalculateConsumptionRequest::firm_ids_size() const {
  return _internal_firm_ids_size();
}
inline void CalculateConsumptionRequest::clear_firm_ids() {
  _impl_.firm_ids_.Clear();
}
inline int32_t CalculateConsumptionRequest::_internal_firm_ids(int index) const {
  return _impl_.firm_ids_.Get(index);
}
inline int32_t CalculateConsumptionRequest::firm_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateConsumptionRequest.firm_ids)
  return _internal_firm_ids(index);
}
inline void CalculateConsumptionRequest::set_firm_ids(int index, int32_t value) {
  _impl_.firm_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateConsumptionRequest.firm_ids)
}
inline void CalculateConsumptionRequest::_internal_add_firm_ids(int32_t value) {
  _impl_.firm_ids_.Add(value);
}
inline void CalculateConsumptionRequest::add_firm_ids(int32_t value) {
  _internal_add_firm_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.CalculateConsumptionRequest.firm_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateConsumptionRequest::_internal_firm_ids() const {
  return _impl_.firm_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateConsumptionRequest::firm_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.CalculateConsumptionRequest.firm_ids)
  return _internal_firm_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateConsumptionRequest::_internal_mutable_firm_ids() {
  return &_impl_.firm_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateConsumptionRequest::mutable_firm_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.CalculateConsumptionRequest.firm_ids)
  return _internal_mutable_firm_ids();
}

// int32 agent_id = 2 [json_name = "agentId"];
inline void CalculateConsumptionRequest::clear_agent_id() {
  _impl_.agent_id_ = 0;
}
inline int32_t CalculateConsumptionRequest::_internal_agent_id() const {
  return _impl_.agent_id_;
}
inline int32_t CalculateConsumptionRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateConsumptionRequest.agent_id)
  return _internal_agent_id();
}
inline void CalculateConsumptionRequest::_internal_set_agent_id(int32_t value) {
  
  _impl_.agent_id_ = value;
}
inline void CalculateConsumptionRequest::set_agent_id(int32_t value) {
  _internal_set_agent_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateConsumptionRequest.agent_id)
}

// repeated int32 demands = 3 [json_name = "demands"];
inline int CalculateConsumptionRequest::_internal_demands_size() const {
  return _impl_.demands_.size();
}
inline int CalculateConsumptionRequest::demands_size() const {
  return _internal_demands_size();
}
inline void CalculateConsumptionRequest::clear_demands() {
  _impl_.demands_.Clear();
}
inline int32_t CalculateConsumptionRequest::_internal_demands(int index) const {
  return _impl_.demands_.Get(index);
}
inline int32_t CalculateConsumptionRequest::demands(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateConsumptionRequest.demands)
  return _internal_demands(index);
}
inline void CalculateConsumptionRequest::set_demands(int index, int32_t value) {
  _impl_.demands_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateConsumptionRequest.demands)
}
inline void CalculateConsumptionRequest::_internal_add_demands(int32_t value) {
  _impl_.demands_.Add(value);
}
inline void CalculateConsumptionRequest::add_demands(int32_t value) {
  _internal_add_demands(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.CalculateConsumptionRequest.demands)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateConsumptionRequest::_internal_demands() const {
  return _impl_.demands_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateConsumptionRequest::demands() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.CalculateConsumptionRequest.demands)
  return _internal_demands();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateConsumptionRequest::_internal_mutable_demands() {
  return &_impl_.demands_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateConsumptionRequest::mutable_demands() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.CalculateConsumptionRequest.demands)
  return _internal_mutable_demands();
}

// optional bool consumption_accumulation = 4 [json_name = "consumptionAccumulation"];
inline bool CalculateConsumptionRequest::_internal_has_consumption_accumulation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CalculateConsumptionRequest::has_consumption_accumulation() const {
  return _internal_has_consumption_accumulation();
}
inline void CalculateConsumptionRequest::clear_consumption_accumulation() {
  _impl_.consumption_accumulation_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CalculateConsumptionRequest::_internal_consumption_accumulation() const {
  return _impl_.consumption_accumulation_;
}
inline bool CalculateConsumptionRequest::consumption_accumulation() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateConsumptionRequest.consumption_accumulation)
  return _internal_consumption_accumulation();
}
inline void CalculateConsumptionRequest::_internal_set_consumption_accumulation(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.consumption_accumulation_ = value;
}
inline void CalculateConsumptionRequest::set_consumption_accumulation(bool value) {
  _internal_set_consumption_accumulation(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateConsumptionRequest.consumption_accumulation)
}

// -------------------------------------------------------------------

// CalculateConsumptionResponse

// float actual_consumption = 1 [json_name = "actualConsumption"];
inline void CalculateConsumptionResponse::clear_actual_consumption() {
  _impl_.actual_consumption_ = 0;
}
inline float CalculateConsumptionResponse::_internal_actual_consumption() const {
  return _impl_.actual_consumption_;
}
inline float CalculateConsumptionResponse::actual_consumption() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateConsumptionResponse.actual_consumption)
  return _internal_actual_consumption();
}
inline void CalculateConsumptionResponse::_internal_set_actual_consumption(float value) {
  
  _impl_.actual_consumption_ = value;
}
inline void CalculateConsumptionResponse::set_actual_consumption(float value) {
  _internal_set_actual_consumption(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateConsumptionResponse.actual_consumption)
}

// bool success = 2 [json_name = "success"];
inline void CalculateConsumptionResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool CalculateConsumptionResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool CalculateConsumptionResponse::success() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateConsumptionResponse.success)
  return _internal_success();
}
inline void CalculateConsumptionResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void CalculateConsumptionResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateConsumptionResponse.success)
}

// -------------------------------------------------------------------

// CalculateInterestRequest

// int32 bank_id = 1 [json_name = "bankId"];
inline void CalculateInterestRequest::clear_bank_id() {
  _impl_.bank_id_ = 0;
}
inline int32_t CalculateInterestRequest::_internal_bank_id() const {
  return _impl_.bank_id_;
}
inline int32_t CalculateInterestRequest::bank_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateInterestRequest.bank_id)
  return _internal_bank_id();
}
inline void CalculateInterestRequest::_internal_set_bank_id(int32_t value) {
  
  _impl_.bank_id_ = value;
}
inline void CalculateInterestRequest::set_bank_id(int32_t value) {
  _internal_set_bank_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateInterestRequest.bank_id)
}

// repeated int32 agent_ids = 2 [json_name = "agentIds"];
inline int CalculateInterestRequest::_internal_agent_ids_size() const {
  return _impl_.agent_ids_.size();
}
inline int CalculateInterestRequest::agent_ids_size() const {
  return _internal_agent_ids_size();
}
inline void CalculateInterestRequest::clear_agent_ids() {
  _impl_.agent_ids_.Clear();
}
inline int32_t CalculateInterestRequest::_internal_agent_ids(int index) const {
  return _impl_.agent_ids_.Get(index);
}
inline int32_t CalculateInterestRequest::agent_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateInterestRequest.agent_ids)
  return _internal_agent_ids(index);
}
inline void CalculateInterestRequest::set_agent_ids(int index, int32_t value) {
  _impl_.agent_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateInterestRequest.agent_ids)
}
inline void CalculateInterestRequest::_internal_add_agent_ids(int32_t value) {
  _impl_.agent_ids_.Add(value);
}
inline void CalculateInterestRequest::add_agent_ids(int32_t value) {
  _internal_add_agent_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.CalculateInterestRequest.agent_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateInterestRequest::_internal_agent_ids() const {
  return _impl_.agent_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateInterestRequest::agent_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.CalculateInterestRequest.agent_ids)
  return _internal_agent_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateInterestRequest::_internal_mutable_agent_ids() {
  return &_impl_.agent_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateInterestRequest::mutable_agent_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.CalculateInterestRequest.agent_ids)
  return _internal_mutable_agent_ids();
}

// -------------------------------------------------------------------

// CalculateInterestResponse

// float total_interest = 1 [json_name = "totalInterest"];
inline void CalculateInterestResponse::clear_total_interest() {
  _impl_.total_interest_ = 0;
}
inline float CalculateInterestResponse::_internal_total_interest() const {
  return _impl_.total_interest_;
}
inline float CalculateInterestResponse::total_interest() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateInterestResponse.total_interest)
  return _internal_total_interest();
}
inline void CalculateInterestResponse::_internal_set_total_interest(float value) {
  
  _impl_.total_interest_ = value;
}
inline void CalculateInterestResponse::set_total_interest(float value) {
  _internal_set_total_interest(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateInterestResponse.total_interest)
}

// repeated float updated_currencies = 2 [json_name = "updatedCurrencies"];
inline int CalculateInterestResponse::_internal_updated_currencies_size() const {
  return _impl_.updated_currencies_.size();
}
inline int CalculateInterestResponse::updated_currencies_size() const {
  return _internal_updated_currencies_size();
}
inline void CalculateInterestResponse::clear_updated_currencies() {
  _impl_.updated_currencies_.Clear();
}
inline float CalculateInterestResponse::_internal_updated_currencies(int index) const {
  return _impl_.updated_currencies_.Get(index);
}
inline float CalculateInterestResponse::updated_currencies(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateInterestResponse.updated_currencies)
  return _internal_updated_currencies(index);
}
inline void CalculateInterestResponse::set_updated_currencies(int index, float value) {
  _impl_.updated_currencies_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateInterestResponse.updated_currencies)
}
inline void CalculateInterestResponse::_internal_add_updated_currencies(float value) {
  _impl_.updated_currencies_.Add(value);
}
inline void CalculateInterestResponse::add_updated_currencies(float value) {
  _internal_add_updated_currencies(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.CalculateInterestResponse.updated_currencies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateInterestResponse::_internal_updated_currencies() const {
  return _impl_.updated_currencies_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateInterestResponse::updated_currencies() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.CalculateInterestResponse.updated_currencies)
  return _internal_updated_currencies();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateInterestResponse::_internal_mutable_updated_currencies() {
  return &_impl_.updated_currencies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateInterestResponse::mutable_updated_currencies() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.CalculateInterestResponse.updated_currencies)
  return _internal_mutable_updated_currencies();
}

// -------------------------------------------------------------------

// CalculateRealGDPRequest

// int32 nbs_agent_id = 1 [json_name = "nbsAgentId"];
inline void CalculateRealGDPRequest::clear_nbs_agent_id() {
  _impl_.nbs_agent_id_ = 0;
}
inline int32_t CalculateRealGDPRequest::_internal_nbs_agent_id() const {
  return _impl_.nbs_agent_id_;
}
inline int32_t CalculateRealGDPRequest::nbs_agent_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateRealGDPRequest.nbs_agent_id)
  return _internal_nbs_agent_id();
}
inline void CalculateRealGDPRequest::_internal_set_nbs_agent_id(int32_t value) {
  
  _impl_.nbs_agent_id_ = value;
}
inline void CalculateRealGDPRequest::set_nbs_agent_id(int32_t value) {
  _internal_set_nbs_agent_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateRealGDPRequest.nbs_agent_id)
}

// -------------------------------------------------------------------

// CalculateRealGDPResponse

// float real_gdp = 1 [json_name = "realGdp"];
inline void CalculateRealGDPResponse::clear_real_gdp() {
  _impl_.real_gdp_ = 0;
}
inline float CalculateRealGDPResponse::_internal_real_gdp() const {
  return _impl_.real_gdp_;
}
inline float CalculateRealGDPResponse::real_gdp() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateRealGDPResponse.real_gdp)
  return _internal_real_gdp();
}
inline void CalculateRealGDPResponse::_internal_set_real_gdp(float value) {
  
  _impl_.real_gdp_ = value;
}
inline void CalculateRealGDPResponse::set_real_gdp(float value) {
  _internal_set_real_gdp(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateRealGDPResponse.real_gdp)
}

// -------------------------------------------------------------------

// BatchGetRequest

// repeated int32 ids = 1 [json_name = "ids"];
inline int BatchGetRequest::_internal_ids_size() const {
  return _impl_.ids_.size();
}
inline int BatchGetRequest::ids_size() const {
  return _internal_ids_size();
}
inline void BatchGetRequest::clear_ids() {
  _impl_.ids_.Clear();
}
inline int32_t BatchGetRequest::_internal_ids(int index) const {
  return _impl_.ids_.Get(index);
}
inline int32_t BatchGetRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchGetRequest.ids)
  return _internal_ids(index);
}
inline void BatchGetRequest::set_ids(int index, int32_t value) {
  _impl_.ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.BatchGetRequest.ids)
}
inline void BatchGetRequest::_internal_add_ids(int32_t value) {
  _impl_.ids_.Add(value);
}
inline void BatchGetRequest::add_ids(int32_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchGetRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BatchGetRequest::_internal_ids() const {
  return _impl_.ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BatchGetRequest::ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchGetRequest.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BatchGetRequest::_internal_mutable_ids() {
  return &_impl_.ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BatchGetRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchGetRequest.ids)
  return _internal_mutable_ids();
}

// string type = 2 [json_name = "type"];
inline void BatchGetRequest::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& BatchGetRequest::type() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchGetRequest.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchGetRequest::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.economy.v2.BatchGetRequest.type)
}
inline std::string* BatchGetRequest::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchGetRequest.type)
  return _s;
}
inline const std::string& BatchGetRequest::_internal_type() const {
  return _impl_.type_.Get();
}
inline void BatchGetRequest::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchGetRequest::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchGetRequest::release_type() {
  // @@protoc_insertion_point(field_release:city.economy.v2.BatchGetRequest.type)
  return _impl_.type_.Release();
}
inline void BatchGetRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.BatchGetRequest.type)
}

// -------------------------------------------------------------------

// BatchGetResponse

// repeated .city.economy.v2.Org orgs = 1 [json_name = "orgs"];
inline int BatchGetResponse::_internal_orgs_size() const {
  return _impl_.orgs_.size();
}
inline int BatchGetResponse::orgs_size() const {
  return _internal_orgs_size();
}
inline ::city::economy::v2::Org* BatchGetResponse::mutable_orgs(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchGetResponse.orgs)
  return _impl_.orgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >*
BatchGetResponse::mutable_orgs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchGetResponse.orgs)
  return &_impl_.orgs_;
}
inline const ::city::economy::v2::Org& BatchGetResponse::_internal_orgs(int index) const {
  return _impl_.orgs_.Get(index);
}
inline const ::city::economy::v2::Org& BatchGetResponse::orgs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchGetResponse.orgs)
  return _internal_orgs(index);
}
inline ::city::economy::v2::Org* BatchGetResponse::_internal_add_orgs() {
  return _impl_.orgs_.Add();
}
inline ::city::economy::v2::Org* BatchGetResponse::add_orgs() {
  ::city::economy::v2::Org* _add = _internal_add_orgs();
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchGetResponse.orgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >&
BatchGetResponse::orgs() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchGetResponse.orgs)
  return _impl_.orgs_;
}

// repeated .city.economy.v2.Agent agents = 2 [json_name = "agents"];
inline int BatchGetResponse::_internal_agents_size() const {
  return _impl_.agents_.size();
}
inline int BatchGetResponse::agents_size() const {
  return _internal_agents_size();
}
inline ::city::economy::v2::Agent* BatchGetResponse::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchGetResponse.agents)
  return _impl_.agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >*
BatchGetResponse::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchGetResponse.agents)
  return &_impl_.agents_;
}
inline const ::city::economy::v2::Agent& BatchGetResponse::_internal_agents(int index) const {
  return _impl_.agents_.Get(index);
}
inline const ::city::economy::v2::Agent& BatchGetResponse::agents(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchGetResponse.agents)
  return _internal_agents(index);
}
inline ::city::economy::v2::Agent* BatchGetResponse::_internal_add_agents() {
  return _impl_.agents_.Add();
}
inline ::city::economy::v2::Agent* BatchGetResponse::add_agents() {
  ::city::economy::v2::Agent* _add = _internal_add_agents();
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchGetResponse.agents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >&
BatchGetResponse::agents() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchGetResponse.agents)
  return _impl_.agents_;
}

// -------------------------------------------------------------------

// BatchUpdateRequest

// repeated .city.economy.v2.Org orgs = 1 [json_name = "orgs"];
inline int BatchUpdateRequest::_internal_orgs_size() const {
  return _impl_.orgs_.size();
}
inline int BatchUpdateRequest::orgs_size() const {
  return _internal_orgs_size();
}
inline ::city::economy::v2::Org* BatchUpdateRequest::mutable_orgs(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchUpdateRequest.orgs)
  return _impl_.orgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >*
BatchUpdateRequest::mutable_orgs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchUpdateRequest.orgs)
  return &_impl_.orgs_;
}
inline const ::city::economy::v2::Org& BatchUpdateRequest::_internal_orgs(int index) const {
  return _impl_.orgs_.Get(index);
}
inline const ::city::economy::v2::Org& BatchUpdateRequest::orgs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchUpdateRequest.orgs)
  return _internal_orgs(index);
}
inline ::city::economy::v2::Org* BatchUpdateRequest::_internal_add_orgs() {
  return _impl_.orgs_.Add();
}
inline ::city::economy::v2::Org* BatchUpdateRequest::add_orgs() {
  ::city::economy::v2::Org* _add = _internal_add_orgs();
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchUpdateRequest.orgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >&
BatchUpdateRequest::orgs() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchUpdateRequest.orgs)
  return _impl_.orgs_;
}

// repeated .city.economy.v2.Agent agents = 2 [json_name = "agents"];
inline int BatchUpdateRequest::_internal_agents_size() const {
  return _impl_.agents_.size();
}
inline int BatchUpdateRequest::agents_size() const {
  return _internal_agents_size();
}
inline ::city::economy::v2::Agent* BatchUpdateRequest::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchUpdateRequest.agents)
  return _impl_.agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >*
BatchUpdateRequest::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchUpdateRequest.agents)
  return &_impl_.agents_;
}
inline const ::city::economy::v2::Agent& BatchUpdateRequest::_internal_agents(int index) const {
  return _impl_.agents_.Get(index);
}
inline const ::city::economy::v2::Agent& BatchUpdateRequest::agents(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchUpdateRequest.agents)
  return _internal_agents(index);
}
inline ::city::economy::v2::Agent* BatchUpdateRequest::_internal_add_agents() {
  return _impl_.agents_.Add();
}
inline ::city::economy::v2::Agent* BatchUpdateRequest::add_agents() {
  ::city::economy::v2::Agent* _add = _internal_add_agents();
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchUpdateRequest.agents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >&
BatchUpdateRequest::agents() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchUpdateRequest.agents)
  return _impl_.agents_;
}

// -------------------------------------------------------------------

// BatchUpdateResponse

// -------------------------------------------------------------------

// BatchSetRequest

// repeated .city.economy.v2.Org orgs = 1 [json_name = "orgs"];
inline int BatchSetRequest::_internal_orgs_size() const {
  return _impl_.orgs_.size();
}
inline int BatchSetRequest::orgs_size() const {
  return _internal_orgs_size();
}
inline ::city::economy::v2::Org* BatchSetRequest::mutable_orgs(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchSetRequest.orgs)
  return _impl_.orgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >*
BatchSetRequest::mutable_orgs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchSetRequest.orgs)
  return &_impl_.orgs_;
}
inline const ::city::economy::v2::Org& BatchSetRequest::_internal_orgs(int index) const {
  return _impl_.orgs_.Get(index);
}
inline const ::city::economy::v2::Org& BatchSetRequest::orgs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchSetRequest.orgs)
  return _internal_orgs(index);
}
inline ::city::economy::v2::Org* BatchSetRequest::_internal_add_orgs() {
  return _impl_.orgs_.Add();
}
inline ::city::economy::v2::Org* BatchSetRequest::add_orgs() {
  ::city::economy::v2::Org* _add = _internal_add_orgs();
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchSetRequest.orgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >&
BatchSetRequest::orgs() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchSetRequest.orgs)
  return _impl_.orgs_;
}

// repeated .city.economy.v2.Agent agents = 2 [json_name = "agents"];
inline int BatchSetRequest::_internal_agents_size() const {
  return _impl_.agents_.size();
}
inline int BatchSetRequest::agents_size() const {
  return _internal_agents_size();
}
inline ::city::economy::v2::Agent* BatchSetRequest::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchSetRequest.agents)
  return _impl_.agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >*
BatchSetRequest::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchSetRequest.agents)
  return &_impl_.agents_;
}
inline const ::city::economy::v2::Agent& BatchSetRequest::_internal_agents(int index) const {
  return _impl_.agents_.Get(index);
}
inline const ::city::economy::v2::Agent& BatchSetRequest::agents(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchSetRequest.agents)
  return _internal_agents(index);
}
inline ::city::economy::v2::Agent* BatchSetRequest::_internal_add_agents() {
  return _impl_.agents_.Add();
}
inline ::city::economy::v2::Agent* BatchSetRequest::add_agents() {
  ::city::economy::v2::Agent* _add = _internal_add_agents();
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchSetRequest.agents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >&
BatchSetRequest::agents() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchSetRequest.agents)
  return _impl_.agents_;
}

// -------------------------------------------------------------------

// BatchSetResponse

// -------------------------------------------------------------------

// DeltaUpdateOrgRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void DeltaUpdateOrgRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t DeltaUpdateOrgRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t DeltaUpdateOrgRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.org_id)
  return _internal_org_id();
}
inline void DeltaUpdateOrgRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void DeltaUpdateOrgRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.org_id)
}

// repeated float delta_nominal_gdp = 2 [json_name = "deltaNominalGdp"];
inline int DeltaUpdateOrgRequest::_internal_delta_nominal_gdp_size() const {
  return _impl_.delta_nominal_gdp_.size();
}
inline int DeltaUpdateOrgRequest::delta_nominal_gdp_size() const {
  return _internal_delta_nominal_gdp_size();
}
inline void DeltaUpdateOrgRequest::clear_delta_nominal_gdp() {
  _impl_.delta_nominal_gdp_.Clear();
}
inline float DeltaUpdateOrgRequest::_internal_delta_nominal_gdp(int index) const {
  return _impl_.delta_nominal_gdp_.Get(index);
}
inline float DeltaUpdateOrgRequest::delta_nominal_gdp(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_nominal_gdp)
  return _internal_delta_nominal_gdp(index);
}
inline void DeltaUpdateOrgRequest::set_delta_nominal_gdp(int index, float value) {
  _impl_.delta_nominal_gdp_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_nominal_gdp)
}
inline void DeltaUpdateOrgRequest::_internal_add_delta_nominal_gdp(float value) {
  _impl_.delta_nominal_gdp_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_delta_nominal_gdp(float value) {
  _internal_add_delta_nominal_gdp(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.delta_nominal_gdp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::_internal_delta_nominal_gdp() const {
  return _impl_.delta_nominal_gdp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::delta_nominal_gdp() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.delta_nominal_gdp)
  return _internal_delta_nominal_gdp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::_internal_mutable_delta_nominal_gdp() {
  return &_impl_.delta_nominal_gdp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::mutable_delta_nominal_gdp() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.delta_nominal_gdp)
  return _internal_mutable_delta_nominal_gdp();
}

// repeated float delta_real_gdp = 3 [json_name = "deltaRealGdp"];
inline int DeltaUpdateOrgRequest::_internal_delta_real_gdp_size() const {
  return _impl_.delta_real_gdp_.size();
}
inline int DeltaUpdateOrgRequest::delta_real_gdp_size() const {
  return _internal_delta_real_gdp_size();
}
inline void DeltaUpdateOrgRequest::clear_delta_real_gdp() {
  _impl_.delta_real_gdp_.Clear();
}
inline float DeltaUpdateOrgRequest::_internal_delta_real_gdp(int index) const {
  return _impl_.delta_real_gdp_.Get(index);
}
inline float DeltaUpdateOrgRequest::delta_real_gdp(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_real_gdp)
  return _internal_delta_real_gdp(index);
}
inline void DeltaUpdateOrgRequest::set_delta_real_gdp(int index, float value) {
  _impl_.delta_real_gdp_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_real_gdp)
}
inline void DeltaUpdateOrgRequest::_internal_add_delta_real_gdp(float value) {
  _impl_.delta_real_gdp_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_delta_real_gdp(float value) {
  _internal_add_delta_real_gdp(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.delta_real_gdp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::_internal_delta_real_gdp() const {
  return _impl_.delta_real_gdp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::delta_real_gdp() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.delta_real_gdp)
  return _internal_delta_real_gdp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::_internal_mutable_delta_real_gdp() {
  return &_impl_.delta_real_gdp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::mutable_delta_real_gdp() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.delta_real_gdp)
  return _internal_mutable_delta_real_gdp();
}

// repeated float delta_unemployment = 4 [json_name = "deltaUnemployment"];
inline int DeltaUpdateOrgRequest::_internal_delta_unemployment_size() const {
  return _impl_.delta_unemployment_.size();
}
inline int DeltaUpdateOrgRequest::delta_unemployment_size() const {
  return _internal_delta_unemployment_size();
}
inline void DeltaUpdateOrgRequest::clear_delta_unemployment() {
  _impl_.delta_unemployment_.Clear();
}
inline float DeltaUpdateOrgRequest::_internal_delta_unemployment(int index) const {
  return _impl_.delta_unemployment_.Get(index);
}
inline float DeltaUpdateOrgRequest::delta_unemployment(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_unemployment)
  return _internal_delta_unemployment(index);
}
inline void DeltaUpdateOrgRequest::set_delta_unemployment(int index, float value) {
  _impl_.delta_unemployment_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_unemployment)
}
inline void DeltaUpdateOrgRequest::_internal_add_delta_unemployment(float value) {
  _impl_.delta_unemployment_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_delta_unemployment(float value) {
  _internal_add_delta_unemployment(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.delta_unemployment)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::_internal_delta_unemployment() const {
  return _impl_.delta_unemployment_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::delta_unemployment() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.delta_unemployment)
  return _internal_delta_unemployment();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::_internal_mutable_delta_unemployment() {
  return &_impl_.delta_unemployment_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::mutable_delta_unemployment() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.delta_unemployment)
  return _internal_mutable_delta_unemployment();
}

// repeated float delta_wages = 5 [json_name = "deltaWages"];
inline int DeltaUpdateOrgRequest::_internal_delta_wages_size() const {
  return _impl_.delta_wages_.size();
}
inline int DeltaUpdateOrgRequest::delta_wages_size() const {
  return _internal_delta_wages_size();
}
inline void DeltaUpdateOrgRequest::clear_delta_wages() {
  _impl_.delta_wages_.Clear();
}
inline float DeltaUpdateOrgRequest::_internal_delta_wages(int index) const {
  return _impl_.delta_wages_.Get(index);
}
inline float DeltaUpdateOrgRequest::delta_wages(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_wages)
  return _internal_delta_wages(index);
}
inline void DeltaUpdateOrgRequest::set_delta_wages(int index, float value) {
  _impl_.delta_wages_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_wages)
}
inline void DeltaUpdateOrgRequest::_internal_add_delta_wages(float value) {
  _impl_.delta_wages_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_delta_wages(float value) {
  _internal_add_delta_wages(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.delta_wages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::_internal_delta_wages() const {
  return _impl_.delta_wages_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::delta_wages() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.delta_wages)
  return _internal_delta_wages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::_internal_mutable_delta_wages() {
  return &_impl_.delta_wages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::mutable_delta_wages() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.delta_wages)
  return _internal_mutable_delta_wages();
}

// repeated float delta_prices = 6 [json_name = "deltaPrices"];
inline int DeltaUpdateOrgRequest::_internal_delta_prices_size() const {
  return _impl_.delta_prices_.size();
}
inline int DeltaUpdateOrgRequest::delta_prices_size() const {
  return _internal_delta_prices_size();
}
inline void DeltaUpdateOrgRequest::clear_delta_prices() {
  _impl_.delta_prices_.Clear();
}
inline float DeltaUpdateOrgRequest::_internal_delta_prices(int index) const {
  return _impl_.delta_prices_.Get(index);
}
inline float DeltaUpdateOrgRequest::delta_prices(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_prices)
  return _internal_delta_prices(index);
}
inline void DeltaUpdateOrgRequest::set_delta_prices(int index, float value) {
  _impl_.delta_prices_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_prices)
}
inline void DeltaUpdateOrgRequest::_internal_add_delta_prices(float value) {
  _impl_.delta_prices_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_delta_prices(float value) {
  _internal_add_delta_prices(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.delta_prices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::_internal_delta_prices() const {
  return _impl_.delta_prices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::delta_prices() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.delta_prices)
  return _internal_delta_prices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::_internal_mutable_delta_prices() {
  return &_impl_.delta_prices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::mutable_delta_prices() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.delta_prices)
  return _internal_mutable_delta_prices();
}

// optional int32 delta_inventory = 7 [json_name = "deltaInventory"];
inline bool DeltaUpdateOrgRequest::_internal_has_delta_inventory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeltaUpdateOrgRequest::has_delta_inventory() const {
  return _internal_has_delta_inventory();
}
inline void DeltaUpdateOrgRequest::clear_delta_inventory() {
  _impl_.delta_inventory_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t DeltaUpdateOrgRequest::_internal_delta_inventory() const {
  return _impl_.delta_inventory_;
}
inline int32_t DeltaUpdateOrgRequest::delta_inventory() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_inventory)
  return _internal_delta_inventory();
}
inline void DeltaUpdateOrgRequest::_internal_set_delta_inventory(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.delta_inventory_ = value;
}
inline void DeltaUpdateOrgRequest::set_delta_inventory(int32_t value) {
  _internal_set_delta_inventory(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_inventory)
}

// optional float delta_price = 8 [json_name = "deltaPrice"];
inline bool DeltaUpdateOrgRequest::_internal_has_delta_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeltaUpdateOrgRequest::has_delta_price() const {
  return _internal_has_delta_price();
}
inline void DeltaUpdateOrgRequest::clear_delta_price() {
  _impl_.delta_price_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float DeltaUpdateOrgRequest::_internal_delta_price() const {
  return _impl_.delta_price_;
}
inline float DeltaUpdateOrgRequest::delta_price() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_price)
  return _internal_delta_price();
}
inline void DeltaUpdateOrgRequest::_internal_set_delta_price(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.delta_price_ = value;
}
inline void DeltaUpdateOrgRequest::set_delta_price(float value) {
  _internal_set_delta_price(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_price)
}

// optional float delta_currency = 9 [json_name = "deltaCurrency"];
inline bool DeltaUpdateOrgRequest::_internal_has_delta_currency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeltaUpdateOrgRequest::has_delta_currency() const {
  return _internal_has_delta_currency();
}
inline void DeltaUpdateOrgRequest::clear_delta_currency() {
  _impl_.delta_currency_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float DeltaUpdateOrgRequest::_internal_delta_currency() const {
  return _impl_.delta_currency_;
}
inline float DeltaUpdateOrgRequest::delta_currency() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_currency)
  return _internal_delta_currency();
}
inline void DeltaUpdateOrgRequest::_internal_set_delta_currency(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.delta_currency_ = value;
}
inline void DeltaUpdateOrgRequest::set_delta_currency(float value) {
  _internal_set_delta_currency(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_currency)
}

// optional float delta_interest_rate = 10 [json_name = "deltaInterestRate"];
inline bool DeltaUpdateOrgRequest::_internal_has_delta_interest_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DeltaUpdateOrgRequest::has_delta_interest_rate() const {
  return _internal_has_delta_interest_rate();
}
inline void DeltaUpdateOrgRequest::clear_delta_interest_rate() {
  _impl_.delta_interest_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float DeltaUpdateOrgRequest::_internal_delta_interest_rate() const {
  return _impl_.delta_interest_rate_;
}
inline float DeltaUpdateOrgRequest::delta_interest_rate() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_interest_rate)
  return _internal_delta_interest_rate();
}
inline void DeltaUpdateOrgRequest::_internal_set_delta_interest_rate(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.delta_interest_rate_ = value;
}
inline void DeltaUpdateOrgRequest::set_delta_interest_rate(float value) {
  _internal_set_delta_interest_rate(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_interest_rate)
}

// repeated float delta_bracket_cutoffs = 11 [json_name = "deltaBracketCutoffs"];
inline int DeltaUpdateOrgRequest::_internal_delta_bracket_cutoffs_size() const {
  return _impl_.delta_bracket_cutoffs_.size();
}
inline int DeltaUpdateOrgRequest::delta_bracket_cutoffs_size() const {
  return _internal_delta_bracket_cutoffs_size();
}
inline void DeltaUpdateOrgRequest::clear_delta_bracket_cutoffs() {
  _impl_.delta_bracket_cutoffs_.Clear();
}
inline float DeltaUpdateOrgRequest::_internal_delta_bracket_cutoffs(int index) const {
  return _impl_.delta_bracket_cutoffs_.Get(index);
}
inline float DeltaUpdateOrgRequest::delta_bracket_cutoffs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_bracket_cutoffs)
  return _internal_delta_bracket_cutoffs(index);
}
inline void DeltaUpdateOrgRequest::set_delta_bracket_cutoffs(int index, float value) {
  _impl_.delta_bracket_cutoffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_bracket_cutoffs)
}
inline void DeltaUpdateOrgRequest::_internal_add_delta_bracket_cutoffs(float value) {
  _impl_.delta_bracket_cutoffs_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_delta_bracket_cutoffs(float value) {
  _internal_add_delta_bracket_cutoffs(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.delta_bracket_cutoffs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::_internal_delta_bracket_cutoffs() const {
  return _impl_.delta_bracket_cutoffs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::delta_bracket_cutoffs() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.delta_bracket_cutoffs)
  return _internal_delta_bracket_cutoffs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::_internal_mutable_delta_bracket_cutoffs() {
  return &_impl_.delta_bracket_cutoffs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::mutable_delta_bracket_cutoffs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.delta_bracket_cutoffs)
  return _internal_mutable_delta_bracket_cutoffs();
}

// repeated float delta_bracket_rates = 12 [json_name = "deltaBracketRates"];
inline int DeltaUpdateOrgRequest::_internal_delta_bracket_rates_size() const {
  return _impl_.delta_bracket_rates_.size();
}
inline int DeltaUpdateOrgRequest::delta_bracket_rates_size() const {
  return _internal_delta_bracket_rates_size();
}
inline void DeltaUpdateOrgRequest::clear_delta_bracket_rates() {
  _impl_.delta_bracket_rates_.Clear();
}
inline float DeltaUpdateOrgRequest::_internal_delta_bracket_rates(int index) const {
  return _impl_.delta_bracket_rates_.Get(index);
}
inline float DeltaUpdateOrgRequest::delta_bracket_rates(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_bracket_rates)
  return _internal_delta_bracket_rates(index);
}
inline void DeltaUpdateOrgRequest::set_delta_bracket_rates(int index, float value) {
  _impl_.delta_bracket_rates_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_bracket_rates)
}
inline void DeltaUpdateOrgRequest::_internal_add_delta_bracket_rates(float value) {
  _impl_.delta_bracket_rates_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_delta_bracket_rates(float value) {
  _internal_add_delta_bracket_rates(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.delta_bracket_rates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::_internal_delta_bracket_rates() const {
  return _impl_.delta_bracket_rates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::delta_bracket_rates() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.delta_bracket_rates)
  return _internal_delta_bracket_rates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::_internal_mutable_delta_bracket_rates() {
  return &_impl_.delta_bracket_rates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::mutable_delta_bracket_rates() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.delta_bracket_rates)
  return _internal_mutable_delta_bracket_rates();
}

// optional int32 delta_demand = 13 [json_name = "deltaDemand"];
inline bool DeltaUpdateOrgRequest::_internal_has_delta_demand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DeltaUpdateOrgRequest::has_delta_demand() const {
  return _internal_has_delta_demand();
}
inline void DeltaUpdateOrgRequest::clear_delta_demand() {
  _impl_.delta_demand_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t DeltaUpdateOrgRequest::_internal_delta_demand() const {
  return _impl_.delta_demand_;
}
inline int32_t DeltaUpdateOrgRequest::delta_demand() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_demand)
  return _internal_delta_demand();
}
inline void DeltaUpdateOrgRequest::_internal_set_delta_demand(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.delta_demand_ = value;
}
inline void DeltaUpdateOrgRequest::set_delta_demand(int32_t value) {
  _internal_set_delta_demand(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_demand)
}

// optional int32 delta_sales = 14 [json_name = "deltaSales"];
inline bool DeltaUpdateOrgRequest::_internal_has_delta_sales() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DeltaUpdateOrgRequest::has_delta_sales() const {
  return _internal_has_delta_sales();
}
inline void DeltaUpdateOrgRequest::clear_delta_sales() {
  _impl_.delta_sales_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t DeltaUpdateOrgRequest::_internal_delta_sales() const {
  return _impl_.delta_sales_;
}
inline int32_t DeltaUpdateOrgRequest::delta_sales() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_sales)
  return _internal_delta_sales();
}
inline void DeltaUpdateOrgRequest::_internal_set_delta_sales(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.delta_sales_ = value;
}
inline void DeltaUpdateOrgRequest::set_delta_sales(int32_t value) {
  _internal_set_delta_sales(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_sales)
}

// repeated int32 add_employees = 15 [json_name = "addEmployees"];
inline int DeltaUpdateOrgRequest::_internal_add_employees_size() const {
  return _impl_.add_employees_.size();
}
inline int DeltaUpdateOrgRequest::add_employees_size() const {
  return _internal_add_employees_size();
}
inline void DeltaUpdateOrgRequest::clear_add_employees() {
  _impl_.add_employees_.Clear();
}
inline int32_t DeltaUpdateOrgRequest::_internal_add_employees(int index) const {
  return _impl_.add_employees_.Get(index);
}
inline int32_t DeltaUpdateOrgRequest::add_employees(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.add_employees)
  return _internal_add_employees(index);
}
inline void DeltaUpdateOrgRequest::set_add_employees(int index, int32_t value) {
  _impl_.add_employees_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.add_employees)
}
inline void DeltaUpdateOrgRequest::_internal_add_add_employees(int32_t value) {
  _impl_.add_employees_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_add_employees(int32_t value) {
  _internal_add_add_employees(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.add_employees)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DeltaUpdateOrgRequest::_internal_add_employees() const {
  return _impl_.add_employees_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DeltaUpdateOrgRequest::add_employees() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.add_employees)
  return _internal_add_employees();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DeltaUpdateOrgRequest::_internal_mutable_add_employees() {
  return &_impl_.add_employees_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DeltaUpdateOrgRequest::mutable_add_employees() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.add_employees)
  return _internal_mutable_add_employees();
}

// repeated int32 remove_employees = 16 [json_name = "removeEmployees"];
inline int DeltaUpdateOrgRequest::_internal_remove_employees_size() const {
  return _impl_.remove_employees_.size();
}
inline int DeltaUpdateOrgRequest::remove_employees_size() const {
  return _internal_remove_employees_size();
}
inline void DeltaUpdateOrgRequest::clear_remove_employees() {
  _impl_.remove_employees_.Clear();
}
inline int32_t DeltaUpdateOrgRequest::_internal_remove_employees(int index) const {
  return _impl_.remove_employees_.Get(index);
}
inline int32_t DeltaUpdateOrgRequest::remove_employees(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.remove_employees)
  return _internal_remove_employees(index);
}
inline void DeltaUpdateOrgRequest::set_remove_employees(int index, int32_t value) {
  _impl_.remove_employees_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.remove_employees)
}
inline void DeltaUpdateOrgRequest::_internal_add_remove_employees(int32_t value) {
  _impl_.remove_employees_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_remove_employees(int32_t value) {
  _internal_add_remove_employees(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.remove_employees)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DeltaUpdateOrgRequest::_internal_remove_employees() const {
  return _impl_.remove_employees_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DeltaUpdateOrgRequest::remove_employees() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.remove_employees)
  return _internal_remove_employees();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DeltaUpdateOrgRequest::_internal_mutable_remove_employees() {
  return &_impl_.remove_employees_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DeltaUpdateOrgRequest::mutable_remove_employees() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.remove_employees)
  return _internal_mutable_remove_employees();
}

// repeated int32 add_citizens = 17 [json_name = "addCitizens"];
inline int DeltaUpdateOrgRequest::_internal_add_citizens_size() const {
  return _impl_.add_citizens_.size();
}
inline int DeltaUpdateOrgRequest::add_citizens_size() const {
  return _internal_add_citizens_size();
}
inline void DeltaUpdateOrgRequest::clear_add_citizens() {
  _impl_.add_citizens_.Clear();
}
inline int32_t DeltaUpdateOrgRequest::_internal_add_citizens(int index) const {
  return _impl_.add_citizens_.Get(index);
}
inline int32_t DeltaUpdateOrgRequest::add_citizens(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.add_citizens)
  return _internal_add_citizens(index);
}
inline void DeltaUpdateOrgRequest::set_add_citizens(int index, int32_t value) {
  _impl_.add_citizens_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.add_citizens)
}
inline void DeltaUpdateOrgRequest::_internal_add_add_citizens(int32_t value) {
  _impl_.add_citizens_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_add_citizens(int32_t value) {
  _internal_add_add_citizens(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.add_citizens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DeltaUpdateOrgRequest::_internal_add_citizens() const {
  return _impl_.add_citizens_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DeltaUpdateOrgRequest::add_citizens() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.add_citizens)
  return _internal_add_citizens();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DeltaUpdateOrgRequest::_internal_mutable_add_citizens() {
  return &_impl_.add_citizens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DeltaUpdateOrgRequest::mutable_add_citizens() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.add_citizens)
  return _internal_mutable_add_citizens();
}

// repeated int32 remove_citizens = 18 [json_name = "removeCitizens"];
inline int DeltaUpdateOrgRequest::_internal_remove_citizens_size() const {
  return _impl_.remove_citizens_.size();
}
inline int DeltaUpdateOrgRequest::remove_citizens_size() const {
  return _internal_remove_citizens_size();
}
inline void DeltaUpdateOrgRequest::clear_remove_citizens() {
  _impl_.remove_citizens_.Clear();
}
inline int32_t DeltaUpdateOrgRequest::_internal_remove_citizens(int index) const {
  return _impl_.remove_citizens_.Get(index);
}
inline int32_t DeltaUpdateOrgRequest::remove_citizens(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.remove_citizens)
  return _internal_remove_citizens(index);
}
inline void DeltaUpdateOrgRequest::set_remove_citizens(int index, int32_t value) {
  _impl_.remove_citizens_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.remove_citizens)
}
inline void DeltaUpdateOrgRequest::_internal_add_remove_citizens(int32_t value) {
  _impl_.remove_citizens_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_remove_citizens(int32_t value) {
  _internal_add_remove_citizens(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.remove_citizens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DeltaUpdateOrgRequest::_internal_remove_citizens() const {
  return _impl_.remove_citizens_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DeltaUpdateOrgRequest::remove_citizens() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.remove_citizens)
  return _internal_remove_citizens();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DeltaUpdateOrgRequest::_internal_mutable_remove_citizens() {
  return &_impl_.remove_citizens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DeltaUpdateOrgRequest::mutable_remove_citizens() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.remove_citizens)
  return _internal_mutable_remove_citizens();
}

// repeated float delta_consumption_currency = 19 [json_name = "deltaConsumptionCurrency"];
inline int DeltaUpdateOrgRequest::_internal_delta_consumption_currency_size() const {
  return _impl_.delta_consumption_currency_.size();
}
inline int DeltaUpdateOrgRequest::delta_consumption_currency_size() const {
  return _internal_delta_consumption_currency_size();
}
inline void DeltaUpdateOrgRequest::clear_delta_consumption_currency() {
  _impl_.delta_consumption_currency_.Clear();
}
inline float DeltaUpdateOrgRequest::_internal_delta_consumption_currency(int index) const {
  return _impl_.delta_consumption_currency_.Get(index);
}
inline float DeltaUpdateOrgRequest::delta_consumption_currency(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_consumption_currency)
  return _internal_delta_consumption_currency(index);
}
inline void DeltaUpdateOrgRequest::set_delta_consumption_currency(int index, float value) {
  _impl_.delta_consumption_currency_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_consumption_currency)
}
inline void DeltaUpdateOrgRequest::_internal_add_delta_consumption_currency(float value) {
  _impl_.delta_consumption_currency_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_delta_consumption_currency(float value) {
  _internal_add_delta_consumption_currency(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.delta_consumption_currency)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::_internal_delta_consumption_currency() const {
  return _impl_.delta_consumption_currency_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::delta_consumption_currency() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.delta_consumption_currency)
  return _internal_delta_consumption_currency();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::_internal_mutable_delta_consumption_currency() {
  return &_impl_.delta_consumption_currency_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::mutable_delta_consumption_currency() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.delta_consumption_currency)
  return _internal_mutable_delta_consumption_currency();
}

// repeated float delta_consumption_propensity = 20 [json_name = "deltaConsumptionPropensity"];
inline int DeltaUpdateOrgRequest::_internal_delta_consumption_propensity_size() const {
  return _impl_.delta_consumption_propensity_.size();
}
inline int DeltaUpdateOrgRequest::delta_consumption_propensity_size() const {
  return _internal_delta_consumption_propensity_size();
}
inline void DeltaUpdateOrgRequest::clear_delta_consumption_propensity() {
  _impl_.delta_consumption_propensity_.Clear();
}
inline float DeltaUpdateOrgRequest::_internal_delta_consumption_propensity(int index) const {
  return _impl_.delta_consumption_propensity_.Get(index);
}
inline float DeltaUpdateOrgRequest::delta_consumption_propensity(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_consumption_propensity)
  return _internal_delta_consumption_propensity(index);
}
inline void DeltaUpdateOrgRequest::set_delta_consumption_propensity(int index, float value) {
  _impl_.delta_consumption_propensity_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_consumption_propensity)
}
inline void DeltaUpdateOrgRequest::_internal_add_delta_consumption_propensity(float value) {
  _impl_.delta_consumption_propensity_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_delta_consumption_propensity(float value) {
  _internal_add_delta_consumption_propensity(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.delta_consumption_propensity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::_internal_delta_consumption_propensity() const {
  return _impl_.delta_consumption_propensity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::delta_consumption_propensity() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.delta_consumption_propensity)
  return _internal_delta_consumption_propensity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::_internal_mutable_delta_consumption_propensity() {
  return &_impl_.delta_consumption_propensity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::mutable_delta_consumption_propensity() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.delta_consumption_propensity)
  return _internal_mutable_delta_consumption_propensity();
}

// repeated float delta_income_currency = 21 [json_name = "deltaIncomeCurrency"];
inline int DeltaUpdateOrgRequest::_internal_delta_income_currency_size() const {
  return _impl_.delta_income_currency_.size();
}
inline int DeltaUpdateOrgRequest::delta_income_currency_size() const {
  return _internal_delta_income_currency_size();
}
inline void DeltaUpdateOrgRequest::clear_delta_income_currency() {
  _impl_.delta_income_currency_.Clear();
}
inline float DeltaUpdateOrgRequest::_internal_delta_income_currency(int index) const {
  return _impl_.delta_income_currency_.Get(index);
}
inline float DeltaUpdateOrgRequest::delta_income_currency(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_income_currency)
  return _internal_delta_income_currency(index);
}
inline void DeltaUpdateOrgRequest::set_delta_income_currency(int index, float value) {
  _impl_.delta_income_currency_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_income_currency)
}
inline void DeltaUpdateOrgRequest::_internal_add_delta_income_currency(float value) {
  _impl_.delta_income_currency_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_delta_income_currency(float value) {
  _internal_add_delta_income_currency(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.delta_income_currency)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::_internal_delta_income_currency() const {
  return _impl_.delta_income_currency_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::delta_income_currency() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.delta_income_currency)
  return _internal_delta_income_currency();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::_internal_mutable_delta_income_currency() {
  return &_impl_.delta_income_currency_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::mutable_delta_income_currency() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.delta_income_currency)
  return _internal_mutable_delta_income_currency();
}

// repeated float delta_depression = 22 [json_name = "deltaDepression"];
inline int DeltaUpdateOrgRequest::_internal_delta_depression_size() const {
  return _impl_.delta_depression_.size();
}
inline int DeltaUpdateOrgRequest::delta_depression_size() const {
  return _internal_delta_depression_size();
}
inline void DeltaUpdateOrgRequest::clear_delta_depression() {
  _impl_.delta_depression_.Clear();
}
inline float DeltaUpdateOrgRequest::_internal_delta_depression(int index) const {
  return _impl_.delta_depression_.Get(index);
}
inline float DeltaUpdateOrgRequest::delta_depression(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_depression)
  return _internal_delta_depression(index);
}
inline void DeltaUpdateOrgRequest::set_delta_depression(int index, float value) {
  _impl_.delta_depression_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_depression)
}
inline void DeltaUpdateOrgRequest::_internal_add_delta_depression(float value) {
  _impl_.delta_depression_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_delta_depression(float value) {
  _internal_add_delta_depression(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.delta_depression)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::_internal_delta_depression() const {
  return _impl_.delta_depression_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::delta_depression() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.delta_depression)
  return _internal_delta_depression();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::_internal_mutable_delta_depression() {
  return &_impl_.delta_depression_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::mutable_delta_depression() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.delta_depression)
  return _internal_mutable_delta_depression();
}

// repeated float delta_locus_control = 23 [json_name = "deltaLocusControl"];
inline int DeltaUpdateOrgRequest::_internal_delta_locus_control_size() const {
  return _impl_.delta_locus_control_.size();
}
inline int DeltaUpdateOrgRequest::delta_locus_control_size() const {
  return _internal_delta_locus_control_size();
}
inline void DeltaUpdateOrgRequest::clear_delta_locus_control() {
  _impl_.delta_locus_control_.Clear();
}
inline float DeltaUpdateOrgRequest::_internal_delta_locus_control(int index) const {
  return _impl_.delta_locus_control_.Get(index);
}
inline float DeltaUpdateOrgRequest::delta_locus_control(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_locus_control)
  return _internal_delta_locus_control(index);
}
inline void DeltaUpdateOrgRequest::set_delta_locus_control(int index, float value) {
  _impl_.delta_locus_control_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_locus_control)
}
inline void DeltaUpdateOrgRequest::_internal_add_delta_locus_control(float value) {
  _impl_.delta_locus_control_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_delta_locus_control(float value) {
  _internal_add_delta_locus_control(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.delta_locus_control)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::_internal_delta_locus_control() const {
  return _impl_.delta_locus_control_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::delta_locus_control() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.delta_locus_control)
  return _internal_delta_locus_control();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::_internal_mutable_delta_locus_control() {
  return &_impl_.delta_locus_control_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::mutable_delta_locus_control() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.delta_locus_control)
  return _internal_mutable_delta_locus_control();
}

// repeated float delta_working_hours = 24 [json_name = "deltaWorkingHours"];
inline int DeltaUpdateOrgRequest::_internal_delta_working_hours_size() const {
  return _impl_.delta_working_hours_.size();
}
inline int DeltaUpdateOrgRequest::delta_working_hours_size() const {
  return _internal_delta_working_hours_size();
}
inline void DeltaUpdateOrgRequest::clear_delta_working_hours() {
  _impl_.delta_working_hours_.Clear();
}
inline float DeltaUpdateOrgRequest::_internal_delta_working_hours(int index) const {
  return _impl_.delta_working_hours_.Get(index);
}
inline float DeltaUpdateOrgRequest::delta_working_hours(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_working_hours)
  return _internal_delta_working_hours(index);
}
inline void DeltaUpdateOrgRequest::set_delta_working_hours(int index, float value) {
  _impl_.delta_working_hours_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_working_hours)
}
inline void DeltaUpdateOrgRequest::_internal_add_delta_working_hours(float value) {
  _impl_.delta_working_hours_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_delta_working_hours(float value) {
  _internal_add_delta_working_hours(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.delta_working_hours)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::_internal_delta_working_hours() const {
  return _impl_.delta_working_hours_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DeltaUpdateOrgRequest::delta_working_hours() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.delta_working_hours)
  return _internal_delta_working_hours();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::_internal_mutable_delta_working_hours() {
  return &_impl_.delta_working_hours_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DeltaUpdateOrgRequest::mutable_delta_working_hours() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.delta_working_hours)
  return _internal_mutable_delta_working_hours();
}

// -------------------------------------------------------------------

// DeltaUpdateOrgResponse

// -------------------------------------------------------------------

// DeltaUpdateAgentRequest

// int32 agent_id = 1 [json_name = "agentId"];
inline void DeltaUpdateAgentRequest::clear_agent_id() {
  _impl_.agent_id_ = 0;
}
inline int32_t DeltaUpdateAgentRequest::_internal_agent_id() const {
  return _impl_.agent_id_;
}
inline int32_t DeltaUpdateAgentRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateAgentRequest.agent_id)
  return _internal_agent_id();
}
inline void DeltaUpdateAgentRequest::_internal_set_agent_id(int32_t value) {
  
  _impl_.agent_id_ = value;
}
inline void DeltaUpdateAgentRequest::set_agent_id(int32_t value) {
  _internal_set_agent_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateAgentRequest.agent_id)
}

// optional float delta_currency = 2 [json_name = "deltaCurrency"];
inline bool DeltaUpdateAgentRequest::_internal_has_delta_currency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeltaUpdateAgentRequest::has_delta_currency() const {
  return _internal_has_delta_currency();
}
inline void DeltaUpdateAgentRequest::clear_delta_currency() {
  _impl_.delta_currency_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float DeltaUpdateAgentRequest::_internal_delta_currency() const {
  return _impl_.delta_currency_;
}
inline float DeltaUpdateAgentRequest::delta_currency() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateAgentRequest.delta_currency)
  return _internal_delta_currency();
}
inline void DeltaUpdateAgentRequest::_internal_set_delta_currency(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.delta_currency_ = value;
}
inline void DeltaUpdateAgentRequest::set_delta_currency(float value) {
  _internal_set_delta_currency(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateAgentRequest.delta_currency)
}

// optional int32 new_firm_id = 3 [json_name = "newFirmId"];
inline bool DeltaUpdateAgentRequest::_internal_has_new_firm_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeltaUpdateAgentRequest::has_new_firm_id() const {
  return _internal_has_new_firm_id();
}
inline void DeltaUpdateAgentRequest::clear_new_firm_id() {
  _impl_.new_firm_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t DeltaUpdateAgentRequest::_internal_new_firm_id() const {
  return _impl_.new_firm_id_;
}
inline int32_t DeltaUpdateAgentRequest::new_firm_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateAgentRequest.new_firm_id)
  return _internal_new_firm_id();
}
inline void DeltaUpdateAgentRequest::_internal_set_new_firm_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.new_firm_id_ = value;
}
inline void DeltaUpdateAgentRequest::set_new_firm_id(int32_t value) {
  _internal_set_new_firm_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateAgentRequest.new_firm_id)
}

// optional float delta_skill = 4 [json_name = "deltaSkill"];
inline bool DeltaUpdateAgentRequest::_internal_has_delta_skill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeltaUpdateAgentRequest::has_delta_skill() const {
  return _internal_has_delta_skill();
}
inline void DeltaUpdateAgentRequest::clear_delta_skill() {
  _impl_.delta_skill_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float DeltaUpdateAgentRequest::_internal_delta_skill() const {
  return _impl_.delta_skill_;
}
inline float DeltaUpdateAgentRequest::delta_skill() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateAgentRequest.delta_skill)
  return _internal_delta_skill();
}
inline void DeltaUpdateAgentRequest::_internal_set_delta_skill(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.delta_skill_ = value;
}
inline void DeltaUpdateAgentRequest::set_delta_skill(float value) {
  _internal_set_delta_skill(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateAgentRequest.delta_skill)
}

// optional float delta_consumption = 5 [json_name = "deltaConsumption"];
inline bool DeltaUpdateAgentRequest::_internal_has_delta_consumption() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DeltaUpdateAgentRequest::has_delta_consumption() const {
  return _internal_has_delta_consumption();
}
inline void DeltaUpdateAgentRequest::clear_delta_consumption() {
  _impl_.delta_consumption_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float DeltaUpdateAgentRequest::_internal_delta_consumption() const {
  return _impl_.delta_consumption_;
}
inline float DeltaUpdateAgentRequest::delta_consumption() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateAgentRequest.delta_consumption)
  return _internal_delta_consumption();
}
inline void DeltaUpdateAgentRequest::_internal_set_delta_consumption(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.delta_consumption_ = value;
}
inline void DeltaUpdateAgentRequest::set_delta_consumption(float value) {
  _internal_set_delta_consumption(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateAgentRequest.delta_consumption)
}

// optional float delta_income = 6 [json_name = "deltaIncome"];
inline bool DeltaUpdateAgentRequest::_internal_has_delta_income() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DeltaUpdateAgentRequest::has_delta_income() const {
  return _internal_has_delta_income();
}
inline void DeltaUpdateAgentRequest::clear_delta_income() {
  _impl_.delta_income_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float DeltaUpdateAgentRequest::_internal_delta_income() const {
  return _impl_.delta_income_;
}
inline float DeltaUpdateAgentRequest::delta_income() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateAgentRequest.delta_income)
  return _internal_delta_income();
}
inline void DeltaUpdateAgentRequest::_internal_set_delta_income(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.delta_income_ = value;
}
inline void DeltaUpdateAgentRequest::set_delta_income(float value) {
  _internal_set_delta_income(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateAgentRequest.delta_income)
}

// -------------------------------------------------------------------

// DeltaUpdateAgentResponse

// -------------------------------------------------------------------

// BatchDeltaUpdateRequest

// repeated .city.economy.v2.DeltaUpdateOrgRequest orgs = 1 [json_name = "orgs"];
inline int BatchDeltaUpdateRequest::_internal_orgs_size() const {
  return _impl_.orgs_.size();
}
inline int BatchDeltaUpdateRequest::orgs_size() const {
  return _internal_orgs_size();
}
inline void BatchDeltaUpdateRequest::clear_orgs() {
  _impl_.orgs_.Clear();
}
inline ::city::economy::v2::DeltaUpdateOrgRequest* BatchDeltaUpdateRequest::mutable_orgs(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchDeltaUpdateRequest.orgs)
  return _impl_.orgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateOrgRequest >*
BatchDeltaUpdateRequest::mutable_orgs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchDeltaUpdateRequest.orgs)
  return &_impl_.orgs_;
}
inline const ::city::economy::v2::DeltaUpdateOrgRequest& BatchDeltaUpdateRequest::_internal_orgs(int index) const {
  return _impl_.orgs_.Get(index);
}
inline const ::city::economy::v2::DeltaUpdateOrgRequest& BatchDeltaUpdateRequest::orgs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchDeltaUpdateRequest.orgs)
  return _internal_orgs(index);
}
inline ::city::economy::v2::DeltaUpdateOrgRequest* BatchDeltaUpdateRequest::_internal_add_orgs() {
  return _impl_.orgs_.Add();
}
inline ::city::economy::v2::DeltaUpdateOrgRequest* BatchDeltaUpdateRequest::add_orgs() {
  ::city::economy::v2::DeltaUpdateOrgRequest* _add = _internal_add_orgs();
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchDeltaUpdateRequest.orgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateOrgRequest >&
BatchDeltaUpdateRequest::orgs() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchDeltaUpdateRequest.orgs)
  return _impl_.orgs_;
}

// repeated .city.economy.v2.DeltaUpdateAgentRequest agents = 2 [json_name = "agents"];
inline int BatchDeltaUpdateRequest::_internal_agents_size() const {
  return _impl_.agents_.size();
}
inline int BatchDeltaUpdateRequest::agents_size() const {
  return _internal_agents_size();
}
inline void BatchDeltaUpdateRequest::clear_agents() {
  _impl_.agents_.Clear();
}
inline ::city::economy::v2::DeltaUpdateAgentRequest* BatchDeltaUpdateRequest::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchDeltaUpdateRequest.agents)
  return _impl_.agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateAgentRequest >*
BatchDeltaUpdateRequest::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchDeltaUpdateRequest.agents)
  return &_impl_.agents_;
}
inline const ::city::economy::v2::DeltaUpdateAgentRequest& BatchDeltaUpdateRequest::_internal_agents(int index) const {
  return _impl_.agents_.Get(index);
}
inline const ::city::economy::v2::DeltaUpdateAgentRequest& BatchDeltaUpdateRequest::agents(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchDeltaUpdateRequest.agents)
  return _internal_agents(index);
}
inline ::city::economy::v2::DeltaUpdateAgentRequest* BatchDeltaUpdateRequest::_internal_add_agents() {
  return _impl_.agents_.Add();
}
inline ::city::economy::v2::DeltaUpdateAgentRequest* BatchDeltaUpdateRequest::add_agents() {
  ::city::economy::v2::DeltaUpdateAgentRequest* _add = _internal_add_agents();
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchDeltaUpdateRequest.agents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateAgentRequest >&
BatchDeltaUpdateRequest::agents() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchDeltaUpdateRequest.agents)
  return _impl_.agents_;
}

// -------------------------------------------------------------------

// BatchDeltaUpdateResponse

// -------------------------------------------------------------------

// SaveEconomyEntitiesRequest

// string file_path = 1 [json_name = "filePath"];
inline void SaveEconomyEntitiesRequest::clear_file_path() {
  _impl_.file_path_.ClearToEmpty();
}
inline const std::string& SaveEconomyEntitiesRequest::file_path() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SaveEconomyEntitiesRequest.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveEconomyEntitiesRequest::set_file_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.economy.v2.SaveEconomyEntitiesRequest.file_path)
}
inline std::string* SaveEconomyEntitiesRequest::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.SaveEconomyEntitiesRequest.file_path)
  return _s;
}
inline const std::string& SaveEconomyEntitiesRequest::_internal_file_path() const {
  return _impl_.file_path_.Get();
}
inline void SaveEconomyEntitiesRequest::_internal_set_file_path(const std::string& value) {
  
  _impl_.file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* SaveEconomyEntitiesRequest::_internal_mutable_file_path() {
  
  return _impl_.file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* SaveEconomyEntitiesRequest::release_file_path() {
  // @@protoc_insertion_point(field_release:city.economy.v2.SaveEconomyEntitiesRequest.file_path)
  return _impl_.file_path_.Release();
}
inline void SaveEconomyEntitiesRequest::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  _impl_.file_path_.SetAllocated(file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_path_.IsDefault()) {
    _impl_.file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.SaveEconomyEntitiesRequest.file_path)
}

// -------------------------------------------------------------------

// SaveEconomyEntitiesResponse

// repeated int32 org_ids = 1 [json_name = "orgIds"];
inline int SaveEconomyEntitiesResponse::_internal_org_ids_size() const {
  return _impl_.org_ids_.size();
}
inline int SaveEconomyEntitiesResponse::org_ids_size() const {
  return _internal_org_ids_size();
}
inline void SaveEconomyEntitiesResponse::clear_org_ids() {
  _impl_.org_ids_.Clear();
}
inline int32_t SaveEconomyEntitiesResponse::_internal_org_ids(int index) const {
  return _impl_.org_ids_.Get(index);
}
inline int32_t SaveEconomyEntitiesResponse::org_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SaveEconomyEntitiesResponse.org_ids)
  return _internal_org_ids(index);
}
inline void SaveEconomyEntitiesResponse::set_org_ids(int index, int32_t value) {
  _impl_.org_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SaveEconomyEntitiesResponse.org_ids)
}
inline void SaveEconomyEntitiesResponse::_internal_add_org_ids(int32_t value) {
  _impl_.org_ids_.Add(value);
}
inline void SaveEconomyEntitiesResponse::add_org_ids(int32_t value) {
  _internal_add_org_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SaveEconomyEntitiesResponse.org_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SaveEconomyEntitiesResponse::_internal_org_ids() const {
  return _impl_.org_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SaveEconomyEntitiesResponse::org_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SaveEconomyEntitiesResponse.org_ids)
  return _internal_org_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SaveEconomyEntitiesResponse::_internal_mutable_org_ids() {
  return &_impl_.org_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SaveEconomyEntitiesResponse::mutable_org_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SaveEconomyEntitiesResponse.org_ids)
  return _internal_mutable_org_ids();
}

// repeated int32 agent_ids = 2 [json_name = "agentIds"];
inline int SaveEconomyEntitiesResponse::_internal_agent_ids_size() const {
  return _impl_.agent_ids_.size();
}
inline int SaveEconomyEntitiesResponse::agent_ids_size() const {
  return _internal_agent_ids_size();
}
inline void SaveEconomyEntitiesResponse::clear_agent_ids() {
  _impl_.agent_ids_.Clear();
}
inline int32_t SaveEconomyEntitiesResponse::_internal_agent_ids(int index) const {
  return _impl_.agent_ids_.Get(index);
}
inline int32_t SaveEconomyEntitiesResponse::agent_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SaveEconomyEntitiesResponse.agent_ids)
  return _internal_agent_ids(index);
}
inline void SaveEconomyEntitiesResponse::set_agent_ids(int index, int32_t value) {
  _impl_.agent_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SaveEconomyEntitiesResponse.agent_ids)
}
inline void SaveEconomyEntitiesResponse::_internal_add_agent_ids(int32_t value) {
  _impl_.agent_ids_.Add(value);
}
inline void SaveEconomyEntitiesResponse::add_agent_ids(int32_t value) {
  _internal_add_agent_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SaveEconomyEntitiesResponse.agent_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SaveEconomyEntitiesResponse::_internal_agent_ids() const {
  return _impl_.agent_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SaveEconomyEntitiesResponse::agent_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SaveEconomyEntitiesResponse.agent_ids)
  return _internal_agent_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SaveEconomyEntitiesResponse::_internal_mutable_agent_ids() {
  return &_impl_.agent_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SaveEconomyEntitiesResponse::mutable_agent_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SaveEconomyEntitiesResponse.agent_ids)
  return _internal_mutable_agent_ids();
}

// -------------------------------------------------------------------

// LoadEconomyEntitiesRequest

// string file_path = 1 [json_name = "filePath"];
inline void LoadEconomyEntitiesRequest::clear_file_path() {
  _impl_.file_path_.ClearToEmpty();
}
inline const std::string& LoadEconomyEntitiesRequest::file_path() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.LoadEconomyEntitiesRequest.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadEconomyEntitiesRequest::set_file_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.economy.v2.LoadEconomyEntitiesRequest.file_path)
}
inline std::string* LoadEconomyEntitiesRequest::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.LoadEconomyEntitiesRequest.file_path)
  return _s;
}
inline const std::string& LoadEconomyEntitiesRequest::_internal_file_path() const {
  return _impl_.file_path_.Get();
}
inline void LoadEconomyEntitiesRequest::_internal_set_file_path(const std::string& value) {
  
  _impl_.file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadEconomyEntitiesRequest::_internal_mutable_file_path() {
  
  return _impl_.file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadEconomyEntitiesRequest::release_file_path() {
  // @@protoc_insertion_point(field_release:city.economy.v2.LoadEconomyEntitiesRequest.file_path)
  return _impl_.file_path_.Release();
}
inline void LoadEconomyEntitiesRequest::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  _impl_.file_path_.SetAllocated(file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_path_.IsDefault()) {
    _impl_.file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.LoadEconomyEntitiesRequest.file_path)
}

// -------------------------------------------------------------------

// LoadEconomyEntitiesResponse

// repeated int32 org_ids = 1 [json_name = "orgIds"];
inline int LoadEconomyEntitiesResponse::_internal_org_ids_size() const {
  return _impl_.org_ids_.size();
}
inline int LoadEconomyEntitiesResponse::org_ids_size() const {
  return _internal_org_ids_size();
}
inline void LoadEconomyEntitiesResponse::clear_org_ids() {
  _impl_.org_ids_.Clear();
}
inline int32_t LoadEconomyEntitiesResponse::_internal_org_ids(int index) const {
  return _impl_.org_ids_.Get(index);
}
inline int32_t LoadEconomyEntitiesResponse::org_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.LoadEconomyEntitiesResponse.org_ids)
  return _internal_org_ids(index);
}
inline void LoadEconomyEntitiesResponse::set_org_ids(int index, int32_t value) {
  _impl_.org_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.LoadEconomyEntitiesResponse.org_ids)
}
inline void LoadEconomyEntitiesResponse::_internal_add_org_ids(int32_t value) {
  _impl_.org_ids_.Add(value);
}
inline void LoadEconomyEntitiesResponse::add_org_ids(int32_t value) {
  _internal_add_org_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.LoadEconomyEntitiesResponse.org_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LoadEconomyEntitiesResponse::_internal_org_ids() const {
  return _impl_.org_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LoadEconomyEntitiesResponse::org_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.LoadEconomyEntitiesResponse.org_ids)
  return _internal_org_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LoadEconomyEntitiesResponse::_internal_mutable_org_ids() {
  return &_impl_.org_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LoadEconomyEntitiesResponse::mutable_org_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.LoadEconomyEntitiesResponse.org_ids)
  return _internal_mutable_org_ids();
}

// repeated int32 agent_ids = 2 [json_name = "agentIds"];
inline int LoadEconomyEntitiesResponse::_internal_agent_ids_size() const {
  return _impl_.agent_ids_.size();
}
inline int LoadEconomyEntitiesResponse::agent_ids_size() const {
  return _internal_agent_ids_size();
}
inline void LoadEconomyEntitiesResponse::clear_agent_ids() {
  _impl_.agent_ids_.Clear();
}
inline int32_t LoadEconomyEntitiesResponse::_internal_agent_ids(int index) const {
  return _impl_.agent_ids_.Get(index);
}
inline int32_t LoadEconomyEntitiesResponse::agent_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.LoadEconomyEntitiesResponse.agent_ids)
  return _internal_agent_ids(index);
}
inline void LoadEconomyEntitiesResponse::set_agent_ids(int index, int32_t value) {
  _impl_.agent_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.LoadEconomyEntitiesResponse.agent_ids)
}
inline void LoadEconomyEntitiesResponse::_internal_add_agent_ids(int32_t value) {
  _impl_.agent_ids_.Add(value);
}
inline void LoadEconomyEntitiesResponse::add_agent_ids(int32_t value) {
  _internal_add_agent_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.LoadEconomyEntitiesResponse.agent_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LoadEconomyEntitiesResponse::_internal_agent_ids() const {
  return _impl_.agent_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LoadEconomyEntitiesResponse::agent_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.LoadEconomyEntitiesResponse.agent_ids)
  return _internal_agent_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LoadEconomyEntitiesResponse::_internal_mutable_agent_ids() {
  return &_impl_.agent_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LoadEconomyEntitiesResponse::mutable_agent_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.LoadEconomyEntitiesResponse.agent_ids)
  return _internal_mutable_agent_ids();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace economy
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv2_2forg_5fservice_2eproto
