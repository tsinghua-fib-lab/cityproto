// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/economy/v2/org_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv2_2forg_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv2_2forg_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "city/economy/v2/economy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2feconomy_2fv2_2forg_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2feconomy_2fv2_2forg_5fservice_2eproto;
namespace city {
namespace economy {
namespace v2 {
class AddAgentRequest;
struct AddAgentRequestDefaultTypeInternal;
extern AddAgentRequestDefaultTypeInternal _AddAgentRequest_default_instance_;
class AddAgentResponse;
struct AddAgentResponseDefaultTypeInternal;
extern AddAgentResponseDefaultTypeInternal _AddAgentResponse_default_instance_;
class AddCitizenRequest;
struct AddCitizenRequestDefaultTypeInternal;
extern AddCitizenRequestDefaultTypeInternal _AddCitizenRequest_default_instance_;
class AddCitizenResponse;
struct AddCitizenResponseDefaultTypeInternal;
extern AddCitizenResponseDefaultTypeInternal _AddCitizenResponse_default_instance_;
class AddCurrencyRequest;
struct AddCurrencyRequestDefaultTypeInternal;
extern AddCurrencyRequestDefaultTypeInternal _AddCurrencyRequest_default_instance_;
class AddCurrencyResponse;
struct AddCurrencyResponseDefaultTypeInternal;
extern AddCurrencyResponseDefaultTypeInternal _AddCurrencyResponse_default_instance_;
class AddEmployeeRequest;
struct AddEmployeeRequestDefaultTypeInternal;
extern AddEmployeeRequestDefaultTypeInternal _AddEmployeeRequest_default_instance_;
class AddEmployeeResponse;
struct AddEmployeeResponseDefaultTypeInternal;
extern AddEmployeeResponseDefaultTypeInternal _AddEmployeeResponse_default_instance_;
class AddInterestRateRequest;
struct AddInterestRateRequestDefaultTypeInternal;
extern AddInterestRateRequestDefaultTypeInternal _AddInterestRateRequest_default_instance_;
class AddInterestRateResponse;
struct AddInterestRateResponseDefaultTypeInternal;
extern AddInterestRateResponseDefaultTypeInternal _AddInterestRateResponse_default_instance_;
class AddInventoryRequest;
struct AddInventoryRequestDefaultTypeInternal;
extern AddInventoryRequestDefaultTypeInternal _AddInventoryRequest_default_instance_;
class AddInventoryResponse;
struct AddInventoryResponseDefaultTypeInternal;
extern AddInventoryResponseDefaultTypeInternal _AddInventoryResponse_default_instance_;
class AddOrgRequest;
struct AddOrgRequestDefaultTypeInternal;
extern AddOrgRequestDefaultTypeInternal _AddOrgRequest_default_instance_;
class AddOrgResponse;
struct AddOrgResponseDefaultTypeInternal;
extern AddOrgResponseDefaultTypeInternal _AddOrgResponse_default_instance_;
class AddPriceRequest;
struct AddPriceRequestDefaultTypeInternal;
extern AddPriceRequestDefaultTypeInternal _AddPriceRequest_default_instance_;
class AddPriceResponse;
struct AddPriceResponseDefaultTypeInternal;
extern AddPriceResponseDefaultTypeInternal _AddPriceResponse_default_instance_;
class BatchDeltaUpdateRequest;
struct BatchDeltaUpdateRequestDefaultTypeInternal;
extern BatchDeltaUpdateRequestDefaultTypeInternal _BatchDeltaUpdateRequest_default_instance_;
class BatchDeltaUpdateResponse;
struct BatchDeltaUpdateResponseDefaultTypeInternal;
extern BatchDeltaUpdateResponseDefaultTypeInternal _BatchDeltaUpdateResponse_default_instance_;
class BatchGetRequest;
struct BatchGetRequestDefaultTypeInternal;
extern BatchGetRequestDefaultTypeInternal _BatchGetRequest_default_instance_;
class BatchGetResponse;
struct BatchGetResponseDefaultTypeInternal;
extern BatchGetResponseDefaultTypeInternal _BatchGetResponse_default_instance_;
class BatchUpdateRequest;
struct BatchUpdateRequestDefaultTypeInternal;
extern BatchUpdateRequestDefaultTypeInternal _BatchUpdateRequest_default_instance_;
class BatchUpdateResponse;
struct BatchUpdateResponseDefaultTypeInternal;
extern BatchUpdateResponseDefaultTypeInternal _BatchUpdateResponse_default_instance_;
class CalculateConsumptionRequest;
struct CalculateConsumptionRequestDefaultTypeInternal;
extern CalculateConsumptionRequestDefaultTypeInternal _CalculateConsumptionRequest_default_instance_;
class CalculateConsumptionResponse;
struct CalculateConsumptionResponseDefaultTypeInternal;
extern CalculateConsumptionResponseDefaultTypeInternal _CalculateConsumptionResponse_default_instance_;
class CalculateInterestRequest;
struct CalculateInterestRequestDefaultTypeInternal;
extern CalculateInterestRequestDefaultTypeInternal _CalculateInterestRequest_default_instance_;
class CalculateInterestResponse;
struct CalculateInterestResponseDefaultTypeInternal;
extern CalculateInterestResponseDefaultTypeInternal _CalculateInterestResponse_default_instance_;
class CalculateRealGDPRequest;
struct CalculateRealGDPRequestDefaultTypeInternal;
extern CalculateRealGDPRequestDefaultTypeInternal _CalculateRealGDPRequest_default_instance_;
class CalculateRealGDPResponse;
struct CalculateRealGDPResponseDefaultTypeInternal;
extern CalculateRealGDPResponseDefaultTypeInternal _CalculateRealGDPResponse_default_instance_;
class CalculateTaxesDueRequest;
struct CalculateTaxesDueRequestDefaultTypeInternal;
extern CalculateTaxesDueRequestDefaultTypeInternal _CalculateTaxesDueRequest_default_instance_;
class CalculateTaxesDueResponse;
struct CalculateTaxesDueResponseDefaultTypeInternal;
extern CalculateTaxesDueResponseDefaultTypeInternal _CalculateTaxesDueResponse_default_instance_;
class DeltaUpdateAgentRequest;
struct DeltaUpdateAgentRequestDefaultTypeInternal;
extern DeltaUpdateAgentRequestDefaultTypeInternal _DeltaUpdateAgentRequest_default_instance_;
class DeltaUpdateAgentResponse;
struct DeltaUpdateAgentResponseDefaultTypeInternal;
extern DeltaUpdateAgentResponseDefaultTypeInternal _DeltaUpdateAgentResponse_default_instance_;
class DeltaUpdateOrgRequest;
struct DeltaUpdateOrgRequestDefaultTypeInternal;
extern DeltaUpdateOrgRequestDefaultTypeInternal _DeltaUpdateOrgRequest_default_instance_;
class DeltaUpdateOrgResponse;
struct DeltaUpdateOrgResponseDefaultTypeInternal;
extern DeltaUpdateOrgResponseDefaultTypeInternal _DeltaUpdateOrgResponse_default_instance_;
class GetAgentRequest;
struct GetAgentRequestDefaultTypeInternal;
extern GetAgentRequestDefaultTypeInternal _GetAgentRequest_default_instance_;
class GetAgentResponse;
struct GetAgentResponseDefaultTypeInternal;
extern GetAgentResponseDefaultTypeInternal _GetAgentResponse_default_instance_;
class GetBracketCutoffsRequest;
struct GetBracketCutoffsRequestDefaultTypeInternal;
extern GetBracketCutoffsRequestDefaultTypeInternal _GetBracketCutoffsRequest_default_instance_;
class GetBracketCutoffsResponse;
struct GetBracketCutoffsResponseDefaultTypeInternal;
extern GetBracketCutoffsResponseDefaultTypeInternal _GetBracketCutoffsResponse_default_instance_;
class GetBracketRatesRequest;
struct GetBracketRatesRequestDefaultTypeInternal;
extern GetBracketRatesRequestDefaultTypeInternal _GetBracketRatesRequest_default_instance_;
class GetBracketRatesResponse;
struct GetBracketRatesResponseDefaultTypeInternal;
extern GetBracketRatesResponseDefaultTypeInternal _GetBracketRatesResponse_default_instance_;
class GetCitizensRequest;
struct GetCitizensRequestDefaultTypeInternal;
extern GetCitizensRequestDefaultTypeInternal _GetCitizensRequest_default_instance_;
class GetCitizensResponse;
struct GetCitizensResponseDefaultTypeInternal;
extern GetCitizensResponseDefaultTypeInternal _GetCitizensResponse_default_instance_;
class GetConsumptionCurrencyRequest;
struct GetConsumptionCurrencyRequestDefaultTypeInternal;
extern GetConsumptionCurrencyRequestDefaultTypeInternal _GetConsumptionCurrencyRequest_default_instance_;
class GetConsumptionCurrencyResponse;
struct GetConsumptionCurrencyResponseDefaultTypeInternal;
extern GetConsumptionCurrencyResponseDefaultTypeInternal _GetConsumptionCurrencyResponse_default_instance_;
class GetConsumptionPropensityRequest;
struct GetConsumptionPropensityRequestDefaultTypeInternal;
extern GetConsumptionPropensityRequestDefaultTypeInternal _GetConsumptionPropensityRequest_default_instance_;
class GetConsumptionPropensityResponse;
struct GetConsumptionPropensityResponseDefaultTypeInternal;
extern GetConsumptionPropensityResponseDefaultTypeInternal _GetConsumptionPropensityResponse_default_instance_;
class GetCurrencyRequest;
struct GetCurrencyRequestDefaultTypeInternal;
extern GetCurrencyRequestDefaultTypeInternal _GetCurrencyRequest_default_instance_;
class GetCurrencyResponse;
struct GetCurrencyResponseDefaultTypeInternal;
extern GetCurrencyResponseDefaultTypeInternal _GetCurrencyResponse_default_instance_;
class GetDepressionRequest;
struct GetDepressionRequestDefaultTypeInternal;
extern GetDepressionRequestDefaultTypeInternal _GetDepressionRequest_default_instance_;
class GetDepressionResponse;
struct GetDepressionResponseDefaultTypeInternal;
extern GetDepressionResponseDefaultTypeInternal _GetDepressionResponse_default_instance_;
class GetEmployeesRequest;
struct GetEmployeesRequestDefaultTypeInternal;
extern GetEmployeesRequestDefaultTypeInternal _GetEmployeesRequest_default_instance_;
class GetEmployeesResponse;
struct GetEmployeesResponseDefaultTypeInternal;
extern GetEmployeesResponseDefaultTypeInternal _GetEmployeesResponse_default_instance_;
class GetIncomeCurrencyRequest;
struct GetIncomeCurrencyRequestDefaultTypeInternal;
extern GetIncomeCurrencyRequestDefaultTypeInternal _GetIncomeCurrencyRequest_default_instance_;
class GetIncomeCurrencyResponse;
struct GetIncomeCurrencyResponseDefaultTypeInternal;
extern GetIncomeCurrencyResponseDefaultTypeInternal _GetIncomeCurrencyResponse_default_instance_;
class GetInterestRateRequest;
struct GetInterestRateRequestDefaultTypeInternal;
extern GetInterestRateRequestDefaultTypeInternal _GetInterestRateRequest_default_instance_;
class GetInterestRateResponse;
struct GetInterestRateResponseDefaultTypeInternal;
extern GetInterestRateResponseDefaultTypeInternal _GetInterestRateResponse_default_instance_;
class GetInventoryRequest;
struct GetInventoryRequestDefaultTypeInternal;
extern GetInventoryRequestDefaultTypeInternal _GetInventoryRequest_default_instance_;
class GetInventoryResponse;
struct GetInventoryResponseDefaultTypeInternal;
extern GetInventoryResponseDefaultTypeInternal _GetInventoryResponse_default_instance_;
class GetLocusControlRequest;
struct GetLocusControlRequestDefaultTypeInternal;
extern GetLocusControlRequestDefaultTypeInternal _GetLocusControlRequest_default_instance_;
class GetLocusControlResponse;
struct GetLocusControlResponseDefaultTypeInternal;
extern GetLocusControlResponseDefaultTypeInternal _GetLocusControlResponse_default_instance_;
class GetNominalGDPRequest;
struct GetNominalGDPRequestDefaultTypeInternal;
extern GetNominalGDPRequestDefaultTypeInternal _GetNominalGDPRequest_default_instance_;
class GetNominalGDPResponse;
struct GetNominalGDPResponseDefaultTypeInternal;
extern GetNominalGDPResponseDefaultTypeInternal _GetNominalGDPResponse_default_instance_;
class GetOrgEntityIdsRequest;
struct GetOrgEntityIdsRequestDefaultTypeInternal;
extern GetOrgEntityIdsRequestDefaultTypeInternal _GetOrgEntityIdsRequest_default_instance_;
class GetOrgEntityIdsResponse;
struct GetOrgEntityIdsResponseDefaultTypeInternal;
extern GetOrgEntityIdsResponseDefaultTypeInternal _GetOrgEntityIdsResponse_default_instance_;
class GetOrgRequest;
struct GetOrgRequestDefaultTypeInternal;
extern GetOrgRequestDefaultTypeInternal _GetOrgRequest_default_instance_;
class GetOrgResponse;
struct GetOrgResponseDefaultTypeInternal;
extern GetOrgResponseDefaultTypeInternal _GetOrgResponse_default_instance_;
class GetPriceRequest;
struct GetPriceRequestDefaultTypeInternal;
extern GetPriceRequestDefaultTypeInternal _GetPriceRequest_default_instance_;
class GetPriceResponse;
struct GetPriceResponseDefaultTypeInternal;
extern GetPriceResponseDefaultTypeInternal _GetPriceResponse_default_instance_;
class GetPricesRequest;
struct GetPricesRequestDefaultTypeInternal;
extern GetPricesRequestDefaultTypeInternal _GetPricesRequest_default_instance_;
class GetPricesResponse;
struct GetPricesResponseDefaultTypeInternal;
extern GetPricesResponseDefaultTypeInternal _GetPricesResponse_default_instance_;
class GetRealGDPRequest;
struct GetRealGDPRequestDefaultTypeInternal;
extern GetRealGDPRequestDefaultTypeInternal _GetRealGDPRequest_default_instance_;
class GetRealGDPResponse;
struct GetRealGDPResponseDefaultTypeInternal;
extern GetRealGDPResponseDefaultTypeInternal _GetRealGDPResponse_default_instance_;
class GetUnemploymentRequest;
struct GetUnemploymentRequestDefaultTypeInternal;
extern GetUnemploymentRequestDefaultTypeInternal _GetUnemploymentRequest_default_instance_;
class GetUnemploymentResponse;
struct GetUnemploymentResponseDefaultTypeInternal;
extern GetUnemploymentResponseDefaultTypeInternal _GetUnemploymentResponse_default_instance_;
class GetWagesRequest;
struct GetWagesRequestDefaultTypeInternal;
extern GetWagesRequestDefaultTypeInternal _GetWagesRequest_default_instance_;
class GetWagesResponse;
struct GetWagesResponseDefaultTypeInternal;
extern GetWagesResponseDefaultTypeInternal _GetWagesResponse_default_instance_;
class GetWorkingHoursRequest;
struct GetWorkingHoursRequestDefaultTypeInternal;
extern GetWorkingHoursRequestDefaultTypeInternal _GetWorkingHoursRequest_default_instance_;
class GetWorkingHoursResponse;
struct GetWorkingHoursResponseDefaultTypeInternal;
extern GetWorkingHoursResponseDefaultTypeInternal _GetWorkingHoursResponse_default_instance_;
class LoadEconomyEntitiesRequest;
struct LoadEconomyEntitiesRequestDefaultTypeInternal;
extern LoadEconomyEntitiesRequestDefaultTypeInternal _LoadEconomyEntitiesRequest_default_instance_;
class LoadEconomyEntitiesResponse;
struct LoadEconomyEntitiesResponseDefaultTypeInternal;
extern LoadEconomyEntitiesResponseDefaultTypeInternal _LoadEconomyEntitiesResponse_default_instance_;
class RemoveAgentRequest;
struct RemoveAgentRequestDefaultTypeInternal;
extern RemoveAgentRequestDefaultTypeInternal _RemoveAgentRequest_default_instance_;
class RemoveAgentResponse;
struct RemoveAgentResponseDefaultTypeInternal;
extern RemoveAgentResponseDefaultTypeInternal _RemoveAgentResponse_default_instance_;
class RemoveCitizenRequest;
struct RemoveCitizenRequestDefaultTypeInternal;
extern RemoveCitizenRequestDefaultTypeInternal _RemoveCitizenRequest_default_instance_;
class RemoveCitizenResponse;
struct RemoveCitizenResponseDefaultTypeInternal;
extern RemoveCitizenResponseDefaultTypeInternal _RemoveCitizenResponse_default_instance_;
class RemoveEmployeeRequest;
struct RemoveEmployeeRequestDefaultTypeInternal;
extern RemoveEmployeeRequestDefaultTypeInternal _RemoveEmployeeRequest_default_instance_;
class RemoveEmployeeResponse;
struct RemoveEmployeeResponseDefaultTypeInternal;
extern RemoveEmployeeResponseDefaultTypeInternal _RemoveEmployeeResponse_default_instance_;
class RemoveOrgRequest;
struct RemoveOrgRequestDefaultTypeInternal;
extern RemoveOrgRequestDefaultTypeInternal _RemoveOrgRequest_default_instance_;
class RemoveOrgResponse;
struct RemoveOrgResponseDefaultTypeInternal;
extern RemoveOrgResponseDefaultTypeInternal _RemoveOrgResponse_default_instance_;
class SaveEconomyEntitiesRequest;
struct SaveEconomyEntitiesRequestDefaultTypeInternal;
extern SaveEconomyEntitiesRequestDefaultTypeInternal _SaveEconomyEntitiesRequest_default_instance_;
class SaveEconomyEntitiesResponse;
struct SaveEconomyEntitiesResponseDefaultTypeInternal;
extern SaveEconomyEntitiesResponseDefaultTypeInternal _SaveEconomyEntitiesResponse_default_instance_;
class SetBracketCutoffsRequest;
struct SetBracketCutoffsRequestDefaultTypeInternal;
extern SetBracketCutoffsRequestDefaultTypeInternal _SetBracketCutoffsRequest_default_instance_;
class SetBracketCutoffsResponse;
struct SetBracketCutoffsResponseDefaultTypeInternal;
extern SetBracketCutoffsResponseDefaultTypeInternal _SetBracketCutoffsResponse_default_instance_;
class SetBracketRatesRequest;
struct SetBracketRatesRequestDefaultTypeInternal;
extern SetBracketRatesRequestDefaultTypeInternal _SetBracketRatesRequest_default_instance_;
class SetBracketRatesResponse;
struct SetBracketRatesResponseDefaultTypeInternal;
extern SetBracketRatesResponseDefaultTypeInternal _SetBracketRatesResponse_default_instance_;
class SetCitizensRequest;
struct SetCitizensRequestDefaultTypeInternal;
extern SetCitizensRequestDefaultTypeInternal _SetCitizensRequest_default_instance_;
class SetCitizensResponse;
struct SetCitizensResponseDefaultTypeInternal;
extern SetCitizensResponseDefaultTypeInternal _SetCitizensResponse_default_instance_;
class SetConsumptionCurrencyRequest;
struct SetConsumptionCurrencyRequestDefaultTypeInternal;
extern SetConsumptionCurrencyRequestDefaultTypeInternal _SetConsumptionCurrencyRequest_default_instance_;
class SetConsumptionCurrencyResponse;
struct SetConsumptionCurrencyResponseDefaultTypeInternal;
extern SetConsumptionCurrencyResponseDefaultTypeInternal _SetConsumptionCurrencyResponse_default_instance_;
class SetConsumptionPropensityRequest;
struct SetConsumptionPropensityRequestDefaultTypeInternal;
extern SetConsumptionPropensityRequestDefaultTypeInternal _SetConsumptionPropensityRequest_default_instance_;
class SetConsumptionPropensityResponse;
struct SetConsumptionPropensityResponseDefaultTypeInternal;
extern SetConsumptionPropensityResponseDefaultTypeInternal _SetConsumptionPropensityResponse_default_instance_;
class SetCurrencyRequest;
struct SetCurrencyRequestDefaultTypeInternal;
extern SetCurrencyRequestDefaultTypeInternal _SetCurrencyRequest_default_instance_;
class SetCurrencyResponse;
struct SetCurrencyResponseDefaultTypeInternal;
extern SetCurrencyResponseDefaultTypeInternal _SetCurrencyResponse_default_instance_;
class SetDepressionRequest;
struct SetDepressionRequestDefaultTypeInternal;
extern SetDepressionRequestDefaultTypeInternal _SetDepressionRequest_default_instance_;
class SetDepressionResponse;
struct SetDepressionResponseDefaultTypeInternal;
extern SetDepressionResponseDefaultTypeInternal _SetDepressionResponse_default_instance_;
class SetEmployeesRequest;
struct SetEmployeesRequestDefaultTypeInternal;
extern SetEmployeesRequestDefaultTypeInternal _SetEmployeesRequest_default_instance_;
class SetEmployeesResponse;
struct SetEmployeesResponseDefaultTypeInternal;
extern SetEmployeesResponseDefaultTypeInternal _SetEmployeesResponse_default_instance_;
class SetIncomeCurrencyRequest;
struct SetIncomeCurrencyRequestDefaultTypeInternal;
extern SetIncomeCurrencyRequestDefaultTypeInternal _SetIncomeCurrencyRequest_default_instance_;
class SetIncomeCurrencyResponse;
struct SetIncomeCurrencyResponseDefaultTypeInternal;
extern SetIncomeCurrencyResponseDefaultTypeInternal _SetIncomeCurrencyResponse_default_instance_;
class SetInterestRateRequest;
struct SetInterestRateRequestDefaultTypeInternal;
extern SetInterestRateRequestDefaultTypeInternal _SetInterestRateRequest_default_instance_;
class SetInterestRateResponse;
struct SetInterestRateResponseDefaultTypeInternal;
extern SetInterestRateResponseDefaultTypeInternal _SetInterestRateResponse_default_instance_;
class SetInventoryRequest;
struct SetInventoryRequestDefaultTypeInternal;
extern SetInventoryRequestDefaultTypeInternal _SetInventoryRequest_default_instance_;
class SetInventoryResponse;
struct SetInventoryResponseDefaultTypeInternal;
extern SetInventoryResponseDefaultTypeInternal _SetInventoryResponse_default_instance_;
class SetLocusControlRequest;
struct SetLocusControlRequestDefaultTypeInternal;
extern SetLocusControlRequestDefaultTypeInternal _SetLocusControlRequest_default_instance_;
class SetLocusControlResponse;
struct SetLocusControlResponseDefaultTypeInternal;
extern SetLocusControlResponseDefaultTypeInternal _SetLocusControlResponse_default_instance_;
class SetNominalGDPRequest;
struct SetNominalGDPRequestDefaultTypeInternal;
extern SetNominalGDPRequestDefaultTypeInternal _SetNominalGDPRequest_default_instance_;
class SetNominalGDPResponse;
struct SetNominalGDPResponseDefaultTypeInternal;
extern SetNominalGDPResponseDefaultTypeInternal _SetNominalGDPResponse_default_instance_;
class SetPriceRequest;
struct SetPriceRequestDefaultTypeInternal;
extern SetPriceRequestDefaultTypeInternal _SetPriceRequest_default_instance_;
class SetPriceResponse;
struct SetPriceResponseDefaultTypeInternal;
extern SetPriceResponseDefaultTypeInternal _SetPriceResponse_default_instance_;
class SetPricesRequest;
struct SetPricesRequestDefaultTypeInternal;
extern SetPricesRequestDefaultTypeInternal _SetPricesRequest_default_instance_;
class SetPricesResponse;
struct SetPricesResponseDefaultTypeInternal;
extern SetPricesResponseDefaultTypeInternal _SetPricesResponse_default_instance_;
class SetRealGDPRequest;
struct SetRealGDPRequestDefaultTypeInternal;
extern SetRealGDPRequestDefaultTypeInternal _SetRealGDPRequest_default_instance_;
class SetRealGDPResponse;
struct SetRealGDPResponseDefaultTypeInternal;
extern SetRealGDPResponseDefaultTypeInternal _SetRealGDPResponse_default_instance_;
class SetUnemploymentRequest;
struct SetUnemploymentRequestDefaultTypeInternal;
extern SetUnemploymentRequestDefaultTypeInternal _SetUnemploymentRequest_default_instance_;
class SetUnemploymentResponse;
struct SetUnemploymentResponseDefaultTypeInternal;
extern SetUnemploymentResponseDefaultTypeInternal _SetUnemploymentResponse_default_instance_;
class SetWagesRequest;
struct SetWagesRequestDefaultTypeInternal;
extern SetWagesRequestDefaultTypeInternal _SetWagesRequest_default_instance_;
class SetWagesResponse;
struct SetWagesResponseDefaultTypeInternal;
extern SetWagesResponseDefaultTypeInternal _SetWagesResponse_default_instance_;
class SetWorkingHoursRequest;
struct SetWorkingHoursRequestDefaultTypeInternal;
extern SetWorkingHoursRequestDefaultTypeInternal _SetWorkingHoursRequest_default_instance_;
class SetWorkingHoursResponse;
struct SetWorkingHoursResponseDefaultTypeInternal;
extern SetWorkingHoursResponseDefaultTypeInternal _SetWorkingHoursResponse_default_instance_;
class UpdateAgentRequest;
struct UpdateAgentRequestDefaultTypeInternal;
extern UpdateAgentRequestDefaultTypeInternal _UpdateAgentRequest_default_instance_;
class UpdateAgentResponse;
struct UpdateAgentResponseDefaultTypeInternal;
extern UpdateAgentResponseDefaultTypeInternal _UpdateAgentResponse_default_instance_;
class UpdateOrgRequest;
struct UpdateOrgRequestDefaultTypeInternal;
extern UpdateOrgRequestDefaultTypeInternal _UpdateOrgRequest_default_instance_;
class UpdateOrgResponse;
struct UpdateOrgResponseDefaultTypeInternal;
extern UpdateOrgResponseDefaultTypeInternal _UpdateOrgResponse_default_instance_;
}  // namespace v2
}  // namespace economy
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::economy::v2::AddAgentRequest* Arena::CreateMaybeMessage<::city::economy::v2::AddAgentRequest>(Arena*);
template<> ::city::economy::v2::AddAgentResponse* Arena::CreateMaybeMessage<::city::economy::v2::AddAgentResponse>(Arena*);
template<> ::city::economy::v2::AddCitizenRequest* Arena::CreateMaybeMessage<::city::economy::v2::AddCitizenRequest>(Arena*);
template<> ::city::economy::v2::AddCitizenResponse* Arena::CreateMaybeMessage<::city::economy::v2::AddCitizenResponse>(Arena*);
template<> ::city::economy::v2::AddCurrencyRequest* Arena::CreateMaybeMessage<::city::economy::v2::AddCurrencyRequest>(Arena*);
template<> ::city::economy::v2::AddCurrencyResponse* Arena::CreateMaybeMessage<::city::economy::v2::AddCurrencyResponse>(Arena*);
template<> ::city::economy::v2::AddEmployeeRequest* Arena::CreateMaybeMessage<::city::economy::v2::AddEmployeeRequest>(Arena*);
template<> ::city::economy::v2::AddEmployeeResponse* Arena::CreateMaybeMessage<::city::economy::v2::AddEmployeeResponse>(Arena*);
template<> ::city::economy::v2::AddInterestRateRequest* Arena::CreateMaybeMessage<::city::economy::v2::AddInterestRateRequest>(Arena*);
template<> ::city::economy::v2::AddInterestRateResponse* Arena::CreateMaybeMessage<::city::economy::v2::AddInterestRateResponse>(Arena*);
template<> ::city::economy::v2::AddInventoryRequest* Arena::CreateMaybeMessage<::city::economy::v2::AddInventoryRequest>(Arena*);
template<> ::city::economy::v2::AddInventoryResponse* Arena::CreateMaybeMessage<::city::economy::v2::AddInventoryResponse>(Arena*);
template<> ::city::economy::v2::AddOrgRequest* Arena::CreateMaybeMessage<::city::economy::v2::AddOrgRequest>(Arena*);
template<> ::city::economy::v2::AddOrgResponse* Arena::CreateMaybeMessage<::city::economy::v2::AddOrgResponse>(Arena*);
template<> ::city::economy::v2::AddPriceRequest* Arena::CreateMaybeMessage<::city::economy::v2::AddPriceRequest>(Arena*);
template<> ::city::economy::v2::AddPriceResponse* Arena::CreateMaybeMessage<::city::economy::v2::AddPriceResponse>(Arena*);
template<> ::city::economy::v2::BatchDeltaUpdateRequest* Arena::CreateMaybeMessage<::city::economy::v2::BatchDeltaUpdateRequest>(Arena*);
template<> ::city::economy::v2::BatchDeltaUpdateResponse* Arena::CreateMaybeMessage<::city::economy::v2::BatchDeltaUpdateResponse>(Arena*);
template<> ::city::economy::v2::BatchGetRequest* Arena::CreateMaybeMessage<::city::economy::v2::BatchGetRequest>(Arena*);
template<> ::city::economy::v2::BatchGetResponse* Arena::CreateMaybeMessage<::city::economy::v2::BatchGetResponse>(Arena*);
template<> ::city::economy::v2::BatchUpdateRequest* Arena::CreateMaybeMessage<::city::economy::v2::BatchUpdateRequest>(Arena*);
template<> ::city::economy::v2::BatchUpdateResponse* Arena::CreateMaybeMessage<::city::economy::v2::BatchUpdateResponse>(Arena*);
template<> ::city::economy::v2::CalculateConsumptionRequest* Arena::CreateMaybeMessage<::city::economy::v2::CalculateConsumptionRequest>(Arena*);
template<> ::city::economy::v2::CalculateConsumptionResponse* Arena::CreateMaybeMessage<::city::economy::v2::CalculateConsumptionResponse>(Arena*);
template<> ::city::economy::v2::CalculateInterestRequest* Arena::CreateMaybeMessage<::city::economy::v2::CalculateInterestRequest>(Arena*);
template<> ::city::economy::v2::CalculateInterestResponse* Arena::CreateMaybeMessage<::city::economy::v2::CalculateInterestResponse>(Arena*);
template<> ::city::economy::v2::CalculateRealGDPRequest* Arena::CreateMaybeMessage<::city::economy::v2::CalculateRealGDPRequest>(Arena*);
template<> ::city::economy::v2::CalculateRealGDPResponse* Arena::CreateMaybeMessage<::city::economy::v2::CalculateRealGDPResponse>(Arena*);
template<> ::city::economy::v2::CalculateTaxesDueRequest* Arena::CreateMaybeMessage<::city::economy::v2::CalculateTaxesDueRequest>(Arena*);
template<> ::city::economy::v2::CalculateTaxesDueResponse* Arena::CreateMaybeMessage<::city::economy::v2::CalculateTaxesDueResponse>(Arena*);
template<> ::city::economy::v2::DeltaUpdateAgentRequest* Arena::CreateMaybeMessage<::city::economy::v2::DeltaUpdateAgentRequest>(Arena*);
template<> ::city::economy::v2::DeltaUpdateAgentResponse* Arena::CreateMaybeMessage<::city::economy::v2::DeltaUpdateAgentResponse>(Arena*);
template<> ::city::economy::v2::DeltaUpdateOrgRequest* Arena::CreateMaybeMessage<::city::economy::v2::DeltaUpdateOrgRequest>(Arena*);
template<> ::city::economy::v2::DeltaUpdateOrgResponse* Arena::CreateMaybeMessage<::city::economy::v2::DeltaUpdateOrgResponse>(Arena*);
template<> ::city::economy::v2::GetAgentRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetAgentRequest>(Arena*);
template<> ::city::economy::v2::GetAgentResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetAgentResponse>(Arena*);
template<> ::city::economy::v2::GetBracketCutoffsRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetBracketCutoffsRequest>(Arena*);
template<> ::city::economy::v2::GetBracketCutoffsResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetBracketCutoffsResponse>(Arena*);
template<> ::city::economy::v2::GetBracketRatesRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetBracketRatesRequest>(Arena*);
template<> ::city::economy::v2::GetBracketRatesResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetBracketRatesResponse>(Arena*);
template<> ::city::economy::v2::GetCitizensRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetCitizensRequest>(Arena*);
template<> ::city::economy::v2::GetCitizensResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetCitizensResponse>(Arena*);
template<> ::city::economy::v2::GetConsumptionCurrencyRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetConsumptionCurrencyRequest>(Arena*);
template<> ::city::economy::v2::GetConsumptionCurrencyResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetConsumptionCurrencyResponse>(Arena*);
template<> ::city::economy::v2::GetConsumptionPropensityRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetConsumptionPropensityRequest>(Arena*);
template<> ::city::economy::v2::GetConsumptionPropensityResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetConsumptionPropensityResponse>(Arena*);
template<> ::city::economy::v2::GetCurrencyRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetCurrencyRequest>(Arena*);
template<> ::city::economy::v2::GetCurrencyResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetCurrencyResponse>(Arena*);
template<> ::city::economy::v2::GetDepressionRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetDepressionRequest>(Arena*);
template<> ::city::economy::v2::GetDepressionResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetDepressionResponse>(Arena*);
template<> ::city::economy::v2::GetEmployeesRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetEmployeesRequest>(Arena*);
template<> ::city::economy::v2::GetEmployeesResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetEmployeesResponse>(Arena*);
template<> ::city::economy::v2::GetIncomeCurrencyRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetIncomeCurrencyRequest>(Arena*);
template<> ::city::economy::v2::GetIncomeCurrencyResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetIncomeCurrencyResponse>(Arena*);
template<> ::city::economy::v2::GetInterestRateRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetInterestRateRequest>(Arena*);
template<> ::city::economy::v2::GetInterestRateResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetInterestRateResponse>(Arena*);
template<> ::city::economy::v2::GetInventoryRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetInventoryRequest>(Arena*);
template<> ::city::economy::v2::GetInventoryResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetInventoryResponse>(Arena*);
template<> ::city::economy::v2::GetLocusControlRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetLocusControlRequest>(Arena*);
template<> ::city::economy::v2::GetLocusControlResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetLocusControlResponse>(Arena*);
template<> ::city::economy::v2::GetNominalGDPRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetNominalGDPRequest>(Arena*);
template<> ::city::economy::v2::GetNominalGDPResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetNominalGDPResponse>(Arena*);
template<> ::city::economy::v2::GetOrgEntityIdsRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetOrgEntityIdsRequest>(Arena*);
template<> ::city::economy::v2::GetOrgEntityIdsResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetOrgEntityIdsResponse>(Arena*);
template<> ::city::economy::v2::GetOrgRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetOrgRequest>(Arena*);
template<> ::city::economy::v2::GetOrgResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetOrgResponse>(Arena*);
template<> ::city::economy::v2::GetPriceRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetPriceRequest>(Arena*);
template<> ::city::economy::v2::GetPriceResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetPriceResponse>(Arena*);
template<> ::city::economy::v2::GetPricesRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetPricesRequest>(Arena*);
template<> ::city::economy::v2::GetPricesResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetPricesResponse>(Arena*);
template<> ::city::economy::v2::GetRealGDPRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetRealGDPRequest>(Arena*);
template<> ::city::economy::v2::GetRealGDPResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetRealGDPResponse>(Arena*);
template<> ::city::economy::v2::GetUnemploymentRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetUnemploymentRequest>(Arena*);
template<> ::city::economy::v2::GetUnemploymentResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetUnemploymentResponse>(Arena*);
template<> ::city::economy::v2::GetWagesRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetWagesRequest>(Arena*);
template<> ::city::economy::v2::GetWagesResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetWagesResponse>(Arena*);
template<> ::city::economy::v2::GetWorkingHoursRequest* Arena::CreateMaybeMessage<::city::economy::v2::GetWorkingHoursRequest>(Arena*);
template<> ::city::economy::v2::GetWorkingHoursResponse* Arena::CreateMaybeMessage<::city::economy::v2::GetWorkingHoursResponse>(Arena*);
template<> ::city::economy::v2::LoadEconomyEntitiesRequest* Arena::CreateMaybeMessage<::city::economy::v2::LoadEconomyEntitiesRequest>(Arena*);
template<> ::city::economy::v2::LoadEconomyEntitiesResponse* Arena::CreateMaybeMessage<::city::economy::v2::LoadEconomyEntitiesResponse>(Arena*);
template<> ::city::economy::v2::RemoveAgentRequest* Arena::CreateMaybeMessage<::city::economy::v2::RemoveAgentRequest>(Arena*);
template<> ::city::economy::v2::RemoveAgentResponse* Arena::CreateMaybeMessage<::city::economy::v2::RemoveAgentResponse>(Arena*);
template<> ::city::economy::v2::RemoveCitizenRequest* Arena::CreateMaybeMessage<::city::economy::v2::RemoveCitizenRequest>(Arena*);
template<> ::city::economy::v2::RemoveCitizenResponse* Arena::CreateMaybeMessage<::city::economy::v2::RemoveCitizenResponse>(Arena*);
template<> ::city::economy::v2::RemoveEmployeeRequest* Arena::CreateMaybeMessage<::city::economy::v2::RemoveEmployeeRequest>(Arena*);
template<> ::city::economy::v2::RemoveEmployeeResponse* Arena::CreateMaybeMessage<::city::economy::v2::RemoveEmployeeResponse>(Arena*);
template<> ::city::economy::v2::RemoveOrgRequest* Arena::CreateMaybeMessage<::city::economy::v2::RemoveOrgRequest>(Arena*);
template<> ::city::economy::v2::RemoveOrgResponse* Arena::CreateMaybeMessage<::city::economy::v2::RemoveOrgResponse>(Arena*);
template<> ::city::economy::v2::SaveEconomyEntitiesRequest* Arena::CreateMaybeMessage<::city::economy::v2::SaveEconomyEntitiesRequest>(Arena*);
template<> ::city::economy::v2::SaveEconomyEntitiesResponse* Arena::CreateMaybeMessage<::city::economy::v2::SaveEconomyEntitiesResponse>(Arena*);
template<> ::city::economy::v2::SetBracketCutoffsRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetBracketCutoffsRequest>(Arena*);
template<> ::city::economy::v2::SetBracketCutoffsResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetBracketCutoffsResponse>(Arena*);
template<> ::city::economy::v2::SetBracketRatesRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetBracketRatesRequest>(Arena*);
template<> ::city::economy::v2::SetBracketRatesResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetBracketRatesResponse>(Arena*);
template<> ::city::economy::v2::SetCitizensRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetCitizensRequest>(Arena*);
template<> ::city::economy::v2::SetCitizensResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetCitizensResponse>(Arena*);
template<> ::city::economy::v2::SetConsumptionCurrencyRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetConsumptionCurrencyRequest>(Arena*);
template<> ::city::economy::v2::SetConsumptionCurrencyResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetConsumptionCurrencyResponse>(Arena*);
template<> ::city::economy::v2::SetConsumptionPropensityRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetConsumptionPropensityRequest>(Arena*);
template<> ::city::economy::v2::SetConsumptionPropensityResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetConsumptionPropensityResponse>(Arena*);
template<> ::city::economy::v2::SetCurrencyRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetCurrencyRequest>(Arena*);
template<> ::city::economy::v2::SetCurrencyResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetCurrencyResponse>(Arena*);
template<> ::city::economy::v2::SetDepressionRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetDepressionRequest>(Arena*);
template<> ::city::economy::v2::SetDepressionResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetDepressionResponse>(Arena*);
template<> ::city::economy::v2::SetEmployeesRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetEmployeesRequest>(Arena*);
template<> ::city::economy::v2::SetEmployeesResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetEmployeesResponse>(Arena*);
template<> ::city::economy::v2::SetIncomeCurrencyRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetIncomeCurrencyRequest>(Arena*);
template<> ::city::economy::v2::SetIncomeCurrencyResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetIncomeCurrencyResponse>(Arena*);
template<> ::city::economy::v2::SetInterestRateRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetInterestRateRequest>(Arena*);
template<> ::city::economy::v2::SetInterestRateResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetInterestRateResponse>(Arena*);
template<> ::city::economy::v2::SetInventoryRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetInventoryRequest>(Arena*);
template<> ::city::economy::v2::SetInventoryResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetInventoryResponse>(Arena*);
template<> ::city::economy::v2::SetLocusControlRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetLocusControlRequest>(Arena*);
template<> ::city::economy::v2::SetLocusControlResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetLocusControlResponse>(Arena*);
template<> ::city::economy::v2::SetNominalGDPRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetNominalGDPRequest>(Arena*);
template<> ::city::economy::v2::SetNominalGDPResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetNominalGDPResponse>(Arena*);
template<> ::city::economy::v2::SetPriceRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetPriceRequest>(Arena*);
template<> ::city::economy::v2::SetPriceResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetPriceResponse>(Arena*);
template<> ::city::economy::v2::SetPricesRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetPricesRequest>(Arena*);
template<> ::city::economy::v2::SetPricesResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetPricesResponse>(Arena*);
template<> ::city::economy::v2::SetRealGDPRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetRealGDPRequest>(Arena*);
template<> ::city::economy::v2::SetRealGDPResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetRealGDPResponse>(Arena*);
template<> ::city::economy::v2::SetUnemploymentRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetUnemploymentRequest>(Arena*);
template<> ::city::economy::v2::SetUnemploymentResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetUnemploymentResponse>(Arena*);
template<> ::city::economy::v2::SetWagesRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetWagesRequest>(Arena*);
template<> ::city::economy::v2::SetWagesResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetWagesResponse>(Arena*);
template<> ::city::economy::v2::SetWorkingHoursRequest* Arena::CreateMaybeMessage<::city::economy::v2::SetWorkingHoursRequest>(Arena*);
template<> ::city::economy::v2::SetWorkingHoursResponse* Arena::CreateMaybeMessage<::city::economy::v2::SetWorkingHoursResponse>(Arena*);
template<> ::city::economy::v2::UpdateAgentRequest* Arena::CreateMaybeMessage<::city::economy::v2::UpdateAgentRequest>(Arena*);
template<> ::city::economy::v2::UpdateAgentResponse* Arena::CreateMaybeMessage<::city::economy::v2::UpdateAgentResponse>(Arena*);
template<> ::city::economy::v2::UpdateOrgRequest* Arena::CreateMaybeMessage<::city::economy::v2::UpdateOrgRequest>(Arena*);
template<> ::city::economy::v2::UpdateOrgResponse* Arena::CreateMaybeMessage<::city::economy::v2::UpdateOrgResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace economy {
namespace v2 {

// ===================================================================

class AddOrgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.AddOrgRequest) */ {
 public:
  inline AddOrgRequest() : AddOrgRequest(nullptr) {}
  ~AddOrgRequest() override;
  explicit PROTOBUF_CONSTEXPR AddOrgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddOrgRequest(const AddOrgRequest& from);
  AddOrgRequest(AddOrgRequest&& from) noexcept
    : AddOrgRequest() {
    *this = ::std::move(from);
  }

  inline AddOrgRequest& operator=(const AddOrgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrgRequest& operator=(AddOrgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddOrgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddOrgRequest* internal_default_instance() {
    return reinterpret_cast<const AddOrgRequest*>(
               &_AddOrgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddOrgRequest& a, AddOrgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrgRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddOrgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddOrgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddOrgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddOrgRequest& from) {
    AddOrgRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddOrgRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddOrgRequest";
  }
  protected:
  explicit AddOrgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgFieldNumber = 1,
  };
  // .city.economy.v2.Org org = 1 [json_name = "org"];
  bool has_org() const;
  private:
  bool _internal_has_org() const;
  public:
  void clear_org();
  const ::city::economy::v2::Org& org() const;
  PROTOBUF_NODISCARD ::city::economy::v2::Org* release_org();
  ::city::economy::v2::Org* mutable_org();
  void set_allocated_org(::city::economy::v2::Org* org);
  private:
  const ::city::economy::v2::Org& _internal_org() const;
  ::city::economy::v2::Org* _internal_mutable_org();
  public:
  void unsafe_arena_set_allocated_org(
      ::city::economy::v2::Org* org);
  ::city::economy::v2::Org* unsafe_arena_release_org();

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddOrgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::economy::v2::Org* org_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddOrgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.AddOrgResponse) */ {
 public:
  inline AddOrgResponse() : AddOrgResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AddOrgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddOrgResponse(const AddOrgResponse& from);
  AddOrgResponse(AddOrgResponse&& from) noexcept
    : AddOrgResponse() {
    *this = ::std::move(from);
  }

  inline AddOrgResponse& operator=(const AddOrgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddOrgResponse& operator=(AddOrgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddOrgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddOrgResponse* internal_default_instance() {
    return reinterpret_cast<const AddOrgResponse*>(
               &_AddOrgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddOrgResponse& a, AddOrgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddOrgResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddOrgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddOrgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddOrgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddOrgResponse";
  }
  protected:
  explicit AddOrgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddOrgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveOrgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.RemoveOrgRequest) */ {
 public:
  inline RemoveOrgRequest() : RemoveOrgRequest(nullptr) {}
  ~RemoveOrgRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveOrgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveOrgRequest(const RemoveOrgRequest& from);
  RemoveOrgRequest(RemoveOrgRequest&& from) noexcept
    : RemoveOrgRequest() {
    *this = ::std::move(from);
  }

  inline RemoveOrgRequest& operator=(const RemoveOrgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOrgRequest& operator=(RemoveOrgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveOrgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveOrgRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveOrgRequest*>(
               &_RemoveOrgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RemoveOrgRequest& a, RemoveOrgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOrgRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOrgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveOrgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveOrgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveOrgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveOrgRequest& from) {
    RemoveOrgRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveOrgRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.RemoveOrgRequest";
  }
  protected:
  explicit RemoveOrgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.RemoveOrgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveOrgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.RemoveOrgResponse) */ {
 public:
  inline RemoveOrgResponse() : RemoveOrgResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RemoveOrgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveOrgResponse(const RemoveOrgResponse& from);
  RemoveOrgResponse(RemoveOrgResponse&& from) noexcept
    : RemoveOrgResponse() {
    *this = ::std::move(from);
  }

  inline RemoveOrgResponse& operator=(const RemoveOrgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveOrgResponse& operator=(RemoveOrgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveOrgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveOrgResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveOrgResponse*>(
               &_RemoveOrgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RemoveOrgResponse& a, RemoveOrgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveOrgResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveOrgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveOrgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveOrgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RemoveOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RemoveOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.RemoveOrgResponse";
  }
  protected:
  explicit RemoveOrgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.RemoveOrgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOrgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetOrgRequest) */ {
 public:
  inline GetOrgRequest() : GetOrgRequest(nullptr) {}
  ~GetOrgRequest() override;
  explicit PROTOBUF_CONSTEXPR GetOrgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrgRequest(const GetOrgRequest& from);
  GetOrgRequest(GetOrgRequest&& from) noexcept
    : GetOrgRequest() {
    *this = ::std::move(from);
  }

  inline GetOrgRequest& operator=(const GetOrgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrgRequest& operator=(GetOrgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrgRequest* internal_default_instance() {
    return reinterpret_cast<const GetOrgRequest*>(
               &_GetOrgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetOrgRequest& a, GetOrgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrgRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrgRequest& from) {
    GetOrgRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrgRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetOrgRequest";
  }
  protected:
  explicit GetOrgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetOrgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOrgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetOrgResponse) */ {
 public:
  inline GetOrgResponse() : GetOrgResponse(nullptr) {}
  ~GetOrgResponse() override;
  explicit PROTOBUF_CONSTEXPR GetOrgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrgResponse(const GetOrgResponse& from);
  GetOrgResponse(GetOrgResponse&& from) noexcept
    : GetOrgResponse() {
    *this = ::std::move(from);
  }

  inline GetOrgResponse& operator=(const GetOrgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrgResponse& operator=(GetOrgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrgResponse* internal_default_instance() {
    return reinterpret_cast<const GetOrgResponse*>(
               &_GetOrgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetOrgResponse& a, GetOrgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrgResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrgResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrgResponse& from) {
    GetOrgResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrgResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetOrgResponse";
  }
  protected:
  explicit GetOrgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgFieldNumber = 1,
  };
  // .city.economy.v2.Org org = 1 [json_name = "org"];
  bool has_org() const;
  private:
  bool _internal_has_org() const;
  public:
  void clear_org();
  const ::city::economy::v2::Org& org() const;
  PROTOBUF_NODISCARD ::city::economy::v2::Org* release_org();
  ::city::economy::v2::Org* mutable_org();
  void set_allocated_org(::city::economy::v2::Org* org);
  private:
  const ::city::economy::v2::Org& _internal_org() const;
  ::city::economy::v2::Org* _internal_mutable_org();
  public:
  void unsafe_arena_set_allocated_org(
      ::city::economy::v2::Org* org);
  ::city::economy::v2::Org* unsafe_arena_release_org();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetOrgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::economy::v2::Org* org_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.UpdateOrgRequest) */ {
 public:
  inline UpdateOrgRequest() : UpdateOrgRequest(nullptr) {}
  ~UpdateOrgRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateOrgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgRequest(const UpdateOrgRequest& from);
  UpdateOrgRequest(UpdateOrgRequest&& from) noexcept
    : UpdateOrgRequest() {
    *this = ::std::move(from);
  }

  inline UpdateOrgRequest& operator=(const UpdateOrgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgRequest& operator=(UpdateOrgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgRequest*>(
               &_UpdateOrgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateOrgRequest& a, UpdateOrgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateOrgRequest& from) {
    UpdateOrgRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrgRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.UpdateOrgRequest";
  }
  protected:
  explicit UpdateOrgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgFieldNumber = 1,
  };
  // .city.economy.v2.Org org = 1 [json_name = "org"];
  bool has_org() const;
  private:
  bool _internal_has_org() const;
  public:
  void clear_org();
  const ::city::economy::v2::Org& org() const;
  PROTOBUF_NODISCARD ::city::economy::v2::Org* release_org();
  ::city::economy::v2::Org* mutable_org();
  void set_allocated_org(::city::economy::v2::Org* org);
  private:
  const ::city::economy::v2::Org& _internal_org() const;
  ::city::economy::v2::Org* _internal_mutable_org();
  public:
  void unsafe_arena_set_allocated_org(
      ::city::economy::v2::Org* org);
  ::city::economy::v2::Org* unsafe_arena_release_org();

  // @@protoc_insertion_point(class_scope:city.economy.v2.UpdateOrgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::economy::v2::Org* org_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.UpdateOrgResponse) */ {
 public:
  inline UpdateOrgResponse() : UpdateOrgResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UpdateOrgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrgResponse(const UpdateOrgResponse& from);
  UpdateOrgResponse(UpdateOrgResponse&& from) noexcept
    : UpdateOrgResponse() {
    *this = ::std::move(from);
  }

  inline UpdateOrgResponse& operator=(const UpdateOrgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrgResponse& operator=(UpdateOrgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrgResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateOrgResponse*>(
               &_UpdateOrgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateOrgResponse& a, UpdateOrgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrgResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UpdateOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UpdateOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.UpdateOrgResponse";
  }
  protected:
  explicit UpdateOrgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.UpdateOrgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.AddAgentRequest) */ {
 public:
  inline AddAgentRequest() : AddAgentRequest(nullptr) {}
  ~AddAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR AddAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddAgentRequest(const AddAgentRequest& from);
  AddAgentRequest(AddAgentRequest&& from) noexcept
    : AddAgentRequest() {
    *this = ::std::move(from);
  }

  inline AddAgentRequest& operator=(const AddAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddAgentRequest& operator=(AddAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddAgentRequest* internal_default_instance() {
    return reinterpret_cast<const AddAgentRequest*>(
               &_AddAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AddAgentRequest& a, AddAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddAgentRequest& from) {
    AddAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddAgentRequest";
  }
  protected:
  explicit AddAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentFieldNumber = 1,
  };
  // .city.economy.v2.Agent agent = 1 [json_name = "agent"];
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::city::economy::v2::Agent& agent() const;
  PROTOBUF_NODISCARD ::city::economy::v2::Agent* release_agent();
  ::city::economy::v2::Agent* mutable_agent();
  void set_allocated_agent(::city::economy::v2::Agent* agent);
  private:
  const ::city::economy::v2::Agent& _internal_agent() const;
  ::city::economy::v2::Agent* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::city::economy::v2::Agent* agent);
  ::city::economy::v2::Agent* unsafe_arena_release_agent();

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::economy::v2::Agent* agent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddAgentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.AddAgentResponse) */ {
 public:
  inline AddAgentResponse() : AddAgentResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AddAgentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddAgentResponse(const AddAgentResponse& from);
  AddAgentResponse(AddAgentResponse&& from) noexcept
    : AddAgentResponse() {
    *this = ::std::move(from);
  }

  inline AddAgentResponse& operator=(const AddAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddAgentResponse& operator=(AddAgentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddAgentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddAgentResponse* internal_default_instance() {
    return reinterpret_cast<const AddAgentResponse*>(
               &_AddAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AddAgentResponse& a, AddAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddAgentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddAgentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddAgentResponse";
  }
  protected:
  explicit AddAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.RemoveAgentRequest) */ {
 public:
  inline RemoveAgentRequest() : RemoveAgentRequest(nullptr) {}
  ~RemoveAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveAgentRequest(const RemoveAgentRequest& from);
  RemoveAgentRequest(RemoveAgentRequest&& from) noexcept
    : RemoveAgentRequest() {
    *this = ::std::move(from);
  }

  inline RemoveAgentRequest& operator=(const RemoveAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveAgentRequest& operator=(RemoveAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveAgentRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveAgentRequest*>(
               &_RemoveAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RemoveAgentRequest& a, RemoveAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveAgentRequest& from) {
    RemoveAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.RemoveAgentRequest";
  }
  protected:
  explicit RemoveAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
  };
  // int32 agent_id = 1 [json_name = "agentId"];
  void clear_agent_id();
  int32_t agent_id() const;
  void set_agent_id(int32_t value);
  private:
  int32_t _internal_agent_id() const;
  void _internal_set_agent_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.RemoveAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t agent_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveAgentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.RemoveAgentResponse) */ {
 public:
  inline RemoveAgentResponse() : RemoveAgentResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RemoveAgentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveAgentResponse(const RemoveAgentResponse& from);
  RemoveAgentResponse(RemoveAgentResponse&& from) noexcept
    : RemoveAgentResponse() {
    *this = ::std::move(from);
  }

  inline RemoveAgentResponse& operator=(const RemoveAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveAgentResponse& operator=(RemoveAgentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveAgentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveAgentResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveAgentResponse*>(
               &_RemoveAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RemoveAgentResponse& a, RemoveAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveAgentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveAgentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RemoveAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RemoveAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.RemoveAgentResponse";
  }
  protected:
  explicit RemoveAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.RemoveAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetNominalGDPRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetNominalGDPRequest) */ {
 public:
  inline GetNominalGDPRequest() : GetNominalGDPRequest(nullptr) {}
  ~GetNominalGDPRequest() override;
  explicit PROTOBUF_CONSTEXPR GetNominalGDPRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNominalGDPRequest(const GetNominalGDPRequest& from);
  GetNominalGDPRequest(GetNominalGDPRequest&& from) noexcept
    : GetNominalGDPRequest() {
    *this = ::std::move(from);
  }

  inline GetNominalGDPRequest& operator=(const GetNominalGDPRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNominalGDPRequest& operator=(GetNominalGDPRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNominalGDPRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNominalGDPRequest* internal_default_instance() {
    return reinterpret_cast<const GetNominalGDPRequest*>(
               &_GetNominalGDPRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetNominalGDPRequest& a, GetNominalGDPRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNominalGDPRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNominalGDPRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNominalGDPRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNominalGDPRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNominalGDPRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNominalGDPRequest& from) {
    GetNominalGDPRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNominalGDPRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetNominalGDPRequest";
  }
  protected:
  explicit GetNominalGDPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetNominalGDPRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetNominalGDPResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetNominalGDPResponse) */ {
 public:
  inline GetNominalGDPResponse() : GetNominalGDPResponse(nullptr) {}
  ~GetNominalGDPResponse() override;
  explicit PROTOBUF_CONSTEXPR GetNominalGDPResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNominalGDPResponse(const GetNominalGDPResponse& from);
  GetNominalGDPResponse(GetNominalGDPResponse&& from) noexcept
    : GetNominalGDPResponse() {
    *this = ::std::move(from);
  }

  inline GetNominalGDPResponse& operator=(const GetNominalGDPResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNominalGDPResponse& operator=(GetNominalGDPResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNominalGDPResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNominalGDPResponse* internal_default_instance() {
    return reinterpret_cast<const GetNominalGDPResponse*>(
               &_GetNominalGDPResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetNominalGDPResponse& a, GetNominalGDPResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNominalGDPResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNominalGDPResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNominalGDPResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNominalGDPResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNominalGDPResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNominalGDPResponse& from) {
    GetNominalGDPResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNominalGDPResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetNominalGDPResponse";
  }
  protected:
  explicit GetNominalGDPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNominalGdpFieldNumber = 1,
  };
  // repeated float nominal_gdp = 1 [json_name = "nominalGdp"];
  int nominal_gdp_size() const;
  private:
  int _internal_nominal_gdp_size() const;
  public:
  void clear_nominal_gdp();
  private:
  float _internal_nominal_gdp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_nominal_gdp() const;
  void _internal_add_nominal_gdp(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_nominal_gdp();
  public:
  float nominal_gdp(int index) const;
  void set_nominal_gdp(int index, float value);
  void add_nominal_gdp(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      nominal_gdp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_nominal_gdp();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetNominalGDPResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > nominal_gdp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetNominalGDPRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetNominalGDPRequest) */ {
 public:
  inline SetNominalGDPRequest() : SetNominalGDPRequest(nullptr) {}
  ~SetNominalGDPRequest() override;
  explicit PROTOBUF_CONSTEXPR SetNominalGDPRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetNominalGDPRequest(const SetNominalGDPRequest& from);
  SetNominalGDPRequest(SetNominalGDPRequest&& from) noexcept
    : SetNominalGDPRequest() {
    *this = ::std::move(from);
  }

  inline SetNominalGDPRequest& operator=(const SetNominalGDPRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetNominalGDPRequest& operator=(SetNominalGDPRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetNominalGDPRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetNominalGDPRequest* internal_default_instance() {
    return reinterpret_cast<const SetNominalGDPRequest*>(
               &_SetNominalGDPRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetNominalGDPRequest& a, SetNominalGDPRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetNominalGDPRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetNominalGDPRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetNominalGDPRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetNominalGDPRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetNominalGDPRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetNominalGDPRequest& from) {
    SetNominalGDPRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetNominalGDPRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetNominalGDPRequest";
  }
  protected:
  explicit SetNominalGDPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNominalGdpFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated float nominal_gdp = 2 [json_name = "nominalGdp"];
  int nominal_gdp_size() const;
  private:
  int _internal_nominal_gdp_size() const;
  public:
  void clear_nominal_gdp();
  private:
  float _internal_nominal_gdp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_nominal_gdp() const;
  void _internal_add_nominal_gdp(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_nominal_gdp();
  public:
  float nominal_gdp(int index) const;
  void set_nominal_gdp(int index, float value);
  void add_nominal_gdp(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      nominal_gdp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_nominal_gdp();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetNominalGDPRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > nominal_gdp_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetNominalGDPResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetNominalGDPResponse) */ {
 public:
  inline SetNominalGDPResponse() : SetNominalGDPResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetNominalGDPResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetNominalGDPResponse(const SetNominalGDPResponse& from);
  SetNominalGDPResponse(SetNominalGDPResponse&& from) noexcept
    : SetNominalGDPResponse() {
    *this = ::std::move(from);
  }

  inline SetNominalGDPResponse& operator=(const SetNominalGDPResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetNominalGDPResponse& operator=(SetNominalGDPResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetNominalGDPResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetNominalGDPResponse* internal_default_instance() {
    return reinterpret_cast<const SetNominalGDPResponse*>(
               &_SetNominalGDPResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetNominalGDPResponse& a, SetNominalGDPResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetNominalGDPResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetNominalGDPResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetNominalGDPResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetNominalGDPResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetNominalGDPResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetNominalGDPResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetNominalGDPResponse";
  }
  protected:
  explicit SetNominalGDPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetNominalGDPResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetRealGDPRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetRealGDPRequest) */ {
 public:
  inline GetRealGDPRequest() : GetRealGDPRequest(nullptr) {}
  ~GetRealGDPRequest() override;
  explicit PROTOBUF_CONSTEXPR GetRealGDPRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRealGDPRequest(const GetRealGDPRequest& from);
  GetRealGDPRequest(GetRealGDPRequest&& from) noexcept
    : GetRealGDPRequest() {
    *this = ::std::move(from);
  }

  inline GetRealGDPRequest& operator=(const GetRealGDPRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRealGDPRequest& operator=(GetRealGDPRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRealGDPRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRealGDPRequest* internal_default_instance() {
    return reinterpret_cast<const GetRealGDPRequest*>(
               &_GetRealGDPRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetRealGDPRequest& a, GetRealGDPRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRealGDPRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRealGDPRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRealGDPRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRealGDPRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRealGDPRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRealGDPRequest& from) {
    GetRealGDPRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRealGDPRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetRealGDPRequest";
  }
  protected:
  explicit GetRealGDPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetRealGDPRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetRealGDPResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetRealGDPResponse) */ {
 public:
  inline GetRealGDPResponse() : GetRealGDPResponse(nullptr) {}
  ~GetRealGDPResponse() override;
  explicit PROTOBUF_CONSTEXPR GetRealGDPResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRealGDPResponse(const GetRealGDPResponse& from);
  GetRealGDPResponse(GetRealGDPResponse&& from) noexcept
    : GetRealGDPResponse() {
    *this = ::std::move(from);
  }

  inline GetRealGDPResponse& operator=(const GetRealGDPResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRealGDPResponse& operator=(GetRealGDPResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRealGDPResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRealGDPResponse* internal_default_instance() {
    return reinterpret_cast<const GetRealGDPResponse*>(
               &_GetRealGDPResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetRealGDPResponse& a, GetRealGDPResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRealGDPResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRealGDPResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRealGDPResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRealGDPResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRealGDPResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRealGDPResponse& from) {
    GetRealGDPResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRealGDPResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetRealGDPResponse";
  }
  protected:
  explicit GetRealGDPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealGdpFieldNumber = 1,
  };
  // repeated float real_gdp = 1 [json_name = "realGdp"];
  int real_gdp_size() const;
  private:
  int _internal_real_gdp_size() const;
  public:
  void clear_real_gdp();
  private:
  float _internal_real_gdp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_real_gdp() const;
  void _internal_add_real_gdp(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_real_gdp();
  public:
  float real_gdp(int index) const;
  void set_real_gdp(int index, float value);
  void add_real_gdp(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      real_gdp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_real_gdp();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetRealGDPResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > real_gdp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetRealGDPRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetRealGDPRequest) */ {
 public:
  inline SetRealGDPRequest() : SetRealGDPRequest(nullptr) {}
  ~SetRealGDPRequest() override;
  explicit PROTOBUF_CONSTEXPR SetRealGDPRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRealGDPRequest(const SetRealGDPRequest& from);
  SetRealGDPRequest(SetRealGDPRequest&& from) noexcept
    : SetRealGDPRequest() {
    *this = ::std::move(from);
  }

  inline SetRealGDPRequest& operator=(const SetRealGDPRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRealGDPRequest& operator=(SetRealGDPRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRealGDPRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRealGDPRequest* internal_default_instance() {
    return reinterpret_cast<const SetRealGDPRequest*>(
               &_SetRealGDPRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SetRealGDPRequest& a, SetRealGDPRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRealGDPRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRealGDPRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRealGDPRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRealGDPRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRealGDPRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetRealGDPRequest& from) {
    SetRealGDPRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRealGDPRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetRealGDPRequest";
  }
  protected:
  explicit SetRealGDPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealGdpFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated float real_gdp = 2 [json_name = "realGdp"];
  int real_gdp_size() const;
  private:
  int _internal_real_gdp_size() const;
  public:
  void clear_real_gdp();
  private:
  float _internal_real_gdp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_real_gdp() const;
  void _internal_add_real_gdp(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_real_gdp();
  public:
  float real_gdp(int index) const;
  void set_real_gdp(int index, float value);
  void add_real_gdp(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      real_gdp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_real_gdp();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetRealGDPRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > real_gdp_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetRealGDPResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetRealGDPResponse) */ {
 public:
  inline SetRealGDPResponse() : SetRealGDPResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetRealGDPResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRealGDPResponse(const SetRealGDPResponse& from);
  SetRealGDPResponse(SetRealGDPResponse&& from) noexcept
    : SetRealGDPResponse() {
    *this = ::std::move(from);
  }

  inline SetRealGDPResponse& operator=(const SetRealGDPResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRealGDPResponse& operator=(SetRealGDPResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRealGDPResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRealGDPResponse* internal_default_instance() {
    return reinterpret_cast<const SetRealGDPResponse*>(
               &_SetRealGDPResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SetRealGDPResponse& a, SetRealGDPResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRealGDPResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRealGDPResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRealGDPResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRealGDPResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetRealGDPResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetRealGDPResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetRealGDPResponse";
  }
  protected:
  explicit SetRealGDPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetRealGDPResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetUnemploymentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetUnemploymentRequest) */ {
 public:
  inline GetUnemploymentRequest() : GetUnemploymentRequest(nullptr) {}
  ~GetUnemploymentRequest() override;
  explicit PROTOBUF_CONSTEXPR GetUnemploymentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUnemploymentRequest(const GetUnemploymentRequest& from);
  GetUnemploymentRequest(GetUnemploymentRequest&& from) noexcept
    : GetUnemploymentRequest() {
    *this = ::std::move(from);
  }

  inline GetUnemploymentRequest& operator=(const GetUnemploymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUnemploymentRequest& operator=(GetUnemploymentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUnemploymentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUnemploymentRequest* internal_default_instance() {
    return reinterpret_cast<const GetUnemploymentRequest*>(
               &_GetUnemploymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetUnemploymentRequest& a, GetUnemploymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUnemploymentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUnemploymentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUnemploymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUnemploymentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUnemploymentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUnemploymentRequest& from) {
    GetUnemploymentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUnemploymentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetUnemploymentRequest";
  }
  protected:
  explicit GetUnemploymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetUnemploymentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetUnemploymentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetUnemploymentResponse) */ {
 public:
  inline GetUnemploymentResponse() : GetUnemploymentResponse(nullptr) {}
  ~GetUnemploymentResponse() override;
  explicit PROTOBUF_CONSTEXPR GetUnemploymentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUnemploymentResponse(const GetUnemploymentResponse& from);
  GetUnemploymentResponse(GetUnemploymentResponse&& from) noexcept
    : GetUnemploymentResponse() {
    *this = ::std::move(from);
  }

  inline GetUnemploymentResponse& operator=(const GetUnemploymentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUnemploymentResponse& operator=(GetUnemploymentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUnemploymentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUnemploymentResponse* internal_default_instance() {
    return reinterpret_cast<const GetUnemploymentResponse*>(
               &_GetUnemploymentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetUnemploymentResponse& a, GetUnemploymentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUnemploymentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUnemploymentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUnemploymentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUnemploymentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUnemploymentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUnemploymentResponse& from) {
    GetUnemploymentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUnemploymentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetUnemploymentResponse";
  }
  protected:
  explicit GetUnemploymentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnemploymentFieldNumber = 1,
  };
  // repeated float unemployment = 1 [json_name = "unemployment"];
  int unemployment_size() const;
  private:
  int _internal_unemployment_size() const;
  public:
  void clear_unemployment();
  private:
  float _internal_unemployment(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_unemployment() const;
  void _internal_add_unemployment(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_unemployment();
  public:
  float unemployment(int index) const;
  void set_unemployment(int index, float value);
  void add_unemployment(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      unemployment() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_unemployment();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetUnemploymentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > unemployment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetUnemploymentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetUnemploymentRequest) */ {
 public:
  inline SetUnemploymentRequest() : SetUnemploymentRequest(nullptr) {}
  ~SetUnemploymentRequest() override;
  explicit PROTOBUF_CONSTEXPR SetUnemploymentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetUnemploymentRequest(const SetUnemploymentRequest& from);
  SetUnemploymentRequest(SetUnemploymentRequest&& from) noexcept
    : SetUnemploymentRequest() {
    *this = ::std::move(from);
  }

  inline SetUnemploymentRequest& operator=(const SetUnemploymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUnemploymentRequest& operator=(SetUnemploymentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetUnemploymentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetUnemploymentRequest* internal_default_instance() {
    return reinterpret_cast<const SetUnemploymentRequest*>(
               &_SetUnemploymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SetUnemploymentRequest& a, SetUnemploymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUnemploymentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUnemploymentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetUnemploymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetUnemploymentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetUnemploymentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetUnemploymentRequest& from) {
    SetUnemploymentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUnemploymentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetUnemploymentRequest";
  }
  protected:
  explicit SetUnemploymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnemploymentFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated float unemployment = 2 [json_name = "unemployment"];
  int unemployment_size() const;
  private:
  int _internal_unemployment_size() const;
  public:
  void clear_unemployment();
  private:
  float _internal_unemployment(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_unemployment() const;
  void _internal_add_unemployment(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_unemployment();
  public:
  float unemployment(int index) const;
  void set_unemployment(int index, float value);
  void add_unemployment(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      unemployment() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_unemployment();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetUnemploymentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > unemployment_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetUnemploymentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetUnemploymentResponse) */ {
 public:
  inline SetUnemploymentResponse() : SetUnemploymentResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetUnemploymentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetUnemploymentResponse(const SetUnemploymentResponse& from);
  SetUnemploymentResponse(SetUnemploymentResponse&& from) noexcept
    : SetUnemploymentResponse() {
    *this = ::std::move(from);
  }

  inline SetUnemploymentResponse& operator=(const SetUnemploymentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUnemploymentResponse& operator=(SetUnemploymentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetUnemploymentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetUnemploymentResponse* internal_default_instance() {
    return reinterpret_cast<const SetUnemploymentResponse*>(
               &_SetUnemploymentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SetUnemploymentResponse& a, SetUnemploymentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUnemploymentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUnemploymentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetUnemploymentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetUnemploymentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetUnemploymentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetUnemploymentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetUnemploymentResponse";
  }
  protected:
  explicit SetUnemploymentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetUnemploymentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetWagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetWagesRequest) */ {
 public:
  inline GetWagesRequest() : GetWagesRequest(nullptr) {}
  ~GetWagesRequest() override;
  explicit PROTOBUF_CONSTEXPR GetWagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWagesRequest(const GetWagesRequest& from);
  GetWagesRequest(GetWagesRequest&& from) noexcept
    : GetWagesRequest() {
    *this = ::std::move(from);
  }

  inline GetWagesRequest& operator=(const GetWagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWagesRequest& operator=(GetWagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWagesRequest* internal_default_instance() {
    return reinterpret_cast<const GetWagesRequest*>(
               &_GetWagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetWagesRequest& a, GetWagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWagesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWagesRequest& from) {
    GetWagesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWagesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetWagesRequest";
  }
  protected:
  explicit GetWagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetWagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetWagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetWagesResponse) */ {
 public:
  inline GetWagesResponse() : GetWagesResponse(nullptr) {}
  ~GetWagesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetWagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWagesResponse(const GetWagesResponse& from);
  GetWagesResponse(GetWagesResponse&& from) noexcept
    : GetWagesResponse() {
    *this = ::std::move(from);
  }

  inline GetWagesResponse& operator=(const GetWagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWagesResponse& operator=(GetWagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWagesResponse* internal_default_instance() {
    return reinterpret_cast<const GetWagesResponse*>(
               &_GetWagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetWagesResponse& a, GetWagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWagesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWagesResponse& from) {
    GetWagesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWagesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetWagesResponse";
  }
  protected:
  explicit GetWagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWagesFieldNumber = 1,
  };
  // repeated float wages = 1 [json_name = "wages"];
  int wages_size() const;
  private:
  int _internal_wages_size() const;
  public:
  void clear_wages();
  private:
  float _internal_wages(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_wages() const;
  void _internal_add_wages(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_wages();
  public:
  float wages(int index) const;
  void set_wages(int index, float value);
  void add_wages(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      wages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_wages();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetWagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > wages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetWagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetWagesRequest) */ {
 public:
  inline SetWagesRequest() : SetWagesRequest(nullptr) {}
  ~SetWagesRequest() override;
  explicit PROTOBUF_CONSTEXPR SetWagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetWagesRequest(const SetWagesRequest& from);
  SetWagesRequest(SetWagesRequest&& from) noexcept
    : SetWagesRequest() {
    *this = ::std::move(from);
  }

  inline SetWagesRequest& operator=(const SetWagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetWagesRequest& operator=(SetWagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetWagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetWagesRequest* internal_default_instance() {
    return reinterpret_cast<const SetWagesRequest*>(
               &_SetWagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SetWagesRequest& a, SetWagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetWagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetWagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetWagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetWagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetWagesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetWagesRequest& from) {
    SetWagesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetWagesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetWagesRequest";
  }
  protected:
  explicit SetWagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWagesFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated float wages = 2 [json_name = "wages"];
  int wages_size() const;
  private:
  int _internal_wages_size() const;
  public:
  void clear_wages();
  private:
  float _internal_wages(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_wages() const;
  void _internal_add_wages(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_wages();
  public:
  float wages(int index) const;
  void set_wages(int index, float value);
  void add_wages(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      wages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_wages();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetWagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > wages_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetWagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetWagesResponse) */ {
 public:
  inline SetWagesResponse() : SetWagesResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetWagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetWagesResponse(const SetWagesResponse& from);
  SetWagesResponse(SetWagesResponse&& from) noexcept
    : SetWagesResponse() {
    *this = ::std::move(from);
  }

  inline SetWagesResponse& operator=(const SetWagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetWagesResponse& operator=(SetWagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetWagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetWagesResponse* internal_default_instance() {
    return reinterpret_cast<const SetWagesResponse*>(
               &_SetWagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SetWagesResponse& a, SetWagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetWagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetWagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetWagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetWagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetWagesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetWagesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetWagesResponse";
  }
  protected:
  explicit SetWagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetWagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPricesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetPricesRequest) */ {
 public:
  inline GetPricesRequest() : GetPricesRequest(nullptr) {}
  ~GetPricesRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPricesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPricesRequest(const GetPricesRequest& from);
  GetPricesRequest(GetPricesRequest&& from) noexcept
    : GetPricesRequest() {
    *this = ::std::move(from);
  }

  inline GetPricesRequest& operator=(const GetPricesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPricesRequest& operator=(GetPricesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPricesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPricesRequest* internal_default_instance() {
    return reinterpret_cast<const GetPricesRequest*>(
               &_GetPricesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetPricesRequest& a, GetPricesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPricesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPricesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPricesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPricesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPricesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPricesRequest& from) {
    GetPricesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPricesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetPricesRequest";
  }
  protected:
  explicit GetPricesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetPricesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPricesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetPricesResponse) */ {
 public:
  inline GetPricesResponse() : GetPricesResponse(nullptr) {}
  ~GetPricesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPricesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPricesResponse(const GetPricesResponse& from);
  GetPricesResponse(GetPricesResponse&& from) noexcept
    : GetPricesResponse() {
    *this = ::std::move(from);
  }

  inline GetPricesResponse& operator=(const GetPricesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPricesResponse& operator=(GetPricesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPricesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPricesResponse* internal_default_instance() {
    return reinterpret_cast<const GetPricesResponse*>(
               &_GetPricesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetPricesResponse& a, GetPricesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPricesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPricesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPricesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPricesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPricesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPricesResponse& from) {
    GetPricesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPricesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetPricesResponse";
  }
  protected:
  explicit GetPricesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPricesFieldNumber = 1,
  };
  // repeated float prices = 1 [json_name = "prices"];
  int prices_size() const;
  private:
  int _internal_prices_size() const;
  public:
  void clear_prices();
  private:
  float _internal_prices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_prices() const;
  void _internal_add_prices(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_prices();
  public:
  float prices(int index) const;
  void set_prices(int index, float value);
  void add_prices(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_prices();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetPricesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > prices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetPricesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetPricesRequest) */ {
 public:
  inline SetPricesRequest() : SetPricesRequest(nullptr) {}
  ~SetPricesRequest() override;
  explicit PROTOBUF_CONSTEXPR SetPricesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPricesRequest(const SetPricesRequest& from);
  SetPricesRequest(SetPricesRequest&& from) noexcept
    : SetPricesRequest() {
    *this = ::std::move(from);
  }

  inline SetPricesRequest& operator=(const SetPricesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPricesRequest& operator=(SetPricesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPricesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPricesRequest* internal_default_instance() {
    return reinterpret_cast<const SetPricesRequest*>(
               &_SetPricesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SetPricesRequest& a, SetPricesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPricesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPricesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPricesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPricesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPricesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetPricesRequest& from) {
    SetPricesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPricesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetPricesRequest";
  }
  protected:
  explicit SetPricesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPricesFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated float prices = 2 [json_name = "prices"];
  int prices_size() const;
  private:
  int _internal_prices_size() const;
  public:
  void clear_prices();
  private:
  float _internal_prices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_prices() const;
  void _internal_add_prices(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_prices();
  public:
  float prices(int index) const;
  void set_prices(int index, float value);
  void add_prices(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_prices();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetPricesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > prices_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetPricesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetPricesResponse) */ {
 public:
  inline SetPricesResponse() : SetPricesResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetPricesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPricesResponse(const SetPricesResponse& from);
  SetPricesResponse(SetPricesResponse&& from) noexcept
    : SetPricesResponse() {
    *this = ::std::move(from);
  }

  inline SetPricesResponse& operator=(const SetPricesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPricesResponse& operator=(SetPricesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPricesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPricesResponse* internal_default_instance() {
    return reinterpret_cast<const SetPricesResponse*>(
               &_SetPricesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SetPricesResponse& a, SetPricesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPricesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPricesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPricesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPricesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetPricesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetPricesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetPricesResponse";
  }
  protected:
  explicit SetPricesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetPricesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetInventoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetInventoryRequest) */ {
 public:
  inline GetInventoryRequest() : GetInventoryRequest(nullptr) {}
  ~GetInventoryRequest() override;
  explicit PROTOBUF_CONSTEXPR GetInventoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInventoryRequest(const GetInventoryRequest& from);
  GetInventoryRequest(GetInventoryRequest&& from) noexcept
    : GetInventoryRequest() {
    *this = ::std::move(from);
  }

  inline GetInventoryRequest& operator=(const GetInventoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInventoryRequest& operator=(GetInventoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInventoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInventoryRequest* internal_default_instance() {
    return reinterpret_cast<const GetInventoryRequest*>(
               &_GetInventoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetInventoryRequest& a, GetInventoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInventoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInventoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInventoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInventoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInventoryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetInventoryRequest& from) {
    GetInventoryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInventoryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetInventoryRequest";
  }
  protected:
  explicit GetInventoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetInventoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetInventoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetInventoryResponse) */ {
 public:
  inline GetInventoryResponse() : GetInventoryResponse(nullptr) {}
  ~GetInventoryResponse() override;
  explicit PROTOBUF_CONSTEXPR GetInventoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInventoryResponse(const GetInventoryResponse& from);
  GetInventoryResponse(GetInventoryResponse&& from) noexcept
    : GetInventoryResponse() {
    *this = ::std::move(from);
  }

  inline GetInventoryResponse& operator=(const GetInventoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInventoryResponse& operator=(GetInventoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInventoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInventoryResponse* internal_default_instance() {
    return reinterpret_cast<const GetInventoryResponse*>(
               &_GetInventoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetInventoryResponse& a, GetInventoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInventoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInventoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInventoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInventoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInventoryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetInventoryResponse& from) {
    GetInventoryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInventoryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetInventoryResponse";
  }
  protected:
  explicit GetInventoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInventoryFieldNumber = 1,
  };
  // int32 inventory = 1 [json_name = "inventory"];
  void clear_inventory();
  int32_t inventory() const;
  void set_inventory(int32_t value);
  private:
  int32_t _internal_inventory() const;
  void _internal_set_inventory(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetInventoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t inventory_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetInventoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetInventoryRequest) */ {
 public:
  inline SetInventoryRequest() : SetInventoryRequest(nullptr) {}
  ~SetInventoryRequest() override;
  explicit PROTOBUF_CONSTEXPR SetInventoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetInventoryRequest(const SetInventoryRequest& from);
  SetInventoryRequest(SetInventoryRequest&& from) noexcept
    : SetInventoryRequest() {
    *this = ::std::move(from);
  }

  inline SetInventoryRequest& operator=(const SetInventoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInventoryRequest& operator=(SetInventoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetInventoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetInventoryRequest* internal_default_instance() {
    return reinterpret_cast<const SetInventoryRequest*>(
               &_SetInventoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SetInventoryRequest& a, SetInventoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInventoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInventoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetInventoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetInventoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetInventoryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetInventoryRequest& from) {
    SetInventoryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetInventoryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetInventoryRequest";
  }
  protected:
  explicit SetInventoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kInventoryFieldNumber = 2,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // int32 inventory = 2 [json_name = "inventory"];
  void clear_inventory();
  int32_t inventory() const;
  void set_inventory(int32_t value);
  private:
  int32_t _internal_inventory() const;
  void _internal_set_inventory(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetInventoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    int32_t inventory_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetInventoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetInventoryResponse) */ {
 public:
  inline SetInventoryResponse() : SetInventoryResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetInventoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetInventoryResponse(const SetInventoryResponse& from);
  SetInventoryResponse(SetInventoryResponse&& from) noexcept
    : SetInventoryResponse() {
    *this = ::std::move(from);
  }

  inline SetInventoryResponse& operator=(const SetInventoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInventoryResponse& operator=(SetInventoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetInventoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetInventoryResponse* internal_default_instance() {
    return reinterpret_cast<const SetInventoryResponse*>(
               &_SetInventoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SetInventoryResponse& a, SetInventoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInventoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInventoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetInventoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetInventoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetInventoryResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetInventoryResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetInventoryResponse";
  }
  protected:
  explicit SetInventoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetInventoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPriceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetPriceRequest) */ {
 public:
  inline GetPriceRequest() : GetPriceRequest(nullptr) {}
  ~GetPriceRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPriceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPriceRequest(const GetPriceRequest& from);
  GetPriceRequest(GetPriceRequest&& from) noexcept
    : GetPriceRequest() {
    *this = ::std::move(from);
  }

  inline GetPriceRequest& operator=(const GetPriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPriceRequest& operator=(GetPriceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPriceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPriceRequest* internal_default_instance() {
    return reinterpret_cast<const GetPriceRequest*>(
               &_GetPriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetPriceRequest& a, GetPriceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPriceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPriceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPriceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPriceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPriceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPriceRequest& from) {
    GetPriceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPriceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetPriceRequest";
  }
  protected:
  explicit GetPriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetPriceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPriceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetPriceResponse) */ {
 public:
  inline GetPriceResponse() : GetPriceResponse(nullptr) {}
  ~GetPriceResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPriceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPriceResponse(const GetPriceResponse& from);
  GetPriceResponse(GetPriceResponse&& from) noexcept
    : GetPriceResponse() {
    *this = ::std::move(from);
  }

  inline GetPriceResponse& operator=(const GetPriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPriceResponse& operator=(GetPriceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPriceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPriceResponse* internal_default_instance() {
    return reinterpret_cast<const GetPriceResponse*>(
               &_GetPriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetPriceResponse& a, GetPriceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPriceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPriceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPriceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPriceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPriceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPriceResponse& from) {
    GetPriceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPriceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetPriceResponse";
  }
  protected:
  explicit GetPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
  };
  // float price = 1 [json_name = "price"];
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetPriceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetPriceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetPriceRequest) */ {
 public:
  inline SetPriceRequest() : SetPriceRequest(nullptr) {}
  ~SetPriceRequest() override;
  explicit PROTOBUF_CONSTEXPR SetPriceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPriceRequest(const SetPriceRequest& from);
  SetPriceRequest(SetPriceRequest&& from) noexcept
    : SetPriceRequest() {
    *this = ::std::move(from);
  }

  inline SetPriceRequest& operator=(const SetPriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPriceRequest& operator=(SetPriceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPriceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPriceRequest* internal_default_instance() {
    return reinterpret_cast<const SetPriceRequest*>(
               &_SetPriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SetPriceRequest& a, SetPriceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPriceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPriceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPriceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPriceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPriceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetPriceRequest& from) {
    SetPriceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPriceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetPriceRequest";
  }
  protected:
  explicit SetPriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kPriceFieldNumber = 2,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // float price = 2 [json_name = "price"];
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetPriceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    float price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetPriceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetPriceResponse) */ {
 public:
  inline SetPriceResponse() : SetPriceResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetPriceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPriceResponse(const SetPriceResponse& from);
  SetPriceResponse(SetPriceResponse&& from) noexcept
    : SetPriceResponse() {
    *this = ::std::move(from);
  }

  inline SetPriceResponse& operator=(const SetPriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPriceResponse& operator=(SetPriceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPriceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPriceResponse* internal_default_instance() {
    return reinterpret_cast<const SetPriceResponse*>(
               &_SetPriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SetPriceResponse& a, SetPriceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPriceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPriceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPriceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPriceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetPriceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetPriceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetPriceResponse";
  }
  protected:
  explicit SetPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetPriceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetCurrencyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetCurrencyRequest) */ {
 public:
  inline GetCurrencyRequest() : GetCurrencyRequest(nullptr) {}
  ~GetCurrencyRequest() override;
  explicit PROTOBUF_CONSTEXPR GetCurrencyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCurrencyRequest(const GetCurrencyRequest& from);
  GetCurrencyRequest(GetCurrencyRequest&& from) noexcept
    : GetCurrencyRequest() {
    *this = ::std::move(from);
  }

  inline GetCurrencyRequest& operator=(const GetCurrencyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrencyRequest& operator=(GetCurrencyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCurrencyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCurrencyRequest* internal_default_instance() {
    return reinterpret_cast<const GetCurrencyRequest*>(
               &_GetCurrencyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetCurrencyRequest& a, GetCurrencyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrencyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrencyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCurrencyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCurrencyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCurrencyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCurrencyRequest& from) {
    GetCurrencyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrencyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetCurrencyRequest";
  }
  protected:
  explicit GetCurrencyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetCurrencyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetCurrencyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetCurrencyResponse) */ {
 public:
  inline GetCurrencyResponse() : GetCurrencyResponse(nullptr) {}
  ~GetCurrencyResponse() override;
  explicit PROTOBUF_CONSTEXPR GetCurrencyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCurrencyResponse(const GetCurrencyResponse& from);
  GetCurrencyResponse(GetCurrencyResponse&& from) noexcept
    : GetCurrencyResponse() {
    *this = ::std::move(from);
  }

  inline GetCurrencyResponse& operator=(const GetCurrencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrencyResponse& operator=(GetCurrencyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCurrencyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCurrencyResponse* internal_default_instance() {
    return reinterpret_cast<const GetCurrencyResponse*>(
               &_GetCurrencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GetCurrencyResponse& a, GetCurrencyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrencyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrencyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCurrencyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCurrencyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCurrencyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCurrencyResponse& from) {
    GetCurrencyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrencyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetCurrencyResponse";
  }
  protected:
  explicit GetCurrencyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
  };
  // float currency = 1 [json_name = "currency"];
  void clear_currency();
  float currency() const;
  void set_currency(float value);
  private:
  float _internal_currency() const;
  void _internal_set_currency(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetCurrencyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float currency_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetCurrencyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetCurrencyRequest) */ {
 public:
  inline SetCurrencyRequest() : SetCurrencyRequest(nullptr) {}
  ~SetCurrencyRequest() override;
  explicit PROTOBUF_CONSTEXPR SetCurrencyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCurrencyRequest(const SetCurrencyRequest& from);
  SetCurrencyRequest(SetCurrencyRequest&& from) noexcept
    : SetCurrencyRequest() {
    *this = ::std::move(from);
  }

  inline SetCurrencyRequest& operator=(const SetCurrencyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCurrencyRequest& operator=(SetCurrencyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCurrencyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCurrencyRequest* internal_default_instance() {
    return reinterpret_cast<const SetCurrencyRequest*>(
               &_SetCurrencyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SetCurrencyRequest& a, SetCurrencyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCurrencyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCurrencyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCurrencyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCurrencyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetCurrencyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetCurrencyRequest& from) {
    SetCurrencyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCurrencyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetCurrencyRequest";
  }
  protected:
  explicit SetCurrencyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kCurrencyFieldNumber = 2,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // float currency = 2 [json_name = "currency"];
  void clear_currency();
  float currency() const;
  void set_currency(float value);
  private:
  float _internal_currency() const;
  void _internal_set_currency(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetCurrencyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    float currency_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetCurrencyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetCurrencyResponse) */ {
 public:
  inline SetCurrencyResponse() : SetCurrencyResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetCurrencyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCurrencyResponse(const SetCurrencyResponse& from);
  SetCurrencyResponse(SetCurrencyResponse&& from) noexcept
    : SetCurrencyResponse() {
    *this = ::std::move(from);
  }

  inline SetCurrencyResponse& operator=(const SetCurrencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCurrencyResponse& operator=(SetCurrencyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCurrencyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCurrencyResponse* internal_default_instance() {
    return reinterpret_cast<const SetCurrencyResponse*>(
               &_SetCurrencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SetCurrencyResponse& a, SetCurrencyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCurrencyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCurrencyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCurrencyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCurrencyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetCurrencyResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetCurrencyResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetCurrencyResponse";
  }
  protected:
  explicit SetCurrencyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetCurrencyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetInterestRateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetInterestRateRequest) */ {
 public:
  inline GetInterestRateRequest() : GetInterestRateRequest(nullptr) {}
  ~GetInterestRateRequest() override;
  explicit PROTOBUF_CONSTEXPR GetInterestRateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInterestRateRequest(const GetInterestRateRequest& from);
  GetInterestRateRequest(GetInterestRateRequest&& from) noexcept
    : GetInterestRateRequest() {
    *this = ::std::move(from);
  }

  inline GetInterestRateRequest& operator=(const GetInterestRateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInterestRateRequest& operator=(GetInterestRateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInterestRateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInterestRateRequest* internal_default_instance() {
    return reinterpret_cast<const GetInterestRateRequest*>(
               &_GetInterestRateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GetInterestRateRequest& a, GetInterestRateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInterestRateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInterestRateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInterestRateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInterestRateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInterestRateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetInterestRateRequest& from) {
    GetInterestRateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInterestRateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetInterestRateRequest";
  }
  protected:
  explicit GetInterestRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetInterestRateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetInterestRateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetInterestRateResponse) */ {
 public:
  inline GetInterestRateResponse() : GetInterestRateResponse(nullptr) {}
  ~GetInterestRateResponse() override;
  explicit PROTOBUF_CONSTEXPR GetInterestRateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInterestRateResponse(const GetInterestRateResponse& from);
  GetInterestRateResponse(GetInterestRateResponse&& from) noexcept
    : GetInterestRateResponse() {
    *this = ::std::move(from);
  }

  inline GetInterestRateResponse& operator=(const GetInterestRateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInterestRateResponse& operator=(GetInterestRateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInterestRateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInterestRateResponse* internal_default_instance() {
    return reinterpret_cast<const GetInterestRateResponse*>(
               &_GetInterestRateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GetInterestRateResponse& a, GetInterestRateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInterestRateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInterestRateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInterestRateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInterestRateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInterestRateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetInterestRateResponse& from) {
    GetInterestRateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInterestRateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetInterestRateResponse";
  }
  protected:
  explicit GetInterestRateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterestRateFieldNumber = 1,
  };
  // float interest_rate = 1 [json_name = "interestRate"];
  void clear_interest_rate();
  float interest_rate() const;
  void set_interest_rate(float value);
  private:
  float _internal_interest_rate() const;
  void _internal_set_interest_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetInterestRateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float interest_rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetInterestRateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetInterestRateRequest) */ {
 public:
  inline SetInterestRateRequest() : SetInterestRateRequest(nullptr) {}
  ~SetInterestRateRequest() override;
  explicit PROTOBUF_CONSTEXPR SetInterestRateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetInterestRateRequest(const SetInterestRateRequest& from);
  SetInterestRateRequest(SetInterestRateRequest&& from) noexcept
    : SetInterestRateRequest() {
    *this = ::std::move(from);
  }

  inline SetInterestRateRequest& operator=(const SetInterestRateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInterestRateRequest& operator=(SetInterestRateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetInterestRateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetInterestRateRequest* internal_default_instance() {
    return reinterpret_cast<const SetInterestRateRequest*>(
               &_SetInterestRateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SetInterestRateRequest& a, SetInterestRateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInterestRateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInterestRateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetInterestRateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetInterestRateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetInterestRateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetInterestRateRequest& from) {
    SetInterestRateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetInterestRateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetInterestRateRequest";
  }
  protected:
  explicit SetInterestRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kInterestRateFieldNumber = 2,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // float interest_rate = 2 [json_name = "interestRate"];
  void clear_interest_rate();
  float interest_rate() const;
  void set_interest_rate(float value);
  private:
  float _internal_interest_rate() const;
  void _internal_set_interest_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetInterestRateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    float interest_rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetInterestRateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetInterestRateResponse) */ {
 public:
  inline SetInterestRateResponse() : SetInterestRateResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetInterestRateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetInterestRateResponse(const SetInterestRateResponse& from);
  SetInterestRateResponse(SetInterestRateResponse&& from) noexcept
    : SetInterestRateResponse() {
    *this = ::std::move(from);
  }

  inline SetInterestRateResponse& operator=(const SetInterestRateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInterestRateResponse& operator=(SetInterestRateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetInterestRateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetInterestRateResponse* internal_default_instance() {
    return reinterpret_cast<const SetInterestRateResponse*>(
               &_SetInterestRateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(SetInterestRateResponse& a, SetInterestRateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInterestRateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInterestRateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetInterestRateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetInterestRateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetInterestRateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetInterestRateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetInterestRateResponse";
  }
  protected:
  explicit SetInterestRateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetInterestRateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetBracketCutoffsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetBracketCutoffsRequest) */ {
 public:
  inline GetBracketCutoffsRequest() : GetBracketCutoffsRequest(nullptr) {}
  ~GetBracketCutoffsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetBracketCutoffsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBracketCutoffsRequest(const GetBracketCutoffsRequest& from);
  GetBracketCutoffsRequest(GetBracketCutoffsRequest&& from) noexcept
    : GetBracketCutoffsRequest() {
    *this = ::std::move(from);
  }

  inline GetBracketCutoffsRequest& operator=(const GetBracketCutoffsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBracketCutoffsRequest& operator=(GetBracketCutoffsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBracketCutoffsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBracketCutoffsRequest* internal_default_instance() {
    return reinterpret_cast<const GetBracketCutoffsRequest*>(
               &_GetBracketCutoffsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GetBracketCutoffsRequest& a, GetBracketCutoffsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBracketCutoffsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBracketCutoffsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBracketCutoffsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBracketCutoffsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBracketCutoffsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBracketCutoffsRequest& from) {
    GetBracketCutoffsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBracketCutoffsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetBracketCutoffsRequest";
  }
  protected:
  explicit GetBracketCutoffsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetBracketCutoffsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetBracketCutoffsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetBracketCutoffsResponse) */ {
 public:
  inline GetBracketCutoffsResponse() : GetBracketCutoffsResponse(nullptr) {}
  ~GetBracketCutoffsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetBracketCutoffsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBracketCutoffsResponse(const GetBracketCutoffsResponse& from);
  GetBracketCutoffsResponse(GetBracketCutoffsResponse&& from) noexcept
    : GetBracketCutoffsResponse() {
    *this = ::std::move(from);
  }

  inline GetBracketCutoffsResponse& operator=(const GetBracketCutoffsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBracketCutoffsResponse& operator=(GetBracketCutoffsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBracketCutoffsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBracketCutoffsResponse* internal_default_instance() {
    return reinterpret_cast<const GetBracketCutoffsResponse*>(
               &_GetBracketCutoffsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GetBracketCutoffsResponse& a, GetBracketCutoffsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBracketCutoffsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBracketCutoffsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBracketCutoffsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBracketCutoffsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBracketCutoffsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBracketCutoffsResponse& from) {
    GetBracketCutoffsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBracketCutoffsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetBracketCutoffsResponse";
  }
  protected:
  explicit GetBracketCutoffsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBracketCutoffsFieldNumber = 1,
  };
  // repeated float bracket_cutoffs = 1 [json_name = "bracketCutoffs"];
  int bracket_cutoffs_size() const;
  private:
  int _internal_bracket_cutoffs_size() const;
  public:
  void clear_bracket_cutoffs();
  private:
  float _internal_bracket_cutoffs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bracket_cutoffs() const;
  void _internal_add_bracket_cutoffs(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bracket_cutoffs();
  public:
  float bracket_cutoffs(int index) const;
  void set_bracket_cutoffs(int index, float value);
  void add_bracket_cutoffs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bracket_cutoffs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bracket_cutoffs();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetBracketCutoffsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bracket_cutoffs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetBracketCutoffsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetBracketCutoffsRequest) */ {
 public:
  inline SetBracketCutoffsRequest() : SetBracketCutoffsRequest(nullptr) {}
  ~SetBracketCutoffsRequest() override;
  explicit PROTOBUF_CONSTEXPR SetBracketCutoffsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBracketCutoffsRequest(const SetBracketCutoffsRequest& from);
  SetBracketCutoffsRequest(SetBracketCutoffsRequest&& from) noexcept
    : SetBracketCutoffsRequest() {
    *this = ::std::move(from);
  }

  inline SetBracketCutoffsRequest& operator=(const SetBracketCutoffsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBracketCutoffsRequest& operator=(SetBracketCutoffsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBracketCutoffsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBracketCutoffsRequest* internal_default_instance() {
    return reinterpret_cast<const SetBracketCutoffsRequest*>(
               &_SetBracketCutoffsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(SetBracketCutoffsRequest& a, SetBracketCutoffsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBracketCutoffsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBracketCutoffsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBracketCutoffsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBracketCutoffsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBracketCutoffsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetBracketCutoffsRequest& from) {
    SetBracketCutoffsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBracketCutoffsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetBracketCutoffsRequest";
  }
  protected:
  explicit SetBracketCutoffsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBracketCutoffsFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated float bracket_cutoffs = 2 [json_name = "bracketCutoffs"];
  int bracket_cutoffs_size() const;
  private:
  int _internal_bracket_cutoffs_size() const;
  public:
  void clear_bracket_cutoffs();
  private:
  float _internal_bracket_cutoffs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bracket_cutoffs() const;
  void _internal_add_bracket_cutoffs(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bracket_cutoffs();
  public:
  float bracket_cutoffs(int index) const;
  void set_bracket_cutoffs(int index, float value);
  void add_bracket_cutoffs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bracket_cutoffs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bracket_cutoffs();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetBracketCutoffsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bracket_cutoffs_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetBracketCutoffsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetBracketCutoffsResponse) */ {
 public:
  inline SetBracketCutoffsResponse() : SetBracketCutoffsResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetBracketCutoffsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBracketCutoffsResponse(const SetBracketCutoffsResponse& from);
  SetBracketCutoffsResponse(SetBracketCutoffsResponse&& from) noexcept
    : SetBracketCutoffsResponse() {
    *this = ::std::move(from);
  }

  inline SetBracketCutoffsResponse& operator=(const SetBracketCutoffsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBracketCutoffsResponse& operator=(SetBracketCutoffsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBracketCutoffsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBracketCutoffsResponse* internal_default_instance() {
    return reinterpret_cast<const SetBracketCutoffsResponse*>(
               &_SetBracketCutoffsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(SetBracketCutoffsResponse& a, SetBracketCutoffsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBracketCutoffsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBracketCutoffsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBracketCutoffsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBracketCutoffsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetBracketCutoffsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetBracketCutoffsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetBracketCutoffsResponse";
  }
  protected:
  explicit SetBracketCutoffsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetBracketCutoffsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetBracketRatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetBracketRatesRequest) */ {
 public:
  inline GetBracketRatesRequest() : GetBracketRatesRequest(nullptr) {}
  ~GetBracketRatesRequest() override;
  explicit PROTOBUF_CONSTEXPR GetBracketRatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBracketRatesRequest(const GetBracketRatesRequest& from);
  GetBracketRatesRequest(GetBracketRatesRequest&& from) noexcept
    : GetBracketRatesRequest() {
    *this = ::std::move(from);
  }

  inline GetBracketRatesRequest& operator=(const GetBracketRatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBracketRatesRequest& operator=(GetBracketRatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBracketRatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBracketRatesRequest* internal_default_instance() {
    return reinterpret_cast<const GetBracketRatesRequest*>(
               &_GetBracketRatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GetBracketRatesRequest& a, GetBracketRatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBracketRatesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBracketRatesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBracketRatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBracketRatesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBracketRatesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBracketRatesRequest& from) {
    GetBracketRatesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBracketRatesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetBracketRatesRequest";
  }
  protected:
  explicit GetBracketRatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetBracketRatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetBracketRatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetBracketRatesResponse) */ {
 public:
  inline GetBracketRatesResponse() : GetBracketRatesResponse(nullptr) {}
  ~GetBracketRatesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetBracketRatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBracketRatesResponse(const GetBracketRatesResponse& from);
  GetBracketRatesResponse(GetBracketRatesResponse&& from) noexcept
    : GetBracketRatesResponse() {
    *this = ::std::move(from);
  }

  inline GetBracketRatesResponse& operator=(const GetBracketRatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBracketRatesResponse& operator=(GetBracketRatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBracketRatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBracketRatesResponse* internal_default_instance() {
    return reinterpret_cast<const GetBracketRatesResponse*>(
               &_GetBracketRatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GetBracketRatesResponse& a, GetBracketRatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBracketRatesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBracketRatesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetBracketRatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetBracketRatesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetBracketRatesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetBracketRatesResponse& from) {
    GetBracketRatesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBracketRatesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetBracketRatesResponse";
  }
  protected:
  explicit GetBracketRatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBracketRatesFieldNumber = 1,
  };
  // repeated float bracket_rates = 1 [json_name = "bracketRates"];
  int bracket_rates_size() const;
  private:
  int _internal_bracket_rates_size() const;
  public:
  void clear_bracket_rates();
  private:
  float _internal_bracket_rates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bracket_rates() const;
  void _internal_add_bracket_rates(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bracket_rates();
  public:
  float bracket_rates(int index) const;
  void set_bracket_rates(int index, float value);
  void add_bracket_rates(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bracket_rates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bracket_rates();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetBracketRatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bracket_rates_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetBracketRatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetBracketRatesRequest) */ {
 public:
  inline SetBracketRatesRequest() : SetBracketRatesRequest(nullptr) {}
  ~SetBracketRatesRequest() override;
  explicit PROTOBUF_CONSTEXPR SetBracketRatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBracketRatesRequest(const SetBracketRatesRequest& from);
  SetBracketRatesRequest(SetBracketRatesRequest&& from) noexcept
    : SetBracketRatesRequest() {
    *this = ::std::move(from);
  }

  inline SetBracketRatesRequest& operator=(const SetBracketRatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBracketRatesRequest& operator=(SetBracketRatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBracketRatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBracketRatesRequest* internal_default_instance() {
    return reinterpret_cast<const SetBracketRatesRequest*>(
               &_SetBracketRatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SetBracketRatesRequest& a, SetBracketRatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBracketRatesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBracketRatesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBracketRatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBracketRatesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetBracketRatesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetBracketRatesRequest& from) {
    SetBracketRatesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBracketRatesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetBracketRatesRequest";
  }
  protected:
  explicit SetBracketRatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBracketRatesFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated float bracket_rates = 2 [json_name = "bracketRates"];
  int bracket_rates_size() const;
  private:
  int _internal_bracket_rates_size() const;
  public:
  void clear_bracket_rates();
  private:
  float _internal_bracket_rates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bracket_rates() const;
  void _internal_add_bracket_rates(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bracket_rates();
  public:
  float bracket_rates(int index) const;
  void set_bracket_rates(int index, float value);
  void add_bracket_rates(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bracket_rates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bracket_rates();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetBracketRatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bracket_rates_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetBracketRatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetBracketRatesResponse) */ {
 public:
  inline SetBracketRatesResponse() : SetBracketRatesResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetBracketRatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBracketRatesResponse(const SetBracketRatesResponse& from);
  SetBracketRatesResponse(SetBracketRatesResponse&& from) noexcept
    : SetBracketRatesResponse() {
    *this = ::std::move(from);
  }

  inline SetBracketRatesResponse& operator=(const SetBracketRatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBracketRatesResponse& operator=(SetBracketRatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBracketRatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBracketRatesResponse* internal_default_instance() {
    return reinterpret_cast<const SetBracketRatesResponse*>(
               &_SetBracketRatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(SetBracketRatesResponse& a, SetBracketRatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBracketRatesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBracketRatesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetBracketRatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetBracketRatesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetBracketRatesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetBracketRatesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetBracketRatesResponse";
  }
  protected:
  explicit SetBracketRatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetBracketRatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateTaxesDueRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateTaxesDueRequest) */ {
 public:
  inline CalculateTaxesDueRequest() : CalculateTaxesDueRequest(nullptr) {}
  ~CalculateTaxesDueRequest() override;
  explicit PROTOBUF_CONSTEXPR CalculateTaxesDueRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateTaxesDueRequest(const CalculateTaxesDueRequest& from);
  CalculateTaxesDueRequest(CalculateTaxesDueRequest&& from) noexcept
    : CalculateTaxesDueRequest() {
    *this = ::std::move(from);
  }

  inline CalculateTaxesDueRequest& operator=(const CalculateTaxesDueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateTaxesDueRequest& operator=(CalculateTaxesDueRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateTaxesDueRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateTaxesDueRequest* internal_default_instance() {
    return reinterpret_cast<const CalculateTaxesDueRequest*>(
               &_CalculateTaxesDueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CalculateTaxesDueRequest& a, CalculateTaxesDueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateTaxesDueRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateTaxesDueRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateTaxesDueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateTaxesDueRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateTaxesDueRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateTaxesDueRequest& from) {
    CalculateTaxesDueRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateTaxesDueRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateTaxesDueRequest";
  }
  protected:
  explicit CalculateTaxesDueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdsFieldNumber = 2,
    kIncomesFieldNumber = 3,
    kGovernmentIdFieldNumber = 1,
    kEnableRedistributionFieldNumber = 4,
  };
  // repeated int32 agent_ids = 2 [json_name = "agentIds"];
  int agent_ids_size() const;
  private:
  int _internal_agent_ids_size() const;
  public:
  void clear_agent_ids();
  private:
  int32_t _internal_agent_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_agent_ids() const;
  void _internal_add_agent_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_agent_ids();
  public:
  int32_t agent_ids(int index) const;
  void set_agent_ids(int index, int32_t value);
  void add_agent_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      agent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_agent_ids();

  // repeated float incomes = 3 [json_name = "incomes"];
  int incomes_size() const;
  private:
  int _internal_incomes_size() const;
  public:
  void clear_incomes();
  private:
  float _internal_incomes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_incomes() const;
  void _internal_add_incomes(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_incomes();
  public:
  float incomes(int index) const;
  void set_incomes(int index, float value);
  void add_incomes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      incomes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_incomes();

  // int32 government_id = 1 [json_name = "governmentId"];
  void clear_government_id();
  int32_t government_id() const;
  void set_government_id(int32_t value);
  private:
  int32_t _internal_government_id() const;
  void _internal_set_government_id(int32_t value);
  public:

  // bool enable_redistribution = 4 [json_name = "enableRedistribution"];
  void clear_enable_redistribution();
  bool enable_redistribution() const;
  void set_enable_redistribution(bool value);
  private:
  bool _internal_enable_redistribution() const;
  void _internal_set_enable_redistribution(bool value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateTaxesDueRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > agent_ids_;
    mutable std::atomic<int> _agent_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > incomes_;
    int32_t government_id_;
    bool enable_redistribution_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateTaxesDueResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateTaxesDueResponse) */ {
 public:
  inline CalculateTaxesDueResponse() : CalculateTaxesDueResponse(nullptr) {}
  ~CalculateTaxesDueResponse() override;
  explicit PROTOBUF_CONSTEXPR CalculateTaxesDueResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateTaxesDueResponse(const CalculateTaxesDueResponse& from);
  CalculateTaxesDueResponse(CalculateTaxesDueResponse&& from) noexcept
    : CalculateTaxesDueResponse() {
    *this = ::std::move(from);
  }

  inline CalculateTaxesDueResponse& operator=(const CalculateTaxesDueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateTaxesDueResponse& operator=(CalculateTaxesDueResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateTaxesDueResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateTaxesDueResponse* internal_default_instance() {
    return reinterpret_cast<const CalculateTaxesDueResponse*>(
               &_CalculateTaxesDueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CalculateTaxesDueResponse& a, CalculateTaxesDueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateTaxesDueResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateTaxesDueResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateTaxesDueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateTaxesDueResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateTaxesDueResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateTaxesDueResponse& from) {
    CalculateTaxesDueResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateTaxesDueResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateTaxesDueResponse";
  }
  protected:
  explicit CalculateTaxesDueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedIncomesFieldNumber = 2,
    kTaxesDueFieldNumber = 1,
  };
  // repeated float updated_incomes = 2 [json_name = "updatedIncomes"];
  int updated_incomes_size() const;
  private:
  int _internal_updated_incomes_size() const;
  public:
  void clear_updated_incomes();
  private:
  float _internal_updated_incomes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_updated_incomes() const;
  void _internal_add_updated_incomes(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_updated_incomes();
  public:
  float updated_incomes(int index) const;
  void set_updated_incomes(int index, float value);
  void add_updated_incomes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      updated_incomes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_updated_incomes();

  // float taxes_due = 1 [json_name = "taxesDue"];
  void clear_taxes_due();
  float taxes_due() const;
  void set_taxes_due(float value);
  private:
  float _internal_taxes_due() const;
  void _internal_set_taxes_due(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateTaxesDueResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > updated_incomes_;
    float taxes_due_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateConsumptionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateConsumptionRequest) */ {
 public:
  inline CalculateConsumptionRequest() : CalculateConsumptionRequest(nullptr) {}
  ~CalculateConsumptionRequest() override;
  explicit PROTOBUF_CONSTEXPR CalculateConsumptionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateConsumptionRequest(const CalculateConsumptionRequest& from);
  CalculateConsumptionRequest(CalculateConsumptionRequest&& from) noexcept
    : CalculateConsumptionRequest() {
    *this = ::std::move(from);
  }

  inline CalculateConsumptionRequest& operator=(const CalculateConsumptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateConsumptionRequest& operator=(CalculateConsumptionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateConsumptionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateConsumptionRequest* internal_default_instance() {
    return reinterpret_cast<const CalculateConsumptionRequest*>(
               &_CalculateConsumptionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CalculateConsumptionRequest& a, CalculateConsumptionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateConsumptionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateConsumptionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateConsumptionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateConsumptionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateConsumptionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateConsumptionRequest& from) {
    CalculateConsumptionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateConsumptionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateConsumptionRequest";
  }
  protected:
  explicit CalculateConsumptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirmIdsFieldNumber = 1,
    kDemandsFieldNumber = 3,
    kAgentIdFieldNumber = 2,
  };
  // repeated int32 firm_ids = 1 [json_name = "firmIds"];
  int firm_ids_size() const;
  private:
  int _internal_firm_ids_size() const;
  public:
  void clear_firm_ids();
  private:
  int32_t _internal_firm_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_firm_ids() const;
  void _internal_add_firm_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_firm_ids();
  public:
  int32_t firm_ids(int index) const;
  void set_firm_ids(int index, int32_t value);
  void add_firm_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      firm_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_firm_ids();

  // repeated int32 demands = 3 [json_name = "demands"];
  int demands_size() const;
  private:
  int _internal_demands_size() const;
  public:
  void clear_demands();
  private:
  int32_t _internal_demands(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_demands() const;
  void _internal_add_demands(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_demands();
  public:
  int32_t demands(int index) const;
  void set_demands(int index, int32_t value);
  void add_demands(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      demands() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_demands();

  // int32 agent_id = 2 [json_name = "agentId"];
  void clear_agent_id();
  int32_t agent_id() const;
  void set_agent_id(int32_t value);
  private:
  int32_t _internal_agent_id() const;
  void _internal_set_agent_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateConsumptionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > firm_ids_;
    mutable std::atomic<int> _firm_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > demands_;
    mutable std::atomic<int> _demands_cached_byte_size_;
    int32_t agent_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateConsumptionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateConsumptionResponse) */ {
 public:
  inline CalculateConsumptionResponse() : CalculateConsumptionResponse(nullptr) {}
  ~CalculateConsumptionResponse() override;
  explicit PROTOBUF_CONSTEXPR CalculateConsumptionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateConsumptionResponse(const CalculateConsumptionResponse& from);
  CalculateConsumptionResponse(CalculateConsumptionResponse&& from) noexcept
    : CalculateConsumptionResponse() {
    *this = ::std::move(from);
  }

  inline CalculateConsumptionResponse& operator=(const CalculateConsumptionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateConsumptionResponse& operator=(CalculateConsumptionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateConsumptionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateConsumptionResponse* internal_default_instance() {
    return reinterpret_cast<const CalculateConsumptionResponse*>(
               &_CalculateConsumptionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CalculateConsumptionResponse& a, CalculateConsumptionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateConsumptionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateConsumptionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateConsumptionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateConsumptionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateConsumptionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateConsumptionResponse& from) {
    CalculateConsumptionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateConsumptionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateConsumptionResponse";
  }
  protected:
  explicit CalculateConsumptionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActualConsumptionFieldNumber = 1,
  };
  // float actual_consumption = 1 [json_name = "actualConsumption"];
  void clear_actual_consumption();
  float actual_consumption() const;
  void set_actual_consumption(float value);
  private:
  float _internal_actual_consumption() const;
  void _internal_set_actual_consumption(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateConsumptionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float actual_consumption_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateInterestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateInterestRequest) */ {
 public:
  inline CalculateInterestRequest() : CalculateInterestRequest(nullptr) {}
  ~CalculateInterestRequest() override;
  explicit PROTOBUF_CONSTEXPR CalculateInterestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateInterestRequest(const CalculateInterestRequest& from);
  CalculateInterestRequest(CalculateInterestRequest&& from) noexcept
    : CalculateInterestRequest() {
    *this = ::std::move(from);
  }

  inline CalculateInterestRequest& operator=(const CalculateInterestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateInterestRequest& operator=(CalculateInterestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateInterestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateInterestRequest* internal_default_instance() {
    return reinterpret_cast<const CalculateInterestRequest*>(
               &_CalculateInterestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CalculateInterestRequest& a, CalculateInterestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateInterestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateInterestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateInterestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateInterestRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateInterestRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateInterestRequest& from) {
    CalculateInterestRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateInterestRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateInterestRequest";
  }
  protected:
  explicit CalculateInterestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdsFieldNumber = 2,
    kBankIdFieldNumber = 1,
  };
  // repeated int32 agent_ids = 2 [json_name = "agentIds"];
  int agent_ids_size() const;
  private:
  int _internal_agent_ids_size() const;
  public:
  void clear_agent_ids();
  private:
  int32_t _internal_agent_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_agent_ids() const;
  void _internal_add_agent_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_agent_ids();
  public:
  int32_t agent_ids(int index) const;
  void set_agent_ids(int index, int32_t value);
  void add_agent_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      agent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_agent_ids();

  // int32 bank_id = 1 [json_name = "bankId"];
  void clear_bank_id();
  int32_t bank_id() const;
  void set_bank_id(int32_t value);
  private:
  int32_t _internal_bank_id() const;
  void _internal_set_bank_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateInterestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > agent_ids_;
    mutable std::atomic<int> _agent_ids_cached_byte_size_;
    int32_t bank_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateInterestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateInterestResponse) */ {
 public:
  inline CalculateInterestResponse() : CalculateInterestResponse(nullptr) {}
  ~CalculateInterestResponse() override;
  explicit PROTOBUF_CONSTEXPR CalculateInterestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateInterestResponse(const CalculateInterestResponse& from);
  CalculateInterestResponse(CalculateInterestResponse&& from) noexcept
    : CalculateInterestResponse() {
    *this = ::std::move(from);
  }

  inline CalculateInterestResponse& operator=(const CalculateInterestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateInterestResponse& operator=(CalculateInterestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateInterestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateInterestResponse* internal_default_instance() {
    return reinterpret_cast<const CalculateInterestResponse*>(
               &_CalculateInterestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CalculateInterestResponse& a, CalculateInterestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateInterestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateInterestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateInterestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateInterestResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateInterestResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateInterestResponse& from) {
    CalculateInterestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateInterestResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateInterestResponse";
  }
  protected:
  explicit CalculateInterestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedCurrenciesFieldNumber = 2,
    kTotalInterestFieldNumber = 1,
  };
  // repeated float updated_currencies = 2 [json_name = "updatedCurrencies"];
  int updated_currencies_size() const;
  private:
  int _internal_updated_currencies_size() const;
  public:
  void clear_updated_currencies();
  private:
  float _internal_updated_currencies(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_updated_currencies() const;
  void _internal_add_updated_currencies(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_updated_currencies();
  public:
  float updated_currencies(int index) const;
  void set_updated_currencies(int index, float value);
  void add_updated_currencies(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      updated_currencies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_updated_currencies();

  // float total_interest = 1 [json_name = "totalInterest"];
  void clear_total_interest();
  float total_interest() const;
  void set_total_interest(float value);
  private:
  float _internal_total_interest() const;
  void _internal_set_total_interest(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateInterestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > updated_currencies_;
    float total_interest_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SaveEconomyEntitiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SaveEconomyEntitiesRequest) */ {
 public:
  inline SaveEconomyEntitiesRequest() : SaveEconomyEntitiesRequest(nullptr) {}
  ~SaveEconomyEntitiesRequest() override;
  explicit PROTOBUF_CONSTEXPR SaveEconomyEntitiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveEconomyEntitiesRequest(const SaveEconomyEntitiesRequest& from);
  SaveEconomyEntitiesRequest(SaveEconomyEntitiesRequest&& from) noexcept
    : SaveEconomyEntitiesRequest() {
    *this = ::std::move(from);
  }

  inline SaveEconomyEntitiesRequest& operator=(const SaveEconomyEntitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveEconomyEntitiesRequest& operator=(SaveEconomyEntitiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveEconomyEntitiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveEconomyEntitiesRequest* internal_default_instance() {
    return reinterpret_cast<const SaveEconomyEntitiesRequest*>(
               &_SaveEconomyEntitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(SaveEconomyEntitiesRequest& a, SaveEconomyEntitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveEconomyEntitiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveEconomyEntitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveEconomyEntitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SaveEconomyEntitiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaveEconomyEntitiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SaveEconomyEntitiesRequest& from) {
    SaveEconomyEntitiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveEconomyEntitiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SaveEconomyEntitiesRequest";
  }
  protected:
  explicit SaveEconomyEntitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
  };
  // string file_path = 1 [json_name = "filePath"];
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SaveEconomyEntitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SaveEconomyEntitiesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SaveEconomyEntitiesResponse) */ {
 public:
  inline SaveEconomyEntitiesResponse() : SaveEconomyEntitiesResponse(nullptr) {}
  ~SaveEconomyEntitiesResponse() override;
  explicit PROTOBUF_CONSTEXPR SaveEconomyEntitiesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveEconomyEntitiesResponse(const SaveEconomyEntitiesResponse& from);
  SaveEconomyEntitiesResponse(SaveEconomyEntitiesResponse&& from) noexcept
    : SaveEconomyEntitiesResponse() {
    *this = ::std::move(from);
  }

  inline SaveEconomyEntitiesResponse& operator=(const SaveEconomyEntitiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveEconomyEntitiesResponse& operator=(SaveEconomyEntitiesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveEconomyEntitiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveEconomyEntitiesResponse* internal_default_instance() {
    return reinterpret_cast<const SaveEconomyEntitiesResponse*>(
               &_SaveEconomyEntitiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(SaveEconomyEntitiesResponse& a, SaveEconomyEntitiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveEconomyEntitiesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveEconomyEntitiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveEconomyEntitiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SaveEconomyEntitiesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaveEconomyEntitiesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SaveEconomyEntitiesResponse& from) {
    SaveEconomyEntitiesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveEconomyEntitiesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SaveEconomyEntitiesResponse";
  }
  protected:
  explicit SaveEconomyEntitiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdsFieldNumber = 1,
    kAgentIdsFieldNumber = 2,
  };
  // repeated int32 org_ids = 1 [json_name = "orgIds"];
  int org_ids_size() const;
  private:
  int _internal_org_ids_size() const;
  public:
  void clear_org_ids();
  private:
  int32_t _internal_org_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_org_ids() const;
  void _internal_add_org_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_org_ids();
  public:
  int32_t org_ids(int index) const;
  void set_org_ids(int index, int32_t value);
  void add_org_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      org_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_org_ids();

  // repeated int32 agent_ids = 2 [json_name = "agentIds"];
  int agent_ids_size() const;
  private:
  int _internal_agent_ids_size() const;
  public:
  void clear_agent_ids();
  private:
  int32_t _internal_agent_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_agent_ids() const;
  void _internal_add_agent_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_agent_ids();
  public:
  int32_t agent_ids(int index) const;
  void set_agent_ids(int index, int32_t value);
  void add_agent_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      agent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_agent_ids();

  // @@protoc_insertion_point(class_scope:city.economy.v2.SaveEconomyEntitiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > org_ids_;
    mutable std::atomic<int> _org_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > agent_ids_;
    mutable std::atomic<int> _agent_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoadEconomyEntitiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.LoadEconomyEntitiesRequest) */ {
 public:
  inline LoadEconomyEntitiesRequest() : LoadEconomyEntitiesRequest(nullptr) {}
  ~LoadEconomyEntitiesRequest() override;
  explicit PROTOBUF_CONSTEXPR LoadEconomyEntitiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadEconomyEntitiesRequest(const LoadEconomyEntitiesRequest& from);
  LoadEconomyEntitiesRequest(LoadEconomyEntitiesRequest&& from) noexcept
    : LoadEconomyEntitiesRequest() {
    *this = ::std::move(from);
  }

  inline LoadEconomyEntitiesRequest& operator=(const LoadEconomyEntitiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadEconomyEntitiesRequest& operator=(LoadEconomyEntitiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadEconomyEntitiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadEconomyEntitiesRequest* internal_default_instance() {
    return reinterpret_cast<const LoadEconomyEntitiesRequest*>(
               &_LoadEconomyEntitiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(LoadEconomyEntitiesRequest& a, LoadEconomyEntitiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadEconomyEntitiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadEconomyEntitiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadEconomyEntitiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadEconomyEntitiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadEconomyEntitiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadEconomyEntitiesRequest& from) {
    LoadEconomyEntitiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadEconomyEntitiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.LoadEconomyEntitiesRequest";
  }
  protected:
  explicit LoadEconomyEntitiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
  };
  // string file_path = 1 [json_name = "filePath"];
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.LoadEconomyEntitiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LoadEconomyEntitiesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.LoadEconomyEntitiesResponse) */ {
 public:
  inline LoadEconomyEntitiesResponse() : LoadEconomyEntitiesResponse(nullptr) {}
  ~LoadEconomyEntitiesResponse() override;
  explicit PROTOBUF_CONSTEXPR LoadEconomyEntitiesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadEconomyEntitiesResponse(const LoadEconomyEntitiesResponse& from);
  LoadEconomyEntitiesResponse(LoadEconomyEntitiesResponse&& from) noexcept
    : LoadEconomyEntitiesResponse() {
    *this = ::std::move(from);
  }

  inline LoadEconomyEntitiesResponse& operator=(const LoadEconomyEntitiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadEconomyEntitiesResponse& operator=(LoadEconomyEntitiesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadEconomyEntitiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadEconomyEntitiesResponse* internal_default_instance() {
    return reinterpret_cast<const LoadEconomyEntitiesResponse*>(
               &_LoadEconomyEntitiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(LoadEconomyEntitiesResponse& a, LoadEconomyEntitiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadEconomyEntitiesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadEconomyEntitiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadEconomyEntitiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadEconomyEntitiesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadEconomyEntitiesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoadEconomyEntitiesResponse& from) {
    LoadEconomyEntitiesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadEconomyEntitiesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.LoadEconomyEntitiesResponse";
  }
  protected:
  explicit LoadEconomyEntitiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdsFieldNumber = 1,
    kAgentIdsFieldNumber = 2,
  };
  // repeated int32 org_ids = 1 [json_name = "orgIds"];
  int org_ids_size() const;
  private:
  int _internal_org_ids_size() const;
  public:
  void clear_org_ids();
  private:
  int32_t _internal_org_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_org_ids() const;
  void _internal_add_org_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_org_ids();
  public:
  int32_t org_ids(int index) const;
  void set_org_ids(int index, int32_t value);
  void add_org_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      org_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_org_ids();

  // repeated int32 agent_ids = 2 [json_name = "agentIds"];
  int agent_ids_size() const;
  private:
  int _internal_agent_ids_size() const;
  public:
  void clear_agent_ids();
  private:
  int32_t _internal_agent_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_agent_ids() const;
  void _internal_add_agent_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_agent_ids();
  public:
  int32_t agent_ids(int index) const;
  void set_agent_ids(int index, int32_t value);
  void add_agent_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      agent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_agent_ids();

  // @@protoc_insertion_point(class_scope:city.economy.v2.LoadEconomyEntitiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > org_ids_;
    mutable std::atomic<int> _org_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > agent_ids_;
    mutable std::atomic<int> _agent_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetConsumptionCurrencyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetConsumptionCurrencyRequest) */ {
 public:
  inline GetConsumptionCurrencyRequest() : GetConsumptionCurrencyRequest(nullptr) {}
  ~GetConsumptionCurrencyRequest() override;
  explicit PROTOBUF_CONSTEXPR GetConsumptionCurrencyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConsumptionCurrencyRequest(const GetConsumptionCurrencyRequest& from);
  GetConsumptionCurrencyRequest(GetConsumptionCurrencyRequest&& from) noexcept
    : GetConsumptionCurrencyRequest() {
    *this = ::std::move(from);
  }

  inline GetConsumptionCurrencyRequest& operator=(const GetConsumptionCurrencyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConsumptionCurrencyRequest& operator=(GetConsumptionCurrencyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConsumptionCurrencyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConsumptionCurrencyRequest* internal_default_instance() {
    return reinterpret_cast<const GetConsumptionCurrencyRequest*>(
               &_GetConsumptionCurrencyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(GetConsumptionCurrencyRequest& a, GetConsumptionCurrencyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConsumptionCurrencyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConsumptionCurrencyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConsumptionCurrencyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConsumptionCurrencyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConsumptionCurrencyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetConsumptionCurrencyRequest& from) {
    GetConsumptionCurrencyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConsumptionCurrencyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetConsumptionCurrencyRequest";
  }
  protected:
  explicit GetConsumptionCurrencyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetConsumptionCurrencyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetConsumptionCurrencyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetConsumptionCurrencyResponse) */ {
 public:
  inline GetConsumptionCurrencyResponse() : GetConsumptionCurrencyResponse(nullptr) {}
  ~GetConsumptionCurrencyResponse() override;
  explicit PROTOBUF_CONSTEXPR GetConsumptionCurrencyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConsumptionCurrencyResponse(const GetConsumptionCurrencyResponse& from);
  GetConsumptionCurrencyResponse(GetConsumptionCurrencyResponse&& from) noexcept
    : GetConsumptionCurrencyResponse() {
    *this = ::std::move(from);
  }

  inline GetConsumptionCurrencyResponse& operator=(const GetConsumptionCurrencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConsumptionCurrencyResponse& operator=(GetConsumptionCurrencyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConsumptionCurrencyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConsumptionCurrencyResponse* internal_default_instance() {
    return reinterpret_cast<const GetConsumptionCurrencyResponse*>(
               &_GetConsumptionCurrencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(GetConsumptionCurrencyResponse& a, GetConsumptionCurrencyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConsumptionCurrencyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConsumptionCurrencyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConsumptionCurrencyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConsumptionCurrencyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConsumptionCurrencyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetConsumptionCurrencyResponse& from) {
    GetConsumptionCurrencyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConsumptionCurrencyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetConsumptionCurrencyResponse";
  }
  protected:
  explicit GetConsumptionCurrencyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumptionCurrencyFieldNumber = 1,
  };
  // repeated float consumption_currency = 1 [json_name = "consumptionCurrency"];
  int consumption_currency_size() const;
  private:
  int _internal_consumption_currency_size() const;
  public:
  void clear_consumption_currency();
  private:
  float _internal_consumption_currency(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_consumption_currency() const;
  void _internal_add_consumption_currency(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_consumption_currency();
  public:
  float consumption_currency(int index) const;
  void set_consumption_currency(int index, float value);
  void add_consumption_currency(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      consumption_currency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_consumption_currency();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetConsumptionCurrencyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > consumption_currency_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetConsumptionCurrencyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetConsumptionCurrencyRequest) */ {
 public:
  inline SetConsumptionCurrencyRequest() : SetConsumptionCurrencyRequest(nullptr) {}
  ~SetConsumptionCurrencyRequest() override;
  explicit PROTOBUF_CONSTEXPR SetConsumptionCurrencyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetConsumptionCurrencyRequest(const SetConsumptionCurrencyRequest& from);
  SetConsumptionCurrencyRequest(SetConsumptionCurrencyRequest&& from) noexcept
    : SetConsumptionCurrencyRequest() {
    *this = ::std::move(from);
  }

  inline SetConsumptionCurrencyRequest& operator=(const SetConsumptionCurrencyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetConsumptionCurrencyRequest& operator=(SetConsumptionCurrencyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetConsumptionCurrencyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetConsumptionCurrencyRequest* internal_default_instance() {
    return reinterpret_cast<const SetConsumptionCurrencyRequest*>(
               &_SetConsumptionCurrencyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(SetConsumptionCurrencyRequest& a, SetConsumptionCurrencyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetConsumptionCurrencyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetConsumptionCurrencyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetConsumptionCurrencyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetConsumptionCurrencyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetConsumptionCurrencyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetConsumptionCurrencyRequest& from) {
    SetConsumptionCurrencyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetConsumptionCurrencyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetConsumptionCurrencyRequest";
  }
  protected:
  explicit SetConsumptionCurrencyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumptionCurrencyFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated float consumption_currency = 2 [json_name = "consumptionCurrency"];
  int consumption_currency_size() const;
  private:
  int _internal_consumption_currency_size() const;
  public:
  void clear_consumption_currency();
  private:
  float _internal_consumption_currency(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_consumption_currency() const;
  void _internal_add_consumption_currency(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_consumption_currency();
  public:
  float consumption_currency(int index) const;
  void set_consumption_currency(int index, float value);
  void add_consumption_currency(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      consumption_currency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_consumption_currency();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetConsumptionCurrencyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > consumption_currency_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetConsumptionCurrencyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetConsumptionCurrencyResponse) */ {
 public:
  inline SetConsumptionCurrencyResponse() : SetConsumptionCurrencyResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetConsumptionCurrencyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetConsumptionCurrencyResponse(const SetConsumptionCurrencyResponse& from);
  SetConsumptionCurrencyResponse(SetConsumptionCurrencyResponse&& from) noexcept
    : SetConsumptionCurrencyResponse() {
    *this = ::std::move(from);
  }

  inline SetConsumptionCurrencyResponse& operator=(const SetConsumptionCurrencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetConsumptionCurrencyResponse& operator=(SetConsumptionCurrencyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetConsumptionCurrencyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetConsumptionCurrencyResponse* internal_default_instance() {
    return reinterpret_cast<const SetConsumptionCurrencyResponse*>(
               &_SetConsumptionCurrencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(SetConsumptionCurrencyResponse& a, SetConsumptionCurrencyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetConsumptionCurrencyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetConsumptionCurrencyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetConsumptionCurrencyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetConsumptionCurrencyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetConsumptionCurrencyResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetConsumptionCurrencyResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetConsumptionCurrencyResponse";
  }
  protected:
  explicit SetConsumptionCurrencyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetConsumptionCurrencyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetConsumptionPropensityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetConsumptionPropensityRequest) */ {
 public:
  inline GetConsumptionPropensityRequest() : GetConsumptionPropensityRequest(nullptr) {}
  ~GetConsumptionPropensityRequest() override;
  explicit PROTOBUF_CONSTEXPR GetConsumptionPropensityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConsumptionPropensityRequest(const GetConsumptionPropensityRequest& from);
  GetConsumptionPropensityRequest(GetConsumptionPropensityRequest&& from) noexcept
    : GetConsumptionPropensityRequest() {
    *this = ::std::move(from);
  }

  inline GetConsumptionPropensityRequest& operator=(const GetConsumptionPropensityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConsumptionPropensityRequest& operator=(GetConsumptionPropensityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConsumptionPropensityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConsumptionPropensityRequest* internal_default_instance() {
    return reinterpret_cast<const GetConsumptionPropensityRequest*>(
               &_GetConsumptionPropensityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(GetConsumptionPropensityRequest& a, GetConsumptionPropensityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConsumptionPropensityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConsumptionPropensityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConsumptionPropensityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConsumptionPropensityRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConsumptionPropensityRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetConsumptionPropensityRequest& from) {
    GetConsumptionPropensityRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConsumptionPropensityRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetConsumptionPropensityRequest";
  }
  protected:
  explicit GetConsumptionPropensityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetConsumptionPropensityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetConsumptionPropensityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetConsumptionPropensityResponse) */ {
 public:
  inline GetConsumptionPropensityResponse() : GetConsumptionPropensityResponse(nullptr) {}
  ~GetConsumptionPropensityResponse() override;
  explicit PROTOBUF_CONSTEXPR GetConsumptionPropensityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConsumptionPropensityResponse(const GetConsumptionPropensityResponse& from);
  GetConsumptionPropensityResponse(GetConsumptionPropensityResponse&& from) noexcept
    : GetConsumptionPropensityResponse() {
    *this = ::std::move(from);
  }

  inline GetConsumptionPropensityResponse& operator=(const GetConsumptionPropensityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConsumptionPropensityResponse& operator=(GetConsumptionPropensityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConsumptionPropensityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConsumptionPropensityResponse* internal_default_instance() {
    return reinterpret_cast<const GetConsumptionPropensityResponse*>(
               &_GetConsumptionPropensityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(GetConsumptionPropensityResponse& a, GetConsumptionPropensityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConsumptionPropensityResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConsumptionPropensityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConsumptionPropensityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConsumptionPropensityResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConsumptionPropensityResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetConsumptionPropensityResponse& from) {
    GetConsumptionPropensityResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConsumptionPropensityResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetConsumptionPropensityResponse";
  }
  protected:
  explicit GetConsumptionPropensityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumptionPropensityFieldNumber = 1,
  };
  // repeated float consumption_propensity = 1 [json_name = "consumptionPropensity"];
  int consumption_propensity_size() const;
  private:
  int _internal_consumption_propensity_size() const;
  public:
  void clear_consumption_propensity();
  private:
  float _internal_consumption_propensity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_consumption_propensity() const;
  void _internal_add_consumption_propensity(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_consumption_propensity();
  public:
  float consumption_propensity(int index) const;
  void set_consumption_propensity(int index, float value);
  void add_consumption_propensity(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      consumption_propensity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_consumption_propensity();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetConsumptionPropensityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > consumption_propensity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetConsumptionPropensityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetConsumptionPropensityRequest) */ {
 public:
  inline SetConsumptionPropensityRequest() : SetConsumptionPropensityRequest(nullptr) {}
  ~SetConsumptionPropensityRequest() override;
  explicit PROTOBUF_CONSTEXPR SetConsumptionPropensityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetConsumptionPropensityRequest(const SetConsumptionPropensityRequest& from);
  SetConsumptionPropensityRequest(SetConsumptionPropensityRequest&& from) noexcept
    : SetConsumptionPropensityRequest() {
    *this = ::std::move(from);
  }

  inline SetConsumptionPropensityRequest& operator=(const SetConsumptionPropensityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetConsumptionPropensityRequest& operator=(SetConsumptionPropensityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetConsumptionPropensityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetConsumptionPropensityRequest* internal_default_instance() {
    return reinterpret_cast<const SetConsumptionPropensityRequest*>(
               &_SetConsumptionPropensityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(SetConsumptionPropensityRequest& a, SetConsumptionPropensityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetConsumptionPropensityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetConsumptionPropensityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetConsumptionPropensityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetConsumptionPropensityRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetConsumptionPropensityRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetConsumptionPropensityRequest& from) {
    SetConsumptionPropensityRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetConsumptionPropensityRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetConsumptionPropensityRequest";
  }
  protected:
  explicit SetConsumptionPropensityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumptionPropensityFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated float consumption_propensity = 2 [json_name = "consumptionPropensity"];
  int consumption_propensity_size() const;
  private:
  int _internal_consumption_propensity_size() const;
  public:
  void clear_consumption_propensity();
  private:
  float _internal_consumption_propensity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_consumption_propensity() const;
  void _internal_add_consumption_propensity(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_consumption_propensity();
  public:
  float consumption_propensity(int index) const;
  void set_consumption_propensity(int index, float value);
  void add_consumption_propensity(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      consumption_propensity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_consumption_propensity();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetConsumptionPropensityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > consumption_propensity_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetConsumptionPropensityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetConsumptionPropensityResponse) */ {
 public:
  inline SetConsumptionPropensityResponse() : SetConsumptionPropensityResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetConsumptionPropensityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetConsumptionPropensityResponse(const SetConsumptionPropensityResponse& from);
  SetConsumptionPropensityResponse(SetConsumptionPropensityResponse&& from) noexcept
    : SetConsumptionPropensityResponse() {
    *this = ::std::move(from);
  }

  inline SetConsumptionPropensityResponse& operator=(const SetConsumptionPropensityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetConsumptionPropensityResponse& operator=(SetConsumptionPropensityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetConsumptionPropensityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetConsumptionPropensityResponse* internal_default_instance() {
    return reinterpret_cast<const SetConsumptionPropensityResponse*>(
               &_SetConsumptionPropensityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(SetConsumptionPropensityResponse& a, SetConsumptionPropensityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetConsumptionPropensityResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetConsumptionPropensityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetConsumptionPropensityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetConsumptionPropensityResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetConsumptionPropensityResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetConsumptionPropensityResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetConsumptionPropensityResponse";
  }
  protected:
  explicit SetConsumptionPropensityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetConsumptionPropensityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetIncomeCurrencyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetIncomeCurrencyRequest) */ {
 public:
  inline GetIncomeCurrencyRequest() : GetIncomeCurrencyRequest(nullptr) {}
  ~GetIncomeCurrencyRequest() override;
  explicit PROTOBUF_CONSTEXPR GetIncomeCurrencyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIncomeCurrencyRequest(const GetIncomeCurrencyRequest& from);
  GetIncomeCurrencyRequest(GetIncomeCurrencyRequest&& from) noexcept
    : GetIncomeCurrencyRequest() {
    *this = ::std::move(from);
  }

  inline GetIncomeCurrencyRequest& operator=(const GetIncomeCurrencyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIncomeCurrencyRequest& operator=(GetIncomeCurrencyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIncomeCurrencyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIncomeCurrencyRequest* internal_default_instance() {
    return reinterpret_cast<const GetIncomeCurrencyRequest*>(
               &_GetIncomeCurrencyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(GetIncomeCurrencyRequest& a, GetIncomeCurrencyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIncomeCurrencyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIncomeCurrencyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIncomeCurrencyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIncomeCurrencyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIncomeCurrencyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIncomeCurrencyRequest& from) {
    GetIncomeCurrencyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIncomeCurrencyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetIncomeCurrencyRequest";
  }
  protected:
  explicit GetIncomeCurrencyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetIncomeCurrencyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetIncomeCurrencyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetIncomeCurrencyResponse) */ {
 public:
  inline GetIncomeCurrencyResponse() : GetIncomeCurrencyResponse(nullptr) {}
  ~GetIncomeCurrencyResponse() override;
  explicit PROTOBUF_CONSTEXPR GetIncomeCurrencyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIncomeCurrencyResponse(const GetIncomeCurrencyResponse& from);
  GetIncomeCurrencyResponse(GetIncomeCurrencyResponse&& from) noexcept
    : GetIncomeCurrencyResponse() {
    *this = ::std::move(from);
  }

  inline GetIncomeCurrencyResponse& operator=(const GetIncomeCurrencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIncomeCurrencyResponse& operator=(GetIncomeCurrencyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIncomeCurrencyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIncomeCurrencyResponse* internal_default_instance() {
    return reinterpret_cast<const GetIncomeCurrencyResponse*>(
               &_GetIncomeCurrencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(GetIncomeCurrencyResponse& a, GetIncomeCurrencyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIncomeCurrencyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIncomeCurrencyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIncomeCurrencyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIncomeCurrencyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIncomeCurrencyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIncomeCurrencyResponse& from) {
    GetIncomeCurrencyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIncomeCurrencyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetIncomeCurrencyResponse";
  }
  protected:
  explicit GetIncomeCurrencyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncomeCurrencyFieldNumber = 1,
  };
  // repeated float income_currency = 1 [json_name = "incomeCurrency"];
  int income_currency_size() const;
  private:
  int _internal_income_currency_size() const;
  public:
  void clear_income_currency();
  private:
  float _internal_income_currency(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_income_currency() const;
  void _internal_add_income_currency(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_income_currency();
  public:
  float income_currency(int index) const;
  void set_income_currency(int index, float value);
  void add_income_currency(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      income_currency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_income_currency();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetIncomeCurrencyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > income_currency_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetIncomeCurrencyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetIncomeCurrencyRequest) */ {
 public:
  inline SetIncomeCurrencyRequest() : SetIncomeCurrencyRequest(nullptr) {}
  ~SetIncomeCurrencyRequest() override;
  explicit PROTOBUF_CONSTEXPR SetIncomeCurrencyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetIncomeCurrencyRequest(const SetIncomeCurrencyRequest& from);
  SetIncomeCurrencyRequest(SetIncomeCurrencyRequest&& from) noexcept
    : SetIncomeCurrencyRequest() {
    *this = ::std::move(from);
  }

  inline SetIncomeCurrencyRequest& operator=(const SetIncomeCurrencyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetIncomeCurrencyRequest& operator=(SetIncomeCurrencyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetIncomeCurrencyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetIncomeCurrencyRequest* internal_default_instance() {
    return reinterpret_cast<const SetIncomeCurrencyRequest*>(
               &_SetIncomeCurrencyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(SetIncomeCurrencyRequest& a, SetIncomeCurrencyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetIncomeCurrencyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetIncomeCurrencyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetIncomeCurrencyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetIncomeCurrencyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetIncomeCurrencyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetIncomeCurrencyRequest& from) {
    SetIncomeCurrencyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetIncomeCurrencyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetIncomeCurrencyRequest";
  }
  protected:
  explicit SetIncomeCurrencyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncomeCurrencyFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated float income_currency = 2 [json_name = "incomeCurrency"];
  int income_currency_size() const;
  private:
  int _internal_income_currency_size() const;
  public:
  void clear_income_currency();
  private:
  float _internal_income_currency(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_income_currency() const;
  void _internal_add_income_currency(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_income_currency();
  public:
  float income_currency(int index) const;
  void set_income_currency(int index, float value);
  void add_income_currency(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      income_currency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_income_currency();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetIncomeCurrencyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > income_currency_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetIncomeCurrencyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetIncomeCurrencyResponse) */ {
 public:
  inline SetIncomeCurrencyResponse() : SetIncomeCurrencyResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetIncomeCurrencyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetIncomeCurrencyResponse(const SetIncomeCurrencyResponse& from);
  SetIncomeCurrencyResponse(SetIncomeCurrencyResponse&& from) noexcept
    : SetIncomeCurrencyResponse() {
    *this = ::std::move(from);
  }

  inline SetIncomeCurrencyResponse& operator=(const SetIncomeCurrencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetIncomeCurrencyResponse& operator=(SetIncomeCurrencyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetIncomeCurrencyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetIncomeCurrencyResponse* internal_default_instance() {
    return reinterpret_cast<const SetIncomeCurrencyResponse*>(
               &_SetIncomeCurrencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(SetIncomeCurrencyResponse& a, SetIncomeCurrencyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetIncomeCurrencyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetIncomeCurrencyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetIncomeCurrencyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetIncomeCurrencyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetIncomeCurrencyResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetIncomeCurrencyResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetIncomeCurrencyResponse";
  }
  protected:
  explicit SetIncomeCurrencyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetIncomeCurrencyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDepressionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetDepressionRequest) */ {
 public:
  inline GetDepressionRequest() : GetDepressionRequest(nullptr) {}
  ~GetDepressionRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDepressionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDepressionRequest(const GetDepressionRequest& from);
  GetDepressionRequest(GetDepressionRequest&& from) noexcept
    : GetDepressionRequest() {
    *this = ::std::move(from);
  }

  inline GetDepressionRequest& operator=(const GetDepressionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDepressionRequest& operator=(GetDepressionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDepressionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDepressionRequest* internal_default_instance() {
    return reinterpret_cast<const GetDepressionRequest*>(
               &_GetDepressionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(GetDepressionRequest& a, GetDepressionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDepressionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDepressionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDepressionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDepressionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDepressionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDepressionRequest& from) {
    GetDepressionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDepressionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetDepressionRequest";
  }
  protected:
  explicit GetDepressionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetDepressionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDepressionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetDepressionResponse) */ {
 public:
  inline GetDepressionResponse() : GetDepressionResponse(nullptr) {}
  ~GetDepressionResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDepressionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDepressionResponse(const GetDepressionResponse& from);
  GetDepressionResponse(GetDepressionResponse&& from) noexcept
    : GetDepressionResponse() {
    *this = ::std::move(from);
  }

  inline GetDepressionResponse& operator=(const GetDepressionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDepressionResponse& operator=(GetDepressionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDepressionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDepressionResponse* internal_default_instance() {
    return reinterpret_cast<const GetDepressionResponse*>(
               &_GetDepressionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(GetDepressionResponse& a, GetDepressionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDepressionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDepressionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDepressionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDepressionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDepressionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDepressionResponse& from) {
    GetDepressionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDepressionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetDepressionResponse";
  }
  protected:
  explicit GetDepressionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepressionFieldNumber = 1,
  };
  // repeated float depression = 1 [json_name = "depression"];
  int depression_size() const;
  private:
  int _internal_depression_size() const;
  public:
  void clear_depression();
  private:
  float _internal_depression(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_depression() const;
  void _internal_add_depression(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_depression();
  public:
  float depression(int index) const;
  void set_depression(int index, float value);
  void add_depression(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      depression() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_depression();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetDepressionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > depression_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetDepressionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetDepressionRequest) */ {
 public:
  inline SetDepressionRequest() : SetDepressionRequest(nullptr) {}
  ~SetDepressionRequest() override;
  explicit PROTOBUF_CONSTEXPR SetDepressionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetDepressionRequest(const SetDepressionRequest& from);
  SetDepressionRequest(SetDepressionRequest&& from) noexcept
    : SetDepressionRequest() {
    *this = ::std::move(from);
  }

  inline SetDepressionRequest& operator=(const SetDepressionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDepressionRequest& operator=(SetDepressionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetDepressionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetDepressionRequest* internal_default_instance() {
    return reinterpret_cast<const SetDepressionRequest*>(
               &_SetDepressionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(SetDepressionRequest& a, SetDepressionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDepressionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDepressionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetDepressionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetDepressionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetDepressionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetDepressionRequest& from) {
    SetDepressionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDepressionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetDepressionRequest";
  }
  protected:
  explicit SetDepressionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepressionFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated float depression = 2 [json_name = "depression"];
  int depression_size() const;
  private:
  int _internal_depression_size() const;
  public:
  void clear_depression();
  private:
  float _internal_depression(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_depression() const;
  void _internal_add_depression(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_depression();
  public:
  float depression(int index) const;
  void set_depression(int index, float value);
  void add_depression(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      depression() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_depression();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetDepressionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > depression_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetDepressionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetDepressionResponse) */ {
 public:
  inline SetDepressionResponse() : SetDepressionResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetDepressionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetDepressionResponse(const SetDepressionResponse& from);
  SetDepressionResponse(SetDepressionResponse&& from) noexcept
    : SetDepressionResponse() {
    *this = ::std::move(from);
  }

  inline SetDepressionResponse& operator=(const SetDepressionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDepressionResponse& operator=(SetDepressionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetDepressionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetDepressionResponse* internal_default_instance() {
    return reinterpret_cast<const SetDepressionResponse*>(
               &_SetDepressionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(SetDepressionResponse& a, SetDepressionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDepressionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDepressionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetDepressionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetDepressionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetDepressionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetDepressionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetDepressionResponse";
  }
  protected:
  explicit SetDepressionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetDepressionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocusControlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetLocusControlRequest) */ {
 public:
  inline GetLocusControlRequest() : GetLocusControlRequest(nullptr) {}
  ~GetLocusControlRequest() override;
  explicit PROTOBUF_CONSTEXPR GetLocusControlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLocusControlRequest(const GetLocusControlRequest& from);
  GetLocusControlRequest(GetLocusControlRequest&& from) noexcept
    : GetLocusControlRequest() {
    *this = ::std::move(from);
  }

  inline GetLocusControlRequest& operator=(const GetLocusControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocusControlRequest& operator=(GetLocusControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLocusControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLocusControlRequest* internal_default_instance() {
    return reinterpret_cast<const GetLocusControlRequest*>(
               &_GetLocusControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(GetLocusControlRequest& a, GetLocusControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocusControlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocusControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLocusControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLocusControlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLocusControlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLocusControlRequest& from) {
    GetLocusControlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocusControlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetLocusControlRequest";
  }
  protected:
  explicit GetLocusControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetLocusControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLocusControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetLocusControlResponse) */ {
 public:
  inline GetLocusControlResponse() : GetLocusControlResponse(nullptr) {}
  ~GetLocusControlResponse() override;
  explicit PROTOBUF_CONSTEXPR GetLocusControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLocusControlResponse(const GetLocusControlResponse& from);
  GetLocusControlResponse(GetLocusControlResponse&& from) noexcept
    : GetLocusControlResponse() {
    *this = ::std::move(from);
  }

  inline GetLocusControlResponse& operator=(const GetLocusControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocusControlResponse& operator=(GetLocusControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLocusControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLocusControlResponse* internal_default_instance() {
    return reinterpret_cast<const GetLocusControlResponse*>(
               &_GetLocusControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(GetLocusControlResponse& a, GetLocusControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocusControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocusControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLocusControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLocusControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLocusControlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLocusControlResponse& from) {
    GetLocusControlResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocusControlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetLocusControlResponse";
  }
  protected:
  explicit GetLocusControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocusControlFieldNumber = 1,
  };
  // repeated float locus_control = 1 [json_name = "locusControl"];
  int locus_control_size() const;
  private:
  int _internal_locus_control_size() const;
  public:
  void clear_locus_control();
  private:
  float _internal_locus_control(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_locus_control() const;
  void _internal_add_locus_control(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_locus_control();
  public:
  float locus_control(int index) const;
  void set_locus_control(int index, float value);
  void add_locus_control(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      locus_control() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_locus_control();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetLocusControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > locus_control_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetLocusControlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetLocusControlRequest) */ {
 public:
  inline SetLocusControlRequest() : SetLocusControlRequest(nullptr) {}
  ~SetLocusControlRequest() override;
  explicit PROTOBUF_CONSTEXPR SetLocusControlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLocusControlRequest(const SetLocusControlRequest& from);
  SetLocusControlRequest(SetLocusControlRequest&& from) noexcept
    : SetLocusControlRequest() {
    *this = ::std::move(from);
  }

  inline SetLocusControlRequest& operator=(const SetLocusControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLocusControlRequest& operator=(SetLocusControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetLocusControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLocusControlRequest* internal_default_instance() {
    return reinterpret_cast<const SetLocusControlRequest*>(
               &_SetLocusControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(SetLocusControlRequest& a, SetLocusControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLocusControlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLocusControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetLocusControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetLocusControlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetLocusControlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetLocusControlRequest& from) {
    SetLocusControlRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLocusControlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetLocusControlRequest";
  }
  protected:
  explicit SetLocusControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocusControlFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated float locus_control = 2 [json_name = "locusControl"];
  int locus_control_size() const;
  private:
  int _internal_locus_control_size() const;
  public:
  void clear_locus_control();
  private:
  float _internal_locus_control(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_locus_control() const;
  void _internal_add_locus_control(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_locus_control();
  public:
  float locus_control(int index) const;
  void set_locus_control(int index, float value);
  void add_locus_control(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      locus_control() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_locus_control();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetLocusControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > locus_control_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetLocusControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetLocusControlResponse) */ {
 public:
  inline SetLocusControlResponse() : SetLocusControlResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetLocusControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLocusControlResponse(const SetLocusControlResponse& from);
  SetLocusControlResponse(SetLocusControlResponse&& from) noexcept
    : SetLocusControlResponse() {
    *this = ::std::move(from);
  }

  inline SetLocusControlResponse& operator=(const SetLocusControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLocusControlResponse& operator=(SetLocusControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetLocusControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLocusControlResponse* internal_default_instance() {
    return reinterpret_cast<const SetLocusControlResponse*>(
               &_SetLocusControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(SetLocusControlResponse& a, SetLocusControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLocusControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLocusControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetLocusControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetLocusControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetLocusControlResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetLocusControlResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetLocusControlResponse";
  }
  protected:
  explicit SetLocusControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetLocusControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetWorkingHoursRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetWorkingHoursRequest) */ {
 public:
  inline GetWorkingHoursRequest() : GetWorkingHoursRequest(nullptr) {}
  ~GetWorkingHoursRequest() override;
  explicit PROTOBUF_CONSTEXPR GetWorkingHoursRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWorkingHoursRequest(const GetWorkingHoursRequest& from);
  GetWorkingHoursRequest(GetWorkingHoursRequest&& from) noexcept
    : GetWorkingHoursRequest() {
    *this = ::std::move(from);
  }

  inline GetWorkingHoursRequest& operator=(const GetWorkingHoursRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkingHoursRequest& operator=(GetWorkingHoursRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWorkingHoursRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWorkingHoursRequest* internal_default_instance() {
    return reinterpret_cast<const GetWorkingHoursRequest*>(
               &_GetWorkingHoursRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(GetWorkingHoursRequest& a, GetWorkingHoursRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkingHoursRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkingHoursRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWorkingHoursRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWorkingHoursRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWorkingHoursRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWorkingHoursRequest& from) {
    GetWorkingHoursRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkingHoursRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetWorkingHoursRequest";
  }
  protected:
  explicit GetWorkingHoursRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetWorkingHoursRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetWorkingHoursResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetWorkingHoursResponse) */ {
 public:
  inline GetWorkingHoursResponse() : GetWorkingHoursResponse(nullptr) {}
  ~GetWorkingHoursResponse() override;
  explicit PROTOBUF_CONSTEXPR GetWorkingHoursResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetWorkingHoursResponse(const GetWorkingHoursResponse& from);
  GetWorkingHoursResponse(GetWorkingHoursResponse&& from) noexcept
    : GetWorkingHoursResponse() {
    *this = ::std::move(from);
  }

  inline GetWorkingHoursResponse& operator=(const GetWorkingHoursResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetWorkingHoursResponse& operator=(GetWorkingHoursResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetWorkingHoursResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetWorkingHoursResponse* internal_default_instance() {
    return reinterpret_cast<const GetWorkingHoursResponse*>(
               &_GetWorkingHoursResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(GetWorkingHoursResponse& a, GetWorkingHoursResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetWorkingHoursResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetWorkingHoursResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetWorkingHoursResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetWorkingHoursResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetWorkingHoursResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetWorkingHoursResponse& from) {
    GetWorkingHoursResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetWorkingHoursResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetWorkingHoursResponse";
  }
  protected:
  explicit GetWorkingHoursResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkingHoursFieldNumber = 1,
  };
  // repeated float working_hours = 1 [json_name = "workingHours"];
  int working_hours_size() const;
  private:
  int _internal_working_hours_size() const;
  public:
  void clear_working_hours();
  private:
  float _internal_working_hours(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_working_hours() const;
  void _internal_add_working_hours(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_working_hours();
  public:
  float working_hours(int index) const;
  void set_working_hours(int index, float value);
  void add_working_hours(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      working_hours() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_working_hours();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetWorkingHoursResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > working_hours_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetWorkingHoursRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetWorkingHoursRequest) */ {
 public:
  inline SetWorkingHoursRequest() : SetWorkingHoursRequest(nullptr) {}
  ~SetWorkingHoursRequest() override;
  explicit PROTOBUF_CONSTEXPR SetWorkingHoursRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetWorkingHoursRequest(const SetWorkingHoursRequest& from);
  SetWorkingHoursRequest(SetWorkingHoursRequest&& from) noexcept
    : SetWorkingHoursRequest() {
    *this = ::std::move(from);
  }

  inline SetWorkingHoursRequest& operator=(const SetWorkingHoursRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetWorkingHoursRequest& operator=(SetWorkingHoursRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetWorkingHoursRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetWorkingHoursRequest* internal_default_instance() {
    return reinterpret_cast<const SetWorkingHoursRequest*>(
               &_SetWorkingHoursRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(SetWorkingHoursRequest& a, SetWorkingHoursRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetWorkingHoursRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetWorkingHoursRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetWorkingHoursRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetWorkingHoursRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetWorkingHoursRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetWorkingHoursRequest& from) {
    SetWorkingHoursRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetWorkingHoursRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetWorkingHoursRequest";
  }
  protected:
  explicit SetWorkingHoursRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkingHoursFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated float working_hours = 2 [json_name = "workingHours"];
  int working_hours_size() const;
  private:
  int _internal_working_hours_size() const;
  public:
  void clear_working_hours();
  private:
  float _internal_working_hours(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_working_hours() const;
  void _internal_add_working_hours(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_working_hours();
  public:
  float working_hours(int index) const;
  void set_working_hours(int index, float value);
  void add_working_hours(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      working_hours() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_working_hours();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetWorkingHoursRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > working_hours_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetWorkingHoursResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetWorkingHoursResponse) */ {
 public:
  inline SetWorkingHoursResponse() : SetWorkingHoursResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetWorkingHoursResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetWorkingHoursResponse(const SetWorkingHoursResponse& from);
  SetWorkingHoursResponse(SetWorkingHoursResponse&& from) noexcept
    : SetWorkingHoursResponse() {
    *this = ::std::move(from);
  }

  inline SetWorkingHoursResponse& operator=(const SetWorkingHoursResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetWorkingHoursResponse& operator=(SetWorkingHoursResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetWorkingHoursResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetWorkingHoursResponse* internal_default_instance() {
    return reinterpret_cast<const SetWorkingHoursResponse*>(
               &_SetWorkingHoursResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(SetWorkingHoursResponse& a, SetWorkingHoursResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetWorkingHoursResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetWorkingHoursResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetWorkingHoursResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetWorkingHoursResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetWorkingHoursResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetWorkingHoursResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetWorkingHoursResponse";
  }
  protected:
  explicit SetWorkingHoursResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetWorkingHoursResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOrgEntityIdsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetOrgEntityIdsRequest) */ {
 public:
  inline GetOrgEntityIdsRequest() : GetOrgEntityIdsRequest(nullptr) {}
  ~GetOrgEntityIdsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetOrgEntityIdsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrgEntityIdsRequest(const GetOrgEntityIdsRequest& from);
  GetOrgEntityIdsRequest(GetOrgEntityIdsRequest&& from) noexcept
    : GetOrgEntityIdsRequest() {
    *this = ::std::move(from);
  }

  inline GetOrgEntityIdsRequest& operator=(const GetOrgEntityIdsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrgEntityIdsRequest& operator=(GetOrgEntityIdsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrgEntityIdsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrgEntityIdsRequest* internal_default_instance() {
    return reinterpret_cast<const GetOrgEntityIdsRequest*>(
               &_GetOrgEntityIdsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(GetOrgEntityIdsRequest& a, GetOrgEntityIdsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrgEntityIdsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrgEntityIdsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrgEntityIdsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrgEntityIdsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrgEntityIdsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrgEntityIdsRequest& from) {
    GetOrgEntityIdsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrgEntityIdsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetOrgEntityIdsRequest";
  }
  protected:
  explicit GetOrgEntityIdsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .city.economy.v2.OrgType type = 1 [json_name = "type"];
  void clear_type();
  ::city::economy::v2::OrgType type() const;
  void set_type(::city::economy::v2::OrgType value);
  private:
  ::city::economy::v2::OrgType _internal_type() const;
  void _internal_set_type(::city::economy::v2::OrgType value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetOrgEntityIdsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOrgEntityIdsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetOrgEntityIdsResponse) */ {
 public:
  inline GetOrgEntityIdsResponse() : GetOrgEntityIdsResponse(nullptr) {}
  ~GetOrgEntityIdsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetOrgEntityIdsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrgEntityIdsResponse(const GetOrgEntityIdsResponse& from);
  GetOrgEntityIdsResponse(GetOrgEntityIdsResponse&& from) noexcept
    : GetOrgEntityIdsResponse() {
    *this = ::std::move(from);
  }

  inline GetOrgEntityIdsResponse& operator=(const GetOrgEntityIdsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrgEntityIdsResponse& operator=(GetOrgEntityIdsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrgEntityIdsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrgEntityIdsResponse* internal_default_instance() {
    return reinterpret_cast<const GetOrgEntityIdsResponse*>(
               &_GetOrgEntityIdsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(GetOrgEntityIdsResponse& a, GetOrgEntityIdsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrgEntityIdsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrgEntityIdsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrgEntityIdsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrgEntityIdsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrgEntityIdsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetOrgEntityIdsResponse& from) {
    GetOrgEntityIdsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrgEntityIdsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetOrgEntityIdsResponse";
  }
  protected:
  explicit GetOrgEntityIdsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdsFieldNumber = 1,
  };
  // repeated int32 org_ids = 1 [json_name = "orgIds"];
  int org_ids_size() const;
  private:
  int _internal_org_ids_size() const;
  public:
  void clear_org_ids();
  private:
  int32_t _internal_org_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_org_ids() const;
  void _internal_add_org_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_org_ids();
  public:
  int32_t org_ids(int index) const;
  void set_org_ids(int index, int32_t value);
  void add_org_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      org_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_org_ids();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetOrgEntityIdsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > org_ids_;
    mutable std::atomic<int> _org_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddInventoryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.AddInventoryRequest) */ {
 public:
  inline AddInventoryRequest() : AddInventoryRequest(nullptr) {}
  ~AddInventoryRequest() override;
  explicit PROTOBUF_CONSTEXPR AddInventoryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddInventoryRequest(const AddInventoryRequest& from);
  AddInventoryRequest(AddInventoryRequest&& from) noexcept
    : AddInventoryRequest() {
    *this = ::std::move(from);
  }

  inline AddInventoryRequest& operator=(const AddInventoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddInventoryRequest& operator=(AddInventoryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddInventoryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddInventoryRequest* internal_default_instance() {
    return reinterpret_cast<const AddInventoryRequest*>(
               &_AddInventoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(AddInventoryRequest& a, AddInventoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddInventoryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddInventoryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddInventoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddInventoryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddInventoryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddInventoryRequest& from) {
    AddInventoryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddInventoryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddInventoryRequest";
  }
  protected:
  explicit AddInventoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kDeltaInventoryFieldNumber = 2,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // int32 delta_inventory = 2 [json_name = "deltaInventory"];
  void clear_delta_inventory();
  int32_t delta_inventory() const;
  void set_delta_inventory(int32_t value);
  private:
  int32_t _internal_delta_inventory() const;
  void _internal_set_delta_inventory(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddInventoryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    int32_t delta_inventory_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddInventoryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.AddInventoryResponse) */ {
 public:
  inline AddInventoryResponse() : AddInventoryResponse(nullptr) {}
  ~AddInventoryResponse() override;
  explicit PROTOBUF_CONSTEXPR AddInventoryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddInventoryResponse(const AddInventoryResponse& from);
  AddInventoryResponse(AddInventoryResponse&& from) noexcept
    : AddInventoryResponse() {
    *this = ::std::move(from);
  }

  inline AddInventoryResponse& operator=(const AddInventoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddInventoryResponse& operator=(AddInventoryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddInventoryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddInventoryResponse* internal_default_instance() {
    return reinterpret_cast<const AddInventoryResponse*>(
               &_AddInventoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(AddInventoryResponse& a, AddInventoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddInventoryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddInventoryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddInventoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddInventoryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddInventoryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddInventoryResponse& from) {
    AddInventoryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddInventoryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddInventoryResponse";
  }
  protected:
  explicit AddInventoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInventoryFieldNumber = 1,
  };
  // int32 inventory = 1 [json_name = "inventory"];
  void clear_inventory();
  int32_t inventory() const;
  void set_inventory(int32_t value);
  private:
  int32_t _internal_inventory() const;
  void _internal_set_inventory(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddInventoryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t inventory_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddPriceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.AddPriceRequest) */ {
 public:
  inline AddPriceRequest() : AddPriceRequest(nullptr) {}
  ~AddPriceRequest() override;
  explicit PROTOBUF_CONSTEXPR AddPriceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPriceRequest(const AddPriceRequest& from);
  AddPriceRequest(AddPriceRequest&& from) noexcept
    : AddPriceRequest() {
    *this = ::std::move(from);
  }

  inline AddPriceRequest& operator=(const AddPriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPriceRequest& operator=(AddPriceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPriceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPriceRequest* internal_default_instance() {
    return reinterpret_cast<const AddPriceRequest*>(
               &_AddPriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(AddPriceRequest& a, AddPriceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPriceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPriceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddPriceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddPriceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddPriceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddPriceRequest& from) {
    AddPriceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPriceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddPriceRequest";
  }
  protected:
  explicit AddPriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kDeltaPriceFieldNumber = 2,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // float delta_price = 2 [json_name = "deltaPrice"];
  void clear_delta_price();
  float delta_price() const;
  void set_delta_price(float value);
  private:
  float _internal_delta_price() const;
  void _internal_set_delta_price(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddPriceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    float delta_price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddPriceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.AddPriceResponse) */ {
 public:
  inline AddPriceResponse() : AddPriceResponse(nullptr) {}
  ~AddPriceResponse() override;
  explicit PROTOBUF_CONSTEXPR AddPriceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPriceResponse(const AddPriceResponse& from);
  AddPriceResponse(AddPriceResponse&& from) noexcept
    : AddPriceResponse() {
    *this = ::std::move(from);
  }

  inline AddPriceResponse& operator=(const AddPriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPriceResponse& operator=(AddPriceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPriceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPriceResponse* internal_default_instance() {
    return reinterpret_cast<const AddPriceResponse*>(
               &_AddPriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(AddPriceResponse& a, AddPriceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPriceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPriceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddPriceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddPriceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddPriceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddPriceResponse& from) {
    AddPriceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPriceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddPriceResponse";
  }
  protected:
  explicit AddPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
  };
  // float price = 1 [json_name = "price"];
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddPriceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddCurrencyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.AddCurrencyRequest) */ {
 public:
  inline AddCurrencyRequest() : AddCurrencyRequest(nullptr) {}
  ~AddCurrencyRequest() override;
  explicit PROTOBUF_CONSTEXPR AddCurrencyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddCurrencyRequest(const AddCurrencyRequest& from);
  AddCurrencyRequest(AddCurrencyRequest&& from) noexcept
    : AddCurrencyRequest() {
    *this = ::std::move(from);
  }

  inline AddCurrencyRequest& operator=(const AddCurrencyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCurrencyRequest& operator=(AddCurrencyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddCurrencyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddCurrencyRequest* internal_default_instance() {
    return reinterpret_cast<const AddCurrencyRequest*>(
               &_AddCurrencyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(AddCurrencyRequest& a, AddCurrencyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCurrencyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddCurrencyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddCurrencyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddCurrencyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddCurrencyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddCurrencyRequest& from) {
    AddCurrencyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCurrencyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddCurrencyRequest";
  }
  protected:
  explicit AddCurrencyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kDeltaCurrencyFieldNumber = 2,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // float delta_currency = 2 [json_name = "deltaCurrency"];
  void clear_delta_currency();
  float delta_currency() const;
  void set_delta_currency(float value);
  private:
  float _internal_delta_currency() const;
  void _internal_set_delta_currency(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddCurrencyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    float delta_currency_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddCurrencyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.AddCurrencyResponse) */ {
 public:
  inline AddCurrencyResponse() : AddCurrencyResponse(nullptr) {}
  ~AddCurrencyResponse() override;
  explicit PROTOBUF_CONSTEXPR AddCurrencyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddCurrencyResponse(const AddCurrencyResponse& from);
  AddCurrencyResponse(AddCurrencyResponse&& from) noexcept
    : AddCurrencyResponse() {
    *this = ::std::move(from);
  }

  inline AddCurrencyResponse& operator=(const AddCurrencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCurrencyResponse& operator=(AddCurrencyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddCurrencyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddCurrencyResponse* internal_default_instance() {
    return reinterpret_cast<const AddCurrencyResponse*>(
               &_AddCurrencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(AddCurrencyResponse& a, AddCurrencyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCurrencyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddCurrencyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddCurrencyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddCurrencyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddCurrencyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddCurrencyResponse& from) {
    AddCurrencyResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCurrencyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddCurrencyResponse";
  }
  protected:
  explicit AddCurrencyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
  };
  // float currency = 1 [json_name = "currency"];
  void clear_currency();
  float currency() const;
  void set_currency(float value);
  private:
  float _internal_currency() const;
  void _internal_set_currency(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddCurrencyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float currency_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddInterestRateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.AddInterestRateRequest) */ {
 public:
  inline AddInterestRateRequest() : AddInterestRateRequest(nullptr) {}
  ~AddInterestRateRequest() override;
  explicit PROTOBUF_CONSTEXPR AddInterestRateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddInterestRateRequest(const AddInterestRateRequest& from);
  AddInterestRateRequest(AddInterestRateRequest&& from) noexcept
    : AddInterestRateRequest() {
    *this = ::std::move(from);
  }

  inline AddInterestRateRequest& operator=(const AddInterestRateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddInterestRateRequest& operator=(AddInterestRateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddInterestRateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddInterestRateRequest* internal_default_instance() {
    return reinterpret_cast<const AddInterestRateRequest*>(
               &_AddInterestRateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(AddInterestRateRequest& a, AddInterestRateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddInterestRateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddInterestRateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddInterestRateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddInterestRateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddInterestRateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddInterestRateRequest& from) {
    AddInterestRateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddInterestRateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddInterestRateRequest";
  }
  protected:
  explicit AddInterestRateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kDeltaInterestRateFieldNumber = 2,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // float delta_interest_rate = 2 [json_name = "deltaInterestRate"];
  void clear_delta_interest_rate();
  float delta_interest_rate() const;
  void set_delta_interest_rate(float value);
  private:
  float _internal_delta_interest_rate() const;
  void _internal_set_delta_interest_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddInterestRateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    float delta_interest_rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddInterestRateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.AddInterestRateResponse) */ {
 public:
  inline AddInterestRateResponse() : AddInterestRateResponse(nullptr) {}
  ~AddInterestRateResponse() override;
  explicit PROTOBUF_CONSTEXPR AddInterestRateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddInterestRateResponse(const AddInterestRateResponse& from);
  AddInterestRateResponse(AddInterestRateResponse&& from) noexcept
    : AddInterestRateResponse() {
    *this = ::std::move(from);
  }

  inline AddInterestRateResponse& operator=(const AddInterestRateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddInterestRateResponse& operator=(AddInterestRateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddInterestRateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddInterestRateResponse* internal_default_instance() {
    return reinterpret_cast<const AddInterestRateResponse*>(
               &_AddInterestRateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(AddInterestRateResponse& a, AddInterestRateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddInterestRateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddInterestRateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddInterestRateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddInterestRateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddInterestRateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddInterestRateResponse& from) {
    AddInterestRateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddInterestRateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddInterestRateResponse";
  }
  protected:
  explicit AddInterestRateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterestRateFieldNumber = 1,
  };
  // float interest_rate = 1 [json_name = "interestRate"];
  void clear_interest_rate();
  float interest_rate() const;
  void set_interest_rate(float value);
  private:
  float _internal_interest_rate() const;
  void _internal_set_interest_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddInterestRateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float interest_rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetEmployeesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetEmployeesRequest) */ {
 public:
  inline GetEmployeesRequest() : GetEmployeesRequest(nullptr) {}
  ~GetEmployeesRequest() override;
  explicit PROTOBUF_CONSTEXPR GetEmployeesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEmployeesRequest(const GetEmployeesRequest& from);
  GetEmployeesRequest(GetEmployeesRequest&& from) noexcept
    : GetEmployeesRequest() {
    *this = ::std::move(from);
  }

  inline GetEmployeesRequest& operator=(const GetEmployeesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEmployeesRequest& operator=(GetEmployeesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEmployeesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEmployeesRequest* internal_default_instance() {
    return reinterpret_cast<const GetEmployeesRequest*>(
               &_GetEmployeesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(GetEmployeesRequest& a, GetEmployeesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEmployeesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEmployeesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEmployeesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEmployeesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEmployeesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEmployeesRequest& from) {
    GetEmployeesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEmployeesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetEmployeesRequest";
  }
  protected:
  explicit GetEmployeesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetEmployeesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetEmployeesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetEmployeesResponse) */ {
 public:
  inline GetEmployeesResponse() : GetEmployeesResponse(nullptr) {}
  ~GetEmployeesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetEmployeesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEmployeesResponse(const GetEmployeesResponse& from);
  GetEmployeesResponse(GetEmployeesResponse&& from) noexcept
    : GetEmployeesResponse() {
    *this = ::std::move(from);
  }

  inline GetEmployeesResponse& operator=(const GetEmployeesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEmployeesResponse& operator=(GetEmployeesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEmployeesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEmployeesResponse* internal_default_instance() {
    return reinterpret_cast<const GetEmployeesResponse*>(
               &_GetEmployeesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(GetEmployeesResponse& a, GetEmployeesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEmployeesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEmployeesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEmployeesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEmployeesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEmployeesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEmployeesResponse& from) {
    GetEmployeesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEmployeesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetEmployeesResponse";
  }
  protected:
  explicit GetEmployeesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmployeeIdsFieldNumber = 1,
  };
  // repeated int32 employee_ids = 1 [json_name = "employeeIds"];
  int employee_ids_size() const;
  private:
  int _internal_employee_ids_size() const;
  public:
  void clear_employee_ids();
  private:
  int32_t _internal_employee_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_employee_ids() const;
  void _internal_add_employee_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_employee_ids();
  public:
  int32_t employee_ids(int index) const;
  void set_employee_ids(int index, int32_t value);
  void add_employee_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      employee_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_employee_ids();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetEmployeesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > employee_ids_;
    mutable std::atomic<int> _employee_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetEmployeesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetEmployeesRequest) */ {
 public:
  inline SetEmployeesRequest() : SetEmployeesRequest(nullptr) {}
  ~SetEmployeesRequest() override;
  explicit PROTOBUF_CONSTEXPR SetEmployeesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetEmployeesRequest(const SetEmployeesRequest& from);
  SetEmployeesRequest(SetEmployeesRequest&& from) noexcept
    : SetEmployeesRequest() {
    *this = ::std::move(from);
  }

  inline SetEmployeesRequest& operator=(const SetEmployeesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEmployeesRequest& operator=(SetEmployeesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetEmployeesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetEmployeesRequest* internal_default_instance() {
    return reinterpret_cast<const SetEmployeesRequest*>(
               &_SetEmployeesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(SetEmployeesRequest& a, SetEmployeesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetEmployeesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetEmployeesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetEmployeesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetEmployeesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetEmployeesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetEmployeesRequest& from) {
    SetEmployeesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetEmployeesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetEmployeesRequest";
  }
  protected:
  explicit SetEmployeesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmployeeIdsFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated int32 employee_ids = 2 [json_name = "employeeIds"];
  int employee_ids_size() const;
  private:
  int _internal_employee_ids_size() const;
  public:
  void clear_employee_ids();
  private:
  int32_t _internal_employee_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_employee_ids() const;
  void _internal_add_employee_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_employee_ids();
  public:
  int32_t employee_ids(int index) const;
  void set_employee_ids(int index, int32_t value);
  void add_employee_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      employee_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_employee_ids();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetEmployeesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > employee_ids_;
    mutable std::atomic<int> _employee_ids_cached_byte_size_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetEmployeesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetEmployeesResponse) */ {
 public:
  inline SetEmployeesResponse() : SetEmployeesResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetEmployeesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetEmployeesResponse(const SetEmployeesResponse& from);
  SetEmployeesResponse(SetEmployeesResponse&& from) noexcept
    : SetEmployeesResponse() {
    *this = ::std::move(from);
  }

  inline SetEmployeesResponse& operator=(const SetEmployeesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEmployeesResponse& operator=(SetEmployeesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetEmployeesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetEmployeesResponse* internal_default_instance() {
    return reinterpret_cast<const SetEmployeesResponse*>(
               &_SetEmployeesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(SetEmployeesResponse& a, SetEmployeesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetEmployeesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetEmployeesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetEmployeesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetEmployeesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetEmployeesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetEmployeesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetEmployeesResponse";
  }
  protected:
  explicit SetEmployeesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetEmployeesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddEmployeeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.AddEmployeeRequest) */ {
 public:
  inline AddEmployeeRequest() : AddEmployeeRequest(nullptr) {}
  ~AddEmployeeRequest() override;
  explicit PROTOBUF_CONSTEXPR AddEmployeeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddEmployeeRequest(const AddEmployeeRequest& from);
  AddEmployeeRequest(AddEmployeeRequest&& from) noexcept
    : AddEmployeeRequest() {
    *this = ::std::move(from);
  }

  inline AddEmployeeRequest& operator=(const AddEmployeeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddEmployeeRequest& operator=(AddEmployeeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddEmployeeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddEmployeeRequest* internal_default_instance() {
    return reinterpret_cast<const AddEmployeeRequest*>(
               &_AddEmployeeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(AddEmployeeRequest& a, AddEmployeeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddEmployeeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddEmployeeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddEmployeeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddEmployeeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddEmployeeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddEmployeeRequest& from) {
    AddEmployeeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddEmployeeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddEmployeeRequest";
  }
  protected:
  explicit AddEmployeeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kEmployeeIdFieldNumber = 2,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // int32 employee_id = 2 [json_name = "employeeId"];
  void clear_employee_id();
  int32_t employee_id() const;
  void set_employee_id(int32_t value);
  private:
  int32_t _internal_employee_id() const;
  void _internal_set_employee_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddEmployeeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    int32_t employee_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddEmployeeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.AddEmployeeResponse) */ {
 public:
  inline AddEmployeeResponse() : AddEmployeeResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AddEmployeeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddEmployeeResponse(const AddEmployeeResponse& from);
  AddEmployeeResponse(AddEmployeeResponse&& from) noexcept
    : AddEmployeeResponse() {
    *this = ::std::move(from);
  }

  inline AddEmployeeResponse& operator=(const AddEmployeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddEmployeeResponse& operator=(AddEmployeeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddEmployeeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddEmployeeResponse* internal_default_instance() {
    return reinterpret_cast<const AddEmployeeResponse*>(
               &_AddEmployeeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(AddEmployeeResponse& a, AddEmployeeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddEmployeeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddEmployeeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddEmployeeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddEmployeeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddEmployeeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddEmployeeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddEmployeeResponse";
  }
  protected:
  explicit AddEmployeeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddEmployeeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveEmployeeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.RemoveEmployeeRequest) */ {
 public:
  inline RemoveEmployeeRequest() : RemoveEmployeeRequest(nullptr) {}
  ~RemoveEmployeeRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveEmployeeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveEmployeeRequest(const RemoveEmployeeRequest& from);
  RemoveEmployeeRequest(RemoveEmployeeRequest&& from) noexcept
    : RemoveEmployeeRequest() {
    *this = ::std::move(from);
  }

  inline RemoveEmployeeRequest& operator=(const RemoveEmployeeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveEmployeeRequest& operator=(RemoveEmployeeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveEmployeeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveEmployeeRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveEmployeeRequest*>(
               &_RemoveEmployeeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(RemoveEmployeeRequest& a, RemoveEmployeeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveEmployeeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveEmployeeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveEmployeeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveEmployeeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveEmployeeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveEmployeeRequest& from) {
    RemoveEmployeeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveEmployeeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.RemoveEmployeeRequest";
  }
  protected:
  explicit RemoveEmployeeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kEmployeeIdFieldNumber = 2,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // int32 employee_id = 2 [json_name = "employeeId"];
  void clear_employee_id();
  int32_t employee_id() const;
  void set_employee_id(int32_t value);
  private:
  int32_t _internal_employee_id() const;
  void _internal_set_employee_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.RemoveEmployeeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    int32_t employee_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveEmployeeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.RemoveEmployeeResponse) */ {
 public:
  inline RemoveEmployeeResponse() : RemoveEmployeeResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RemoveEmployeeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveEmployeeResponse(const RemoveEmployeeResponse& from);
  RemoveEmployeeResponse(RemoveEmployeeResponse&& from) noexcept
    : RemoveEmployeeResponse() {
    *this = ::std::move(from);
  }

  inline RemoveEmployeeResponse& operator=(const RemoveEmployeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveEmployeeResponse& operator=(RemoveEmployeeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveEmployeeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveEmployeeResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveEmployeeResponse*>(
               &_RemoveEmployeeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(RemoveEmployeeResponse& a, RemoveEmployeeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveEmployeeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveEmployeeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveEmployeeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveEmployeeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RemoveEmployeeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RemoveEmployeeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.RemoveEmployeeResponse";
  }
  protected:
  explicit RemoveEmployeeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.RemoveEmployeeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetCitizensRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetCitizensRequest) */ {
 public:
  inline GetCitizensRequest() : GetCitizensRequest(nullptr) {}
  ~GetCitizensRequest() override;
  explicit PROTOBUF_CONSTEXPR GetCitizensRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCitizensRequest(const GetCitizensRequest& from);
  GetCitizensRequest(GetCitizensRequest&& from) noexcept
    : GetCitizensRequest() {
    *this = ::std::move(from);
  }

  inline GetCitizensRequest& operator=(const GetCitizensRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCitizensRequest& operator=(GetCitizensRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCitizensRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCitizensRequest* internal_default_instance() {
    return reinterpret_cast<const GetCitizensRequest*>(
               &_GetCitizensRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(GetCitizensRequest& a, GetCitizensRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCitizensRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCitizensRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCitizensRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCitizensRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCitizensRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCitizensRequest& from) {
    GetCitizensRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCitizensRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetCitizensRequest";
  }
  protected:
  explicit GetCitizensRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetCitizensRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetCitizensResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetCitizensResponse) */ {
 public:
  inline GetCitizensResponse() : GetCitizensResponse(nullptr) {}
  ~GetCitizensResponse() override;
  explicit PROTOBUF_CONSTEXPR GetCitizensResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCitizensResponse(const GetCitizensResponse& from);
  GetCitizensResponse(GetCitizensResponse&& from) noexcept
    : GetCitizensResponse() {
    *this = ::std::move(from);
  }

  inline GetCitizensResponse& operator=(const GetCitizensResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCitizensResponse& operator=(GetCitizensResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCitizensResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCitizensResponse* internal_default_instance() {
    return reinterpret_cast<const GetCitizensResponse*>(
               &_GetCitizensResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(GetCitizensResponse& a, GetCitizensResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCitizensResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCitizensResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCitizensResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCitizensResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCitizensResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCitizensResponse& from) {
    GetCitizensResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCitizensResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetCitizensResponse";
  }
  protected:
  explicit GetCitizensResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCitizenIdsFieldNumber = 1,
  };
  // repeated int32 citizen_ids = 1 [json_name = "citizenIds"];
  int citizen_ids_size() const;
  private:
  int _internal_citizen_ids_size() const;
  public:
  void clear_citizen_ids();
  private:
  int32_t _internal_citizen_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_citizen_ids() const;
  void _internal_add_citizen_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_citizen_ids();
  public:
  int32_t citizen_ids(int index) const;
  void set_citizen_ids(int index, int32_t value);
  void add_citizen_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      citizen_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_citizen_ids();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetCitizensResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > citizen_ids_;
    mutable std::atomic<int> _citizen_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetCitizensRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.SetCitizensRequest) */ {
 public:
  inline SetCitizensRequest() : SetCitizensRequest(nullptr) {}
  ~SetCitizensRequest() override;
  explicit PROTOBUF_CONSTEXPR SetCitizensRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCitizensRequest(const SetCitizensRequest& from);
  SetCitizensRequest(SetCitizensRequest&& from) noexcept
    : SetCitizensRequest() {
    *this = ::std::move(from);
  }

  inline SetCitizensRequest& operator=(const SetCitizensRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCitizensRequest& operator=(SetCitizensRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCitizensRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCitizensRequest* internal_default_instance() {
    return reinterpret_cast<const SetCitizensRequest*>(
               &_SetCitizensRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(SetCitizensRequest& a, SetCitizensRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCitizensRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCitizensRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCitizensRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCitizensRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetCitizensRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetCitizensRequest& from) {
    SetCitizensRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCitizensRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetCitizensRequest";
  }
  protected:
  explicit SetCitizensRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCitizenIdsFieldNumber = 2,
    kOrgIdFieldNumber = 1,
  };
  // repeated int32 citizen_ids = 2 [json_name = "citizenIds"];
  int citizen_ids_size() const;
  private:
  int _internal_citizen_ids_size() const;
  public:
  void clear_citizen_ids();
  private:
  int32_t _internal_citizen_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_citizen_ids() const;
  void _internal_add_citizen_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_citizen_ids();
  public:
  int32_t citizen_ids(int index) const;
  void set_citizen_ids(int index, int32_t value);
  void add_citizen_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      citizen_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_citizen_ids();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetCitizensRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > citizen_ids_;
    mutable std::atomic<int> _citizen_ids_cached_byte_size_;
    int32_t org_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetCitizensResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.SetCitizensResponse) */ {
 public:
  inline SetCitizensResponse() : SetCitizensResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetCitizensResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetCitizensResponse(const SetCitizensResponse& from);
  SetCitizensResponse(SetCitizensResponse&& from) noexcept
    : SetCitizensResponse() {
    *this = ::std::move(from);
  }

  inline SetCitizensResponse& operator=(const SetCitizensResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCitizensResponse& operator=(SetCitizensResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCitizensResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCitizensResponse* internal_default_instance() {
    return reinterpret_cast<const SetCitizensResponse*>(
               &_SetCitizensResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(SetCitizensResponse& a, SetCitizensResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCitizensResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCitizensResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCitizensResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCitizensResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetCitizensResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetCitizensResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.SetCitizensResponse";
  }
  protected:
  explicit SetCitizensResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.SetCitizensResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddCitizenRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.AddCitizenRequest) */ {
 public:
  inline AddCitizenRequest() : AddCitizenRequest(nullptr) {}
  ~AddCitizenRequest() override;
  explicit PROTOBUF_CONSTEXPR AddCitizenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddCitizenRequest(const AddCitizenRequest& from);
  AddCitizenRequest(AddCitizenRequest&& from) noexcept
    : AddCitizenRequest() {
    *this = ::std::move(from);
  }

  inline AddCitizenRequest& operator=(const AddCitizenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCitizenRequest& operator=(AddCitizenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddCitizenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddCitizenRequest* internal_default_instance() {
    return reinterpret_cast<const AddCitizenRequest*>(
               &_AddCitizenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(AddCitizenRequest& a, AddCitizenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCitizenRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddCitizenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddCitizenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddCitizenRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddCitizenRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddCitizenRequest& from) {
    AddCitizenRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCitizenRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddCitizenRequest";
  }
  protected:
  explicit AddCitizenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kCitizenIdFieldNumber = 2,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // int32 citizen_id = 2 [json_name = "citizenId"];
  void clear_citizen_id();
  int32_t citizen_id() const;
  void set_citizen_id(int32_t value);
  private:
  int32_t _internal_citizen_id() const;
  void _internal_set_citizen_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddCitizenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    int32_t citizen_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddCitizenResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.AddCitizenResponse) */ {
 public:
  inline AddCitizenResponse() : AddCitizenResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AddCitizenResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddCitizenResponse(const AddCitizenResponse& from);
  AddCitizenResponse(AddCitizenResponse&& from) noexcept
    : AddCitizenResponse() {
    *this = ::std::move(from);
  }

  inline AddCitizenResponse& operator=(const AddCitizenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCitizenResponse& operator=(AddCitizenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddCitizenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddCitizenResponse* internal_default_instance() {
    return reinterpret_cast<const AddCitizenResponse*>(
               &_AddCitizenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(AddCitizenResponse& a, AddCitizenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCitizenResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddCitizenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddCitizenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddCitizenResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddCitizenResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddCitizenResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.AddCitizenResponse";
  }
  protected:
  explicit AddCitizenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.AddCitizenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveCitizenRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.RemoveCitizenRequest) */ {
 public:
  inline RemoveCitizenRequest() : RemoveCitizenRequest(nullptr) {}
  ~RemoveCitizenRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveCitizenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveCitizenRequest(const RemoveCitizenRequest& from);
  RemoveCitizenRequest(RemoveCitizenRequest&& from) noexcept
    : RemoveCitizenRequest() {
    *this = ::std::move(from);
  }

  inline RemoveCitizenRequest& operator=(const RemoveCitizenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveCitizenRequest& operator=(RemoveCitizenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveCitizenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveCitizenRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveCitizenRequest*>(
               &_RemoveCitizenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(RemoveCitizenRequest& a, RemoveCitizenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveCitizenRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveCitizenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveCitizenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveCitizenRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveCitizenRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveCitizenRequest& from) {
    RemoveCitizenRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveCitizenRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.RemoveCitizenRequest";
  }
  protected:
  explicit RemoveCitizenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kCitizenIdFieldNumber = 2,
  };
  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // int32 citizen_id = 2 [json_name = "citizenId"];
  void clear_citizen_id();
  int32_t citizen_id() const;
  void set_citizen_id(int32_t value);
  private:
  int32_t _internal_citizen_id() const;
  void _internal_set_citizen_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.RemoveCitizenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t org_id_;
    int32_t citizen_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RemoveCitizenResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.RemoveCitizenResponse) */ {
 public:
  inline RemoveCitizenResponse() : RemoveCitizenResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RemoveCitizenResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveCitizenResponse(const RemoveCitizenResponse& from);
  RemoveCitizenResponse(RemoveCitizenResponse&& from) noexcept
    : RemoveCitizenResponse() {
    *this = ::std::move(from);
  }

  inline RemoveCitizenResponse& operator=(const RemoveCitizenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveCitizenResponse& operator=(RemoveCitizenResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveCitizenResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveCitizenResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveCitizenResponse*>(
               &_RemoveCitizenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(RemoveCitizenResponse& a, RemoveCitizenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveCitizenResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveCitizenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveCitizenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveCitizenResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RemoveCitizenResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RemoveCitizenResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.RemoveCitizenResponse";
  }
  protected:
  explicit RemoveCitizenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.RemoveCitizenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetAgentRequest) */ {
 public:
  inline GetAgentRequest() : GetAgentRequest(nullptr) {}
  ~GetAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAgentRequest(const GetAgentRequest& from);
  GetAgentRequest(GetAgentRequest&& from) noexcept
    : GetAgentRequest() {
    *this = ::std::move(from);
  }

  inline GetAgentRequest& operator=(const GetAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAgentRequest& operator=(GetAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAgentRequest* internal_default_instance() {
    return reinterpret_cast<const GetAgentRequest*>(
               &_GetAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(GetAgentRequest& a, GetAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAgentRequest& from) {
    GetAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetAgentRequest";
  }
  protected:
  explicit GetAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
  };
  // int32 agent_id = 1 [json_name = "agentId"];
  void clear_agent_id();
  int32_t agent_id() const;
  void set_agent_id(int32_t value);
  private:
  int32_t _internal_agent_id() const;
  void _internal_set_agent_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t agent_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAgentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.GetAgentResponse) */ {
 public:
  inline GetAgentResponse() : GetAgentResponse(nullptr) {}
  ~GetAgentResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAgentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAgentResponse(const GetAgentResponse& from);
  GetAgentResponse(GetAgentResponse&& from) noexcept
    : GetAgentResponse() {
    *this = ::std::move(from);
  }

  inline GetAgentResponse& operator=(const GetAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAgentResponse& operator=(GetAgentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAgentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAgentResponse* internal_default_instance() {
    return reinterpret_cast<const GetAgentResponse*>(
               &_GetAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(GetAgentResponse& a, GetAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAgentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAgentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAgentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAgentResponse& from) {
    GetAgentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAgentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.GetAgentResponse";
  }
  protected:
  explicit GetAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentFieldNumber = 1,
  };
  // .city.economy.v2.Agent agent = 1 [json_name = "agent"];
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::city::economy::v2::Agent& agent() const;
  PROTOBUF_NODISCARD ::city::economy::v2::Agent* release_agent();
  ::city::economy::v2::Agent* mutable_agent();
  void set_allocated_agent(::city::economy::v2::Agent* agent);
  private:
  const ::city::economy::v2::Agent& _internal_agent() const;
  ::city::economy::v2::Agent* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::city::economy::v2::Agent* agent);
  ::city::economy::v2::Agent* unsafe_arena_release_agent();

  // @@protoc_insertion_point(class_scope:city.economy.v2.GetAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::economy::v2::Agent* agent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.UpdateAgentRequest) */ {
 public:
  inline UpdateAgentRequest() : UpdateAgentRequest(nullptr) {}
  ~UpdateAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateAgentRequest(const UpdateAgentRequest& from);
  UpdateAgentRequest(UpdateAgentRequest&& from) noexcept
    : UpdateAgentRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAgentRequest& operator=(const UpdateAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAgentRequest& operator=(UpdateAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAgentRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAgentRequest*>(
               &_UpdateAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(UpdateAgentRequest& a, UpdateAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateAgentRequest& from) {
    UpdateAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.UpdateAgentRequest";
  }
  protected:
  explicit UpdateAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentFieldNumber = 1,
  };
  // .city.economy.v2.Agent agent = 1 [json_name = "agent"];
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::city::economy::v2::Agent& agent() const;
  PROTOBUF_NODISCARD ::city::economy::v2::Agent* release_agent();
  ::city::economy::v2::Agent* mutable_agent();
  void set_allocated_agent(::city::economy::v2::Agent* agent);
  private:
  const ::city::economy::v2::Agent& _internal_agent() const;
  ::city::economy::v2::Agent* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::city::economy::v2::Agent* agent);
  ::city::economy::v2::Agent* unsafe_arena_release_agent();

  // @@protoc_insertion_point(class_scope:city.economy.v2.UpdateAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::economy::v2::Agent* agent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateAgentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.UpdateAgentResponse) */ {
 public:
  inline UpdateAgentResponse() : UpdateAgentResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UpdateAgentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateAgentResponse(const UpdateAgentResponse& from);
  UpdateAgentResponse(UpdateAgentResponse&& from) noexcept
    : UpdateAgentResponse() {
    *this = ::std::move(from);
  }

  inline UpdateAgentResponse& operator=(const UpdateAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAgentResponse& operator=(UpdateAgentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAgentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAgentResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateAgentResponse*>(
               &_UpdateAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(UpdateAgentResponse& a, UpdateAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAgentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateAgentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UpdateAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UpdateAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.UpdateAgentResponse";
  }
  protected:
  explicit UpdateAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.UpdateAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchGetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.BatchGetRequest) */ {
 public:
  inline BatchGetRequest() : BatchGetRequest(nullptr) {}
  ~BatchGetRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchGetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchGetRequest(const BatchGetRequest& from);
  BatchGetRequest(BatchGetRequest&& from) noexcept
    : BatchGetRequest() {
    *this = ::std::move(from);
  }

  inline BatchGetRequest& operator=(const BatchGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchGetRequest& operator=(BatchGetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchGetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchGetRequest* internal_default_instance() {
    return reinterpret_cast<const BatchGetRequest*>(
               &_BatchGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(BatchGetRequest& a, BatchGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchGetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchGetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchGetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchGetRequest& from) {
    BatchGetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchGetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.BatchGetRequest";
  }
  protected:
  explicit BatchGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated int32 ids = 1 [json_name = "ids"];
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  int32_t _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_ids() const;
  void _internal_add_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_ids();
  public:
  int32_t ids(int index) const;
  void set_ids(int index, int32_t value);
  void add_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_ids();

  // string type = 2 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.BatchGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > ids_;
    mutable std::atomic<int> _ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchGetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.BatchGetResponse) */ {
 public:
  inline BatchGetResponse() : BatchGetResponse(nullptr) {}
  ~BatchGetResponse() override;
  explicit PROTOBUF_CONSTEXPR BatchGetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchGetResponse(const BatchGetResponse& from);
  BatchGetResponse(BatchGetResponse&& from) noexcept
    : BatchGetResponse() {
    *this = ::std::move(from);
  }

  inline BatchGetResponse& operator=(const BatchGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchGetResponse& operator=(BatchGetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchGetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchGetResponse* internal_default_instance() {
    return reinterpret_cast<const BatchGetResponse*>(
               &_BatchGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(BatchGetResponse& a, BatchGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchGetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchGetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchGetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchGetResponse& from) {
    BatchGetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchGetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.BatchGetResponse";
  }
  protected:
  explicit BatchGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgsFieldNumber = 1,
    kAgentsFieldNumber = 2,
  };
  // repeated .city.economy.v2.Org orgs = 1 [json_name = "orgs"];
  int orgs_size() const;
  private:
  int _internal_orgs_size() const;
  public:
  void clear_orgs();
  ::city::economy::v2::Org* mutable_orgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >*
      mutable_orgs();
  private:
  const ::city::economy::v2::Org& _internal_orgs(int index) const;
  ::city::economy::v2::Org* _internal_add_orgs();
  public:
  const ::city::economy::v2::Org& orgs(int index) const;
  ::city::economy::v2::Org* add_orgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >&
      orgs() const;

  // repeated .city.economy.v2.Agent agents = 2 [json_name = "agents"];
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::city::economy::v2::Agent* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >*
      mutable_agents();
  private:
  const ::city::economy::v2::Agent& _internal_agents(int index) const;
  ::city::economy::v2::Agent* _internal_add_agents();
  public:
  const ::city::economy::v2::Agent& agents(int index) const;
  ::city::economy::v2::Agent* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >&
      agents() const;

  // @@protoc_insertion_point(class_scope:city.economy.v2.BatchGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org > orgs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent > agents_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.BatchUpdateRequest) */ {
 public:
  inline BatchUpdateRequest() : BatchUpdateRequest(nullptr) {}
  ~BatchUpdateRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchUpdateRequest(const BatchUpdateRequest& from);
  BatchUpdateRequest(BatchUpdateRequest&& from) noexcept
    : BatchUpdateRequest() {
    *this = ::std::move(from);
  }

  inline BatchUpdateRequest& operator=(const BatchUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchUpdateRequest& operator=(BatchUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateRequest*>(
               &_BatchUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(BatchUpdateRequest& a, BatchUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchUpdateRequest& from) {
    BatchUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.BatchUpdateRequest";
  }
  protected:
  explicit BatchUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgsFieldNumber = 1,
    kAgentsFieldNumber = 2,
  };
  // repeated .city.economy.v2.Org orgs = 1 [json_name = "orgs"];
  int orgs_size() const;
  private:
  int _internal_orgs_size() const;
  public:
  void clear_orgs();
  ::city::economy::v2::Org* mutable_orgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >*
      mutable_orgs();
  private:
  const ::city::economy::v2::Org& _internal_orgs(int index) const;
  ::city::economy::v2::Org* _internal_add_orgs();
  public:
  const ::city::economy::v2::Org& orgs(int index) const;
  ::city::economy::v2::Org* add_orgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >&
      orgs() const;

  // repeated .city.economy.v2.Agent agents = 2 [json_name = "agents"];
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::city::economy::v2::Agent* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >*
      mutable_agents();
  private:
  const ::city::economy::v2::Agent& _internal_agents(int index) const;
  ::city::economy::v2::Agent* _internal_add_agents();
  public:
  const ::city::economy::v2::Agent& agents(int index) const;
  ::city::economy::v2::Agent* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >&
      agents() const;

  // @@protoc_insertion_point(class_scope:city.economy.v2.BatchUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org > orgs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent > agents_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.BatchUpdateResponse) */ {
 public:
  inline BatchUpdateResponse() : BatchUpdateResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BatchUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchUpdateResponse(const BatchUpdateResponse& from);
  BatchUpdateResponse(BatchUpdateResponse&& from) noexcept
    : BatchUpdateResponse() {
    *this = ::std::move(from);
  }

  inline BatchUpdateResponse& operator=(const BatchUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchUpdateResponse& operator=(BatchUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const BatchUpdateResponse*>(
               &_BatchUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(BatchUpdateResponse& a, BatchUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchUpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BatchUpdateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BatchUpdateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.BatchUpdateResponse";
  }
  protected:
  explicit BatchUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.BatchUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeltaUpdateOrgRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.DeltaUpdateOrgRequest) */ {
 public:
  inline DeltaUpdateOrgRequest() : DeltaUpdateOrgRequest(nullptr) {}
  ~DeltaUpdateOrgRequest() override;
  explicit PROTOBUF_CONSTEXPR DeltaUpdateOrgRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeltaUpdateOrgRequest(const DeltaUpdateOrgRequest& from);
  DeltaUpdateOrgRequest(DeltaUpdateOrgRequest&& from) noexcept
    : DeltaUpdateOrgRequest() {
    *this = ::std::move(from);
  }

  inline DeltaUpdateOrgRequest& operator=(const DeltaUpdateOrgRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeltaUpdateOrgRequest& operator=(DeltaUpdateOrgRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeltaUpdateOrgRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeltaUpdateOrgRequest* internal_default_instance() {
    return reinterpret_cast<const DeltaUpdateOrgRequest*>(
               &_DeltaUpdateOrgRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(DeltaUpdateOrgRequest& a, DeltaUpdateOrgRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeltaUpdateOrgRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeltaUpdateOrgRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeltaUpdateOrgRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeltaUpdateOrgRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeltaUpdateOrgRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeltaUpdateOrgRequest& from) {
    DeltaUpdateOrgRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeltaUpdateOrgRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.DeltaUpdateOrgRequest";
  }
  protected:
  explicit DeltaUpdateOrgRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddEmployeesFieldNumber = 6,
    kRemoveEmployeesFieldNumber = 7,
    kOrgIdFieldNumber = 1,
    kDeltaInventoryFieldNumber = 2,
    kDeltaPriceFieldNumber = 3,
    kDeltaCurrencyFieldNumber = 4,
    kDeltaInterestRateFieldNumber = 5,
  };
  // repeated int32 add_employees = 6 [json_name = "addEmployees"];
  int add_employees_size() const;
  private:
  int _internal_add_employees_size() const;
  public:
  void clear_add_employees();
  private:
  int32_t _internal_add_employees(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_add_employees() const;
  void _internal_add_add_employees(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_add_employees();
  public:
  int32_t add_employees(int index) const;
  void set_add_employees(int index, int32_t value);
  void add_add_employees(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      add_employees() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_add_employees();

  // repeated int32 remove_employees = 7 [json_name = "removeEmployees"];
  int remove_employees_size() const;
  private:
  int _internal_remove_employees_size() const;
  public:
  void clear_remove_employees();
  private:
  int32_t _internal_remove_employees(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_remove_employees() const;
  void _internal_add_remove_employees(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_remove_employees();
  public:
  int32_t remove_employees(int index) const;
  void set_remove_employees(int index, int32_t value);
  void add_remove_employees(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      remove_employees() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_remove_employees();

  // int32 org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  int32_t org_id() const;
  void set_org_id(int32_t value);
  private:
  int32_t _internal_org_id() const;
  void _internal_set_org_id(int32_t value);
  public:

  // optional float delta_inventory = 2 [json_name = "deltaInventory"];
  bool has_delta_inventory() const;
  private:
  bool _internal_has_delta_inventory() const;
  public:
  void clear_delta_inventory();
  float delta_inventory() const;
  void set_delta_inventory(float value);
  private:
  float _internal_delta_inventory() const;
  void _internal_set_delta_inventory(float value);
  public:

  // optional float delta_price = 3 [json_name = "deltaPrice"];
  bool has_delta_price() const;
  private:
  bool _internal_has_delta_price() const;
  public:
  void clear_delta_price();
  float delta_price() const;
  void set_delta_price(float value);
  private:
  float _internal_delta_price() const;
  void _internal_set_delta_price(float value);
  public:

  // optional float delta_currency = 4 [json_name = "deltaCurrency"];
  bool has_delta_currency() const;
  private:
  bool _internal_has_delta_currency() const;
  public:
  void clear_delta_currency();
  float delta_currency() const;
  void set_delta_currency(float value);
  private:
  float _internal_delta_currency() const;
  void _internal_set_delta_currency(float value);
  public:

  // optional float delta_interest_rate = 5 [json_name = "deltaInterestRate"];
  bool has_delta_interest_rate() const;
  private:
  bool _internal_has_delta_interest_rate() const;
  public:
  void clear_delta_interest_rate();
  float delta_interest_rate() const;
  void set_delta_interest_rate(float value);
  private:
  float _internal_delta_interest_rate() const;
  void _internal_set_delta_interest_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.DeltaUpdateOrgRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > add_employees_;
    mutable std::atomic<int> _add_employees_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > remove_employees_;
    mutable std::atomic<int> _remove_employees_cached_byte_size_;
    int32_t org_id_;
    float delta_inventory_;
    float delta_price_;
    float delta_currency_;
    float delta_interest_rate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeltaUpdateOrgResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.DeltaUpdateOrgResponse) */ {
 public:
  inline DeltaUpdateOrgResponse() : DeltaUpdateOrgResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DeltaUpdateOrgResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeltaUpdateOrgResponse(const DeltaUpdateOrgResponse& from);
  DeltaUpdateOrgResponse(DeltaUpdateOrgResponse&& from) noexcept
    : DeltaUpdateOrgResponse() {
    *this = ::std::move(from);
  }

  inline DeltaUpdateOrgResponse& operator=(const DeltaUpdateOrgResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeltaUpdateOrgResponse& operator=(DeltaUpdateOrgResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeltaUpdateOrgResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeltaUpdateOrgResponse* internal_default_instance() {
    return reinterpret_cast<const DeltaUpdateOrgResponse*>(
               &_DeltaUpdateOrgResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(DeltaUpdateOrgResponse& a, DeltaUpdateOrgResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeltaUpdateOrgResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeltaUpdateOrgResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeltaUpdateOrgResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeltaUpdateOrgResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeltaUpdateOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeltaUpdateOrgResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.DeltaUpdateOrgResponse";
  }
  protected:
  explicit DeltaUpdateOrgResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.DeltaUpdateOrgResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeltaUpdateAgentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.DeltaUpdateAgentRequest) */ {
 public:
  inline DeltaUpdateAgentRequest() : DeltaUpdateAgentRequest(nullptr) {}
  ~DeltaUpdateAgentRequest() override;
  explicit PROTOBUF_CONSTEXPR DeltaUpdateAgentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeltaUpdateAgentRequest(const DeltaUpdateAgentRequest& from);
  DeltaUpdateAgentRequest(DeltaUpdateAgentRequest&& from) noexcept
    : DeltaUpdateAgentRequest() {
    *this = ::std::move(from);
  }

  inline DeltaUpdateAgentRequest& operator=(const DeltaUpdateAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeltaUpdateAgentRequest& operator=(DeltaUpdateAgentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeltaUpdateAgentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeltaUpdateAgentRequest* internal_default_instance() {
    return reinterpret_cast<const DeltaUpdateAgentRequest*>(
               &_DeltaUpdateAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(DeltaUpdateAgentRequest& a, DeltaUpdateAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeltaUpdateAgentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeltaUpdateAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeltaUpdateAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeltaUpdateAgentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeltaUpdateAgentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeltaUpdateAgentRequest& from) {
    DeltaUpdateAgentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeltaUpdateAgentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.DeltaUpdateAgentRequest";
  }
  protected:
  explicit DeltaUpdateAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdFieldNumber = 1,
    kDeltaCurrencyFieldNumber = 2,
    kDeltaSkillFieldNumber = 3,
    kDeltaConsumptionFieldNumber = 4,
    kDeltaIncomeFieldNumber = 5,
  };
  // int32 agent_id = 1 [json_name = "agentId"];
  void clear_agent_id();
  int32_t agent_id() const;
  void set_agent_id(int32_t value);
  private:
  int32_t _internal_agent_id() const;
  void _internal_set_agent_id(int32_t value);
  public:

  // optional float delta_currency = 2 [json_name = "deltaCurrency"];
  bool has_delta_currency() const;
  private:
  bool _internal_has_delta_currency() const;
  public:
  void clear_delta_currency();
  float delta_currency() const;
  void set_delta_currency(float value);
  private:
  float _internal_delta_currency() const;
  void _internal_set_delta_currency(float value);
  public:

  // optional float delta_skill = 3 [json_name = "deltaSkill"];
  bool has_delta_skill() const;
  private:
  bool _internal_has_delta_skill() const;
  public:
  void clear_delta_skill();
  float delta_skill() const;
  void set_delta_skill(float value);
  private:
  float _internal_delta_skill() const;
  void _internal_set_delta_skill(float value);
  public:

  // optional float delta_consumption = 4 [json_name = "deltaConsumption"];
  bool has_delta_consumption() const;
  private:
  bool _internal_has_delta_consumption() const;
  public:
  void clear_delta_consumption();
  float delta_consumption() const;
  void set_delta_consumption(float value);
  private:
  float _internal_delta_consumption() const;
  void _internal_set_delta_consumption(float value);
  public:

  // optional float delta_income = 5 [json_name = "deltaIncome"];
  bool has_delta_income() const;
  private:
  bool _internal_has_delta_income() const;
  public:
  void clear_delta_income();
  float delta_income() const;
  void set_delta_income(float value);
  private:
  float _internal_delta_income() const;
  void _internal_set_delta_income(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.DeltaUpdateAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t agent_id_;
    float delta_currency_;
    float delta_skill_;
    float delta_consumption_;
    float delta_income_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeltaUpdateAgentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.DeltaUpdateAgentResponse) */ {
 public:
  inline DeltaUpdateAgentResponse() : DeltaUpdateAgentResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DeltaUpdateAgentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeltaUpdateAgentResponse(const DeltaUpdateAgentResponse& from);
  DeltaUpdateAgentResponse(DeltaUpdateAgentResponse&& from) noexcept
    : DeltaUpdateAgentResponse() {
    *this = ::std::move(from);
  }

  inline DeltaUpdateAgentResponse& operator=(const DeltaUpdateAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeltaUpdateAgentResponse& operator=(DeltaUpdateAgentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeltaUpdateAgentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeltaUpdateAgentResponse* internal_default_instance() {
    return reinterpret_cast<const DeltaUpdateAgentResponse*>(
               &_DeltaUpdateAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(DeltaUpdateAgentResponse& a, DeltaUpdateAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeltaUpdateAgentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeltaUpdateAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeltaUpdateAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeltaUpdateAgentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeltaUpdateAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeltaUpdateAgentResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.DeltaUpdateAgentResponse";
  }
  protected:
  explicit DeltaUpdateAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.DeltaUpdateAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchDeltaUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.BatchDeltaUpdateRequest) */ {
 public:
  inline BatchDeltaUpdateRequest() : BatchDeltaUpdateRequest(nullptr) {}
  ~BatchDeltaUpdateRequest() override;
  explicit PROTOBUF_CONSTEXPR BatchDeltaUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchDeltaUpdateRequest(const BatchDeltaUpdateRequest& from);
  BatchDeltaUpdateRequest(BatchDeltaUpdateRequest&& from) noexcept
    : BatchDeltaUpdateRequest() {
    *this = ::std::move(from);
  }

  inline BatchDeltaUpdateRequest& operator=(const BatchDeltaUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchDeltaUpdateRequest& operator=(BatchDeltaUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchDeltaUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchDeltaUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const BatchDeltaUpdateRequest*>(
               &_BatchDeltaUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(BatchDeltaUpdateRequest& a, BatchDeltaUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchDeltaUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchDeltaUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchDeltaUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchDeltaUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchDeltaUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatchDeltaUpdateRequest& from) {
    BatchDeltaUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchDeltaUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.BatchDeltaUpdateRequest";
  }
  protected:
  explicit BatchDeltaUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgsFieldNumber = 1,
    kAgentsFieldNumber = 2,
  };
  // repeated .city.economy.v2.DeltaUpdateOrgRequest orgs = 1 [json_name = "orgs"];
  int orgs_size() const;
  private:
  int _internal_orgs_size() const;
  public:
  void clear_orgs();
  ::city::economy::v2::DeltaUpdateOrgRequest* mutable_orgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateOrgRequest >*
      mutable_orgs();
  private:
  const ::city::economy::v2::DeltaUpdateOrgRequest& _internal_orgs(int index) const;
  ::city::economy::v2::DeltaUpdateOrgRequest* _internal_add_orgs();
  public:
  const ::city::economy::v2::DeltaUpdateOrgRequest& orgs(int index) const;
  ::city::economy::v2::DeltaUpdateOrgRequest* add_orgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateOrgRequest >&
      orgs() const;

  // repeated .city.economy.v2.DeltaUpdateAgentRequest agents = 2 [json_name = "agents"];
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::city::economy::v2::DeltaUpdateAgentRequest* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateAgentRequest >*
      mutable_agents();
  private:
  const ::city::economy::v2::DeltaUpdateAgentRequest& _internal_agents(int index) const;
  ::city::economy::v2::DeltaUpdateAgentRequest* _internal_add_agents();
  public:
  const ::city::economy::v2::DeltaUpdateAgentRequest& agents(int index) const;
  ::city::economy::v2::DeltaUpdateAgentRequest* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateAgentRequest >&
      agents() const;

  // @@protoc_insertion_point(class_scope:city.economy.v2.BatchDeltaUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateOrgRequest > orgs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateAgentRequest > agents_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchDeltaUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.economy.v2.BatchDeltaUpdateResponse) */ {
 public:
  inline BatchDeltaUpdateResponse() : BatchDeltaUpdateResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BatchDeltaUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchDeltaUpdateResponse(const BatchDeltaUpdateResponse& from);
  BatchDeltaUpdateResponse(BatchDeltaUpdateResponse&& from) noexcept
    : BatchDeltaUpdateResponse() {
    *this = ::std::move(from);
  }

  inline BatchDeltaUpdateResponse& operator=(const BatchDeltaUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchDeltaUpdateResponse& operator=(BatchDeltaUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchDeltaUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchDeltaUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const BatchDeltaUpdateResponse*>(
               &_BatchDeltaUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(BatchDeltaUpdateResponse& a, BatchDeltaUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchDeltaUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchDeltaUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatchDeltaUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatchDeltaUpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BatchDeltaUpdateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BatchDeltaUpdateResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.BatchDeltaUpdateResponse";
  }
  protected:
  explicit BatchDeltaUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.economy.v2.BatchDeltaUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateRealGDPRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateRealGDPRequest) */ {
 public:
  inline CalculateRealGDPRequest() : CalculateRealGDPRequest(nullptr) {}
  ~CalculateRealGDPRequest() override;
  explicit PROTOBUF_CONSTEXPR CalculateRealGDPRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateRealGDPRequest(const CalculateRealGDPRequest& from);
  CalculateRealGDPRequest(CalculateRealGDPRequest&& from) noexcept
    : CalculateRealGDPRequest() {
    *this = ::std::move(from);
  }

  inline CalculateRealGDPRequest& operator=(const CalculateRealGDPRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateRealGDPRequest& operator=(CalculateRealGDPRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateRealGDPRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateRealGDPRequest* internal_default_instance() {
    return reinterpret_cast<const CalculateRealGDPRequest*>(
               &_CalculateRealGDPRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(CalculateRealGDPRequest& a, CalculateRealGDPRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateRealGDPRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateRealGDPRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateRealGDPRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateRealGDPRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateRealGDPRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateRealGDPRequest& from) {
    CalculateRealGDPRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateRealGDPRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateRealGDPRequest";
  }
  protected:
  explicit CalculateRealGDPRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNbsAgentIdFieldNumber = 1,
  };
  // int32 nbs_agent_id = 1 [json_name = "nbsAgentId"];
  void clear_nbs_agent_id();
  int32_t nbs_agent_id() const;
  void set_nbs_agent_id(int32_t value);
  private:
  int32_t _internal_nbs_agent_id() const;
  void _internal_set_nbs_agent_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateRealGDPRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t nbs_agent_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CalculateRealGDPResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.CalculateRealGDPResponse) */ {
 public:
  inline CalculateRealGDPResponse() : CalculateRealGDPResponse(nullptr) {}
  ~CalculateRealGDPResponse() override;
  explicit PROTOBUF_CONSTEXPR CalculateRealGDPResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalculateRealGDPResponse(const CalculateRealGDPResponse& from);
  CalculateRealGDPResponse(CalculateRealGDPResponse&& from) noexcept
    : CalculateRealGDPResponse() {
    *this = ::std::move(from);
  }

  inline CalculateRealGDPResponse& operator=(const CalculateRealGDPResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalculateRealGDPResponse& operator=(CalculateRealGDPResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalculateRealGDPResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalculateRealGDPResponse* internal_default_instance() {
    return reinterpret_cast<const CalculateRealGDPResponse*>(
               &_CalculateRealGDPResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(CalculateRealGDPResponse& a, CalculateRealGDPResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalculateRealGDPResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalculateRealGDPResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalculateRealGDPResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalculateRealGDPResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalculateRealGDPResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CalculateRealGDPResponse& from) {
    CalculateRealGDPResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculateRealGDPResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.CalculateRealGDPResponse";
  }
  protected:
  explicit CalculateRealGDPResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRealGdpFieldNumber = 1,
  };
  // float real_gdp = 1 [json_name = "realGdp"];
  void clear_real_gdp();
  float real_gdp() const;
  void set_real_gdp(float value);
  private:
  float _internal_real_gdp() const;
  void _internal_set_real_gdp(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.CalculateRealGDPResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float real_gdp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2forg_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddOrgRequest

// .city.economy.v2.Org org = 1 [json_name = "org"];
inline bool AddOrgRequest::_internal_has_org() const {
  return this != internal_default_instance() && _impl_.org_ != nullptr;
}
inline bool AddOrgRequest::has_org() const {
  return _internal_has_org();
}
inline const ::city::economy::v2::Org& AddOrgRequest::_internal_org() const {
  const ::city::economy::v2::Org* p = _impl_.org_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::economy::v2::Org&>(
      ::city::economy::v2::_Org_default_instance_);
}
inline const ::city::economy::v2::Org& AddOrgRequest::org() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddOrgRequest.org)
  return _internal_org();
}
inline void AddOrgRequest::unsafe_arena_set_allocated_org(
    ::city::economy::v2::Org* org) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.org_);
  }
  _impl_.org_ = org;
  if (org) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.economy.v2.AddOrgRequest.org)
}
inline ::city::economy::v2::Org* AddOrgRequest::release_org() {
  
  ::city::economy::v2::Org* temp = _impl_.org_;
  _impl_.org_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::economy::v2::Org* AddOrgRequest::unsafe_arena_release_org() {
  // @@protoc_insertion_point(field_release:city.economy.v2.AddOrgRequest.org)
  
  ::city::economy::v2::Org* temp = _impl_.org_;
  _impl_.org_ = nullptr;
  return temp;
}
inline ::city::economy::v2::Org* AddOrgRequest::_internal_mutable_org() {
  
  if (_impl_.org_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::economy::v2::Org>(GetArenaForAllocation());
    _impl_.org_ = p;
  }
  return _impl_.org_;
}
inline ::city::economy::v2::Org* AddOrgRequest::mutable_org() {
  ::city::economy::v2::Org* _msg = _internal_mutable_org();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.AddOrgRequest.org)
  return _msg;
}
inline void AddOrgRequest::set_allocated_org(::city::economy::v2::Org* org) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.org_);
  }
  if (org) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(org));
    if (message_arena != submessage_arena) {
      org = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, org, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.org_ = org;
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.AddOrgRequest.org)
}

// -------------------------------------------------------------------

// AddOrgResponse

// -------------------------------------------------------------------

// RemoveOrgRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void RemoveOrgRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t RemoveOrgRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t RemoveOrgRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.RemoveOrgRequest.org_id)
  return _internal_org_id();
}
inline void RemoveOrgRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void RemoveOrgRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.RemoveOrgRequest.org_id)
}

// -------------------------------------------------------------------

// RemoveOrgResponse

// -------------------------------------------------------------------

// GetOrgRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetOrgRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetOrgRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetOrgRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetOrgRequest.org_id)
  return _internal_org_id();
}
inline void GetOrgRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetOrgRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetOrgRequest.org_id)
}

// -------------------------------------------------------------------

// GetOrgResponse

// .city.economy.v2.Org org = 1 [json_name = "org"];
inline bool GetOrgResponse::_internal_has_org() const {
  return this != internal_default_instance() && _impl_.org_ != nullptr;
}
inline bool GetOrgResponse::has_org() const {
  return _internal_has_org();
}
inline const ::city::economy::v2::Org& GetOrgResponse::_internal_org() const {
  const ::city::economy::v2::Org* p = _impl_.org_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::economy::v2::Org&>(
      ::city::economy::v2::_Org_default_instance_);
}
inline const ::city::economy::v2::Org& GetOrgResponse::org() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetOrgResponse.org)
  return _internal_org();
}
inline void GetOrgResponse::unsafe_arena_set_allocated_org(
    ::city::economy::v2::Org* org) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.org_);
  }
  _impl_.org_ = org;
  if (org) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.economy.v2.GetOrgResponse.org)
}
inline ::city::economy::v2::Org* GetOrgResponse::release_org() {
  
  ::city::economy::v2::Org* temp = _impl_.org_;
  _impl_.org_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::economy::v2::Org* GetOrgResponse::unsafe_arena_release_org() {
  // @@protoc_insertion_point(field_release:city.economy.v2.GetOrgResponse.org)
  
  ::city::economy::v2::Org* temp = _impl_.org_;
  _impl_.org_ = nullptr;
  return temp;
}
inline ::city::economy::v2::Org* GetOrgResponse::_internal_mutable_org() {
  
  if (_impl_.org_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::economy::v2::Org>(GetArenaForAllocation());
    _impl_.org_ = p;
  }
  return _impl_.org_;
}
inline ::city::economy::v2::Org* GetOrgResponse::mutable_org() {
  ::city::economy::v2::Org* _msg = _internal_mutable_org();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.GetOrgResponse.org)
  return _msg;
}
inline void GetOrgResponse::set_allocated_org(::city::economy::v2::Org* org) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.org_);
  }
  if (org) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(org));
    if (message_arena != submessage_arena) {
      org = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, org, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.org_ = org;
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.GetOrgResponse.org)
}

// -------------------------------------------------------------------

// UpdateOrgRequest

// .city.economy.v2.Org org = 1 [json_name = "org"];
inline bool UpdateOrgRequest::_internal_has_org() const {
  return this != internal_default_instance() && _impl_.org_ != nullptr;
}
inline bool UpdateOrgRequest::has_org() const {
  return _internal_has_org();
}
inline const ::city::economy::v2::Org& UpdateOrgRequest::_internal_org() const {
  const ::city::economy::v2::Org* p = _impl_.org_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::economy::v2::Org&>(
      ::city::economy::v2::_Org_default_instance_);
}
inline const ::city::economy::v2::Org& UpdateOrgRequest::org() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.UpdateOrgRequest.org)
  return _internal_org();
}
inline void UpdateOrgRequest::unsafe_arena_set_allocated_org(
    ::city::economy::v2::Org* org) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.org_);
  }
  _impl_.org_ = org;
  if (org) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.economy.v2.UpdateOrgRequest.org)
}
inline ::city::economy::v2::Org* UpdateOrgRequest::release_org() {
  
  ::city::economy::v2::Org* temp = _impl_.org_;
  _impl_.org_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::economy::v2::Org* UpdateOrgRequest::unsafe_arena_release_org() {
  // @@protoc_insertion_point(field_release:city.economy.v2.UpdateOrgRequest.org)
  
  ::city::economy::v2::Org* temp = _impl_.org_;
  _impl_.org_ = nullptr;
  return temp;
}
inline ::city::economy::v2::Org* UpdateOrgRequest::_internal_mutable_org() {
  
  if (_impl_.org_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::economy::v2::Org>(GetArenaForAllocation());
    _impl_.org_ = p;
  }
  return _impl_.org_;
}
inline ::city::economy::v2::Org* UpdateOrgRequest::mutable_org() {
  ::city::economy::v2::Org* _msg = _internal_mutable_org();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.UpdateOrgRequest.org)
  return _msg;
}
inline void UpdateOrgRequest::set_allocated_org(::city::economy::v2::Org* org) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.org_);
  }
  if (org) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(org));
    if (message_arena != submessage_arena) {
      org = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, org, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.org_ = org;
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.UpdateOrgRequest.org)
}

// -------------------------------------------------------------------

// UpdateOrgResponse

// -------------------------------------------------------------------

// AddAgentRequest

// .city.economy.v2.Agent agent = 1 [json_name = "agent"];
inline bool AddAgentRequest::_internal_has_agent() const {
  return this != internal_default_instance() && _impl_.agent_ != nullptr;
}
inline bool AddAgentRequest::has_agent() const {
  return _internal_has_agent();
}
inline const ::city::economy::v2::Agent& AddAgentRequest::_internal_agent() const {
  const ::city::economy::v2::Agent* p = _impl_.agent_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::economy::v2::Agent&>(
      ::city::economy::v2::_Agent_default_instance_);
}
inline const ::city::economy::v2::Agent& AddAgentRequest::agent() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddAgentRequest.agent)
  return _internal_agent();
}
inline void AddAgentRequest::unsafe_arena_set_allocated_agent(
    ::city::economy::v2::Agent* agent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_);
  }
  _impl_.agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.economy.v2.AddAgentRequest.agent)
}
inline ::city::economy::v2::Agent* AddAgentRequest::release_agent() {
  
  ::city::economy::v2::Agent* temp = _impl_.agent_;
  _impl_.agent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::economy::v2::Agent* AddAgentRequest::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_release:city.economy.v2.AddAgentRequest.agent)
  
  ::city::economy::v2::Agent* temp = _impl_.agent_;
  _impl_.agent_ = nullptr;
  return temp;
}
inline ::city::economy::v2::Agent* AddAgentRequest::_internal_mutable_agent() {
  
  if (_impl_.agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::economy::v2::Agent>(GetArenaForAllocation());
    _impl_.agent_ = p;
  }
  return _impl_.agent_;
}
inline ::city::economy::v2::Agent* AddAgentRequest::mutable_agent() {
  ::city::economy::v2::Agent* _msg = _internal_mutable_agent();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.AddAgentRequest.agent)
  return _msg;
}
inline void AddAgentRequest::set_allocated_agent(::city::economy::v2::Agent* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_);
  }
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent));
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.agent_ = agent;
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.AddAgentRequest.agent)
}

// -------------------------------------------------------------------

// AddAgentResponse

// -------------------------------------------------------------------

// RemoveAgentRequest

// int32 agent_id = 1 [json_name = "agentId"];
inline void RemoveAgentRequest::clear_agent_id() {
  _impl_.agent_id_ = 0;
}
inline int32_t RemoveAgentRequest::_internal_agent_id() const {
  return _impl_.agent_id_;
}
inline int32_t RemoveAgentRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.RemoveAgentRequest.agent_id)
  return _internal_agent_id();
}
inline void RemoveAgentRequest::_internal_set_agent_id(int32_t value) {
  
  _impl_.agent_id_ = value;
}
inline void RemoveAgentRequest::set_agent_id(int32_t value) {
  _internal_set_agent_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.RemoveAgentRequest.agent_id)
}

// -------------------------------------------------------------------

// RemoveAgentResponse

// -------------------------------------------------------------------

// GetNominalGDPRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetNominalGDPRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetNominalGDPRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetNominalGDPRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetNominalGDPRequest.org_id)
  return _internal_org_id();
}
inline void GetNominalGDPRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetNominalGDPRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetNominalGDPRequest.org_id)
}

// -------------------------------------------------------------------

// GetNominalGDPResponse

// repeated float nominal_gdp = 1 [json_name = "nominalGdp"];
inline int GetNominalGDPResponse::_internal_nominal_gdp_size() const {
  return _impl_.nominal_gdp_.size();
}
inline int GetNominalGDPResponse::nominal_gdp_size() const {
  return _internal_nominal_gdp_size();
}
inline void GetNominalGDPResponse::clear_nominal_gdp() {
  _impl_.nominal_gdp_.Clear();
}
inline float GetNominalGDPResponse::_internal_nominal_gdp(int index) const {
  return _impl_.nominal_gdp_.Get(index);
}
inline float GetNominalGDPResponse::nominal_gdp(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetNominalGDPResponse.nominal_gdp)
  return _internal_nominal_gdp(index);
}
inline void GetNominalGDPResponse::set_nominal_gdp(int index, float value) {
  _impl_.nominal_gdp_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetNominalGDPResponse.nominal_gdp)
}
inline void GetNominalGDPResponse::_internal_add_nominal_gdp(float value) {
  _impl_.nominal_gdp_.Add(value);
}
inline void GetNominalGDPResponse::add_nominal_gdp(float value) {
  _internal_add_nominal_gdp(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetNominalGDPResponse.nominal_gdp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetNominalGDPResponse::_internal_nominal_gdp() const {
  return _impl_.nominal_gdp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetNominalGDPResponse::nominal_gdp() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetNominalGDPResponse.nominal_gdp)
  return _internal_nominal_gdp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetNominalGDPResponse::_internal_mutable_nominal_gdp() {
  return &_impl_.nominal_gdp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetNominalGDPResponse::mutable_nominal_gdp() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetNominalGDPResponse.nominal_gdp)
  return _internal_mutable_nominal_gdp();
}

// -------------------------------------------------------------------

// SetNominalGDPRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetNominalGDPRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetNominalGDPRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetNominalGDPRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetNominalGDPRequest.org_id)
  return _internal_org_id();
}
inline void SetNominalGDPRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetNominalGDPRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetNominalGDPRequest.org_id)
}

// repeated float nominal_gdp = 2 [json_name = "nominalGdp"];
inline int SetNominalGDPRequest::_internal_nominal_gdp_size() const {
  return _impl_.nominal_gdp_.size();
}
inline int SetNominalGDPRequest::nominal_gdp_size() const {
  return _internal_nominal_gdp_size();
}
inline void SetNominalGDPRequest::clear_nominal_gdp() {
  _impl_.nominal_gdp_.Clear();
}
inline float SetNominalGDPRequest::_internal_nominal_gdp(int index) const {
  return _impl_.nominal_gdp_.Get(index);
}
inline float SetNominalGDPRequest::nominal_gdp(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetNominalGDPRequest.nominal_gdp)
  return _internal_nominal_gdp(index);
}
inline void SetNominalGDPRequest::set_nominal_gdp(int index, float value) {
  _impl_.nominal_gdp_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetNominalGDPRequest.nominal_gdp)
}
inline void SetNominalGDPRequest::_internal_add_nominal_gdp(float value) {
  _impl_.nominal_gdp_.Add(value);
}
inline void SetNominalGDPRequest::add_nominal_gdp(float value) {
  _internal_add_nominal_gdp(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SetNominalGDPRequest.nominal_gdp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetNominalGDPRequest::_internal_nominal_gdp() const {
  return _impl_.nominal_gdp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetNominalGDPRequest::nominal_gdp() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SetNominalGDPRequest.nominal_gdp)
  return _internal_nominal_gdp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetNominalGDPRequest::_internal_mutable_nominal_gdp() {
  return &_impl_.nominal_gdp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetNominalGDPRequest::mutable_nominal_gdp() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SetNominalGDPRequest.nominal_gdp)
  return _internal_mutable_nominal_gdp();
}

// -------------------------------------------------------------------

// SetNominalGDPResponse

// -------------------------------------------------------------------

// GetRealGDPRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetRealGDPRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetRealGDPRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetRealGDPRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetRealGDPRequest.org_id)
  return _internal_org_id();
}
inline void GetRealGDPRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetRealGDPRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetRealGDPRequest.org_id)
}

// -------------------------------------------------------------------

// GetRealGDPResponse

// repeated float real_gdp = 1 [json_name = "realGdp"];
inline int GetRealGDPResponse::_internal_real_gdp_size() const {
  return _impl_.real_gdp_.size();
}
inline int GetRealGDPResponse::real_gdp_size() const {
  return _internal_real_gdp_size();
}
inline void GetRealGDPResponse::clear_real_gdp() {
  _impl_.real_gdp_.Clear();
}
inline float GetRealGDPResponse::_internal_real_gdp(int index) const {
  return _impl_.real_gdp_.Get(index);
}
inline float GetRealGDPResponse::real_gdp(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetRealGDPResponse.real_gdp)
  return _internal_real_gdp(index);
}
inline void GetRealGDPResponse::set_real_gdp(int index, float value) {
  _impl_.real_gdp_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetRealGDPResponse.real_gdp)
}
inline void GetRealGDPResponse::_internal_add_real_gdp(float value) {
  _impl_.real_gdp_.Add(value);
}
inline void GetRealGDPResponse::add_real_gdp(float value) {
  _internal_add_real_gdp(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetRealGDPResponse.real_gdp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetRealGDPResponse::_internal_real_gdp() const {
  return _impl_.real_gdp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetRealGDPResponse::real_gdp() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetRealGDPResponse.real_gdp)
  return _internal_real_gdp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetRealGDPResponse::_internal_mutable_real_gdp() {
  return &_impl_.real_gdp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetRealGDPResponse::mutable_real_gdp() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetRealGDPResponse.real_gdp)
  return _internal_mutable_real_gdp();
}

// -------------------------------------------------------------------

// SetRealGDPRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetRealGDPRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetRealGDPRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetRealGDPRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetRealGDPRequest.org_id)
  return _internal_org_id();
}
inline void SetRealGDPRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetRealGDPRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetRealGDPRequest.org_id)
}

// repeated float real_gdp = 2 [json_name = "realGdp"];
inline int SetRealGDPRequest::_internal_real_gdp_size() const {
  return _impl_.real_gdp_.size();
}
inline int SetRealGDPRequest::real_gdp_size() const {
  return _internal_real_gdp_size();
}
inline void SetRealGDPRequest::clear_real_gdp() {
  _impl_.real_gdp_.Clear();
}
inline float SetRealGDPRequest::_internal_real_gdp(int index) const {
  return _impl_.real_gdp_.Get(index);
}
inline float SetRealGDPRequest::real_gdp(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetRealGDPRequest.real_gdp)
  return _internal_real_gdp(index);
}
inline void SetRealGDPRequest::set_real_gdp(int index, float value) {
  _impl_.real_gdp_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetRealGDPRequest.real_gdp)
}
inline void SetRealGDPRequest::_internal_add_real_gdp(float value) {
  _impl_.real_gdp_.Add(value);
}
inline void SetRealGDPRequest::add_real_gdp(float value) {
  _internal_add_real_gdp(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SetRealGDPRequest.real_gdp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetRealGDPRequest::_internal_real_gdp() const {
  return _impl_.real_gdp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetRealGDPRequest::real_gdp() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SetRealGDPRequest.real_gdp)
  return _internal_real_gdp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetRealGDPRequest::_internal_mutable_real_gdp() {
  return &_impl_.real_gdp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetRealGDPRequest::mutable_real_gdp() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SetRealGDPRequest.real_gdp)
  return _internal_mutable_real_gdp();
}

// -------------------------------------------------------------------

// SetRealGDPResponse

// -------------------------------------------------------------------

// GetUnemploymentRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetUnemploymentRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetUnemploymentRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetUnemploymentRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetUnemploymentRequest.org_id)
  return _internal_org_id();
}
inline void GetUnemploymentRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetUnemploymentRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetUnemploymentRequest.org_id)
}

// -------------------------------------------------------------------

// GetUnemploymentResponse

// repeated float unemployment = 1 [json_name = "unemployment"];
inline int GetUnemploymentResponse::_internal_unemployment_size() const {
  return _impl_.unemployment_.size();
}
inline int GetUnemploymentResponse::unemployment_size() const {
  return _internal_unemployment_size();
}
inline void GetUnemploymentResponse::clear_unemployment() {
  _impl_.unemployment_.Clear();
}
inline float GetUnemploymentResponse::_internal_unemployment(int index) const {
  return _impl_.unemployment_.Get(index);
}
inline float GetUnemploymentResponse::unemployment(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetUnemploymentResponse.unemployment)
  return _internal_unemployment(index);
}
inline void GetUnemploymentResponse::set_unemployment(int index, float value) {
  _impl_.unemployment_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetUnemploymentResponse.unemployment)
}
inline void GetUnemploymentResponse::_internal_add_unemployment(float value) {
  _impl_.unemployment_.Add(value);
}
inline void GetUnemploymentResponse::add_unemployment(float value) {
  _internal_add_unemployment(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetUnemploymentResponse.unemployment)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetUnemploymentResponse::_internal_unemployment() const {
  return _impl_.unemployment_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetUnemploymentResponse::unemployment() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetUnemploymentResponse.unemployment)
  return _internal_unemployment();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetUnemploymentResponse::_internal_mutable_unemployment() {
  return &_impl_.unemployment_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetUnemploymentResponse::mutable_unemployment() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetUnemploymentResponse.unemployment)
  return _internal_mutable_unemployment();
}

// -------------------------------------------------------------------

// SetUnemploymentRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetUnemploymentRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetUnemploymentRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetUnemploymentRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetUnemploymentRequest.org_id)
  return _internal_org_id();
}
inline void SetUnemploymentRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetUnemploymentRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetUnemploymentRequest.org_id)
}

// repeated float unemployment = 2 [json_name = "unemployment"];
inline int SetUnemploymentRequest::_internal_unemployment_size() const {
  return _impl_.unemployment_.size();
}
inline int SetUnemploymentRequest::unemployment_size() const {
  return _internal_unemployment_size();
}
inline void SetUnemploymentRequest::clear_unemployment() {
  _impl_.unemployment_.Clear();
}
inline float SetUnemploymentRequest::_internal_unemployment(int index) const {
  return _impl_.unemployment_.Get(index);
}
inline float SetUnemploymentRequest::unemployment(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetUnemploymentRequest.unemployment)
  return _internal_unemployment(index);
}
inline void SetUnemploymentRequest::set_unemployment(int index, float value) {
  _impl_.unemployment_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetUnemploymentRequest.unemployment)
}
inline void SetUnemploymentRequest::_internal_add_unemployment(float value) {
  _impl_.unemployment_.Add(value);
}
inline void SetUnemploymentRequest::add_unemployment(float value) {
  _internal_add_unemployment(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SetUnemploymentRequest.unemployment)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetUnemploymentRequest::_internal_unemployment() const {
  return _impl_.unemployment_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetUnemploymentRequest::unemployment() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SetUnemploymentRequest.unemployment)
  return _internal_unemployment();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetUnemploymentRequest::_internal_mutable_unemployment() {
  return &_impl_.unemployment_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetUnemploymentRequest::mutable_unemployment() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SetUnemploymentRequest.unemployment)
  return _internal_mutable_unemployment();
}

// -------------------------------------------------------------------

// SetUnemploymentResponse

// -------------------------------------------------------------------

// GetWagesRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetWagesRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetWagesRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetWagesRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetWagesRequest.org_id)
  return _internal_org_id();
}
inline void GetWagesRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetWagesRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetWagesRequest.org_id)
}

// -------------------------------------------------------------------

// GetWagesResponse

// repeated float wages = 1 [json_name = "wages"];
inline int GetWagesResponse::_internal_wages_size() const {
  return _impl_.wages_.size();
}
inline int GetWagesResponse::wages_size() const {
  return _internal_wages_size();
}
inline void GetWagesResponse::clear_wages() {
  _impl_.wages_.Clear();
}
inline float GetWagesResponse::_internal_wages(int index) const {
  return _impl_.wages_.Get(index);
}
inline float GetWagesResponse::wages(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetWagesResponse.wages)
  return _internal_wages(index);
}
inline void GetWagesResponse::set_wages(int index, float value) {
  _impl_.wages_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetWagesResponse.wages)
}
inline void GetWagesResponse::_internal_add_wages(float value) {
  _impl_.wages_.Add(value);
}
inline void GetWagesResponse::add_wages(float value) {
  _internal_add_wages(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetWagesResponse.wages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetWagesResponse::_internal_wages() const {
  return _impl_.wages_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetWagesResponse::wages() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetWagesResponse.wages)
  return _internal_wages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetWagesResponse::_internal_mutable_wages() {
  return &_impl_.wages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetWagesResponse::mutable_wages() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetWagesResponse.wages)
  return _internal_mutable_wages();
}

// -------------------------------------------------------------------

// SetWagesRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetWagesRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetWagesRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetWagesRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetWagesRequest.org_id)
  return _internal_org_id();
}
inline void SetWagesRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetWagesRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetWagesRequest.org_id)
}

// repeated float wages = 2 [json_name = "wages"];
inline int SetWagesRequest::_internal_wages_size() const {
  return _impl_.wages_.size();
}
inline int SetWagesRequest::wages_size() const {
  return _internal_wages_size();
}
inline void SetWagesRequest::clear_wages() {
  _impl_.wages_.Clear();
}
inline float SetWagesRequest::_internal_wages(int index) const {
  return _impl_.wages_.Get(index);
}
inline float SetWagesRequest::wages(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetWagesRequest.wages)
  return _internal_wages(index);
}
inline void SetWagesRequest::set_wages(int index, float value) {
  _impl_.wages_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetWagesRequest.wages)
}
inline void SetWagesRequest::_internal_add_wages(float value) {
  _impl_.wages_.Add(value);
}
inline void SetWagesRequest::add_wages(float value) {
  _internal_add_wages(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SetWagesRequest.wages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetWagesRequest::_internal_wages() const {
  return _impl_.wages_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetWagesRequest::wages() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SetWagesRequest.wages)
  return _internal_wages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetWagesRequest::_internal_mutable_wages() {
  return &_impl_.wages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetWagesRequest::mutable_wages() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SetWagesRequest.wages)
  return _internal_mutable_wages();
}

// -------------------------------------------------------------------

// SetWagesResponse

// -------------------------------------------------------------------

// GetPricesRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetPricesRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetPricesRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetPricesRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetPricesRequest.org_id)
  return _internal_org_id();
}
inline void GetPricesRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetPricesRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetPricesRequest.org_id)
}

// -------------------------------------------------------------------

// GetPricesResponse

// repeated float prices = 1 [json_name = "prices"];
inline int GetPricesResponse::_internal_prices_size() const {
  return _impl_.prices_.size();
}
inline int GetPricesResponse::prices_size() const {
  return _internal_prices_size();
}
inline void GetPricesResponse::clear_prices() {
  _impl_.prices_.Clear();
}
inline float GetPricesResponse::_internal_prices(int index) const {
  return _impl_.prices_.Get(index);
}
inline float GetPricesResponse::prices(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetPricesResponse.prices)
  return _internal_prices(index);
}
inline void GetPricesResponse::set_prices(int index, float value) {
  _impl_.prices_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetPricesResponse.prices)
}
inline void GetPricesResponse::_internal_add_prices(float value) {
  _impl_.prices_.Add(value);
}
inline void GetPricesResponse::add_prices(float value) {
  _internal_add_prices(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetPricesResponse.prices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetPricesResponse::_internal_prices() const {
  return _impl_.prices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetPricesResponse::prices() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetPricesResponse.prices)
  return _internal_prices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetPricesResponse::_internal_mutable_prices() {
  return &_impl_.prices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetPricesResponse::mutable_prices() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetPricesResponse.prices)
  return _internal_mutable_prices();
}

// -------------------------------------------------------------------

// SetPricesRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetPricesRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetPricesRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetPricesRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetPricesRequest.org_id)
  return _internal_org_id();
}
inline void SetPricesRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetPricesRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetPricesRequest.org_id)
}

// repeated float prices = 2 [json_name = "prices"];
inline int SetPricesRequest::_internal_prices_size() const {
  return _impl_.prices_.size();
}
inline int SetPricesRequest::prices_size() const {
  return _internal_prices_size();
}
inline void SetPricesRequest::clear_prices() {
  _impl_.prices_.Clear();
}
inline float SetPricesRequest::_internal_prices(int index) const {
  return _impl_.prices_.Get(index);
}
inline float SetPricesRequest::prices(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetPricesRequest.prices)
  return _internal_prices(index);
}
inline void SetPricesRequest::set_prices(int index, float value) {
  _impl_.prices_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetPricesRequest.prices)
}
inline void SetPricesRequest::_internal_add_prices(float value) {
  _impl_.prices_.Add(value);
}
inline void SetPricesRequest::add_prices(float value) {
  _internal_add_prices(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SetPricesRequest.prices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetPricesRequest::_internal_prices() const {
  return _impl_.prices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetPricesRequest::prices() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SetPricesRequest.prices)
  return _internal_prices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetPricesRequest::_internal_mutable_prices() {
  return &_impl_.prices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetPricesRequest::mutable_prices() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SetPricesRequest.prices)
  return _internal_mutable_prices();
}

// -------------------------------------------------------------------

// SetPricesResponse

// -------------------------------------------------------------------

// GetInventoryRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetInventoryRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetInventoryRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetInventoryRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetInventoryRequest.org_id)
  return _internal_org_id();
}
inline void GetInventoryRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetInventoryRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetInventoryRequest.org_id)
}

// -------------------------------------------------------------------

// GetInventoryResponse

// int32 inventory = 1 [json_name = "inventory"];
inline void GetInventoryResponse::clear_inventory() {
  _impl_.inventory_ = 0;
}
inline int32_t GetInventoryResponse::_internal_inventory() const {
  return _impl_.inventory_;
}
inline int32_t GetInventoryResponse::inventory() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetInventoryResponse.inventory)
  return _internal_inventory();
}
inline void GetInventoryResponse::_internal_set_inventory(int32_t value) {
  
  _impl_.inventory_ = value;
}
inline void GetInventoryResponse::set_inventory(int32_t value) {
  _internal_set_inventory(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetInventoryResponse.inventory)
}

// -------------------------------------------------------------------

// SetInventoryRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetInventoryRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetInventoryRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetInventoryRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetInventoryRequest.org_id)
  return _internal_org_id();
}
inline void SetInventoryRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetInventoryRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetInventoryRequest.org_id)
}

// int32 inventory = 2 [json_name = "inventory"];
inline void SetInventoryRequest::clear_inventory() {
  _impl_.inventory_ = 0;
}
inline int32_t SetInventoryRequest::_internal_inventory() const {
  return _impl_.inventory_;
}
inline int32_t SetInventoryRequest::inventory() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetInventoryRequest.inventory)
  return _internal_inventory();
}
inline void SetInventoryRequest::_internal_set_inventory(int32_t value) {
  
  _impl_.inventory_ = value;
}
inline void SetInventoryRequest::set_inventory(int32_t value) {
  _internal_set_inventory(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetInventoryRequest.inventory)
}

// -------------------------------------------------------------------

// SetInventoryResponse

// -------------------------------------------------------------------

// GetPriceRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetPriceRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetPriceRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetPriceRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetPriceRequest.org_id)
  return _internal_org_id();
}
inline void GetPriceRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetPriceRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetPriceRequest.org_id)
}

// -------------------------------------------------------------------

// GetPriceResponse

// float price = 1 [json_name = "price"];
inline void GetPriceResponse::clear_price() {
  _impl_.price_ = 0;
}
inline float GetPriceResponse::_internal_price() const {
  return _impl_.price_;
}
inline float GetPriceResponse::price() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetPriceResponse.price)
  return _internal_price();
}
inline void GetPriceResponse::_internal_set_price(float value) {
  
  _impl_.price_ = value;
}
inline void GetPriceResponse::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetPriceResponse.price)
}

// -------------------------------------------------------------------

// SetPriceRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetPriceRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetPriceRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetPriceRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetPriceRequest.org_id)
  return _internal_org_id();
}
inline void SetPriceRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetPriceRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetPriceRequest.org_id)
}

// float price = 2 [json_name = "price"];
inline void SetPriceRequest::clear_price() {
  _impl_.price_ = 0;
}
inline float SetPriceRequest::_internal_price() const {
  return _impl_.price_;
}
inline float SetPriceRequest::price() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetPriceRequest.price)
  return _internal_price();
}
inline void SetPriceRequest::_internal_set_price(float value) {
  
  _impl_.price_ = value;
}
inline void SetPriceRequest::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetPriceRequest.price)
}

// -------------------------------------------------------------------

// SetPriceResponse

// -------------------------------------------------------------------

// GetCurrencyRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetCurrencyRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetCurrencyRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetCurrencyRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetCurrencyRequest.org_id)
  return _internal_org_id();
}
inline void GetCurrencyRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetCurrencyRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetCurrencyRequest.org_id)
}

// -------------------------------------------------------------------

// GetCurrencyResponse

// float currency = 1 [json_name = "currency"];
inline void GetCurrencyResponse::clear_currency() {
  _impl_.currency_ = 0;
}
inline float GetCurrencyResponse::_internal_currency() const {
  return _impl_.currency_;
}
inline float GetCurrencyResponse::currency() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetCurrencyResponse.currency)
  return _internal_currency();
}
inline void GetCurrencyResponse::_internal_set_currency(float value) {
  
  _impl_.currency_ = value;
}
inline void GetCurrencyResponse::set_currency(float value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetCurrencyResponse.currency)
}

// -------------------------------------------------------------------

// SetCurrencyRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetCurrencyRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetCurrencyRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetCurrencyRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetCurrencyRequest.org_id)
  return _internal_org_id();
}
inline void SetCurrencyRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetCurrencyRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetCurrencyRequest.org_id)
}

// float currency = 2 [json_name = "currency"];
inline void SetCurrencyRequest::clear_currency() {
  _impl_.currency_ = 0;
}
inline float SetCurrencyRequest::_internal_currency() const {
  return _impl_.currency_;
}
inline float SetCurrencyRequest::currency() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetCurrencyRequest.currency)
  return _internal_currency();
}
inline void SetCurrencyRequest::_internal_set_currency(float value) {
  
  _impl_.currency_ = value;
}
inline void SetCurrencyRequest::set_currency(float value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetCurrencyRequest.currency)
}

// -------------------------------------------------------------------

// SetCurrencyResponse

// -------------------------------------------------------------------

// GetInterestRateRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetInterestRateRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetInterestRateRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetInterestRateRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetInterestRateRequest.org_id)
  return _internal_org_id();
}
inline void GetInterestRateRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetInterestRateRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetInterestRateRequest.org_id)
}

// -------------------------------------------------------------------

// GetInterestRateResponse

// float interest_rate = 1 [json_name = "interestRate"];
inline void GetInterestRateResponse::clear_interest_rate() {
  _impl_.interest_rate_ = 0;
}
inline float GetInterestRateResponse::_internal_interest_rate() const {
  return _impl_.interest_rate_;
}
inline float GetInterestRateResponse::interest_rate() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetInterestRateResponse.interest_rate)
  return _internal_interest_rate();
}
inline void GetInterestRateResponse::_internal_set_interest_rate(float value) {
  
  _impl_.interest_rate_ = value;
}
inline void GetInterestRateResponse::set_interest_rate(float value) {
  _internal_set_interest_rate(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetInterestRateResponse.interest_rate)
}

// -------------------------------------------------------------------

// SetInterestRateRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetInterestRateRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetInterestRateRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetInterestRateRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetInterestRateRequest.org_id)
  return _internal_org_id();
}
inline void SetInterestRateRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetInterestRateRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetInterestRateRequest.org_id)
}

// float interest_rate = 2 [json_name = "interestRate"];
inline void SetInterestRateRequest::clear_interest_rate() {
  _impl_.interest_rate_ = 0;
}
inline float SetInterestRateRequest::_internal_interest_rate() const {
  return _impl_.interest_rate_;
}
inline float SetInterestRateRequest::interest_rate() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetInterestRateRequest.interest_rate)
  return _internal_interest_rate();
}
inline void SetInterestRateRequest::_internal_set_interest_rate(float value) {
  
  _impl_.interest_rate_ = value;
}
inline void SetInterestRateRequest::set_interest_rate(float value) {
  _internal_set_interest_rate(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetInterestRateRequest.interest_rate)
}

// -------------------------------------------------------------------

// SetInterestRateResponse

// -------------------------------------------------------------------

// GetBracketCutoffsRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetBracketCutoffsRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetBracketCutoffsRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetBracketCutoffsRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetBracketCutoffsRequest.org_id)
  return _internal_org_id();
}
inline void GetBracketCutoffsRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetBracketCutoffsRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetBracketCutoffsRequest.org_id)
}

// -------------------------------------------------------------------

// GetBracketCutoffsResponse

// repeated float bracket_cutoffs = 1 [json_name = "bracketCutoffs"];
inline int GetBracketCutoffsResponse::_internal_bracket_cutoffs_size() const {
  return _impl_.bracket_cutoffs_.size();
}
inline int GetBracketCutoffsResponse::bracket_cutoffs_size() const {
  return _internal_bracket_cutoffs_size();
}
inline void GetBracketCutoffsResponse::clear_bracket_cutoffs() {
  _impl_.bracket_cutoffs_.Clear();
}
inline float GetBracketCutoffsResponse::_internal_bracket_cutoffs(int index) const {
  return _impl_.bracket_cutoffs_.Get(index);
}
inline float GetBracketCutoffsResponse::bracket_cutoffs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetBracketCutoffsResponse.bracket_cutoffs)
  return _internal_bracket_cutoffs(index);
}
inline void GetBracketCutoffsResponse::set_bracket_cutoffs(int index, float value) {
  _impl_.bracket_cutoffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetBracketCutoffsResponse.bracket_cutoffs)
}
inline void GetBracketCutoffsResponse::_internal_add_bracket_cutoffs(float value) {
  _impl_.bracket_cutoffs_.Add(value);
}
inline void GetBracketCutoffsResponse::add_bracket_cutoffs(float value) {
  _internal_add_bracket_cutoffs(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetBracketCutoffsResponse.bracket_cutoffs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetBracketCutoffsResponse::_internal_bracket_cutoffs() const {
  return _impl_.bracket_cutoffs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetBracketCutoffsResponse::bracket_cutoffs() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetBracketCutoffsResponse.bracket_cutoffs)
  return _internal_bracket_cutoffs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetBracketCutoffsResponse::_internal_mutable_bracket_cutoffs() {
  return &_impl_.bracket_cutoffs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetBracketCutoffsResponse::mutable_bracket_cutoffs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetBracketCutoffsResponse.bracket_cutoffs)
  return _internal_mutable_bracket_cutoffs();
}

// -------------------------------------------------------------------

// SetBracketCutoffsRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetBracketCutoffsRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetBracketCutoffsRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetBracketCutoffsRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetBracketCutoffsRequest.org_id)
  return _internal_org_id();
}
inline void SetBracketCutoffsRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetBracketCutoffsRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetBracketCutoffsRequest.org_id)
}

// repeated float bracket_cutoffs = 2 [json_name = "bracketCutoffs"];
inline int SetBracketCutoffsRequest::_internal_bracket_cutoffs_size() const {
  return _impl_.bracket_cutoffs_.size();
}
inline int SetBracketCutoffsRequest::bracket_cutoffs_size() const {
  return _internal_bracket_cutoffs_size();
}
inline void SetBracketCutoffsRequest::clear_bracket_cutoffs() {
  _impl_.bracket_cutoffs_.Clear();
}
inline float SetBracketCutoffsRequest::_internal_bracket_cutoffs(int index) const {
  return _impl_.bracket_cutoffs_.Get(index);
}
inline float SetBracketCutoffsRequest::bracket_cutoffs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetBracketCutoffsRequest.bracket_cutoffs)
  return _internal_bracket_cutoffs(index);
}
inline void SetBracketCutoffsRequest::set_bracket_cutoffs(int index, float value) {
  _impl_.bracket_cutoffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetBracketCutoffsRequest.bracket_cutoffs)
}
inline void SetBracketCutoffsRequest::_internal_add_bracket_cutoffs(float value) {
  _impl_.bracket_cutoffs_.Add(value);
}
inline void SetBracketCutoffsRequest::add_bracket_cutoffs(float value) {
  _internal_add_bracket_cutoffs(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SetBracketCutoffsRequest.bracket_cutoffs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetBracketCutoffsRequest::_internal_bracket_cutoffs() const {
  return _impl_.bracket_cutoffs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetBracketCutoffsRequest::bracket_cutoffs() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SetBracketCutoffsRequest.bracket_cutoffs)
  return _internal_bracket_cutoffs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetBracketCutoffsRequest::_internal_mutable_bracket_cutoffs() {
  return &_impl_.bracket_cutoffs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetBracketCutoffsRequest::mutable_bracket_cutoffs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SetBracketCutoffsRequest.bracket_cutoffs)
  return _internal_mutable_bracket_cutoffs();
}

// -------------------------------------------------------------------

// SetBracketCutoffsResponse

// -------------------------------------------------------------------

// GetBracketRatesRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetBracketRatesRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetBracketRatesRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetBracketRatesRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetBracketRatesRequest.org_id)
  return _internal_org_id();
}
inline void GetBracketRatesRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetBracketRatesRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetBracketRatesRequest.org_id)
}

// -------------------------------------------------------------------

// GetBracketRatesResponse

// repeated float bracket_rates = 1 [json_name = "bracketRates"];
inline int GetBracketRatesResponse::_internal_bracket_rates_size() const {
  return _impl_.bracket_rates_.size();
}
inline int GetBracketRatesResponse::bracket_rates_size() const {
  return _internal_bracket_rates_size();
}
inline void GetBracketRatesResponse::clear_bracket_rates() {
  _impl_.bracket_rates_.Clear();
}
inline float GetBracketRatesResponse::_internal_bracket_rates(int index) const {
  return _impl_.bracket_rates_.Get(index);
}
inline float GetBracketRatesResponse::bracket_rates(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetBracketRatesResponse.bracket_rates)
  return _internal_bracket_rates(index);
}
inline void GetBracketRatesResponse::set_bracket_rates(int index, float value) {
  _impl_.bracket_rates_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetBracketRatesResponse.bracket_rates)
}
inline void GetBracketRatesResponse::_internal_add_bracket_rates(float value) {
  _impl_.bracket_rates_.Add(value);
}
inline void GetBracketRatesResponse::add_bracket_rates(float value) {
  _internal_add_bracket_rates(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetBracketRatesResponse.bracket_rates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetBracketRatesResponse::_internal_bracket_rates() const {
  return _impl_.bracket_rates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetBracketRatesResponse::bracket_rates() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetBracketRatesResponse.bracket_rates)
  return _internal_bracket_rates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetBracketRatesResponse::_internal_mutable_bracket_rates() {
  return &_impl_.bracket_rates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetBracketRatesResponse::mutable_bracket_rates() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetBracketRatesResponse.bracket_rates)
  return _internal_mutable_bracket_rates();
}

// -------------------------------------------------------------------

// SetBracketRatesRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetBracketRatesRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetBracketRatesRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetBracketRatesRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetBracketRatesRequest.org_id)
  return _internal_org_id();
}
inline void SetBracketRatesRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetBracketRatesRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetBracketRatesRequest.org_id)
}

// repeated float bracket_rates = 2 [json_name = "bracketRates"];
inline int SetBracketRatesRequest::_internal_bracket_rates_size() const {
  return _impl_.bracket_rates_.size();
}
inline int SetBracketRatesRequest::bracket_rates_size() const {
  return _internal_bracket_rates_size();
}
inline void SetBracketRatesRequest::clear_bracket_rates() {
  _impl_.bracket_rates_.Clear();
}
inline float SetBracketRatesRequest::_internal_bracket_rates(int index) const {
  return _impl_.bracket_rates_.Get(index);
}
inline float SetBracketRatesRequest::bracket_rates(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetBracketRatesRequest.bracket_rates)
  return _internal_bracket_rates(index);
}
inline void SetBracketRatesRequest::set_bracket_rates(int index, float value) {
  _impl_.bracket_rates_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetBracketRatesRequest.bracket_rates)
}
inline void SetBracketRatesRequest::_internal_add_bracket_rates(float value) {
  _impl_.bracket_rates_.Add(value);
}
inline void SetBracketRatesRequest::add_bracket_rates(float value) {
  _internal_add_bracket_rates(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SetBracketRatesRequest.bracket_rates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetBracketRatesRequest::_internal_bracket_rates() const {
  return _impl_.bracket_rates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetBracketRatesRequest::bracket_rates() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SetBracketRatesRequest.bracket_rates)
  return _internal_bracket_rates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetBracketRatesRequest::_internal_mutable_bracket_rates() {
  return &_impl_.bracket_rates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetBracketRatesRequest::mutable_bracket_rates() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SetBracketRatesRequest.bracket_rates)
  return _internal_mutable_bracket_rates();
}

// -------------------------------------------------------------------

// SetBracketRatesResponse

// -------------------------------------------------------------------

// CalculateTaxesDueRequest

// int32 government_id = 1 [json_name = "governmentId"];
inline void CalculateTaxesDueRequest::clear_government_id() {
  _impl_.government_id_ = 0;
}
inline int32_t CalculateTaxesDueRequest::_internal_government_id() const {
  return _impl_.government_id_;
}
inline int32_t CalculateTaxesDueRequest::government_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateTaxesDueRequest.government_id)
  return _internal_government_id();
}
inline void CalculateTaxesDueRequest::_internal_set_government_id(int32_t value) {
  
  _impl_.government_id_ = value;
}
inline void CalculateTaxesDueRequest::set_government_id(int32_t value) {
  _internal_set_government_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateTaxesDueRequest.government_id)
}

// repeated int32 agent_ids = 2 [json_name = "agentIds"];
inline int CalculateTaxesDueRequest::_internal_agent_ids_size() const {
  return _impl_.agent_ids_.size();
}
inline int CalculateTaxesDueRequest::agent_ids_size() const {
  return _internal_agent_ids_size();
}
inline void CalculateTaxesDueRequest::clear_agent_ids() {
  _impl_.agent_ids_.Clear();
}
inline int32_t CalculateTaxesDueRequest::_internal_agent_ids(int index) const {
  return _impl_.agent_ids_.Get(index);
}
inline int32_t CalculateTaxesDueRequest::agent_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateTaxesDueRequest.agent_ids)
  return _internal_agent_ids(index);
}
inline void CalculateTaxesDueRequest::set_agent_ids(int index, int32_t value) {
  _impl_.agent_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateTaxesDueRequest.agent_ids)
}
inline void CalculateTaxesDueRequest::_internal_add_agent_ids(int32_t value) {
  _impl_.agent_ids_.Add(value);
}
inline void CalculateTaxesDueRequest::add_agent_ids(int32_t value) {
  _internal_add_agent_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.CalculateTaxesDueRequest.agent_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateTaxesDueRequest::_internal_agent_ids() const {
  return _impl_.agent_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateTaxesDueRequest::agent_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.CalculateTaxesDueRequest.agent_ids)
  return _internal_agent_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateTaxesDueRequest::_internal_mutable_agent_ids() {
  return &_impl_.agent_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateTaxesDueRequest::mutable_agent_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.CalculateTaxesDueRequest.agent_ids)
  return _internal_mutable_agent_ids();
}

// repeated float incomes = 3 [json_name = "incomes"];
inline int CalculateTaxesDueRequest::_internal_incomes_size() const {
  return _impl_.incomes_.size();
}
inline int CalculateTaxesDueRequest::incomes_size() const {
  return _internal_incomes_size();
}
inline void CalculateTaxesDueRequest::clear_incomes() {
  _impl_.incomes_.Clear();
}
inline float CalculateTaxesDueRequest::_internal_incomes(int index) const {
  return _impl_.incomes_.Get(index);
}
inline float CalculateTaxesDueRequest::incomes(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateTaxesDueRequest.incomes)
  return _internal_incomes(index);
}
inline void CalculateTaxesDueRequest::set_incomes(int index, float value) {
  _impl_.incomes_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateTaxesDueRequest.incomes)
}
inline void CalculateTaxesDueRequest::_internal_add_incomes(float value) {
  _impl_.incomes_.Add(value);
}
inline void CalculateTaxesDueRequest::add_incomes(float value) {
  _internal_add_incomes(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.CalculateTaxesDueRequest.incomes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateTaxesDueRequest::_internal_incomes() const {
  return _impl_.incomes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateTaxesDueRequest::incomes() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.CalculateTaxesDueRequest.incomes)
  return _internal_incomes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateTaxesDueRequest::_internal_mutable_incomes() {
  return &_impl_.incomes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateTaxesDueRequest::mutable_incomes() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.CalculateTaxesDueRequest.incomes)
  return _internal_mutable_incomes();
}

// bool enable_redistribution = 4 [json_name = "enableRedistribution"];
inline void CalculateTaxesDueRequest::clear_enable_redistribution() {
  _impl_.enable_redistribution_ = false;
}
inline bool CalculateTaxesDueRequest::_internal_enable_redistribution() const {
  return _impl_.enable_redistribution_;
}
inline bool CalculateTaxesDueRequest::enable_redistribution() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateTaxesDueRequest.enable_redistribution)
  return _internal_enable_redistribution();
}
inline void CalculateTaxesDueRequest::_internal_set_enable_redistribution(bool value) {
  
  _impl_.enable_redistribution_ = value;
}
inline void CalculateTaxesDueRequest::set_enable_redistribution(bool value) {
  _internal_set_enable_redistribution(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateTaxesDueRequest.enable_redistribution)
}

// -------------------------------------------------------------------

// CalculateTaxesDueResponse

// float taxes_due = 1 [json_name = "taxesDue"];
inline void CalculateTaxesDueResponse::clear_taxes_due() {
  _impl_.taxes_due_ = 0;
}
inline float CalculateTaxesDueResponse::_internal_taxes_due() const {
  return _impl_.taxes_due_;
}
inline float CalculateTaxesDueResponse::taxes_due() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateTaxesDueResponse.taxes_due)
  return _internal_taxes_due();
}
inline void CalculateTaxesDueResponse::_internal_set_taxes_due(float value) {
  
  _impl_.taxes_due_ = value;
}
inline void CalculateTaxesDueResponse::set_taxes_due(float value) {
  _internal_set_taxes_due(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateTaxesDueResponse.taxes_due)
}

// repeated float updated_incomes = 2 [json_name = "updatedIncomes"];
inline int CalculateTaxesDueResponse::_internal_updated_incomes_size() const {
  return _impl_.updated_incomes_.size();
}
inline int CalculateTaxesDueResponse::updated_incomes_size() const {
  return _internal_updated_incomes_size();
}
inline void CalculateTaxesDueResponse::clear_updated_incomes() {
  _impl_.updated_incomes_.Clear();
}
inline float CalculateTaxesDueResponse::_internal_updated_incomes(int index) const {
  return _impl_.updated_incomes_.Get(index);
}
inline float CalculateTaxesDueResponse::updated_incomes(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateTaxesDueResponse.updated_incomes)
  return _internal_updated_incomes(index);
}
inline void CalculateTaxesDueResponse::set_updated_incomes(int index, float value) {
  _impl_.updated_incomes_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateTaxesDueResponse.updated_incomes)
}
inline void CalculateTaxesDueResponse::_internal_add_updated_incomes(float value) {
  _impl_.updated_incomes_.Add(value);
}
inline void CalculateTaxesDueResponse::add_updated_incomes(float value) {
  _internal_add_updated_incomes(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.CalculateTaxesDueResponse.updated_incomes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateTaxesDueResponse::_internal_updated_incomes() const {
  return _impl_.updated_incomes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateTaxesDueResponse::updated_incomes() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.CalculateTaxesDueResponse.updated_incomes)
  return _internal_updated_incomes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateTaxesDueResponse::_internal_mutable_updated_incomes() {
  return &_impl_.updated_incomes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateTaxesDueResponse::mutable_updated_incomes() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.CalculateTaxesDueResponse.updated_incomes)
  return _internal_mutable_updated_incomes();
}

// -------------------------------------------------------------------

// CalculateConsumptionRequest

// repeated int32 firm_ids = 1 [json_name = "firmIds"];
inline int CalculateConsumptionRequest::_internal_firm_ids_size() const {
  return _impl_.firm_ids_.size();
}
inline int CalculateConsumptionRequest::firm_ids_size() const {
  return _internal_firm_ids_size();
}
inline void CalculateConsumptionRequest::clear_firm_ids() {
  _impl_.firm_ids_.Clear();
}
inline int32_t CalculateConsumptionRequest::_internal_firm_ids(int index) const {
  return _impl_.firm_ids_.Get(index);
}
inline int32_t CalculateConsumptionRequest::firm_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateConsumptionRequest.firm_ids)
  return _internal_firm_ids(index);
}
inline void CalculateConsumptionRequest::set_firm_ids(int index, int32_t value) {
  _impl_.firm_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateConsumptionRequest.firm_ids)
}
inline void CalculateConsumptionRequest::_internal_add_firm_ids(int32_t value) {
  _impl_.firm_ids_.Add(value);
}
inline void CalculateConsumptionRequest::add_firm_ids(int32_t value) {
  _internal_add_firm_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.CalculateConsumptionRequest.firm_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateConsumptionRequest::_internal_firm_ids() const {
  return _impl_.firm_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateConsumptionRequest::firm_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.CalculateConsumptionRequest.firm_ids)
  return _internal_firm_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateConsumptionRequest::_internal_mutable_firm_ids() {
  return &_impl_.firm_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateConsumptionRequest::mutable_firm_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.CalculateConsumptionRequest.firm_ids)
  return _internal_mutable_firm_ids();
}

// int32 agent_id = 2 [json_name = "agentId"];
inline void CalculateConsumptionRequest::clear_agent_id() {
  _impl_.agent_id_ = 0;
}
inline int32_t CalculateConsumptionRequest::_internal_agent_id() const {
  return _impl_.agent_id_;
}
inline int32_t CalculateConsumptionRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateConsumptionRequest.agent_id)
  return _internal_agent_id();
}
inline void CalculateConsumptionRequest::_internal_set_agent_id(int32_t value) {
  
  _impl_.agent_id_ = value;
}
inline void CalculateConsumptionRequest::set_agent_id(int32_t value) {
  _internal_set_agent_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateConsumptionRequest.agent_id)
}

// repeated int32 demands = 3 [json_name = "demands"];
inline int CalculateConsumptionRequest::_internal_demands_size() const {
  return _impl_.demands_.size();
}
inline int CalculateConsumptionRequest::demands_size() const {
  return _internal_demands_size();
}
inline void CalculateConsumptionRequest::clear_demands() {
  _impl_.demands_.Clear();
}
inline int32_t CalculateConsumptionRequest::_internal_demands(int index) const {
  return _impl_.demands_.Get(index);
}
inline int32_t CalculateConsumptionRequest::demands(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateConsumptionRequest.demands)
  return _internal_demands(index);
}
inline void CalculateConsumptionRequest::set_demands(int index, int32_t value) {
  _impl_.demands_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateConsumptionRequest.demands)
}
inline void CalculateConsumptionRequest::_internal_add_demands(int32_t value) {
  _impl_.demands_.Add(value);
}
inline void CalculateConsumptionRequest::add_demands(int32_t value) {
  _internal_add_demands(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.CalculateConsumptionRequest.demands)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateConsumptionRequest::_internal_demands() const {
  return _impl_.demands_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateConsumptionRequest::demands() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.CalculateConsumptionRequest.demands)
  return _internal_demands();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateConsumptionRequest::_internal_mutable_demands() {
  return &_impl_.demands_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateConsumptionRequest::mutable_demands() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.CalculateConsumptionRequest.demands)
  return _internal_mutable_demands();
}

// -------------------------------------------------------------------

// CalculateConsumptionResponse

// float actual_consumption = 1 [json_name = "actualConsumption"];
inline void CalculateConsumptionResponse::clear_actual_consumption() {
  _impl_.actual_consumption_ = 0;
}
inline float CalculateConsumptionResponse::_internal_actual_consumption() const {
  return _impl_.actual_consumption_;
}
inline float CalculateConsumptionResponse::actual_consumption() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateConsumptionResponse.actual_consumption)
  return _internal_actual_consumption();
}
inline void CalculateConsumptionResponse::_internal_set_actual_consumption(float value) {
  
  _impl_.actual_consumption_ = value;
}
inline void CalculateConsumptionResponse::set_actual_consumption(float value) {
  _internal_set_actual_consumption(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateConsumptionResponse.actual_consumption)
}

// -------------------------------------------------------------------

// CalculateInterestRequest

// int32 bank_id = 1 [json_name = "bankId"];
inline void CalculateInterestRequest::clear_bank_id() {
  _impl_.bank_id_ = 0;
}
inline int32_t CalculateInterestRequest::_internal_bank_id() const {
  return _impl_.bank_id_;
}
inline int32_t CalculateInterestRequest::bank_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateInterestRequest.bank_id)
  return _internal_bank_id();
}
inline void CalculateInterestRequest::_internal_set_bank_id(int32_t value) {
  
  _impl_.bank_id_ = value;
}
inline void CalculateInterestRequest::set_bank_id(int32_t value) {
  _internal_set_bank_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateInterestRequest.bank_id)
}

// repeated int32 agent_ids = 2 [json_name = "agentIds"];
inline int CalculateInterestRequest::_internal_agent_ids_size() const {
  return _impl_.agent_ids_.size();
}
inline int CalculateInterestRequest::agent_ids_size() const {
  return _internal_agent_ids_size();
}
inline void CalculateInterestRequest::clear_agent_ids() {
  _impl_.agent_ids_.Clear();
}
inline int32_t CalculateInterestRequest::_internal_agent_ids(int index) const {
  return _impl_.agent_ids_.Get(index);
}
inline int32_t CalculateInterestRequest::agent_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateInterestRequest.agent_ids)
  return _internal_agent_ids(index);
}
inline void CalculateInterestRequest::set_agent_ids(int index, int32_t value) {
  _impl_.agent_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateInterestRequest.agent_ids)
}
inline void CalculateInterestRequest::_internal_add_agent_ids(int32_t value) {
  _impl_.agent_ids_.Add(value);
}
inline void CalculateInterestRequest::add_agent_ids(int32_t value) {
  _internal_add_agent_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.CalculateInterestRequest.agent_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateInterestRequest::_internal_agent_ids() const {
  return _impl_.agent_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CalculateInterestRequest::agent_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.CalculateInterestRequest.agent_ids)
  return _internal_agent_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateInterestRequest::_internal_mutable_agent_ids() {
  return &_impl_.agent_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CalculateInterestRequest::mutable_agent_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.CalculateInterestRequest.agent_ids)
  return _internal_mutable_agent_ids();
}

// -------------------------------------------------------------------

// CalculateInterestResponse

// float total_interest = 1 [json_name = "totalInterest"];
inline void CalculateInterestResponse::clear_total_interest() {
  _impl_.total_interest_ = 0;
}
inline float CalculateInterestResponse::_internal_total_interest() const {
  return _impl_.total_interest_;
}
inline float CalculateInterestResponse::total_interest() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateInterestResponse.total_interest)
  return _internal_total_interest();
}
inline void CalculateInterestResponse::_internal_set_total_interest(float value) {
  
  _impl_.total_interest_ = value;
}
inline void CalculateInterestResponse::set_total_interest(float value) {
  _internal_set_total_interest(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateInterestResponse.total_interest)
}

// repeated float updated_currencies = 2 [json_name = "updatedCurrencies"];
inline int CalculateInterestResponse::_internal_updated_currencies_size() const {
  return _impl_.updated_currencies_.size();
}
inline int CalculateInterestResponse::updated_currencies_size() const {
  return _internal_updated_currencies_size();
}
inline void CalculateInterestResponse::clear_updated_currencies() {
  _impl_.updated_currencies_.Clear();
}
inline float CalculateInterestResponse::_internal_updated_currencies(int index) const {
  return _impl_.updated_currencies_.Get(index);
}
inline float CalculateInterestResponse::updated_currencies(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateInterestResponse.updated_currencies)
  return _internal_updated_currencies(index);
}
inline void CalculateInterestResponse::set_updated_currencies(int index, float value) {
  _impl_.updated_currencies_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateInterestResponse.updated_currencies)
}
inline void CalculateInterestResponse::_internal_add_updated_currencies(float value) {
  _impl_.updated_currencies_.Add(value);
}
inline void CalculateInterestResponse::add_updated_currencies(float value) {
  _internal_add_updated_currencies(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.CalculateInterestResponse.updated_currencies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateInterestResponse::_internal_updated_currencies() const {
  return _impl_.updated_currencies_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CalculateInterestResponse::updated_currencies() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.CalculateInterestResponse.updated_currencies)
  return _internal_updated_currencies();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateInterestResponse::_internal_mutable_updated_currencies() {
  return &_impl_.updated_currencies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CalculateInterestResponse::mutable_updated_currencies() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.CalculateInterestResponse.updated_currencies)
  return _internal_mutable_updated_currencies();
}

// -------------------------------------------------------------------

// SaveEconomyEntitiesRequest

// string file_path = 1 [json_name = "filePath"];
inline void SaveEconomyEntitiesRequest::clear_file_path() {
  _impl_.file_path_.ClearToEmpty();
}
inline const std::string& SaveEconomyEntitiesRequest::file_path() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SaveEconomyEntitiesRequest.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveEconomyEntitiesRequest::set_file_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.economy.v2.SaveEconomyEntitiesRequest.file_path)
}
inline std::string* SaveEconomyEntitiesRequest::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.SaveEconomyEntitiesRequest.file_path)
  return _s;
}
inline const std::string& SaveEconomyEntitiesRequest::_internal_file_path() const {
  return _impl_.file_path_.Get();
}
inline void SaveEconomyEntitiesRequest::_internal_set_file_path(const std::string& value) {
  
  _impl_.file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* SaveEconomyEntitiesRequest::_internal_mutable_file_path() {
  
  return _impl_.file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* SaveEconomyEntitiesRequest::release_file_path() {
  // @@protoc_insertion_point(field_release:city.economy.v2.SaveEconomyEntitiesRequest.file_path)
  return _impl_.file_path_.Release();
}
inline void SaveEconomyEntitiesRequest::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  _impl_.file_path_.SetAllocated(file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_path_.IsDefault()) {
    _impl_.file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.SaveEconomyEntitiesRequest.file_path)
}

// -------------------------------------------------------------------

// SaveEconomyEntitiesResponse

// repeated int32 org_ids = 1 [json_name = "orgIds"];
inline int SaveEconomyEntitiesResponse::_internal_org_ids_size() const {
  return _impl_.org_ids_.size();
}
inline int SaveEconomyEntitiesResponse::org_ids_size() const {
  return _internal_org_ids_size();
}
inline void SaveEconomyEntitiesResponse::clear_org_ids() {
  _impl_.org_ids_.Clear();
}
inline int32_t SaveEconomyEntitiesResponse::_internal_org_ids(int index) const {
  return _impl_.org_ids_.Get(index);
}
inline int32_t SaveEconomyEntitiesResponse::org_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SaveEconomyEntitiesResponse.org_ids)
  return _internal_org_ids(index);
}
inline void SaveEconomyEntitiesResponse::set_org_ids(int index, int32_t value) {
  _impl_.org_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SaveEconomyEntitiesResponse.org_ids)
}
inline void SaveEconomyEntitiesResponse::_internal_add_org_ids(int32_t value) {
  _impl_.org_ids_.Add(value);
}
inline void SaveEconomyEntitiesResponse::add_org_ids(int32_t value) {
  _internal_add_org_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SaveEconomyEntitiesResponse.org_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SaveEconomyEntitiesResponse::_internal_org_ids() const {
  return _impl_.org_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SaveEconomyEntitiesResponse::org_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SaveEconomyEntitiesResponse.org_ids)
  return _internal_org_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SaveEconomyEntitiesResponse::_internal_mutable_org_ids() {
  return &_impl_.org_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SaveEconomyEntitiesResponse::mutable_org_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SaveEconomyEntitiesResponse.org_ids)
  return _internal_mutable_org_ids();
}

// repeated int32 agent_ids = 2 [json_name = "agentIds"];
inline int SaveEconomyEntitiesResponse::_internal_agent_ids_size() const {
  return _impl_.agent_ids_.size();
}
inline int SaveEconomyEntitiesResponse::agent_ids_size() const {
  return _internal_agent_ids_size();
}
inline void SaveEconomyEntitiesResponse::clear_agent_ids() {
  _impl_.agent_ids_.Clear();
}
inline int32_t SaveEconomyEntitiesResponse::_internal_agent_ids(int index) const {
  return _impl_.agent_ids_.Get(index);
}
inline int32_t SaveEconomyEntitiesResponse::agent_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SaveEconomyEntitiesResponse.agent_ids)
  return _internal_agent_ids(index);
}
inline void SaveEconomyEntitiesResponse::set_agent_ids(int index, int32_t value) {
  _impl_.agent_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SaveEconomyEntitiesResponse.agent_ids)
}
inline void SaveEconomyEntitiesResponse::_internal_add_agent_ids(int32_t value) {
  _impl_.agent_ids_.Add(value);
}
inline void SaveEconomyEntitiesResponse::add_agent_ids(int32_t value) {
  _internal_add_agent_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SaveEconomyEntitiesResponse.agent_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SaveEconomyEntitiesResponse::_internal_agent_ids() const {
  return _impl_.agent_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SaveEconomyEntitiesResponse::agent_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SaveEconomyEntitiesResponse.agent_ids)
  return _internal_agent_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SaveEconomyEntitiesResponse::_internal_mutable_agent_ids() {
  return &_impl_.agent_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SaveEconomyEntitiesResponse::mutable_agent_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SaveEconomyEntitiesResponse.agent_ids)
  return _internal_mutable_agent_ids();
}

// -------------------------------------------------------------------

// LoadEconomyEntitiesRequest

// string file_path = 1 [json_name = "filePath"];
inline void LoadEconomyEntitiesRequest::clear_file_path() {
  _impl_.file_path_.ClearToEmpty();
}
inline const std::string& LoadEconomyEntitiesRequest::file_path() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.LoadEconomyEntitiesRequest.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoadEconomyEntitiesRequest::set_file_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.economy.v2.LoadEconomyEntitiesRequest.file_path)
}
inline std::string* LoadEconomyEntitiesRequest::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.LoadEconomyEntitiesRequest.file_path)
  return _s;
}
inline const std::string& LoadEconomyEntitiesRequest::_internal_file_path() const {
  return _impl_.file_path_.Get();
}
inline void LoadEconomyEntitiesRequest::_internal_set_file_path(const std::string& value) {
  
  _impl_.file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* LoadEconomyEntitiesRequest::_internal_mutable_file_path() {
  
  return _impl_.file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* LoadEconomyEntitiesRequest::release_file_path() {
  // @@protoc_insertion_point(field_release:city.economy.v2.LoadEconomyEntitiesRequest.file_path)
  return _impl_.file_path_.Release();
}
inline void LoadEconomyEntitiesRequest::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  _impl_.file_path_.SetAllocated(file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_path_.IsDefault()) {
    _impl_.file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.LoadEconomyEntitiesRequest.file_path)
}

// -------------------------------------------------------------------

// LoadEconomyEntitiesResponse

// repeated int32 org_ids = 1 [json_name = "orgIds"];
inline int LoadEconomyEntitiesResponse::_internal_org_ids_size() const {
  return _impl_.org_ids_.size();
}
inline int LoadEconomyEntitiesResponse::org_ids_size() const {
  return _internal_org_ids_size();
}
inline void LoadEconomyEntitiesResponse::clear_org_ids() {
  _impl_.org_ids_.Clear();
}
inline int32_t LoadEconomyEntitiesResponse::_internal_org_ids(int index) const {
  return _impl_.org_ids_.Get(index);
}
inline int32_t LoadEconomyEntitiesResponse::org_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.LoadEconomyEntitiesResponse.org_ids)
  return _internal_org_ids(index);
}
inline void LoadEconomyEntitiesResponse::set_org_ids(int index, int32_t value) {
  _impl_.org_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.LoadEconomyEntitiesResponse.org_ids)
}
inline void LoadEconomyEntitiesResponse::_internal_add_org_ids(int32_t value) {
  _impl_.org_ids_.Add(value);
}
inline void LoadEconomyEntitiesResponse::add_org_ids(int32_t value) {
  _internal_add_org_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.LoadEconomyEntitiesResponse.org_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LoadEconomyEntitiesResponse::_internal_org_ids() const {
  return _impl_.org_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LoadEconomyEntitiesResponse::org_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.LoadEconomyEntitiesResponse.org_ids)
  return _internal_org_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LoadEconomyEntitiesResponse::_internal_mutable_org_ids() {
  return &_impl_.org_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LoadEconomyEntitiesResponse::mutable_org_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.LoadEconomyEntitiesResponse.org_ids)
  return _internal_mutable_org_ids();
}

// repeated int32 agent_ids = 2 [json_name = "agentIds"];
inline int LoadEconomyEntitiesResponse::_internal_agent_ids_size() const {
  return _impl_.agent_ids_.size();
}
inline int LoadEconomyEntitiesResponse::agent_ids_size() const {
  return _internal_agent_ids_size();
}
inline void LoadEconomyEntitiesResponse::clear_agent_ids() {
  _impl_.agent_ids_.Clear();
}
inline int32_t LoadEconomyEntitiesResponse::_internal_agent_ids(int index) const {
  return _impl_.agent_ids_.Get(index);
}
inline int32_t LoadEconomyEntitiesResponse::agent_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.LoadEconomyEntitiesResponse.agent_ids)
  return _internal_agent_ids(index);
}
inline void LoadEconomyEntitiesResponse::set_agent_ids(int index, int32_t value) {
  _impl_.agent_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.LoadEconomyEntitiesResponse.agent_ids)
}
inline void LoadEconomyEntitiesResponse::_internal_add_agent_ids(int32_t value) {
  _impl_.agent_ids_.Add(value);
}
inline void LoadEconomyEntitiesResponse::add_agent_ids(int32_t value) {
  _internal_add_agent_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.LoadEconomyEntitiesResponse.agent_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LoadEconomyEntitiesResponse::_internal_agent_ids() const {
  return _impl_.agent_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LoadEconomyEntitiesResponse::agent_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.LoadEconomyEntitiesResponse.agent_ids)
  return _internal_agent_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LoadEconomyEntitiesResponse::_internal_mutable_agent_ids() {
  return &_impl_.agent_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LoadEconomyEntitiesResponse::mutable_agent_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.LoadEconomyEntitiesResponse.agent_ids)
  return _internal_mutable_agent_ids();
}

// -------------------------------------------------------------------

// GetConsumptionCurrencyRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetConsumptionCurrencyRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetConsumptionCurrencyRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetConsumptionCurrencyRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetConsumptionCurrencyRequest.org_id)
  return _internal_org_id();
}
inline void GetConsumptionCurrencyRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetConsumptionCurrencyRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetConsumptionCurrencyRequest.org_id)
}

// -------------------------------------------------------------------

// GetConsumptionCurrencyResponse

// repeated float consumption_currency = 1 [json_name = "consumptionCurrency"];
inline int GetConsumptionCurrencyResponse::_internal_consumption_currency_size() const {
  return _impl_.consumption_currency_.size();
}
inline int GetConsumptionCurrencyResponse::consumption_currency_size() const {
  return _internal_consumption_currency_size();
}
inline void GetConsumptionCurrencyResponse::clear_consumption_currency() {
  _impl_.consumption_currency_.Clear();
}
inline float GetConsumptionCurrencyResponse::_internal_consumption_currency(int index) const {
  return _impl_.consumption_currency_.Get(index);
}
inline float GetConsumptionCurrencyResponse::consumption_currency(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetConsumptionCurrencyResponse.consumption_currency)
  return _internal_consumption_currency(index);
}
inline void GetConsumptionCurrencyResponse::set_consumption_currency(int index, float value) {
  _impl_.consumption_currency_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetConsumptionCurrencyResponse.consumption_currency)
}
inline void GetConsumptionCurrencyResponse::_internal_add_consumption_currency(float value) {
  _impl_.consumption_currency_.Add(value);
}
inline void GetConsumptionCurrencyResponse::add_consumption_currency(float value) {
  _internal_add_consumption_currency(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetConsumptionCurrencyResponse.consumption_currency)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetConsumptionCurrencyResponse::_internal_consumption_currency() const {
  return _impl_.consumption_currency_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetConsumptionCurrencyResponse::consumption_currency() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetConsumptionCurrencyResponse.consumption_currency)
  return _internal_consumption_currency();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetConsumptionCurrencyResponse::_internal_mutable_consumption_currency() {
  return &_impl_.consumption_currency_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetConsumptionCurrencyResponse::mutable_consumption_currency() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetConsumptionCurrencyResponse.consumption_currency)
  return _internal_mutable_consumption_currency();
}

// -------------------------------------------------------------------

// SetConsumptionCurrencyRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetConsumptionCurrencyRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetConsumptionCurrencyRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetConsumptionCurrencyRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetConsumptionCurrencyRequest.org_id)
  return _internal_org_id();
}
inline void SetConsumptionCurrencyRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetConsumptionCurrencyRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetConsumptionCurrencyRequest.org_id)
}

// repeated float consumption_currency = 2 [json_name = "consumptionCurrency"];
inline int SetConsumptionCurrencyRequest::_internal_consumption_currency_size() const {
  return _impl_.consumption_currency_.size();
}
inline int SetConsumptionCurrencyRequest::consumption_currency_size() const {
  return _internal_consumption_currency_size();
}
inline void SetConsumptionCurrencyRequest::clear_consumption_currency() {
  _impl_.consumption_currency_.Clear();
}
inline float SetConsumptionCurrencyRequest::_internal_consumption_currency(int index) const {
  return _impl_.consumption_currency_.Get(index);
}
inline float SetConsumptionCurrencyRequest::consumption_currency(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetConsumptionCurrencyRequest.consumption_currency)
  return _internal_consumption_currency(index);
}
inline void SetConsumptionCurrencyRequest::set_consumption_currency(int index, float value) {
  _impl_.consumption_currency_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetConsumptionCurrencyRequest.consumption_currency)
}
inline void SetConsumptionCurrencyRequest::_internal_add_consumption_currency(float value) {
  _impl_.consumption_currency_.Add(value);
}
inline void SetConsumptionCurrencyRequest::add_consumption_currency(float value) {
  _internal_add_consumption_currency(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SetConsumptionCurrencyRequest.consumption_currency)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetConsumptionCurrencyRequest::_internal_consumption_currency() const {
  return _impl_.consumption_currency_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetConsumptionCurrencyRequest::consumption_currency() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SetConsumptionCurrencyRequest.consumption_currency)
  return _internal_consumption_currency();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetConsumptionCurrencyRequest::_internal_mutable_consumption_currency() {
  return &_impl_.consumption_currency_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetConsumptionCurrencyRequest::mutable_consumption_currency() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SetConsumptionCurrencyRequest.consumption_currency)
  return _internal_mutable_consumption_currency();
}

// -------------------------------------------------------------------

// SetConsumptionCurrencyResponse

// -------------------------------------------------------------------

// GetConsumptionPropensityRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetConsumptionPropensityRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetConsumptionPropensityRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetConsumptionPropensityRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetConsumptionPropensityRequest.org_id)
  return _internal_org_id();
}
inline void GetConsumptionPropensityRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetConsumptionPropensityRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetConsumptionPropensityRequest.org_id)
}

// -------------------------------------------------------------------

// GetConsumptionPropensityResponse

// repeated float consumption_propensity = 1 [json_name = "consumptionPropensity"];
inline int GetConsumptionPropensityResponse::_internal_consumption_propensity_size() const {
  return _impl_.consumption_propensity_.size();
}
inline int GetConsumptionPropensityResponse::consumption_propensity_size() const {
  return _internal_consumption_propensity_size();
}
inline void GetConsumptionPropensityResponse::clear_consumption_propensity() {
  _impl_.consumption_propensity_.Clear();
}
inline float GetConsumptionPropensityResponse::_internal_consumption_propensity(int index) const {
  return _impl_.consumption_propensity_.Get(index);
}
inline float GetConsumptionPropensityResponse::consumption_propensity(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetConsumptionPropensityResponse.consumption_propensity)
  return _internal_consumption_propensity(index);
}
inline void GetConsumptionPropensityResponse::set_consumption_propensity(int index, float value) {
  _impl_.consumption_propensity_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetConsumptionPropensityResponse.consumption_propensity)
}
inline void GetConsumptionPropensityResponse::_internal_add_consumption_propensity(float value) {
  _impl_.consumption_propensity_.Add(value);
}
inline void GetConsumptionPropensityResponse::add_consumption_propensity(float value) {
  _internal_add_consumption_propensity(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetConsumptionPropensityResponse.consumption_propensity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetConsumptionPropensityResponse::_internal_consumption_propensity() const {
  return _impl_.consumption_propensity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetConsumptionPropensityResponse::consumption_propensity() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetConsumptionPropensityResponse.consumption_propensity)
  return _internal_consumption_propensity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetConsumptionPropensityResponse::_internal_mutable_consumption_propensity() {
  return &_impl_.consumption_propensity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetConsumptionPropensityResponse::mutable_consumption_propensity() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetConsumptionPropensityResponse.consumption_propensity)
  return _internal_mutable_consumption_propensity();
}

// -------------------------------------------------------------------

// SetConsumptionPropensityRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetConsumptionPropensityRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetConsumptionPropensityRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetConsumptionPropensityRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetConsumptionPropensityRequest.org_id)
  return _internal_org_id();
}
inline void SetConsumptionPropensityRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetConsumptionPropensityRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetConsumptionPropensityRequest.org_id)
}

// repeated float consumption_propensity = 2 [json_name = "consumptionPropensity"];
inline int SetConsumptionPropensityRequest::_internal_consumption_propensity_size() const {
  return _impl_.consumption_propensity_.size();
}
inline int SetConsumptionPropensityRequest::consumption_propensity_size() const {
  return _internal_consumption_propensity_size();
}
inline void SetConsumptionPropensityRequest::clear_consumption_propensity() {
  _impl_.consumption_propensity_.Clear();
}
inline float SetConsumptionPropensityRequest::_internal_consumption_propensity(int index) const {
  return _impl_.consumption_propensity_.Get(index);
}
inline float SetConsumptionPropensityRequest::consumption_propensity(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetConsumptionPropensityRequest.consumption_propensity)
  return _internal_consumption_propensity(index);
}
inline void SetConsumptionPropensityRequest::set_consumption_propensity(int index, float value) {
  _impl_.consumption_propensity_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetConsumptionPropensityRequest.consumption_propensity)
}
inline void SetConsumptionPropensityRequest::_internal_add_consumption_propensity(float value) {
  _impl_.consumption_propensity_.Add(value);
}
inline void SetConsumptionPropensityRequest::add_consumption_propensity(float value) {
  _internal_add_consumption_propensity(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SetConsumptionPropensityRequest.consumption_propensity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetConsumptionPropensityRequest::_internal_consumption_propensity() const {
  return _impl_.consumption_propensity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetConsumptionPropensityRequest::consumption_propensity() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SetConsumptionPropensityRequest.consumption_propensity)
  return _internal_consumption_propensity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetConsumptionPropensityRequest::_internal_mutable_consumption_propensity() {
  return &_impl_.consumption_propensity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetConsumptionPropensityRequest::mutable_consumption_propensity() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SetConsumptionPropensityRequest.consumption_propensity)
  return _internal_mutable_consumption_propensity();
}

// -------------------------------------------------------------------

// SetConsumptionPropensityResponse

// -------------------------------------------------------------------

// GetIncomeCurrencyRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetIncomeCurrencyRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetIncomeCurrencyRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetIncomeCurrencyRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetIncomeCurrencyRequest.org_id)
  return _internal_org_id();
}
inline void GetIncomeCurrencyRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetIncomeCurrencyRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetIncomeCurrencyRequest.org_id)
}

// -------------------------------------------------------------------

// GetIncomeCurrencyResponse

// repeated float income_currency = 1 [json_name = "incomeCurrency"];
inline int GetIncomeCurrencyResponse::_internal_income_currency_size() const {
  return _impl_.income_currency_.size();
}
inline int GetIncomeCurrencyResponse::income_currency_size() const {
  return _internal_income_currency_size();
}
inline void GetIncomeCurrencyResponse::clear_income_currency() {
  _impl_.income_currency_.Clear();
}
inline float GetIncomeCurrencyResponse::_internal_income_currency(int index) const {
  return _impl_.income_currency_.Get(index);
}
inline float GetIncomeCurrencyResponse::income_currency(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetIncomeCurrencyResponse.income_currency)
  return _internal_income_currency(index);
}
inline void GetIncomeCurrencyResponse::set_income_currency(int index, float value) {
  _impl_.income_currency_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetIncomeCurrencyResponse.income_currency)
}
inline void GetIncomeCurrencyResponse::_internal_add_income_currency(float value) {
  _impl_.income_currency_.Add(value);
}
inline void GetIncomeCurrencyResponse::add_income_currency(float value) {
  _internal_add_income_currency(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetIncomeCurrencyResponse.income_currency)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetIncomeCurrencyResponse::_internal_income_currency() const {
  return _impl_.income_currency_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetIncomeCurrencyResponse::income_currency() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetIncomeCurrencyResponse.income_currency)
  return _internal_income_currency();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetIncomeCurrencyResponse::_internal_mutable_income_currency() {
  return &_impl_.income_currency_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetIncomeCurrencyResponse::mutable_income_currency() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetIncomeCurrencyResponse.income_currency)
  return _internal_mutable_income_currency();
}

// -------------------------------------------------------------------

// SetIncomeCurrencyRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetIncomeCurrencyRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetIncomeCurrencyRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetIncomeCurrencyRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetIncomeCurrencyRequest.org_id)
  return _internal_org_id();
}
inline void SetIncomeCurrencyRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetIncomeCurrencyRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetIncomeCurrencyRequest.org_id)
}

// repeated float income_currency = 2 [json_name = "incomeCurrency"];
inline int SetIncomeCurrencyRequest::_internal_income_currency_size() const {
  return _impl_.income_currency_.size();
}
inline int SetIncomeCurrencyRequest::income_currency_size() const {
  return _internal_income_currency_size();
}
inline void SetIncomeCurrencyRequest::clear_income_currency() {
  _impl_.income_currency_.Clear();
}
inline float SetIncomeCurrencyRequest::_internal_income_currency(int index) const {
  return _impl_.income_currency_.Get(index);
}
inline float SetIncomeCurrencyRequest::income_currency(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetIncomeCurrencyRequest.income_currency)
  return _internal_income_currency(index);
}
inline void SetIncomeCurrencyRequest::set_income_currency(int index, float value) {
  _impl_.income_currency_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetIncomeCurrencyRequest.income_currency)
}
inline void SetIncomeCurrencyRequest::_internal_add_income_currency(float value) {
  _impl_.income_currency_.Add(value);
}
inline void SetIncomeCurrencyRequest::add_income_currency(float value) {
  _internal_add_income_currency(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SetIncomeCurrencyRequest.income_currency)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetIncomeCurrencyRequest::_internal_income_currency() const {
  return _impl_.income_currency_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetIncomeCurrencyRequest::income_currency() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SetIncomeCurrencyRequest.income_currency)
  return _internal_income_currency();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetIncomeCurrencyRequest::_internal_mutable_income_currency() {
  return &_impl_.income_currency_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetIncomeCurrencyRequest::mutable_income_currency() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SetIncomeCurrencyRequest.income_currency)
  return _internal_mutable_income_currency();
}

// -------------------------------------------------------------------

// SetIncomeCurrencyResponse

// -------------------------------------------------------------------

// GetDepressionRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetDepressionRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetDepressionRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetDepressionRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetDepressionRequest.org_id)
  return _internal_org_id();
}
inline void GetDepressionRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetDepressionRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetDepressionRequest.org_id)
}

// -------------------------------------------------------------------

// GetDepressionResponse

// repeated float depression = 1 [json_name = "depression"];
inline int GetDepressionResponse::_internal_depression_size() const {
  return _impl_.depression_.size();
}
inline int GetDepressionResponse::depression_size() const {
  return _internal_depression_size();
}
inline void GetDepressionResponse::clear_depression() {
  _impl_.depression_.Clear();
}
inline float GetDepressionResponse::_internal_depression(int index) const {
  return _impl_.depression_.Get(index);
}
inline float GetDepressionResponse::depression(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetDepressionResponse.depression)
  return _internal_depression(index);
}
inline void GetDepressionResponse::set_depression(int index, float value) {
  _impl_.depression_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetDepressionResponse.depression)
}
inline void GetDepressionResponse::_internal_add_depression(float value) {
  _impl_.depression_.Add(value);
}
inline void GetDepressionResponse::add_depression(float value) {
  _internal_add_depression(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetDepressionResponse.depression)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetDepressionResponse::_internal_depression() const {
  return _impl_.depression_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetDepressionResponse::depression() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetDepressionResponse.depression)
  return _internal_depression();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetDepressionResponse::_internal_mutable_depression() {
  return &_impl_.depression_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetDepressionResponse::mutable_depression() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetDepressionResponse.depression)
  return _internal_mutable_depression();
}

// -------------------------------------------------------------------

// SetDepressionRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetDepressionRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetDepressionRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetDepressionRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetDepressionRequest.org_id)
  return _internal_org_id();
}
inline void SetDepressionRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetDepressionRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetDepressionRequest.org_id)
}

// repeated float depression = 2 [json_name = "depression"];
inline int SetDepressionRequest::_internal_depression_size() const {
  return _impl_.depression_.size();
}
inline int SetDepressionRequest::depression_size() const {
  return _internal_depression_size();
}
inline void SetDepressionRequest::clear_depression() {
  _impl_.depression_.Clear();
}
inline float SetDepressionRequest::_internal_depression(int index) const {
  return _impl_.depression_.Get(index);
}
inline float SetDepressionRequest::depression(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetDepressionRequest.depression)
  return _internal_depression(index);
}
inline void SetDepressionRequest::set_depression(int index, float value) {
  _impl_.depression_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetDepressionRequest.depression)
}
inline void SetDepressionRequest::_internal_add_depression(float value) {
  _impl_.depression_.Add(value);
}
inline void SetDepressionRequest::add_depression(float value) {
  _internal_add_depression(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SetDepressionRequest.depression)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetDepressionRequest::_internal_depression() const {
  return _impl_.depression_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetDepressionRequest::depression() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SetDepressionRequest.depression)
  return _internal_depression();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetDepressionRequest::_internal_mutable_depression() {
  return &_impl_.depression_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetDepressionRequest::mutable_depression() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SetDepressionRequest.depression)
  return _internal_mutable_depression();
}

// -------------------------------------------------------------------

// SetDepressionResponse

// -------------------------------------------------------------------

// GetLocusControlRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetLocusControlRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetLocusControlRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetLocusControlRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetLocusControlRequest.org_id)
  return _internal_org_id();
}
inline void GetLocusControlRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetLocusControlRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetLocusControlRequest.org_id)
}

// -------------------------------------------------------------------

// GetLocusControlResponse

// repeated float locus_control = 1 [json_name = "locusControl"];
inline int GetLocusControlResponse::_internal_locus_control_size() const {
  return _impl_.locus_control_.size();
}
inline int GetLocusControlResponse::locus_control_size() const {
  return _internal_locus_control_size();
}
inline void GetLocusControlResponse::clear_locus_control() {
  _impl_.locus_control_.Clear();
}
inline float GetLocusControlResponse::_internal_locus_control(int index) const {
  return _impl_.locus_control_.Get(index);
}
inline float GetLocusControlResponse::locus_control(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetLocusControlResponse.locus_control)
  return _internal_locus_control(index);
}
inline void GetLocusControlResponse::set_locus_control(int index, float value) {
  _impl_.locus_control_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetLocusControlResponse.locus_control)
}
inline void GetLocusControlResponse::_internal_add_locus_control(float value) {
  _impl_.locus_control_.Add(value);
}
inline void GetLocusControlResponse::add_locus_control(float value) {
  _internal_add_locus_control(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetLocusControlResponse.locus_control)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetLocusControlResponse::_internal_locus_control() const {
  return _impl_.locus_control_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetLocusControlResponse::locus_control() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetLocusControlResponse.locus_control)
  return _internal_locus_control();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetLocusControlResponse::_internal_mutable_locus_control() {
  return &_impl_.locus_control_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetLocusControlResponse::mutable_locus_control() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetLocusControlResponse.locus_control)
  return _internal_mutable_locus_control();
}

// -------------------------------------------------------------------

// SetLocusControlRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetLocusControlRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetLocusControlRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetLocusControlRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetLocusControlRequest.org_id)
  return _internal_org_id();
}
inline void SetLocusControlRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetLocusControlRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetLocusControlRequest.org_id)
}

// repeated float locus_control = 2 [json_name = "locusControl"];
inline int SetLocusControlRequest::_internal_locus_control_size() const {
  return _impl_.locus_control_.size();
}
inline int SetLocusControlRequest::locus_control_size() const {
  return _internal_locus_control_size();
}
inline void SetLocusControlRequest::clear_locus_control() {
  _impl_.locus_control_.Clear();
}
inline float SetLocusControlRequest::_internal_locus_control(int index) const {
  return _impl_.locus_control_.Get(index);
}
inline float SetLocusControlRequest::locus_control(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetLocusControlRequest.locus_control)
  return _internal_locus_control(index);
}
inline void SetLocusControlRequest::set_locus_control(int index, float value) {
  _impl_.locus_control_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetLocusControlRequest.locus_control)
}
inline void SetLocusControlRequest::_internal_add_locus_control(float value) {
  _impl_.locus_control_.Add(value);
}
inline void SetLocusControlRequest::add_locus_control(float value) {
  _internal_add_locus_control(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SetLocusControlRequest.locus_control)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetLocusControlRequest::_internal_locus_control() const {
  return _impl_.locus_control_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetLocusControlRequest::locus_control() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SetLocusControlRequest.locus_control)
  return _internal_locus_control();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetLocusControlRequest::_internal_mutable_locus_control() {
  return &_impl_.locus_control_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetLocusControlRequest::mutable_locus_control() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SetLocusControlRequest.locus_control)
  return _internal_mutable_locus_control();
}

// -------------------------------------------------------------------

// SetLocusControlResponse

// -------------------------------------------------------------------

// GetWorkingHoursRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetWorkingHoursRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetWorkingHoursRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetWorkingHoursRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetWorkingHoursRequest.org_id)
  return _internal_org_id();
}
inline void GetWorkingHoursRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetWorkingHoursRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetWorkingHoursRequest.org_id)
}

// -------------------------------------------------------------------

// GetWorkingHoursResponse

// repeated float working_hours = 1 [json_name = "workingHours"];
inline int GetWorkingHoursResponse::_internal_working_hours_size() const {
  return _impl_.working_hours_.size();
}
inline int GetWorkingHoursResponse::working_hours_size() const {
  return _internal_working_hours_size();
}
inline void GetWorkingHoursResponse::clear_working_hours() {
  _impl_.working_hours_.Clear();
}
inline float GetWorkingHoursResponse::_internal_working_hours(int index) const {
  return _impl_.working_hours_.Get(index);
}
inline float GetWorkingHoursResponse::working_hours(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetWorkingHoursResponse.working_hours)
  return _internal_working_hours(index);
}
inline void GetWorkingHoursResponse::set_working_hours(int index, float value) {
  _impl_.working_hours_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetWorkingHoursResponse.working_hours)
}
inline void GetWorkingHoursResponse::_internal_add_working_hours(float value) {
  _impl_.working_hours_.Add(value);
}
inline void GetWorkingHoursResponse::add_working_hours(float value) {
  _internal_add_working_hours(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetWorkingHoursResponse.working_hours)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetWorkingHoursResponse::_internal_working_hours() const {
  return _impl_.working_hours_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetWorkingHoursResponse::working_hours() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetWorkingHoursResponse.working_hours)
  return _internal_working_hours();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetWorkingHoursResponse::_internal_mutable_working_hours() {
  return &_impl_.working_hours_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetWorkingHoursResponse::mutable_working_hours() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetWorkingHoursResponse.working_hours)
  return _internal_mutable_working_hours();
}

// -------------------------------------------------------------------

// SetWorkingHoursRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetWorkingHoursRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetWorkingHoursRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetWorkingHoursRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetWorkingHoursRequest.org_id)
  return _internal_org_id();
}
inline void SetWorkingHoursRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetWorkingHoursRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetWorkingHoursRequest.org_id)
}

// repeated float working_hours = 2 [json_name = "workingHours"];
inline int SetWorkingHoursRequest::_internal_working_hours_size() const {
  return _impl_.working_hours_.size();
}
inline int SetWorkingHoursRequest::working_hours_size() const {
  return _internal_working_hours_size();
}
inline void SetWorkingHoursRequest::clear_working_hours() {
  _impl_.working_hours_.Clear();
}
inline float SetWorkingHoursRequest::_internal_working_hours(int index) const {
  return _impl_.working_hours_.Get(index);
}
inline float SetWorkingHoursRequest::working_hours(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetWorkingHoursRequest.working_hours)
  return _internal_working_hours(index);
}
inline void SetWorkingHoursRequest::set_working_hours(int index, float value) {
  _impl_.working_hours_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetWorkingHoursRequest.working_hours)
}
inline void SetWorkingHoursRequest::_internal_add_working_hours(float value) {
  _impl_.working_hours_.Add(value);
}
inline void SetWorkingHoursRequest::add_working_hours(float value) {
  _internal_add_working_hours(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SetWorkingHoursRequest.working_hours)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetWorkingHoursRequest::_internal_working_hours() const {
  return _impl_.working_hours_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SetWorkingHoursRequest::working_hours() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SetWorkingHoursRequest.working_hours)
  return _internal_working_hours();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetWorkingHoursRequest::_internal_mutable_working_hours() {
  return &_impl_.working_hours_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SetWorkingHoursRequest::mutable_working_hours() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SetWorkingHoursRequest.working_hours)
  return _internal_mutable_working_hours();
}

// -------------------------------------------------------------------

// SetWorkingHoursResponse

// -------------------------------------------------------------------

// GetOrgEntityIdsRequest

// .city.economy.v2.OrgType type = 1 [json_name = "type"];
inline void GetOrgEntityIdsRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::economy::v2::OrgType GetOrgEntityIdsRequest::_internal_type() const {
  return static_cast< ::city::economy::v2::OrgType >(_impl_.type_);
}
inline ::city::economy::v2::OrgType GetOrgEntityIdsRequest::type() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetOrgEntityIdsRequest.type)
  return _internal_type();
}
inline void GetOrgEntityIdsRequest::_internal_set_type(::city::economy::v2::OrgType value) {
  
  _impl_.type_ = value;
}
inline void GetOrgEntityIdsRequest::set_type(::city::economy::v2::OrgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetOrgEntityIdsRequest.type)
}

// -------------------------------------------------------------------

// GetOrgEntityIdsResponse

// repeated int32 org_ids = 1 [json_name = "orgIds"];
inline int GetOrgEntityIdsResponse::_internal_org_ids_size() const {
  return _impl_.org_ids_.size();
}
inline int GetOrgEntityIdsResponse::org_ids_size() const {
  return _internal_org_ids_size();
}
inline void GetOrgEntityIdsResponse::clear_org_ids() {
  _impl_.org_ids_.Clear();
}
inline int32_t GetOrgEntityIdsResponse::_internal_org_ids(int index) const {
  return _impl_.org_ids_.Get(index);
}
inline int32_t GetOrgEntityIdsResponse::org_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetOrgEntityIdsResponse.org_ids)
  return _internal_org_ids(index);
}
inline void GetOrgEntityIdsResponse::set_org_ids(int index, int32_t value) {
  _impl_.org_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetOrgEntityIdsResponse.org_ids)
}
inline void GetOrgEntityIdsResponse::_internal_add_org_ids(int32_t value) {
  _impl_.org_ids_.Add(value);
}
inline void GetOrgEntityIdsResponse::add_org_ids(int32_t value) {
  _internal_add_org_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetOrgEntityIdsResponse.org_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetOrgEntityIdsResponse::_internal_org_ids() const {
  return _impl_.org_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetOrgEntityIdsResponse::org_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetOrgEntityIdsResponse.org_ids)
  return _internal_org_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetOrgEntityIdsResponse::_internal_mutable_org_ids() {
  return &_impl_.org_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetOrgEntityIdsResponse::mutable_org_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetOrgEntityIdsResponse.org_ids)
  return _internal_mutable_org_ids();
}

// -------------------------------------------------------------------

// AddInventoryRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void AddInventoryRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t AddInventoryRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t AddInventoryRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddInventoryRequest.org_id)
  return _internal_org_id();
}
inline void AddInventoryRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void AddInventoryRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddInventoryRequest.org_id)
}

// int32 delta_inventory = 2 [json_name = "deltaInventory"];
inline void AddInventoryRequest::clear_delta_inventory() {
  _impl_.delta_inventory_ = 0;
}
inline int32_t AddInventoryRequest::_internal_delta_inventory() const {
  return _impl_.delta_inventory_;
}
inline int32_t AddInventoryRequest::delta_inventory() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddInventoryRequest.delta_inventory)
  return _internal_delta_inventory();
}
inline void AddInventoryRequest::_internal_set_delta_inventory(int32_t value) {
  
  _impl_.delta_inventory_ = value;
}
inline void AddInventoryRequest::set_delta_inventory(int32_t value) {
  _internal_set_delta_inventory(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddInventoryRequest.delta_inventory)
}

// -------------------------------------------------------------------

// AddInventoryResponse

// int32 inventory = 1 [json_name = "inventory"];
inline void AddInventoryResponse::clear_inventory() {
  _impl_.inventory_ = 0;
}
inline int32_t AddInventoryResponse::_internal_inventory() const {
  return _impl_.inventory_;
}
inline int32_t AddInventoryResponse::inventory() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddInventoryResponse.inventory)
  return _internal_inventory();
}
inline void AddInventoryResponse::_internal_set_inventory(int32_t value) {
  
  _impl_.inventory_ = value;
}
inline void AddInventoryResponse::set_inventory(int32_t value) {
  _internal_set_inventory(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddInventoryResponse.inventory)
}

// -------------------------------------------------------------------

// AddPriceRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void AddPriceRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t AddPriceRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t AddPriceRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddPriceRequest.org_id)
  return _internal_org_id();
}
inline void AddPriceRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void AddPriceRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddPriceRequest.org_id)
}

// float delta_price = 2 [json_name = "deltaPrice"];
inline void AddPriceRequest::clear_delta_price() {
  _impl_.delta_price_ = 0;
}
inline float AddPriceRequest::_internal_delta_price() const {
  return _impl_.delta_price_;
}
inline float AddPriceRequest::delta_price() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddPriceRequest.delta_price)
  return _internal_delta_price();
}
inline void AddPriceRequest::_internal_set_delta_price(float value) {
  
  _impl_.delta_price_ = value;
}
inline void AddPriceRequest::set_delta_price(float value) {
  _internal_set_delta_price(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddPriceRequest.delta_price)
}

// -------------------------------------------------------------------

// AddPriceResponse

// float price = 1 [json_name = "price"];
inline void AddPriceResponse::clear_price() {
  _impl_.price_ = 0;
}
inline float AddPriceResponse::_internal_price() const {
  return _impl_.price_;
}
inline float AddPriceResponse::price() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddPriceResponse.price)
  return _internal_price();
}
inline void AddPriceResponse::_internal_set_price(float value) {
  
  _impl_.price_ = value;
}
inline void AddPriceResponse::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddPriceResponse.price)
}

// -------------------------------------------------------------------

// AddCurrencyRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void AddCurrencyRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t AddCurrencyRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t AddCurrencyRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddCurrencyRequest.org_id)
  return _internal_org_id();
}
inline void AddCurrencyRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void AddCurrencyRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddCurrencyRequest.org_id)
}

// float delta_currency = 2 [json_name = "deltaCurrency"];
inline void AddCurrencyRequest::clear_delta_currency() {
  _impl_.delta_currency_ = 0;
}
inline float AddCurrencyRequest::_internal_delta_currency() const {
  return _impl_.delta_currency_;
}
inline float AddCurrencyRequest::delta_currency() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddCurrencyRequest.delta_currency)
  return _internal_delta_currency();
}
inline void AddCurrencyRequest::_internal_set_delta_currency(float value) {
  
  _impl_.delta_currency_ = value;
}
inline void AddCurrencyRequest::set_delta_currency(float value) {
  _internal_set_delta_currency(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddCurrencyRequest.delta_currency)
}

// -------------------------------------------------------------------

// AddCurrencyResponse

// float currency = 1 [json_name = "currency"];
inline void AddCurrencyResponse::clear_currency() {
  _impl_.currency_ = 0;
}
inline float AddCurrencyResponse::_internal_currency() const {
  return _impl_.currency_;
}
inline float AddCurrencyResponse::currency() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddCurrencyResponse.currency)
  return _internal_currency();
}
inline void AddCurrencyResponse::_internal_set_currency(float value) {
  
  _impl_.currency_ = value;
}
inline void AddCurrencyResponse::set_currency(float value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddCurrencyResponse.currency)
}

// -------------------------------------------------------------------

// AddInterestRateRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void AddInterestRateRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t AddInterestRateRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t AddInterestRateRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddInterestRateRequest.org_id)
  return _internal_org_id();
}
inline void AddInterestRateRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void AddInterestRateRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddInterestRateRequest.org_id)
}

// float delta_interest_rate = 2 [json_name = "deltaInterestRate"];
inline void AddInterestRateRequest::clear_delta_interest_rate() {
  _impl_.delta_interest_rate_ = 0;
}
inline float AddInterestRateRequest::_internal_delta_interest_rate() const {
  return _impl_.delta_interest_rate_;
}
inline float AddInterestRateRequest::delta_interest_rate() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddInterestRateRequest.delta_interest_rate)
  return _internal_delta_interest_rate();
}
inline void AddInterestRateRequest::_internal_set_delta_interest_rate(float value) {
  
  _impl_.delta_interest_rate_ = value;
}
inline void AddInterestRateRequest::set_delta_interest_rate(float value) {
  _internal_set_delta_interest_rate(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddInterestRateRequest.delta_interest_rate)
}

// -------------------------------------------------------------------

// AddInterestRateResponse

// float interest_rate = 1 [json_name = "interestRate"];
inline void AddInterestRateResponse::clear_interest_rate() {
  _impl_.interest_rate_ = 0;
}
inline float AddInterestRateResponse::_internal_interest_rate() const {
  return _impl_.interest_rate_;
}
inline float AddInterestRateResponse::interest_rate() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddInterestRateResponse.interest_rate)
  return _internal_interest_rate();
}
inline void AddInterestRateResponse::_internal_set_interest_rate(float value) {
  
  _impl_.interest_rate_ = value;
}
inline void AddInterestRateResponse::set_interest_rate(float value) {
  _internal_set_interest_rate(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddInterestRateResponse.interest_rate)
}

// -------------------------------------------------------------------

// GetEmployeesRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetEmployeesRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetEmployeesRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetEmployeesRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetEmployeesRequest.org_id)
  return _internal_org_id();
}
inline void GetEmployeesRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetEmployeesRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetEmployeesRequest.org_id)
}

// -------------------------------------------------------------------

// GetEmployeesResponse

// repeated int32 employee_ids = 1 [json_name = "employeeIds"];
inline int GetEmployeesResponse::_internal_employee_ids_size() const {
  return _impl_.employee_ids_.size();
}
inline int GetEmployeesResponse::employee_ids_size() const {
  return _internal_employee_ids_size();
}
inline void GetEmployeesResponse::clear_employee_ids() {
  _impl_.employee_ids_.Clear();
}
inline int32_t GetEmployeesResponse::_internal_employee_ids(int index) const {
  return _impl_.employee_ids_.Get(index);
}
inline int32_t GetEmployeesResponse::employee_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetEmployeesResponse.employee_ids)
  return _internal_employee_ids(index);
}
inline void GetEmployeesResponse::set_employee_ids(int index, int32_t value) {
  _impl_.employee_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetEmployeesResponse.employee_ids)
}
inline void GetEmployeesResponse::_internal_add_employee_ids(int32_t value) {
  _impl_.employee_ids_.Add(value);
}
inline void GetEmployeesResponse::add_employee_ids(int32_t value) {
  _internal_add_employee_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetEmployeesResponse.employee_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetEmployeesResponse::_internal_employee_ids() const {
  return _impl_.employee_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetEmployeesResponse::employee_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetEmployeesResponse.employee_ids)
  return _internal_employee_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetEmployeesResponse::_internal_mutable_employee_ids() {
  return &_impl_.employee_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetEmployeesResponse::mutable_employee_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetEmployeesResponse.employee_ids)
  return _internal_mutable_employee_ids();
}

// -------------------------------------------------------------------

// SetEmployeesRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetEmployeesRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetEmployeesRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetEmployeesRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetEmployeesRequest.org_id)
  return _internal_org_id();
}
inline void SetEmployeesRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetEmployeesRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetEmployeesRequest.org_id)
}

// repeated int32 employee_ids = 2 [json_name = "employeeIds"];
inline int SetEmployeesRequest::_internal_employee_ids_size() const {
  return _impl_.employee_ids_.size();
}
inline int SetEmployeesRequest::employee_ids_size() const {
  return _internal_employee_ids_size();
}
inline void SetEmployeesRequest::clear_employee_ids() {
  _impl_.employee_ids_.Clear();
}
inline int32_t SetEmployeesRequest::_internal_employee_ids(int index) const {
  return _impl_.employee_ids_.Get(index);
}
inline int32_t SetEmployeesRequest::employee_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetEmployeesRequest.employee_ids)
  return _internal_employee_ids(index);
}
inline void SetEmployeesRequest::set_employee_ids(int index, int32_t value) {
  _impl_.employee_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetEmployeesRequest.employee_ids)
}
inline void SetEmployeesRequest::_internal_add_employee_ids(int32_t value) {
  _impl_.employee_ids_.Add(value);
}
inline void SetEmployeesRequest::add_employee_ids(int32_t value) {
  _internal_add_employee_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SetEmployeesRequest.employee_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SetEmployeesRequest::_internal_employee_ids() const {
  return _impl_.employee_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SetEmployeesRequest::employee_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SetEmployeesRequest.employee_ids)
  return _internal_employee_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SetEmployeesRequest::_internal_mutable_employee_ids() {
  return &_impl_.employee_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SetEmployeesRequest::mutable_employee_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SetEmployeesRequest.employee_ids)
  return _internal_mutable_employee_ids();
}

// -------------------------------------------------------------------

// SetEmployeesResponse

// -------------------------------------------------------------------

// AddEmployeeRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void AddEmployeeRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t AddEmployeeRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t AddEmployeeRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddEmployeeRequest.org_id)
  return _internal_org_id();
}
inline void AddEmployeeRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void AddEmployeeRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddEmployeeRequest.org_id)
}

// int32 employee_id = 2 [json_name = "employeeId"];
inline void AddEmployeeRequest::clear_employee_id() {
  _impl_.employee_id_ = 0;
}
inline int32_t AddEmployeeRequest::_internal_employee_id() const {
  return _impl_.employee_id_;
}
inline int32_t AddEmployeeRequest::employee_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddEmployeeRequest.employee_id)
  return _internal_employee_id();
}
inline void AddEmployeeRequest::_internal_set_employee_id(int32_t value) {
  
  _impl_.employee_id_ = value;
}
inline void AddEmployeeRequest::set_employee_id(int32_t value) {
  _internal_set_employee_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddEmployeeRequest.employee_id)
}

// -------------------------------------------------------------------

// AddEmployeeResponse

// -------------------------------------------------------------------

// RemoveEmployeeRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void RemoveEmployeeRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t RemoveEmployeeRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t RemoveEmployeeRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.RemoveEmployeeRequest.org_id)
  return _internal_org_id();
}
inline void RemoveEmployeeRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void RemoveEmployeeRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.RemoveEmployeeRequest.org_id)
}

// int32 employee_id = 2 [json_name = "employeeId"];
inline void RemoveEmployeeRequest::clear_employee_id() {
  _impl_.employee_id_ = 0;
}
inline int32_t RemoveEmployeeRequest::_internal_employee_id() const {
  return _impl_.employee_id_;
}
inline int32_t RemoveEmployeeRequest::employee_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.RemoveEmployeeRequest.employee_id)
  return _internal_employee_id();
}
inline void RemoveEmployeeRequest::_internal_set_employee_id(int32_t value) {
  
  _impl_.employee_id_ = value;
}
inline void RemoveEmployeeRequest::set_employee_id(int32_t value) {
  _internal_set_employee_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.RemoveEmployeeRequest.employee_id)
}

// -------------------------------------------------------------------

// RemoveEmployeeResponse

// -------------------------------------------------------------------

// GetCitizensRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void GetCitizensRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t GetCitizensRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t GetCitizensRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetCitizensRequest.org_id)
  return _internal_org_id();
}
inline void GetCitizensRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void GetCitizensRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetCitizensRequest.org_id)
}

// -------------------------------------------------------------------

// GetCitizensResponse

// repeated int32 citizen_ids = 1 [json_name = "citizenIds"];
inline int GetCitizensResponse::_internal_citizen_ids_size() const {
  return _impl_.citizen_ids_.size();
}
inline int GetCitizensResponse::citizen_ids_size() const {
  return _internal_citizen_ids_size();
}
inline void GetCitizensResponse::clear_citizen_ids() {
  _impl_.citizen_ids_.Clear();
}
inline int32_t GetCitizensResponse::_internal_citizen_ids(int index) const {
  return _impl_.citizen_ids_.Get(index);
}
inline int32_t GetCitizensResponse::citizen_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetCitizensResponse.citizen_ids)
  return _internal_citizen_ids(index);
}
inline void GetCitizensResponse::set_citizen_ids(int index, int32_t value) {
  _impl_.citizen_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetCitizensResponse.citizen_ids)
}
inline void GetCitizensResponse::_internal_add_citizen_ids(int32_t value) {
  _impl_.citizen_ids_.Add(value);
}
inline void GetCitizensResponse::add_citizen_ids(int32_t value) {
  _internal_add_citizen_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.GetCitizensResponse.citizen_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetCitizensResponse::_internal_citizen_ids() const {
  return _impl_.citizen_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetCitizensResponse::citizen_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.GetCitizensResponse.citizen_ids)
  return _internal_citizen_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetCitizensResponse::_internal_mutable_citizen_ids() {
  return &_impl_.citizen_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetCitizensResponse::mutable_citizen_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.GetCitizensResponse.citizen_ids)
  return _internal_mutable_citizen_ids();
}

// -------------------------------------------------------------------

// SetCitizensRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void SetCitizensRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t SetCitizensRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t SetCitizensRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetCitizensRequest.org_id)
  return _internal_org_id();
}
inline void SetCitizensRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void SetCitizensRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetCitizensRequest.org_id)
}

// repeated int32 citizen_ids = 2 [json_name = "citizenIds"];
inline int SetCitizensRequest::_internal_citizen_ids_size() const {
  return _impl_.citizen_ids_.size();
}
inline int SetCitizensRequest::citizen_ids_size() const {
  return _internal_citizen_ids_size();
}
inline void SetCitizensRequest::clear_citizen_ids() {
  _impl_.citizen_ids_.Clear();
}
inline int32_t SetCitizensRequest::_internal_citizen_ids(int index) const {
  return _impl_.citizen_ids_.Get(index);
}
inline int32_t SetCitizensRequest::citizen_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.SetCitizensRequest.citizen_ids)
  return _internal_citizen_ids(index);
}
inline void SetCitizensRequest::set_citizen_ids(int index, int32_t value) {
  _impl_.citizen_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.SetCitizensRequest.citizen_ids)
}
inline void SetCitizensRequest::_internal_add_citizen_ids(int32_t value) {
  _impl_.citizen_ids_.Add(value);
}
inline void SetCitizensRequest::add_citizen_ids(int32_t value) {
  _internal_add_citizen_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.SetCitizensRequest.citizen_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SetCitizensRequest::_internal_citizen_ids() const {
  return _impl_.citizen_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SetCitizensRequest::citizen_ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.SetCitizensRequest.citizen_ids)
  return _internal_citizen_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SetCitizensRequest::_internal_mutable_citizen_ids() {
  return &_impl_.citizen_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SetCitizensRequest::mutable_citizen_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.SetCitizensRequest.citizen_ids)
  return _internal_mutable_citizen_ids();
}

// -------------------------------------------------------------------

// SetCitizensResponse

// -------------------------------------------------------------------

// AddCitizenRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void AddCitizenRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t AddCitizenRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t AddCitizenRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddCitizenRequest.org_id)
  return _internal_org_id();
}
inline void AddCitizenRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void AddCitizenRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddCitizenRequest.org_id)
}

// int32 citizen_id = 2 [json_name = "citizenId"];
inline void AddCitizenRequest::clear_citizen_id() {
  _impl_.citizen_id_ = 0;
}
inline int32_t AddCitizenRequest::_internal_citizen_id() const {
  return _impl_.citizen_id_;
}
inline int32_t AddCitizenRequest::citizen_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.AddCitizenRequest.citizen_id)
  return _internal_citizen_id();
}
inline void AddCitizenRequest::_internal_set_citizen_id(int32_t value) {
  
  _impl_.citizen_id_ = value;
}
inline void AddCitizenRequest::set_citizen_id(int32_t value) {
  _internal_set_citizen_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.AddCitizenRequest.citizen_id)
}

// -------------------------------------------------------------------

// AddCitizenResponse

// -------------------------------------------------------------------

// RemoveCitizenRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void RemoveCitizenRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t RemoveCitizenRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t RemoveCitizenRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.RemoveCitizenRequest.org_id)
  return _internal_org_id();
}
inline void RemoveCitizenRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void RemoveCitizenRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.RemoveCitizenRequest.org_id)
}

// int32 citizen_id = 2 [json_name = "citizenId"];
inline void RemoveCitizenRequest::clear_citizen_id() {
  _impl_.citizen_id_ = 0;
}
inline int32_t RemoveCitizenRequest::_internal_citizen_id() const {
  return _impl_.citizen_id_;
}
inline int32_t RemoveCitizenRequest::citizen_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.RemoveCitizenRequest.citizen_id)
  return _internal_citizen_id();
}
inline void RemoveCitizenRequest::_internal_set_citizen_id(int32_t value) {
  
  _impl_.citizen_id_ = value;
}
inline void RemoveCitizenRequest::set_citizen_id(int32_t value) {
  _internal_set_citizen_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.RemoveCitizenRequest.citizen_id)
}

// -------------------------------------------------------------------

// RemoveCitizenResponse

// -------------------------------------------------------------------

// GetAgentRequest

// int32 agent_id = 1 [json_name = "agentId"];
inline void GetAgentRequest::clear_agent_id() {
  _impl_.agent_id_ = 0;
}
inline int32_t GetAgentRequest::_internal_agent_id() const {
  return _impl_.agent_id_;
}
inline int32_t GetAgentRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetAgentRequest.agent_id)
  return _internal_agent_id();
}
inline void GetAgentRequest::_internal_set_agent_id(int32_t value) {
  
  _impl_.agent_id_ = value;
}
inline void GetAgentRequest::set_agent_id(int32_t value) {
  _internal_set_agent_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.GetAgentRequest.agent_id)
}

// -------------------------------------------------------------------

// GetAgentResponse

// .city.economy.v2.Agent agent = 1 [json_name = "agent"];
inline bool GetAgentResponse::_internal_has_agent() const {
  return this != internal_default_instance() && _impl_.agent_ != nullptr;
}
inline bool GetAgentResponse::has_agent() const {
  return _internal_has_agent();
}
inline const ::city::economy::v2::Agent& GetAgentResponse::_internal_agent() const {
  const ::city::economy::v2::Agent* p = _impl_.agent_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::economy::v2::Agent&>(
      ::city::economy::v2::_Agent_default_instance_);
}
inline const ::city::economy::v2::Agent& GetAgentResponse::agent() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.GetAgentResponse.agent)
  return _internal_agent();
}
inline void GetAgentResponse::unsafe_arena_set_allocated_agent(
    ::city::economy::v2::Agent* agent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_);
  }
  _impl_.agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.economy.v2.GetAgentResponse.agent)
}
inline ::city::economy::v2::Agent* GetAgentResponse::release_agent() {
  
  ::city::economy::v2::Agent* temp = _impl_.agent_;
  _impl_.agent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::economy::v2::Agent* GetAgentResponse::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_release:city.economy.v2.GetAgentResponse.agent)
  
  ::city::economy::v2::Agent* temp = _impl_.agent_;
  _impl_.agent_ = nullptr;
  return temp;
}
inline ::city::economy::v2::Agent* GetAgentResponse::_internal_mutable_agent() {
  
  if (_impl_.agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::economy::v2::Agent>(GetArenaForAllocation());
    _impl_.agent_ = p;
  }
  return _impl_.agent_;
}
inline ::city::economy::v2::Agent* GetAgentResponse::mutable_agent() {
  ::city::economy::v2::Agent* _msg = _internal_mutable_agent();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.GetAgentResponse.agent)
  return _msg;
}
inline void GetAgentResponse::set_allocated_agent(::city::economy::v2::Agent* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_);
  }
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent));
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.agent_ = agent;
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.GetAgentResponse.agent)
}

// -------------------------------------------------------------------

// UpdateAgentRequest

// .city.economy.v2.Agent agent = 1 [json_name = "agent"];
inline bool UpdateAgentRequest::_internal_has_agent() const {
  return this != internal_default_instance() && _impl_.agent_ != nullptr;
}
inline bool UpdateAgentRequest::has_agent() const {
  return _internal_has_agent();
}
inline const ::city::economy::v2::Agent& UpdateAgentRequest::_internal_agent() const {
  const ::city::economy::v2::Agent* p = _impl_.agent_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::economy::v2::Agent&>(
      ::city::economy::v2::_Agent_default_instance_);
}
inline const ::city::economy::v2::Agent& UpdateAgentRequest::agent() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.UpdateAgentRequest.agent)
  return _internal_agent();
}
inline void UpdateAgentRequest::unsafe_arena_set_allocated_agent(
    ::city::economy::v2::Agent* agent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_);
  }
  _impl_.agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.economy.v2.UpdateAgentRequest.agent)
}
inline ::city::economy::v2::Agent* UpdateAgentRequest::release_agent() {
  
  ::city::economy::v2::Agent* temp = _impl_.agent_;
  _impl_.agent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::economy::v2::Agent* UpdateAgentRequest::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_release:city.economy.v2.UpdateAgentRequest.agent)
  
  ::city::economy::v2::Agent* temp = _impl_.agent_;
  _impl_.agent_ = nullptr;
  return temp;
}
inline ::city::economy::v2::Agent* UpdateAgentRequest::_internal_mutable_agent() {
  
  if (_impl_.agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::economy::v2::Agent>(GetArenaForAllocation());
    _impl_.agent_ = p;
  }
  return _impl_.agent_;
}
inline ::city::economy::v2::Agent* UpdateAgentRequest::mutable_agent() {
  ::city::economy::v2::Agent* _msg = _internal_mutable_agent();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.UpdateAgentRequest.agent)
  return _msg;
}
inline void UpdateAgentRequest::set_allocated_agent(::city::economy::v2::Agent* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.agent_);
  }
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent));
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.agent_ = agent;
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.UpdateAgentRequest.agent)
}

// -------------------------------------------------------------------

// UpdateAgentResponse

// -------------------------------------------------------------------

// BatchGetRequest

// repeated int32 ids = 1 [json_name = "ids"];
inline int BatchGetRequest::_internal_ids_size() const {
  return _impl_.ids_.size();
}
inline int BatchGetRequest::ids_size() const {
  return _internal_ids_size();
}
inline void BatchGetRequest::clear_ids() {
  _impl_.ids_.Clear();
}
inline int32_t BatchGetRequest::_internal_ids(int index) const {
  return _impl_.ids_.Get(index);
}
inline int32_t BatchGetRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchGetRequest.ids)
  return _internal_ids(index);
}
inline void BatchGetRequest::set_ids(int index, int32_t value) {
  _impl_.ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.BatchGetRequest.ids)
}
inline void BatchGetRequest::_internal_add_ids(int32_t value) {
  _impl_.ids_.Add(value);
}
inline void BatchGetRequest::add_ids(int32_t value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchGetRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BatchGetRequest::_internal_ids() const {
  return _impl_.ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BatchGetRequest::ids() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchGetRequest.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BatchGetRequest::_internal_mutable_ids() {
  return &_impl_.ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BatchGetRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchGetRequest.ids)
  return _internal_mutable_ids();
}

// string type = 2 [json_name = "type"];
inline void BatchGetRequest::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& BatchGetRequest::type() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchGetRequest.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchGetRequest::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.economy.v2.BatchGetRequest.type)
}
inline std::string* BatchGetRequest::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchGetRequest.type)
  return _s;
}
inline const std::string& BatchGetRequest::_internal_type() const {
  return _impl_.type_.Get();
}
inline void BatchGetRequest::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* BatchGetRequest::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* BatchGetRequest::release_type() {
  // @@protoc_insertion_point(field_release:city.economy.v2.BatchGetRequest.type)
  return _impl_.type_.Release();
}
inline void BatchGetRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.economy.v2.BatchGetRequest.type)
}

// -------------------------------------------------------------------

// BatchGetResponse

// repeated .city.economy.v2.Org orgs = 1 [json_name = "orgs"];
inline int BatchGetResponse::_internal_orgs_size() const {
  return _impl_.orgs_.size();
}
inline int BatchGetResponse::orgs_size() const {
  return _internal_orgs_size();
}
inline ::city::economy::v2::Org* BatchGetResponse::mutable_orgs(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchGetResponse.orgs)
  return _impl_.orgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >*
BatchGetResponse::mutable_orgs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchGetResponse.orgs)
  return &_impl_.orgs_;
}
inline const ::city::economy::v2::Org& BatchGetResponse::_internal_orgs(int index) const {
  return _impl_.orgs_.Get(index);
}
inline const ::city::economy::v2::Org& BatchGetResponse::orgs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchGetResponse.orgs)
  return _internal_orgs(index);
}
inline ::city::economy::v2::Org* BatchGetResponse::_internal_add_orgs() {
  return _impl_.orgs_.Add();
}
inline ::city::economy::v2::Org* BatchGetResponse::add_orgs() {
  ::city::economy::v2::Org* _add = _internal_add_orgs();
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchGetResponse.orgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >&
BatchGetResponse::orgs() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchGetResponse.orgs)
  return _impl_.orgs_;
}

// repeated .city.economy.v2.Agent agents = 2 [json_name = "agents"];
inline int BatchGetResponse::_internal_agents_size() const {
  return _impl_.agents_.size();
}
inline int BatchGetResponse::agents_size() const {
  return _internal_agents_size();
}
inline ::city::economy::v2::Agent* BatchGetResponse::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchGetResponse.agents)
  return _impl_.agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >*
BatchGetResponse::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchGetResponse.agents)
  return &_impl_.agents_;
}
inline const ::city::economy::v2::Agent& BatchGetResponse::_internal_agents(int index) const {
  return _impl_.agents_.Get(index);
}
inline const ::city::economy::v2::Agent& BatchGetResponse::agents(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchGetResponse.agents)
  return _internal_agents(index);
}
inline ::city::economy::v2::Agent* BatchGetResponse::_internal_add_agents() {
  return _impl_.agents_.Add();
}
inline ::city::economy::v2::Agent* BatchGetResponse::add_agents() {
  ::city::economy::v2::Agent* _add = _internal_add_agents();
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchGetResponse.agents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >&
BatchGetResponse::agents() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchGetResponse.agents)
  return _impl_.agents_;
}

// -------------------------------------------------------------------

// BatchUpdateRequest

// repeated .city.economy.v2.Org orgs = 1 [json_name = "orgs"];
inline int BatchUpdateRequest::_internal_orgs_size() const {
  return _impl_.orgs_.size();
}
inline int BatchUpdateRequest::orgs_size() const {
  return _internal_orgs_size();
}
inline ::city::economy::v2::Org* BatchUpdateRequest::mutable_orgs(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchUpdateRequest.orgs)
  return _impl_.orgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >*
BatchUpdateRequest::mutable_orgs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchUpdateRequest.orgs)
  return &_impl_.orgs_;
}
inline const ::city::economy::v2::Org& BatchUpdateRequest::_internal_orgs(int index) const {
  return _impl_.orgs_.Get(index);
}
inline const ::city::economy::v2::Org& BatchUpdateRequest::orgs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchUpdateRequest.orgs)
  return _internal_orgs(index);
}
inline ::city::economy::v2::Org* BatchUpdateRequest::_internal_add_orgs() {
  return _impl_.orgs_.Add();
}
inline ::city::economy::v2::Org* BatchUpdateRequest::add_orgs() {
  ::city::economy::v2::Org* _add = _internal_add_orgs();
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchUpdateRequest.orgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Org >&
BatchUpdateRequest::orgs() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchUpdateRequest.orgs)
  return _impl_.orgs_;
}

// repeated .city.economy.v2.Agent agents = 2 [json_name = "agents"];
inline int BatchUpdateRequest::_internal_agents_size() const {
  return _impl_.agents_.size();
}
inline int BatchUpdateRequest::agents_size() const {
  return _internal_agents_size();
}
inline ::city::economy::v2::Agent* BatchUpdateRequest::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchUpdateRequest.agents)
  return _impl_.agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >*
BatchUpdateRequest::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchUpdateRequest.agents)
  return &_impl_.agents_;
}
inline const ::city::economy::v2::Agent& BatchUpdateRequest::_internal_agents(int index) const {
  return _impl_.agents_.Get(index);
}
inline const ::city::economy::v2::Agent& BatchUpdateRequest::agents(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchUpdateRequest.agents)
  return _internal_agents(index);
}
inline ::city::economy::v2::Agent* BatchUpdateRequest::_internal_add_agents() {
  return _impl_.agents_.Add();
}
inline ::city::economy::v2::Agent* BatchUpdateRequest::add_agents() {
  ::city::economy::v2::Agent* _add = _internal_add_agents();
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchUpdateRequest.agents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::Agent >&
BatchUpdateRequest::agents() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchUpdateRequest.agents)
  return _impl_.agents_;
}

// -------------------------------------------------------------------

// BatchUpdateResponse

// -------------------------------------------------------------------

// DeltaUpdateOrgRequest

// int32 org_id = 1 [json_name = "orgId"];
inline void DeltaUpdateOrgRequest::clear_org_id() {
  _impl_.org_id_ = 0;
}
inline int32_t DeltaUpdateOrgRequest::_internal_org_id() const {
  return _impl_.org_id_;
}
inline int32_t DeltaUpdateOrgRequest::org_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.org_id)
  return _internal_org_id();
}
inline void DeltaUpdateOrgRequest::_internal_set_org_id(int32_t value) {
  
  _impl_.org_id_ = value;
}
inline void DeltaUpdateOrgRequest::set_org_id(int32_t value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.org_id)
}

// optional float delta_inventory = 2 [json_name = "deltaInventory"];
inline bool DeltaUpdateOrgRequest::_internal_has_delta_inventory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeltaUpdateOrgRequest::has_delta_inventory() const {
  return _internal_has_delta_inventory();
}
inline void DeltaUpdateOrgRequest::clear_delta_inventory() {
  _impl_.delta_inventory_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float DeltaUpdateOrgRequest::_internal_delta_inventory() const {
  return _impl_.delta_inventory_;
}
inline float DeltaUpdateOrgRequest::delta_inventory() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_inventory)
  return _internal_delta_inventory();
}
inline void DeltaUpdateOrgRequest::_internal_set_delta_inventory(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.delta_inventory_ = value;
}
inline void DeltaUpdateOrgRequest::set_delta_inventory(float value) {
  _internal_set_delta_inventory(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_inventory)
}

// optional float delta_price = 3 [json_name = "deltaPrice"];
inline bool DeltaUpdateOrgRequest::_internal_has_delta_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeltaUpdateOrgRequest::has_delta_price() const {
  return _internal_has_delta_price();
}
inline void DeltaUpdateOrgRequest::clear_delta_price() {
  _impl_.delta_price_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float DeltaUpdateOrgRequest::_internal_delta_price() const {
  return _impl_.delta_price_;
}
inline float DeltaUpdateOrgRequest::delta_price() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_price)
  return _internal_delta_price();
}
inline void DeltaUpdateOrgRequest::_internal_set_delta_price(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.delta_price_ = value;
}
inline void DeltaUpdateOrgRequest::set_delta_price(float value) {
  _internal_set_delta_price(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_price)
}

// optional float delta_currency = 4 [json_name = "deltaCurrency"];
inline bool DeltaUpdateOrgRequest::_internal_has_delta_currency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeltaUpdateOrgRequest::has_delta_currency() const {
  return _internal_has_delta_currency();
}
inline void DeltaUpdateOrgRequest::clear_delta_currency() {
  _impl_.delta_currency_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float DeltaUpdateOrgRequest::_internal_delta_currency() const {
  return _impl_.delta_currency_;
}
inline float DeltaUpdateOrgRequest::delta_currency() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_currency)
  return _internal_delta_currency();
}
inline void DeltaUpdateOrgRequest::_internal_set_delta_currency(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.delta_currency_ = value;
}
inline void DeltaUpdateOrgRequest::set_delta_currency(float value) {
  _internal_set_delta_currency(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_currency)
}

// optional float delta_interest_rate = 5 [json_name = "deltaInterestRate"];
inline bool DeltaUpdateOrgRequest::_internal_has_delta_interest_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DeltaUpdateOrgRequest::has_delta_interest_rate() const {
  return _internal_has_delta_interest_rate();
}
inline void DeltaUpdateOrgRequest::clear_delta_interest_rate() {
  _impl_.delta_interest_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float DeltaUpdateOrgRequest::_internal_delta_interest_rate() const {
  return _impl_.delta_interest_rate_;
}
inline float DeltaUpdateOrgRequest::delta_interest_rate() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.delta_interest_rate)
  return _internal_delta_interest_rate();
}
inline void DeltaUpdateOrgRequest::_internal_set_delta_interest_rate(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.delta_interest_rate_ = value;
}
inline void DeltaUpdateOrgRequest::set_delta_interest_rate(float value) {
  _internal_set_delta_interest_rate(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.delta_interest_rate)
}

// repeated int32 add_employees = 6 [json_name = "addEmployees"];
inline int DeltaUpdateOrgRequest::_internal_add_employees_size() const {
  return _impl_.add_employees_.size();
}
inline int DeltaUpdateOrgRequest::add_employees_size() const {
  return _internal_add_employees_size();
}
inline void DeltaUpdateOrgRequest::clear_add_employees() {
  _impl_.add_employees_.Clear();
}
inline int32_t DeltaUpdateOrgRequest::_internal_add_employees(int index) const {
  return _impl_.add_employees_.Get(index);
}
inline int32_t DeltaUpdateOrgRequest::add_employees(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.add_employees)
  return _internal_add_employees(index);
}
inline void DeltaUpdateOrgRequest::set_add_employees(int index, int32_t value) {
  _impl_.add_employees_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.add_employees)
}
inline void DeltaUpdateOrgRequest::_internal_add_add_employees(int32_t value) {
  _impl_.add_employees_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_add_employees(int32_t value) {
  _internal_add_add_employees(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.add_employees)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DeltaUpdateOrgRequest::_internal_add_employees() const {
  return _impl_.add_employees_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DeltaUpdateOrgRequest::add_employees() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.add_employees)
  return _internal_add_employees();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DeltaUpdateOrgRequest::_internal_mutable_add_employees() {
  return &_impl_.add_employees_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DeltaUpdateOrgRequest::mutable_add_employees() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.add_employees)
  return _internal_mutable_add_employees();
}

// repeated int32 remove_employees = 7 [json_name = "removeEmployees"];
inline int DeltaUpdateOrgRequest::_internal_remove_employees_size() const {
  return _impl_.remove_employees_.size();
}
inline int DeltaUpdateOrgRequest::remove_employees_size() const {
  return _internal_remove_employees_size();
}
inline void DeltaUpdateOrgRequest::clear_remove_employees() {
  _impl_.remove_employees_.Clear();
}
inline int32_t DeltaUpdateOrgRequest::_internal_remove_employees(int index) const {
  return _impl_.remove_employees_.Get(index);
}
inline int32_t DeltaUpdateOrgRequest::remove_employees(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateOrgRequest.remove_employees)
  return _internal_remove_employees(index);
}
inline void DeltaUpdateOrgRequest::set_remove_employees(int index, int32_t value) {
  _impl_.remove_employees_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateOrgRequest.remove_employees)
}
inline void DeltaUpdateOrgRequest::_internal_add_remove_employees(int32_t value) {
  _impl_.remove_employees_.Add(value);
}
inline void DeltaUpdateOrgRequest::add_remove_employees(int32_t value) {
  _internal_add_remove_employees(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.DeltaUpdateOrgRequest.remove_employees)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DeltaUpdateOrgRequest::_internal_remove_employees() const {
  return _impl_.remove_employees_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
DeltaUpdateOrgRequest::remove_employees() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.DeltaUpdateOrgRequest.remove_employees)
  return _internal_remove_employees();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DeltaUpdateOrgRequest::_internal_mutable_remove_employees() {
  return &_impl_.remove_employees_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
DeltaUpdateOrgRequest::mutable_remove_employees() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.DeltaUpdateOrgRequest.remove_employees)
  return _internal_mutable_remove_employees();
}

// -------------------------------------------------------------------

// DeltaUpdateOrgResponse

// -------------------------------------------------------------------

// DeltaUpdateAgentRequest

// int32 agent_id = 1 [json_name = "agentId"];
inline void DeltaUpdateAgentRequest::clear_agent_id() {
  _impl_.agent_id_ = 0;
}
inline int32_t DeltaUpdateAgentRequest::_internal_agent_id() const {
  return _impl_.agent_id_;
}
inline int32_t DeltaUpdateAgentRequest::agent_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateAgentRequest.agent_id)
  return _internal_agent_id();
}
inline void DeltaUpdateAgentRequest::_internal_set_agent_id(int32_t value) {
  
  _impl_.agent_id_ = value;
}
inline void DeltaUpdateAgentRequest::set_agent_id(int32_t value) {
  _internal_set_agent_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateAgentRequest.agent_id)
}

// optional float delta_currency = 2 [json_name = "deltaCurrency"];
inline bool DeltaUpdateAgentRequest::_internal_has_delta_currency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeltaUpdateAgentRequest::has_delta_currency() const {
  return _internal_has_delta_currency();
}
inline void DeltaUpdateAgentRequest::clear_delta_currency() {
  _impl_.delta_currency_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float DeltaUpdateAgentRequest::_internal_delta_currency() const {
  return _impl_.delta_currency_;
}
inline float DeltaUpdateAgentRequest::delta_currency() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateAgentRequest.delta_currency)
  return _internal_delta_currency();
}
inline void DeltaUpdateAgentRequest::_internal_set_delta_currency(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.delta_currency_ = value;
}
inline void DeltaUpdateAgentRequest::set_delta_currency(float value) {
  _internal_set_delta_currency(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateAgentRequest.delta_currency)
}

// optional float delta_skill = 3 [json_name = "deltaSkill"];
inline bool DeltaUpdateAgentRequest::_internal_has_delta_skill() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeltaUpdateAgentRequest::has_delta_skill() const {
  return _internal_has_delta_skill();
}
inline void DeltaUpdateAgentRequest::clear_delta_skill() {
  _impl_.delta_skill_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float DeltaUpdateAgentRequest::_internal_delta_skill() const {
  return _impl_.delta_skill_;
}
inline float DeltaUpdateAgentRequest::delta_skill() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateAgentRequest.delta_skill)
  return _internal_delta_skill();
}
inline void DeltaUpdateAgentRequest::_internal_set_delta_skill(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.delta_skill_ = value;
}
inline void DeltaUpdateAgentRequest::set_delta_skill(float value) {
  _internal_set_delta_skill(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateAgentRequest.delta_skill)
}

// optional float delta_consumption = 4 [json_name = "deltaConsumption"];
inline bool DeltaUpdateAgentRequest::_internal_has_delta_consumption() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeltaUpdateAgentRequest::has_delta_consumption() const {
  return _internal_has_delta_consumption();
}
inline void DeltaUpdateAgentRequest::clear_delta_consumption() {
  _impl_.delta_consumption_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float DeltaUpdateAgentRequest::_internal_delta_consumption() const {
  return _impl_.delta_consumption_;
}
inline float DeltaUpdateAgentRequest::delta_consumption() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateAgentRequest.delta_consumption)
  return _internal_delta_consumption();
}
inline void DeltaUpdateAgentRequest::_internal_set_delta_consumption(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.delta_consumption_ = value;
}
inline void DeltaUpdateAgentRequest::set_delta_consumption(float value) {
  _internal_set_delta_consumption(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateAgentRequest.delta_consumption)
}

// optional float delta_income = 5 [json_name = "deltaIncome"];
inline bool DeltaUpdateAgentRequest::_internal_has_delta_income() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DeltaUpdateAgentRequest::has_delta_income() const {
  return _internal_has_delta_income();
}
inline void DeltaUpdateAgentRequest::clear_delta_income() {
  _impl_.delta_income_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float DeltaUpdateAgentRequest::_internal_delta_income() const {
  return _impl_.delta_income_;
}
inline float DeltaUpdateAgentRequest::delta_income() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.DeltaUpdateAgentRequest.delta_income)
  return _internal_delta_income();
}
inline void DeltaUpdateAgentRequest::_internal_set_delta_income(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.delta_income_ = value;
}
inline void DeltaUpdateAgentRequest::set_delta_income(float value) {
  _internal_set_delta_income(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.DeltaUpdateAgentRequest.delta_income)
}

// -------------------------------------------------------------------

// DeltaUpdateAgentResponse

// -------------------------------------------------------------------

// BatchDeltaUpdateRequest

// repeated .city.economy.v2.DeltaUpdateOrgRequest orgs = 1 [json_name = "orgs"];
inline int BatchDeltaUpdateRequest::_internal_orgs_size() const {
  return _impl_.orgs_.size();
}
inline int BatchDeltaUpdateRequest::orgs_size() const {
  return _internal_orgs_size();
}
inline void BatchDeltaUpdateRequest::clear_orgs() {
  _impl_.orgs_.Clear();
}
inline ::city::economy::v2::DeltaUpdateOrgRequest* BatchDeltaUpdateRequest::mutable_orgs(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchDeltaUpdateRequest.orgs)
  return _impl_.orgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateOrgRequest >*
BatchDeltaUpdateRequest::mutable_orgs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchDeltaUpdateRequest.orgs)
  return &_impl_.orgs_;
}
inline const ::city::economy::v2::DeltaUpdateOrgRequest& BatchDeltaUpdateRequest::_internal_orgs(int index) const {
  return _impl_.orgs_.Get(index);
}
inline const ::city::economy::v2::DeltaUpdateOrgRequest& BatchDeltaUpdateRequest::orgs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchDeltaUpdateRequest.orgs)
  return _internal_orgs(index);
}
inline ::city::economy::v2::DeltaUpdateOrgRequest* BatchDeltaUpdateRequest::_internal_add_orgs() {
  return _impl_.orgs_.Add();
}
inline ::city::economy::v2::DeltaUpdateOrgRequest* BatchDeltaUpdateRequest::add_orgs() {
  ::city::economy::v2::DeltaUpdateOrgRequest* _add = _internal_add_orgs();
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchDeltaUpdateRequest.orgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateOrgRequest >&
BatchDeltaUpdateRequest::orgs() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchDeltaUpdateRequest.orgs)
  return _impl_.orgs_;
}

// repeated .city.economy.v2.DeltaUpdateAgentRequest agents = 2 [json_name = "agents"];
inline int BatchDeltaUpdateRequest::_internal_agents_size() const {
  return _impl_.agents_.size();
}
inline int BatchDeltaUpdateRequest::agents_size() const {
  return _internal_agents_size();
}
inline void BatchDeltaUpdateRequest::clear_agents() {
  _impl_.agents_.Clear();
}
inline ::city::economy::v2::DeltaUpdateAgentRequest* BatchDeltaUpdateRequest::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:city.economy.v2.BatchDeltaUpdateRequest.agents)
  return _impl_.agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateAgentRequest >*
BatchDeltaUpdateRequest::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.BatchDeltaUpdateRequest.agents)
  return &_impl_.agents_;
}
inline const ::city::economy::v2::DeltaUpdateAgentRequest& BatchDeltaUpdateRequest::_internal_agents(int index) const {
  return _impl_.agents_.Get(index);
}
inline const ::city::economy::v2::DeltaUpdateAgentRequest& BatchDeltaUpdateRequest::agents(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.BatchDeltaUpdateRequest.agents)
  return _internal_agents(index);
}
inline ::city::economy::v2::DeltaUpdateAgentRequest* BatchDeltaUpdateRequest::_internal_add_agents() {
  return _impl_.agents_.Add();
}
inline ::city::economy::v2::DeltaUpdateAgentRequest* BatchDeltaUpdateRequest::add_agents() {
  ::city::economy::v2::DeltaUpdateAgentRequest* _add = _internal_add_agents();
  // @@protoc_insertion_point(field_add:city.economy.v2.BatchDeltaUpdateRequest.agents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::economy::v2::DeltaUpdateAgentRequest >&
BatchDeltaUpdateRequest::agents() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.BatchDeltaUpdateRequest.agents)
  return _impl_.agents_;
}

// -------------------------------------------------------------------

// BatchDeltaUpdateResponse

// -------------------------------------------------------------------

// CalculateRealGDPRequest

// int32 nbs_agent_id = 1 [json_name = "nbsAgentId"];
inline void CalculateRealGDPRequest::clear_nbs_agent_id() {
  _impl_.nbs_agent_id_ = 0;
}
inline int32_t CalculateRealGDPRequest::_internal_nbs_agent_id() const {
  return _impl_.nbs_agent_id_;
}
inline int32_t CalculateRealGDPRequest::nbs_agent_id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateRealGDPRequest.nbs_agent_id)
  return _internal_nbs_agent_id();
}
inline void CalculateRealGDPRequest::_internal_set_nbs_agent_id(int32_t value) {
  
  _impl_.nbs_agent_id_ = value;
}
inline void CalculateRealGDPRequest::set_nbs_agent_id(int32_t value) {
  _internal_set_nbs_agent_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateRealGDPRequest.nbs_agent_id)
}

// -------------------------------------------------------------------

// CalculateRealGDPResponse

// float real_gdp = 1 [json_name = "realGdp"];
inline void CalculateRealGDPResponse::clear_real_gdp() {
  _impl_.real_gdp_ = 0;
}
inline float CalculateRealGDPResponse::_internal_real_gdp() const {
  return _impl_.real_gdp_;
}
inline float CalculateRealGDPResponse::real_gdp() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.CalculateRealGDPResponse.real_gdp)
  return _internal_real_gdp();
}
inline void CalculateRealGDPResponse::_internal_set_real_gdp(float value) {
  
  _impl_.real_gdp_ = value;
}
inline void CalculateRealGDPResponse::set_real_gdp(float value) {
  _internal_set_real_gdp(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.CalculateRealGDPResponse.real_gdp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace economy
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv2_2forg_5fservice_2eproto
