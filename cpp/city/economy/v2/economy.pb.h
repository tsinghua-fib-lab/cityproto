// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/economy/v2/economy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv2_2feconomy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv2_2feconomy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2feconomy_2fv2_2feconomy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2feconomy_2fv2_2feconomy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2feconomy_2fv2_2feconomy_2eproto;
namespace city {
namespace economy {
namespace v2 {
class Agent;
struct AgentDefaultTypeInternal;
extern AgentDefaultTypeInternal _Agent_default_instance_;
class Org;
struct OrgDefaultTypeInternal;
extern OrgDefaultTypeInternal _Org_default_instance_;
}  // namespace v2
}  // namespace economy
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::economy::v2::Agent* Arena::CreateMaybeMessage<::city::economy::v2::Agent>(Arena*);
template<> ::city::economy::v2::Org* Arena::CreateMaybeMessage<::city::economy::v2::Org>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace economy {
namespace v2 {

enum OrgType : int {
  ORG_TYPE_UNSPECIFIED = 0,
  ORG_TYPE_NBS = 1,
  ORG_TYPE_FIRM = 2,
  ORG_TYPE_BANK = 3,
  ORG_TYPE_GOVERNMENT = 4,
  OrgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OrgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OrgType_IsValid(int value);
constexpr OrgType OrgType_MIN = ORG_TYPE_UNSPECIFIED;
constexpr OrgType OrgType_MAX = ORG_TYPE_GOVERNMENT;
constexpr int OrgType_ARRAYSIZE = OrgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrgType_descriptor();
template<typename T>
inline const std::string& OrgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrgType_descriptor(), enum_t_value);
}
inline bool OrgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrgType>(
    OrgType_descriptor(), name, value);
}
// ===================================================================

class Org final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.Org) */ {
 public:
  inline Org() : Org(nullptr) {}
  ~Org() override;
  explicit PROTOBUF_CONSTEXPR Org(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Org(const Org& from);
  Org(Org&& from) noexcept
    : Org() {
    *this = ::std::move(from);
  }

  inline Org& operator=(const Org& from) {
    CopyFrom(from);
    return *this;
  }
  inline Org& operator=(Org&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Org& default_instance() {
    return *internal_default_instance();
  }
  static inline const Org* internal_default_instance() {
    return reinterpret_cast<const Org*>(
               &_Org_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Org& a, Org& b) {
    a.Swap(&b);
  }
  inline void Swap(Org* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Org* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Org* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Org>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Org& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Org& from) {
    Org::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Org* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.Org";
  }
  protected:
  explicit Org(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNominalGdpFieldNumber = 3,
    kRealGdpFieldNumber = 4,
    kUnemploymentFieldNumber = 5,
    kWagesFieldNumber = 6,
    kPricesFieldNumber = 7,
    kBracketCutoffsFieldNumber = 12,
    kBracketRatesFieldNumber = 13,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kInventoryFieldNumber = 8,
    kPriceFieldNumber = 9,
    kCurrencyFieldNumber = 10,
    kInterestRateFieldNumber = 11,
  };
  // repeated float nominal_gdp = 3 [json_name = "nominalGdp"];
  int nominal_gdp_size() const;
  private:
  int _internal_nominal_gdp_size() const;
  public:
  void clear_nominal_gdp();
  private:
  float _internal_nominal_gdp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_nominal_gdp() const;
  void _internal_add_nominal_gdp(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_nominal_gdp();
  public:
  float nominal_gdp(int index) const;
  void set_nominal_gdp(int index, float value);
  void add_nominal_gdp(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      nominal_gdp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_nominal_gdp();

  // repeated float real_gdp = 4 [json_name = "realGdp"];
  int real_gdp_size() const;
  private:
  int _internal_real_gdp_size() const;
  public:
  void clear_real_gdp();
  private:
  float _internal_real_gdp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_real_gdp() const;
  void _internal_add_real_gdp(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_real_gdp();
  public:
  float real_gdp(int index) const;
  void set_real_gdp(int index, float value);
  void add_real_gdp(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      real_gdp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_real_gdp();

  // repeated float unemployment = 5 [json_name = "unemployment"];
  int unemployment_size() const;
  private:
  int _internal_unemployment_size() const;
  public:
  void clear_unemployment();
  private:
  float _internal_unemployment(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_unemployment() const;
  void _internal_add_unemployment(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_unemployment();
  public:
  float unemployment(int index) const;
  void set_unemployment(int index, float value);
  void add_unemployment(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      unemployment() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_unemployment();

  // repeated float wages = 6 [json_name = "wages"];
  int wages_size() const;
  private:
  int _internal_wages_size() const;
  public:
  void clear_wages();
  private:
  float _internal_wages(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_wages() const;
  void _internal_add_wages(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_wages();
  public:
  float wages(int index) const;
  void set_wages(int index, float value);
  void add_wages(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      wages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_wages();

  // repeated float prices = 7 [json_name = "prices"];
  int prices_size() const;
  private:
  int _internal_prices_size() const;
  public:
  void clear_prices();
  private:
  float _internal_prices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_prices() const;
  void _internal_add_prices(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_prices();
  public:
  float prices(int index) const;
  void set_prices(int index, float value);
  void add_prices(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_prices();

  // repeated float bracket_cutoffs = 12 [json_name = "bracketCutoffs"];
  int bracket_cutoffs_size() const;
  private:
  int _internal_bracket_cutoffs_size() const;
  public:
  void clear_bracket_cutoffs();
  private:
  float _internal_bracket_cutoffs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bracket_cutoffs() const;
  void _internal_add_bracket_cutoffs(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bracket_cutoffs();
  public:
  float bracket_cutoffs(int index) const;
  void set_bracket_cutoffs(int index, float value);
  void add_bracket_cutoffs(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bracket_cutoffs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bracket_cutoffs();

  // repeated float bracket_rates = 13 [json_name = "bracketRates"];
  int bracket_rates_size() const;
  private:
  int _internal_bracket_rates_size() const;
  public:
  void clear_bracket_rates();
  private:
  float _internal_bracket_rates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_bracket_rates() const;
  void _internal_add_bracket_rates(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_bracket_rates();
  public:
  float bracket_rates(int index) const;
  void set_bracket_rates(int index, float value);
  void add_bracket_rates(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      bracket_rates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_bracket_rates();

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .city.economy.v2.OrgType type = 2 [json_name = "type"];
  void clear_type();
  ::city::economy::v2::OrgType type() const;
  void set_type(::city::economy::v2::OrgType value);
  private:
  ::city::economy::v2::OrgType _internal_type() const;
  void _internal_set_type(::city::economy::v2::OrgType value);
  public:

  // optional int32 inventory = 8 [json_name = "inventory"];
  bool has_inventory() const;
  private:
  bool _internal_has_inventory() const;
  public:
  void clear_inventory();
  int32_t inventory() const;
  void set_inventory(int32_t value);
  private:
  int32_t _internal_inventory() const;
  void _internal_set_inventory(int32_t value);
  public:

  // optional float price = 9 [json_name = "price"];
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // optional float currency = 10 [json_name = "currency"];
  bool has_currency() const;
  private:
  bool _internal_has_currency() const;
  public:
  void clear_currency();
  float currency() const;
  void set_currency(float value);
  private:
  float _internal_currency() const;
  void _internal_set_currency(float value);
  public:

  // optional float interest_rate = 11 [json_name = "interestRate"];
  bool has_interest_rate() const;
  private:
  bool _internal_has_interest_rate() const;
  public:
  void clear_interest_rate();
  float interest_rate() const;
  void set_interest_rate(float value);
  private:
  float _internal_interest_rate() const;
  void _internal_set_interest_rate(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.Org)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > nominal_gdp_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > real_gdp_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > unemployment_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > wages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > prices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bracket_cutoffs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > bracket_rates_;
    int32_t id_;
    int type_;
    int32_t inventory_;
    float price_;
    float currency_;
    float interest_rate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2feconomy_2eproto;
};
// -------------------------------------------------------------------

class Agent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.economy.v2.Agent) */ {
 public:
  inline Agent() : Agent(nullptr) {}
  ~Agent() override;
  explicit PROTOBUF_CONSTEXPR Agent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Agent(const Agent& from);
  Agent(Agent&& from) noexcept
    : Agent() {
    *this = ::std::move(from);
  }

  inline Agent& operator=(const Agent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Agent& operator=(Agent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Agent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Agent* internal_default_instance() {
    return reinterpret_cast<const Agent*>(
               &_Agent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Agent& a, Agent& b) {
    a.Swap(&b);
  }
  inline void Swap(Agent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Agent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Agent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Agent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Agent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Agent& from) {
    Agent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Agent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.economy.v2.Agent";
  }
  protected:
  explicit Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCurrencyFieldNumber = 2,
  };
  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional float currency = 2 [json_name = "currency"];
  bool has_currency() const;
  private:
  bool _internal_has_currency() const;
  public:
  void clear_currency();
  float currency() const;
  void set_currency(float value);
  private:
  float _internal_currency() const;
  void _internal_set_currency(float value);
  public:

  // @@protoc_insertion_point(class_scope:city.economy.v2.Agent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t id_;
    float currency_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2feconomy_2fv2_2feconomy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Org

// int32 id = 1 [json_name = "id"];
inline void Org::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Org::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Org::id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.Org.id)
  return _internal_id();
}
inline void Org::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Org::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.Org.id)
}

// .city.economy.v2.OrgType type = 2 [json_name = "type"];
inline void Org::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::economy::v2::OrgType Org::_internal_type() const {
  return static_cast< ::city::economy::v2::OrgType >(_impl_.type_);
}
inline ::city::economy::v2::OrgType Org::type() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.Org.type)
  return _internal_type();
}
inline void Org::_internal_set_type(::city::economy::v2::OrgType value) {
  
  _impl_.type_ = value;
}
inline void Org::set_type(::city::economy::v2::OrgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.Org.type)
}

// repeated float nominal_gdp = 3 [json_name = "nominalGdp"];
inline int Org::_internal_nominal_gdp_size() const {
  return _impl_.nominal_gdp_.size();
}
inline int Org::nominal_gdp_size() const {
  return _internal_nominal_gdp_size();
}
inline void Org::clear_nominal_gdp() {
  _impl_.nominal_gdp_.Clear();
}
inline float Org::_internal_nominal_gdp(int index) const {
  return _impl_.nominal_gdp_.Get(index);
}
inline float Org::nominal_gdp(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.Org.nominal_gdp)
  return _internal_nominal_gdp(index);
}
inline void Org::set_nominal_gdp(int index, float value) {
  _impl_.nominal_gdp_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.Org.nominal_gdp)
}
inline void Org::_internal_add_nominal_gdp(float value) {
  _impl_.nominal_gdp_.Add(value);
}
inline void Org::add_nominal_gdp(float value) {
  _internal_add_nominal_gdp(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.Org.nominal_gdp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Org::_internal_nominal_gdp() const {
  return _impl_.nominal_gdp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Org::nominal_gdp() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.Org.nominal_gdp)
  return _internal_nominal_gdp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Org::_internal_mutable_nominal_gdp() {
  return &_impl_.nominal_gdp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Org::mutable_nominal_gdp() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.Org.nominal_gdp)
  return _internal_mutable_nominal_gdp();
}

// repeated float real_gdp = 4 [json_name = "realGdp"];
inline int Org::_internal_real_gdp_size() const {
  return _impl_.real_gdp_.size();
}
inline int Org::real_gdp_size() const {
  return _internal_real_gdp_size();
}
inline void Org::clear_real_gdp() {
  _impl_.real_gdp_.Clear();
}
inline float Org::_internal_real_gdp(int index) const {
  return _impl_.real_gdp_.Get(index);
}
inline float Org::real_gdp(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.Org.real_gdp)
  return _internal_real_gdp(index);
}
inline void Org::set_real_gdp(int index, float value) {
  _impl_.real_gdp_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.Org.real_gdp)
}
inline void Org::_internal_add_real_gdp(float value) {
  _impl_.real_gdp_.Add(value);
}
inline void Org::add_real_gdp(float value) {
  _internal_add_real_gdp(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.Org.real_gdp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Org::_internal_real_gdp() const {
  return _impl_.real_gdp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Org::real_gdp() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.Org.real_gdp)
  return _internal_real_gdp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Org::_internal_mutable_real_gdp() {
  return &_impl_.real_gdp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Org::mutable_real_gdp() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.Org.real_gdp)
  return _internal_mutable_real_gdp();
}

// repeated float unemployment = 5 [json_name = "unemployment"];
inline int Org::_internal_unemployment_size() const {
  return _impl_.unemployment_.size();
}
inline int Org::unemployment_size() const {
  return _internal_unemployment_size();
}
inline void Org::clear_unemployment() {
  _impl_.unemployment_.Clear();
}
inline float Org::_internal_unemployment(int index) const {
  return _impl_.unemployment_.Get(index);
}
inline float Org::unemployment(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.Org.unemployment)
  return _internal_unemployment(index);
}
inline void Org::set_unemployment(int index, float value) {
  _impl_.unemployment_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.Org.unemployment)
}
inline void Org::_internal_add_unemployment(float value) {
  _impl_.unemployment_.Add(value);
}
inline void Org::add_unemployment(float value) {
  _internal_add_unemployment(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.Org.unemployment)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Org::_internal_unemployment() const {
  return _impl_.unemployment_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Org::unemployment() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.Org.unemployment)
  return _internal_unemployment();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Org::_internal_mutable_unemployment() {
  return &_impl_.unemployment_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Org::mutable_unemployment() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.Org.unemployment)
  return _internal_mutable_unemployment();
}

// repeated float wages = 6 [json_name = "wages"];
inline int Org::_internal_wages_size() const {
  return _impl_.wages_.size();
}
inline int Org::wages_size() const {
  return _internal_wages_size();
}
inline void Org::clear_wages() {
  _impl_.wages_.Clear();
}
inline float Org::_internal_wages(int index) const {
  return _impl_.wages_.Get(index);
}
inline float Org::wages(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.Org.wages)
  return _internal_wages(index);
}
inline void Org::set_wages(int index, float value) {
  _impl_.wages_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.Org.wages)
}
inline void Org::_internal_add_wages(float value) {
  _impl_.wages_.Add(value);
}
inline void Org::add_wages(float value) {
  _internal_add_wages(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.Org.wages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Org::_internal_wages() const {
  return _impl_.wages_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Org::wages() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.Org.wages)
  return _internal_wages();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Org::_internal_mutable_wages() {
  return &_impl_.wages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Org::mutable_wages() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.Org.wages)
  return _internal_mutable_wages();
}

// repeated float prices = 7 [json_name = "prices"];
inline int Org::_internal_prices_size() const {
  return _impl_.prices_.size();
}
inline int Org::prices_size() const {
  return _internal_prices_size();
}
inline void Org::clear_prices() {
  _impl_.prices_.Clear();
}
inline float Org::_internal_prices(int index) const {
  return _impl_.prices_.Get(index);
}
inline float Org::prices(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.Org.prices)
  return _internal_prices(index);
}
inline void Org::set_prices(int index, float value) {
  _impl_.prices_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.Org.prices)
}
inline void Org::_internal_add_prices(float value) {
  _impl_.prices_.Add(value);
}
inline void Org::add_prices(float value) {
  _internal_add_prices(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.Org.prices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Org::_internal_prices() const {
  return _impl_.prices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Org::prices() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.Org.prices)
  return _internal_prices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Org::_internal_mutable_prices() {
  return &_impl_.prices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Org::mutable_prices() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.Org.prices)
  return _internal_mutable_prices();
}

// optional int32 inventory = 8 [json_name = "inventory"];
inline bool Org::_internal_has_inventory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Org::has_inventory() const {
  return _internal_has_inventory();
}
inline void Org::clear_inventory() {
  _impl_.inventory_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Org::_internal_inventory() const {
  return _impl_.inventory_;
}
inline int32_t Org::inventory() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.Org.inventory)
  return _internal_inventory();
}
inline void Org::_internal_set_inventory(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.inventory_ = value;
}
inline void Org::set_inventory(int32_t value) {
  _internal_set_inventory(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.Org.inventory)
}

// optional float price = 9 [json_name = "price"];
inline bool Org::_internal_has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Org::has_price() const {
  return _internal_has_price();
}
inline void Org::clear_price() {
  _impl_.price_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Org::_internal_price() const {
  return _impl_.price_;
}
inline float Org::price() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.Org.price)
  return _internal_price();
}
inline void Org::_internal_set_price(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.price_ = value;
}
inline void Org::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.Org.price)
}

// optional float currency = 10 [json_name = "currency"];
inline bool Org::_internal_has_currency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Org::has_currency() const {
  return _internal_has_currency();
}
inline void Org::clear_currency() {
  _impl_.currency_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Org::_internal_currency() const {
  return _impl_.currency_;
}
inline float Org::currency() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.Org.currency)
  return _internal_currency();
}
inline void Org::_internal_set_currency(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.currency_ = value;
}
inline void Org::set_currency(float value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.Org.currency)
}

// optional float interest_rate = 11 [json_name = "interestRate"];
inline bool Org::_internal_has_interest_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Org::has_interest_rate() const {
  return _internal_has_interest_rate();
}
inline void Org::clear_interest_rate() {
  _impl_.interest_rate_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Org::_internal_interest_rate() const {
  return _impl_.interest_rate_;
}
inline float Org::interest_rate() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.Org.interest_rate)
  return _internal_interest_rate();
}
inline void Org::_internal_set_interest_rate(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.interest_rate_ = value;
}
inline void Org::set_interest_rate(float value) {
  _internal_set_interest_rate(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.Org.interest_rate)
}

// repeated float bracket_cutoffs = 12 [json_name = "bracketCutoffs"];
inline int Org::_internal_bracket_cutoffs_size() const {
  return _impl_.bracket_cutoffs_.size();
}
inline int Org::bracket_cutoffs_size() const {
  return _internal_bracket_cutoffs_size();
}
inline void Org::clear_bracket_cutoffs() {
  _impl_.bracket_cutoffs_.Clear();
}
inline float Org::_internal_bracket_cutoffs(int index) const {
  return _impl_.bracket_cutoffs_.Get(index);
}
inline float Org::bracket_cutoffs(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.Org.bracket_cutoffs)
  return _internal_bracket_cutoffs(index);
}
inline void Org::set_bracket_cutoffs(int index, float value) {
  _impl_.bracket_cutoffs_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.Org.bracket_cutoffs)
}
inline void Org::_internal_add_bracket_cutoffs(float value) {
  _impl_.bracket_cutoffs_.Add(value);
}
inline void Org::add_bracket_cutoffs(float value) {
  _internal_add_bracket_cutoffs(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.Org.bracket_cutoffs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Org::_internal_bracket_cutoffs() const {
  return _impl_.bracket_cutoffs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Org::bracket_cutoffs() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.Org.bracket_cutoffs)
  return _internal_bracket_cutoffs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Org::_internal_mutable_bracket_cutoffs() {
  return &_impl_.bracket_cutoffs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Org::mutable_bracket_cutoffs() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.Org.bracket_cutoffs)
  return _internal_mutable_bracket_cutoffs();
}

// repeated float bracket_rates = 13 [json_name = "bracketRates"];
inline int Org::_internal_bracket_rates_size() const {
  return _impl_.bracket_rates_.size();
}
inline int Org::bracket_rates_size() const {
  return _internal_bracket_rates_size();
}
inline void Org::clear_bracket_rates() {
  _impl_.bracket_rates_.Clear();
}
inline float Org::_internal_bracket_rates(int index) const {
  return _impl_.bracket_rates_.Get(index);
}
inline float Org::bracket_rates(int index) const {
  // @@protoc_insertion_point(field_get:city.economy.v2.Org.bracket_rates)
  return _internal_bracket_rates(index);
}
inline void Org::set_bracket_rates(int index, float value) {
  _impl_.bracket_rates_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.economy.v2.Org.bracket_rates)
}
inline void Org::_internal_add_bracket_rates(float value) {
  _impl_.bracket_rates_.Add(value);
}
inline void Org::add_bracket_rates(float value) {
  _internal_add_bracket_rates(value);
  // @@protoc_insertion_point(field_add:city.economy.v2.Org.bracket_rates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Org::_internal_bracket_rates() const {
  return _impl_.bracket_rates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Org::bracket_rates() const {
  // @@protoc_insertion_point(field_list:city.economy.v2.Org.bracket_rates)
  return _internal_bracket_rates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Org::_internal_mutable_bracket_rates() {
  return &_impl_.bracket_rates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Org::mutable_bracket_rates() {
  // @@protoc_insertion_point(field_mutable_list:city.economy.v2.Org.bracket_rates)
  return _internal_mutable_bracket_rates();
}

// -------------------------------------------------------------------

// Agent

// int32 id = 1 [json_name = "id"];
inline void Agent::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Agent::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Agent::id() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.Agent.id)
  return _internal_id();
}
inline void Agent::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Agent::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.Agent.id)
}

// optional float currency = 2 [json_name = "currency"];
inline bool Agent::_internal_has_currency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Agent::has_currency() const {
  return _internal_has_currency();
}
inline void Agent::clear_currency() {
  _impl_.currency_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Agent::_internal_currency() const {
  return _impl_.currency_;
}
inline float Agent::currency() const {
  // @@protoc_insertion_point(field_get:city.economy.v2.Agent.currency)
  return _internal_currency();
}
inline void Agent::_internal_set_currency(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.currency_ = value;
}
inline void Agent::set_currency(float value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:city.economy.v2.Agent.currency)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace economy
}  // namespace city

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::city::economy::v2::OrgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::economy::v2::OrgType>() {
  return ::city::economy::v2::OrgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2feconomy_2fv2_2feconomy_2eproto
