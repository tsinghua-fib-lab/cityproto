// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/config/v1/config.proto

#include "city/config/v1/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace config {
namespace v1 {
PROTOBUF_CONSTEXPR MongoPath::MongoPath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.db_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.col_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoPathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoPathDefaultTypeInternal() {}
  union {
    MongoPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoPathDefaultTypeInternal _MongoPath_default_instance_;
PROTOBUF_CONSTEXPR OutputTarget::OutputTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sql_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OutputTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputTargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputTargetDefaultTypeInternal() {}
  union {
    OutputTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputTargetDefaultTypeInternal _OutputTarget_default_instance_;
}  // namespace v1
}  // namespace config
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fconfig_2fv1_2fconfig_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_city_2fconfig_2fv1_2fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fconfig_2fv1_2fconfig_2eproto = nullptr;

const uint32_t TableStruct_city_2fconfig_2fv1_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::config::v1::MongoPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::config::v1::MongoPath, _impl_.db_),
  PROTOBUF_FIELD_OFFSET(::city::config::v1::MongoPath, _impl_.col_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::config::v1::OutputTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::config::v1::OutputTarget, _impl_.sql_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::config::v1::MongoPath)},
  { 8, -1, -1, sizeof(::city::config::v1::OutputTarget)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::config::v1::_MongoPath_default_instance_._instance,
  &::city::config::v1::_OutputTarget_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fconfig_2fv1_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033city/config/v1/config.proto\022\016city.conf"
  "ig.v1\"-\n\tMongoPath\022\016\n\002db\030\001 \001(\tR\002db\022\020\n\003co"
  "l\030\002 \001(\tR\003col\" \n\014OutputTarget\022\020\n\003sql\030\001 \001("
  "\tR\003sqlB\264\001\n\022com.city.config.v1B\013ConfigPro"
  "toP\001Z7git.fiblab.net/sim/protos/go/v2/ci"
  "ty/config/v1;configv1\242\002\003CCX\252\002\016City.Confi"
  "g.V1\312\002\016City\\Config\\V1\342\002\032City\\Config\\V1\\G"
  "PBMetadata\352\002\020City::Config::V1b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_city_2fconfig_2fv1_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fconfig_2fv1_2fconfig_2eproto = {
    false, false, 317, descriptor_table_protodef_city_2fconfig_2fv1_2fconfig_2eproto,
    "city/config/v1/config.proto",
    &descriptor_table_city_2fconfig_2fv1_2fconfig_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_city_2fconfig_2fv1_2fconfig_2eproto::offsets,
    file_level_metadata_city_2fconfig_2fv1_2fconfig_2eproto, file_level_enum_descriptors_city_2fconfig_2fv1_2fconfig_2eproto,
    file_level_service_descriptors_city_2fconfig_2fv1_2fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fconfig_2fv1_2fconfig_2eproto_getter() {
  return &descriptor_table_city_2fconfig_2fv1_2fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fconfig_2fv1_2fconfig_2eproto(&descriptor_table_city_2fconfig_2fv1_2fconfig_2eproto);
namespace city {
namespace config {
namespace v1 {

// ===================================================================

class MongoPath::_Internal {
 public:
};

MongoPath::MongoPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.config.v1.MongoPath)
}
MongoPath::MongoPath(const MongoPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MongoPath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.db_){}
    , decltype(_impl_.col_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.db_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_db().empty()) {
    _this->_impl_.db_.Set(from._internal_db(), 
      _this->GetArenaForAllocation());
  }
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_col().empty()) {
    _this->_impl_.col_.Set(from._internal_col(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:city.config.v1.MongoPath)
}

inline void MongoPath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.db_){}
    , decltype(_impl_.col_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.db_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.db_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.col_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.col_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MongoPath::~MongoPath() {
  // @@protoc_insertion_point(destructor:city.config.v1.MongoPath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MongoPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.db_.Destroy();
  _impl_.col_.Destroy();
}

void MongoPath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MongoPath::Clear() {
// @@protoc_insertion_point(message_clear_start:city.config.v1.MongoPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.db_.ClearToEmpty();
  _impl_.col_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MongoPath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string db = 1 [json_name = "db"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_db();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "city.config.v1.MongoPath.db"));
        } else
          goto handle_unusual;
        continue;
      // string col = 2 [json_name = "col"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_col();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "city.config.v1.MongoPath.col"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MongoPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.config.v1.MongoPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string db = 1 [json_name = "db"];
  if (!this->_internal_db().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_db().data(), static_cast<int>(this->_internal_db().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "city.config.v1.MongoPath.db");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_db(), target);
  }

  // string col = 2 [json_name = "col"];
  if (!this->_internal_col().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_col().data(), static_cast<int>(this->_internal_col().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "city.config.v1.MongoPath.col");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_col(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.config.v1.MongoPath)
  return target;
}

size_t MongoPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.config.v1.MongoPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string db = 1 [json_name = "db"];
  if (!this->_internal_db().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_db());
  }

  // string col = 2 [json_name = "col"];
  if (!this->_internal_col().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_col());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MongoPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MongoPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MongoPath::GetClassData() const { return &_class_data_; }


void MongoPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MongoPath*>(&to_msg);
  auto& from = static_cast<const MongoPath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.config.v1.MongoPath)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_db().empty()) {
    _this->_internal_set_db(from._internal_db());
  }
  if (!from._internal_col().empty()) {
    _this->_internal_set_col(from._internal_col());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MongoPath::CopyFrom(const MongoPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.config.v1.MongoPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MongoPath::IsInitialized() const {
  return true;
}

void MongoPath::InternalSwap(MongoPath* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.db_, lhs_arena,
      &other->_impl_.db_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.col_, lhs_arena,
      &other->_impl_.col_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MongoPath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fconfig_2fv1_2fconfig_2eproto_getter, &descriptor_table_city_2fconfig_2fv1_2fconfig_2eproto_once,
      file_level_metadata_city_2fconfig_2fv1_2fconfig_2eproto[0]);
}

// ===================================================================

class OutputTarget::_Internal {
 public:
};

OutputTarget::OutputTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.config.v1.OutputTarget)
}
OutputTarget::OutputTarget(const OutputTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutputTarget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sql_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sql_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sql().empty()) {
    _this->_impl_.sql_.Set(from._internal_sql(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:city.config.v1.OutputTarget)
}

inline void OutputTarget::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sql_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sql_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OutputTarget::~OutputTarget() {
  // @@protoc_insertion_point(destructor:city.config.v1.OutputTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutputTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sql_.Destroy();
}

void OutputTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutputTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:city.config.v1.OutputTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sql_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sql = 1 [json_name = "sql"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sql();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "city.config.v1.OutputTarget.sql"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutputTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.config.v1.OutputTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sql = 1 [json_name = "sql"];
  if (!this->_internal_sql().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sql().data(), static_cast<int>(this->_internal_sql().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "city.config.v1.OutputTarget.sql");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sql(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.config.v1.OutputTarget)
  return target;
}

size_t OutputTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.config.v1.OutputTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sql = 1 [json_name = "sql"];
  if (!this->_internal_sql().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sql());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutputTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputTarget::GetClassData() const { return &_class_data_; }


void OutputTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutputTarget*>(&to_msg);
  auto& from = static_cast<const OutputTarget&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.config.v1.OutputTarget)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sql().empty()) {
    _this->_internal_set_sql(from._internal_sql());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputTarget::CopyFrom(const OutputTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.config.v1.OutputTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputTarget::IsInitialized() const {
  return true;
}

void OutputTarget::InternalSwap(OutputTarget* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sql_, lhs_arena,
      &other->_impl_.sql_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputTarget::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fconfig_2fv1_2fconfig_2eproto_getter, &descriptor_table_city_2fconfig_2fv1_2fconfig_2eproto_once,
      file_level_metadata_city_2fconfig_2fv1_2fconfig_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace config
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::config::v1::MongoPath*
Arena::CreateMaybeMessage< ::city::config::v1::MongoPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::config::v1::MongoPath >(arena);
}
template<> PROTOBUF_NOINLINE ::city::config::v1::OutputTarget*
Arena::CreateMaybeMessage< ::city::config::v1::OutputTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::config::v1::OutputTarget >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
