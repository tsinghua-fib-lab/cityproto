// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/config/v1/config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fconfig_2fv1_2fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fconfig_2fv1_2fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fconfig_2fv1_2fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fconfig_2fv1_2fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fconfig_2fv1_2fconfig_2eproto;
namespace city {
namespace config {
namespace v1 {
class MongoPath;
struct MongoPathDefaultTypeInternal;
extern MongoPathDefaultTypeInternal _MongoPath_default_instance_;
class OutputTarget;
struct OutputTargetDefaultTypeInternal;
extern OutputTargetDefaultTypeInternal _OutputTarget_default_instance_;
}  // namespace v1
}  // namespace config
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::config::v1::MongoPath* Arena::CreateMaybeMessage<::city::config::v1::MongoPath>(Arena*);
template<> ::city::config::v1::OutputTarget* Arena::CreateMaybeMessage<::city::config::v1::OutputTarget>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace config {
namespace v1 {

// ===================================================================

class MongoPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.config.v1.MongoPath) */ {
 public:
  inline MongoPath() : MongoPath(nullptr) {}
  ~MongoPath() override;
  explicit PROTOBUF_CONSTEXPR MongoPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MongoPath(const MongoPath& from);
  MongoPath(MongoPath&& from) noexcept
    : MongoPath() {
    *this = ::std::move(from);
  }

  inline MongoPath& operator=(const MongoPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline MongoPath& operator=(MongoPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MongoPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const MongoPath* internal_default_instance() {
    return reinterpret_cast<const MongoPath*>(
               &_MongoPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MongoPath& a, MongoPath& b) {
    a.Swap(&b);
  }
  inline void Swap(MongoPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MongoPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MongoPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MongoPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MongoPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MongoPath& from) {
    MongoPath::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MongoPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.config.v1.MongoPath";
  }
  protected:
  explicit MongoPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbFieldNumber = 1,
    kColFieldNumber = 2,
  };
  // string db = 1 [json_name = "db"];
  void clear_db();
  const std::string& db() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_db(ArgT0&& arg0, ArgT... args);
  std::string* mutable_db();
  PROTOBUF_NODISCARD std::string* release_db();
  void set_allocated_db(std::string* db);
  private:
  const std::string& _internal_db() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_db(const std::string& value);
  std::string* _internal_mutable_db();
  public:

  // string col = 2 [json_name = "col"];
  void clear_col();
  const std::string& col() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_col(ArgT0&& arg0, ArgT... args);
  std::string* mutable_col();
  PROTOBUF_NODISCARD std::string* release_col();
  void set_allocated_col(std::string* col);
  private:
  const std::string& _internal_col() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_col(const std::string& value);
  std::string* _internal_mutable_col();
  public:

  // @@protoc_insertion_point(class_scope:city.config.v1.MongoPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr db_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr col_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fconfig_2fv1_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class OutputTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.config.v1.OutputTarget) */ {
 public:
  inline OutputTarget() : OutputTarget(nullptr) {}
  ~OutputTarget() override;
  explicit PROTOBUF_CONSTEXPR OutputTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputTarget(const OutputTarget& from);
  OutputTarget(OutputTarget&& from) noexcept
    : OutputTarget() {
    *this = ::std::move(from);
  }

  inline OutputTarget& operator=(const OutputTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputTarget& operator=(OutputTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputTarget* internal_default_instance() {
    return reinterpret_cast<const OutputTarget*>(
               &_OutputTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OutputTarget& a, OutputTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OutputTarget& from) {
    OutputTarget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.config.v1.OutputTarget";
  }
  protected:
  explicit OutputTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSqlFieldNumber = 1,
  };
  // string sql = 1 [json_name = "sql"];
  void clear_sql();
  const std::string& sql() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sql(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sql();
  PROTOBUF_NODISCARD std::string* release_sql();
  void set_allocated_sql(std::string* sql);
  private:
  const std::string& _internal_sql() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sql(const std::string& value);
  std::string* _internal_mutable_sql();
  public:

  // @@protoc_insertion_point(class_scope:city.config.v1.OutputTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fconfig_2fv1_2fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MongoPath

// string db = 1 [json_name = "db"];
inline void MongoPath::clear_db() {
  _impl_.db_.ClearToEmpty();
}
inline const std::string& MongoPath::db() const {
  // @@protoc_insertion_point(field_get:city.config.v1.MongoPath.db)
  return _internal_db();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MongoPath::set_db(ArgT0&& arg0, ArgT... args) {
 
 _impl_.db_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.config.v1.MongoPath.db)
}
inline std::string* MongoPath::mutable_db() {
  std::string* _s = _internal_mutable_db();
  // @@protoc_insertion_point(field_mutable:city.config.v1.MongoPath.db)
  return _s;
}
inline const std::string& MongoPath::_internal_db() const {
  return _impl_.db_.Get();
}
inline void MongoPath::_internal_set_db(const std::string& value) {
  
  _impl_.db_.Set(value, GetArenaForAllocation());
}
inline std::string* MongoPath::_internal_mutable_db() {
  
  return _impl_.db_.Mutable(GetArenaForAllocation());
}
inline std::string* MongoPath::release_db() {
  // @@protoc_insertion_point(field_release:city.config.v1.MongoPath.db)
  return _impl_.db_.Release();
}
inline void MongoPath::set_allocated_db(std::string* db) {
  if (db != nullptr) {
    
  } else {
    
  }
  _impl_.db_.SetAllocated(db, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.db_.IsDefault()) {
    _impl_.db_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.config.v1.MongoPath.db)
}

// string col = 2 [json_name = "col"];
inline void MongoPath::clear_col() {
  _impl_.col_.ClearToEmpty();
}
inline const std::string& MongoPath::col() const {
  // @@protoc_insertion_point(field_get:city.config.v1.MongoPath.col)
  return _internal_col();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MongoPath::set_col(ArgT0&& arg0, ArgT... args) {
 
 _impl_.col_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.config.v1.MongoPath.col)
}
inline std::string* MongoPath::mutable_col() {
  std::string* _s = _internal_mutable_col();
  // @@protoc_insertion_point(field_mutable:city.config.v1.MongoPath.col)
  return _s;
}
inline const std::string& MongoPath::_internal_col() const {
  return _impl_.col_.Get();
}
inline void MongoPath::_internal_set_col(const std::string& value) {
  
  _impl_.col_.Set(value, GetArenaForAllocation());
}
inline std::string* MongoPath::_internal_mutable_col() {
  
  return _impl_.col_.Mutable(GetArenaForAllocation());
}
inline std::string* MongoPath::release_col() {
  // @@protoc_insertion_point(field_release:city.config.v1.MongoPath.col)
  return _impl_.col_.Release();
}
inline void MongoPath::set_allocated_col(std::string* col) {
  if (col != nullptr) {
    
  } else {
    
  }
  _impl_.col_.SetAllocated(col, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.col_.IsDefault()) {
    _impl_.col_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.config.v1.MongoPath.col)
}

// -------------------------------------------------------------------

// OutputTarget

// string sql = 1 [json_name = "sql"];
inline void OutputTarget::clear_sql() {
  _impl_.sql_.ClearToEmpty();
}
inline const std::string& OutputTarget::sql() const {
  // @@protoc_insertion_point(field_get:city.config.v1.OutputTarget.sql)
  return _internal_sql();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OutputTarget::set_sql(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sql_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.config.v1.OutputTarget.sql)
}
inline std::string* OutputTarget::mutable_sql() {
  std::string* _s = _internal_mutable_sql();
  // @@protoc_insertion_point(field_mutable:city.config.v1.OutputTarget.sql)
  return _s;
}
inline const std::string& OutputTarget::_internal_sql() const {
  return _impl_.sql_.Get();
}
inline void OutputTarget::_internal_set_sql(const std::string& value) {
  
  _impl_.sql_.Set(value, GetArenaForAllocation());
}
inline std::string* OutputTarget::_internal_mutable_sql() {
  
  return _impl_.sql_.Mutable(GetArenaForAllocation());
}
inline std::string* OutputTarget::release_sql() {
  // @@protoc_insertion_point(field_release:city.config.v1.OutputTarget.sql)
  return _impl_.sql_.Release();
}
inline void OutputTarget::set_allocated_sql(std::string* sql) {
  if (sql != nullptr) {
    
  } else {
    
  }
  _impl_.sql_.SetAllocated(sql, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sql_.IsDefault()) {
    _impl_.sql_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.config.v1.OutputTarget.sql)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace config
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fconfig_2fv1_2fconfig_2eproto
