// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/water/interaction/v1/water_service.proto

#include "city/water/interaction/v1/water_service.pb.h"
#include "city/water/interaction/v1/water_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace city {
namespace water {
namespace interaction {
namespace v1 {

static const char* WaterService_method_names[] = {
  "/city.water.interaction.v1.WaterService/SetPumpPowerStatus",
  "/city.water.interaction.v1.WaterService/SetPumpNetworkStatus",
  "/city.water.interaction.v1.WaterService/SetPumpStatus",
  "/city.water.interaction.v1.WaterService/GetPumpStatus",
  "/city.water.interaction.v1.WaterService/GetNoWaterAOI",
  "/city.water.interaction.v1.WaterService/GetRuinInfo",
};

std::unique_ptr< WaterService::Stub> WaterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WaterService::Stub> stub(new WaterService::Stub(channel, options));
  return stub;
}

WaterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetPumpPowerStatus_(WaterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPumpNetworkStatus_(WaterService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPumpStatus_(WaterService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPumpStatus_(WaterService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNoWaterAOI_(WaterService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRuinInfo_(WaterService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WaterService::Stub::SetPumpPowerStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest& request, ::city::water::interaction::v1::SetPumpPowerStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::water::interaction::v1::SetPumpPowerStatusRequest, ::city::water::interaction::v1::SetPumpPowerStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPumpPowerStatus_, context, request, response);
}

void WaterService::Stub::async::SetPumpPowerStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* request, ::city::water::interaction::v1::SetPumpPowerStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::water::interaction::v1::SetPumpPowerStatusRequest, ::city::water::interaction::v1::SetPumpPowerStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPumpPowerStatus_, context, request, response, std::move(f));
}

void WaterService::Stub::async::SetPumpPowerStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* request, ::city::water::interaction::v1::SetPumpPowerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPumpPowerStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpPowerStatusResponse>* WaterService::Stub::PrepareAsyncSetPumpPowerStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::water::interaction::v1::SetPumpPowerStatusResponse, ::city::water::interaction::v1::SetPumpPowerStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPumpPowerStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpPowerStatusResponse>* WaterService::Stub::AsyncSetPumpPowerStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPumpPowerStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WaterService::Stub::SetPumpNetworkStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest& request, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::water::interaction::v1::SetPumpNetworkStatusRequest, ::city::water::interaction::v1::SetPumpNetworkStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPumpNetworkStatus_, context, request, response);
}

void WaterService::Stub::async::SetPumpNetworkStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* request, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::water::interaction::v1::SetPumpNetworkStatusRequest, ::city::water::interaction::v1::SetPumpNetworkStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPumpNetworkStatus_, context, request, response, std::move(f));
}

void WaterService::Stub::async::SetPumpNetworkStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* request, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPumpNetworkStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpNetworkStatusResponse>* WaterService::Stub::PrepareAsyncSetPumpNetworkStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::water::interaction::v1::SetPumpNetworkStatusResponse, ::city::water::interaction::v1::SetPumpNetworkStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPumpNetworkStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpNetworkStatusResponse>* WaterService::Stub::AsyncSetPumpNetworkStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPumpNetworkStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WaterService::Stub::SetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest& request, ::city::water::interaction::v1::SetPumpStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::water::interaction::v1::SetPumpStatusRequest, ::city::water::interaction::v1::SetPumpStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPumpStatus_, context, request, response);
}

void WaterService::Stub::async::SetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest* request, ::city::water::interaction::v1::SetPumpStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::water::interaction::v1::SetPumpStatusRequest, ::city::water::interaction::v1::SetPumpStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPumpStatus_, context, request, response, std::move(f));
}

void WaterService::Stub::async::SetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest* request, ::city::water::interaction::v1::SetPumpStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPumpStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpStatusResponse>* WaterService::Stub::PrepareAsyncSetPumpStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::water::interaction::v1::SetPumpStatusResponse, ::city::water::interaction::v1::SetPumpStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPumpStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpStatusResponse>* WaterService::Stub::AsyncSetPumpStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPumpStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WaterService::Stub::GetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest& request, ::city::water::interaction::v1::GetPumpStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::water::interaction::v1::GetPumpStatusRequest, ::city::water::interaction::v1::GetPumpStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPumpStatus_, context, request, response);
}

void WaterService::Stub::async::GetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest* request, ::city::water::interaction::v1::GetPumpStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::water::interaction::v1::GetPumpStatusRequest, ::city::water::interaction::v1::GetPumpStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPumpStatus_, context, request, response, std::move(f));
}

void WaterService::Stub::async::GetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest* request, ::city::water::interaction::v1::GetPumpStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPumpStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetPumpStatusResponse>* WaterService::Stub::PrepareAsyncGetPumpStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::water::interaction::v1::GetPumpStatusResponse, ::city::water::interaction::v1::GetPumpStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPumpStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetPumpStatusResponse>* WaterService::Stub::AsyncGetPumpStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPumpStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WaterService::Stub::GetNoWaterAOI(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest& request, ::city::water::interaction::v1::GetNoWaterAOIResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::water::interaction::v1::GetNoWaterAOIRequest, ::city::water::interaction::v1::GetNoWaterAOIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNoWaterAOI_, context, request, response);
}

void WaterService::Stub::async::GetNoWaterAOI(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest* request, ::city::water::interaction::v1::GetNoWaterAOIResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::water::interaction::v1::GetNoWaterAOIRequest, ::city::water::interaction::v1::GetNoWaterAOIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNoWaterAOI_, context, request, response, std::move(f));
}

void WaterService::Stub::async::GetNoWaterAOI(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest* request, ::city::water::interaction::v1::GetNoWaterAOIResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNoWaterAOI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetNoWaterAOIResponse>* WaterService::Stub::PrepareAsyncGetNoWaterAOIRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::water::interaction::v1::GetNoWaterAOIResponse, ::city::water::interaction::v1::GetNoWaterAOIRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNoWaterAOI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetNoWaterAOIResponse>* WaterService::Stub::AsyncGetNoWaterAOIRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNoWaterAOIRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WaterService::Stub::GetRuinInfo(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest& request, ::city::water::interaction::v1::GetRuinInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::water::interaction::v1::GetRuinInfoRequest, ::city::water::interaction::v1::GetRuinInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRuinInfo_, context, request, response);
}

void WaterService::Stub::async::GetRuinInfo(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest* request, ::city::water::interaction::v1::GetRuinInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::water::interaction::v1::GetRuinInfoRequest, ::city::water::interaction::v1::GetRuinInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRuinInfo_, context, request, response, std::move(f));
}

void WaterService::Stub::async::GetRuinInfo(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest* request, ::city::water::interaction::v1::GetRuinInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRuinInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetRuinInfoResponse>* WaterService::Stub::PrepareAsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::water::interaction::v1::GetRuinInfoResponse, ::city::water::interaction::v1::GetRuinInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRuinInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetRuinInfoResponse>* WaterService::Stub::AsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRuinInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

WaterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WaterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WaterService::Service, ::city::water::interaction::v1::SetPumpPowerStatusRequest, ::city::water::interaction::v1::SetPumpPowerStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WaterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::water::interaction::v1::SetPumpPowerStatusRequest* req,
             ::city::water::interaction::v1::SetPumpPowerStatusResponse* resp) {
               return service->SetPumpPowerStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WaterService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WaterService::Service, ::city::water::interaction::v1::SetPumpNetworkStatusRequest, ::city::water::interaction::v1::SetPumpNetworkStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WaterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* req,
             ::city::water::interaction::v1::SetPumpNetworkStatusResponse* resp) {
               return service->SetPumpNetworkStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WaterService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WaterService::Service, ::city::water::interaction::v1::SetPumpStatusRequest, ::city::water::interaction::v1::SetPumpStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WaterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::water::interaction::v1::SetPumpStatusRequest* req,
             ::city::water::interaction::v1::SetPumpStatusResponse* resp) {
               return service->SetPumpStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WaterService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WaterService::Service, ::city::water::interaction::v1::GetPumpStatusRequest, ::city::water::interaction::v1::GetPumpStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WaterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::water::interaction::v1::GetPumpStatusRequest* req,
             ::city::water::interaction::v1::GetPumpStatusResponse* resp) {
               return service->GetPumpStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WaterService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WaterService::Service, ::city::water::interaction::v1::GetNoWaterAOIRequest, ::city::water::interaction::v1::GetNoWaterAOIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WaterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::water::interaction::v1::GetNoWaterAOIRequest* req,
             ::city::water::interaction::v1::GetNoWaterAOIResponse* resp) {
               return service->GetNoWaterAOI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WaterService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WaterService::Service, ::city::water::interaction::v1::GetRuinInfoRequest, ::city::water::interaction::v1::GetRuinInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WaterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::water::interaction::v1::GetRuinInfoRequest* req,
             ::city::water::interaction::v1::GetRuinInfoResponse* resp) {
               return service->GetRuinInfo(ctx, req, resp);
             }, this)));
}

WaterService::Service::~Service() {
}

::grpc::Status WaterService::Service::SetPumpPowerStatus(::grpc::ServerContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* request, ::city::water::interaction::v1::SetPumpPowerStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WaterService::Service::SetPumpNetworkStatus(::grpc::ServerContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* request, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WaterService::Service::SetPumpStatus(::grpc::ServerContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest* request, ::city::water::interaction::v1::SetPumpStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WaterService::Service::GetPumpStatus(::grpc::ServerContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest* request, ::city::water::interaction::v1::GetPumpStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WaterService::Service::GetNoWaterAOI(::grpc::ServerContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest* request, ::city::water::interaction::v1::GetNoWaterAOIResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WaterService::Service::GetRuinInfo(::grpc::ServerContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest* request, ::city::water::interaction::v1::GetRuinInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace city
}  // namespace water
}  // namespace interaction
}  // namespace v1

