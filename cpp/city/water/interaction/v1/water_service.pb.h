// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/water/interaction/v1/water_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto;
namespace city {
namespace water {
namespace interaction {
namespace v1 {
class GetNoWaterAOIRequest;
struct GetNoWaterAOIRequestDefaultTypeInternal;
extern GetNoWaterAOIRequestDefaultTypeInternal _GetNoWaterAOIRequest_default_instance_;
class GetNoWaterAOIResponse;
struct GetNoWaterAOIResponseDefaultTypeInternal;
extern GetNoWaterAOIResponseDefaultTypeInternal _GetNoWaterAOIResponse_default_instance_;
class GetPumpStatusRequest;
struct GetPumpStatusRequestDefaultTypeInternal;
extern GetPumpStatusRequestDefaultTypeInternal _GetPumpStatusRequest_default_instance_;
class GetPumpStatusResponse;
struct GetPumpStatusResponseDefaultTypeInternal;
extern GetPumpStatusResponseDefaultTypeInternal _GetPumpStatusResponse_default_instance_;
class GetPumpStatusResponse_PumpStatusEntry_DoNotUse;
struct GetPumpStatusResponse_PumpStatusEntry_DoNotUseDefaultTypeInternal;
extern GetPumpStatusResponse_PumpStatusEntry_DoNotUseDefaultTypeInternal _GetPumpStatusResponse_PumpStatusEntry_DoNotUse_default_instance_;
class GetRuinInfoRequest;
struct GetRuinInfoRequestDefaultTypeInternal;
extern GetRuinInfoRequestDefaultTypeInternal _GetRuinInfoRequest_default_instance_;
class GetRuinInfoResponse;
struct GetRuinInfoResponseDefaultTypeInternal;
extern GetRuinInfoResponseDefaultTypeInternal _GetRuinInfoResponse_default_instance_;
class RuinInfo;
struct RuinInfoDefaultTypeInternal;
extern RuinInfoDefaultTypeInternal _RuinInfo_default_instance_;
class SetPumpNetworkStatusRequest;
struct SetPumpNetworkStatusRequestDefaultTypeInternal;
extern SetPumpNetworkStatusRequestDefaultTypeInternal _SetPumpNetworkStatusRequest_default_instance_;
class SetPumpNetworkStatusResponse;
struct SetPumpNetworkStatusResponseDefaultTypeInternal;
extern SetPumpNetworkStatusResponseDefaultTypeInternal _SetPumpNetworkStatusResponse_default_instance_;
class SetPumpPowerStatusRequest;
struct SetPumpPowerStatusRequestDefaultTypeInternal;
extern SetPumpPowerStatusRequestDefaultTypeInternal _SetPumpPowerStatusRequest_default_instance_;
class SetPumpPowerStatusResponse;
struct SetPumpPowerStatusResponseDefaultTypeInternal;
extern SetPumpPowerStatusResponseDefaultTypeInternal _SetPumpPowerStatusResponse_default_instance_;
class SetPumpStatusRequest;
struct SetPumpStatusRequestDefaultTypeInternal;
extern SetPumpStatusRequestDefaultTypeInternal _SetPumpStatusRequest_default_instance_;
class SetPumpStatusResponse;
struct SetPumpStatusResponseDefaultTypeInternal;
extern SetPumpStatusResponseDefaultTypeInternal _SetPumpStatusResponse_default_instance_;
}  // namespace v1
}  // namespace interaction
}  // namespace water
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::water::interaction::v1::GetNoWaterAOIRequest* Arena::CreateMaybeMessage<::city::water::interaction::v1::GetNoWaterAOIRequest>(Arena*);
template<> ::city::water::interaction::v1::GetNoWaterAOIResponse* Arena::CreateMaybeMessage<::city::water::interaction::v1::GetNoWaterAOIResponse>(Arena*);
template<> ::city::water::interaction::v1::GetPumpStatusRequest* Arena::CreateMaybeMessage<::city::water::interaction::v1::GetPumpStatusRequest>(Arena*);
template<> ::city::water::interaction::v1::GetPumpStatusResponse* Arena::CreateMaybeMessage<::city::water::interaction::v1::GetPumpStatusResponse>(Arena*);
template<> ::city::water::interaction::v1::GetPumpStatusResponse_PumpStatusEntry_DoNotUse* Arena::CreateMaybeMessage<::city::water::interaction::v1::GetPumpStatusResponse_PumpStatusEntry_DoNotUse>(Arena*);
template<> ::city::water::interaction::v1::GetRuinInfoRequest* Arena::CreateMaybeMessage<::city::water::interaction::v1::GetRuinInfoRequest>(Arena*);
template<> ::city::water::interaction::v1::GetRuinInfoResponse* Arena::CreateMaybeMessage<::city::water::interaction::v1::GetRuinInfoResponse>(Arena*);
template<> ::city::water::interaction::v1::RuinInfo* Arena::CreateMaybeMessage<::city::water::interaction::v1::RuinInfo>(Arena*);
template<> ::city::water::interaction::v1::SetPumpNetworkStatusRequest* Arena::CreateMaybeMessage<::city::water::interaction::v1::SetPumpNetworkStatusRequest>(Arena*);
template<> ::city::water::interaction::v1::SetPumpNetworkStatusResponse* Arena::CreateMaybeMessage<::city::water::interaction::v1::SetPumpNetworkStatusResponse>(Arena*);
template<> ::city::water::interaction::v1::SetPumpPowerStatusRequest* Arena::CreateMaybeMessage<::city::water::interaction::v1::SetPumpPowerStatusRequest>(Arena*);
template<> ::city::water::interaction::v1::SetPumpPowerStatusResponse* Arena::CreateMaybeMessage<::city::water::interaction::v1::SetPumpPowerStatusResponse>(Arena*);
template<> ::city::water::interaction::v1::SetPumpStatusRequest* Arena::CreateMaybeMessage<::city::water::interaction::v1::SetPumpStatusRequest>(Arena*);
template<> ::city::water::interaction::v1::SetPumpStatusResponse* Arena::CreateMaybeMessage<::city::water::interaction::v1::SetPumpStatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace water {
namespace interaction {
namespace v1 {

enum WaterFacilityType : int {
  WATER_FACILITY_TYPE_UNSPECIFIED = 0,
  WATER_FACILITY_TYPE_SUPPLY = 1,
  WATER_FACILITY_TYPE_DRAINAGE = 2,
  WaterFacilityType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WaterFacilityType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WaterFacilityType_IsValid(int value);
constexpr WaterFacilityType WaterFacilityType_MIN = WATER_FACILITY_TYPE_UNSPECIFIED;
constexpr WaterFacilityType WaterFacilityType_MAX = WATER_FACILITY_TYPE_DRAINAGE;
constexpr int WaterFacilityType_ARRAYSIZE = WaterFacilityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WaterFacilityType_descriptor();
template<typename T>
inline const std::string& WaterFacilityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WaterFacilityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WaterFacilityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WaterFacilityType_descriptor(), enum_t_value);
}
inline bool WaterFacilityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WaterFacilityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WaterFacilityType>(
    WaterFacilityType_descriptor(), name, value);
}
// ===================================================================

class SetPumpPowerStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.water.interaction.v1.SetPumpPowerStatusRequest) */ {
 public:
  inline SetPumpPowerStatusRequest() : SetPumpPowerStatusRequest(nullptr) {}
  ~SetPumpPowerStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR SetPumpPowerStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPumpPowerStatusRequest(const SetPumpPowerStatusRequest& from);
  SetPumpPowerStatusRequest(SetPumpPowerStatusRequest&& from) noexcept
    : SetPumpPowerStatusRequest() {
    *this = ::std::move(from);
  }

  inline SetPumpPowerStatusRequest& operator=(const SetPumpPowerStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPumpPowerStatusRequest& operator=(SetPumpPowerStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPumpPowerStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPumpPowerStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SetPumpPowerStatusRequest*>(
               &_SetPumpPowerStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetPumpPowerStatusRequest& a, SetPumpPowerStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPumpPowerStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPumpPowerStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPumpPowerStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPumpPowerStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPumpPowerStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetPumpPowerStatusRequest& from) {
    SetPumpPowerStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPumpPowerStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.interaction.v1.SetPumpPowerStatusRequest";
  }
  protected:
  explicit SetPumpPowerStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // bool status = 2 [json_name = "status"];
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // .city.water.interaction.v1.WaterFacilityType type = 3 [json_name = "type"];
  void clear_type();
  ::city::water::interaction::v1::WaterFacilityType type() const;
  void set_type(::city::water::interaction::v1::WaterFacilityType value);
  private:
  ::city::water::interaction::v1::WaterFacilityType _internal_type() const;
  void _internal_set_type(::city::water::interaction::v1::WaterFacilityType value);
  public:

  // @@protoc_insertion_point(class_scope:city.water.interaction.v1.SetPumpPowerStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    bool status_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetPumpPowerStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.water.interaction.v1.SetPumpPowerStatusResponse) */ {
 public:
  inline SetPumpPowerStatusResponse() : SetPumpPowerStatusResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetPumpPowerStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPumpPowerStatusResponse(const SetPumpPowerStatusResponse& from);
  SetPumpPowerStatusResponse(SetPumpPowerStatusResponse&& from) noexcept
    : SetPumpPowerStatusResponse() {
    *this = ::std::move(from);
  }

  inline SetPumpPowerStatusResponse& operator=(const SetPumpPowerStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPumpPowerStatusResponse& operator=(SetPumpPowerStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPumpPowerStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPumpPowerStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SetPumpPowerStatusResponse*>(
               &_SetPumpPowerStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetPumpPowerStatusResponse& a, SetPumpPowerStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPumpPowerStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPumpPowerStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPumpPowerStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPumpPowerStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetPumpPowerStatusResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetPumpPowerStatusResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.interaction.v1.SetPumpPowerStatusResponse";
  }
  protected:
  explicit SetPumpPowerStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.water.interaction.v1.SetPumpPowerStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetPumpNetworkStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.water.interaction.v1.SetPumpNetworkStatusRequest) */ {
 public:
  inline SetPumpNetworkStatusRequest() : SetPumpNetworkStatusRequest(nullptr) {}
  ~SetPumpNetworkStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR SetPumpNetworkStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPumpNetworkStatusRequest(const SetPumpNetworkStatusRequest& from);
  SetPumpNetworkStatusRequest(SetPumpNetworkStatusRequest&& from) noexcept
    : SetPumpNetworkStatusRequest() {
    *this = ::std::move(from);
  }

  inline SetPumpNetworkStatusRequest& operator=(const SetPumpNetworkStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPumpNetworkStatusRequest& operator=(SetPumpNetworkStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPumpNetworkStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPumpNetworkStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SetPumpNetworkStatusRequest*>(
               &_SetPumpNetworkStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetPumpNetworkStatusRequest& a, SetPumpNetworkStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPumpNetworkStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPumpNetworkStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPumpNetworkStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPumpNetworkStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPumpNetworkStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetPumpNetworkStatusRequest& from) {
    SetPumpNetworkStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPumpNetworkStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.interaction.v1.SetPumpNetworkStatusRequest";
  }
  protected:
  explicit SetPumpNetworkStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // bool status = 2 [json_name = "status"];
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // .city.water.interaction.v1.WaterFacilityType type = 3 [json_name = "type"];
  void clear_type();
  ::city::water::interaction::v1::WaterFacilityType type() const;
  void set_type(::city::water::interaction::v1::WaterFacilityType value);
  private:
  ::city::water::interaction::v1::WaterFacilityType _internal_type() const;
  void _internal_set_type(::city::water::interaction::v1::WaterFacilityType value);
  public:

  // @@protoc_insertion_point(class_scope:city.water.interaction.v1.SetPumpNetworkStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    bool status_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetPumpNetworkStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.water.interaction.v1.SetPumpNetworkStatusResponse) */ {
 public:
  inline SetPumpNetworkStatusResponse() : SetPumpNetworkStatusResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetPumpNetworkStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPumpNetworkStatusResponse(const SetPumpNetworkStatusResponse& from);
  SetPumpNetworkStatusResponse(SetPumpNetworkStatusResponse&& from) noexcept
    : SetPumpNetworkStatusResponse() {
    *this = ::std::move(from);
  }

  inline SetPumpNetworkStatusResponse& operator=(const SetPumpNetworkStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPumpNetworkStatusResponse& operator=(SetPumpNetworkStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPumpNetworkStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPumpNetworkStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SetPumpNetworkStatusResponse*>(
               &_SetPumpNetworkStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetPumpNetworkStatusResponse& a, SetPumpNetworkStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPumpNetworkStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPumpNetworkStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPumpNetworkStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPumpNetworkStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetPumpNetworkStatusResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetPumpNetworkStatusResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.interaction.v1.SetPumpNetworkStatusResponse";
  }
  protected:
  explicit SetPumpNetworkStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.water.interaction.v1.SetPumpNetworkStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetPumpStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.water.interaction.v1.SetPumpStatusRequest) */ {
 public:
  inline SetPumpStatusRequest() : SetPumpStatusRequest(nullptr) {}
  ~SetPumpStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR SetPumpStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPumpStatusRequest(const SetPumpStatusRequest& from);
  SetPumpStatusRequest(SetPumpStatusRequest&& from) noexcept
    : SetPumpStatusRequest() {
    *this = ::std::move(from);
  }

  inline SetPumpStatusRequest& operator=(const SetPumpStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPumpStatusRequest& operator=(SetPumpStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPumpStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPumpStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SetPumpStatusRequest*>(
               &_SetPumpStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetPumpStatusRequest& a, SetPumpStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPumpStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPumpStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPumpStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPumpStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPumpStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetPumpStatusRequest& from) {
    SetPumpStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPumpStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.interaction.v1.SetPumpStatusRequest";
  }
  protected:
  explicit SetPumpStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // bool status = 2 [json_name = "status"];
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // .city.water.interaction.v1.WaterFacilityType type = 3 [json_name = "type"];
  void clear_type();
  ::city::water::interaction::v1::WaterFacilityType type() const;
  void set_type(::city::water::interaction::v1::WaterFacilityType value);
  private:
  ::city::water::interaction::v1::WaterFacilityType _internal_type() const;
  void _internal_set_type(::city::water::interaction::v1::WaterFacilityType value);
  public:

  // @@protoc_insertion_point(class_scope:city.water.interaction.v1.SetPumpStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    bool status_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetPumpStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.water.interaction.v1.SetPumpStatusResponse) */ {
 public:
  inline SetPumpStatusResponse() : SetPumpStatusResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetPumpStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPumpStatusResponse(const SetPumpStatusResponse& from);
  SetPumpStatusResponse(SetPumpStatusResponse&& from) noexcept
    : SetPumpStatusResponse() {
    *this = ::std::move(from);
  }

  inline SetPumpStatusResponse& operator=(const SetPumpStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPumpStatusResponse& operator=(SetPumpStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPumpStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPumpStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SetPumpStatusResponse*>(
               &_SetPumpStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SetPumpStatusResponse& a, SetPumpStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPumpStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPumpStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPumpStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPumpStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetPumpStatusResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetPumpStatusResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.interaction.v1.SetPumpStatusResponse";
  }
  protected:
  explicit SetPumpStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.water.interaction.v1.SetPumpStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPumpStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.water.interaction.v1.GetPumpStatusRequest) */ {
 public:
  inline GetPumpStatusRequest() : GetPumpStatusRequest(nullptr) {}
  ~GetPumpStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPumpStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPumpStatusRequest(const GetPumpStatusRequest& from);
  GetPumpStatusRequest(GetPumpStatusRequest&& from) noexcept
    : GetPumpStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetPumpStatusRequest& operator=(const GetPumpStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPumpStatusRequest& operator=(GetPumpStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPumpStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPumpStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetPumpStatusRequest*>(
               &_GetPumpStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetPumpStatusRequest& a, GetPumpStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPumpStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPumpStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPumpStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPumpStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPumpStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPumpStatusRequest& from) {
    GetPumpStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPumpStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.interaction.v1.GetPumpStatusRequest";
  }
  protected:
  explicit GetPumpStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
  };
  // int32 flag = 1 [json_name = "flag"];
  void clear_flag();
  int32_t flag() const;
  void set_flag(int32_t value);
  private:
  int32_t _internal_flag() const;
  void _internal_set_flag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.water.interaction.v1.GetPumpStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPumpStatusResponse_PumpStatusEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetPumpStatusResponse_PumpStatusEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetPumpStatusResponse_PumpStatusEntry_DoNotUse, 
    int32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  GetPumpStatusResponse_PumpStatusEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GetPumpStatusResponse_PumpStatusEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetPumpStatusResponse_PumpStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetPumpStatusResponse_PumpStatusEntry_DoNotUse& other);
  static const GetPumpStatusResponse_PumpStatusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetPumpStatusResponse_PumpStatusEntry_DoNotUse*>(&_GetPumpStatusResponse_PumpStatusEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto;
};

// -------------------------------------------------------------------

class GetPumpStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.water.interaction.v1.GetPumpStatusResponse) */ {
 public:
  inline GetPumpStatusResponse() : GetPumpStatusResponse(nullptr) {}
  ~GetPumpStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPumpStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPumpStatusResponse(const GetPumpStatusResponse& from);
  GetPumpStatusResponse(GetPumpStatusResponse&& from) noexcept
    : GetPumpStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetPumpStatusResponse& operator=(const GetPumpStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPumpStatusResponse& operator=(GetPumpStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPumpStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPumpStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetPumpStatusResponse*>(
               &_GetPumpStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetPumpStatusResponse& a, GetPumpStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPumpStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPumpStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPumpStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPumpStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPumpStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPumpStatusResponse& from) {
    GetPumpStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPumpStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.interaction.v1.GetPumpStatusResponse";
  }
  protected:
  explicit GetPumpStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPumpStatusFieldNumber = 1,
  };
  // map<int32, int32> pump_status = 1 [json_name = "pumpStatus"];
  int pump_status_size() const;
  private:
  int _internal_pump_status_size() const;
  public:
  void clear_pump_status();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      _internal_pump_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      _internal_mutable_pump_status();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
      pump_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
      mutable_pump_status();

  // @@protoc_insertion_point(class_scope:city.water.interaction.v1.GetPumpStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GetPumpStatusResponse_PumpStatusEntry_DoNotUse,
        int32_t, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> pump_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetNoWaterAOIRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.water.interaction.v1.GetNoWaterAOIRequest) */ {
 public:
  inline GetNoWaterAOIRequest() : GetNoWaterAOIRequest(nullptr) {}
  ~GetNoWaterAOIRequest() override;
  explicit PROTOBUF_CONSTEXPR GetNoWaterAOIRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNoWaterAOIRequest(const GetNoWaterAOIRequest& from);
  GetNoWaterAOIRequest(GetNoWaterAOIRequest&& from) noexcept
    : GetNoWaterAOIRequest() {
    *this = ::std::move(from);
  }

  inline GetNoWaterAOIRequest& operator=(const GetNoWaterAOIRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNoWaterAOIRequest& operator=(GetNoWaterAOIRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNoWaterAOIRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNoWaterAOIRequest* internal_default_instance() {
    return reinterpret_cast<const GetNoWaterAOIRequest*>(
               &_GetNoWaterAOIRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetNoWaterAOIRequest& a, GetNoWaterAOIRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNoWaterAOIRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNoWaterAOIRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNoWaterAOIRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNoWaterAOIRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNoWaterAOIRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNoWaterAOIRequest& from) {
    GetNoWaterAOIRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNoWaterAOIRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.interaction.v1.GetNoWaterAOIRequest";
  }
  protected:
  explicit GetNoWaterAOIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
  };
  // int32 flag = 1 [json_name = "flag"];
  void clear_flag();
  int32_t flag() const;
  void set_flag(int32_t value);
  private:
  int32_t _internal_flag() const;
  void _internal_set_flag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.water.interaction.v1.GetNoWaterAOIRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetNoWaterAOIResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.water.interaction.v1.GetNoWaterAOIResponse) */ {
 public:
  inline GetNoWaterAOIResponse() : GetNoWaterAOIResponse(nullptr) {}
  ~GetNoWaterAOIResponse() override;
  explicit PROTOBUF_CONSTEXPR GetNoWaterAOIResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNoWaterAOIResponse(const GetNoWaterAOIResponse& from);
  GetNoWaterAOIResponse(GetNoWaterAOIResponse&& from) noexcept
    : GetNoWaterAOIResponse() {
    *this = ::std::move(from);
  }

  inline GetNoWaterAOIResponse& operator=(const GetNoWaterAOIResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNoWaterAOIResponse& operator=(GetNoWaterAOIResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNoWaterAOIResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNoWaterAOIResponse* internal_default_instance() {
    return reinterpret_cast<const GetNoWaterAOIResponse*>(
               &_GetNoWaterAOIResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetNoWaterAOIResponse& a, GetNoWaterAOIResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNoWaterAOIResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNoWaterAOIResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNoWaterAOIResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNoWaterAOIResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNoWaterAOIResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNoWaterAOIResponse& from) {
    GetNoWaterAOIResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNoWaterAOIResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.interaction.v1.GetNoWaterAOIResponse";
  }
  protected:
  explicit GetNoWaterAOIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAoiFieldNumber = 1,
  };
  // repeated int32 aoi = 1 [json_name = "aoi"];
  int aoi_size() const;
  private:
  int _internal_aoi_size() const;
  public:
  void clear_aoi();
  private:
  int32_t _internal_aoi(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_aoi() const;
  void _internal_add_aoi(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_aoi();
  public:
  int32_t aoi(int index) const;
  void set_aoi(int index, int32_t value);
  void add_aoi(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      aoi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_aoi();

  // @@protoc_insertion_point(class_scope:city.water.interaction.v1.GetNoWaterAOIResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > aoi_;
    mutable std::atomic<int> _aoi_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetRuinInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.water.interaction.v1.GetRuinInfoRequest) */ {
 public:
  inline GetRuinInfoRequest() : GetRuinInfoRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetRuinInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRuinInfoRequest(const GetRuinInfoRequest& from);
  GetRuinInfoRequest(GetRuinInfoRequest&& from) noexcept
    : GetRuinInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetRuinInfoRequest& operator=(const GetRuinInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRuinInfoRequest& operator=(GetRuinInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRuinInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRuinInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetRuinInfoRequest*>(
               &_GetRuinInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetRuinInfoRequest& a, GetRuinInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRuinInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRuinInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRuinInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRuinInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetRuinInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetRuinInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.interaction.v1.GetRuinInfoRequest";
  }
  protected:
  explicit GetRuinInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.water.interaction.v1.GetRuinInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RuinInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.water.interaction.v1.RuinInfo) */ {
 public:
  inline RuinInfo() : RuinInfo(nullptr) {}
  ~RuinInfo() override;
  explicit PROTOBUF_CONSTEXPR RuinInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuinInfo(const RuinInfo& from);
  RuinInfo(RuinInfo&& from) noexcept
    : RuinInfo() {
    *this = ::std::move(from);
  }

  inline RuinInfo& operator=(const RuinInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuinInfo& operator=(RuinInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuinInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuinInfo* internal_default_instance() {
    return reinterpret_cast<const RuinInfo*>(
               &_RuinInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RuinInfo& a, RuinInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RuinInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuinInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuinInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RuinInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuinInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RuinInfo& from) {
    RuinInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuinInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.interaction.v1.RuinInfo";
  }
  protected:
  explicit RuinInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioFieldNumber = 2,
    kNumFieldNumber = 1,
  };
  // double ratio = 2 [json_name = "ratio"];
  void clear_ratio();
  double ratio() const;
  void set_ratio(double value);
  private:
  double _internal_ratio() const;
  void _internal_set_ratio(double value);
  public:

  // int32 num = 1 [json_name = "num"];
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.water.interaction.v1.RuinInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double ratio_;
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetRuinInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.water.interaction.v1.GetRuinInfoResponse) */ {
 public:
  inline GetRuinInfoResponse() : GetRuinInfoResponse(nullptr) {}
  ~GetRuinInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetRuinInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRuinInfoResponse(const GetRuinInfoResponse& from);
  GetRuinInfoResponse(GetRuinInfoResponse&& from) noexcept
    : GetRuinInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetRuinInfoResponse& operator=(const GetRuinInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRuinInfoResponse& operator=(GetRuinInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRuinInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRuinInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetRuinInfoResponse*>(
               &_GetRuinInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetRuinInfoResponse& a, GetRuinInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRuinInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRuinInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRuinInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRuinInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRuinInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRuinInfoResponse& from) {
    GetRuinInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRuinInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.interaction.v1.GetRuinInfoResponse";
  }
  protected:
  explicit GetRuinInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneFieldNumber = 1,
    kTwoFieldNumber = 2,
    kThreeFieldNumber = 3,
  };
  // .city.water.interaction.v1.RuinInfo one = 1 [json_name = "one"];
  bool has_one() const;
  private:
  bool _internal_has_one() const;
  public:
  void clear_one();
  const ::city::water::interaction::v1::RuinInfo& one() const;
  PROTOBUF_NODISCARD ::city::water::interaction::v1::RuinInfo* release_one();
  ::city::water::interaction::v1::RuinInfo* mutable_one();
  void set_allocated_one(::city::water::interaction::v1::RuinInfo* one);
  private:
  const ::city::water::interaction::v1::RuinInfo& _internal_one() const;
  ::city::water::interaction::v1::RuinInfo* _internal_mutable_one();
  public:
  void unsafe_arena_set_allocated_one(
      ::city::water::interaction::v1::RuinInfo* one);
  ::city::water::interaction::v1::RuinInfo* unsafe_arena_release_one();

  // .city.water.interaction.v1.RuinInfo two = 2 [json_name = "two"];
  bool has_two() const;
  private:
  bool _internal_has_two() const;
  public:
  void clear_two();
  const ::city::water::interaction::v1::RuinInfo& two() const;
  PROTOBUF_NODISCARD ::city::water::interaction::v1::RuinInfo* release_two();
  ::city::water::interaction::v1::RuinInfo* mutable_two();
  void set_allocated_two(::city::water::interaction::v1::RuinInfo* two);
  private:
  const ::city::water::interaction::v1::RuinInfo& _internal_two() const;
  ::city::water::interaction::v1::RuinInfo* _internal_mutable_two();
  public:
  void unsafe_arena_set_allocated_two(
      ::city::water::interaction::v1::RuinInfo* two);
  ::city::water::interaction::v1::RuinInfo* unsafe_arena_release_two();

  // .city.water.interaction.v1.RuinInfo three = 3 [json_name = "three"];
  bool has_three() const;
  private:
  bool _internal_has_three() const;
  public:
  void clear_three();
  const ::city::water::interaction::v1::RuinInfo& three() const;
  PROTOBUF_NODISCARD ::city::water::interaction::v1::RuinInfo* release_three();
  ::city::water::interaction::v1::RuinInfo* mutable_three();
  void set_allocated_three(::city::water::interaction::v1::RuinInfo* three);
  private:
  const ::city::water::interaction::v1::RuinInfo& _internal_three() const;
  ::city::water::interaction::v1::RuinInfo* _internal_mutable_three();
  public:
  void unsafe_arena_set_allocated_three(
      ::city::water::interaction::v1::RuinInfo* three);
  ::city::water::interaction::v1::RuinInfo* unsafe_arena_release_three();

  // @@protoc_insertion_point(class_scope:city.water.interaction.v1.GetRuinInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::water::interaction::v1::RuinInfo* one_;
    ::city::water::interaction::v1::RuinInfo* two_;
    ::city::water::interaction::v1::RuinInfo* three_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetPumpPowerStatusRequest

// int32 id = 1 [json_name = "id"];
inline void SetPumpPowerStatusRequest::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t SetPumpPowerStatusRequest::_internal_id() const {
  return _impl_.id_;
}
inline int32_t SetPumpPowerStatusRequest::id() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.SetPumpPowerStatusRequest.id)
  return _internal_id();
}
inline void SetPumpPowerStatusRequest::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void SetPumpPowerStatusRequest::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.water.interaction.v1.SetPumpPowerStatusRequest.id)
}

// bool status = 2 [json_name = "status"];
inline void SetPumpPowerStatusRequest::clear_status() {
  _impl_.status_ = false;
}
inline bool SetPumpPowerStatusRequest::_internal_status() const {
  return _impl_.status_;
}
inline bool SetPumpPowerStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.SetPumpPowerStatusRequest.status)
  return _internal_status();
}
inline void SetPumpPowerStatusRequest::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void SetPumpPowerStatusRequest::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:city.water.interaction.v1.SetPumpPowerStatusRequest.status)
}

// .city.water.interaction.v1.WaterFacilityType type = 3 [json_name = "type"];
inline void SetPumpPowerStatusRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::water::interaction::v1::WaterFacilityType SetPumpPowerStatusRequest::_internal_type() const {
  return static_cast< ::city::water::interaction::v1::WaterFacilityType >(_impl_.type_);
}
inline ::city::water::interaction::v1::WaterFacilityType SetPumpPowerStatusRequest::type() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.SetPumpPowerStatusRequest.type)
  return _internal_type();
}
inline void SetPumpPowerStatusRequest::_internal_set_type(::city::water::interaction::v1::WaterFacilityType value) {
  
  _impl_.type_ = value;
}
inline void SetPumpPowerStatusRequest::set_type(::city::water::interaction::v1::WaterFacilityType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.water.interaction.v1.SetPumpPowerStatusRequest.type)
}

// -------------------------------------------------------------------

// SetPumpPowerStatusResponse

// -------------------------------------------------------------------

// SetPumpNetworkStatusRequest

// int32 id = 1 [json_name = "id"];
inline void SetPumpNetworkStatusRequest::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t SetPumpNetworkStatusRequest::_internal_id() const {
  return _impl_.id_;
}
inline int32_t SetPumpNetworkStatusRequest::id() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.SetPumpNetworkStatusRequest.id)
  return _internal_id();
}
inline void SetPumpNetworkStatusRequest::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void SetPumpNetworkStatusRequest::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.water.interaction.v1.SetPumpNetworkStatusRequest.id)
}

// bool status = 2 [json_name = "status"];
inline void SetPumpNetworkStatusRequest::clear_status() {
  _impl_.status_ = false;
}
inline bool SetPumpNetworkStatusRequest::_internal_status() const {
  return _impl_.status_;
}
inline bool SetPumpNetworkStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.SetPumpNetworkStatusRequest.status)
  return _internal_status();
}
inline void SetPumpNetworkStatusRequest::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void SetPumpNetworkStatusRequest::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:city.water.interaction.v1.SetPumpNetworkStatusRequest.status)
}

// .city.water.interaction.v1.WaterFacilityType type = 3 [json_name = "type"];
inline void SetPumpNetworkStatusRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::water::interaction::v1::WaterFacilityType SetPumpNetworkStatusRequest::_internal_type() const {
  return static_cast< ::city::water::interaction::v1::WaterFacilityType >(_impl_.type_);
}
inline ::city::water::interaction::v1::WaterFacilityType SetPumpNetworkStatusRequest::type() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.SetPumpNetworkStatusRequest.type)
  return _internal_type();
}
inline void SetPumpNetworkStatusRequest::_internal_set_type(::city::water::interaction::v1::WaterFacilityType value) {
  
  _impl_.type_ = value;
}
inline void SetPumpNetworkStatusRequest::set_type(::city::water::interaction::v1::WaterFacilityType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.water.interaction.v1.SetPumpNetworkStatusRequest.type)
}

// -------------------------------------------------------------------

// SetPumpNetworkStatusResponse

// -------------------------------------------------------------------

// SetPumpStatusRequest

// int32 id = 1 [json_name = "id"];
inline void SetPumpStatusRequest::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t SetPumpStatusRequest::_internal_id() const {
  return _impl_.id_;
}
inline int32_t SetPumpStatusRequest::id() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.SetPumpStatusRequest.id)
  return _internal_id();
}
inline void SetPumpStatusRequest::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void SetPumpStatusRequest::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.water.interaction.v1.SetPumpStatusRequest.id)
}

// bool status = 2 [json_name = "status"];
inline void SetPumpStatusRequest::clear_status() {
  _impl_.status_ = false;
}
inline bool SetPumpStatusRequest::_internal_status() const {
  return _impl_.status_;
}
inline bool SetPumpStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.SetPumpStatusRequest.status)
  return _internal_status();
}
inline void SetPumpStatusRequest::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void SetPumpStatusRequest::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:city.water.interaction.v1.SetPumpStatusRequest.status)
}

// .city.water.interaction.v1.WaterFacilityType type = 3 [json_name = "type"];
inline void SetPumpStatusRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::water::interaction::v1::WaterFacilityType SetPumpStatusRequest::_internal_type() const {
  return static_cast< ::city::water::interaction::v1::WaterFacilityType >(_impl_.type_);
}
inline ::city::water::interaction::v1::WaterFacilityType SetPumpStatusRequest::type() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.SetPumpStatusRequest.type)
  return _internal_type();
}
inline void SetPumpStatusRequest::_internal_set_type(::city::water::interaction::v1::WaterFacilityType value) {
  
  _impl_.type_ = value;
}
inline void SetPumpStatusRequest::set_type(::city::water::interaction::v1::WaterFacilityType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.water.interaction.v1.SetPumpStatusRequest.type)
}

// -------------------------------------------------------------------

// SetPumpStatusResponse

// -------------------------------------------------------------------

// GetPumpStatusRequest

// int32 flag = 1 [json_name = "flag"];
inline void GetPumpStatusRequest::clear_flag() {
  _impl_.flag_ = 0;
}
inline int32_t GetPumpStatusRequest::_internal_flag() const {
  return _impl_.flag_;
}
inline int32_t GetPumpStatusRequest::flag() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.GetPumpStatusRequest.flag)
  return _internal_flag();
}
inline void GetPumpStatusRequest::_internal_set_flag(int32_t value) {
  
  _impl_.flag_ = value;
}
inline void GetPumpStatusRequest::set_flag(int32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:city.water.interaction.v1.GetPumpStatusRequest.flag)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetPumpStatusResponse

// map<int32, int32> pump_status = 1 [json_name = "pumpStatus"];
inline int GetPumpStatusResponse::_internal_pump_status_size() const {
  return _impl_.pump_status_.size();
}
inline int GetPumpStatusResponse::pump_status_size() const {
  return _internal_pump_status_size();
}
inline void GetPumpStatusResponse::clear_pump_status() {
  _impl_.pump_status_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
GetPumpStatusResponse::_internal_pump_status() const {
  return _impl_.pump_status_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >&
GetPumpStatusResponse::pump_status() const {
  // @@protoc_insertion_point(field_map:city.water.interaction.v1.GetPumpStatusResponse.pump_status)
  return _internal_pump_status();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
GetPumpStatusResponse::_internal_mutable_pump_status() {
  return _impl_.pump_status_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, int32_t >*
GetPumpStatusResponse::mutable_pump_status() {
  // @@protoc_insertion_point(field_mutable_map:city.water.interaction.v1.GetPumpStatusResponse.pump_status)
  return _internal_mutable_pump_status();
}

// -------------------------------------------------------------------

// GetNoWaterAOIRequest

// int32 flag = 1 [json_name = "flag"];
inline void GetNoWaterAOIRequest::clear_flag() {
  _impl_.flag_ = 0;
}
inline int32_t GetNoWaterAOIRequest::_internal_flag() const {
  return _impl_.flag_;
}
inline int32_t GetNoWaterAOIRequest::flag() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.GetNoWaterAOIRequest.flag)
  return _internal_flag();
}
inline void GetNoWaterAOIRequest::_internal_set_flag(int32_t value) {
  
  _impl_.flag_ = value;
}
inline void GetNoWaterAOIRequest::set_flag(int32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:city.water.interaction.v1.GetNoWaterAOIRequest.flag)
}

// -------------------------------------------------------------------

// GetNoWaterAOIResponse

// repeated int32 aoi = 1 [json_name = "aoi"];
inline int GetNoWaterAOIResponse::_internal_aoi_size() const {
  return _impl_.aoi_.size();
}
inline int GetNoWaterAOIResponse::aoi_size() const {
  return _internal_aoi_size();
}
inline void GetNoWaterAOIResponse::clear_aoi() {
  _impl_.aoi_.Clear();
}
inline int32_t GetNoWaterAOIResponse::_internal_aoi(int index) const {
  return _impl_.aoi_.Get(index);
}
inline int32_t GetNoWaterAOIResponse::aoi(int index) const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.GetNoWaterAOIResponse.aoi)
  return _internal_aoi(index);
}
inline void GetNoWaterAOIResponse::set_aoi(int index, int32_t value) {
  _impl_.aoi_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.water.interaction.v1.GetNoWaterAOIResponse.aoi)
}
inline void GetNoWaterAOIResponse::_internal_add_aoi(int32_t value) {
  _impl_.aoi_.Add(value);
}
inline void GetNoWaterAOIResponse::add_aoi(int32_t value) {
  _internal_add_aoi(value);
  // @@protoc_insertion_point(field_add:city.water.interaction.v1.GetNoWaterAOIResponse.aoi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetNoWaterAOIResponse::_internal_aoi() const {
  return _impl_.aoi_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetNoWaterAOIResponse::aoi() const {
  // @@protoc_insertion_point(field_list:city.water.interaction.v1.GetNoWaterAOIResponse.aoi)
  return _internal_aoi();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetNoWaterAOIResponse::_internal_mutable_aoi() {
  return &_impl_.aoi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetNoWaterAOIResponse::mutable_aoi() {
  // @@protoc_insertion_point(field_mutable_list:city.water.interaction.v1.GetNoWaterAOIResponse.aoi)
  return _internal_mutable_aoi();
}

// -------------------------------------------------------------------

// GetRuinInfoRequest

// -------------------------------------------------------------------

// RuinInfo

// int32 num = 1 [json_name = "num"];
inline void RuinInfo::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t RuinInfo::_internal_num() const {
  return _impl_.num_;
}
inline int32_t RuinInfo::num() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.RuinInfo.num)
  return _internal_num();
}
inline void RuinInfo::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void RuinInfo::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:city.water.interaction.v1.RuinInfo.num)
}

// double ratio = 2 [json_name = "ratio"];
inline void RuinInfo::clear_ratio() {
  _impl_.ratio_ = 0;
}
inline double RuinInfo::_internal_ratio() const {
  return _impl_.ratio_;
}
inline double RuinInfo::ratio() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.RuinInfo.ratio)
  return _internal_ratio();
}
inline void RuinInfo::_internal_set_ratio(double value) {
  
  _impl_.ratio_ = value;
}
inline void RuinInfo::set_ratio(double value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:city.water.interaction.v1.RuinInfo.ratio)
}

// -------------------------------------------------------------------

// GetRuinInfoResponse

// .city.water.interaction.v1.RuinInfo one = 1 [json_name = "one"];
inline bool GetRuinInfoResponse::_internal_has_one() const {
  return this != internal_default_instance() && _impl_.one_ != nullptr;
}
inline bool GetRuinInfoResponse::has_one() const {
  return _internal_has_one();
}
inline void GetRuinInfoResponse::clear_one() {
  if (GetArenaForAllocation() == nullptr && _impl_.one_ != nullptr) {
    delete _impl_.one_;
  }
  _impl_.one_ = nullptr;
}
inline const ::city::water::interaction::v1::RuinInfo& GetRuinInfoResponse::_internal_one() const {
  const ::city::water::interaction::v1::RuinInfo* p = _impl_.one_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::water::interaction::v1::RuinInfo&>(
      ::city::water::interaction::v1::_RuinInfo_default_instance_);
}
inline const ::city::water::interaction::v1::RuinInfo& GetRuinInfoResponse::one() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.GetRuinInfoResponse.one)
  return _internal_one();
}
inline void GetRuinInfoResponse::unsafe_arena_set_allocated_one(
    ::city::water::interaction::v1::RuinInfo* one) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.one_);
  }
  _impl_.one_ = one;
  if (one) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.water.interaction.v1.GetRuinInfoResponse.one)
}
inline ::city::water::interaction::v1::RuinInfo* GetRuinInfoResponse::release_one() {
  
  ::city::water::interaction::v1::RuinInfo* temp = _impl_.one_;
  _impl_.one_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::water::interaction::v1::RuinInfo* GetRuinInfoResponse::unsafe_arena_release_one() {
  // @@protoc_insertion_point(field_release:city.water.interaction.v1.GetRuinInfoResponse.one)
  
  ::city::water::interaction::v1::RuinInfo* temp = _impl_.one_;
  _impl_.one_ = nullptr;
  return temp;
}
inline ::city::water::interaction::v1::RuinInfo* GetRuinInfoResponse::_internal_mutable_one() {
  
  if (_impl_.one_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::water::interaction::v1::RuinInfo>(GetArenaForAllocation());
    _impl_.one_ = p;
  }
  return _impl_.one_;
}
inline ::city::water::interaction::v1::RuinInfo* GetRuinInfoResponse::mutable_one() {
  ::city::water::interaction::v1::RuinInfo* _msg = _internal_mutable_one();
  // @@protoc_insertion_point(field_mutable:city.water.interaction.v1.GetRuinInfoResponse.one)
  return _msg;
}
inline void GetRuinInfoResponse::set_allocated_one(::city::water::interaction::v1::RuinInfo* one) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.one_;
  }
  if (one) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(one);
    if (message_arena != submessage_arena) {
      one = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, one, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.one_ = one;
  // @@protoc_insertion_point(field_set_allocated:city.water.interaction.v1.GetRuinInfoResponse.one)
}

// .city.water.interaction.v1.RuinInfo two = 2 [json_name = "two"];
inline bool GetRuinInfoResponse::_internal_has_two() const {
  return this != internal_default_instance() && _impl_.two_ != nullptr;
}
inline bool GetRuinInfoResponse::has_two() const {
  return _internal_has_two();
}
inline void GetRuinInfoResponse::clear_two() {
  if (GetArenaForAllocation() == nullptr && _impl_.two_ != nullptr) {
    delete _impl_.two_;
  }
  _impl_.two_ = nullptr;
}
inline const ::city::water::interaction::v1::RuinInfo& GetRuinInfoResponse::_internal_two() const {
  const ::city::water::interaction::v1::RuinInfo* p = _impl_.two_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::water::interaction::v1::RuinInfo&>(
      ::city::water::interaction::v1::_RuinInfo_default_instance_);
}
inline const ::city::water::interaction::v1::RuinInfo& GetRuinInfoResponse::two() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.GetRuinInfoResponse.two)
  return _internal_two();
}
inline void GetRuinInfoResponse::unsafe_arena_set_allocated_two(
    ::city::water::interaction::v1::RuinInfo* two) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.two_);
  }
  _impl_.two_ = two;
  if (two) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.water.interaction.v1.GetRuinInfoResponse.two)
}
inline ::city::water::interaction::v1::RuinInfo* GetRuinInfoResponse::release_two() {
  
  ::city::water::interaction::v1::RuinInfo* temp = _impl_.two_;
  _impl_.two_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::water::interaction::v1::RuinInfo* GetRuinInfoResponse::unsafe_arena_release_two() {
  // @@protoc_insertion_point(field_release:city.water.interaction.v1.GetRuinInfoResponse.two)
  
  ::city::water::interaction::v1::RuinInfo* temp = _impl_.two_;
  _impl_.two_ = nullptr;
  return temp;
}
inline ::city::water::interaction::v1::RuinInfo* GetRuinInfoResponse::_internal_mutable_two() {
  
  if (_impl_.two_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::water::interaction::v1::RuinInfo>(GetArenaForAllocation());
    _impl_.two_ = p;
  }
  return _impl_.two_;
}
inline ::city::water::interaction::v1::RuinInfo* GetRuinInfoResponse::mutable_two() {
  ::city::water::interaction::v1::RuinInfo* _msg = _internal_mutable_two();
  // @@protoc_insertion_point(field_mutable:city.water.interaction.v1.GetRuinInfoResponse.two)
  return _msg;
}
inline void GetRuinInfoResponse::set_allocated_two(::city::water::interaction::v1::RuinInfo* two) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.two_;
  }
  if (two) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(two);
    if (message_arena != submessage_arena) {
      two = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, two, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.two_ = two;
  // @@protoc_insertion_point(field_set_allocated:city.water.interaction.v1.GetRuinInfoResponse.two)
}

// .city.water.interaction.v1.RuinInfo three = 3 [json_name = "three"];
inline bool GetRuinInfoResponse::_internal_has_three() const {
  return this != internal_default_instance() && _impl_.three_ != nullptr;
}
inline bool GetRuinInfoResponse::has_three() const {
  return _internal_has_three();
}
inline void GetRuinInfoResponse::clear_three() {
  if (GetArenaForAllocation() == nullptr && _impl_.three_ != nullptr) {
    delete _impl_.three_;
  }
  _impl_.three_ = nullptr;
}
inline const ::city::water::interaction::v1::RuinInfo& GetRuinInfoResponse::_internal_three() const {
  const ::city::water::interaction::v1::RuinInfo* p = _impl_.three_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::water::interaction::v1::RuinInfo&>(
      ::city::water::interaction::v1::_RuinInfo_default_instance_);
}
inline const ::city::water::interaction::v1::RuinInfo& GetRuinInfoResponse::three() const {
  // @@protoc_insertion_point(field_get:city.water.interaction.v1.GetRuinInfoResponse.three)
  return _internal_three();
}
inline void GetRuinInfoResponse::unsafe_arena_set_allocated_three(
    ::city::water::interaction::v1::RuinInfo* three) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.three_);
  }
  _impl_.three_ = three;
  if (three) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.water.interaction.v1.GetRuinInfoResponse.three)
}
inline ::city::water::interaction::v1::RuinInfo* GetRuinInfoResponse::release_three() {
  
  ::city::water::interaction::v1::RuinInfo* temp = _impl_.three_;
  _impl_.three_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::water::interaction::v1::RuinInfo* GetRuinInfoResponse::unsafe_arena_release_three() {
  // @@protoc_insertion_point(field_release:city.water.interaction.v1.GetRuinInfoResponse.three)
  
  ::city::water::interaction::v1::RuinInfo* temp = _impl_.three_;
  _impl_.three_ = nullptr;
  return temp;
}
inline ::city::water::interaction::v1::RuinInfo* GetRuinInfoResponse::_internal_mutable_three() {
  
  if (_impl_.three_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::water::interaction::v1::RuinInfo>(GetArenaForAllocation());
    _impl_.three_ = p;
  }
  return _impl_.three_;
}
inline ::city::water::interaction::v1::RuinInfo* GetRuinInfoResponse::mutable_three() {
  ::city::water::interaction::v1::RuinInfo* _msg = _internal_mutable_three();
  // @@protoc_insertion_point(field_mutable:city.water.interaction.v1.GetRuinInfoResponse.three)
  return _msg;
}
inline void GetRuinInfoResponse::set_allocated_three(::city::water::interaction::v1::RuinInfo* three) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.three_;
  }
  if (three) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(three);
    if (message_arena != submessage_arena) {
      three = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, three, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.three_ = three;
  // @@protoc_insertion_point(field_set_allocated:city.water.interaction.v1.GetRuinInfoResponse.three)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace interaction
}  // namespace water
}  // namespace city

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::city::water::interaction::v1::WaterFacilityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::water::interaction::v1::WaterFacilityType>() {
  return ::city::water::interaction::v1::WaterFacilityType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto
