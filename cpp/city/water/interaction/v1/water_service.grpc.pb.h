// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/water/interaction/v1/water_service.proto
#ifndef GRPC_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto__INCLUDED
#define GRPC_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto__INCLUDED

#include "city/water/interaction/v1/water_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace city {
namespace water {
namespace interaction {
namespace v1 {

class WaterService final {
 public:
  static constexpr char const* service_full_name() {
    return "city.water.interaction.v1.WaterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SetPumpPowerStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest& request, ::city::water::interaction::v1::SetPumpPowerStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpPowerStatusResponse>> AsyncSetPumpPowerStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpPowerStatusResponse>>(AsyncSetPumpPowerStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpPowerStatusResponse>> PrepareAsyncSetPumpPowerStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpPowerStatusResponse>>(PrepareAsyncSetPumpPowerStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status SetPumpNetworkStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest& request, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpNetworkStatusResponse>> AsyncSetPumpNetworkStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpNetworkStatusResponse>>(AsyncSetPumpNetworkStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpNetworkStatusResponse>> PrepareAsyncSetPumpNetworkStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpNetworkStatusResponse>>(PrepareAsyncSetPumpNetworkStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status SetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest& request, ::city::water::interaction::v1::SetPumpStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpStatusResponse>> AsyncSetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpStatusResponse>>(AsyncSetPumpStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpStatusResponse>> PrepareAsyncSetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpStatusResponse>>(PrepareAsyncSetPumpStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest& request, ::city::water::interaction::v1::GetPumpStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetPumpStatusResponse>> AsyncGetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetPumpStatusResponse>>(AsyncGetPumpStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetPumpStatusResponse>> PrepareAsyncGetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetPumpStatusResponse>>(PrepareAsyncGetPumpStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNoWaterAOI(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest& request, ::city::water::interaction::v1::GetNoWaterAOIResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetNoWaterAOIResponse>> AsyncGetNoWaterAOI(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetNoWaterAOIResponse>>(AsyncGetNoWaterAOIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetNoWaterAOIResponse>> PrepareAsyncGetNoWaterAOI(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetNoWaterAOIResponse>>(PrepareAsyncGetNoWaterAOIRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRuinInfo(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest& request, ::city::water::interaction::v1::GetRuinInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetRuinInfoResponse>> AsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetRuinInfoResponse>>(AsyncGetRuinInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetRuinInfoResponse>> PrepareAsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetRuinInfoResponse>>(PrepareAsyncGetRuinInfoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SetPumpPowerStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* request, ::city::water::interaction::v1::SetPumpPowerStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPumpPowerStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* request, ::city::water::interaction::v1::SetPumpPowerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetPumpNetworkStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* request, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPumpNetworkStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* request, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest* request, ::city::water::interaction::v1::SetPumpStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest* request, ::city::water::interaction::v1::SetPumpStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest* request, ::city::water::interaction::v1::GetPumpStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest* request, ::city::water::interaction::v1::GetPumpStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNoWaterAOI(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest* request, ::city::water::interaction::v1::GetNoWaterAOIResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNoWaterAOI(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest* request, ::city::water::interaction::v1::GetNoWaterAOIResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRuinInfo(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest* request, ::city::water::interaction::v1::GetRuinInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRuinInfo(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest* request, ::city::water::interaction::v1::GetRuinInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpPowerStatusResponse>* AsyncSetPumpPowerStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpPowerStatusResponse>* PrepareAsyncSetPumpPowerStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpNetworkStatusResponse>* AsyncSetPumpNetworkStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpNetworkStatusResponse>* PrepareAsyncSetPumpNetworkStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpStatusResponse>* AsyncSetPumpStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::SetPumpStatusResponse>* PrepareAsyncSetPumpStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetPumpStatusResponse>* AsyncGetPumpStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetPumpStatusResponse>* PrepareAsyncGetPumpStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetNoWaterAOIResponse>* AsyncGetNoWaterAOIRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetNoWaterAOIResponse>* PrepareAsyncGetNoWaterAOIRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetRuinInfoResponse>* AsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::water::interaction::v1::GetRuinInfoResponse>* PrepareAsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetPumpPowerStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest& request, ::city::water::interaction::v1::SetPumpPowerStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpPowerStatusResponse>> AsyncSetPumpPowerStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpPowerStatusResponse>>(AsyncSetPumpPowerStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpPowerStatusResponse>> PrepareAsyncSetPumpPowerStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpPowerStatusResponse>>(PrepareAsyncSetPumpPowerStatusRaw(context, request, cq));
    }
    ::grpc::Status SetPumpNetworkStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest& request, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpNetworkStatusResponse>> AsyncSetPumpNetworkStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpNetworkStatusResponse>>(AsyncSetPumpNetworkStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpNetworkStatusResponse>> PrepareAsyncSetPumpNetworkStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpNetworkStatusResponse>>(PrepareAsyncSetPumpNetworkStatusRaw(context, request, cq));
    }
    ::grpc::Status SetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest& request, ::city::water::interaction::v1::SetPumpStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpStatusResponse>> AsyncSetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpStatusResponse>>(AsyncSetPumpStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpStatusResponse>> PrepareAsyncSetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpStatusResponse>>(PrepareAsyncSetPumpStatusRaw(context, request, cq));
    }
    ::grpc::Status GetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest& request, ::city::water::interaction::v1::GetPumpStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetPumpStatusResponse>> AsyncGetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetPumpStatusResponse>>(AsyncGetPumpStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetPumpStatusResponse>> PrepareAsyncGetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetPumpStatusResponse>>(PrepareAsyncGetPumpStatusRaw(context, request, cq));
    }
    ::grpc::Status GetNoWaterAOI(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest& request, ::city::water::interaction::v1::GetNoWaterAOIResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetNoWaterAOIResponse>> AsyncGetNoWaterAOI(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetNoWaterAOIResponse>>(AsyncGetNoWaterAOIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetNoWaterAOIResponse>> PrepareAsyncGetNoWaterAOI(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetNoWaterAOIResponse>>(PrepareAsyncGetNoWaterAOIRaw(context, request, cq));
    }
    ::grpc::Status GetRuinInfo(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest& request, ::city::water::interaction::v1::GetRuinInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetRuinInfoResponse>> AsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetRuinInfoResponse>>(AsyncGetRuinInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetRuinInfoResponse>> PrepareAsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetRuinInfoResponse>>(PrepareAsyncGetRuinInfoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetPumpPowerStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* request, ::city::water::interaction::v1::SetPumpPowerStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPumpPowerStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* request, ::city::water::interaction::v1::SetPumpPowerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetPumpNetworkStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* request, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPumpNetworkStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* request, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest* request, ::city::water::interaction::v1::SetPumpStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest* request, ::city::water::interaction::v1::SetPumpStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest* request, ::city::water::interaction::v1::GetPumpStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPumpStatus(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest* request, ::city::water::interaction::v1::GetPumpStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNoWaterAOI(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest* request, ::city::water::interaction::v1::GetNoWaterAOIResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNoWaterAOI(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest* request, ::city::water::interaction::v1::GetNoWaterAOIResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRuinInfo(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest* request, ::city::water::interaction::v1::GetRuinInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRuinInfo(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest* request, ::city::water::interaction::v1::GetRuinInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpPowerStatusResponse>* AsyncSetPumpPowerStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpPowerStatusResponse>* PrepareAsyncSetPumpPowerStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpNetworkStatusResponse>* AsyncSetPumpNetworkStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpNetworkStatusResponse>* PrepareAsyncSetPumpNetworkStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpStatusResponse>* AsyncSetPumpStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::SetPumpStatusResponse>* PrepareAsyncSetPumpStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetPumpStatusResponse>* AsyncGetPumpStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetPumpStatusResponse>* PrepareAsyncGetPumpStatusRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetNoWaterAOIResponse>* AsyncGetNoWaterAOIRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetNoWaterAOIResponse>* PrepareAsyncGetNoWaterAOIRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetRuinInfoResponse>* AsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::water::interaction::v1::GetRuinInfoResponse>* PrepareAsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetPumpPowerStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPumpNetworkStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPumpStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPumpStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNoWaterAOI_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRuinInfo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SetPumpPowerStatus(::grpc::ServerContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* request, ::city::water::interaction::v1::SetPumpPowerStatusResponse* response);
    virtual ::grpc::Status SetPumpNetworkStatus(::grpc::ServerContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* request, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* response);
    virtual ::grpc::Status SetPumpStatus(::grpc::ServerContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest* request, ::city::water::interaction::v1::SetPumpStatusResponse* response);
    virtual ::grpc::Status GetPumpStatus(::grpc::ServerContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest* request, ::city::water::interaction::v1::GetPumpStatusResponse* response);
    virtual ::grpc::Status GetNoWaterAOI(::grpc::ServerContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest* request, ::city::water::interaction::v1::GetNoWaterAOIResponse* response);
    virtual ::grpc::Status GetRuinInfo(::grpc::ServerContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest* request, ::city::water::interaction::v1::GetRuinInfoResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPumpPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPumpPowerStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetPumpPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPumpPowerStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPumpPowerStatus(::grpc::ServerContext* context, ::city::water::interaction::v1::SetPumpPowerStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::water::interaction::v1::SetPumpPowerStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPumpNetworkStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPumpNetworkStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetPumpNetworkStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPumpNetworkStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPumpNetworkStatus(::grpc::ServerContext* context, ::city::water::interaction::v1::SetPumpNetworkStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::water::interaction::v1::SetPumpNetworkStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPumpStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPumpStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetPumpStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPumpStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPumpStatus(::grpc::ServerContext* context, ::city::water::interaction::v1::SetPumpStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::water::interaction::v1::SetPumpStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPumpStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPumpStatus() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetPumpStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPumpStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetPumpStatusRequest* /*request*/, ::city::water::interaction::v1::GetPumpStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPumpStatus(::grpc::ServerContext* context, ::city::water::interaction::v1::GetPumpStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::water::interaction::v1::GetPumpStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNoWaterAOI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNoWaterAOI() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetNoWaterAOI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoWaterAOI(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetNoWaterAOIRequest* /*request*/, ::city::water::interaction::v1::GetNoWaterAOIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNoWaterAOI(::grpc::ServerContext* context, ::city::water::interaction::v1::GetNoWaterAOIRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::water::interaction::v1::GetNoWaterAOIResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetRuinInfoRequest* /*request*/, ::city::water::interaction::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRuinInfo(::grpc::ServerContext* context, ::city::water::interaction::v1::GetRuinInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::water::interaction::v1::GetRuinInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetPumpPowerStatus<WithAsyncMethod_SetPumpNetworkStatus<WithAsyncMethod_SetPumpStatus<WithAsyncMethod_GetPumpStatus<WithAsyncMethod_GetNoWaterAOI<WithAsyncMethod_GetRuinInfo<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetPumpPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetPumpPowerStatus() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::city::water::interaction::v1::SetPumpPowerStatusRequest, ::city::water::interaction::v1::SetPumpPowerStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* request, ::city::water::interaction::v1::SetPumpPowerStatusResponse* response) { return this->SetPumpPowerStatus(context, request, response); }));}
    void SetMessageAllocatorFor_SetPumpPowerStatus(
        ::grpc::MessageAllocator< ::city::water::interaction::v1::SetPumpPowerStatusRequest, ::city::water::interaction::v1::SetPumpPowerStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::water::interaction::v1::SetPumpPowerStatusRequest, ::city::water::interaction::v1::SetPumpPowerStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetPumpPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPumpPowerStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPumpPowerStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpPowerStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetPumpNetworkStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetPumpNetworkStatus() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::city::water::interaction::v1::SetPumpNetworkStatusRequest, ::city::water::interaction::v1::SetPumpNetworkStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* request, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* response) { return this->SetPumpNetworkStatus(context, request, response); }));}
    void SetMessageAllocatorFor_SetPumpNetworkStatus(
        ::grpc::MessageAllocator< ::city::water::interaction::v1::SetPumpNetworkStatusRequest, ::city::water::interaction::v1::SetPumpNetworkStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::water::interaction::v1::SetPumpNetworkStatusRequest, ::city::water::interaction::v1::SetPumpNetworkStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetPumpNetworkStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPumpNetworkStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPumpNetworkStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetPumpStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetPumpStatus() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::city::water::interaction::v1::SetPumpStatusRequest, ::city::water::interaction::v1::SetPumpStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::water::interaction::v1::SetPumpStatusRequest* request, ::city::water::interaction::v1::SetPumpStatusResponse* response) { return this->SetPumpStatus(context, request, response); }));}
    void SetMessageAllocatorFor_SetPumpStatus(
        ::grpc::MessageAllocator< ::city::water::interaction::v1::SetPumpStatusRequest, ::city::water::interaction::v1::SetPumpStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::water::interaction::v1::SetPumpStatusRequest, ::city::water::interaction::v1::SetPumpStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetPumpStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPumpStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPumpStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPumpStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPumpStatus() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::city::water::interaction::v1::GetPumpStatusRequest, ::city::water::interaction::v1::GetPumpStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::water::interaction::v1::GetPumpStatusRequest* request, ::city::water::interaction::v1::GetPumpStatusResponse* response) { return this->GetPumpStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetPumpStatus(
        ::grpc::MessageAllocator< ::city::water::interaction::v1::GetPumpStatusRequest, ::city::water::interaction::v1::GetPumpStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::water::interaction::v1::GetPumpStatusRequest, ::city::water::interaction::v1::GetPumpStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPumpStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPumpStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetPumpStatusRequest* /*request*/, ::city::water::interaction::v1::GetPumpStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPumpStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::city::water::interaction::v1::GetPumpStatusRequest* /*request*/, ::city::water::interaction::v1::GetPumpStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNoWaterAOI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNoWaterAOI() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::city::water::interaction::v1::GetNoWaterAOIRequest, ::city::water::interaction::v1::GetNoWaterAOIResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::water::interaction::v1::GetNoWaterAOIRequest* request, ::city::water::interaction::v1::GetNoWaterAOIResponse* response) { return this->GetNoWaterAOI(context, request, response); }));}
    void SetMessageAllocatorFor_GetNoWaterAOI(
        ::grpc::MessageAllocator< ::city::water::interaction::v1::GetNoWaterAOIRequest, ::city::water::interaction::v1::GetNoWaterAOIResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::water::interaction::v1::GetNoWaterAOIRequest, ::city::water::interaction::v1::GetNoWaterAOIResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNoWaterAOI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoWaterAOI(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetNoWaterAOIRequest* /*request*/, ::city::water::interaction::v1::GetNoWaterAOIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNoWaterAOI(
      ::grpc::CallbackServerContext* /*context*/, const ::city::water::interaction::v1::GetNoWaterAOIRequest* /*request*/, ::city::water::interaction::v1::GetNoWaterAOIResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::city::water::interaction::v1::GetRuinInfoRequest, ::city::water::interaction::v1::GetRuinInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::water::interaction::v1::GetRuinInfoRequest* request, ::city::water::interaction::v1::GetRuinInfoResponse* response) { return this->GetRuinInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetRuinInfo(
        ::grpc::MessageAllocator< ::city::water::interaction::v1::GetRuinInfoRequest, ::city::water::interaction::v1::GetRuinInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::water::interaction::v1::GetRuinInfoRequest, ::city::water::interaction::v1::GetRuinInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetRuinInfoRequest* /*request*/, ::city::water::interaction::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRuinInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::city::water::interaction::v1::GetRuinInfoRequest* /*request*/, ::city::water::interaction::v1::GetRuinInfoResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetPumpPowerStatus<WithCallbackMethod_SetPumpNetworkStatus<WithCallbackMethod_SetPumpStatus<WithCallbackMethod_GetPumpStatus<WithCallbackMethod_GetNoWaterAOI<WithCallbackMethod_GetRuinInfo<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetPumpPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPumpPowerStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetPumpPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPumpPowerStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPumpNetworkStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPumpNetworkStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetPumpNetworkStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPumpNetworkStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPumpStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPumpStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetPumpStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPumpStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPumpStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPumpStatus() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetPumpStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPumpStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetPumpStatusRequest* /*request*/, ::city::water::interaction::v1::GetPumpStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNoWaterAOI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNoWaterAOI() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetNoWaterAOI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoWaterAOI(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetNoWaterAOIRequest* /*request*/, ::city::water::interaction::v1::GetNoWaterAOIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetRuinInfoRequest* /*request*/, ::city::water::interaction::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPumpPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPumpPowerStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetPumpPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPumpPowerStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPumpPowerStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPumpNetworkStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPumpNetworkStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetPumpNetworkStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPumpNetworkStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPumpNetworkStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPumpStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPumpStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetPumpStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPumpStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPumpStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPumpStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPumpStatus() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetPumpStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPumpStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetPumpStatusRequest* /*request*/, ::city::water::interaction::v1::GetPumpStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPumpStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNoWaterAOI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNoWaterAOI() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetNoWaterAOI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoWaterAOI(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetNoWaterAOIRequest* /*request*/, ::city::water::interaction::v1::GetNoWaterAOIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNoWaterAOI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetRuinInfoRequest* /*request*/, ::city::water::interaction::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRuinInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPumpPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPumpPowerStatus() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPumpPowerStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPumpPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPumpPowerStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPumpPowerStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPumpNetworkStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPumpNetworkStatus() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPumpNetworkStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPumpNetworkStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPumpNetworkStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPumpNetworkStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPumpStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPumpStatus() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPumpStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPumpStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPumpStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPumpStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPumpStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPumpStatus() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPumpStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPumpStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPumpStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetPumpStatusRequest* /*request*/, ::city::water::interaction::v1::GetPumpStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPumpStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNoWaterAOI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNoWaterAOI() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNoWaterAOI(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNoWaterAOI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoWaterAOI(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetNoWaterAOIRequest* /*request*/, ::city::water::interaction::v1::GetNoWaterAOIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNoWaterAOI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRuinInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetRuinInfoRequest* /*request*/, ::city::water::interaction::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRuinInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPumpPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPumpPowerStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::water::interaction::v1::SetPumpPowerStatusRequest, ::city::water::interaction::v1::SetPumpPowerStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::water::interaction::v1::SetPumpPowerStatusRequest, ::city::water::interaction::v1::SetPumpPowerStatusResponse>* streamer) {
                       return this->StreamedSetPumpPowerStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPumpPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPumpPowerStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpPowerStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPumpPowerStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::water::interaction::v1::SetPumpPowerStatusRequest,::city::water::interaction::v1::SetPumpPowerStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPumpNetworkStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPumpNetworkStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::water::interaction::v1::SetPumpNetworkStatusRequest, ::city::water::interaction::v1::SetPumpNetworkStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::water::interaction::v1::SetPumpNetworkStatusRequest, ::city::water::interaction::v1::SetPumpNetworkStatusResponse>* streamer) {
                       return this->StreamedSetPumpNetworkStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPumpNetworkStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPumpNetworkStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpNetworkStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpNetworkStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPumpNetworkStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::water::interaction::v1::SetPumpNetworkStatusRequest,::city::water::interaction::v1::SetPumpNetworkStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPumpStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPumpStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::water::interaction::v1::SetPumpStatusRequest, ::city::water::interaction::v1::SetPumpStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::water::interaction::v1::SetPumpStatusRequest, ::city::water::interaction::v1::SetPumpStatusResponse>* streamer) {
                       return this->StreamedSetPumpStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPumpStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPumpStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::SetPumpStatusRequest* /*request*/, ::city::water::interaction::v1::SetPumpStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPumpStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::water::interaction::v1::SetPumpStatusRequest,::city::water::interaction::v1::SetPumpStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPumpStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPumpStatus() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::water::interaction::v1::GetPumpStatusRequest, ::city::water::interaction::v1::GetPumpStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::water::interaction::v1::GetPumpStatusRequest, ::city::water::interaction::v1::GetPumpStatusResponse>* streamer) {
                       return this->StreamedGetPumpStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPumpStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPumpStatus(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetPumpStatusRequest* /*request*/, ::city::water::interaction::v1::GetPumpStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPumpStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::water::interaction::v1::GetPumpStatusRequest,::city::water::interaction::v1::GetPumpStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNoWaterAOI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNoWaterAOI() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::water::interaction::v1::GetNoWaterAOIRequest, ::city::water::interaction::v1::GetNoWaterAOIResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::water::interaction::v1::GetNoWaterAOIRequest, ::city::water::interaction::v1::GetNoWaterAOIResponse>* streamer) {
                       return this->StreamedGetNoWaterAOI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNoWaterAOI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNoWaterAOI(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetNoWaterAOIRequest* /*request*/, ::city::water::interaction::v1::GetNoWaterAOIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNoWaterAOI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::water::interaction::v1::GetNoWaterAOIRequest,::city::water::interaction::v1::GetNoWaterAOIResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::water::interaction::v1::GetRuinInfoRequest, ::city::water::interaction::v1::GetRuinInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::water::interaction::v1::GetRuinInfoRequest, ::city::water::interaction::v1::GetRuinInfoResponse>* streamer) {
                       return this->StreamedGetRuinInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::water::interaction::v1::GetRuinInfoRequest* /*request*/, ::city::water::interaction::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRuinInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::water::interaction::v1::GetRuinInfoRequest,::city::water::interaction::v1::GetRuinInfoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetPumpPowerStatus<WithStreamedUnaryMethod_SetPumpNetworkStatus<WithStreamedUnaryMethod_SetPumpStatus<WithStreamedUnaryMethod_GetPumpStatus<WithStreamedUnaryMethod_GetNoWaterAOI<WithStreamedUnaryMethod_GetRuinInfo<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetPumpPowerStatus<WithStreamedUnaryMethod_SetPumpNetworkStatus<WithStreamedUnaryMethod_SetPumpStatus<WithStreamedUnaryMethod_GetPumpStatus<WithStreamedUnaryMethod_GetNoWaterAOI<WithStreamedUnaryMethod_GetRuinInfo<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace interaction
}  // namespace water
}  // namespace city


#endif  // GRPC_city_2fwater_2finteraction_2fv1_2fwater_5fservice_2eproto__INCLUDED
