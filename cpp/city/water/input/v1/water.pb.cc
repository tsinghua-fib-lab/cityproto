// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/water/input/v1/water.proto

#include "city/water/input/v1/water.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace city {
namespace water {
namespace input {
namespace v1 {
        template <typename>
PROTOBUF_CONSTEXPR RainPeriod::RainPeriod(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.rainfall_)*/ 0,
      /*decltype(_impl_.start_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct RainPeriodDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RainPeriodDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RainPeriodDefaultTypeInternal() {}
  union {
    RainPeriod _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RainPeriodDefaultTypeInternal _RainPeriod_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Rain::Rain(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.rains_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct RainDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RainDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RainDefaultTypeInternal() {}
  union {
    Rain _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RainDefaultTypeInternal _Rain_default_instance_;
}  // namespace v1
}  // namespace input
}  // namespace water
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fwater_2finput_2fv1_2fwater_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_city_2fwater_2finput_2fv1_2fwater_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_city_2fwater_2finput_2fv1_2fwater_2eproto = nullptr;
const ::uint32_t TableStruct_city_2fwater_2finput_2fv1_2fwater_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::city::water::input::v1::RainPeriod, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::city::water::input::v1::RainPeriod, _impl_.start_),
    PROTOBUF_FIELD_OFFSET(::city::water::input::v1::RainPeriod, _impl_.rainfall_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::city::water::input::v1::Rain, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::city::water::input::v1::Rain, _impl_.rains_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::city::water::input::v1::RainPeriod)},
        {10, -1, -1, sizeof(::city::water::input::v1::Rain)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::city::water::input::v1::_RainPeriod_default_instance_._instance,
    &::city::water::input::v1::_Rain_default_instance_._instance,
};
const char descriptor_table_protodef_city_2fwater_2finput_2fv1_2fwater_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037city/water/input/v1/water.proto\022\023city."
    "water.input.v1\">\n\nRainPeriod\022\024\n\005start\030\001 "
    "\001(\005R\005start\022\032\n\010rainfall\030\002 \001(\001R\010rainfall\"="
    "\n\004Rain\0225\n\005rains\030\001 \003(\0132\037.city.water.input"
    ".v1.RainPeriodR\005rainsB\316\001\n\027com.city.water"
    ".input.v1B\nWaterProtoP\001Z8git.fiblab.net/"
    "sim/protos/go/city/water/input/v1;inputv"
    "1\242\002\003CWI\252\002\023City.Water.Input.V1\312\002\023City\\Wat"
    "er\\Input\\V1\342\002\037City\\Water\\Input\\V1\\GPBMet"
    "adata\352\002\026City::Water::Input::V1b\006proto3"
};
static ::absl::once_flag descriptor_table_city_2fwater_2finput_2fv1_2fwater_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fwater_2finput_2fv1_2fwater_2eproto = {
    false,
    false,
    398,
    descriptor_table_protodef_city_2fwater_2finput_2fv1_2fwater_2eproto,
    "city/water/input/v1/water.proto",
    &descriptor_table_city_2fwater_2finput_2fv1_2fwater_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_city_2fwater_2finput_2fv1_2fwater_2eproto::offsets,
    file_level_metadata_city_2fwater_2finput_2fv1_2fwater_2eproto,
    file_level_enum_descriptors_city_2fwater_2finput_2fv1_2fwater_2eproto,
    file_level_service_descriptors_city_2fwater_2finput_2fv1_2fwater_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fwater_2finput_2fv1_2fwater_2eproto_getter() {
  return &descriptor_table_city_2fwater_2finput_2fv1_2fwater_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fwater_2finput_2fv1_2fwater_2eproto(&descriptor_table_city_2fwater_2finput_2fv1_2fwater_2eproto);
namespace city {
namespace water {
namespace input {
namespace v1 {
// ===================================================================

class RainPeriod::_Internal {
 public:
};

RainPeriod::RainPeriod(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:city.water.input.v1.RainPeriod)
}
RainPeriod::RainPeriod(const RainPeriod& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.water.input.v1.RainPeriod)
}
inline void RainPeriod::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rainfall_){0},
      decltype(_impl_.start_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
RainPeriod::~RainPeriod() {
  // @@protoc_insertion_point(destructor:city.water.input.v1.RainPeriod)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RainPeriod::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void RainPeriod::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void RainPeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:city.water.input.v1.RainPeriod)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.rainfall_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.start_) -
      reinterpret_cast<char*>(&_impl_.rainfall_)) + sizeof(_impl_.start_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RainPeriod::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> RainPeriod::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RainPeriod_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double rainfall = 2 [json_name = "rainfall"];
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(RainPeriod, _impl_.rainfall_)}},
    // int32 start = 1 [json_name = "start"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RainPeriod, _impl_.start_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RainPeriod, _impl_.start_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 start = 1 [json_name = "start"];
    {PROTOBUF_FIELD_OFFSET(RainPeriod, _impl_.start_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double rainfall = 2 [json_name = "rainfall"];
    {PROTOBUF_FIELD_OFFSET(RainPeriod, _impl_.rainfall_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* RainPeriod::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.water.input.v1.RainPeriod)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 start = 1 [json_name = "start"];
  if (this->_internal_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_start(), target);
  }

  // double rainfall = 2 [json_name = "rainfall"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rainfall = this->_internal_rainfall();
  ::uint64_t raw_rainfall;
  memcpy(&raw_rainfall, &tmp_rainfall, sizeof(tmp_rainfall));
  if (raw_rainfall != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_rainfall(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.water.input.v1.RainPeriod)
  return target;
}

::size_t RainPeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.water.input.v1.RainPeriod)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rainfall = 2 [json_name = "rainfall"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rainfall = this->_internal_rainfall();
  ::uint64_t raw_rainfall;
  memcpy(&raw_rainfall, &tmp_rainfall, sizeof(tmp_rainfall));
  if (raw_rainfall != 0) {
    total_size += 9;
  }

  // int32 start = 1 [json_name = "start"];
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_start());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RainPeriod::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    RainPeriod::MergeImpl
};
const ::google::protobuf::Message::ClassData*RainPeriod::GetClassData() const { return &_class_data_; }


void RainPeriod::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RainPeriod*>(&to_msg);
  auto& from = static_cast<const RainPeriod&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.water.input.v1.RainPeriod)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_rainfall = from._internal_rainfall();
  ::uint64_t raw_rainfall;
  memcpy(&raw_rainfall, &tmp_rainfall, sizeof(tmp_rainfall));
  if (raw_rainfall != 0) {
    _this->_internal_set_rainfall(from._internal_rainfall());
  }
  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RainPeriod::CopyFrom(const RainPeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.water.input.v1.RainPeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RainPeriod::IsInitialized() const {
  return true;
}

void RainPeriod::InternalSwap(RainPeriod* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RainPeriod, _impl_.start_)
      + sizeof(RainPeriod::_impl_.start_)
      - PROTOBUF_FIELD_OFFSET(RainPeriod, _impl_.rainfall_)>(
          reinterpret_cast<char*>(&_impl_.rainfall_),
          reinterpret_cast<char*>(&other->_impl_.rainfall_));
}

::google::protobuf::Metadata RainPeriod::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwater_2finput_2fv1_2fwater_2eproto_getter, &descriptor_table_city_2fwater_2finput_2fv1_2fwater_2eproto_once,
      file_level_metadata_city_2fwater_2finput_2fv1_2fwater_2eproto[0]);
}
// ===================================================================

class Rain::_Internal {
 public:
};

Rain::Rain(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:city.water.input.v1.Rain)
}
Rain::Rain(const Rain& from) : ::google::protobuf::Message() {
  Rain* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rains_){from._impl_.rains_},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:city.water.input.v1.Rain)
}
inline void Rain::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rains_){arena},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Rain::~Rain() {
  // @@protoc_insertion_point(destructor:city.water.input.v1.Rain)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Rain::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rains_.~RepeatedPtrField();
}
void Rain::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Rain::Clear() {
// @@protoc_insertion_point(message_clear_start:city.water.input.v1.Rain)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_rains()->Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Rain::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> Rain::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Rain_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .city.water.input.v1.RainPeriod rains = 1 [json_name = "rains"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Rain, _impl_.rains_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .city.water.input.v1.RainPeriod rains = 1 [json_name = "rains"];
    {PROTOBUF_FIELD_OFFSET(Rain, _impl_.rains_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::city::water::input::v1::RainPeriod>()},
  }}, {{
  }},
};

::uint8_t* Rain::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.water.input.v1.Rain)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .city.water.input.v1.RainPeriod rains = 1 [json_name = "rains"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rains_size()); i < n; i++) {
    const auto& repfield = this->_internal_rains().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.water.input.v1.Rain)
  return target;
}

::size_t Rain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.water.input.v1.Rain)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.water.input.v1.RainPeriod rains = 1 [json_name = "rains"];
  total_size += 1UL * this->_internal_rains_size();
  for (const auto& msg : this->_internal_rains()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Rain::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Rain::MergeImpl
};
const ::google::protobuf::Message::ClassData*Rain::GetClassData() const { return &_class_data_; }


void Rain::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Rain*>(&to_msg);
  auto& from = static_cast<const Rain&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.water.input.v1.Rain)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rains()->MergeFrom(from._internal_rains());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Rain::CopyFrom(const Rain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.water.input.v1.Rain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Rain::IsInitialized() const {
  return true;
}

void Rain::InternalSwap(Rain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.rains_.InternalSwap(&other->_impl_.rains_);
}

::google::protobuf::Metadata Rain::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwater_2finput_2fv1_2fwater_2eproto_getter, &descriptor_table_city_2fwater_2finput_2fv1_2fwater_2eproto_once,
      file_level_metadata_city_2fwater_2finput_2fv1_2fwater_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace input
}  // namespace water
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
