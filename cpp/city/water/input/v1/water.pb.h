// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/water/input/v1/water.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fwater_2finput_2fv1_2fwater_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fwater_2finput_2fv1_2fwater_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fwater_2finput_2fv1_2fwater_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fwater_2finput_2fv1_2fwater_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fwater_2finput_2fv1_2fwater_2eproto;
namespace city {
namespace water {
namespace input {
namespace v1 {
class Rain;
struct RainDefaultTypeInternal;
extern RainDefaultTypeInternal _Rain_default_instance_;
class RainPeriod;
struct RainPeriodDefaultTypeInternal;
extern RainPeriodDefaultTypeInternal _RainPeriod_default_instance_;
}  // namespace v1
}  // namespace input
}  // namespace water
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::water::input::v1::Rain* Arena::CreateMaybeMessage<::city::water::input::v1::Rain>(Arena*);
template<> ::city::water::input::v1::RainPeriod* Arena::CreateMaybeMessage<::city::water::input::v1::RainPeriod>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace water {
namespace input {
namespace v1 {

// ===================================================================

class RainPeriod final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.water.input.v1.RainPeriod) */ {
 public:
  inline RainPeriod() : RainPeriod(nullptr) {}
  ~RainPeriod() override;
  explicit PROTOBUF_CONSTEXPR RainPeriod(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RainPeriod(const RainPeriod& from);
  RainPeriod(RainPeriod&& from) noexcept
    : RainPeriod() {
    *this = ::std::move(from);
  }

  inline RainPeriod& operator=(const RainPeriod& from) {
    CopyFrom(from);
    return *this;
  }
  inline RainPeriod& operator=(RainPeriod&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RainPeriod& default_instance() {
    return *internal_default_instance();
  }
  static inline const RainPeriod* internal_default_instance() {
    return reinterpret_cast<const RainPeriod*>(
               &_RainPeriod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RainPeriod& a, RainPeriod& b) {
    a.Swap(&b);
  }
  inline void Swap(RainPeriod* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RainPeriod* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RainPeriod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RainPeriod>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RainPeriod& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RainPeriod& from) {
    RainPeriod::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RainPeriod* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.input.v1.RainPeriod";
  }
  protected:
  explicit RainPeriod(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRainfallFieldNumber = 2,
    kStartFieldNumber = 1,
  };
  // double rainfall = 2 [json_name = "rainfall"];
  void clear_rainfall();
  double rainfall() const;
  void set_rainfall(double value);
  private:
  double _internal_rainfall() const;
  void _internal_set_rainfall(double value);
  public:

  // int32 start = 1 [json_name = "start"];
  void clear_start();
  int32_t start() const;
  void set_start(int32_t value);
  private:
  int32_t _internal_start() const;
  void _internal_set_start(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.water.input.v1.RainPeriod)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double rainfall_;
    int32_t start_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwater_2finput_2fv1_2fwater_2eproto;
};
// -------------------------------------------------------------------

class Rain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.water.input.v1.Rain) */ {
 public:
  inline Rain() : Rain(nullptr) {}
  ~Rain() override;
  explicit PROTOBUF_CONSTEXPR Rain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rain(const Rain& from);
  Rain(Rain&& from) noexcept
    : Rain() {
    *this = ::std::move(from);
  }

  inline Rain& operator=(const Rain& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rain& operator=(Rain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rain& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rain* internal_default_instance() {
    return reinterpret_cast<const Rain*>(
               &_Rain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Rain& a, Rain& b) {
    a.Swap(&b);
  }
  inline void Swap(Rain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rain& from) {
    Rain::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.input.v1.Rain";
  }
  protected:
  explicit Rain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRainsFieldNumber = 1,
  };
  // repeated .city.water.input.v1.RainPeriod rains = 1 [json_name = "rains"];
  int rains_size() const;
  private:
  int _internal_rains_size() const;
  public:
  void clear_rains();
  ::city::water::input::v1::RainPeriod* mutable_rains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::input::v1::RainPeriod >*
      mutable_rains();
  private:
  const ::city::water::input::v1::RainPeriod& _internal_rains(int index) const;
  ::city::water::input::v1::RainPeriod* _internal_add_rains();
  public:
  const ::city::water::input::v1::RainPeriod& rains(int index) const;
  ::city::water::input::v1::RainPeriod* add_rains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::input::v1::RainPeriod >&
      rains() const;

  // @@protoc_insertion_point(class_scope:city.water.input.v1.Rain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::input::v1::RainPeriod > rains_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwater_2finput_2fv1_2fwater_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RainPeriod

// int32 start = 1 [json_name = "start"];
inline void RainPeriod::clear_start() {
  _impl_.start_ = 0;
}
inline int32_t RainPeriod::_internal_start() const {
  return _impl_.start_;
}
inline int32_t RainPeriod::start() const {
  // @@protoc_insertion_point(field_get:city.water.input.v1.RainPeriod.start)
  return _internal_start();
}
inline void RainPeriod::_internal_set_start(int32_t value) {
  
  _impl_.start_ = value;
}
inline void RainPeriod::set_start(int32_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:city.water.input.v1.RainPeriod.start)
}

// double rainfall = 2 [json_name = "rainfall"];
inline void RainPeriod::clear_rainfall() {
  _impl_.rainfall_ = 0;
}
inline double RainPeriod::_internal_rainfall() const {
  return _impl_.rainfall_;
}
inline double RainPeriod::rainfall() const {
  // @@protoc_insertion_point(field_get:city.water.input.v1.RainPeriod.rainfall)
  return _internal_rainfall();
}
inline void RainPeriod::_internal_set_rainfall(double value) {
  
  _impl_.rainfall_ = value;
}
inline void RainPeriod::set_rainfall(double value) {
  _internal_set_rainfall(value);
  // @@protoc_insertion_point(field_set:city.water.input.v1.RainPeriod.rainfall)
}

// -------------------------------------------------------------------

// Rain

// repeated .city.water.input.v1.RainPeriod rains = 1 [json_name = "rains"];
inline int Rain::_internal_rains_size() const {
  return _impl_.rains_.size();
}
inline int Rain::rains_size() const {
  return _internal_rains_size();
}
inline void Rain::clear_rains() {
  _impl_.rains_.Clear();
}
inline ::city::water::input::v1::RainPeriod* Rain::mutable_rains(int index) {
  // @@protoc_insertion_point(field_mutable:city.water.input.v1.Rain.rains)
  return _impl_.rains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::input::v1::RainPeriod >*
Rain::mutable_rains() {
  // @@protoc_insertion_point(field_mutable_list:city.water.input.v1.Rain.rains)
  return &_impl_.rains_;
}
inline const ::city::water::input::v1::RainPeriod& Rain::_internal_rains(int index) const {
  return _impl_.rains_.Get(index);
}
inline const ::city::water::input::v1::RainPeriod& Rain::rains(int index) const {
  // @@protoc_insertion_point(field_get:city.water.input.v1.Rain.rains)
  return _internal_rains(index);
}
inline ::city::water::input::v1::RainPeriod* Rain::_internal_add_rains() {
  return _impl_.rains_.Add();
}
inline ::city::water::input::v1::RainPeriod* Rain::add_rains() {
  ::city::water::input::v1::RainPeriod* _add = _internal_add_rains();
  // @@protoc_insertion_point(field_add:city.water.input.v1.Rain.rains)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::input::v1::RainPeriod >&
Rain::rains() const {
  // @@protoc_insertion_point(field_list:city.water.input.v1.Rain.rains)
  return _impl_.rains_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace input
}  // namespace water
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fwater_2finput_2fv1_2fwater_2eproto
