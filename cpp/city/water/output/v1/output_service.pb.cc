// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/water/output/v1/output_service.proto

#include "city/water/output/v1/output_service.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace city {
namespace water {
namespace output {
namespace v1 {
        template <typename>
PROTOBUF_CONSTEXPR OutputRequest::OutputRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.roads_)*/ {},
      /*decltype(_impl_.detailed_roads_)*/ {},
      /*decltype(_impl_.drainage_nodes_)*/ {},
      /*decltype(_impl_.drainage_links_)*/ {},
      /*decltype(_impl_.supply_nodes_)*/ {},
      /*decltype(_impl_.supply_links_)*/ {},
      /*decltype(_impl_.aois_)*/ {},
      /*decltype(_impl_.events_)*/ nullptr,
      /*decltype(_impl_.drainage_metrics_)*/ nullptr,
      /*decltype(_impl_.supply_metrics_)*/ nullptr,
      /*decltype(_impl_.drainage_metric_)*/ 0,
      /*decltype(_impl_.step_)*/ 0,
    } {}
struct OutputRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputRequestDefaultTypeInternal() {}
  union {
    OutputRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputRequestDefaultTypeInternal _OutputRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR OutputResponse::OutputResponse(::_pbi::ConstantInitialized) {}
struct OutputResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputResponseDefaultTypeInternal() {}
  union {
    OutputResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputResponseDefaultTypeInternal _OutputResponse_default_instance_;
}  // namespace v1
}  // namespace output
}  // namespace water
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto = nullptr;
const ::uint32_t TableStruct_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::city::water::output::v1::OutputRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::city::water::output::v1::OutputRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::city::water::output::v1::OutputRequest, _impl_.step_),
    PROTOBUF_FIELD_OFFSET(::city::water::output::v1::OutputRequest, _impl_.roads_),
    PROTOBUF_FIELD_OFFSET(::city::water::output::v1::OutputRequest, _impl_.detailed_roads_),
    PROTOBUF_FIELD_OFFSET(::city::water::output::v1::OutputRequest, _impl_.drainage_nodes_),
    PROTOBUF_FIELD_OFFSET(::city::water::output::v1::OutputRequest, _impl_.drainage_links_),
    PROTOBUF_FIELD_OFFSET(::city::water::output::v1::OutputRequest, _impl_.supply_nodes_),
    PROTOBUF_FIELD_OFFSET(::city::water::output::v1::OutputRequest, _impl_.supply_links_),
    PROTOBUF_FIELD_OFFSET(::city::water::output::v1::OutputRequest, _impl_.aois_),
    PROTOBUF_FIELD_OFFSET(::city::water::output::v1::OutputRequest, _impl_.drainage_metric_),
    PROTOBUF_FIELD_OFFSET(::city::water::output::v1::OutputRequest, _impl_.events_),
    PROTOBUF_FIELD_OFFSET(::city::water::output::v1::OutputRequest, _impl_.drainage_metrics_),
    PROTOBUF_FIELD_OFFSET(::city::water::output::v1::OutputRequest, _impl_.supply_metrics_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::city::water::output::v1::OutputResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 20, -1, sizeof(::city::water::output::v1::OutputRequest)},
        {32, -1, -1, sizeof(::city::water::output::v1::OutputResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::city::water::output::v1::_OutputRequest_default_instance_._instance,
    &::city::water::output::v1::_OutputResponse_default_instance_._instance,
};
const char descriptor_table_protodef_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n)city/water/output/v1/output_service.pr"
    "oto\022\024city.water.output.v1\032\031city/event/v1"
    "/event.proto\032!city/water/output/v1/outpu"
    "t.proto\"\311\005\n\rOutputRequest\022\022\n\004step\030\001 \001(\005R"
    "\004step\0220\n\005roads\030\002 \003(\0132\032.city.water.output"
    ".v1.RoadR\005roads\022I\n\016detailed_roads\030\003 \003(\0132"
    "\".city.water.output.v1.DetailedRoadR\rdet"
    "ailedRoads\022A\n\016drainage_nodes\030\004 \003(\0132\032.cit"
    "y.water.output.v1.NodeR\rdrainageNodes\022A\n"
    "\016drainage_links\030\005 \003(\0132\032.city.water.outpu"
    "t.v1.LinkR\rdrainageLinks\022=\n\014supply_nodes"
    "\030\006 \003(\0132\032.city.water.output.v1.NodeR\013supp"
    "lyNodes\022=\n\014supply_links\030\007 \003(\0132\032.city.wat"
    "er.output.v1.LinkR\013supplyLinks\022-\n\004aois\030\010"
    " \003(\0132\031.city.water.output.v1.AoiR\004aois\022\'\n"
    "\017drainage_metric\030\t \001(\001R\016drainageMetric\022-"
    "\n\006events\030\n \001(\0132\025.city.event.v1.EventsR\006e"
    "vents\022P\n\020drainage_metrics\030\013 \001(\0132%.city.w"
    "ater.output.v1.DrainageMetricsR\017drainage"
    "Metrics\022J\n\016supply_metrics\030\014 \001(\0132#.city.w"
    "ater.output.v1.SupplyMetricsR\rsupplyMetr"
    "ics\"\020\n\016OutputResponse2d\n\rOutputService\022S"
    "\n\006Output\022#.city.water.output.v1.OutputRe"
    "quest\032$.city.water.output.v1.OutputRespo"
    "nseB\335\001\n\030com.city.water.output.v1B\022Output"
    "ServiceProtoP\001Z:git.fiblab.net/sim/proto"
    "s/go/city/water/output/v1;outputv1\242\002\003CWO"
    "\252\002\024City.Water.Output.V1\312\002\024City\\Water\\Out"
    "put\\V1\342\002 City\\Water\\Output\\V1\\GPBMetadat"
    "a\352\002\027City::Water::Output::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto_deps[2] =
    {
        &::descriptor_table_city_2fevent_2fv1_2fevent_2eproto,
        &::descriptor_table_city_2fwater_2foutput_2fv1_2foutput_2eproto,
};
static ::absl::once_flag descriptor_table_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto = {
    false,
    false,
    1195,
    descriptor_table_protodef_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto,
    "city/water/output/v1/output_service.proto",
    &descriptor_table_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto_once,
    descriptor_table_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto::offsets,
    file_level_metadata_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto,
    file_level_enum_descriptors_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto,
    file_level_service_descriptors_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto_getter() {
  return &descriptor_table_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto(&descriptor_table_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto);
namespace city {
namespace water {
namespace output {
namespace v1 {
// ===================================================================

class OutputRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<OutputRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_._has_bits_);
  static const ::city::event::v1::Events& events(const OutputRequest* msg);
  static void set_has_events(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::city::water::output::v1::DrainageMetrics& drainage_metrics(const OutputRequest* msg);
  static void set_has_drainage_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::city::water::output::v1::SupplyMetrics& supply_metrics(const OutputRequest* msg);
  static void set_has_supply_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::city::event::v1::Events& OutputRequest::_Internal::events(const OutputRequest* msg) {
  return *msg->_impl_.events_;
}
const ::city::water::output::v1::DrainageMetrics& OutputRequest::_Internal::drainage_metrics(const OutputRequest* msg) {
  return *msg->_impl_.drainage_metrics_;
}
const ::city::water::output::v1::SupplyMetrics& OutputRequest::_Internal::supply_metrics(const OutputRequest* msg) {
  return *msg->_impl_.supply_metrics_;
}
void OutputRequest::clear_roads() {
  _internal_mutable_roads()->Clear();
}
void OutputRequest::clear_detailed_roads() {
  _internal_mutable_detailed_roads()->Clear();
}
void OutputRequest::clear_drainage_nodes() {
  _internal_mutable_drainage_nodes()->Clear();
}
void OutputRequest::clear_drainage_links() {
  _internal_mutable_drainage_links()->Clear();
}
void OutputRequest::clear_supply_nodes() {
  _internal_mutable_supply_nodes()->Clear();
}
void OutputRequest::clear_supply_links() {
  _internal_mutable_supply_links()->Clear();
}
void OutputRequest::clear_aois() {
  _internal_mutable_aois()->Clear();
}
void OutputRequest::clear_events() {
  if (_impl_.events_ != nullptr) _impl_.events_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void OutputRequest::clear_drainage_metrics() {
  if (_impl_.drainage_metrics_ != nullptr) _impl_.drainage_metrics_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void OutputRequest::clear_supply_metrics() {
  if (_impl_.supply_metrics_ != nullptr) _impl_.supply_metrics_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
OutputRequest::OutputRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:city.water.output.v1.OutputRequest)
}
OutputRequest::OutputRequest(const OutputRequest& from) : ::google::protobuf::Message() {
  OutputRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.roads_){from._impl_.roads_},
      decltype(_impl_.detailed_roads_){from._impl_.detailed_roads_},
      decltype(_impl_.drainage_nodes_){from._impl_.drainage_nodes_},
      decltype(_impl_.drainage_links_){from._impl_.drainage_links_},
      decltype(_impl_.supply_nodes_){from._impl_.supply_nodes_},
      decltype(_impl_.supply_links_){from._impl_.supply_links_},
      decltype(_impl_.aois_){from._impl_.aois_},
      decltype(_impl_.events_){nullptr},
      decltype(_impl_.drainage_metrics_){nullptr},
      decltype(_impl_.supply_metrics_){nullptr},
      decltype(_impl_.drainage_metric_){},
      decltype(_impl_.step_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.events_ = new ::city::event::v1::Events(*from._impl_.events_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.drainage_metrics_ = new ::city::water::output::v1::DrainageMetrics(*from._impl_.drainage_metrics_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.supply_metrics_ = new ::city::water::output::v1::SupplyMetrics(*from._impl_.supply_metrics_);
  }
  ::memcpy(&_impl_.drainage_metric_, &from._impl_.drainage_metric_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.step_) -
    reinterpret_cast<char*>(&_impl_.drainage_metric_)) + sizeof(_impl_.step_));

  // @@protoc_insertion_point(copy_constructor:city.water.output.v1.OutputRequest)
}
inline void OutputRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.roads_){arena},
      decltype(_impl_.detailed_roads_){arena},
      decltype(_impl_.drainage_nodes_){arena},
      decltype(_impl_.drainage_links_){arena},
      decltype(_impl_.supply_nodes_){arena},
      decltype(_impl_.supply_links_){arena},
      decltype(_impl_.aois_){arena},
      decltype(_impl_.events_){nullptr},
      decltype(_impl_.drainage_metrics_){nullptr},
      decltype(_impl_.supply_metrics_){nullptr},
      decltype(_impl_.drainage_metric_){0},
      decltype(_impl_.step_){0},
  };
}
OutputRequest::~OutputRequest() {
  // @@protoc_insertion_point(destructor:city.water.output.v1.OutputRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void OutputRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roads_.~RepeatedPtrField();
  _impl_.detailed_roads_.~RepeatedPtrField();
  _impl_.drainage_nodes_.~RepeatedPtrField();
  _impl_.drainage_links_.~RepeatedPtrField();
  _impl_.supply_nodes_.~RepeatedPtrField();
  _impl_.supply_links_.~RepeatedPtrField();
  _impl_.aois_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.events_;
  if (this != internal_default_instance()) delete _impl_.drainage_metrics_;
  if (this != internal_default_instance()) delete _impl_.supply_metrics_;
}
void OutputRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void OutputRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.water.output.v1.OutputRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_roads()->Clear();
  _internal_mutable_detailed_roads()->Clear();
  _internal_mutable_drainage_nodes()->Clear();
  _internal_mutable_drainage_links()->Clear();
  _internal_mutable_supply_nodes()->Clear();
  _internal_mutable_supply_links()->Clear();
  _internal_mutable_aois()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.events_ != nullptr);
      _impl_.events_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.drainage_metrics_ != nullptr);
      _impl_.drainage_metrics_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.supply_metrics_ != nullptr);
      _impl_.supply_metrics_->Clear();
    }
  }
  ::memset(&_impl_.drainage_metric_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.step_) -
      reinterpret_cast<char*>(&_impl_.drainage_metric_)) + sizeof(_impl_.step_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* OutputRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 10, 0, 2> OutputRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_OutputRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 step = 1 [json_name = "step"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(OutputRequest, _impl_.step_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.step_)}},
    // repeated .city.water.output.v1.Road roads = 2 [json_name = "roads"];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.roads_)}},
    // repeated .city.water.output.v1.DetailedRoad detailed_roads = 3 [json_name = "detailedRoads"];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.detailed_roads_)}},
    // repeated .city.water.output.v1.Node drainage_nodes = 4 [json_name = "drainageNodes"];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.drainage_nodes_)}},
    // repeated .city.water.output.v1.Link drainage_links = 5 [json_name = "drainageLinks"];
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 3, PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.drainage_links_)}},
    // repeated .city.water.output.v1.Node supply_nodes = 6 [json_name = "supplyNodes"];
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 4, PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.supply_nodes_)}},
    // repeated .city.water.output.v1.Link supply_links = 7 [json_name = "supplyLinks"];
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 5, PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.supply_links_)}},
    // repeated .city.water.output.v1.Aoi aois = 8 [json_name = "aois"];
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 6, PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.aois_)}},
    // double drainage_metric = 9 [json_name = "drainageMetric"];
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.drainage_metric_)}},
    // .city.event.v1.Events events = 10 [json_name = "events"];
    {::_pbi::TcParser::FastMtS1,
     {82, 0, 7, PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.events_)}},
    // .city.water.output.v1.DrainageMetrics drainage_metrics = 11 [json_name = "drainageMetrics"];
    {::_pbi::TcParser::FastMtS1,
     {90, 1, 8, PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.drainage_metrics_)}},
    // .city.water.output.v1.SupplyMetrics supply_metrics = 12 [json_name = "supplyMetrics"];
    {::_pbi::TcParser::FastMtS1,
     {98, 2, 9, PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.supply_metrics_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 step = 1 [json_name = "step"];
    {PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.step_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .city.water.output.v1.Road roads = 2 [json_name = "roads"];
    {PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.roads_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .city.water.output.v1.DetailedRoad detailed_roads = 3 [json_name = "detailedRoads"];
    {PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.detailed_roads_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .city.water.output.v1.Node drainage_nodes = 4 [json_name = "drainageNodes"];
    {PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.drainage_nodes_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .city.water.output.v1.Link drainage_links = 5 [json_name = "drainageLinks"];
    {PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.drainage_links_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .city.water.output.v1.Node supply_nodes = 6 [json_name = "supplyNodes"];
    {PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.supply_nodes_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .city.water.output.v1.Link supply_links = 7 [json_name = "supplyLinks"];
    {PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.supply_links_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .city.water.output.v1.Aoi aois = 8 [json_name = "aois"];
    {PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.aois_), -1, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // double drainage_metric = 9 [json_name = "drainageMetric"];
    {PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.drainage_metric_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .city.event.v1.Events events = 10 [json_name = "events"];
    {PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.events_), _Internal::kHasBitsOffset + 0, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .city.water.output.v1.DrainageMetrics drainage_metrics = 11 [json_name = "drainageMetrics"];
    {PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.drainage_metrics_), _Internal::kHasBitsOffset + 1, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .city.water.output.v1.SupplyMetrics supply_metrics = 12 [json_name = "supplyMetrics"];
    {PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.supply_metrics_), _Internal::kHasBitsOffset + 2, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::city::water::output::v1::Road>()},
    {::_pbi::TcParser::GetTable<::city::water::output::v1::DetailedRoad>()},
    {::_pbi::TcParser::GetTable<::city::water::output::v1::Node>()},
    {::_pbi::TcParser::GetTable<::city::water::output::v1::Link>()},
    {::_pbi::TcParser::GetTable<::city::water::output::v1::Node>()},
    {::_pbi::TcParser::GetTable<::city::water::output::v1::Link>()},
    {::_pbi::TcParser::GetTable<::city::water::output::v1::Aoi>()},
    {::_pbi::TcParser::GetTable<::city::event::v1::Events>()},
    {::_pbi::TcParser::GetTable<::city::water::output::v1::DrainageMetrics>()},
    {::_pbi::TcParser::GetTable<::city::water::output::v1::SupplyMetrics>()},
  }}, {{
  }},
};

::uint8_t* OutputRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.water.output.v1.OutputRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 step = 1 [json_name = "step"];
  if (this->_internal_step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_step(), target);
  }

  // repeated .city.water.output.v1.Road roads = 2 [json_name = "roads"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_roads_size()); i < n; i++) {
    const auto& repfield = this->_internal_roads().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .city.water.output.v1.DetailedRoad detailed_roads = 3 [json_name = "detailedRoads"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detailed_roads_size()); i < n; i++) {
    const auto& repfield = this->_internal_detailed_roads().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .city.water.output.v1.Node drainage_nodes = 4 [json_name = "drainageNodes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drainage_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_drainage_nodes().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .city.water.output.v1.Link drainage_links = 5 [json_name = "drainageLinks"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_drainage_links_size()); i < n; i++) {
    const auto& repfield = this->_internal_drainage_links().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .city.water.output.v1.Node supply_nodes = 6 [json_name = "supplyNodes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_supply_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_supply_nodes().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .city.water.output.v1.Link supply_links = 7 [json_name = "supplyLinks"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_supply_links_size()); i < n; i++) {
    const auto& repfield = this->_internal_supply_links().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .city.water.output.v1.Aoi aois = 8 [json_name = "aois"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_aois_size()); i < n; i++) {
    const auto& repfield = this->_internal_aois().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // double drainage_metric = 9 [json_name = "drainageMetric"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_drainage_metric = this->_internal_drainage_metric();
  ::uint64_t raw_drainage_metric;
  memcpy(&raw_drainage_metric, &tmp_drainage_metric, sizeof(tmp_drainage_metric));
  if (raw_drainage_metric != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        9, this->_internal_drainage_metric(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .city.event.v1.Events events = 10 [json_name = "events"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::events(this),
        _Internal::events(this).GetCachedSize(), target, stream);
  }

  // .city.water.output.v1.DrainageMetrics drainage_metrics = 11 [json_name = "drainageMetrics"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::drainage_metrics(this),
        _Internal::drainage_metrics(this).GetCachedSize(), target, stream);
  }

  // .city.water.output.v1.SupplyMetrics supply_metrics = 12 [json_name = "supplyMetrics"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::supply_metrics(this),
        _Internal::supply_metrics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.water.output.v1.OutputRequest)
  return target;
}

::size_t OutputRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.water.output.v1.OutputRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.water.output.v1.Road roads = 2 [json_name = "roads"];
  total_size += 1UL * this->_internal_roads_size();
  for (const auto& msg : this->_internal_roads()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .city.water.output.v1.DetailedRoad detailed_roads = 3 [json_name = "detailedRoads"];
  total_size += 1UL * this->_internal_detailed_roads_size();
  for (const auto& msg : this->_internal_detailed_roads()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .city.water.output.v1.Node drainage_nodes = 4 [json_name = "drainageNodes"];
  total_size += 1UL * this->_internal_drainage_nodes_size();
  for (const auto& msg : this->_internal_drainage_nodes()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .city.water.output.v1.Link drainage_links = 5 [json_name = "drainageLinks"];
  total_size += 1UL * this->_internal_drainage_links_size();
  for (const auto& msg : this->_internal_drainage_links()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .city.water.output.v1.Node supply_nodes = 6 [json_name = "supplyNodes"];
  total_size += 1UL * this->_internal_supply_nodes_size();
  for (const auto& msg : this->_internal_supply_nodes()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .city.water.output.v1.Link supply_links = 7 [json_name = "supplyLinks"];
  total_size += 1UL * this->_internal_supply_links_size();
  for (const auto& msg : this->_internal_supply_links()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .city.water.output.v1.Aoi aois = 8 [json_name = "aois"];
  total_size += 1UL * this->_internal_aois_size();
  for (const auto& msg : this->_internal_aois()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .city.event.v1.Events events = 10 [json_name = "events"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.events_);
    }

    // .city.water.output.v1.DrainageMetrics drainage_metrics = 11 [json_name = "drainageMetrics"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.drainage_metrics_);
    }

    // .city.water.output.v1.SupplyMetrics supply_metrics = 12 [json_name = "supplyMetrics"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.supply_metrics_);
    }

  }
  // double drainage_metric = 9 [json_name = "drainageMetric"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_drainage_metric = this->_internal_drainage_metric();
  ::uint64_t raw_drainage_metric;
  memcpy(&raw_drainage_metric, &tmp_drainage_metric, sizeof(tmp_drainage_metric));
  if (raw_drainage_metric != 0) {
    total_size += 9;
  }

  // int32 step = 1 [json_name = "step"];
  if (this->_internal_step() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_step());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData OutputRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    OutputRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*OutputRequest::GetClassData() const { return &_class_data_; }


void OutputRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<OutputRequest*>(&to_msg);
  auto& from = static_cast<const OutputRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.water.output.v1.OutputRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_roads()->MergeFrom(from._internal_roads());
  _this->_internal_mutable_detailed_roads()->MergeFrom(from._internal_detailed_roads());
  _this->_internal_mutable_drainage_nodes()->MergeFrom(from._internal_drainage_nodes());
  _this->_internal_mutable_drainage_links()->MergeFrom(from._internal_drainage_links());
  _this->_internal_mutable_supply_nodes()->MergeFrom(from._internal_supply_nodes());
  _this->_internal_mutable_supply_links()->MergeFrom(from._internal_supply_links());
  _this->_internal_mutable_aois()->MergeFrom(from._internal_aois());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_events()->::city::event::v1::Events::MergeFrom(
          from._internal_events());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_drainage_metrics()->::city::water::output::v1::DrainageMetrics::MergeFrom(
          from._internal_drainage_metrics());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_supply_metrics()->::city::water::output::v1::SupplyMetrics::MergeFrom(
          from._internal_supply_metrics());
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_drainage_metric = from._internal_drainage_metric();
  ::uint64_t raw_drainage_metric;
  memcpy(&raw_drainage_metric, &tmp_drainage_metric, sizeof(tmp_drainage_metric));
  if (raw_drainage_metric != 0) {
    _this->_internal_set_drainage_metric(from._internal_drainage_metric());
  }
  if (from._internal_step() != 0) {
    _this->_internal_set_step(from._internal_step());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OutputRequest::CopyFrom(const OutputRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.water.output.v1.OutputRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OutputRequest::IsInitialized() const {
  return true;
}

void OutputRequest::InternalSwap(OutputRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.roads_.InternalSwap(&other->_impl_.roads_);
  _impl_.detailed_roads_.InternalSwap(&other->_impl_.detailed_roads_);
  _impl_.drainage_nodes_.InternalSwap(&other->_impl_.drainage_nodes_);
  _impl_.drainage_links_.InternalSwap(&other->_impl_.drainage_links_);
  _impl_.supply_nodes_.InternalSwap(&other->_impl_.supply_nodes_);
  _impl_.supply_links_.InternalSwap(&other->_impl_.supply_links_);
  _impl_.aois_.InternalSwap(&other->_impl_.aois_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.step_)
      + sizeof(OutputRequest::_impl_.step_)
      - PROTOBUF_FIELD_OFFSET(OutputRequest, _impl_.events_)>(
          reinterpret_cast<char*>(&_impl_.events_),
          reinterpret_cast<char*>(&other->_impl_.events_));
}

::google::protobuf::Metadata OutputRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto_getter, &descriptor_table_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto_once,
      file_level_metadata_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto[0]);
}
// ===================================================================

class OutputResponse::_Internal {
 public:
};

OutputResponse::OutputResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:city.water.output.v1.OutputResponse)
}
OutputResponse::OutputResponse(const OutputResponse& from) : ::google::protobuf::internal::ZeroFieldsBase() {
  OutputResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:city.water.output.v1.OutputResponse)
}




const ::google::protobuf::Message::ClassData OutputResponse::_class_data_ = {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl,
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl,
};
const ::google::protobuf::Message::ClassData*OutputResponse::GetClassData() const { return &_class_data_; }







::google::protobuf::Metadata OutputResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto_getter, &descriptor_table_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto_once,
      file_level_metadata_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace output
}  // namespace water
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
