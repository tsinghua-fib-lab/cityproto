// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/water/output/v1/output_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "city/event/v1/event.pb.h"
#include "city/water/output/v1/output.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto;
namespace city {
namespace water {
namespace output {
namespace v1 {
class OutputRequest;
struct OutputRequestDefaultTypeInternal;
extern OutputRequestDefaultTypeInternal _OutputRequest_default_instance_;
class OutputResponse;
struct OutputResponseDefaultTypeInternal;
extern OutputResponseDefaultTypeInternal _OutputResponse_default_instance_;
}  // namespace v1
}  // namespace output
}  // namespace water
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::water::output::v1::OutputRequest* Arena::CreateMaybeMessage<::city::water::output::v1::OutputRequest>(Arena*);
template<> ::city::water::output::v1::OutputResponse* Arena::CreateMaybeMessage<::city::water::output::v1::OutputResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace water {
namespace output {
namespace v1 {

// ===================================================================

class OutputRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.water.output.v1.OutputRequest) */ {
 public:
  inline OutputRequest() : OutputRequest(nullptr) {}
  ~OutputRequest() override;
  explicit PROTOBUF_CONSTEXPR OutputRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputRequest(const OutputRequest& from);
  OutputRequest(OutputRequest&& from) noexcept
    : OutputRequest() {
    *this = ::std::move(from);
  }

  inline OutputRequest& operator=(const OutputRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputRequest& operator=(OutputRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputRequest* internal_default_instance() {
    return reinterpret_cast<const OutputRequest*>(
               &_OutputRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OutputRequest& a, OutputRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OutputRequest& from) {
    OutputRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.output.v1.OutputRequest";
  }
  protected:
  explicit OutputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoadsFieldNumber = 2,
    kDetailedRoadsFieldNumber = 3,
    kDrainageNodesFieldNumber = 4,
    kDrainageLinksFieldNumber = 5,
    kSupplyNodesFieldNumber = 6,
    kSupplyLinksFieldNumber = 7,
    kAoisFieldNumber = 8,
    kEventsFieldNumber = 10,
    kDrainageMetricsFieldNumber = 11,
    kSupplyMetricsFieldNumber = 12,
    kDrainageMetricFieldNumber = 9,
    kStepFieldNumber = 1,
  };
  // repeated .city.water.output.v1.Road roads = 2 [json_name = "roads"];
  int roads_size() const;
  private:
  int _internal_roads_size() const;
  public:
  void clear_roads();
  ::city::water::output::v1::Road* mutable_roads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Road >*
      mutable_roads();
  private:
  const ::city::water::output::v1::Road& _internal_roads(int index) const;
  ::city::water::output::v1::Road* _internal_add_roads();
  public:
  const ::city::water::output::v1::Road& roads(int index) const;
  ::city::water::output::v1::Road* add_roads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Road >&
      roads() const;

  // repeated .city.water.output.v1.DetailedRoad detailed_roads = 3 [json_name = "detailedRoads"];
  int detailed_roads_size() const;
  private:
  int _internal_detailed_roads_size() const;
  public:
  void clear_detailed_roads();
  ::city::water::output::v1::DetailedRoad* mutable_detailed_roads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::DetailedRoad >*
      mutable_detailed_roads();
  private:
  const ::city::water::output::v1::DetailedRoad& _internal_detailed_roads(int index) const;
  ::city::water::output::v1::DetailedRoad* _internal_add_detailed_roads();
  public:
  const ::city::water::output::v1::DetailedRoad& detailed_roads(int index) const;
  ::city::water::output::v1::DetailedRoad* add_detailed_roads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::DetailedRoad >&
      detailed_roads() const;

  // repeated .city.water.output.v1.Node drainage_nodes = 4 [json_name = "drainageNodes"];
  int drainage_nodes_size() const;
  private:
  int _internal_drainage_nodes_size() const;
  public:
  void clear_drainage_nodes();
  ::city::water::output::v1::Node* mutable_drainage_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Node >*
      mutable_drainage_nodes();
  private:
  const ::city::water::output::v1::Node& _internal_drainage_nodes(int index) const;
  ::city::water::output::v1::Node* _internal_add_drainage_nodes();
  public:
  const ::city::water::output::v1::Node& drainage_nodes(int index) const;
  ::city::water::output::v1::Node* add_drainage_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Node >&
      drainage_nodes() const;

  // repeated .city.water.output.v1.Link drainage_links = 5 [json_name = "drainageLinks"];
  int drainage_links_size() const;
  private:
  int _internal_drainage_links_size() const;
  public:
  void clear_drainage_links();
  ::city::water::output::v1::Link* mutable_drainage_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Link >*
      mutable_drainage_links();
  private:
  const ::city::water::output::v1::Link& _internal_drainage_links(int index) const;
  ::city::water::output::v1::Link* _internal_add_drainage_links();
  public:
  const ::city::water::output::v1::Link& drainage_links(int index) const;
  ::city::water::output::v1::Link* add_drainage_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Link >&
      drainage_links() const;

  // repeated .city.water.output.v1.Node supply_nodes = 6 [json_name = "supplyNodes"];
  int supply_nodes_size() const;
  private:
  int _internal_supply_nodes_size() const;
  public:
  void clear_supply_nodes();
  ::city::water::output::v1::Node* mutable_supply_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Node >*
      mutable_supply_nodes();
  private:
  const ::city::water::output::v1::Node& _internal_supply_nodes(int index) const;
  ::city::water::output::v1::Node* _internal_add_supply_nodes();
  public:
  const ::city::water::output::v1::Node& supply_nodes(int index) const;
  ::city::water::output::v1::Node* add_supply_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Node >&
      supply_nodes() const;

  // repeated .city.water.output.v1.Link supply_links = 7 [json_name = "supplyLinks"];
  int supply_links_size() const;
  private:
  int _internal_supply_links_size() const;
  public:
  void clear_supply_links();
  ::city::water::output::v1::Link* mutable_supply_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Link >*
      mutable_supply_links();
  private:
  const ::city::water::output::v1::Link& _internal_supply_links(int index) const;
  ::city::water::output::v1::Link* _internal_add_supply_links();
  public:
  const ::city::water::output::v1::Link& supply_links(int index) const;
  ::city::water::output::v1::Link* add_supply_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Link >&
      supply_links() const;

  // repeated .city.water.output.v1.Aoi aois = 8 [json_name = "aois"];
  int aois_size() const;
  private:
  int _internal_aois_size() const;
  public:
  void clear_aois();
  ::city::water::output::v1::Aoi* mutable_aois(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Aoi >*
      mutable_aois();
  private:
  const ::city::water::output::v1::Aoi& _internal_aois(int index) const;
  ::city::water::output::v1::Aoi* _internal_add_aois();
  public:
  const ::city::water::output::v1::Aoi& aois(int index) const;
  ::city::water::output::v1::Aoi* add_aois();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Aoi >&
      aois() const;

  // .city.event.v1.Events events = 10 [json_name = "events"];
  bool has_events() const;
  private:
  bool _internal_has_events() const;
  public:
  void clear_events();
  const ::city::event::v1::Events& events() const;
  PROTOBUF_NODISCARD ::city::event::v1::Events* release_events();
  ::city::event::v1::Events* mutable_events();
  void set_allocated_events(::city::event::v1::Events* events);
  private:
  const ::city::event::v1::Events& _internal_events() const;
  ::city::event::v1::Events* _internal_mutable_events();
  public:
  void unsafe_arena_set_allocated_events(
      ::city::event::v1::Events* events);
  ::city::event::v1::Events* unsafe_arena_release_events();

  // .city.water.output.v1.DrainageMetrics drainage_metrics = 11 [json_name = "drainageMetrics"];
  bool has_drainage_metrics() const;
  private:
  bool _internal_has_drainage_metrics() const;
  public:
  void clear_drainage_metrics();
  const ::city::water::output::v1::DrainageMetrics& drainage_metrics() const;
  PROTOBUF_NODISCARD ::city::water::output::v1::DrainageMetrics* release_drainage_metrics();
  ::city::water::output::v1::DrainageMetrics* mutable_drainage_metrics();
  void set_allocated_drainage_metrics(::city::water::output::v1::DrainageMetrics* drainage_metrics);
  private:
  const ::city::water::output::v1::DrainageMetrics& _internal_drainage_metrics() const;
  ::city::water::output::v1::DrainageMetrics* _internal_mutable_drainage_metrics();
  public:
  void unsafe_arena_set_allocated_drainage_metrics(
      ::city::water::output::v1::DrainageMetrics* drainage_metrics);
  ::city::water::output::v1::DrainageMetrics* unsafe_arena_release_drainage_metrics();

  // .city.water.output.v1.SupplyMetrics supply_metrics = 12 [json_name = "supplyMetrics"];
  bool has_supply_metrics() const;
  private:
  bool _internal_has_supply_metrics() const;
  public:
  void clear_supply_metrics();
  const ::city::water::output::v1::SupplyMetrics& supply_metrics() const;
  PROTOBUF_NODISCARD ::city::water::output::v1::SupplyMetrics* release_supply_metrics();
  ::city::water::output::v1::SupplyMetrics* mutable_supply_metrics();
  void set_allocated_supply_metrics(::city::water::output::v1::SupplyMetrics* supply_metrics);
  private:
  const ::city::water::output::v1::SupplyMetrics& _internal_supply_metrics() const;
  ::city::water::output::v1::SupplyMetrics* _internal_mutable_supply_metrics();
  public:
  void unsafe_arena_set_allocated_supply_metrics(
      ::city::water::output::v1::SupplyMetrics* supply_metrics);
  ::city::water::output::v1::SupplyMetrics* unsafe_arena_release_supply_metrics();

  // double drainage_metric = 9 [json_name = "drainageMetric"];
  void clear_drainage_metric();
  double drainage_metric() const;
  void set_drainage_metric(double value);
  private:
  double _internal_drainage_metric() const;
  void _internal_set_drainage_metric(double value);
  public:

  // int32 step = 1 [json_name = "step"];
  void clear_step();
  int32_t step() const;
  void set_step(int32_t value);
  private:
  int32_t _internal_step() const;
  void _internal_set_step(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.water.output.v1.OutputRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Road > roads_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::DetailedRoad > detailed_roads_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Node > drainage_nodes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Link > drainage_links_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Node > supply_nodes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Link > supply_links_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Aoi > aois_;
    ::city::event::v1::Events* events_;
    ::city::water::output::v1::DrainageMetrics* drainage_metrics_;
    ::city::water::output::v1::SupplyMetrics* supply_metrics_;
    double drainage_metric_;
    int32_t step_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto;
};
// -------------------------------------------------------------------

class OutputResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.water.output.v1.OutputResponse) */ {
 public:
  inline OutputResponse() : OutputResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR OutputResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputResponse(const OutputResponse& from);
  OutputResponse(OutputResponse&& from) noexcept
    : OutputResponse() {
    *this = ::std::move(from);
  }

  inline OutputResponse& operator=(const OutputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputResponse& operator=(OutputResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputResponse* internal_default_instance() {
    return reinterpret_cast<const OutputResponse*>(
               &_OutputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OutputResponse& a, OutputResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OutputResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OutputResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.water.output.v1.OutputResponse";
  }
  protected:
  explicit OutputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.water.output.v1.OutputResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OutputRequest

// int32 step = 1 [json_name = "step"];
inline void OutputRequest::clear_step() {
  _impl_.step_ = 0;
}
inline int32_t OutputRequest::_internal_step() const {
  return _impl_.step_;
}
inline int32_t OutputRequest::step() const {
  // @@protoc_insertion_point(field_get:city.water.output.v1.OutputRequest.step)
  return _internal_step();
}
inline void OutputRequest::_internal_set_step(int32_t value) {
  
  _impl_.step_ = value;
}
inline void OutputRequest::set_step(int32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:city.water.output.v1.OutputRequest.step)
}

// repeated .city.water.output.v1.Road roads = 2 [json_name = "roads"];
inline int OutputRequest::_internal_roads_size() const {
  return _impl_.roads_.size();
}
inline int OutputRequest::roads_size() const {
  return _internal_roads_size();
}
inline ::city::water::output::v1::Road* OutputRequest::mutable_roads(int index) {
  // @@protoc_insertion_point(field_mutable:city.water.output.v1.OutputRequest.roads)
  return _impl_.roads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Road >*
OutputRequest::mutable_roads() {
  // @@protoc_insertion_point(field_mutable_list:city.water.output.v1.OutputRequest.roads)
  return &_impl_.roads_;
}
inline const ::city::water::output::v1::Road& OutputRequest::_internal_roads(int index) const {
  return _impl_.roads_.Get(index);
}
inline const ::city::water::output::v1::Road& OutputRequest::roads(int index) const {
  // @@protoc_insertion_point(field_get:city.water.output.v1.OutputRequest.roads)
  return _internal_roads(index);
}
inline ::city::water::output::v1::Road* OutputRequest::_internal_add_roads() {
  return _impl_.roads_.Add();
}
inline ::city::water::output::v1::Road* OutputRequest::add_roads() {
  ::city::water::output::v1::Road* _add = _internal_add_roads();
  // @@protoc_insertion_point(field_add:city.water.output.v1.OutputRequest.roads)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Road >&
OutputRequest::roads() const {
  // @@protoc_insertion_point(field_list:city.water.output.v1.OutputRequest.roads)
  return _impl_.roads_;
}

// repeated .city.water.output.v1.DetailedRoad detailed_roads = 3 [json_name = "detailedRoads"];
inline int OutputRequest::_internal_detailed_roads_size() const {
  return _impl_.detailed_roads_.size();
}
inline int OutputRequest::detailed_roads_size() const {
  return _internal_detailed_roads_size();
}
inline ::city::water::output::v1::DetailedRoad* OutputRequest::mutable_detailed_roads(int index) {
  // @@protoc_insertion_point(field_mutable:city.water.output.v1.OutputRequest.detailed_roads)
  return _impl_.detailed_roads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::DetailedRoad >*
OutputRequest::mutable_detailed_roads() {
  // @@protoc_insertion_point(field_mutable_list:city.water.output.v1.OutputRequest.detailed_roads)
  return &_impl_.detailed_roads_;
}
inline const ::city::water::output::v1::DetailedRoad& OutputRequest::_internal_detailed_roads(int index) const {
  return _impl_.detailed_roads_.Get(index);
}
inline const ::city::water::output::v1::DetailedRoad& OutputRequest::detailed_roads(int index) const {
  // @@protoc_insertion_point(field_get:city.water.output.v1.OutputRequest.detailed_roads)
  return _internal_detailed_roads(index);
}
inline ::city::water::output::v1::DetailedRoad* OutputRequest::_internal_add_detailed_roads() {
  return _impl_.detailed_roads_.Add();
}
inline ::city::water::output::v1::DetailedRoad* OutputRequest::add_detailed_roads() {
  ::city::water::output::v1::DetailedRoad* _add = _internal_add_detailed_roads();
  // @@protoc_insertion_point(field_add:city.water.output.v1.OutputRequest.detailed_roads)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::DetailedRoad >&
OutputRequest::detailed_roads() const {
  // @@protoc_insertion_point(field_list:city.water.output.v1.OutputRequest.detailed_roads)
  return _impl_.detailed_roads_;
}

// repeated .city.water.output.v1.Node drainage_nodes = 4 [json_name = "drainageNodes"];
inline int OutputRequest::_internal_drainage_nodes_size() const {
  return _impl_.drainage_nodes_.size();
}
inline int OutputRequest::drainage_nodes_size() const {
  return _internal_drainage_nodes_size();
}
inline ::city::water::output::v1::Node* OutputRequest::mutable_drainage_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:city.water.output.v1.OutputRequest.drainage_nodes)
  return _impl_.drainage_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Node >*
OutputRequest::mutable_drainage_nodes() {
  // @@protoc_insertion_point(field_mutable_list:city.water.output.v1.OutputRequest.drainage_nodes)
  return &_impl_.drainage_nodes_;
}
inline const ::city::water::output::v1::Node& OutputRequest::_internal_drainage_nodes(int index) const {
  return _impl_.drainage_nodes_.Get(index);
}
inline const ::city::water::output::v1::Node& OutputRequest::drainage_nodes(int index) const {
  // @@protoc_insertion_point(field_get:city.water.output.v1.OutputRequest.drainage_nodes)
  return _internal_drainage_nodes(index);
}
inline ::city::water::output::v1::Node* OutputRequest::_internal_add_drainage_nodes() {
  return _impl_.drainage_nodes_.Add();
}
inline ::city::water::output::v1::Node* OutputRequest::add_drainage_nodes() {
  ::city::water::output::v1::Node* _add = _internal_add_drainage_nodes();
  // @@protoc_insertion_point(field_add:city.water.output.v1.OutputRequest.drainage_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Node >&
OutputRequest::drainage_nodes() const {
  // @@protoc_insertion_point(field_list:city.water.output.v1.OutputRequest.drainage_nodes)
  return _impl_.drainage_nodes_;
}

// repeated .city.water.output.v1.Link drainage_links = 5 [json_name = "drainageLinks"];
inline int OutputRequest::_internal_drainage_links_size() const {
  return _impl_.drainage_links_.size();
}
inline int OutputRequest::drainage_links_size() const {
  return _internal_drainage_links_size();
}
inline ::city::water::output::v1::Link* OutputRequest::mutable_drainage_links(int index) {
  // @@protoc_insertion_point(field_mutable:city.water.output.v1.OutputRequest.drainage_links)
  return _impl_.drainage_links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Link >*
OutputRequest::mutable_drainage_links() {
  // @@protoc_insertion_point(field_mutable_list:city.water.output.v1.OutputRequest.drainage_links)
  return &_impl_.drainage_links_;
}
inline const ::city::water::output::v1::Link& OutputRequest::_internal_drainage_links(int index) const {
  return _impl_.drainage_links_.Get(index);
}
inline const ::city::water::output::v1::Link& OutputRequest::drainage_links(int index) const {
  // @@protoc_insertion_point(field_get:city.water.output.v1.OutputRequest.drainage_links)
  return _internal_drainage_links(index);
}
inline ::city::water::output::v1::Link* OutputRequest::_internal_add_drainage_links() {
  return _impl_.drainage_links_.Add();
}
inline ::city::water::output::v1::Link* OutputRequest::add_drainage_links() {
  ::city::water::output::v1::Link* _add = _internal_add_drainage_links();
  // @@protoc_insertion_point(field_add:city.water.output.v1.OutputRequest.drainage_links)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Link >&
OutputRequest::drainage_links() const {
  // @@protoc_insertion_point(field_list:city.water.output.v1.OutputRequest.drainage_links)
  return _impl_.drainage_links_;
}

// repeated .city.water.output.v1.Node supply_nodes = 6 [json_name = "supplyNodes"];
inline int OutputRequest::_internal_supply_nodes_size() const {
  return _impl_.supply_nodes_.size();
}
inline int OutputRequest::supply_nodes_size() const {
  return _internal_supply_nodes_size();
}
inline ::city::water::output::v1::Node* OutputRequest::mutable_supply_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:city.water.output.v1.OutputRequest.supply_nodes)
  return _impl_.supply_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Node >*
OutputRequest::mutable_supply_nodes() {
  // @@protoc_insertion_point(field_mutable_list:city.water.output.v1.OutputRequest.supply_nodes)
  return &_impl_.supply_nodes_;
}
inline const ::city::water::output::v1::Node& OutputRequest::_internal_supply_nodes(int index) const {
  return _impl_.supply_nodes_.Get(index);
}
inline const ::city::water::output::v1::Node& OutputRequest::supply_nodes(int index) const {
  // @@protoc_insertion_point(field_get:city.water.output.v1.OutputRequest.supply_nodes)
  return _internal_supply_nodes(index);
}
inline ::city::water::output::v1::Node* OutputRequest::_internal_add_supply_nodes() {
  return _impl_.supply_nodes_.Add();
}
inline ::city::water::output::v1::Node* OutputRequest::add_supply_nodes() {
  ::city::water::output::v1::Node* _add = _internal_add_supply_nodes();
  // @@protoc_insertion_point(field_add:city.water.output.v1.OutputRequest.supply_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Node >&
OutputRequest::supply_nodes() const {
  // @@protoc_insertion_point(field_list:city.water.output.v1.OutputRequest.supply_nodes)
  return _impl_.supply_nodes_;
}

// repeated .city.water.output.v1.Link supply_links = 7 [json_name = "supplyLinks"];
inline int OutputRequest::_internal_supply_links_size() const {
  return _impl_.supply_links_.size();
}
inline int OutputRequest::supply_links_size() const {
  return _internal_supply_links_size();
}
inline ::city::water::output::v1::Link* OutputRequest::mutable_supply_links(int index) {
  // @@protoc_insertion_point(field_mutable:city.water.output.v1.OutputRequest.supply_links)
  return _impl_.supply_links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Link >*
OutputRequest::mutable_supply_links() {
  // @@protoc_insertion_point(field_mutable_list:city.water.output.v1.OutputRequest.supply_links)
  return &_impl_.supply_links_;
}
inline const ::city::water::output::v1::Link& OutputRequest::_internal_supply_links(int index) const {
  return _impl_.supply_links_.Get(index);
}
inline const ::city::water::output::v1::Link& OutputRequest::supply_links(int index) const {
  // @@protoc_insertion_point(field_get:city.water.output.v1.OutputRequest.supply_links)
  return _internal_supply_links(index);
}
inline ::city::water::output::v1::Link* OutputRequest::_internal_add_supply_links() {
  return _impl_.supply_links_.Add();
}
inline ::city::water::output::v1::Link* OutputRequest::add_supply_links() {
  ::city::water::output::v1::Link* _add = _internal_add_supply_links();
  // @@protoc_insertion_point(field_add:city.water.output.v1.OutputRequest.supply_links)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Link >&
OutputRequest::supply_links() const {
  // @@protoc_insertion_point(field_list:city.water.output.v1.OutputRequest.supply_links)
  return _impl_.supply_links_;
}

// repeated .city.water.output.v1.Aoi aois = 8 [json_name = "aois"];
inline int OutputRequest::_internal_aois_size() const {
  return _impl_.aois_.size();
}
inline int OutputRequest::aois_size() const {
  return _internal_aois_size();
}
inline ::city::water::output::v1::Aoi* OutputRequest::mutable_aois(int index) {
  // @@protoc_insertion_point(field_mutable:city.water.output.v1.OutputRequest.aois)
  return _impl_.aois_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Aoi >*
OutputRequest::mutable_aois() {
  // @@protoc_insertion_point(field_mutable_list:city.water.output.v1.OutputRequest.aois)
  return &_impl_.aois_;
}
inline const ::city::water::output::v1::Aoi& OutputRequest::_internal_aois(int index) const {
  return _impl_.aois_.Get(index);
}
inline const ::city::water::output::v1::Aoi& OutputRequest::aois(int index) const {
  // @@protoc_insertion_point(field_get:city.water.output.v1.OutputRequest.aois)
  return _internal_aois(index);
}
inline ::city::water::output::v1::Aoi* OutputRequest::_internal_add_aois() {
  return _impl_.aois_.Add();
}
inline ::city::water::output::v1::Aoi* OutputRequest::add_aois() {
  ::city::water::output::v1::Aoi* _add = _internal_add_aois();
  // @@protoc_insertion_point(field_add:city.water.output.v1.OutputRequest.aois)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::water::output::v1::Aoi >&
OutputRequest::aois() const {
  // @@protoc_insertion_point(field_list:city.water.output.v1.OutputRequest.aois)
  return _impl_.aois_;
}

// double drainage_metric = 9 [json_name = "drainageMetric"];
inline void OutputRequest::clear_drainage_metric() {
  _impl_.drainage_metric_ = 0;
}
inline double OutputRequest::_internal_drainage_metric() const {
  return _impl_.drainage_metric_;
}
inline double OutputRequest::drainage_metric() const {
  // @@protoc_insertion_point(field_get:city.water.output.v1.OutputRequest.drainage_metric)
  return _internal_drainage_metric();
}
inline void OutputRequest::_internal_set_drainage_metric(double value) {
  
  _impl_.drainage_metric_ = value;
}
inline void OutputRequest::set_drainage_metric(double value) {
  _internal_set_drainage_metric(value);
  // @@protoc_insertion_point(field_set:city.water.output.v1.OutputRequest.drainage_metric)
}

// .city.event.v1.Events events = 10 [json_name = "events"];
inline bool OutputRequest::_internal_has_events() const {
  return this != internal_default_instance() && _impl_.events_ != nullptr;
}
inline bool OutputRequest::has_events() const {
  return _internal_has_events();
}
inline const ::city::event::v1::Events& OutputRequest::_internal_events() const {
  const ::city::event::v1::Events* p = _impl_.events_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::event::v1::Events&>(
      ::city::event::v1::_Events_default_instance_);
}
inline const ::city::event::v1::Events& OutputRequest::events() const {
  // @@protoc_insertion_point(field_get:city.water.output.v1.OutputRequest.events)
  return _internal_events();
}
inline void OutputRequest::unsafe_arena_set_allocated_events(
    ::city::event::v1::Events* events) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.events_);
  }
  _impl_.events_ = events;
  if (events) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.water.output.v1.OutputRequest.events)
}
inline ::city::event::v1::Events* OutputRequest::release_events() {
  
  ::city::event::v1::Events* temp = _impl_.events_;
  _impl_.events_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::event::v1::Events* OutputRequest::unsafe_arena_release_events() {
  // @@protoc_insertion_point(field_release:city.water.output.v1.OutputRequest.events)
  
  ::city::event::v1::Events* temp = _impl_.events_;
  _impl_.events_ = nullptr;
  return temp;
}
inline ::city::event::v1::Events* OutputRequest::_internal_mutable_events() {
  
  if (_impl_.events_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::event::v1::Events>(GetArenaForAllocation());
    _impl_.events_ = p;
  }
  return _impl_.events_;
}
inline ::city::event::v1::Events* OutputRequest::mutable_events() {
  ::city::event::v1::Events* _msg = _internal_mutable_events();
  // @@protoc_insertion_point(field_mutable:city.water.output.v1.OutputRequest.events)
  return _msg;
}
inline void OutputRequest::set_allocated_events(::city::event::v1::Events* events) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.events_);
  }
  if (events) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(events));
    if (message_arena != submessage_arena) {
      events = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, events, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.events_ = events;
  // @@protoc_insertion_point(field_set_allocated:city.water.output.v1.OutputRequest.events)
}

// .city.water.output.v1.DrainageMetrics drainage_metrics = 11 [json_name = "drainageMetrics"];
inline bool OutputRequest::_internal_has_drainage_metrics() const {
  return this != internal_default_instance() && _impl_.drainage_metrics_ != nullptr;
}
inline bool OutputRequest::has_drainage_metrics() const {
  return _internal_has_drainage_metrics();
}
inline const ::city::water::output::v1::DrainageMetrics& OutputRequest::_internal_drainage_metrics() const {
  const ::city::water::output::v1::DrainageMetrics* p = _impl_.drainage_metrics_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::water::output::v1::DrainageMetrics&>(
      ::city::water::output::v1::_DrainageMetrics_default_instance_);
}
inline const ::city::water::output::v1::DrainageMetrics& OutputRequest::drainage_metrics() const {
  // @@protoc_insertion_point(field_get:city.water.output.v1.OutputRequest.drainage_metrics)
  return _internal_drainage_metrics();
}
inline void OutputRequest::unsafe_arena_set_allocated_drainage_metrics(
    ::city::water::output::v1::DrainageMetrics* drainage_metrics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drainage_metrics_);
  }
  _impl_.drainage_metrics_ = drainage_metrics;
  if (drainage_metrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.water.output.v1.OutputRequest.drainage_metrics)
}
inline ::city::water::output::v1::DrainageMetrics* OutputRequest::release_drainage_metrics() {
  
  ::city::water::output::v1::DrainageMetrics* temp = _impl_.drainage_metrics_;
  _impl_.drainage_metrics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::water::output::v1::DrainageMetrics* OutputRequest::unsafe_arena_release_drainage_metrics() {
  // @@protoc_insertion_point(field_release:city.water.output.v1.OutputRequest.drainage_metrics)
  
  ::city::water::output::v1::DrainageMetrics* temp = _impl_.drainage_metrics_;
  _impl_.drainage_metrics_ = nullptr;
  return temp;
}
inline ::city::water::output::v1::DrainageMetrics* OutputRequest::_internal_mutable_drainage_metrics() {
  
  if (_impl_.drainage_metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::water::output::v1::DrainageMetrics>(GetArenaForAllocation());
    _impl_.drainage_metrics_ = p;
  }
  return _impl_.drainage_metrics_;
}
inline ::city::water::output::v1::DrainageMetrics* OutputRequest::mutable_drainage_metrics() {
  ::city::water::output::v1::DrainageMetrics* _msg = _internal_mutable_drainage_metrics();
  // @@protoc_insertion_point(field_mutable:city.water.output.v1.OutputRequest.drainage_metrics)
  return _msg;
}
inline void OutputRequest::set_allocated_drainage_metrics(::city::water::output::v1::DrainageMetrics* drainage_metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drainage_metrics_);
  }
  if (drainage_metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drainage_metrics));
    if (message_arena != submessage_arena) {
      drainage_metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drainage_metrics, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.drainage_metrics_ = drainage_metrics;
  // @@protoc_insertion_point(field_set_allocated:city.water.output.v1.OutputRequest.drainage_metrics)
}

// .city.water.output.v1.SupplyMetrics supply_metrics = 12 [json_name = "supplyMetrics"];
inline bool OutputRequest::_internal_has_supply_metrics() const {
  return this != internal_default_instance() && _impl_.supply_metrics_ != nullptr;
}
inline bool OutputRequest::has_supply_metrics() const {
  return _internal_has_supply_metrics();
}
inline const ::city::water::output::v1::SupplyMetrics& OutputRequest::_internal_supply_metrics() const {
  const ::city::water::output::v1::SupplyMetrics* p = _impl_.supply_metrics_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::water::output::v1::SupplyMetrics&>(
      ::city::water::output::v1::_SupplyMetrics_default_instance_);
}
inline const ::city::water::output::v1::SupplyMetrics& OutputRequest::supply_metrics() const {
  // @@protoc_insertion_point(field_get:city.water.output.v1.OutputRequest.supply_metrics)
  return _internal_supply_metrics();
}
inline void OutputRequest::unsafe_arena_set_allocated_supply_metrics(
    ::city::water::output::v1::SupplyMetrics* supply_metrics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.supply_metrics_);
  }
  _impl_.supply_metrics_ = supply_metrics;
  if (supply_metrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.water.output.v1.OutputRequest.supply_metrics)
}
inline ::city::water::output::v1::SupplyMetrics* OutputRequest::release_supply_metrics() {
  
  ::city::water::output::v1::SupplyMetrics* temp = _impl_.supply_metrics_;
  _impl_.supply_metrics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::water::output::v1::SupplyMetrics* OutputRequest::unsafe_arena_release_supply_metrics() {
  // @@protoc_insertion_point(field_release:city.water.output.v1.OutputRequest.supply_metrics)
  
  ::city::water::output::v1::SupplyMetrics* temp = _impl_.supply_metrics_;
  _impl_.supply_metrics_ = nullptr;
  return temp;
}
inline ::city::water::output::v1::SupplyMetrics* OutputRequest::_internal_mutable_supply_metrics() {
  
  if (_impl_.supply_metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::water::output::v1::SupplyMetrics>(GetArenaForAllocation());
    _impl_.supply_metrics_ = p;
  }
  return _impl_.supply_metrics_;
}
inline ::city::water::output::v1::SupplyMetrics* OutputRequest::mutable_supply_metrics() {
  ::city::water::output::v1::SupplyMetrics* _msg = _internal_mutable_supply_metrics();
  // @@protoc_insertion_point(field_mutable:city.water.output.v1.OutputRequest.supply_metrics)
  return _msg;
}
inline void OutputRequest::set_allocated_supply_metrics(::city::water::output::v1::SupplyMetrics* supply_metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.supply_metrics_);
  }
  if (supply_metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supply_metrics));
    if (message_arena != submessage_arena) {
      supply_metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supply_metrics, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.supply_metrics_ = supply_metrics;
  // @@protoc_insertion_point(field_set_allocated:city.water.output.v1.OutputRequest.supply_metrics)
}

// -------------------------------------------------------------------

// OutputResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace output
}  // namespace water
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fwater_2foutput_2fv1_2foutput_5fservice_2eproto
