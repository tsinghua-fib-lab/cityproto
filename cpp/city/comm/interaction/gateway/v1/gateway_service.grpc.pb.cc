// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/comm/interaction/gateway/v1/gateway_service.proto

#include "city/comm/interaction/gateway/v1/gateway_service.pb.h"
#include "city/comm/interaction/gateway/v1/gateway_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace city {
namespace comm {
namespace interaction {
namespace gateway {
namespace v1 {

static const char* GatewayService_method_names[] = {
  "/city.comm.interaction.gateway.v1.GatewayService/SetGatewayPowerStatus",
  "/city.comm.interaction.gateway.v1.GatewayService/SetGatewayRuinStatus",
  "/city.comm.interaction.gateway.v1.GatewayService/GetAllStatus",
  "/city.comm.interaction.gateway.v1.GatewayService/GetRuinInfo",
  "/city.comm.interaction.gateway.v1.GatewayService/GetEvents",
};

std::unique_ptr< GatewayService::Stub> GatewayService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GatewayService::Stub> stub(new GatewayService::Stub(channel, options));
  return stub;
}

GatewayService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetGatewayPowerStatus_(GatewayService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetGatewayRuinStatus_(GatewayService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllStatus_(GatewayService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRuinInfo_(GatewayService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEvents_(GatewayService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GatewayService::Stub::SetGatewayPowerStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest& request, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetGatewayPowerStatus_, context, request, response);
}

void GatewayService::Stub::async::SetGatewayPowerStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGatewayPowerStatus_, context, request, response, std::move(f));
}

void GatewayService::Stub::async::SetGatewayPowerStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGatewayPowerStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>* GatewayService::Stub::PrepareAsyncSetGatewayPowerStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetGatewayPowerStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>* GatewayService::Stub::AsyncSetGatewayPowerStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetGatewayPowerStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GatewayService::Stub::SetGatewayRuinStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest& request, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetGatewayRuinStatus_, context, request, response);
}

void GatewayService::Stub::async::SetGatewayRuinStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGatewayRuinStatus_, context, request, response, std::move(f));
}

void GatewayService::Stub::async::SetGatewayRuinStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGatewayRuinStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>* GatewayService::Stub::PrepareAsyncSetGatewayRuinStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetGatewayRuinStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>* GatewayService::Stub::AsyncSetGatewayRuinStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetGatewayRuinStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GatewayService::Stub::GetAllStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest& request, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::comm::interaction::gateway::v1::GetAllStatusRequest, ::city::comm::interaction::gateway::v1::GetAllStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllStatus_, context, request, response);
}

void GatewayService::Stub::async::GetAllStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* request, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::comm::interaction::gateway::v1::GetAllStatusRequest, ::city::comm::interaction::gateway::v1::GetAllStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllStatus_, context, request, response, std::move(f));
}

void GatewayService::Stub::async::GetAllStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* request, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetAllStatusResponse>* GatewayService::Stub::PrepareAsyncGetAllStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::comm::interaction::gateway::v1::GetAllStatusResponse, ::city::comm::interaction::gateway::v1::GetAllStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetAllStatusResponse>* GatewayService::Stub::AsyncGetAllStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GatewayService::Stub::GetRuinInfo(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest& request, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::comm::interaction::gateway::v1::GetRuinInfoRequest, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRuinInfo_, context, request, response);
}

void GatewayService::Stub::async::GetRuinInfo(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* request, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::comm::interaction::gateway::v1::GetRuinInfoRequest, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRuinInfo_, context, request, response, std::move(f));
}

void GatewayService::Stub::async::GetRuinInfo(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* request, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRuinInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>* GatewayService::Stub::PrepareAsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse, ::city::comm::interaction::gateway::v1::GetRuinInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRuinInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>* GatewayService::Stub::AsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRuinInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GatewayService::Stub::GetEvents(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest& request, ::city::comm::interaction::gateway::v1::GetEventsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::comm::interaction::gateway::v1::GetEventsRequest, ::city::comm::interaction::gateway::v1::GetEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEvents_, context, request, response);
}

void GatewayService::Stub::async::GetEvents(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest* request, ::city::comm::interaction::gateway::v1::GetEventsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::comm::interaction::gateway::v1::GetEventsRequest, ::city::comm::interaction::gateway::v1::GetEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEvents_, context, request, response, std::move(f));
}

void GatewayService::Stub::async::GetEvents(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest* request, ::city::comm::interaction::gateway::v1::GetEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetEventsResponse>* GatewayService::Stub::PrepareAsyncGetEventsRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::comm::interaction::gateway::v1::GetEventsResponse, ::city::comm::interaction::gateway::v1::GetEventsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEvents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetEventsResponse>* GatewayService::Stub::AsyncGetEventsRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEventsRaw(context, request, cq);
  result->StartCall();
  return result;
}

GatewayService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GatewayService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GatewayService::Service, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GatewayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* req,
             ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* resp) {
               return service->SetGatewayPowerStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GatewayService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GatewayService::Service, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GatewayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* req,
             ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* resp) {
               return service->SetGatewayRuinStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GatewayService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GatewayService::Service, ::city::comm::interaction::gateway::v1::GetAllStatusRequest, ::city::comm::interaction::gateway::v1::GetAllStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GatewayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* req,
             ::city::comm::interaction::gateway::v1::GetAllStatusResponse* resp) {
               return service->GetAllStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GatewayService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GatewayService::Service, ::city::comm::interaction::gateway::v1::GetRuinInfoRequest, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GatewayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* req,
             ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* resp) {
               return service->GetRuinInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GatewayService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GatewayService::Service, ::city::comm::interaction::gateway::v1::GetEventsRequest, ::city::comm::interaction::gateway::v1::GetEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GatewayService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::comm::interaction::gateway::v1::GetEventsRequest* req,
             ::city::comm::interaction::gateway::v1::GetEventsResponse* resp) {
               return service->GetEvents(ctx, req, resp);
             }, this)));
}

GatewayService::Service::~Service() {
}

::grpc::Status GatewayService::Service::SetGatewayPowerStatus(::grpc::ServerContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GatewayService::Service::SetGatewayRuinStatus(::grpc::ServerContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GatewayService::Service::GetAllStatus(::grpc::ServerContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* request, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GatewayService::Service::GetRuinInfo(::grpc::ServerContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* request, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GatewayService::Service::GetEvents(::grpc::ServerContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest* request, ::city::comm::interaction::gateway::v1::GetEventsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace city
}  // namespace comm
}  // namespace interaction
}  // namespace gateway
}  // namespace v1

