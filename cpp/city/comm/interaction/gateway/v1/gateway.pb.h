// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/comm/interaction/gateway/v1/gateway.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fcomm_2finteraction_2fgateway_2fv1_2fgateway_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fcomm_2finteraction_2fgateway_2fv1_2fgateway_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fcomm_2finteraction_2fgateway_2fv1_2fgateway_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fcomm_2finteraction_2fgateway_2fv1_2fgateway_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fcomm_2finteraction_2fgateway_2fv1_2fgateway_2eproto;
namespace city {
namespace comm {
namespace interaction {
namespace gateway {
namespace v1 {
class Station;
struct StationDefaultTypeInternal;
extern StationDefaultTypeInternal _Station_default_instance_;
}  // namespace v1
}  // namespace gateway
}  // namespace interaction
}  // namespace comm
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::comm::interaction::gateway::v1::Station* Arena::CreateMaybeMessage<::city::comm::interaction::gateway::v1::Station>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace comm {
namespace interaction {
namespace gateway {
namespace v1 {

enum Reason : int {
  REASON_UNSPECIFIED = 0,
  REASON_RUIN = 1,
  REASON_CASCADE = 2,
  Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Reason_IsValid(int value);
constexpr Reason Reason_MIN = REASON_UNSPECIFIED;
constexpr Reason Reason_MAX = REASON_CASCADE;
constexpr int Reason_ARRAYSIZE = Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Reason_descriptor();
template<typename T>
inline const std::string& Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Reason_descriptor(), enum_t_value);
}
inline bool Reason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Reason>(
    Reason_descriptor(), name, value);
}
// ===================================================================

class Station final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.comm.interaction.gateway.v1.Station) */ {
 public:
  inline Station() : Station(nullptr) {}
  ~Station() override;
  explicit PROTOBUF_CONSTEXPR Station(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Station(const Station& from);
  Station(Station&& from) noexcept
    : Station() {
    *this = ::std::move(from);
  }

  inline Station& operator=(const Station& from) {
    CopyFrom(from);
    return *this;
  }
  inline Station& operator=(Station&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Station& default_instance() {
    return *internal_default_instance();
  }
  static inline const Station* internal_default_instance() {
    return reinterpret_cast<const Station*>(
               &_Station_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Station& a, Station& b) {
    a.Swap(&b);
  }
  inline void Swap(Station* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Station* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Station* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Station>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Station& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Station& from) {
    Station::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Station* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.comm.interaction.gateway.v1.Station";
  }
  protected:
  explicit Station(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kReasonFieldNumber = 3,
  };
  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // bool status = 2 [json_name = "status"];
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // .city.comm.interaction.gateway.v1.Reason reason = 3 [json_name = "reason"];
  void clear_reason();
  ::city::comm::interaction::gateway::v1::Reason reason() const;
  void set_reason(::city::comm::interaction::gateway::v1::Reason value);
  private:
  ::city::comm::interaction::gateway::v1::Reason _internal_reason() const;
  void _internal_set_reason(::city::comm::interaction::gateway::v1::Reason value);
  public:

  // @@protoc_insertion_point(class_scope:city.comm.interaction.gateway.v1.Station)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    bool status_;
    int reason_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcomm_2finteraction_2fgateway_2fv1_2fgateway_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Station

// int32 id = 1 [json_name = "id"];
inline void Station::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Station::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Station::id() const {
  // @@protoc_insertion_point(field_get:city.comm.interaction.gateway.v1.Station.id)
  return _internal_id();
}
inline void Station::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Station::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.comm.interaction.gateway.v1.Station.id)
}

// bool status = 2 [json_name = "status"];
inline void Station::clear_status() {
  _impl_.status_ = false;
}
inline bool Station::_internal_status() const {
  return _impl_.status_;
}
inline bool Station::status() const {
  // @@protoc_insertion_point(field_get:city.comm.interaction.gateway.v1.Station.status)
  return _internal_status();
}
inline void Station::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void Station::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:city.comm.interaction.gateway.v1.Station.status)
}

// .city.comm.interaction.gateway.v1.Reason reason = 3 [json_name = "reason"];
inline void Station::clear_reason() {
  _impl_.reason_ = 0;
}
inline ::city::comm::interaction::gateway::v1::Reason Station::_internal_reason() const {
  return static_cast< ::city::comm::interaction::gateway::v1::Reason >(_impl_.reason_);
}
inline ::city::comm::interaction::gateway::v1::Reason Station::reason() const {
  // @@protoc_insertion_point(field_get:city.comm.interaction.gateway.v1.Station.reason)
  return _internal_reason();
}
inline void Station::_internal_set_reason(::city::comm::interaction::gateway::v1::Reason value) {
  
  _impl_.reason_ = value;
}
inline void Station::set_reason(::city::comm::interaction::gateway::v1::Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:city.comm.interaction.gateway.v1.Station.reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace gateway
}  // namespace interaction
}  // namespace comm
}  // namespace city

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::city::comm::interaction::gateway::v1::Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::comm::interaction::gateway::v1::Reason>() {
  return ::city::comm::interaction::gateway::v1::Reason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fcomm_2finteraction_2fgateway_2fv1_2fgateway_2eproto
