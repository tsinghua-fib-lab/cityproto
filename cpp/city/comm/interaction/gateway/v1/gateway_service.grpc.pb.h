// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/comm/interaction/gateway/v1/gateway_service.proto
#ifndef GRPC_city_2fcomm_2finteraction_2fgateway_2fv1_2fgateway_5fservice_2eproto__INCLUDED
#define GRPC_city_2fcomm_2finteraction_2fgateway_2fv1_2fgateway_5fservice_2eproto__INCLUDED

#include "city/comm/interaction/gateway/v1/gateway_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace city {
namespace comm {
namespace interaction {
namespace gateway {
namespace v1 {

class GatewayService final {
 public:
  static constexpr char const* service_full_name() {
    return "city.comm.interaction.gateway.v1.GatewayService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SetGatewayPowerStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest& request, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>> AsyncSetGatewayPowerStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>>(AsyncSetGatewayPowerStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>> PrepareAsyncSetGatewayPowerStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>>(PrepareAsyncSetGatewayPowerStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status SetGatewayRuinStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest& request, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>> AsyncSetGatewayRuinStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>>(AsyncSetGatewayRuinStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>> PrepareAsyncSetGatewayRuinStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>>(PrepareAsyncSetGatewayRuinStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAllStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest& request, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetAllStatusResponse>> AsyncGetAllStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetAllStatusResponse>>(AsyncGetAllStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetAllStatusResponse>> PrepareAsyncGetAllStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetAllStatusResponse>>(PrepareAsyncGetAllStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRuinInfo(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest& request, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>> AsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>>(AsyncGetRuinInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>> PrepareAsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>>(PrepareAsyncGetRuinInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetEvents(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest& request, ::city::comm::interaction::gateway::v1::GetEventsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetEventsResponse>> AsyncGetEvents(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetEventsResponse>>(AsyncGetEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetEventsResponse>> PrepareAsyncGetEvents(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetEventsResponse>>(PrepareAsyncGetEventsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SetGatewayPowerStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetGatewayPowerStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetGatewayRuinStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetGatewayRuinStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAllStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* request, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* request, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRuinInfo(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* request, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRuinInfo(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* request, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetEvents(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest* request, ::city::comm::interaction::gateway::v1::GetEventsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEvents(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest* request, ::city::comm::interaction::gateway::v1::GetEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>* AsyncSetGatewayPowerStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>* PrepareAsyncSetGatewayPowerStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>* AsyncSetGatewayRuinStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>* PrepareAsyncSetGatewayRuinStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetAllStatusResponse>* AsyncGetAllStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetAllStatusResponse>* PrepareAsyncGetAllStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>* AsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>* PrepareAsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetEventsResponse>* AsyncGetEventsRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::comm::interaction::gateway::v1::GetEventsResponse>* PrepareAsyncGetEventsRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetGatewayPowerStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest& request, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>> AsyncSetGatewayPowerStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>>(AsyncSetGatewayPowerStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>> PrepareAsyncSetGatewayPowerStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>>(PrepareAsyncSetGatewayPowerStatusRaw(context, request, cq));
    }
    ::grpc::Status SetGatewayRuinStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest& request, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>> AsyncSetGatewayRuinStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>>(AsyncSetGatewayRuinStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>> PrepareAsyncSetGatewayRuinStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>>(PrepareAsyncSetGatewayRuinStatusRaw(context, request, cq));
    }
    ::grpc::Status GetAllStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest& request, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetAllStatusResponse>> AsyncGetAllStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetAllStatusResponse>>(AsyncGetAllStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetAllStatusResponse>> PrepareAsyncGetAllStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetAllStatusResponse>>(PrepareAsyncGetAllStatusRaw(context, request, cq));
    }
    ::grpc::Status GetRuinInfo(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest& request, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>> AsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>>(AsyncGetRuinInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>> PrepareAsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>>(PrepareAsyncGetRuinInfoRaw(context, request, cq));
    }
    ::grpc::Status GetEvents(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest& request, ::city::comm::interaction::gateway::v1::GetEventsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetEventsResponse>> AsyncGetEvents(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetEventsResponse>>(AsyncGetEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetEventsResponse>> PrepareAsyncGetEvents(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetEventsResponse>>(PrepareAsyncGetEventsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetGatewayPowerStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void SetGatewayPowerStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetGatewayRuinStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void SetGatewayRuinStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* request, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAllStatus(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* request, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRuinInfo(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* request, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRuinInfo(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* request, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetEvents(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest* request, ::city::comm::interaction::gateway::v1::GetEventsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEvents(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest* request, ::city::comm::interaction::gateway::v1::GetEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>* AsyncSetGatewayPowerStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>* PrepareAsyncSetGatewayPowerStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>* AsyncSetGatewayRuinStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>* PrepareAsyncSetGatewayRuinStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetAllStatusResponse>* AsyncGetAllStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetAllStatusResponse>* PrepareAsyncGetAllStatusRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>* AsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>* PrepareAsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetEventsResponse>* AsyncGetEventsRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::comm::interaction::gateway::v1::GetEventsResponse>* PrepareAsyncGetEventsRaw(::grpc::ClientContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetGatewayPowerStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_SetGatewayRuinStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRuinInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEvents_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SetGatewayPowerStatus(::grpc::ServerContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* response);
    virtual ::grpc::Status SetGatewayRuinStatus(::grpc::ServerContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* response);
    virtual ::grpc::Status GetAllStatus(::grpc::ServerContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* request, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* response);
    virtual ::grpc::Status GetRuinInfo(::grpc::ServerContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* request, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* response);
    virtual ::grpc::Status GetEvents(::grpc::ServerContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest* request, ::city::comm::interaction::gateway::v1::GetEventsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetGatewayPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetGatewayPowerStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetGatewayPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGatewayPowerStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetGatewayPowerStatus(::grpc::ServerContext* context, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetGatewayRuinStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetGatewayRuinStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetGatewayRuinStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGatewayRuinStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetGatewayRuinStatus(::grpc::ServerContext* context, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetAllStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllStatus(::grpc::ServerContext* context, ::city::comm::interaction::gateway::v1::GetAllStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::comm::interaction::gateway::v1::GetAllStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRuinInfo(::grpc::ServerContext* context, ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEvents() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetEventsRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEvents(::grpc::ServerContext* context, ::city::comm::interaction::gateway::v1::GetEventsRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::comm::interaction::gateway::v1::GetEventsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetGatewayPowerStatus<WithAsyncMethod_SetGatewayRuinStatus<WithAsyncMethod_GetAllStatus<WithAsyncMethod_GetRuinInfo<WithAsyncMethod_GetEvents<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetGatewayPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetGatewayPowerStatus() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* response) { return this->SetGatewayPowerStatus(context, request, response); }));}
    void SetMessageAllocatorFor_SetGatewayPowerStatus(
        ::grpc::MessageAllocator< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetGatewayPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGatewayPowerStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetGatewayPowerStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetGatewayRuinStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetGatewayRuinStatus() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* request, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* response) { return this->SetGatewayRuinStatus(context, request, response); }));}
    void SetMessageAllocatorFor_SetGatewayRuinStatus(
        ::grpc::MessageAllocator< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetGatewayRuinStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGatewayRuinStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetGatewayRuinStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllStatus() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::city::comm::interaction::gateway::v1::GetAllStatusRequest, ::city::comm::interaction::gateway::v1::GetAllStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* request, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* response) { return this->GetAllStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllStatus(
        ::grpc::MessageAllocator< ::city::comm::interaction::gateway::v1::GetAllStatusRequest, ::city::comm::interaction::gateway::v1::GetAllStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::comm::interaction::gateway::v1::GetAllStatusRequest, ::city::comm::interaction::gateway::v1::GetAllStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::city::comm::interaction::gateway::v1::GetRuinInfoRequest, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* request, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* response) { return this->GetRuinInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetRuinInfo(
        ::grpc::MessageAllocator< ::city::comm::interaction::gateway::v1::GetRuinInfoRequest, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::comm::interaction::gateway::v1::GetRuinInfoRequest, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRuinInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEvents() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::city::comm::interaction::gateway::v1::GetEventsRequest, ::city::comm::interaction::gateway::v1::GetEventsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::comm::interaction::gateway::v1::GetEventsRequest* request, ::city::comm::interaction::gateway::v1::GetEventsResponse* response) { return this->GetEvents(context, request, response); }));}
    void SetMessageAllocatorFor_GetEvents(
        ::grpc::MessageAllocator< ::city::comm::interaction::gateway::v1::GetEventsRequest, ::city::comm::interaction::gateway::v1::GetEventsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::comm::interaction::gateway::v1::GetEventsRequest, ::city::comm::interaction::gateway::v1::GetEventsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetEventsRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetEventsRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetEventsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetGatewayPowerStatus<WithCallbackMethod_SetGatewayRuinStatus<WithCallbackMethod_GetAllStatus<WithCallbackMethod_GetRuinInfo<WithCallbackMethod_GetEvents<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetGatewayPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetGatewayPowerStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetGatewayPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGatewayPowerStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetGatewayRuinStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetGatewayRuinStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetGatewayRuinStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGatewayRuinStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetAllStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEvents() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetEventsRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetGatewayPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetGatewayPowerStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetGatewayPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGatewayPowerStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetGatewayPowerStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetGatewayRuinStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetGatewayRuinStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetGatewayRuinStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGatewayRuinStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetGatewayRuinStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetAllStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRuinInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEvents() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetEventsRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetGatewayPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetGatewayPowerStatus() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetGatewayPowerStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetGatewayPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGatewayPowerStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetGatewayPowerStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetGatewayRuinStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetGatewayRuinStatus() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetGatewayRuinStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetGatewayRuinStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGatewayRuinStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetGatewayRuinStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllStatus() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRuinInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRuinInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEvents() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEvents(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetEventsRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetGatewayPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetGatewayPowerStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>* streamer) {
                       return this->StreamedSetGatewayPowerStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetGatewayPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetGatewayPowerStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetGatewayPowerStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::comm::interaction::gateway::v1::SetGatewayPowerStatusRequest,::city::comm::interaction::gateway::v1::SetGatewayPowerStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetGatewayRuinStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetGatewayRuinStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>* streamer) {
                       return this->StreamedSetGatewayRuinStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetGatewayRuinStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetGatewayRuinStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetGatewayRuinStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::comm::interaction::gateway::v1::SetGatewayRuinStatusRequest,::city::comm::interaction::gateway::v1::SetGatewayRuinStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::comm::interaction::gateway::v1::GetAllStatusRequest, ::city::comm::interaction::gateway::v1::GetAllStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::comm::interaction::gateway::v1::GetAllStatusRequest, ::city::comm::interaction::gateway::v1::GetAllStatusResponse>* streamer) {
                       return this->StreamedGetAllStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllStatus(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetAllStatusRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetAllStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::comm::interaction::gateway::v1::GetAllStatusRequest,::city::comm::interaction::gateway::v1::GetAllStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::comm::interaction::gateway::v1::GetRuinInfoRequest, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::comm::interaction::gateway::v1::GetRuinInfoRequest, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse>* streamer) {
                       return this->StreamedGetRuinInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetRuinInfoRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRuinInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::comm::interaction::gateway::v1::GetRuinInfoRequest,::city::comm::interaction::gateway::v1::GetRuinInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEvents() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::comm::interaction::gateway::v1::GetEventsRequest, ::city::comm::interaction::gateway::v1::GetEventsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::comm::interaction::gateway::v1::GetEventsRequest, ::city::comm::interaction::gateway::v1::GetEventsResponse>* streamer) {
                       return this->StreamedGetEvents(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::city::comm::interaction::gateway::v1::GetEventsRequest* /*request*/, ::city::comm::interaction::gateway::v1::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::comm::interaction::gateway::v1::GetEventsRequest,::city::comm::interaction::gateway::v1::GetEventsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetGatewayPowerStatus<WithStreamedUnaryMethod_SetGatewayRuinStatus<WithStreamedUnaryMethod_GetAllStatus<WithStreamedUnaryMethod_GetRuinInfo<WithStreamedUnaryMethod_GetEvents<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetGatewayPowerStatus<WithStreamedUnaryMethod_SetGatewayRuinStatus<WithStreamedUnaryMethod_GetAllStatus<WithStreamedUnaryMethod_GetRuinInfo<WithStreamedUnaryMethod_GetEvents<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace gateway
}  // namespace interaction
}  // namespace comm
}  // namespace city


#endif  // GRPC_city_2fcomm_2finteraction_2fgateway_2fv1_2fgateway_5fservice_2eproto__INCLUDED
