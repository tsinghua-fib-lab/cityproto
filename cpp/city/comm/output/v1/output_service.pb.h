// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/comm/output/v1/output_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fcomm_2foutput_2fv1_2foutput_5fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_city_2fcomm_2foutput_2fv1_2foutput_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "city/comm/output/v1/output.pb.h"
#include "city/event/v1/event.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_city_2fcomm_2foutput_2fv1_2foutput_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fcomm_2foutput_2fv1_2foutput_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_city_2fcomm_2foutput_2fv1_2foutput_5fservice_2eproto;
namespace city {
namespace comm {
namespace output {
namespace v1 {
class OutputRequest;
struct OutputRequestDefaultTypeInternal;
extern OutputRequestDefaultTypeInternal _OutputRequest_default_instance_;
class OutputResponse;
struct OutputResponseDefaultTypeInternal;
extern OutputResponseDefaultTypeInternal _OutputResponse_default_instance_;
}  // namespace v1
}  // namespace output
}  // namespace comm
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace city {
namespace comm {
namespace output {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class OutputRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.comm.output.v1.OutputRequest) */ {
 public:
  inline OutputRequest() : OutputRequest(nullptr) {}
  ~OutputRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OutputRequest(::google::protobuf::internal::ConstantInitialized);

  OutputRequest(const OutputRequest& from);
  OutputRequest(OutputRequest&& from) noexcept
    : OutputRequest() {
    *this = ::std::move(from);
  }

  inline OutputRequest& operator=(const OutputRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputRequest& operator=(OutputRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputRequest* internal_default_instance() {
    return reinterpret_cast<const OutputRequest*>(
               &_OutputRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OutputRequest& a, OutputRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OutputRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const OutputRequest& from) {
    OutputRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.comm.output.v1.OutputRequest";
  }
  protected:
  explicit OutputRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 2,
    kBaseStationsFieldNumber = 3,
    kPersonsFieldNumber = 5,
    kAoisFieldNumber = 6,
    kSignalHeatmapFieldNumber = 4,
    kEventsFieldNumber = 7,
    kStatisticsFieldNumber = 8,
    kSmallSignalHeatmapFieldNumber = 9,
    kStepFieldNumber = 1,
  };
  // repeated .city.comm.output.v1.Node nodes = 2 [json_name = "nodes"];
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;

  public:
  void clear_nodes() ;
  ::city::comm::output::v1::Node* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::Node >*
      mutable_nodes();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::Node>& _internal_nodes() const;
  ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::Node>* _internal_mutable_nodes();
  public:
  const ::city::comm::output::v1::Node& nodes(int index) const;
  ::city::comm::output::v1::Node* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::Node >&
      nodes() const;
  // repeated .city.comm.output.v1.BaseStation base_stations = 3 [json_name = "baseStations"];
  int base_stations_size() const;
  private:
  int _internal_base_stations_size() const;

  public:
  void clear_base_stations() ;
  ::city::comm::output::v1::BaseStation* mutable_base_stations(int index);
  ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::BaseStation >*
      mutable_base_stations();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::BaseStation>& _internal_base_stations() const;
  ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::BaseStation>* _internal_mutable_base_stations();
  public:
  const ::city::comm::output::v1::BaseStation& base_stations(int index) const;
  ::city::comm::output::v1::BaseStation* add_base_stations();
  const ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::BaseStation >&
      base_stations() const;
  // repeated .city.comm.output.v1.Person persons = 5 [json_name = "persons"];
  int persons_size() const;
  private:
  int _internal_persons_size() const;

  public:
  void clear_persons() ;
  ::city::comm::output::v1::Person* mutable_persons(int index);
  ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::Person >*
      mutable_persons();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::Person>& _internal_persons() const;
  ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::Person>* _internal_mutable_persons();
  public:
  const ::city::comm::output::v1::Person& persons(int index) const;
  ::city::comm::output::v1::Person* add_persons();
  const ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::Person >&
      persons() const;
  // repeated .city.comm.output.v1.Aoi aois = 6 [json_name = "aois"];
  int aois_size() const;
  private:
  int _internal_aois_size() const;

  public:
  void clear_aois() ;
  ::city::comm::output::v1::Aoi* mutable_aois(int index);
  ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::Aoi >*
      mutable_aois();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::Aoi>& _internal_aois() const;
  ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::Aoi>* _internal_mutable_aois();
  public:
  const ::city::comm::output::v1::Aoi& aois(int index) const;
  ::city::comm::output::v1::Aoi* add_aois();
  const ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::Aoi >&
      aois() const;
  // .city.comm.output.v1.Signal signal_heatmap = 4 [json_name = "signalHeatmap"];
  bool has_signal_heatmap() const;
  void clear_signal_heatmap() ;
  const ::city::comm::output::v1::Signal& signal_heatmap() const;
  PROTOBUF_NODISCARD ::city::comm::output::v1::Signal* release_signal_heatmap();
  ::city::comm::output::v1::Signal* mutable_signal_heatmap();
  void set_allocated_signal_heatmap(::city::comm::output::v1::Signal* value);
  void unsafe_arena_set_allocated_signal_heatmap(::city::comm::output::v1::Signal* value);
  ::city::comm::output::v1::Signal* unsafe_arena_release_signal_heatmap();

  private:
  const ::city::comm::output::v1::Signal& _internal_signal_heatmap() const;
  ::city::comm::output::v1::Signal* _internal_mutable_signal_heatmap();

  public:
  // .city.event.v1.Events events = 7 [json_name = "events"];
  bool has_events() const;
  void clear_events() ;
  const ::city::event::v1::Events& events() const;
  PROTOBUF_NODISCARD ::city::event::v1::Events* release_events();
  ::city::event::v1::Events* mutable_events();
  void set_allocated_events(::city::event::v1::Events* value);
  void unsafe_arena_set_allocated_events(::city::event::v1::Events* value);
  ::city::event::v1::Events* unsafe_arena_release_events();

  private:
  const ::city::event::v1::Events& _internal_events() const;
  ::city::event::v1::Events* _internal_mutable_events();

  public:
  // .city.comm.output.v1.Statistics statistics = 8 [json_name = "statistics"];
  bool has_statistics() const;
  void clear_statistics() ;
  const ::city::comm::output::v1::Statistics& statistics() const;
  PROTOBUF_NODISCARD ::city::comm::output::v1::Statistics* release_statistics();
  ::city::comm::output::v1::Statistics* mutable_statistics();
  void set_allocated_statistics(::city::comm::output::v1::Statistics* value);
  void unsafe_arena_set_allocated_statistics(::city::comm::output::v1::Statistics* value);
  ::city::comm::output::v1::Statistics* unsafe_arena_release_statistics();

  private:
  const ::city::comm::output::v1::Statistics& _internal_statistics() const;
  ::city::comm::output::v1::Statistics* _internal_mutable_statistics();

  public:
  // .city.comm.output.v1.Signal small_signal_heatmap = 9 [json_name = "smallSignalHeatmap"];
  bool has_small_signal_heatmap() const;
  void clear_small_signal_heatmap() ;
  const ::city::comm::output::v1::Signal& small_signal_heatmap() const;
  PROTOBUF_NODISCARD ::city::comm::output::v1::Signal* release_small_signal_heatmap();
  ::city::comm::output::v1::Signal* mutable_small_signal_heatmap();
  void set_allocated_small_signal_heatmap(::city::comm::output::v1::Signal* value);
  void unsafe_arena_set_allocated_small_signal_heatmap(::city::comm::output::v1::Signal* value);
  ::city::comm::output::v1::Signal* unsafe_arena_release_small_signal_heatmap();

  private:
  const ::city::comm::output::v1::Signal& _internal_small_signal_heatmap() const;
  ::city::comm::output::v1::Signal* _internal_mutable_small_signal_heatmap();

  public:
  // int32 step = 1 [json_name = "step"];
  void clear_step() ;
  ::int32_t step() const;
  void set_step(::int32_t value);

  private:
  ::int32_t _internal_step() const;
  void _internal_set_step(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.comm.output.v1.OutputRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 9, 8, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::Node > nodes_;
    ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::BaseStation > base_stations_;
    ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::Person > persons_;
    ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::Aoi > aois_;
    ::city::comm::output::v1::Signal* signal_heatmap_;
    ::city::event::v1::Events* events_;
    ::city::comm::output::v1::Statistics* statistics_;
    ::city::comm::output::v1::Signal* small_signal_heatmap_;
    ::int32_t step_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcomm_2foutput_2fv1_2foutput_5fservice_2eproto;
};// -------------------------------------------------------------------

class OutputResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.comm.output.v1.OutputResponse) */ {
 public:
  inline OutputResponse() : OutputResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OutputResponse(::google::protobuf::internal::ConstantInitialized);

  OutputResponse(const OutputResponse& from);
  OutputResponse(OutputResponse&& from) noexcept
    : OutputResponse() {
    *this = ::std::move(from);
  }

  inline OutputResponse& operator=(const OutputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputResponse& operator=(OutputResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputResponse* internal_default_instance() {
    return reinterpret_cast<const OutputResponse*>(
               &_OutputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OutputResponse& a, OutputResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OutputResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OutputResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.comm.output.v1.OutputResponse";
  }
  protected:
  explicit OutputResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.comm.output.v1.OutputResponse)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_city_2fcomm_2foutput_2fv1_2foutput_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OutputRequest

// int32 step = 1 [json_name = "step"];
inline void OutputRequest::clear_step() {
  _impl_.step_ = 0;
}
inline ::int32_t OutputRequest::step() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.OutputRequest.step)
  return _internal_step();
}
inline void OutputRequest::set_step(::int32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.OutputRequest.step)
}
inline ::int32_t OutputRequest::_internal_step() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.step_;
}
inline void OutputRequest::_internal_set_step(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.step_ = value;
}

// repeated .city.comm.output.v1.Node nodes = 2 [json_name = "nodes"];
inline int OutputRequest::_internal_nodes_size() const {
  return _internal_nodes().size();
}
inline int OutputRequest::nodes_size() const {
  return _internal_nodes_size();
}
inline ::city::comm::output::v1::Node* OutputRequest::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:city.comm.output.v1.OutputRequest.nodes)
  return _internal_mutable_nodes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::Node >*
OutputRequest::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:city.comm.output.v1.OutputRequest.nodes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_nodes();
}
inline const ::city::comm::output::v1::Node& OutputRequest::nodes(int index) const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.OutputRequest.nodes)
    return _internal_nodes().Get(index);
}
inline ::city::comm::output::v1::Node* OutputRequest::add_nodes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::comm::output::v1::Node* _add = _internal_mutable_nodes()->Add();
  // @@protoc_insertion_point(field_add:city.comm.output.v1.OutputRequest.nodes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::Node >&
OutputRequest::nodes() const {
  // @@protoc_insertion_point(field_list:city.comm.output.v1.OutputRequest.nodes)
  return _internal_nodes();
}
inline const ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::Node>&
OutputRequest::_internal_nodes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nodes_;
}
inline ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::Node>*
OutputRequest::_internal_mutable_nodes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.nodes_;
}

// repeated .city.comm.output.v1.BaseStation base_stations = 3 [json_name = "baseStations"];
inline int OutputRequest::_internal_base_stations_size() const {
  return _internal_base_stations().size();
}
inline int OutputRequest::base_stations_size() const {
  return _internal_base_stations_size();
}
inline ::city::comm::output::v1::BaseStation* OutputRequest::mutable_base_stations(int index) {
  // @@protoc_insertion_point(field_mutable:city.comm.output.v1.OutputRequest.base_stations)
  return _internal_mutable_base_stations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::BaseStation >*
OutputRequest::mutable_base_stations() {
  // @@protoc_insertion_point(field_mutable_list:city.comm.output.v1.OutputRequest.base_stations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_base_stations();
}
inline const ::city::comm::output::v1::BaseStation& OutputRequest::base_stations(int index) const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.OutputRequest.base_stations)
    return _internal_base_stations().Get(index);
}
inline ::city::comm::output::v1::BaseStation* OutputRequest::add_base_stations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::comm::output::v1::BaseStation* _add = _internal_mutable_base_stations()->Add();
  // @@protoc_insertion_point(field_add:city.comm.output.v1.OutputRequest.base_stations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::BaseStation >&
OutputRequest::base_stations() const {
  // @@protoc_insertion_point(field_list:city.comm.output.v1.OutputRequest.base_stations)
  return _internal_base_stations();
}
inline const ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::BaseStation>&
OutputRequest::_internal_base_stations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.base_stations_;
}
inline ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::BaseStation>*
OutputRequest::_internal_mutable_base_stations() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.base_stations_;
}

// .city.comm.output.v1.Signal signal_heatmap = 4 [json_name = "signalHeatmap"];
inline bool OutputRequest::has_signal_heatmap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signal_heatmap_ != nullptr);
  return value;
}
inline const ::city::comm::output::v1::Signal& OutputRequest::_internal_signal_heatmap() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::comm::output::v1::Signal* p = _impl_.signal_heatmap_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::comm::output::v1::Signal&>(::city::comm::output::v1::_Signal_default_instance_);
}
inline const ::city::comm::output::v1::Signal& OutputRequest::signal_heatmap() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.OutputRequest.signal_heatmap)
  return _internal_signal_heatmap();
}
inline void OutputRequest::unsafe_arena_set_allocated_signal_heatmap(::city::comm::output::v1::Signal* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signal_heatmap_);
  }
  _impl_.signal_heatmap_ = reinterpret_cast<::city::comm::output::v1::Signal*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.comm.output.v1.OutputRequest.signal_heatmap)
}
inline ::city::comm::output::v1::Signal* OutputRequest::release_signal_heatmap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::comm::output::v1::Signal* released = _impl_.signal_heatmap_;
  _impl_.signal_heatmap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::comm::output::v1::Signal* OutputRequest::unsafe_arena_release_signal_heatmap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.comm.output.v1.OutputRequest.signal_heatmap)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::comm::output::v1::Signal* temp = _impl_.signal_heatmap_;
  _impl_.signal_heatmap_ = nullptr;
  return temp;
}
inline ::city::comm::output::v1::Signal* OutputRequest::_internal_mutable_signal_heatmap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.signal_heatmap_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::comm::output::v1::Signal>(GetArenaForAllocation());
    _impl_.signal_heatmap_ = reinterpret_cast<::city::comm::output::v1::Signal*>(p);
  }
  return _impl_.signal_heatmap_;
}
inline ::city::comm::output::v1::Signal* OutputRequest::mutable_signal_heatmap() {
  ::city::comm::output::v1::Signal* _msg = _internal_mutable_signal_heatmap();
  // @@protoc_insertion_point(field_mutable:city.comm.output.v1.OutputRequest.signal_heatmap)
  return _msg;
}
inline void OutputRequest::set_allocated_signal_heatmap(::city::comm::output::v1::Signal* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signal_heatmap_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.signal_heatmap_ = reinterpret_cast<::city::comm::output::v1::Signal*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.comm.output.v1.OutputRequest.signal_heatmap)
}

// .city.comm.output.v1.Signal small_signal_heatmap = 9 [json_name = "smallSignalHeatmap"];
inline bool OutputRequest::has_small_signal_heatmap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.small_signal_heatmap_ != nullptr);
  return value;
}
inline const ::city::comm::output::v1::Signal& OutputRequest::_internal_small_signal_heatmap() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::comm::output::v1::Signal* p = _impl_.small_signal_heatmap_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::comm::output::v1::Signal&>(::city::comm::output::v1::_Signal_default_instance_);
}
inline const ::city::comm::output::v1::Signal& OutputRequest::small_signal_heatmap() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.OutputRequest.small_signal_heatmap)
  return _internal_small_signal_heatmap();
}
inline void OutputRequest::unsafe_arena_set_allocated_small_signal_heatmap(::city::comm::output::v1::Signal* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.small_signal_heatmap_);
  }
  _impl_.small_signal_heatmap_ = reinterpret_cast<::city::comm::output::v1::Signal*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.comm.output.v1.OutputRequest.small_signal_heatmap)
}
inline ::city::comm::output::v1::Signal* OutputRequest::release_small_signal_heatmap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::city::comm::output::v1::Signal* released = _impl_.small_signal_heatmap_;
  _impl_.small_signal_heatmap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::comm::output::v1::Signal* OutputRequest::unsafe_arena_release_small_signal_heatmap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.comm.output.v1.OutputRequest.small_signal_heatmap)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::city::comm::output::v1::Signal* temp = _impl_.small_signal_heatmap_;
  _impl_.small_signal_heatmap_ = nullptr;
  return temp;
}
inline ::city::comm::output::v1::Signal* OutputRequest::_internal_mutable_small_signal_heatmap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.small_signal_heatmap_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::comm::output::v1::Signal>(GetArenaForAllocation());
    _impl_.small_signal_heatmap_ = reinterpret_cast<::city::comm::output::v1::Signal*>(p);
  }
  return _impl_.small_signal_heatmap_;
}
inline ::city::comm::output::v1::Signal* OutputRequest::mutable_small_signal_heatmap() {
  ::city::comm::output::v1::Signal* _msg = _internal_mutable_small_signal_heatmap();
  // @@protoc_insertion_point(field_mutable:city.comm.output.v1.OutputRequest.small_signal_heatmap)
  return _msg;
}
inline void OutputRequest::set_allocated_small_signal_heatmap(::city::comm::output::v1::Signal* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.small_signal_heatmap_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.small_signal_heatmap_ = reinterpret_cast<::city::comm::output::v1::Signal*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.comm.output.v1.OutputRequest.small_signal_heatmap)
}

// repeated .city.comm.output.v1.Person persons = 5 [json_name = "persons"];
inline int OutputRequest::_internal_persons_size() const {
  return _internal_persons().size();
}
inline int OutputRequest::persons_size() const {
  return _internal_persons_size();
}
inline ::city::comm::output::v1::Person* OutputRequest::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:city.comm.output.v1.OutputRequest.persons)
  return _internal_mutable_persons()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::Person >*
OutputRequest::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:city.comm.output.v1.OutputRequest.persons)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_persons();
}
inline const ::city::comm::output::v1::Person& OutputRequest::persons(int index) const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.OutputRequest.persons)
    return _internal_persons().Get(index);
}
inline ::city::comm::output::v1::Person* OutputRequest::add_persons() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::comm::output::v1::Person* _add = _internal_mutable_persons()->Add();
  // @@protoc_insertion_point(field_add:city.comm.output.v1.OutputRequest.persons)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::Person >&
OutputRequest::persons() const {
  // @@protoc_insertion_point(field_list:city.comm.output.v1.OutputRequest.persons)
  return _internal_persons();
}
inline const ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::Person>&
OutputRequest::_internal_persons() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.persons_;
}
inline ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::Person>*
OutputRequest::_internal_mutable_persons() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.persons_;
}

// repeated .city.comm.output.v1.Aoi aois = 6 [json_name = "aois"];
inline int OutputRequest::_internal_aois_size() const {
  return _internal_aois().size();
}
inline int OutputRequest::aois_size() const {
  return _internal_aois_size();
}
inline ::city::comm::output::v1::Aoi* OutputRequest::mutable_aois(int index) {
  // @@protoc_insertion_point(field_mutable:city.comm.output.v1.OutputRequest.aois)
  return _internal_mutable_aois()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::Aoi >*
OutputRequest::mutable_aois() {
  // @@protoc_insertion_point(field_mutable_list:city.comm.output.v1.OutputRequest.aois)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_aois();
}
inline const ::city::comm::output::v1::Aoi& OutputRequest::aois(int index) const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.OutputRequest.aois)
    return _internal_aois().Get(index);
}
inline ::city::comm::output::v1::Aoi* OutputRequest::add_aois() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::comm::output::v1::Aoi* _add = _internal_mutable_aois()->Add();
  // @@protoc_insertion_point(field_add:city.comm.output.v1.OutputRequest.aois)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::comm::output::v1::Aoi >&
OutputRequest::aois() const {
  // @@protoc_insertion_point(field_list:city.comm.output.v1.OutputRequest.aois)
  return _internal_aois();
}
inline const ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::Aoi>&
OutputRequest::_internal_aois() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aois_;
}
inline ::google::protobuf::RepeatedPtrField<::city::comm::output::v1::Aoi>*
OutputRequest::_internal_mutable_aois() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.aois_;
}

// .city.event.v1.Events events = 7 [json_name = "events"];
inline bool OutputRequest::has_events() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.events_ != nullptr);
  return value;
}
inline const ::city::event::v1::Events& OutputRequest::_internal_events() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::event::v1::Events* p = _impl_.events_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::event::v1::Events&>(::city::event::v1::_Events_default_instance_);
}
inline const ::city::event::v1::Events& OutputRequest::events() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.OutputRequest.events)
  return _internal_events();
}
inline void OutputRequest::unsafe_arena_set_allocated_events(::city::event::v1::Events* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.events_);
  }
  _impl_.events_ = reinterpret_cast<::city::event::v1::Events*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.comm.output.v1.OutputRequest.events)
}
inline ::city::event::v1::Events* OutputRequest::release_events() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::event::v1::Events* released = _impl_.events_;
  _impl_.events_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::event::v1::Events* OutputRequest::unsafe_arena_release_events() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.comm.output.v1.OutputRequest.events)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::event::v1::Events* temp = _impl_.events_;
  _impl_.events_ = nullptr;
  return temp;
}
inline ::city::event::v1::Events* OutputRequest::_internal_mutable_events() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.events_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::event::v1::Events>(GetArenaForAllocation());
    _impl_.events_ = reinterpret_cast<::city::event::v1::Events*>(p);
  }
  return _impl_.events_;
}
inline ::city::event::v1::Events* OutputRequest::mutable_events() {
  ::city::event::v1::Events* _msg = _internal_mutable_events();
  // @@protoc_insertion_point(field_mutable:city.comm.output.v1.OutputRequest.events)
  return _msg;
}
inline void OutputRequest::set_allocated_events(::city::event::v1::Events* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.events_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.events_ = reinterpret_cast<::city::event::v1::Events*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.comm.output.v1.OutputRequest.events)
}

// .city.comm.output.v1.Statistics statistics = 8 [json_name = "statistics"];
inline bool OutputRequest::has_statistics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.statistics_ != nullptr);
  return value;
}
inline const ::city::comm::output::v1::Statistics& OutputRequest::_internal_statistics() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::comm::output::v1::Statistics* p = _impl_.statistics_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::comm::output::v1::Statistics&>(::city::comm::output::v1::_Statistics_default_instance_);
}
inline const ::city::comm::output::v1::Statistics& OutputRequest::statistics() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.OutputRequest.statistics)
  return _internal_statistics();
}
inline void OutputRequest::unsafe_arena_set_allocated_statistics(::city::comm::output::v1::Statistics* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.statistics_);
  }
  _impl_.statistics_ = reinterpret_cast<::city::comm::output::v1::Statistics*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.comm.output.v1.OutputRequest.statistics)
}
inline ::city::comm::output::v1::Statistics* OutputRequest::release_statistics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::comm::output::v1::Statistics* released = _impl_.statistics_;
  _impl_.statistics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::comm::output::v1::Statistics* OutputRequest::unsafe_arena_release_statistics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.comm.output.v1.OutputRequest.statistics)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::comm::output::v1::Statistics* temp = _impl_.statistics_;
  _impl_.statistics_ = nullptr;
  return temp;
}
inline ::city::comm::output::v1::Statistics* OutputRequest::_internal_mutable_statistics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.statistics_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::comm::output::v1::Statistics>(GetArenaForAllocation());
    _impl_.statistics_ = reinterpret_cast<::city::comm::output::v1::Statistics*>(p);
  }
  return _impl_.statistics_;
}
inline ::city::comm::output::v1::Statistics* OutputRequest::mutable_statistics() {
  ::city::comm::output::v1::Statistics* _msg = _internal_mutable_statistics();
  // @@protoc_insertion_point(field_mutable:city.comm.output.v1.OutputRequest.statistics)
  return _msg;
}
inline void OutputRequest::set_allocated_statistics(::city::comm::output::v1::Statistics* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.statistics_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.statistics_ = reinterpret_cast<::city::comm::output::v1::Statistics*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.comm.output.v1.OutputRequest.statistics)
}

// -------------------------------------------------------------------

// OutputResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace output
}  // namespace comm
}  // namespace city


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_city_2fcomm_2foutput_2fv1_2foutput_5fservice_2eproto_2epb_2eh
