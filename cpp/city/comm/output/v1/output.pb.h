// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/comm/output/v1/output.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fcomm_2foutput_2fv1_2foutput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fcomm_2foutput_2fv1_2foutput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fcomm_2foutput_2fv1_2foutput_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fcomm_2foutput_2fv1_2foutput_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fcomm_2foutput_2fv1_2foutput_2eproto;
namespace city {
namespace comm {
namespace output {
namespace v1 {
class Aoi;
struct AoiDefaultTypeInternal;
extern AoiDefaultTypeInternal _Aoi_default_instance_;
class BaseStation;
struct BaseStationDefaultTypeInternal;
extern BaseStationDefaultTypeInternal _BaseStation_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Person;
struct PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
class Signal;
struct SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
class Statistics;
struct StatisticsDefaultTypeInternal;
extern StatisticsDefaultTypeInternal _Statistics_default_instance_;
}  // namespace v1
}  // namespace output
}  // namespace comm
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::comm::output::v1::Aoi* Arena::CreateMaybeMessage<::city::comm::output::v1::Aoi>(Arena*);
template<> ::city::comm::output::v1::BaseStation* Arena::CreateMaybeMessage<::city::comm::output::v1::BaseStation>(Arena*);
template<> ::city::comm::output::v1::Node* Arena::CreateMaybeMessage<::city::comm::output::v1::Node>(Arena*);
template<> ::city::comm::output::v1::Person* Arena::CreateMaybeMessage<::city::comm::output::v1::Person>(Arena*);
template<> ::city::comm::output::v1::Signal* Arena::CreateMaybeMessage<::city::comm::output::v1::Signal>(Arena*);
template<> ::city::comm::output::v1::Statistics* Arena::CreateMaybeMessage<::city::comm::output::v1::Statistics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace comm {
namespace output {
namespace v1 {

enum NodeStatus : int {
  NODE_STATUS_UNSPECIFIED = 0,
  NODE_STATUS_OK = 1,
  NODE_STATUS_BATTERY = 2,
  NODE_STATUS_FAILURE = 3,
  NODE_STATUS_RUINED = 4,
  NodeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NodeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NodeStatus_IsValid(int value);
constexpr NodeStatus NodeStatus_MIN = NODE_STATUS_UNSPECIFIED;
constexpr NodeStatus NodeStatus_MAX = NODE_STATUS_RUINED;
constexpr int NodeStatus_ARRAYSIZE = NodeStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeStatus_descriptor();
template<typename T>
inline const std::string& NodeStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeStatus_descriptor(), enum_t_value);
}
inline bool NodeStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NodeStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeStatus>(
    NodeStatus_descriptor(), name, value);
}
enum PersonConnectStatus : int {
  PERSON_CONNECT_STATUS_UNSPECIFIED = 0,
  PERSON_CONNECT_STATUS_OK = 1,
  PERSON_CONNECT_STATUS_OUTAGE = 2,
  PersonConnectStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PersonConnectStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PersonConnectStatus_IsValid(int value);
constexpr PersonConnectStatus PersonConnectStatus_MIN = PERSON_CONNECT_STATUS_UNSPECIFIED;
constexpr PersonConnectStatus PersonConnectStatus_MAX = PERSON_CONNECT_STATUS_OUTAGE;
constexpr int PersonConnectStatus_ARRAYSIZE = PersonConnectStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PersonConnectStatus_descriptor();
template<typename T>
inline const std::string& PersonConnectStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PersonConnectStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PersonConnectStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PersonConnectStatus_descriptor(), enum_t_value);
}
inline bool PersonConnectStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PersonConnectStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PersonConnectStatus>(
    PersonConnectStatus_descriptor(), name, value);
}
enum PersonDemandStatus : int {
  PERSON_DEMAND_STATUS_UNSPECIFIED = 0,
  PERSON_DEMAND_STATUS_SATISFIED = 1,
  PERSON_DEMAND_STATUS_UNSATISFIED = 2,
  PERSON_DEMAND_STATUS_NO = 3,
  PersonDemandStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PersonDemandStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PersonDemandStatus_IsValid(int value);
constexpr PersonDemandStatus PersonDemandStatus_MIN = PERSON_DEMAND_STATUS_UNSPECIFIED;
constexpr PersonDemandStatus PersonDemandStatus_MAX = PERSON_DEMAND_STATUS_NO;
constexpr int PersonDemandStatus_ARRAYSIZE = PersonDemandStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PersonDemandStatus_descriptor();
template<typename T>
inline const std::string& PersonDemandStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PersonDemandStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PersonDemandStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PersonDemandStatus_descriptor(), enum_t_value);
}
inline bool PersonDemandStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PersonDemandStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PersonDemandStatus>(
    PersonDemandStatus_descriptor(), name, value);
}
// ===================================================================

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.comm.output.v1.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit PROTOBUF_CONSTEXPR Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Node& from) {
    Node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.comm.output.v1.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kBatteryRemainingTimeFieldNumber = 3,
  };
  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .city.comm.output.v1.NodeStatus status = 2 [json_name = "status"];
  void clear_status();
  ::city::comm::output::v1::NodeStatus status() const;
  void set_status(::city::comm::output::v1::NodeStatus value);
  private:
  ::city::comm::output::v1::NodeStatus _internal_status() const;
  void _internal_set_status(::city::comm::output::v1::NodeStatus value);
  public:

  // optional double battery_remaining_time = 3 [json_name = "batteryRemainingTime"];
  bool has_battery_remaining_time() const;
  private:
  bool _internal_has_battery_remaining_time() const;
  public:
  void clear_battery_remaining_time();
  double battery_remaining_time() const;
  void set_battery_remaining_time(double value);
  private:
  double _internal_battery_remaining_time() const;
  void _internal_set_battery_remaining_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.comm.output.v1.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t id_;
    int status_;
    double battery_remaining_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcomm_2foutput_2fv1_2foutput_2eproto;
};
// -------------------------------------------------------------------

class BaseStation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.comm.output.v1.BaseStation) */ {
 public:
  inline BaseStation() : BaseStation(nullptr) {}
  ~BaseStation() override;
  explicit PROTOBUF_CONSTEXPR BaseStation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseStation(const BaseStation& from);
  BaseStation(BaseStation&& from) noexcept
    : BaseStation() {
    *this = ::std::move(from);
  }

  inline BaseStation& operator=(const BaseStation& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseStation& operator=(BaseStation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseStation& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseStation* internal_default_instance() {
    return reinterpret_cast<const BaseStation*>(
               &_BaseStation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BaseStation& a, BaseStation& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseStation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseStation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseStation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseStation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseStation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BaseStation& from) {
    BaseStation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseStation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.comm.output.v1.BaseStation";
  }
  protected:
  explicit BaseStation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDemandFlowFieldNumber = 2,
    kIdFieldNumber = 1,
    kNumAgentsFieldNumber = 4,
    kActualFlowFieldNumber = 3,
    kOverloadFieldNumber = 5,
    kUnsatisfiedNumFieldNumber = 6,
    kSatisfiedNumFieldNumber = 7,
    kOutageNumFieldNumber = 8,
    kTransmitPowerFieldNumber = 10,
    kActiveNumFieldNumber = 9,
  };
  // double demand_flow = 2 [json_name = "demandFlow"];
  void clear_demand_flow();
  double demand_flow() const;
  void set_demand_flow(double value);
  private:
  double _internal_demand_flow() const;
  void _internal_set_demand_flow(double value);
  public:

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 num_agents = 4 [json_name = "numAgents"];
  void clear_num_agents();
  int32_t num_agents() const;
  void set_num_agents(int32_t value);
  private:
  int32_t _internal_num_agents() const;
  void _internal_set_num_agents(int32_t value);
  public:

  // double actual_flow = 3 [json_name = "actualFlow"];
  void clear_actual_flow();
  double actual_flow() const;
  void set_actual_flow(double value);
  private:
  double _internal_actual_flow() const;
  void _internal_set_actual_flow(double value);
  public:

  // bool overload = 5 [json_name = "overload"];
  void clear_overload();
  bool overload() const;
  void set_overload(bool value);
  private:
  bool _internal_overload() const;
  void _internal_set_overload(bool value);
  public:

  // int32 unsatisfied_num = 6 [json_name = "unsatisfiedNum"];
  void clear_unsatisfied_num();
  int32_t unsatisfied_num() const;
  void set_unsatisfied_num(int32_t value);
  private:
  int32_t _internal_unsatisfied_num() const;
  void _internal_set_unsatisfied_num(int32_t value);
  public:

  // int32 satisfied_num = 7 [json_name = "satisfiedNum"];
  void clear_satisfied_num();
  int32_t satisfied_num() const;
  void set_satisfied_num(int32_t value);
  private:
  int32_t _internal_satisfied_num() const;
  void _internal_set_satisfied_num(int32_t value);
  public:

  // int32 outage_num = 8 [json_name = "outageNum"];
  void clear_outage_num();
  int32_t outage_num() const;
  void set_outage_num(int32_t value);
  private:
  int32_t _internal_outage_num() const;
  void _internal_set_outage_num(int32_t value);
  public:

  // double transmit_power = 10 [json_name = "transmitPower"];
  void clear_transmit_power();
  double transmit_power() const;
  void set_transmit_power(double value);
  private:
  double _internal_transmit_power() const;
  void _internal_set_transmit_power(double value);
  public:

  // int32 active_num = 9 [json_name = "activeNum"];
  void clear_active_num();
  int32_t active_num() const;
  void set_active_num(int32_t value);
  private:
  int32_t _internal_active_num() const;
  void _internal_set_active_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.comm.output.v1.BaseStation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double demand_flow_;
    int32_t id_;
    int32_t num_agents_;
    double actual_flow_;
    bool overload_;
    int32_t unsatisfied_num_;
    int32_t satisfied_num_;
    int32_t outage_num_;
    double transmit_power_;
    int32_t active_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcomm_2foutput_2fv1_2foutput_2eproto;
};
// -------------------------------------------------------------------

class Signal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.comm.output.v1.Signal) */ {
 public:
  inline Signal() : Signal(nullptr) {}
  ~Signal() override;
  explicit PROTOBUF_CONSTEXPR Signal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Signal(const Signal& from);
  Signal(Signal&& from) noexcept
    : Signal() {
    *this = ::std::move(from);
  }

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signal& operator=(Signal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Signal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signal* internal_default_instance() {
    return reinterpret_cast<const Signal*>(
               &_Signal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Signal& a, Signal& b) {
    a.Swap(&b);
  }
  inline void Swap(Signal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Signal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Signal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Signal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Signal& from) {
    Signal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.comm.output.v1.Signal";
  }
  protected:
  explicit Signal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrengthFieldNumber = 3,
    kBaseStationIdFieldNumber = 4,
    kFreqRangeIdFieldNumber = 5,
    kNumRowsFieldNumber = 1,
    kNumColumnsFieldNumber = 2,
  };
  // repeated double strength = 3 [json_name = "strength"];
  int strength_size() const;
  private:
  int _internal_strength_size() const;
  public:
  void clear_strength();
  private:
  double _internal_strength(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_strength() const;
  void _internal_add_strength(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_strength();
  public:
  double strength(int index) const;
  void set_strength(int index, double value);
  void add_strength(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      strength() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_strength();

  // repeated int32 base_station_id = 4 [json_name = "baseStationId"];
  int base_station_id_size() const;
  private:
  int _internal_base_station_id_size() const;
  public:
  void clear_base_station_id();
  private:
  int32_t _internal_base_station_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_base_station_id() const;
  void _internal_add_base_station_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_base_station_id();
  public:
  int32_t base_station_id(int index) const;
  void set_base_station_id(int index, int32_t value);
  void add_base_station_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      base_station_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_base_station_id();

  // repeated int32 freq_range_id = 5 [json_name = "freqRangeId"];
  int freq_range_id_size() const;
  private:
  int _internal_freq_range_id_size() const;
  public:
  void clear_freq_range_id();
  private:
  int32_t _internal_freq_range_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_freq_range_id() const;
  void _internal_add_freq_range_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_freq_range_id();
  public:
  int32_t freq_range_id(int index) const;
  void set_freq_range_id(int index, int32_t value);
  void add_freq_range_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      freq_range_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_freq_range_id();

  // int32 num_rows = 1 [json_name = "numRows"];
  void clear_num_rows();
  int32_t num_rows() const;
  void set_num_rows(int32_t value);
  private:
  int32_t _internal_num_rows() const;
  void _internal_set_num_rows(int32_t value);
  public:

  // int32 num_columns = 2 [json_name = "numColumns"];
  void clear_num_columns();
  int32_t num_columns() const;
  void set_num_columns(int32_t value);
  private:
  int32_t _internal_num_columns() const;
  void _internal_set_num_columns(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.comm.output.v1.Signal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > strength_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > base_station_id_;
    mutable std::atomic<int> _base_station_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > freq_range_id_;
    mutable std::atomic<int> _freq_range_id_cached_byte_size_;
    int32_t num_rows_;
    int32_t num_columns_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcomm_2foutput_2fv1_2foutput_2eproto;
};
// -------------------------------------------------------------------

class Person final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.comm.output.v1.Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  ~Person() override;
  explicit PROTOBUF_CONSTEXPR Person(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Person& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Person& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Person& from) {
    Person::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.comm.output.v1.Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFreqRangeIdsFieldNumber = 7,
    kDemandRateFieldNumber = 2,
    kIdFieldNumber = 1,
    kConnectStatusFieldNumber = 4,
    kActualRateFieldNumber = 3,
    kStrengthFieldNumber = 5,
    kBaseStationIdFieldNumber = 6,
    kDemandStatusFieldNumber = 9,
    kReceivedPowerFieldNumber = 8,
  };
  // repeated int32 freq_range_ids = 7 [json_name = "freqRangeIds"];
  int freq_range_ids_size() const;
  private:
  int _internal_freq_range_ids_size() const;
  public:
  void clear_freq_range_ids();
  private:
  int32_t _internal_freq_range_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_freq_range_ids() const;
  void _internal_add_freq_range_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_freq_range_ids();
  public:
  int32_t freq_range_ids(int index) const;
  void set_freq_range_ids(int index, int32_t value);
  void add_freq_range_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      freq_range_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_freq_range_ids();

  // double demand_rate = 2 [json_name = "demandRate"];
  void clear_demand_rate();
  double demand_rate() const;
  void set_demand_rate(double value);
  private:
  double _internal_demand_rate() const;
  void _internal_set_demand_rate(double value);
  public:

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .city.comm.output.v1.PersonConnectStatus connect_status = 4 [json_name = "connectStatus"];
  void clear_connect_status();
  ::city::comm::output::v1::PersonConnectStatus connect_status() const;
  void set_connect_status(::city::comm::output::v1::PersonConnectStatus value);
  private:
  ::city::comm::output::v1::PersonConnectStatus _internal_connect_status() const;
  void _internal_set_connect_status(::city::comm::output::v1::PersonConnectStatus value);
  public:

  // double actual_rate = 3 [json_name = "actualRate"];
  void clear_actual_rate();
  double actual_rate() const;
  void set_actual_rate(double value);
  private:
  double _internal_actual_rate() const;
  void _internal_set_actual_rate(double value);
  public:

  // double strength = 5 [json_name = "strength"];
  void clear_strength();
  double strength() const;
  void set_strength(double value);
  private:
  double _internal_strength() const;
  void _internal_set_strength(double value);
  public:

  // int32 base_station_id = 6 [json_name = "baseStationId"];
  void clear_base_station_id();
  int32_t base_station_id() const;
  void set_base_station_id(int32_t value);
  private:
  int32_t _internal_base_station_id() const;
  void _internal_set_base_station_id(int32_t value);
  public:

  // .city.comm.output.v1.PersonDemandStatus demand_status = 9 [json_name = "demandStatus"];
  void clear_demand_status();
  ::city::comm::output::v1::PersonDemandStatus demand_status() const;
  void set_demand_status(::city::comm::output::v1::PersonDemandStatus value);
  private:
  ::city::comm::output::v1::PersonDemandStatus _internal_demand_status() const;
  void _internal_set_demand_status(::city::comm::output::v1::PersonDemandStatus value);
  public:

  // double received_power = 8 [json_name = "receivedPower"];
  void clear_received_power();
  double received_power() const;
  void set_received_power(double value);
  private:
  double _internal_received_power() const;
  void _internal_set_received_power(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.comm.output.v1.Person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > freq_range_ids_;
    mutable std::atomic<int> _freq_range_ids_cached_byte_size_;
    double demand_rate_;
    int32_t id_;
    int connect_status_;
    double actual_rate_;
    double strength_;
    int32_t base_station_id_;
    int demand_status_;
    double received_power_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcomm_2foutput_2fv1_2foutput_2eproto;
};
// -------------------------------------------------------------------

class Aoi final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.comm.output.v1.Aoi) */ {
 public:
  inline Aoi() : Aoi(nullptr) {}
  ~Aoi() override;
  explicit PROTOBUF_CONSTEXPR Aoi(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Aoi(const Aoi& from);
  Aoi(Aoi&& from) noexcept
    : Aoi() {
    *this = ::std::move(from);
  }

  inline Aoi& operator=(const Aoi& from) {
    CopyFrom(from);
    return *this;
  }
  inline Aoi& operator=(Aoi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Aoi& default_instance() {
    return *internal_default_instance();
  }
  static inline const Aoi* internal_default_instance() {
    return reinterpret_cast<const Aoi*>(
               &_Aoi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Aoi& a, Aoi& b) {
    a.Swap(&b);
  }
  inline void Swap(Aoi* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Aoi* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Aoi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Aoi>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Aoi& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Aoi& from) {
    Aoi::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Aoi* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.comm.output.v1.Aoi";
  }
  protected:
  explicit Aoi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDemandFlowFieldNumber = 2,
    kIdFieldNumber = 1,
    kOutageNumFieldNumber = 4,
    kActualFlowFieldNumber = 3,
    kSatisfiedNumFieldNumber = 5,
    kUnsatisfiedNumFieldNumber = 6,
    kActiveUserNumFieldNumber = 7,
  };
  // double demand_flow = 2 [json_name = "demandFlow"];
  void clear_demand_flow();
  double demand_flow() const;
  void set_demand_flow(double value);
  private:
  double _internal_demand_flow() const;
  void _internal_set_demand_flow(double value);
  public:

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 outage_num = 4 [json_name = "outageNum"];
  void clear_outage_num();
  int32_t outage_num() const;
  void set_outage_num(int32_t value);
  private:
  int32_t _internal_outage_num() const;
  void _internal_set_outage_num(int32_t value);
  public:

  // double actual_flow = 3 [json_name = "actualFlow"];
  void clear_actual_flow();
  double actual_flow() const;
  void set_actual_flow(double value);
  private:
  double _internal_actual_flow() const;
  void _internal_set_actual_flow(double value);
  public:

  // int32 satisfied_num = 5 [json_name = "satisfiedNum"];
  void clear_satisfied_num();
  int32_t satisfied_num() const;
  void set_satisfied_num(int32_t value);
  private:
  int32_t _internal_satisfied_num() const;
  void _internal_set_satisfied_num(int32_t value);
  public:

  // int32 unsatisfied_num = 6 [json_name = "unsatisfiedNum"];
  void clear_unsatisfied_num();
  int32_t unsatisfied_num() const;
  void set_unsatisfied_num(int32_t value);
  private:
  int32_t _internal_unsatisfied_num() const;
  void _internal_set_unsatisfied_num(int32_t value);
  public:

  // int32 active_user_num = 7 [json_name = "activeUserNum"];
  void clear_active_user_num();
  int32_t active_user_num() const;
  void set_active_user_num(int32_t value);
  private:
  int32_t _internal_active_user_num() const;
  void _internal_set_active_user_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.comm.output.v1.Aoi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double demand_flow_;
    int32_t id_;
    int32_t outage_num_;
    double actual_flow_;
    int32_t satisfied_num_;
    int32_t unsatisfied_num_;
    int32_t active_user_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcomm_2foutput_2fv1_2foutput_2eproto;
};
// -------------------------------------------------------------------

class Statistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.comm.output.v1.Statistics) */ {
 public:
  inline Statistics() : Statistics(nullptr) {}
  ~Statistics() override;
  explicit PROTOBUF_CONSTEXPR Statistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Statistics(const Statistics& from);
  Statistics(Statistics&& from) noexcept
    : Statistics() {
    *this = ::std::move(from);
  }

  inline Statistics& operator=(const Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Statistics& operator=(Statistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Statistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const Statistics* internal_default_instance() {
    return reinterpret_cast<const Statistics*>(
               &_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Statistics& a, Statistics& b) {
    a.Swap(&b);
  }
  inline void Swap(Statistics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Statistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Statistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Statistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Statistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Statistics& from) {
    Statistics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Statistics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.comm.output.v1.Statistics";
  }
  protected:
  explicit Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumSatisfiedAgentsFieldNumber = 1,
    kNumUnsatisfiedAgentsFieldNumber = 2,
    kNumOutageAgentsFieldNumber = 3,
    kNumActiveAgentsFieldNumber = 4,
    kDemandFlowFieldNumber = 5,
    kActualFlowFieldNumber = 6,
    kNumBaseStationFieldNumber = 7,
    kNumOkBaseStationFieldNumber = 8,
    kNumRuinedBaseStationFieldNumber = 9,
    kNumStoppedBaseStationFieldNumber = 10,
    kNumOverloadedBaseStationFieldNumber = 11,
    kNumGatewayFieldNumber = 12,
    kNumOkGatewayFieldNumber = 13,
    kNumRuinedGatewayFieldNumber = 14,
    kNumStoppedGatewayFieldNumber = 15,
    kNumOverloadedGatewayFieldNumber = 16,
    kPowerConsumptionFieldNumber = 18,
    kNumBatteryGatewayFieldNumber = 17,
  };
  // int32 num_satisfied_agents = 1 [json_name = "numSatisfiedAgents"];
  void clear_num_satisfied_agents();
  int32_t num_satisfied_agents() const;
  void set_num_satisfied_agents(int32_t value);
  private:
  int32_t _internal_num_satisfied_agents() const;
  void _internal_set_num_satisfied_agents(int32_t value);
  public:

  // int32 num_unsatisfied_agents = 2 [json_name = "numUnsatisfiedAgents"];
  void clear_num_unsatisfied_agents();
  int32_t num_unsatisfied_agents() const;
  void set_num_unsatisfied_agents(int32_t value);
  private:
  int32_t _internal_num_unsatisfied_agents() const;
  void _internal_set_num_unsatisfied_agents(int32_t value);
  public:

  // int32 num_outage_agents = 3 [json_name = "numOutageAgents"];
  void clear_num_outage_agents();
  int32_t num_outage_agents() const;
  void set_num_outage_agents(int32_t value);
  private:
  int32_t _internal_num_outage_agents() const;
  void _internal_set_num_outage_agents(int32_t value);
  public:

  // int32 num_active_agents = 4 [json_name = "numActiveAgents"];
  void clear_num_active_agents();
  int32_t num_active_agents() const;
  void set_num_active_agents(int32_t value);
  private:
  int32_t _internal_num_active_agents() const;
  void _internal_set_num_active_agents(int32_t value);
  public:

  // double demand_flow = 5 [json_name = "demandFlow"];
  void clear_demand_flow();
  double demand_flow() const;
  void set_demand_flow(double value);
  private:
  double _internal_demand_flow() const;
  void _internal_set_demand_flow(double value);
  public:

  // double actual_flow = 6 [json_name = "actualFlow"];
  void clear_actual_flow();
  double actual_flow() const;
  void set_actual_flow(double value);
  private:
  double _internal_actual_flow() const;
  void _internal_set_actual_flow(double value);
  public:

  // int32 num_base_station = 7 [json_name = "numBaseStation"];
  void clear_num_base_station();
  int32_t num_base_station() const;
  void set_num_base_station(int32_t value);
  private:
  int32_t _internal_num_base_station() const;
  void _internal_set_num_base_station(int32_t value);
  public:

  // int32 num_ok_base_station = 8 [json_name = "numOkBaseStation"];
  void clear_num_ok_base_station();
  int32_t num_ok_base_station() const;
  void set_num_ok_base_station(int32_t value);
  private:
  int32_t _internal_num_ok_base_station() const;
  void _internal_set_num_ok_base_station(int32_t value);
  public:

  // int32 num_ruined_base_station = 9 [json_name = "numRuinedBaseStation"];
  void clear_num_ruined_base_station();
  int32_t num_ruined_base_station() const;
  void set_num_ruined_base_station(int32_t value);
  private:
  int32_t _internal_num_ruined_base_station() const;
  void _internal_set_num_ruined_base_station(int32_t value);
  public:

  // int32 num_stopped_base_station = 10 [json_name = "numStoppedBaseStation"];
  void clear_num_stopped_base_station();
  int32_t num_stopped_base_station() const;
  void set_num_stopped_base_station(int32_t value);
  private:
  int32_t _internal_num_stopped_base_station() const;
  void _internal_set_num_stopped_base_station(int32_t value);
  public:

  // int32 num_overloaded_base_station = 11 [json_name = "numOverloadedBaseStation"];
  void clear_num_overloaded_base_station();
  int32_t num_overloaded_base_station() const;
  void set_num_overloaded_base_station(int32_t value);
  private:
  int32_t _internal_num_overloaded_base_station() const;
  void _internal_set_num_overloaded_base_station(int32_t value);
  public:

  // int32 num_gateway = 12 [json_name = "numGateway"];
  void clear_num_gateway();
  int32_t num_gateway() const;
  void set_num_gateway(int32_t value);
  private:
  int32_t _internal_num_gateway() const;
  void _internal_set_num_gateway(int32_t value);
  public:

  // int32 num_ok_gateway = 13 [json_name = "numOkGateway"];
  void clear_num_ok_gateway();
  int32_t num_ok_gateway() const;
  void set_num_ok_gateway(int32_t value);
  private:
  int32_t _internal_num_ok_gateway() const;
  void _internal_set_num_ok_gateway(int32_t value);
  public:

  // int32 num_ruined_gateway = 14 [json_name = "numRuinedGateway"];
  void clear_num_ruined_gateway();
  int32_t num_ruined_gateway() const;
  void set_num_ruined_gateway(int32_t value);
  private:
  int32_t _internal_num_ruined_gateway() const;
  void _internal_set_num_ruined_gateway(int32_t value);
  public:

  // int32 num_stopped_gateway = 15 [json_name = "numStoppedGateway"];
  void clear_num_stopped_gateway();
  int32_t num_stopped_gateway() const;
  void set_num_stopped_gateway(int32_t value);
  private:
  int32_t _internal_num_stopped_gateway() const;
  void _internal_set_num_stopped_gateway(int32_t value);
  public:

  // int32 num_overloaded_gateway = 16 [json_name = "numOverloadedGateway"];
  void clear_num_overloaded_gateway();
  int32_t num_overloaded_gateway() const;
  void set_num_overloaded_gateway(int32_t value);
  private:
  int32_t _internal_num_overloaded_gateway() const;
  void _internal_set_num_overloaded_gateway(int32_t value);
  public:

  // double power_consumption = 18 [json_name = "powerConsumption"];
  void clear_power_consumption();
  double power_consumption() const;
  void set_power_consumption(double value);
  private:
  double _internal_power_consumption() const;
  void _internal_set_power_consumption(double value);
  public:

  // int32 num_battery_gateway = 17 [json_name = "numBatteryGateway"];
  void clear_num_battery_gateway();
  int32_t num_battery_gateway() const;
  void set_num_battery_gateway(int32_t value);
  private:
  int32_t _internal_num_battery_gateway() const;
  void _internal_set_num_battery_gateway(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.comm.output.v1.Statistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t num_satisfied_agents_;
    int32_t num_unsatisfied_agents_;
    int32_t num_outage_agents_;
    int32_t num_active_agents_;
    double demand_flow_;
    double actual_flow_;
    int32_t num_base_station_;
    int32_t num_ok_base_station_;
    int32_t num_ruined_base_station_;
    int32_t num_stopped_base_station_;
    int32_t num_overloaded_base_station_;
    int32_t num_gateway_;
    int32_t num_ok_gateway_;
    int32_t num_ruined_gateway_;
    int32_t num_stopped_gateway_;
    int32_t num_overloaded_gateway_;
    double power_consumption_;
    int32_t num_battery_gateway_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcomm_2foutput_2fv1_2foutput_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// int32 id = 1 [json_name = "id"];
inline void Node::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Node::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Node::id() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Node.id)
  return _internal_id();
}
inline void Node::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Node::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Node.id)
}

// .city.comm.output.v1.NodeStatus status = 2 [json_name = "status"];
inline void Node::clear_status() {
  _impl_.status_ = 0;
}
inline ::city::comm::output::v1::NodeStatus Node::_internal_status() const {
  return static_cast< ::city::comm::output::v1::NodeStatus >(_impl_.status_);
}
inline ::city::comm::output::v1::NodeStatus Node::status() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Node.status)
  return _internal_status();
}
inline void Node::_internal_set_status(::city::comm::output::v1::NodeStatus value) {
  
  _impl_.status_ = value;
}
inline void Node::set_status(::city::comm::output::v1::NodeStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Node.status)
}

// optional double battery_remaining_time = 3 [json_name = "batteryRemainingTime"];
inline bool Node::_internal_has_battery_remaining_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Node::has_battery_remaining_time() const {
  return _internal_has_battery_remaining_time();
}
inline void Node::clear_battery_remaining_time() {
  _impl_.battery_remaining_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Node::_internal_battery_remaining_time() const {
  return _impl_.battery_remaining_time_;
}
inline double Node::battery_remaining_time() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Node.battery_remaining_time)
  return _internal_battery_remaining_time();
}
inline void Node::_internal_set_battery_remaining_time(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.battery_remaining_time_ = value;
}
inline void Node::set_battery_remaining_time(double value) {
  _internal_set_battery_remaining_time(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Node.battery_remaining_time)
}

// -------------------------------------------------------------------

// BaseStation

// int32 id = 1 [json_name = "id"];
inline void BaseStation::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t BaseStation::_internal_id() const {
  return _impl_.id_;
}
inline int32_t BaseStation::id() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.BaseStation.id)
  return _internal_id();
}
inline void BaseStation::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void BaseStation::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.BaseStation.id)
}

// double demand_flow = 2 [json_name = "demandFlow"];
inline void BaseStation::clear_demand_flow() {
  _impl_.demand_flow_ = 0;
}
inline double BaseStation::_internal_demand_flow() const {
  return _impl_.demand_flow_;
}
inline double BaseStation::demand_flow() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.BaseStation.demand_flow)
  return _internal_demand_flow();
}
inline void BaseStation::_internal_set_demand_flow(double value) {
  
  _impl_.demand_flow_ = value;
}
inline void BaseStation::set_demand_flow(double value) {
  _internal_set_demand_flow(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.BaseStation.demand_flow)
}

// double actual_flow = 3 [json_name = "actualFlow"];
inline void BaseStation::clear_actual_flow() {
  _impl_.actual_flow_ = 0;
}
inline double BaseStation::_internal_actual_flow() const {
  return _impl_.actual_flow_;
}
inline double BaseStation::actual_flow() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.BaseStation.actual_flow)
  return _internal_actual_flow();
}
inline void BaseStation::_internal_set_actual_flow(double value) {
  
  _impl_.actual_flow_ = value;
}
inline void BaseStation::set_actual_flow(double value) {
  _internal_set_actual_flow(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.BaseStation.actual_flow)
}

// int32 num_agents = 4 [json_name = "numAgents"];
inline void BaseStation::clear_num_agents() {
  _impl_.num_agents_ = 0;
}
inline int32_t BaseStation::_internal_num_agents() const {
  return _impl_.num_agents_;
}
inline int32_t BaseStation::num_agents() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.BaseStation.num_agents)
  return _internal_num_agents();
}
inline void BaseStation::_internal_set_num_agents(int32_t value) {
  
  _impl_.num_agents_ = value;
}
inline void BaseStation::set_num_agents(int32_t value) {
  _internal_set_num_agents(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.BaseStation.num_agents)
}

// bool overload = 5 [json_name = "overload"];
inline void BaseStation::clear_overload() {
  _impl_.overload_ = false;
}
inline bool BaseStation::_internal_overload() const {
  return _impl_.overload_;
}
inline bool BaseStation::overload() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.BaseStation.overload)
  return _internal_overload();
}
inline void BaseStation::_internal_set_overload(bool value) {
  
  _impl_.overload_ = value;
}
inline void BaseStation::set_overload(bool value) {
  _internal_set_overload(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.BaseStation.overload)
}

// int32 unsatisfied_num = 6 [json_name = "unsatisfiedNum"];
inline void BaseStation::clear_unsatisfied_num() {
  _impl_.unsatisfied_num_ = 0;
}
inline int32_t BaseStation::_internal_unsatisfied_num() const {
  return _impl_.unsatisfied_num_;
}
inline int32_t BaseStation::unsatisfied_num() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.BaseStation.unsatisfied_num)
  return _internal_unsatisfied_num();
}
inline void BaseStation::_internal_set_unsatisfied_num(int32_t value) {
  
  _impl_.unsatisfied_num_ = value;
}
inline void BaseStation::set_unsatisfied_num(int32_t value) {
  _internal_set_unsatisfied_num(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.BaseStation.unsatisfied_num)
}

// int32 satisfied_num = 7 [json_name = "satisfiedNum"];
inline void BaseStation::clear_satisfied_num() {
  _impl_.satisfied_num_ = 0;
}
inline int32_t BaseStation::_internal_satisfied_num() const {
  return _impl_.satisfied_num_;
}
inline int32_t BaseStation::satisfied_num() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.BaseStation.satisfied_num)
  return _internal_satisfied_num();
}
inline void BaseStation::_internal_set_satisfied_num(int32_t value) {
  
  _impl_.satisfied_num_ = value;
}
inline void BaseStation::set_satisfied_num(int32_t value) {
  _internal_set_satisfied_num(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.BaseStation.satisfied_num)
}

// int32 outage_num = 8 [json_name = "outageNum"];
inline void BaseStation::clear_outage_num() {
  _impl_.outage_num_ = 0;
}
inline int32_t BaseStation::_internal_outage_num() const {
  return _impl_.outage_num_;
}
inline int32_t BaseStation::outage_num() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.BaseStation.outage_num)
  return _internal_outage_num();
}
inline void BaseStation::_internal_set_outage_num(int32_t value) {
  
  _impl_.outage_num_ = value;
}
inline void BaseStation::set_outage_num(int32_t value) {
  _internal_set_outage_num(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.BaseStation.outage_num)
}

// int32 active_num = 9 [json_name = "activeNum"];
inline void BaseStation::clear_active_num() {
  _impl_.active_num_ = 0;
}
inline int32_t BaseStation::_internal_active_num() const {
  return _impl_.active_num_;
}
inline int32_t BaseStation::active_num() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.BaseStation.active_num)
  return _internal_active_num();
}
inline void BaseStation::_internal_set_active_num(int32_t value) {
  
  _impl_.active_num_ = value;
}
inline void BaseStation::set_active_num(int32_t value) {
  _internal_set_active_num(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.BaseStation.active_num)
}

// double transmit_power = 10 [json_name = "transmitPower"];
inline void BaseStation::clear_transmit_power() {
  _impl_.transmit_power_ = 0;
}
inline double BaseStation::_internal_transmit_power() const {
  return _impl_.transmit_power_;
}
inline double BaseStation::transmit_power() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.BaseStation.transmit_power)
  return _internal_transmit_power();
}
inline void BaseStation::_internal_set_transmit_power(double value) {
  
  _impl_.transmit_power_ = value;
}
inline void BaseStation::set_transmit_power(double value) {
  _internal_set_transmit_power(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.BaseStation.transmit_power)
}

// -------------------------------------------------------------------

// Signal

// int32 num_rows = 1 [json_name = "numRows"];
inline void Signal::clear_num_rows() {
  _impl_.num_rows_ = 0;
}
inline int32_t Signal::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline int32_t Signal::num_rows() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Signal.num_rows)
  return _internal_num_rows();
}
inline void Signal::_internal_set_num_rows(int32_t value) {
  
  _impl_.num_rows_ = value;
}
inline void Signal::set_num_rows(int32_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Signal.num_rows)
}

// int32 num_columns = 2 [json_name = "numColumns"];
inline void Signal::clear_num_columns() {
  _impl_.num_columns_ = 0;
}
inline int32_t Signal::_internal_num_columns() const {
  return _impl_.num_columns_;
}
inline int32_t Signal::num_columns() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Signal.num_columns)
  return _internal_num_columns();
}
inline void Signal::_internal_set_num_columns(int32_t value) {
  
  _impl_.num_columns_ = value;
}
inline void Signal::set_num_columns(int32_t value) {
  _internal_set_num_columns(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Signal.num_columns)
}

// repeated double strength = 3 [json_name = "strength"];
inline int Signal::_internal_strength_size() const {
  return _impl_.strength_.size();
}
inline int Signal::strength_size() const {
  return _internal_strength_size();
}
inline void Signal::clear_strength() {
  _impl_.strength_.Clear();
}
inline double Signal::_internal_strength(int index) const {
  return _impl_.strength_.Get(index);
}
inline double Signal::strength(int index) const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Signal.strength)
  return _internal_strength(index);
}
inline void Signal::set_strength(int index, double value) {
  _impl_.strength_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Signal.strength)
}
inline void Signal::_internal_add_strength(double value) {
  _impl_.strength_.Add(value);
}
inline void Signal::add_strength(double value) {
  _internal_add_strength(value);
  // @@protoc_insertion_point(field_add:city.comm.output.v1.Signal.strength)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Signal::_internal_strength() const {
  return _impl_.strength_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Signal::strength() const {
  // @@protoc_insertion_point(field_list:city.comm.output.v1.Signal.strength)
  return _internal_strength();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Signal::_internal_mutable_strength() {
  return &_impl_.strength_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Signal::mutable_strength() {
  // @@protoc_insertion_point(field_mutable_list:city.comm.output.v1.Signal.strength)
  return _internal_mutable_strength();
}

// repeated int32 base_station_id = 4 [json_name = "baseStationId"];
inline int Signal::_internal_base_station_id_size() const {
  return _impl_.base_station_id_.size();
}
inline int Signal::base_station_id_size() const {
  return _internal_base_station_id_size();
}
inline void Signal::clear_base_station_id() {
  _impl_.base_station_id_.Clear();
}
inline int32_t Signal::_internal_base_station_id(int index) const {
  return _impl_.base_station_id_.Get(index);
}
inline int32_t Signal::base_station_id(int index) const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Signal.base_station_id)
  return _internal_base_station_id(index);
}
inline void Signal::set_base_station_id(int index, int32_t value) {
  _impl_.base_station_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Signal.base_station_id)
}
inline void Signal::_internal_add_base_station_id(int32_t value) {
  _impl_.base_station_id_.Add(value);
}
inline void Signal::add_base_station_id(int32_t value) {
  _internal_add_base_station_id(value);
  // @@protoc_insertion_point(field_add:city.comm.output.v1.Signal.base_station_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Signal::_internal_base_station_id() const {
  return _impl_.base_station_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Signal::base_station_id() const {
  // @@protoc_insertion_point(field_list:city.comm.output.v1.Signal.base_station_id)
  return _internal_base_station_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Signal::_internal_mutable_base_station_id() {
  return &_impl_.base_station_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Signal::mutable_base_station_id() {
  // @@protoc_insertion_point(field_mutable_list:city.comm.output.v1.Signal.base_station_id)
  return _internal_mutable_base_station_id();
}

// repeated int32 freq_range_id = 5 [json_name = "freqRangeId"];
inline int Signal::_internal_freq_range_id_size() const {
  return _impl_.freq_range_id_.size();
}
inline int Signal::freq_range_id_size() const {
  return _internal_freq_range_id_size();
}
inline void Signal::clear_freq_range_id() {
  _impl_.freq_range_id_.Clear();
}
inline int32_t Signal::_internal_freq_range_id(int index) const {
  return _impl_.freq_range_id_.Get(index);
}
inline int32_t Signal::freq_range_id(int index) const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Signal.freq_range_id)
  return _internal_freq_range_id(index);
}
inline void Signal::set_freq_range_id(int index, int32_t value) {
  _impl_.freq_range_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Signal.freq_range_id)
}
inline void Signal::_internal_add_freq_range_id(int32_t value) {
  _impl_.freq_range_id_.Add(value);
}
inline void Signal::add_freq_range_id(int32_t value) {
  _internal_add_freq_range_id(value);
  // @@protoc_insertion_point(field_add:city.comm.output.v1.Signal.freq_range_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Signal::_internal_freq_range_id() const {
  return _impl_.freq_range_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Signal::freq_range_id() const {
  // @@protoc_insertion_point(field_list:city.comm.output.v1.Signal.freq_range_id)
  return _internal_freq_range_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Signal::_internal_mutable_freq_range_id() {
  return &_impl_.freq_range_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Signal::mutable_freq_range_id() {
  // @@protoc_insertion_point(field_mutable_list:city.comm.output.v1.Signal.freq_range_id)
  return _internal_mutable_freq_range_id();
}

// -------------------------------------------------------------------

// Person

// int32 id = 1 [json_name = "id"];
inline void Person::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Person::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Person::id() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Person.id)
  return _internal_id();
}
inline void Person::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Person::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Person.id)
}

// double demand_rate = 2 [json_name = "demandRate"];
inline void Person::clear_demand_rate() {
  _impl_.demand_rate_ = 0;
}
inline double Person::_internal_demand_rate() const {
  return _impl_.demand_rate_;
}
inline double Person::demand_rate() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Person.demand_rate)
  return _internal_demand_rate();
}
inline void Person::_internal_set_demand_rate(double value) {
  
  _impl_.demand_rate_ = value;
}
inline void Person::set_demand_rate(double value) {
  _internal_set_demand_rate(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Person.demand_rate)
}

// double actual_rate = 3 [json_name = "actualRate"];
inline void Person::clear_actual_rate() {
  _impl_.actual_rate_ = 0;
}
inline double Person::_internal_actual_rate() const {
  return _impl_.actual_rate_;
}
inline double Person::actual_rate() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Person.actual_rate)
  return _internal_actual_rate();
}
inline void Person::_internal_set_actual_rate(double value) {
  
  _impl_.actual_rate_ = value;
}
inline void Person::set_actual_rate(double value) {
  _internal_set_actual_rate(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Person.actual_rate)
}

// .city.comm.output.v1.PersonConnectStatus connect_status = 4 [json_name = "connectStatus"];
inline void Person::clear_connect_status() {
  _impl_.connect_status_ = 0;
}
inline ::city::comm::output::v1::PersonConnectStatus Person::_internal_connect_status() const {
  return static_cast< ::city::comm::output::v1::PersonConnectStatus >(_impl_.connect_status_);
}
inline ::city::comm::output::v1::PersonConnectStatus Person::connect_status() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Person.connect_status)
  return _internal_connect_status();
}
inline void Person::_internal_set_connect_status(::city::comm::output::v1::PersonConnectStatus value) {
  
  _impl_.connect_status_ = value;
}
inline void Person::set_connect_status(::city::comm::output::v1::PersonConnectStatus value) {
  _internal_set_connect_status(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Person.connect_status)
}

// .city.comm.output.v1.PersonDemandStatus demand_status = 9 [json_name = "demandStatus"];
inline void Person::clear_demand_status() {
  _impl_.demand_status_ = 0;
}
inline ::city::comm::output::v1::PersonDemandStatus Person::_internal_demand_status() const {
  return static_cast< ::city::comm::output::v1::PersonDemandStatus >(_impl_.demand_status_);
}
inline ::city::comm::output::v1::PersonDemandStatus Person::demand_status() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Person.demand_status)
  return _internal_demand_status();
}
inline void Person::_internal_set_demand_status(::city::comm::output::v1::PersonDemandStatus value) {
  
  _impl_.demand_status_ = value;
}
inline void Person::set_demand_status(::city::comm::output::v1::PersonDemandStatus value) {
  _internal_set_demand_status(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Person.demand_status)
}

// double strength = 5 [json_name = "strength"];
inline void Person::clear_strength() {
  _impl_.strength_ = 0;
}
inline double Person::_internal_strength() const {
  return _impl_.strength_;
}
inline double Person::strength() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Person.strength)
  return _internal_strength();
}
inline void Person::_internal_set_strength(double value) {
  
  _impl_.strength_ = value;
}
inline void Person::set_strength(double value) {
  _internal_set_strength(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Person.strength)
}

// int32 base_station_id = 6 [json_name = "baseStationId"];
inline void Person::clear_base_station_id() {
  _impl_.base_station_id_ = 0;
}
inline int32_t Person::_internal_base_station_id() const {
  return _impl_.base_station_id_;
}
inline int32_t Person::base_station_id() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Person.base_station_id)
  return _internal_base_station_id();
}
inline void Person::_internal_set_base_station_id(int32_t value) {
  
  _impl_.base_station_id_ = value;
}
inline void Person::set_base_station_id(int32_t value) {
  _internal_set_base_station_id(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Person.base_station_id)
}

// repeated int32 freq_range_ids = 7 [json_name = "freqRangeIds"];
inline int Person::_internal_freq_range_ids_size() const {
  return _impl_.freq_range_ids_.size();
}
inline int Person::freq_range_ids_size() const {
  return _internal_freq_range_ids_size();
}
inline void Person::clear_freq_range_ids() {
  _impl_.freq_range_ids_.Clear();
}
inline int32_t Person::_internal_freq_range_ids(int index) const {
  return _impl_.freq_range_ids_.Get(index);
}
inline int32_t Person::freq_range_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Person.freq_range_ids)
  return _internal_freq_range_ids(index);
}
inline void Person::set_freq_range_ids(int index, int32_t value) {
  _impl_.freq_range_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Person.freq_range_ids)
}
inline void Person::_internal_add_freq_range_ids(int32_t value) {
  _impl_.freq_range_ids_.Add(value);
}
inline void Person::add_freq_range_ids(int32_t value) {
  _internal_add_freq_range_ids(value);
  // @@protoc_insertion_point(field_add:city.comm.output.v1.Person.freq_range_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Person::_internal_freq_range_ids() const {
  return _impl_.freq_range_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Person::freq_range_ids() const {
  // @@protoc_insertion_point(field_list:city.comm.output.v1.Person.freq_range_ids)
  return _internal_freq_range_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Person::_internal_mutable_freq_range_ids() {
  return &_impl_.freq_range_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Person::mutable_freq_range_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.comm.output.v1.Person.freq_range_ids)
  return _internal_mutable_freq_range_ids();
}

// double received_power = 8 [json_name = "receivedPower"];
inline void Person::clear_received_power() {
  _impl_.received_power_ = 0;
}
inline double Person::_internal_received_power() const {
  return _impl_.received_power_;
}
inline double Person::received_power() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Person.received_power)
  return _internal_received_power();
}
inline void Person::_internal_set_received_power(double value) {
  
  _impl_.received_power_ = value;
}
inline void Person::set_received_power(double value) {
  _internal_set_received_power(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Person.received_power)
}

// -------------------------------------------------------------------

// Aoi

// int32 id = 1 [json_name = "id"];
inline void Aoi::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Aoi::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Aoi::id() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Aoi.id)
  return _internal_id();
}
inline void Aoi::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Aoi::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Aoi.id)
}

// double demand_flow = 2 [json_name = "demandFlow"];
inline void Aoi::clear_demand_flow() {
  _impl_.demand_flow_ = 0;
}
inline double Aoi::_internal_demand_flow() const {
  return _impl_.demand_flow_;
}
inline double Aoi::demand_flow() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Aoi.demand_flow)
  return _internal_demand_flow();
}
inline void Aoi::_internal_set_demand_flow(double value) {
  
  _impl_.demand_flow_ = value;
}
inline void Aoi::set_demand_flow(double value) {
  _internal_set_demand_flow(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Aoi.demand_flow)
}

// double actual_flow = 3 [json_name = "actualFlow"];
inline void Aoi::clear_actual_flow() {
  _impl_.actual_flow_ = 0;
}
inline double Aoi::_internal_actual_flow() const {
  return _impl_.actual_flow_;
}
inline double Aoi::actual_flow() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Aoi.actual_flow)
  return _internal_actual_flow();
}
inline void Aoi::_internal_set_actual_flow(double value) {
  
  _impl_.actual_flow_ = value;
}
inline void Aoi::set_actual_flow(double value) {
  _internal_set_actual_flow(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Aoi.actual_flow)
}

// int32 outage_num = 4 [json_name = "outageNum"];
inline void Aoi::clear_outage_num() {
  _impl_.outage_num_ = 0;
}
inline int32_t Aoi::_internal_outage_num() const {
  return _impl_.outage_num_;
}
inline int32_t Aoi::outage_num() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Aoi.outage_num)
  return _internal_outage_num();
}
inline void Aoi::_internal_set_outage_num(int32_t value) {
  
  _impl_.outage_num_ = value;
}
inline void Aoi::set_outage_num(int32_t value) {
  _internal_set_outage_num(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Aoi.outage_num)
}

// int32 satisfied_num = 5 [json_name = "satisfiedNum"];
inline void Aoi::clear_satisfied_num() {
  _impl_.satisfied_num_ = 0;
}
inline int32_t Aoi::_internal_satisfied_num() const {
  return _impl_.satisfied_num_;
}
inline int32_t Aoi::satisfied_num() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Aoi.satisfied_num)
  return _internal_satisfied_num();
}
inline void Aoi::_internal_set_satisfied_num(int32_t value) {
  
  _impl_.satisfied_num_ = value;
}
inline void Aoi::set_satisfied_num(int32_t value) {
  _internal_set_satisfied_num(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Aoi.satisfied_num)
}

// int32 unsatisfied_num = 6 [json_name = "unsatisfiedNum"];
inline void Aoi::clear_unsatisfied_num() {
  _impl_.unsatisfied_num_ = 0;
}
inline int32_t Aoi::_internal_unsatisfied_num() const {
  return _impl_.unsatisfied_num_;
}
inline int32_t Aoi::unsatisfied_num() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Aoi.unsatisfied_num)
  return _internal_unsatisfied_num();
}
inline void Aoi::_internal_set_unsatisfied_num(int32_t value) {
  
  _impl_.unsatisfied_num_ = value;
}
inline void Aoi::set_unsatisfied_num(int32_t value) {
  _internal_set_unsatisfied_num(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Aoi.unsatisfied_num)
}

// int32 active_user_num = 7 [json_name = "activeUserNum"];
inline void Aoi::clear_active_user_num() {
  _impl_.active_user_num_ = 0;
}
inline int32_t Aoi::_internal_active_user_num() const {
  return _impl_.active_user_num_;
}
inline int32_t Aoi::active_user_num() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Aoi.active_user_num)
  return _internal_active_user_num();
}
inline void Aoi::_internal_set_active_user_num(int32_t value) {
  
  _impl_.active_user_num_ = value;
}
inline void Aoi::set_active_user_num(int32_t value) {
  _internal_set_active_user_num(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Aoi.active_user_num)
}

// -------------------------------------------------------------------

// Statistics

// int32 num_satisfied_agents = 1 [json_name = "numSatisfiedAgents"];
inline void Statistics::clear_num_satisfied_agents() {
  _impl_.num_satisfied_agents_ = 0;
}
inline int32_t Statistics::_internal_num_satisfied_agents() const {
  return _impl_.num_satisfied_agents_;
}
inline int32_t Statistics::num_satisfied_agents() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.num_satisfied_agents)
  return _internal_num_satisfied_agents();
}
inline void Statistics::_internal_set_num_satisfied_agents(int32_t value) {
  
  _impl_.num_satisfied_agents_ = value;
}
inline void Statistics::set_num_satisfied_agents(int32_t value) {
  _internal_set_num_satisfied_agents(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.num_satisfied_agents)
}

// int32 num_unsatisfied_agents = 2 [json_name = "numUnsatisfiedAgents"];
inline void Statistics::clear_num_unsatisfied_agents() {
  _impl_.num_unsatisfied_agents_ = 0;
}
inline int32_t Statistics::_internal_num_unsatisfied_agents() const {
  return _impl_.num_unsatisfied_agents_;
}
inline int32_t Statistics::num_unsatisfied_agents() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.num_unsatisfied_agents)
  return _internal_num_unsatisfied_agents();
}
inline void Statistics::_internal_set_num_unsatisfied_agents(int32_t value) {
  
  _impl_.num_unsatisfied_agents_ = value;
}
inline void Statistics::set_num_unsatisfied_agents(int32_t value) {
  _internal_set_num_unsatisfied_agents(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.num_unsatisfied_agents)
}

// int32 num_outage_agents = 3 [json_name = "numOutageAgents"];
inline void Statistics::clear_num_outage_agents() {
  _impl_.num_outage_agents_ = 0;
}
inline int32_t Statistics::_internal_num_outage_agents() const {
  return _impl_.num_outage_agents_;
}
inline int32_t Statistics::num_outage_agents() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.num_outage_agents)
  return _internal_num_outage_agents();
}
inline void Statistics::_internal_set_num_outage_agents(int32_t value) {
  
  _impl_.num_outage_agents_ = value;
}
inline void Statistics::set_num_outage_agents(int32_t value) {
  _internal_set_num_outage_agents(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.num_outage_agents)
}

// int32 num_active_agents = 4 [json_name = "numActiveAgents"];
inline void Statistics::clear_num_active_agents() {
  _impl_.num_active_agents_ = 0;
}
inline int32_t Statistics::_internal_num_active_agents() const {
  return _impl_.num_active_agents_;
}
inline int32_t Statistics::num_active_agents() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.num_active_agents)
  return _internal_num_active_agents();
}
inline void Statistics::_internal_set_num_active_agents(int32_t value) {
  
  _impl_.num_active_agents_ = value;
}
inline void Statistics::set_num_active_agents(int32_t value) {
  _internal_set_num_active_agents(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.num_active_agents)
}

// double demand_flow = 5 [json_name = "demandFlow"];
inline void Statistics::clear_demand_flow() {
  _impl_.demand_flow_ = 0;
}
inline double Statistics::_internal_demand_flow() const {
  return _impl_.demand_flow_;
}
inline double Statistics::demand_flow() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.demand_flow)
  return _internal_demand_flow();
}
inline void Statistics::_internal_set_demand_flow(double value) {
  
  _impl_.demand_flow_ = value;
}
inline void Statistics::set_demand_flow(double value) {
  _internal_set_demand_flow(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.demand_flow)
}

// double actual_flow = 6 [json_name = "actualFlow"];
inline void Statistics::clear_actual_flow() {
  _impl_.actual_flow_ = 0;
}
inline double Statistics::_internal_actual_flow() const {
  return _impl_.actual_flow_;
}
inline double Statistics::actual_flow() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.actual_flow)
  return _internal_actual_flow();
}
inline void Statistics::_internal_set_actual_flow(double value) {
  
  _impl_.actual_flow_ = value;
}
inline void Statistics::set_actual_flow(double value) {
  _internal_set_actual_flow(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.actual_flow)
}

// int32 num_base_station = 7 [json_name = "numBaseStation"];
inline void Statistics::clear_num_base_station() {
  _impl_.num_base_station_ = 0;
}
inline int32_t Statistics::_internal_num_base_station() const {
  return _impl_.num_base_station_;
}
inline int32_t Statistics::num_base_station() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.num_base_station)
  return _internal_num_base_station();
}
inline void Statistics::_internal_set_num_base_station(int32_t value) {
  
  _impl_.num_base_station_ = value;
}
inline void Statistics::set_num_base_station(int32_t value) {
  _internal_set_num_base_station(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.num_base_station)
}

// int32 num_ok_base_station = 8 [json_name = "numOkBaseStation"];
inline void Statistics::clear_num_ok_base_station() {
  _impl_.num_ok_base_station_ = 0;
}
inline int32_t Statistics::_internal_num_ok_base_station() const {
  return _impl_.num_ok_base_station_;
}
inline int32_t Statistics::num_ok_base_station() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.num_ok_base_station)
  return _internal_num_ok_base_station();
}
inline void Statistics::_internal_set_num_ok_base_station(int32_t value) {
  
  _impl_.num_ok_base_station_ = value;
}
inline void Statistics::set_num_ok_base_station(int32_t value) {
  _internal_set_num_ok_base_station(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.num_ok_base_station)
}

// int32 num_ruined_base_station = 9 [json_name = "numRuinedBaseStation"];
inline void Statistics::clear_num_ruined_base_station() {
  _impl_.num_ruined_base_station_ = 0;
}
inline int32_t Statistics::_internal_num_ruined_base_station() const {
  return _impl_.num_ruined_base_station_;
}
inline int32_t Statistics::num_ruined_base_station() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.num_ruined_base_station)
  return _internal_num_ruined_base_station();
}
inline void Statistics::_internal_set_num_ruined_base_station(int32_t value) {
  
  _impl_.num_ruined_base_station_ = value;
}
inline void Statistics::set_num_ruined_base_station(int32_t value) {
  _internal_set_num_ruined_base_station(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.num_ruined_base_station)
}

// int32 num_stopped_base_station = 10 [json_name = "numStoppedBaseStation"];
inline void Statistics::clear_num_stopped_base_station() {
  _impl_.num_stopped_base_station_ = 0;
}
inline int32_t Statistics::_internal_num_stopped_base_station() const {
  return _impl_.num_stopped_base_station_;
}
inline int32_t Statistics::num_stopped_base_station() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.num_stopped_base_station)
  return _internal_num_stopped_base_station();
}
inline void Statistics::_internal_set_num_stopped_base_station(int32_t value) {
  
  _impl_.num_stopped_base_station_ = value;
}
inline void Statistics::set_num_stopped_base_station(int32_t value) {
  _internal_set_num_stopped_base_station(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.num_stopped_base_station)
}

// int32 num_overloaded_base_station = 11 [json_name = "numOverloadedBaseStation"];
inline void Statistics::clear_num_overloaded_base_station() {
  _impl_.num_overloaded_base_station_ = 0;
}
inline int32_t Statistics::_internal_num_overloaded_base_station() const {
  return _impl_.num_overloaded_base_station_;
}
inline int32_t Statistics::num_overloaded_base_station() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.num_overloaded_base_station)
  return _internal_num_overloaded_base_station();
}
inline void Statistics::_internal_set_num_overloaded_base_station(int32_t value) {
  
  _impl_.num_overloaded_base_station_ = value;
}
inline void Statistics::set_num_overloaded_base_station(int32_t value) {
  _internal_set_num_overloaded_base_station(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.num_overloaded_base_station)
}

// int32 num_gateway = 12 [json_name = "numGateway"];
inline void Statistics::clear_num_gateway() {
  _impl_.num_gateway_ = 0;
}
inline int32_t Statistics::_internal_num_gateway() const {
  return _impl_.num_gateway_;
}
inline int32_t Statistics::num_gateway() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.num_gateway)
  return _internal_num_gateway();
}
inline void Statistics::_internal_set_num_gateway(int32_t value) {
  
  _impl_.num_gateway_ = value;
}
inline void Statistics::set_num_gateway(int32_t value) {
  _internal_set_num_gateway(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.num_gateway)
}

// int32 num_ok_gateway = 13 [json_name = "numOkGateway"];
inline void Statistics::clear_num_ok_gateway() {
  _impl_.num_ok_gateway_ = 0;
}
inline int32_t Statistics::_internal_num_ok_gateway() const {
  return _impl_.num_ok_gateway_;
}
inline int32_t Statistics::num_ok_gateway() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.num_ok_gateway)
  return _internal_num_ok_gateway();
}
inline void Statistics::_internal_set_num_ok_gateway(int32_t value) {
  
  _impl_.num_ok_gateway_ = value;
}
inline void Statistics::set_num_ok_gateway(int32_t value) {
  _internal_set_num_ok_gateway(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.num_ok_gateway)
}

// int32 num_ruined_gateway = 14 [json_name = "numRuinedGateway"];
inline void Statistics::clear_num_ruined_gateway() {
  _impl_.num_ruined_gateway_ = 0;
}
inline int32_t Statistics::_internal_num_ruined_gateway() const {
  return _impl_.num_ruined_gateway_;
}
inline int32_t Statistics::num_ruined_gateway() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.num_ruined_gateway)
  return _internal_num_ruined_gateway();
}
inline void Statistics::_internal_set_num_ruined_gateway(int32_t value) {
  
  _impl_.num_ruined_gateway_ = value;
}
inline void Statistics::set_num_ruined_gateway(int32_t value) {
  _internal_set_num_ruined_gateway(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.num_ruined_gateway)
}

// int32 num_stopped_gateway = 15 [json_name = "numStoppedGateway"];
inline void Statistics::clear_num_stopped_gateway() {
  _impl_.num_stopped_gateway_ = 0;
}
inline int32_t Statistics::_internal_num_stopped_gateway() const {
  return _impl_.num_stopped_gateway_;
}
inline int32_t Statistics::num_stopped_gateway() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.num_stopped_gateway)
  return _internal_num_stopped_gateway();
}
inline void Statistics::_internal_set_num_stopped_gateway(int32_t value) {
  
  _impl_.num_stopped_gateway_ = value;
}
inline void Statistics::set_num_stopped_gateway(int32_t value) {
  _internal_set_num_stopped_gateway(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.num_stopped_gateway)
}

// int32 num_overloaded_gateway = 16 [json_name = "numOverloadedGateway"];
inline void Statistics::clear_num_overloaded_gateway() {
  _impl_.num_overloaded_gateway_ = 0;
}
inline int32_t Statistics::_internal_num_overloaded_gateway() const {
  return _impl_.num_overloaded_gateway_;
}
inline int32_t Statistics::num_overloaded_gateway() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.num_overloaded_gateway)
  return _internal_num_overloaded_gateway();
}
inline void Statistics::_internal_set_num_overloaded_gateway(int32_t value) {
  
  _impl_.num_overloaded_gateway_ = value;
}
inline void Statistics::set_num_overloaded_gateway(int32_t value) {
  _internal_set_num_overloaded_gateway(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.num_overloaded_gateway)
}

// int32 num_battery_gateway = 17 [json_name = "numBatteryGateway"];
inline void Statistics::clear_num_battery_gateway() {
  _impl_.num_battery_gateway_ = 0;
}
inline int32_t Statistics::_internal_num_battery_gateway() const {
  return _impl_.num_battery_gateway_;
}
inline int32_t Statistics::num_battery_gateway() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.num_battery_gateway)
  return _internal_num_battery_gateway();
}
inline void Statistics::_internal_set_num_battery_gateway(int32_t value) {
  
  _impl_.num_battery_gateway_ = value;
}
inline void Statistics::set_num_battery_gateway(int32_t value) {
  _internal_set_num_battery_gateway(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.num_battery_gateway)
}

// double power_consumption = 18 [json_name = "powerConsumption"];
inline void Statistics::clear_power_consumption() {
  _impl_.power_consumption_ = 0;
}
inline double Statistics::_internal_power_consumption() const {
  return _impl_.power_consumption_;
}
inline double Statistics::power_consumption() const {
  // @@protoc_insertion_point(field_get:city.comm.output.v1.Statistics.power_consumption)
  return _internal_power_consumption();
}
inline void Statistics::_internal_set_power_consumption(double value) {
  
  _impl_.power_consumption_ = value;
}
inline void Statistics::set_power_consumption(double value) {
  _internal_set_power_consumption(value);
  // @@protoc_insertion_point(field_set:city.comm.output.v1.Statistics.power_consumption)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace output
}  // namespace comm
}  // namespace city

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::city::comm::output::v1::NodeStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::comm::output::v1::NodeStatus>() {
  return ::city::comm::output::v1::NodeStatus_descriptor();
}
template <> struct is_proto_enum< ::city::comm::output::v1::PersonConnectStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::comm::output::v1::PersonConnectStatus>() {
  return ::city::comm::output::v1::PersonConnectStatus_descriptor();
}
template <> struct is_proto_enum< ::city::comm::output::v1::PersonDemandStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::comm::output::v1::PersonDemandStatus>() {
  return ::city::comm::output::v1::PersonDemandStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fcomm_2foutput_2fv1_2foutput_2eproto
