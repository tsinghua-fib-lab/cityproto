// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/comm/input/v1/comm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fcomm_2finput_2fv1_2fcomm_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_city_2fcomm_2finput_2fv1_2fcomm_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "city/geo/v2/geo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_city_2fcomm_2finput_2fv1_2fcomm_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fcomm_2finput_2fv1_2fcomm_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_city_2fcomm_2finput_2fv1_2fcomm_2eproto;
namespace city {
namespace comm {
namespace input {
namespace v1 {
class CommDemand;
struct CommDemandDefaultTypeInternal;
extern CommDemandDefaultTypeInternal _CommDemand_default_instance_;
class CommDemands;
struct CommDemandsDefaultTypeInternal;
extern CommDemandsDefaultTypeInternal _CommDemands_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Nodes;
struct NodesDefaultTypeInternal;
extern NodesDefaultTypeInternal _Nodes_default_instance_;
class Pump;
struct PumpDefaultTypeInternal;
extern PumpDefaultTypeInternal _Pump_default_instance_;
class RepairStation;
struct RepairStationDefaultTypeInternal;
extern RepairStationDefaultTypeInternal _RepairStation_default_instance_;
}  // namespace v1
}  // namespace input
}  // namespace comm
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace city {
namespace comm {
namespace input {
namespace v1 {
enum NodeType : int {
  NODE_TYPE_UNSPECIFIED = 0,
  NODE_TYPE_INTERNET = 1,
  NODE_TYPE_GATEWAY = 2,
  NODE_TYPE_BASE_STATION = 3,
  NodeType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  NodeType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool NodeType_IsValid(int value);
constexpr NodeType NodeType_MIN = static_cast<NodeType>(0);
constexpr NodeType NodeType_MAX = static_cast<NodeType>(3);
constexpr int NodeType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
NodeType_descriptor();
template <typename T>
const std::string& NodeType_Name(T value) {
  static_assert(std::is_same<T, NodeType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NodeType_Name().");
  return NodeType_Name(static_cast<NodeType>(value));
}
template <>
inline const std::string& NodeType_Name(NodeType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<NodeType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool NodeType_Parse(absl::string_view name, NodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeType>(
      NodeType_descriptor(), name, value);
}
enum BaseStationType : int {
  BASE_STATION_TYPE_UNSPECIFIED = 0,
  BASE_STATION_TYPE_INDOOR = 1,
  BASE_STATION_TYPE_OUTDOOR = 2,
  BaseStationType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BaseStationType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BaseStationType_IsValid(int value);
constexpr BaseStationType BaseStationType_MIN = static_cast<BaseStationType>(0);
constexpr BaseStationType BaseStationType_MAX = static_cast<BaseStationType>(2);
constexpr int BaseStationType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
BaseStationType_descriptor();
template <typename T>
const std::string& BaseStationType_Name(T value) {
  static_assert(std::is_same<T, BaseStationType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BaseStationType_Name().");
  return BaseStationType_Name(static_cast<BaseStationType>(value));
}
template <>
inline const std::string& BaseStationType_Name(BaseStationType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BaseStationType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool BaseStationType_Parse(absl::string_view name, BaseStationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BaseStationType>(
      BaseStationType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Node final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.comm.input.v1.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Node(::google::protobuf::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Node& from) {
    Node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.comm.input.v1.Node";
  }
  protected:
  explicit Node(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenIdsFieldNumber = 4,
    kPositionFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kParentIdFieldNumber = 3,
    kAoiIdFieldNumber = 6,
    kFreqRangeIdFieldNumber = 7,
    kBaseStationTypeFieldNumber = 8,
  };
  // repeated int32 children_ids = 4 [json_name = "childrenIds"];
  int children_ids_size() const;
  private:
  int _internal_children_ids_size() const;

  public:
  void clear_children_ids() ;
  ::int32_t children_ids(int index) const;
  void set_children_ids(int index, ::int32_t value);
  void add_children_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& children_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_children_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_children_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_children_ids();

  public:
  // optional .city.geo.v2.Position position = 5 [json_name = "position"];
  bool has_position() const;
  void clear_position() ;
  const ::city::geo::v2::Position& position() const;
  PROTOBUF_NODISCARD ::city::geo::v2::Position* release_position();
  ::city::geo::v2::Position* mutable_position();
  void set_allocated_position(::city::geo::v2::Position* value);
  void unsafe_arena_set_allocated_position(::city::geo::v2::Position* value);
  ::city::geo::v2::Position* unsafe_arena_release_position();

  private:
  const ::city::geo::v2::Position& _internal_position() const;
  ::city::geo::v2::Position* _internal_mutable_position();

  public:
  // int32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .city.comm.input.v1.NodeType type = 2 [json_name = "type"];
  void clear_type() ;
  ::city::comm::input::v1::NodeType type() const;
  void set_type(::city::comm::input::v1::NodeType value);

  private:
  ::city::comm::input::v1::NodeType _internal_type() const;
  void _internal_set_type(::city::comm::input::v1::NodeType value);

  public:
  // int32 parent_id = 3 [json_name = "parentId"];
  void clear_parent_id() ;
  ::int32_t parent_id() const;
  void set_parent_id(::int32_t value);

  private:
  ::int32_t _internal_parent_id() const;
  void _internal_set_parent_id(::int32_t value);

  public:
  // optional int32 aoi_id = 6 [json_name = "aoiId"];
  bool has_aoi_id() const;
  void clear_aoi_id() ;
  ::int32_t aoi_id() const;
  void set_aoi_id(::int32_t value);

  private:
  ::int32_t _internal_aoi_id() const;
  void _internal_set_aoi_id(::int32_t value);

  public:
  // optional int32 freq_range_id = 7 [json_name = "freqRangeId"];
  bool has_freq_range_id() const;
  void clear_freq_range_id() ;
  ::int32_t freq_range_id() const;
  void set_freq_range_id(::int32_t value);

  private:
  ::int32_t _internal_freq_range_id() const;
  void _internal_set_freq_range_id(::int32_t value);

  public:
  // optional .city.comm.input.v1.BaseStationType base_station_type = 8 [json_name = "baseStationType"];
  bool has_base_station_type() const;
  void clear_base_station_type() ;
  ::city::comm::input::v1::BaseStationType base_station_type() const;
  void set_base_station_type(::city::comm::input::v1::BaseStationType value);

  private:
  ::city::comm::input::v1::BaseStationType _internal_base_station_type() const;
  void _internal_set_base_station_type(::city::comm::input::v1::BaseStationType value);

  public:
  // @@protoc_insertion_point(class_scope:city.comm.input.v1.Node)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> children_ids_;
    mutable ::google::protobuf::internal::CachedSize _children_ids_cached_byte_size_;
    ::city::geo::v2::Position* position_;
    ::int32_t id_;
    int type_;
    ::int32_t parent_id_;
    ::int32_t aoi_id_;
    ::int32_t freq_range_id_;
    int base_station_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcomm_2finput_2fv1_2fcomm_2eproto;
};// -------------------------------------------------------------------

class RepairStation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.comm.input.v1.RepairStation) */ {
 public:
  inline RepairStation() : RepairStation(nullptr) {}
  ~RepairStation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RepairStation(::google::protobuf::internal::ConstantInitialized);

  RepairStation(const RepairStation& from);
  RepairStation(RepairStation&& from) noexcept
    : RepairStation() {
    *this = ::std::move(from);
  }

  inline RepairStation& operator=(const RepairStation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepairStation& operator=(RepairStation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepairStation& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepairStation* internal_default_instance() {
    return reinterpret_cast<const RepairStation*>(
               &_RepairStation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RepairStation& a, RepairStation& b) {
    a.Swap(&b);
  }
  inline void Swap(RepairStation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepairStation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepairStation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepairStation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RepairStation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RepairStation& from) {
    RepairStation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepairStation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.comm.input.v1.RepairStation";
  }
  protected:
  explicit RepairStation(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kIdFieldNumber = 1,
    kAoiIdFieldNumber = 2,
  };
  // .city.geo.v2.Position position = 3 [json_name = "position"];
  bool has_position() const;
  void clear_position() ;
  const ::city::geo::v2::Position& position() const;
  PROTOBUF_NODISCARD ::city::geo::v2::Position* release_position();
  ::city::geo::v2::Position* mutable_position();
  void set_allocated_position(::city::geo::v2::Position* value);
  void unsafe_arena_set_allocated_position(::city::geo::v2::Position* value);
  ::city::geo::v2::Position* unsafe_arena_release_position();

  private:
  const ::city::geo::v2::Position& _internal_position() const;
  ::city::geo::v2::Position* _internal_mutable_position();

  public:
  // int32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 aoi_id = 2 [json_name = "aoiId"];
  void clear_aoi_id() ;
  ::int32_t aoi_id() const;
  void set_aoi_id(::int32_t value);

  private:
  ::int32_t _internal_aoi_id() const;
  void _internal_set_aoi_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.comm.input.v1.RepairStation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::city::geo::v2::Position* position_;
    ::int32_t id_;
    ::int32_t aoi_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcomm_2finput_2fv1_2fcomm_2eproto;
};// -------------------------------------------------------------------

class Pump final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.comm.input.v1.Pump) */ {
 public:
  inline Pump() : Pump(nullptr) {}
  ~Pump() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Pump(::google::protobuf::internal::ConstantInitialized);

  Pump(const Pump& from);
  Pump(Pump&& from) noexcept
    : Pump() {
    *this = ::std::move(from);
  }

  inline Pump& operator=(const Pump& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pump& operator=(Pump&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pump& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pump* internal_default_instance() {
    return reinterpret_cast<const Pump*>(
               &_Pump_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pump& a, Pump& b) {
    a.Swap(&b);
  }
  inline void Swap(Pump* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pump* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pump* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pump>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Pump& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Pump& from) {
    Pump::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pump* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.comm.input.v1.Pump";
  }
  protected:
  explicit Pump(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .city.geo.v2.Position position = 2 [json_name = "position"];
  bool has_position() const;
  void clear_position() ;
  const ::city::geo::v2::Position& position() const;
  PROTOBUF_NODISCARD ::city::geo::v2::Position* release_position();
  ::city::geo::v2::Position* mutable_position();
  void set_allocated_position(::city::geo::v2::Position* value);
  void unsafe_arena_set_allocated_position(::city::geo::v2::Position* value);
  ::city::geo::v2::Position* unsafe_arena_release_position();

  private:
  const ::city::geo::v2::Position& _internal_position() const;
  ::city::geo::v2::Position* _internal_mutable_position();

  public:
  // int32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.comm.input.v1.Pump)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::city::geo::v2::Position* position_;
    ::int32_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcomm_2finput_2fv1_2fcomm_2eproto;
};// -------------------------------------------------------------------

class CommDemand final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.comm.input.v1.CommDemand) */ {
 public:
  inline CommDemand() : CommDemand(nullptr) {}
  ~CommDemand() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CommDemand(::google::protobuf::internal::ConstantInitialized);

  CommDemand(const CommDemand& from);
  CommDemand(CommDemand&& from) noexcept
    : CommDemand() {
    *this = ::std::move(from);
  }

  inline CommDemand& operator=(const CommDemand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommDemand& operator=(CommDemand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommDemand& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommDemand* internal_default_instance() {
    return reinterpret_cast<const CommDemand*>(
               &_CommDemand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommDemand& a, CommDemand& b) {
    a.Swap(&b);
  }
  inline void Swap(CommDemand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommDemand* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommDemand* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommDemand>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommDemand& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CommDemand& from) {
    CommDemand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommDemand* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.comm.input.v1.CommDemand";
  }
  protected:
  explicit CommDemand(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDemandsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated double demands = 2 [json_name = "demands"];
  int demands_size() const;
  private:
  int _internal_demands_size() const;

  public:
  void clear_demands() ;
  double demands(int index) const;
  void set_demands(int index, double value);
  void add_demands(double value);
  const ::google::protobuf::RepeatedField<double>& demands() const;
  ::google::protobuf::RepeatedField<double>* mutable_demands();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_demands() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_demands();

  public:
  // int32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.comm.input.v1.CommDemand)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<double> demands_;
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcomm_2finput_2fv1_2fcomm_2eproto;
};// -------------------------------------------------------------------

class Nodes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.comm.input.v1.Nodes) */ {
 public:
  inline Nodes() : Nodes(nullptr) {}
  ~Nodes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Nodes(::google::protobuf::internal::ConstantInitialized);

  Nodes(const Nodes& from);
  Nodes(Nodes&& from) noexcept
    : Nodes() {
    *this = ::std::move(from);
  }

  inline Nodes& operator=(const Nodes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Nodes& operator=(Nodes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Nodes& default_instance() {
    return *internal_default_instance();
  }
  static inline const Nodes* internal_default_instance() {
    return reinterpret_cast<const Nodes*>(
               &_Nodes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Nodes& a, Nodes& b) {
    a.Swap(&b);
  }
  inline void Swap(Nodes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Nodes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Nodes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Nodes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Nodes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Nodes& from) {
    Nodes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nodes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.comm.input.v1.Nodes";
  }
  protected:
  explicit Nodes(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kRepairStationsFieldNumber = 2,
    kPumpsFieldNumber = 3,
  };
  // repeated .city.comm.input.v1.Node nodes = 1 [json_name = "nodes"];
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;

  public:
  void clear_nodes() ;
  ::city::comm::input::v1::Node* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::Node >*
      mutable_nodes();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::Node>& _internal_nodes() const;
  ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::Node>* _internal_mutable_nodes();
  public:
  const ::city::comm::input::v1::Node& nodes(int index) const;
  ::city::comm::input::v1::Node* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::Node >&
      nodes() const;
  // repeated .city.comm.input.v1.RepairStation repair_stations = 2 [json_name = "repairStations"];
  int repair_stations_size() const;
  private:
  int _internal_repair_stations_size() const;

  public:
  void clear_repair_stations() ;
  ::city::comm::input::v1::RepairStation* mutable_repair_stations(int index);
  ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::RepairStation >*
      mutable_repair_stations();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::RepairStation>& _internal_repair_stations() const;
  ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::RepairStation>* _internal_mutable_repair_stations();
  public:
  const ::city::comm::input::v1::RepairStation& repair_stations(int index) const;
  ::city::comm::input::v1::RepairStation* add_repair_stations();
  const ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::RepairStation >&
      repair_stations() const;
  // repeated .city.comm.input.v1.Pump pumps = 3 [json_name = "pumps"];
  int pumps_size() const;
  private:
  int _internal_pumps_size() const;

  public:
  void clear_pumps() ;
  ::city::comm::input::v1::Pump* mutable_pumps(int index);
  ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::Pump >*
      mutable_pumps();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::Pump>& _internal_pumps() const;
  ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::Pump>* _internal_mutable_pumps();
  public:
  const ::city::comm::input::v1::Pump& pumps(int index) const;
  ::city::comm::input::v1::Pump* add_pumps();
  const ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::Pump >&
      pumps() const;
  // @@protoc_insertion_point(class_scope:city.comm.input.v1.Nodes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::Node > nodes_;
    ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::RepairStation > repair_stations_;
    ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::Pump > pumps_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcomm_2finput_2fv1_2fcomm_2eproto;
};// -------------------------------------------------------------------

class CommDemands final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.comm.input.v1.CommDemands) */ {
 public:
  inline CommDemands() : CommDemands(nullptr) {}
  ~CommDemands() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CommDemands(::google::protobuf::internal::ConstantInitialized);

  CommDemands(const CommDemands& from);
  CommDemands(CommDemands&& from) noexcept
    : CommDemands() {
    *this = ::std::move(from);
  }

  inline CommDemands& operator=(const CommDemands& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommDemands& operator=(CommDemands&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommDemands& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommDemands* internal_default_instance() {
    return reinterpret_cast<const CommDemands*>(
               &_CommDemands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CommDemands& a, CommDemands& b) {
    a.Swap(&b);
  }
  inline void Swap(CommDemands* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommDemands* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommDemands* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommDemands>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommDemands& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CommDemands& from) {
    CommDemands::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommDemands* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.comm.input.v1.CommDemands";
  }
  protected:
  explicit CommDemands(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommDemandsFieldNumber = 1,
  };
  // repeated .city.comm.input.v1.CommDemand comm_demands = 1 [json_name = "commDemands"];
  int comm_demands_size() const;
  private:
  int _internal_comm_demands_size() const;

  public:
  void clear_comm_demands() ;
  ::city::comm::input::v1::CommDemand* mutable_comm_demands(int index);
  ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::CommDemand >*
      mutable_comm_demands();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::CommDemand>& _internal_comm_demands() const;
  ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::CommDemand>* _internal_mutable_comm_demands();
  public:
  const ::city::comm::input::v1::CommDemand& comm_demands(int index) const;
  ::city::comm::input::v1::CommDemand* add_comm_demands();
  const ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::CommDemand >&
      comm_demands() const;
  // @@protoc_insertion_point(class_scope:city.comm.input.v1.CommDemands)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::CommDemand > comm_demands_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcomm_2finput_2fv1_2fcomm_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Node

// int32 id = 1 [json_name = "id"];
inline void Node::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t Node::id() const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.Node.id)
  return _internal_id();
}
inline void Node::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.comm.input.v1.Node.id)
}
inline ::int32_t Node::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Node::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .city.comm.input.v1.NodeType type = 2 [json_name = "type"];
inline void Node::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::comm::input::v1::NodeType Node::type() const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.Node.type)
  return _internal_type();
}
inline void Node::set_type(::city::comm::input::v1::NodeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.comm.input.v1.Node.type)
}
inline ::city::comm::input::v1::NodeType Node::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::comm::input::v1::NodeType>(_impl_.type_);
}
inline void Node::_internal_set_type(::city::comm::input::v1::NodeType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// int32 parent_id = 3 [json_name = "parentId"];
inline void Node::clear_parent_id() {
  _impl_.parent_id_ = 0;
}
inline ::int32_t Node::parent_id() const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.Node.parent_id)
  return _internal_parent_id();
}
inline void Node::set_parent_id(::int32_t value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:city.comm.input.v1.Node.parent_id)
}
inline ::int32_t Node::_internal_parent_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_id_;
}
inline void Node::_internal_set_parent_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_id_ = value;
}

// repeated int32 children_ids = 4 [json_name = "childrenIds"];
inline int Node::_internal_children_ids_size() const {
  return _internal_children_ids().size();
}
inline int Node::children_ids_size() const {
  return _internal_children_ids_size();
}
inline void Node::clear_children_ids() {
  _internal_mutable_children_ids()->Clear();
}
inline ::int32_t Node::children_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.Node.children_ids)
  return _internal_children_ids().Get(index);
}
inline void Node::set_children_ids(int index, ::int32_t value) {
  _internal_mutable_children_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:city.comm.input.v1.Node.children_ids)
}
inline void Node::add_children_ids(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_children_ids()->Add(value);
  // @@protoc_insertion_point(field_add:city.comm.input.v1.Node.children_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Node::children_ids() const {
  // @@protoc_insertion_point(field_list:city.comm.input.v1.Node.children_ids)
  return _internal_children_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Node::mutable_children_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.comm.input.v1.Node.children_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_children_ids();
}

inline const ::google::protobuf::RepeatedField<::int32_t>& Node::_internal_children_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.children_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Node::_internal_mutable_children_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.children_ids_;
}

// optional .city.geo.v2.Position position = 5 [json_name = "position"];
inline bool Node::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::city::geo::v2::Position& Node::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::geo::v2::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::Position&>(::city::geo::v2::_Position_default_instance_);
}
inline const ::city::geo::v2::Position& Node::position() const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.Node.position)
  return _internal_position();
}
inline void Node::unsafe_arena_set_allocated_position(::city::geo::v2::Position* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::city::geo::v2::Position*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.comm.input.v1.Node.position)
}
inline ::city::geo::v2::Position* Node::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::Position* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::geo::v2::Position* Node::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.comm.input.v1.Node.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::city::geo::v2::Position* Node::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::Position>(GetArenaForAllocation());
    _impl_.position_ = reinterpret_cast<::city::geo::v2::Position*>(p);
  }
  return _impl_.position_;
}
inline ::city::geo::v2::Position* Node::mutable_position() {
  ::city::geo::v2::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:city.comm.input.v1.Node.position)
  return _msg;
}
inline void Node::set_allocated_position(::city::geo::v2::Position* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::city::geo::v2::Position*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.comm.input.v1.Node.position)
}

// optional int32 aoi_id = 6 [json_name = "aoiId"];
inline bool Node::has_aoi_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Node::clear_aoi_id() {
  _impl_.aoi_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Node::aoi_id() const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.Node.aoi_id)
  return _internal_aoi_id();
}
inline void Node::set_aoi_id(::int32_t value) {
  _internal_set_aoi_id(value);
  // @@protoc_insertion_point(field_set:city.comm.input.v1.Node.aoi_id)
}
inline ::int32_t Node::_internal_aoi_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aoi_id_;
}
inline void Node::_internal_set_aoi_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.aoi_id_ = value;
}

// optional int32 freq_range_id = 7 [json_name = "freqRangeId"];
inline bool Node::has_freq_range_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Node::clear_freq_range_id() {
  _impl_.freq_range_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Node::freq_range_id() const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.Node.freq_range_id)
  return _internal_freq_range_id();
}
inline void Node::set_freq_range_id(::int32_t value) {
  _internal_set_freq_range_id(value);
  // @@protoc_insertion_point(field_set:city.comm.input.v1.Node.freq_range_id)
}
inline ::int32_t Node::_internal_freq_range_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.freq_range_id_;
}
inline void Node::_internal_set_freq_range_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.freq_range_id_ = value;
}

// optional .city.comm.input.v1.BaseStationType base_station_type = 8 [json_name = "baseStationType"];
inline bool Node::has_base_station_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Node::clear_base_station_type() {
  _impl_.base_station_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::city::comm::input::v1::BaseStationType Node::base_station_type() const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.Node.base_station_type)
  return _internal_base_station_type();
}
inline void Node::set_base_station_type(::city::comm::input::v1::BaseStationType value) {
  _internal_set_base_station_type(value);
  // @@protoc_insertion_point(field_set:city.comm.input.v1.Node.base_station_type)
}
inline ::city::comm::input::v1::BaseStationType Node::_internal_base_station_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::comm::input::v1::BaseStationType>(_impl_.base_station_type_);
}
inline void Node::_internal_set_base_station_type(::city::comm::input::v1::BaseStationType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.base_station_type_ = value;
}

// -------------------------------------------------------------------

// RepairStation

// int32 id = 1 [json_name = "id"];
inline void RepairStation::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t RepairStation::id() const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.RepairStation.id)
  return _internal_id();
}
inline void RepairStation::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.comm.input.v1.RepairStation.id)
}
inline ::int32_t RepairStation::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void RepairStation::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// int32 aoi_id = 2 [json_name = "aoiId"];
inline void RepairStation::clear_aoi_id() {
  _impl_.aoi_id_ = 0;
}
inline ::int32_t RepairStation::aoi_id() const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.RepairStation.aoi_id)
  return _internal_aoi_id();
}
inline void RepairStation::set_aoi_id(::int32_t value) {
  _internal_set_aoi_id(value);
  // @@protoc_insertion_point(field_set:city.comm.input.v1.RepairStation.aoi_id)
}
inline ::int32_t RepairStation::_internal_aoi_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aoi_id_;
}
inline void RepairStation::_internal_set_aoi_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.aoi_id_ = value;
}

// .city.geo.v2.Position position = 3 [json_name = "position"];
inline bool RepairStation::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::city::geo::v2::Position& RepairStation::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::geo::v2::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::Position&>(::city::geo::v2::_Position_default_instance_);
}
inline const ::city::geo::v2::Position& RepairStation::position() const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.RepairStation.position)
  return _internal_position();
}
inline void RepairStation::unsafe_arena_set_allocated_position(::city::geo::v2::Position* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::city::geo::v2::Position*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.comm.input.v1.RepairStation.position)
}
inline ::city::geo::v2::Position* RepairStation::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::Position* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::geo::v2::Position* RepairStation::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.comm.input.v1.RepairStation.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::city::geo::v2::Position* RepairStation::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::Position>(GetArenaForAllocation());
    _impl_.position_ = reinterpret_cast<::city::geo::v2::Position*>(p);
  }
  return _impl_.position_;
}
inline ::city::geo::v2::Position* RepairStation::mutable_position() {
  ::city::geo::v2::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:city.comm.input.v1.RepairStation.position)
  return _msg;
}
inline void RepairStation::set_allocated_position(::city::geo::v2::Position* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::city::geo::v2::Position*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.comm.input.v1.RepairStation.position)
}

// -------------------------------------------------------------------

// Pump

// int32 id = 1 [json_name = "id"];
inline void Pump::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t Pump::id() const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.Pump.id)
  return _internal_id();
}
inline void Pump::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.comm.input.v1.Pump.id)
}
inline ::int32_t Pump::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Pump::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .city.geo.v2.Position position = 2 [json_name = "position"];
inline bool Pump::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::city::geo::v2::Position& Pump::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::geo::v2::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::Position&>(::city::geo::v2::_Position_default_instance_);
}
inline const ::city::geo::v2::Position& Pump::position() const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.Pump.position)
  return _internal_position();
}
inline void Pump::unsafe_arena_set_allocated_position(::city::geo::v2::Position* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::city::geo::v2::Position*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.comm.input.v1.Pump.position)
}
inline ::city::geo::v2::Position* Pump::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::Position* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::geo::v2::Position* Pump::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.comm.input.v1.Pump.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::city::geo::v2::Position* Pump::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::Position>(GetArenaForAllocation());
    _impl_.position_ = reinterpret_cast<::city::geo::v2::Position*>(p);
  }
  return _impl_.position_;
}
inline ::city::geo::v2::Position* Pump::mutable_position() {
  ::city::geo::v2::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:city.comm.input.v1.Pump.position)
  return _msg;
}
inline void Pump::set_allocated_position(::city::geo::v2::Position* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::city::geo::v2::Position*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.comm.input.v1.Pump.position)
}

// -------------------------------------------------------------------

// CommDemand

// int32 id = 1 [json_name = "id"];
inline void CommDemand::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t CommDemand::id() const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.CommDemand.id)
  return _internal_id();
}
inline void CommDemand::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.comm.input.v1.CommDemand.id)
}
inline ::int32_t CommDemand::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void CommDemand::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// repeated double demands = 2 [json_name = "demands"];
inline int CommDemand::_internal_demands_size() const {
  return _internal_demands().size();
}
inline int CommDemand::demands_size() const {
  return _internal_demands_size();
}
inline void CommDemand::clear_demands() {
  _internal_mutable_demands()->Clear();
}
inline double CommDemand::demands(int index) const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.CommDemand.demands)
  return _internal_demands().Get(index);
}
inline void CommDemand::set_demands(int index, double value) {
  _internal_mutable_demands()->Set(index, value);
  // @@protoc_insertion_point(field_set:city.comm.input.v1.CommDemand.demands)
}
inline void CommDemand::add_demands(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_demands()->Add(value);
  // @@protoc_insertion_point(field_add:city.comm.input.v1.CommDemand.demands)
}
inline const ::google::protobuf::RepeatedField<double>& CommDemand::demands() const {
  // @@protoc_insertion_point(field_list:city.comm.input.v1.CommDemand.demands)
  return _internal_demands();
}
inline ::google::protobuf::RepeatedField<double>* CommDemand::mutable_demands() {
  // @@protoc_insertion_point(field_mutable_list:city.comm.input.v1.CommDemand.demands)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_demands();
}

inline const ::google::protobuf::RepeatedField<double>& CommDemand::_internal_demands() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.demands_;
}
inline ::google::protobuf::RepeatedField<double>* CommDemand::_internal_mutable_demands() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.demands_;
}

// -------------------------------------------------------------------

// Nodes

// repeated .city.comm.input.v1.Node nodes = 1 [json_name = "nodes"];
inline int Nodes::_internal_nodes_size() const {
  return _internal_nodes().size();
}
inline int Nodes::nodes_size() const {
  return _internal_nodes_size();
}
inline void Nodes::clear_nodes() {
  _internal_mutable_nodes()->Clear();
}
inline ::city::comm::input::v1::Node* Nodes::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:city.comm.input.v1.Nodes.nodes)
  return _internal_mutable_nodes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::Node >*
Nodes::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:city.comm.input.v1.Nodes.nodes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_nodes();
}
inline const ::city::comm::input::v1::Node& Nodes::nodes(int index) const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.Nodes.nodes)
    return _internal_nodes().Get(index);
}
inline ::city::comm::input::v1::Node* Nodes::add_nodes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::comm::input::v1::Node* _add = _internal_mutable_nodes()->Add();
  // @@protoc_insertion_point(field_add:city.comm.input.v1.Nodes.nodes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::Node >&
Nodes::nodes() const {
  // @@protoc_insertion_point(field_list:city.comm.input.v1.Nodes.nodes)
  return _internal_nodes();
}
inline const ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::Node>&
Nodes::_internal_nodes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nodes_;
}
inline ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::Node>*
Nodes::_internal_mutable_nodes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.nodes_;
}

// repeated .city.comm.input.v1.RepairStation repair_stations = 2 [json_name = "repairStations"];
inline int Nodes::_internal_repair_stations_size() const {
  return _internal_repair_stations().size();
}
inline int Nodes::repair_stations_size() const {
  return _internal_repair_stations_size();
}
inline void Nodes::clear_repair_stations() {
  _internal_mutable_repair_stations()->Clear();
}
inline ::city::comm::input::v1::RepairStation* Nodes::mutable_repair_stations(int index) {
  // @@protoc_insertion_point(field_mutable:city.comm.input.v1.Nodes.repair_stations)
  return _internal_mutable_repair_stations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::RepairStation >*
Nodes::mutable_repair_stations() {
  // @@protoc_insertion_point(field_mutable_list:city.comm.input.v1.Nodes.repair_stations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_repair_stations();
}
inline const ::city::comm::input::v1::RepairStation& Nodes::repair_stations(int index) const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.Nodes.repair_stations)
    return _internal_repair_stations().Get(index);
}
inline ::city::comm::input::v1::RepairStation* Nodes::add_repair_stations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::comm::input::v1::RepairStation* _add = _internal_mutable_repair_stations()->Add();
  // @@protoc_insertion_point(field_add:city.comm.input.v1.Nodes.repair_stations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::RepairStation >&
Nodes::repair_stations() const {
  // @@protoc_insertion_point(field_list:city.comm.input.v1.Nodes.repair_stations)
  return _internal_repair_stations();
}
inline const ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::RepairStation>&
Nodes::_internal_repair_stations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.repair_stations_;
}
inline ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::RepairStation>*
Nodes::_internal_mutable_repair_stations() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.repair_stations_;
}

// repeated .city.comm.input.v1.Pump pumps = 3 [json_name = "pumps"];
inline int Nodes::_internal_pumps_size() const {
  return _internal_pumps().size();
}
inline int Nodes::pumps_size() const {
  return _internal_pumps_size();
}
inline void Nodes::clear_pumps() {
  _internal_mutable_pumps()->Clear();
}
inline ::city::comm::input::v1::Pump* Nodes::mutable_pumps(int index) {
  // @@protoc_insertion_point(field_mutable:city.comm.input.v1.Nodes.pumps)
  return _internal_mutable_pumps()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::Pump >*
Nodes::mutable_pumps() {
  // @@protoc_insertion_point(field_mutable_list:city.comm.input.v1.Nodes.pumps)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pumps();
}
inline const ::city::comm::input::v1::Pump& Nodes::pumps(int index) const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.Nodes.pumps)
    return _internal_pumps().Get(index);
}
inline ::city::comm::input::v1::Pump* Nodes::add_pumps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::comm::input::v1::Pump* _add = _internal_mutable_pumps()->Add();
  // @@protoc_insertion_point(field_add:city.comm.input.v1.Nodes.pumps)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::Pump >&
Nodes::pumps() const {
  // @@protoc_insertion_point(field_list:city.comm.input.v1.Nodes.pumps)
  return _internal_pumps();
}
inline const ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::Pump>&
Nodes::_internal_pumps() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pumps_;
}
inline ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::Pump>*
Nodes::_internal_mutable_pumps() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pumps_;
}

// -------------------------------------------------------------------

// CommDemands

// repeated .city.comm.input.v1.CommDemand comm_demands = 1 [json_name = "commDemands"];
inline int CommDemands::_internal_comm_demands_size() const {
  return _internal_comm_demands().size();
}
inline int CommDemands::comm_demands_size() const {
  return _internal_comm_demands_size();
}
inline void CommDemands::clear_comm_demands() {
  _internal_mutable_comm_demands()->Clear();
}
inline ::city::comm::input::v1::CommDemand* CommDemands::mutable_comm_demands(int index) {
  // @@protoc_insertion_point(field_mutable:city.comm.input.v1.CommDemands.comm_demands)
  return _internal_mutable_comm_demands()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::CommDemand >*
CommDemands::mutable_comm_demands() {
  // @@protoc_insertion_point(field_mutable_list:city.comm.input.v1.CommDemands.comm_demands)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_comm_demands();
}
inline const ::city::comm::input::v1::CommDemand& CommDemands::comm_demands(int index) const {
  // @@protoc_insertion_point(field_get:city.comm.input.v1.CommDemands.comm_demands)
    return _internal_comm_demands().Get(index);
}
inline ::city::comm::input::v1::CommDemand* CommDemands::add_comm_demands() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::comm::input::v1::CommDemand* _add = _internal_mutable_comm_demands()->Add();
  // @@protoc_insertion_point(field_add:city.comm.input.v1.CommDemands.comm_demands)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::comm::input::v1::CommDemand >&
CommDemands::comm_demands() const {
  // @@protoc_insertion_point(field_list:city.comm.input.v1.CommDemands.comm_demands)
  return _internal_comm_demands();
}
inline const ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::CommDemand>&
CommDemands::_internal_comm_demands() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.comm_demands_;
}
inline ::google::protobuf::RepeatedPtrField<::city::comm::input::v1::CommDemand>*
CommDemands::_internal_mutable_comm_demands() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.comm_demands_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace input
}  // namespace comm
}  // namespace city


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::city::comm::input::v1::NodeType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::comm::input::v1::NodeType>() {
  return ::city::comm::input::v1::NodeType_descriptor();
}
template <>
struct is_proto_enum<::city::comm::input::v1::BaseStationType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::comm::input::v1::BaseStationType>() {
  return ::city::comm::input::v1::BaseStationType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_city_2fcomm_2finput_2fv1_2fcomm_2eproto_2epb_2eh
