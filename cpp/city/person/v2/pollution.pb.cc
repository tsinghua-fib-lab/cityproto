// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/person/v2/pollution.proto

#include "city/person/v2/pollution.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace person {
namespace v2 {
PROTOBUF_CONSTEXPR PollutionStatistics::PollutionStatistics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.co2_)*/0
  , /*decltype(_impl_.pm_)*/0
  , /*decltype(_impl_.voc_)*/0
  , /*decltype(_impl_.nox_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PollutionStatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PollutionStatisticsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PollutionStatisticsDefaultTypeInternal() {}
  union {
    PollutionStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PollutionStatisticsDefaultTypeInternal _PollutionStatistics_default_instance_;
}  // namespace v2
}  // namespace person
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fperson_2fv2_2fpollution_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_city_2fperson_2fv2_2fpollution_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fperson_2fv2_2fpollution_2eproto = nullptr;

const uint32_t TableStruct_city_2fperson_2fv2_2fpollution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PollutionStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PollutionStatistics, _impl_.co2_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PollutionStatistics, _impl_.pm_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PollutionStatistics, _impl_.voc_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PollutionStatistics, _impl_.nox_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::person::v2::PollutionStatistics)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::person::v2::_PollutionStatistics_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fperson_2fv2_2fpollution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036city/person/v2/pollution.proto\022\016city.p"
  "erson.v2\"[\n\023PollutionStatistics\022\020\n\003co2\030\001"
  " \001(\001R\003co2\022\016\n\002pm\030\002 \001(\001R\002pm\022\020\n\003voc\030\003 \001(\001R\003"
  "voc\022\020\n\003nox\030\004 \001(\001R\003noxB\267\001\n\022com.city.perso"
  "n.v2B\016PollutionProtoP\001Z7git.fiblab.net/s"
  "im/protos/v2/go/city/person/v2;personv2\242"
  "\002\003CPX\252\002\016City.Person.V2\312\002\016City\\Person\\V2\342"
  "\002\032City\\Person\\V2\\GPBMetadata\352\002\020City::Per"
  "son::V2b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_city_2fperson_2fv2_2fpollution_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fperson_2fv2_2fpollution_2eproto = {
    false, false, 335, descriptor_table_protodef_city_2fperson_2fv2_2fpollution_2eproto,
    "city/person/v2/pollution.proto",
    &descriptor_table_city_2fperson_2fv2_2fpollution_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_city_2fperson_2fv2_2fpollution_2eproto::offsets,
    file_level_metadata_city_2fperson_2fv2_2fpollution_2eproto, file_level_enum_descriptors_city_2fperson_2fv2_2fpollution_2eproto,
    file_level_service_descriptors_city_2fperson_2fv2_2fpollution_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fperson_2fv2_2fpollution_2eproto_getter() {
  return &descriptor_table_city_2fperson_2fv2_2fpollution_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fperson_2fv2_2fpollution_2eproto(&descriptor_table_city_2fperson_2fv2_2fpollution_2eproto);
namespace city {
namespace person {
namespace v2 {

// ===================================================================

class PollutionStatistics::_Internal {
 public:
};

PollutionStatistics::PollutionStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v2.PollutionStatistics)
}
PollutionStatistics::PollutionStatistics(const PollutionStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PollutionStatistics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.co2_){}
    , decltype(_impl_.pm_){}
    , decltype(_impl_.voc_){}
    , decltype(_impl_.nox_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.co2_, &from._impl_.co2_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.nox_) -
    reinterpret_cast<char*>(&_impl_.co2_)) + sizeof(_impl_.nox_));
  // @@protoc_insertion_point(copy_constructor:city.person.v2.PollutionStatistics)
}

inline void PollutionStatistics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.co2_){0}
    , decltype(_impl_.pm_){0}
    , decltype(_impl_.voc_){0}
    , decltype(_impl_.nox_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PollutionStatistics::~PollutionStatistics() {
  // @@protoc_insertion_point(destructor:city.person.v2.PollutionStatistics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PollutionStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PollutionStatistics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PollutionStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v2.PollutionStatistics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.co2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.nox_) -
      reinterpret_cast<char*>(&_impl_.co2_)) + sizeof(_impl_.nox_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PollutionStatistics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double co2 = 1 [json_name = "co2"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.co2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pm = 2 [json_name = "pm"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.pm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double voc = 3 [json_name = "voc"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.voc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double nox = 4 [json_name = "nox"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.nox_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PollutionStatistics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v2.PollutionStatistics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double co2 = 1 [json_name = "co2"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_co2 = this->_internal_co2();
  uint64_t raw_co2;
  memcpy(&raw_co2, &tmp_co2, sizeof(tmp_co2));
  if (raw_co2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_co2(), target);
  }

  // double pm = 2 [json_name = "pm"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pm = this->_internal_pm();
  uint64_t raw_pm;
  memcpy(&raw_pm, &tmp_pm, sizeof(tmp_pm));
  if (raw_pm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_pm(), target);
  }

  // double voc = 3 [json_name = "voc"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_voc = this->_internal_voc();
  uint64_t raw_voc;
  memcpy(&raw_voc, &tmp_voc, sizeof(tmp_voc));
  if (raw_voc != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_voc(), target);
  }

  // double nox = 4 [json_name = "nox"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_nox = this->_internal_nox();
  uint64_t raw_nox;
  memcpy(&raw_nox, &tmp_nox, sizeof(tmp_nox));
  if (raw_nox != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_nox(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v2.PollutionStatistics)
  return target;
}

size_t PollutionStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v2.PollutionStatistics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double co2 = 1 [json_name = "co2"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_co2 = this->_internal_co2();
  uint64_t raw_co2;
  memcpy(&raw_co2, &tmp_co2, sizeof(tmp_co2));
  if (raw_co2 != 0) {
    total_size += 1 + 8;
  }

  // double pm = 2 [json_name = "pm"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pm = this->_internal_pm();
  uint64_t raw_pm;
  memcpy(&raw_pm, &tmp_pm, sizeof(tmp_pm));
  if (raw_pm != 0) {
    total_size += 1 + 8;
  }

  // double voc = 3 [json_name = "voc"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_voc = this->_internal_voc();
  uint64_t raw_voc;
  memcpy(&raw_voc, &tmp_voc, sizeof(tmp_voc));
  if (raw_voc != 0) {
    total_size += 1 + 8;
  }

  // double nox = 4 [json_name = "nox"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_nox = this->_internal_nox();
  uint64_t raw_nox;
  memcpy(&raw_nox, &tmp_nox, sizeof(tmp_nox));
  if (raw_nox != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PollutionStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PollutionStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PollutionStatistics::GetClassData() const { return &_class_data_; }


void PollutionStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PollutionStatistics*>(&to_msg);
  auto& from = static_cast<const PollutionStatistics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v2.PollutionStatistics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_co2 = from._internal_co2();
  uint64_t raw_co2;
  memcpy(&raw_co2, &tmp_co2, sizeof(tmp_co2));
  if (raw_co2 != 0) {
    _this->_internal_set_co2(from._internal_co2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pm = from._internal_pm();
  uint64_t raw_pm;
  memcpy(&raw_pm, &tmp_pm, sizeof(tmp_pm));
  if (raw_pm != 0) {
    _this->_internal_set_pm(from._internal_pm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_voc = from._internal_voc();
  uint64_t raw_voc;
  memcpy(&raw_voc, &tmp_voc, sizeof(tmp_voc));
  if (raw_voc != 0) {
    _this->_internal_set_voc(from._internal_voc());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_nox = from._internal_nox();
  uint64_t raw_nox;
  memcpy(&raw_nox, &tmp_nox, sizeof(tmp_nox));
  if (raw_nox != 0) {
    _this->_internal_set_nox(from._internal_nox());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PollutionStatistics::CopyFrom(const PollutionStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v2.PollutionStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollutionStatistics::IsInitialized() const {
  return true;
}

void PollutionStatistics::InternalSwap(PollutionStatistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PollutionStatistics, _impl_.nox_)
      + sizeof(PollutionStatistics::_impl_.nox_)
      - PROTOBUF_FIELD_OFFSET(PollutionStatistics, _impl_.co2_)>(
          reinterpret_cast<char*>(&_impl_.co2_),
          reinterpret_cast<char*>(&other->_impl_.co2_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PollutionStatistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv2_2fpollution_2eproto_getter, &descriptor_table_city_2fperson_2fv2_2fpollution_2eproto_once,
      file_level_metadata_city_2fperson_2fv2_2fpollution_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace person
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::person::v2::PollutionStatistics*
Arena::CreateMaybeMessage< ::city::person::v2::PollutionStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v2::PollutionStatistics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
