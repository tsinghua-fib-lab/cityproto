// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/person/v2/pollution.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv2_2fpollution_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv2_2fpollution_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fperson_2fv2_2fpollution_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fperson_2fv2_2fpollution_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fperson_2fv2_2fpollution_2eproto;
namespace city {
namespace person {
namespace v2 {
class PollutionStatistics;
struct PollutionStatisticsDefaultTypeInternal;
extern PollutionStatisticsDefaultTypeInternal _PollutionStatistics_default_instance_;
}  // namespace v2
}  // namespace person
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::person::v2::PollutionStatistics* Arena::CreateMaybeMessage<::city::person::v2::PollutionStatistics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace person {
namespace v2 {

// ===================================================================

class PollutionStatistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.PollutionStatistics) */ {
 public:
  inline PollutionStatistics() : PollutionStatistics(nullptr) {}
  ~PollutionStatistics() override;
  explicit PROTOBUF_CONSTEXPR PollutionStatistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PollutionStatistics(const PollutionStatistics& from);
  PollutionStatistics(PollutionStatistics&& from) noexcept
    : PollutionStatistics() {
    *this = ::std::move(from);
  }

  inline PollutionStatistics& operator=(const PollutionStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline PollutionStatistics& operator=(PollutionStatistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PollutionStatistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const PollutionStatistics* internal_default_instance() {
    return reinterpret_cast<const PollutionStatistics*>(
               &_PollutionStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PollutionStatistics& a, PollutionStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(PollutionStatistics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PollutionStatistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PollutionStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PollutionStatistics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PollutionStatistics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PollutionStatistics& from) {
    PollutionStatistics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PollutionStatistics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.PollutionStatistics";
  }
  protected:
  explicit PollutionStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCo2FieldNumber = 1,
    kPmFieldNumber = 2,
    kVocFieldNumber = 3,
    kNoxFieldNumber = 4,
  };
  // double co2 = 1 [json_name = "co2"];
  void clear_co2();
  double co2() const;
  void set_co2(double value);
  private:
  double _internal_co2() const;
  void _internal_set_co2(double value);
  public:

  // double pm = 2 [json_name = "pm"];
  void clear_pm();
  double pm() const;
  void set_pm(double value);
  private:
  double _internal_pm() const;
  void _internal_set_pm(double value);
  public:

  // double voc = 3 [json_name = "voc"];
  void clear_voc();
  double voc() const;
  void set_voc(double value);
  private:
  double _internal_voc() const;
  void _internal_set_voc(double value);
  public:

  // double nox = 4 [json_name = "nox"];
  void clear_nox();
  double nox() const;
  void set_nox(double value);
  private:
  double _internal_nox() const;
  void _internal_set_nox(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.PollutionStatistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double co2_;
    double pm_;
    double voc_;
    double nox_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fpollution_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PollutionStatistics

// double co2 = 1 [json_name = "co2"];
inline void PollutionStatistics::clear_co2() {
  _impl_.co2_ = 0;
}
inline double PollutionStatistics::_internal_co2() const {
  return _impl_.co2_;
}
inline double PollutionStatistics::co2() const {
  // @@protoc_insertion_point(field_get:city.person.v2.PollutionStatistics.co2)
  return _internal_co2();
}
inline void PollutionStatistics::_internal_set_co2(double value) {
  
  _impl_.co2_ = value;
}
inline void PollutionStatistics::set_co2(double value) {
  _internal_set_co2(value);
  // @@protoc_insertion_point(field_set:city.person.v2.PollutionStatistics.co2)
}

// double pm = 2 [json_name = "pm"];
inline void PollutionStatistics::clear_pm() {
  _impl_.pm_ = 0;
}
inline double PollutionStatistics::_internal_pm() const {
  return _impl_.pm_;
}
inline double PollutionStatistics::pm() const {
  // @@protoc_insertion_point(field_get:city.person.v2.PollutionStatistics.pm)
  return _internal_pm();
}
inline void PollutionStatistics::_internal_set_pm(double value) {
  
  _impl_.pm_ = value;
}
inline void PollutionStatistics::set_pm(double value) {
  _internal_set_pm(value);
  // @@protoc_insertion_point(field_set:city.person.v2.PollutionStatistics.pm)
}

// double voc = 3 [json_name = "voc"];
inline void PollutionStatistics::clear_voc() {
  _impl_.voc_ = 0;
}
inline double PollutionStatistics::_internal_voc() const {
  return _impl_.voc_;
}
inline double PollutionStatistics::voc() const {
  // @@protoc_insertion_point(field_get:city.person.v2.PollutionStatistics.voc)
  return _internal_voc();
}
inline void PollutionStatistics::_internal_set_voc(double value) {
  
  _impl_.voc_ = value;
}
inline void PollutionStatistics::set_voc(double value) {
  _internal_set_voc(value);
  // @@protoc_insertion_point(field_set:city.person.v2.PollutionStatistics.voc)
}

// double nox = 4 [json_name = "nox"];
inline void PollutionStatistics::clear_nox() {
  _impl_.nox_ = 0;
}
inline double PollutionStatistics::_internal_nox() const {
  return _impl_.nox_;
}
inline double PollutionStatistics::nox() const {
  // @@protoc_insertion_point(field_get:city.person.v2.PollutionStatistics.nox)
  return _internal_nox();
}
inline void PollutionStatistics::_internal_set_nox(double value) {
  
  _impl_.nox_ = value;
}
inline void PollutionStatistics::set_nox(double value) {
  _internal_set_nox(value);
  // @@protoc_insertion_point(field_set:city.person.v2.PollutionStatistics.nox)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace person
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv2_2fpollution_2eproto
