// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/person/v2/vehicle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv2_2fvehicle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv2_2fvehicle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "city/person/v2/carbon.pb.h"
#include "city/person/v2/motion.pb.h"
#include "city/person/v2/pollution.pb.h"
#include "city/routing/v2/routing.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fperson_2fv2_2fvehicle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fperson_2fv2_2fvehicle_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fperson_2fv2_2fvehicle_2eproto;
namespace city {
namespace person {
namespace v2 {
class LC;
struct LCDefaultTypeInternal;
extern LCDefaultTypeInternal _LC_default_instance_;
class ObservedLane;
struct ObservedLaneDefaultTypeInternal;
extern ObservedLaneDefaultTypeInternal _ObservedLane_default_instance_;
class ObservedVehicle;
struct ObservedVehicleDefaultTypeInternal;
extern ObservedVehicleDefaultTypeInternal _ObservedVehicle_default_instance_;
class VehicleAction;
struct VehicleActionDefaultTypeInternal;
extern VehicleActionDefaultTypeInternal _VehicleAction_default_instance_;
class VehicleEnv;
struct VehicleEnvDefaultTypeInternal;
extern VehicleEnvDefaultTypeInternal _VehicleEnv_default_instance_;
class VehicleRouteAction;
struct VehicleRouteActionDefaultTypeInternal;
extern VehicleRouteActionDefaultTypeInternal _VehicleRouteAction_default_instance_;
class VehicleRuntime;
struct VehicleRuntimeDefaultTypeInternal;
extern VehicleRuntimeDefaultTypeInternal _VehicleRuntime_default_instance_;
}  // namespace v2
}  // namespace person
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::person::v2::LC* Arena::CreateMaybeMessage<::city::person::v2::LC>(Arena*);
template<> ::city::person::v2::ObservedLane* Arena::CreateMaybeMessage<::city::person::v2::ObservedLane>(Arena*);
template<> ::city::person::v2::ObservedVehicle* Arena::CreateMaybeMessage<::city::person::v2::ObservedVehicle>(Arena*);
template<> ::city::person::v2::VehicleAction* Arena::CreateMaybeMessage<::city::person::v2::VehicleAction>(Arena*);
template<> ::city::person::v2::VehicleEnv* Arena::CreateMaybeMessage<::city::person::v2::VehicleEnv>(Arena*);
template<> ::city::person::v2::VehicleRouteAction* Arena::CreateMaybeMessage<::city::person::v2::VehicleRouteAction>(Arena*);
template<> ::city::person::v2::VehicleRuntime* Arena::CreateMaybeMessage<::city::person::v2::VehicleRuntime>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace person {
namespace v2 {

enum VehicleParkingStatus : int {
  VEHICLE_PARKING_STATUS_UNSPECIFIED = 0,
  VEHICLE_PARKING_STATUS_PARKING = 1,
  VEHICLE_PARKING_STATUS_LEAVING = 2,
  VEHICLE_PARKING_STATUS_DRIVING = 3,
  VehicleParkingStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VehicleParkingStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VehicleParkingStatus_IsValid(int value);
constexpr VehicleParkingStatus VehicleParkingStatus_MIN = VEHICLE_PARKING_STATUS_UNSPECIFIED;
constexpr VehicleParkingStatus VehicleParkingStatus_MAX = VEHICLE_PARKING_STATUS_DRIVING;
constexpr int VehicleParkingStatus_ARRAYSIZE = VehicleParkingStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleParkingStatus_descriptor();
template<typename T>
inline const std::string& VehicleParkingStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleParkingStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleParkingStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleParkingStatus_descriptor(), enum_t_value);
}
inline bool VehicleParkingStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VehicleParkingStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleParkingStatus>(
    VehicleParkingStatus_descriptor(), name, value);
}
enum VehicleRelation : int {
  VEHICLE_RELATION_UNSPECIFIED = 0,
  VEHICLE_RELATION_AHEAD = 1,
  VEHICLE_RELATION_BEHIND = 2,
  VEHICLE_RELATION_SHADOW_AHEAD = 3,
  VEHICLE_RELATION_SHADOW_BEHIND = 4,
  VEHICLE_RELATION_LEFT_AHEAD = 5,
  VEHICLE_RELATION_RIGHT_AHEAD = 6,
  VEHICLE_RELATION_LEFT_BEHIND = 7,
  VEHICLE_RELATION_RIGHT_BEHIND = 8,
  VehicleRelation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VehicleRelation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VehicleRelation_IsValid(int value);
constexpr VehicleRelation VehicleRelation_MIN = VEHICLE_RELATION_UNSPECIFIED;
constexpr VehicleRelation VehicleRelation_MAX = VEHICLE_RELATION_RIGHT_BEHIND;
constexpr int VehicleRelation_ARRAYSIZE = VehicleRelation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleRelation_descriptor();
template<typename T>
inline const std::string& VehicleRelation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleRelation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleRelation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleRelation_descriptor(), enum_t_value);
}
inline bool VehicleRelation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VehicleRelation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleRelation>(
    VehicleRelation_descriptor(), name, value);
}
enum LightState : int {
  LIGHT_STATE_UNSPECIFIED = 0,
  LIGHT_STATE_RED = 1,
  LIGHT_STATE_GREEN = 2,
  LIGHT_STATE_YELLOW = 3,
  LightState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LightState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LightState_IsValid(int value);
constexpr LightState LightState_MIN = LIGHT_STATE_UNSPECIFIED;
constexpr LightState LightState_MAX = LIGHT_STATE_YELLOW;
constexpr int LightState_ARRAYSIZE = LightState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightState_descriptor();
template<typename T>
inline const std::string& LightState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LightState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LightState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LightState_descriptor(), enum_t_value);
}
inline bool LightState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LightState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LightState>(
    LightState_descriptor(), name, value);
}
// ===================================================================

class LC final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.LC) */ {
 public:
  inline LC() : LC(nullptr) {}
  ~LC() override;
  explicit PROTOBUF_CONSTEXPR LC(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LC(const LC& from);
  LC(LC&& from) noexcept
    : LC() {
    *this = ::std::move(from);
  }

  inline LC& operator=(const LC& from) {
    CopyFrom(from);
    return *this;
  }
  inline LC& operator=(LC&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LC& default_instance() {
    return *internal_default_instance();
  }
  static inline const LC* internal_default_instance() {
    return reinterpret_cast<const LC*>(
               &_LC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LC& a, LC& b) {
    a.Swap(&b);
  }
  inline void Swap(LC* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LC* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LC>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LC& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LC& from) {
    LC::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LC* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.LC";
  }
  protected:
  explicit LC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShadowSFieldNumber = 2,
    kAngleFieldNumber = 3,
    kCompletedRatioFieldNumber = 4,
    kShadowLaneIdFieldNumber = 1,
  };
  // double shadow_s = 2 [json_name = "shadowS"];
  void clear_shadow_s();
  double shadow_s() const;
  void set_shadow_s(double value);
  private:
  double _internal_shadow_s() const;
  void _internal_set_shadow_s(double value);
  public:

  // double angle = 3 [json_name = "angle"];
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // double completed_ratio = 4 [json_name = "completedRatio"];
  void clear_completed_ratio();
  double completed_ratio() const;
  void set_completed_ratio(double value);
  private:
  double _internal_completed_ratio() const;
  void _internal_set_completed_ratio(double value);
  public:

  // int32 shadow_lane_id = 1 [json_name = "shadowLaneId"];
  void clear_shadow_lane_id();
  int32_t shadow_lane_id() const;
  void set_shadow_lane_id(int32_t value);
  private:
  int32_t _internal_shadow_lane_id() const;
  void _internal_set_shadow_lane_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.LC)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double shadow_s_;
    double angle_;
    double completed_ratio_;
    int32_t shadow_lane_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fvehicle_2eproto;
};
// -------------------------------------------------------------------

class VehicleAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.VehicleAction) */ {
 public:
  inline VehicleAction() : VehicleAction(nullptr) {}
  ~VehicleAction() override;
  explicit PROTOBUF_CONSTEXPR VehicleAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleAction(const VehicleAction& from);
  VehicleAction(VehicleAction&& from) noexcept
    : VehicleAction() {
    *this = ::std::move(from);
  }

  inline VehicleAction& operator=(const VehicleAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleAction& operator=(VehicleAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleAction* internal_default_instance() {
    return reinterpret_cast<const VehicleAction*>(
               &_VehicleAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VehicleAction& a, VehicleAction& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleAction& from) {
    VehicleAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.VehicleAction";
  }
  protected:
  explicit VehicleAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccFieldNumber = 1,
    kAngleFieldNumber = 3,
    kLcTargetIdFieldNumber = 2,
    kIdFieldNumber = 4,
  };
  // double acc = 1 [json_name = "acc"];
  void clear_acc();
  double acc() const;
  void set_acc(double value);
  private:
  double _internal_acc() const;
  void _internal_set_acc(double value);
  public:

  // double angle = 3 [json_name = "angle"];
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // optional int32 lc_target_id = 2 [json_name = "lcTargetId"];
  bool has_lc_target_id() const;
  private:
  bool _internal_has_lc_target_id() const;
  public:
  void clear_lc_target_id();
  int32_t lc_target_id() const;
  void set_lc_target_id(int32_t value);
  private:
  int32_t _internal_lc_target_id() const;
  void _internal_set_lc_target_id(int32_t value);
  public:

  // int32 id = 4 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.VehicleAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double acc_;
    double angle_;
    int32_t lc_target_id_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fvehicle_2eproto;
};
// -------------------------------------------------------------------

class VehicleRouteAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.VehicleRouteAction) */ {
 public:
  inline VehicleRouteAction() : VehicleRouteAction(nullptr) {}
  ~VehicleRouteAction() override;
  explicit PROTOBUF_CONSTEXPR VehicleRouteAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleRouteAction(const VehicleRouteAction& from);
  VehicleRouteAction(VehicleRouteAction&& from) noexcept
    : VehicleRouteAction() {
    *this = ::std::move(from);
  }

  inline VehicleRouteAction& operator=(const VehicleRouteAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleRouteAction& operator=(VehicleRouteAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleRouteAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleRouteAction* internal_default_instance() {
    return reinterpret_cast<const VehicleRouteAction*>(
               &_VehicleRouteAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VehicleRouteAction& a, VehicleRouteAction& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleRouteAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleRouteAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleRouteAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleRouteAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleRouteAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleRouteAction& from) {
    VehicleRouteAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleRouteAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.VehicleRouteAction";
  }
  protected:
  explicit VehicleRouteAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJourneyFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .city.routing.v2.Journey journey = 2 [json_name = "journey"];
  bool has_journey() const;
  private:
  bool _internal_has_journey() const;
  public:
  void clear_journey();
  const ::city::routing::v2::Journey& journey() const;
  PROTOBUF_NODISCARD ::city::routing::v2::Journey* release_journey();
  ::city::routing::v2::Journey* mutable_journey();
  void set_allocated_journey(::city::routing::v2::Journey* journey);
  private:
  const ::city::routing::v2::Journey& _internal_journey() const;
  ::city::routing::v2::Journey* _internal_mutable_journey();
  public:
  void unsafe_arena_set_allocated_journey(
      ::city::routing::v2::Journey* journey);
  ::city::routing::v2::Journey* unsafe_arena_release_journey();

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.VehicleRouteAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::routing::v2::Journey* journey_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fvehicle_2eproto;
};
// -------------------------------------------------------------------

class VehicleRuntime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.VehicleRuntime) */ {
 public:
  inline VehicleRuntime() : VehicleRuntime(nullptr) {}
  ~VehicleRuntime() override;
  explicit PROTOBUF_CONSTEXPR VehicleRuntime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleRuntime(const VehicleRuntime& from);
  VehicleRuntime(VehicleRuntime&& from) noexcept
    : VehicleRuntime() {
    *this = ::std::move(from);
  }

  inline VehicleRuntime& operator=(const VehicleRuntime& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleRuntime& operator=(VehicleRuntime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleRuntime& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleRuntime* internal_default_instance() {
    return reinterpret_cast<const VehicleRuntime*>(
               &_VehicleRuntime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VehicleRuntime& a, VehicleRuntime& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleRuntime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleRuntime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleRuntime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleRuntime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleRuntime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleRuntime& from) {
    VehicleRuntime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleRuntime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.VehicleRuntime";
  }
  protected:
  explicit VehicleRuntime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kLcFieldNumber = 4,
    kActionFieldNumber = 5,
    kCarbonFieldNumber = 11,
    kEmissionStatisticsFieldNumber = 12,
    kPollutionStatisticsFieldNumber = 13,
    kRunningDistanceFieldNumber = 6,
    kDepartureTimeFieldNumber = 8,
    kEtaFieldNumber = 9,
    kEtaFreeFlowFieldNumber = 10,
    kNumGoingAstrayFieldNumber = 7,
    kParkingStatusFieldNumber = 14,
  };
  // .city.person.v2.PersonMotion base = 1 [json_name = "base"];
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::city::person::v2::PersonMotion& base() const;
  PROTOBUF_NODISCARD ::city::person::v2::PersonMotion* release_base();
  ::city::person::v2::PersonMotion* mutable_base();
  void set_allocated_base(::city::person::v2::PersonMotion* base);
  private:
  const ::city::person::v2::PersonMotion& _internal_base() const;
  ::city::person::v2::PersonMotion* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::city::person::v2::PersonMotion* base);
  ::city::person::v2::PersonMotion* unsafe_arena_release_base();

  // optional .city.person.v2.LC lc = 4 [json_name = "lc"];
  bool has_lc() const;
  private:
  bool _internal_has_lc() const;
  public:
  void clear_lc();
  const ::city::person::v2::LC& lc() const;
  PROTOBUF_NODISCARD ::city::person::v2::LC* release_lc();
  ::city::person::v2::LC* mutable_lc();
  void set_allocated_lc(::city::person::v2::LC* lc);
  private:
  const ::city::person::v2::LC& _internal_lc() const;
  ::city::person::v2::LC* _internal_mutable_lc();
  public:
  void unsafe_arena_set_allocated_lc(
      ::city::person::v2::LC* lc);
  ::city::person::v2::LC* unsafe_arena_release_lc();

  // optional .city.person.v2.VehicleAction action = 5 [json_name = "action"];
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::city::person::v2::VehicleAction& action() const;
  PROTOBUF_NODISCARD ::city::person::v2::VehicleAction* release_action();
  ::city::person::v2::VehicleAction* mutable_action();
  void set_allocated_action(::city::person::v2::VehicleAction* action);
  private:
  const ::city::person::v2::VehicleAction& _internal_action() const;
  ::city::person::v2::VehicleAction* _internal_mutable_action();
  public:
  void unsafe_arena_set_allocated_action(
      ::city::person::v2::VehicleAction* action);
  ::city::person::v2::VehicleAction* unsafe_arena_release_action();

  // optional .city.person.v2.VehicleCarbon carbon = 11 [json_name = "carbon"];
  bool has_carbon() const;
  private:
  bool _internal_has_carbon() const;
  public:
  void clear_carbon();
  const ::city::person::v2::VehicleCarbon& carbon() const;
  PROTOBUF_NODISCARD ::city::person::v2::VehicleCarbon* release_carbon();
  ::city::person::v2::VehicleCarbon* mutable_carbon();
  void set_allocated_carbon(::city::person::v2::VehicleCarbon* carbon);
  private:
  const ::city::person::v2::VehicleCarbon& _internal_carbon() const;
  ::city::person::v2::VehicleCarbon* _internal_mutable_carbon();
  public:
  void unsafe_arena_set_allocated_carbon(
      ::city::person::v2::VehicleCarbon* carbon);
  ::city::person::v2::VehicleCarbon* unsafe_arena_release_carbon();

  // optional .city.person.v2.EmissionStatistics emission_statistics = 12 [json_name = "emissionStatistics"];
  bool has_emission_statistics() const;
  private:
  bool _internal_has_emission_statistics() const;
  public:
  void clear_emission_statistics();
  const ::city::person::v2::EmissionStatistics& emission_statistics() const;
  PROTOBUF_NODISCARD ::city::person::v2::EmissionStatistics* release_emission_statistics();
  ::city::person::v2::EmissionStatistics* mutable_emission_statistics();
  void set_allocated_emission_statistics(::city::person::v2::EmissionStatistics* emission_statistics);
  private:
  const ::city::person::v2::EmissionStatistics& _internal_emission_statistics() const;
  ::city::person::v2::EmissionStatistics* _internal_mutable_emission_statistics();
  public:
  void unsafe_arena_set_allocated_emission_statistics(
      ::city::person::v2::EmissionStatistics* emission_statistics);
  ::city::person::v2::EmissionStatistics* unsafe_arena_release_emission_statistics();

  // optional .city.person.v2.PollutionStatistics pollution_statistics = 13 [json_name = "pollutionStatistics"];
  bool has_pollution_statistics() const;
  private:
  bool _internal_has_pollution_statistics() const;
  public:
  void clear_pollution_statistics();
  const ::city::person::v2::PollutionStatistics& pollution_statistics() const;
  PROTOBUF_NODISCARD ::city::person::v2::PollutionStatistics* release_pollution_statistics();
  ::city::person::v2::PollutionStatistics* mutable_pollution_statistics();
  void set_allocated_pollution_statistics(::city::person::v2::PollutionStatistics* pollution_statistics);
  private:
  const ::city::person::v2::PollutionStatistics& _internal_pollution_statistics() const;
  ::city::person::v2::PollutionStatistics* _internal_mutable_pollution_statistics();
  public:
  void unsafe_arena_set_allocated_pollution_statistics(
      ::city::person::v2::PollutionStatistics* pollution_statistics);
  ::city::person::v2::PollutionStatistics* unsafe_arena_release_pollution_statistics();

  // double running_distance = 6 [json_name = "runningDistance"];
  void clear_running_distance();
  double running_distance() const;
  void set_running_distance(double value);
  private:
  double _internal_running_distance() const;
  void _internal_set_running_distance(double value);
  public:

  // double departure_time = 8 [json_name = "departureTime"];
  void clear_departure_time();
  double departure_time() const;
  void set_departure_time(double value);
  private:
  double _internal_departure_time() const;
  void _internal_set_departure_time(double value);
  public:

  // double eta = 9 [json_name = "eta"];
  void clear_eta();
  double eta() const;
  void set_eta(double value);
  private:
  double _internal_eta() const;
  void _internal_set_eta(double value);
  public:

  // double eta_free_flow = 10 [json_name = "etaFreeFlow"];
  void clear_eta_free_flow();
  double eta_free_flow() const;
  void set_eta_free_flow(double value);
  private:
  double _internal_eta_free_flow() const;
  void _internal_set_eta_free_flow(double value);
  public:

  // int32 num_going_astray = 7 [json_name = "numGoingAstray"];
  void clear_num_going_astray();
  int32_t num_going_astray() const;
  void set_num_going_astray(int32_t value);
  private:
  int32_t _internal_num_going_astray() const;
  void _internal_set_num_going_astray(int32_t value);
  public:

  // .city.person.v2.VehicleParkingStatus parking_status = 14 [json_name = "parkingStatus"];
  void clear_parking_status();
  ::city::person::v2::VehicleParkingStatus parking_status() const;
  void set_parking_status(::city::person::v2::VehicleParkingStatus value);
  private:
  ::city::person::v2::VehicleParkingStatus _internal_parking_status() const;
  void _internal_set_parking_status(::city::person::v2::VehicleParkingStatus value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.VehicleRuntime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::city::person::v2::PersonMotion* base_;
    ::city::person::v2::LC* lc_;
    ::city::person::v2::VehicleAction* action_;
    ::city::person::v2::VehicleCarbon* carbon_;
    ::city::person::v2::EmissionStatistics* emission_statistics_;
    ::city::person::v2::PollutionStatistics* pollution_statistics_;
    double running_distance_;
    double departure_time_;
    double eta_;
    double eta_free_flow_;
    int32_t num_going_astray_;
    int parking_status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fvehicle_2eproto;
};
// -------------------------------------------------------------------

class ObservedVehicle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.ObservedVehicle) */ {
 public:
  inline ObservedVehicle() : ObservedVehicle(nullptr) {}
  ~ObservedVehicle() override;
  explicit PROTOBUF_CONSTEXPR ObservedVehicle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObservedVehicle(const ObservedVehicle& from);
  ObservedVehicle(ObservedVehicle&& from) noexcept
    : ObservedVehicle() {
    *this = ::std::move(from);
  }

  inline ObservedVehicle& operator=(const ObservedVehicle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObservedVehicle& operator=(ObservedVehicle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObservedVehicle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObservedVehicle* internal_default_instance() {
    return reinterpret_cast<const ObservedVehicle*>(
               &_ObservedVehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ObservedVehicle& a, ObservedVehicle& b) {
    a.Swap(&b);
  }
  inline void Swap(ObservedVehicle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObservedVehicle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObservedVehicle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObservedVehicle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObservedVehicle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObservedVehicle& from) {
    ObservedVehicle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservedVehicle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.ObservedVehicle";
  }
  protected:
  explicit ObservedVehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotionFieldNumber = 2,
    kIdFieldNumber = 1,
    kRelationFieldNumber = 4,
    kRelativeDistanceFieldNumber = 3,
  };
  // .city.person.v2.PersonMotion motion = 2 [json_name = "motion"];
  bool has_motion() const;
  private:
  bool _internal_has_motion() const;
  public:
  void clear_motion();
  const ::city::person::v2::PersonMotion& motion() const;
  PROTOBUF_NODISCARD ::city::person::v2::PersonMotion* release_motion();
  ::city::person::v2::PersonMotion* mutable_motion();
  void set_allocated_motion(::city::person::v2::PersonMotion* motion);
  private:
  const ::city::person::v2::PersonMotion& _internal_motion() const;
  ::city::person::v2::PersonMotion* _internal_mutable_motion();
  public:
  void unsafe_arena_set_allocated_motion(
      ::city::person::v2::PersonMotion* motion);
  ::city::person::v2::PersonMotion* unsafe_arena_release_motion();

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .city.person.v2.VehicleRelation relation = 4 [json_name = "relation"];
  void clear_relation();
  ::city::person::v2::VehicleRelation relation() const;
  void set_relation(::city::person::v2::VehicleRelation value);
  private:
  ::city::person::v2::VehicleRelation _internal_relation() const;
  void _internal_set_relation(::city::person::v2::VehicleRelation value);
  public:

  // double relative_distance = 3 [json_name = "relativeDistance"];
  void clear_relative_distance();
  double relative_distance() const;
  void set_relative_distance(double value);
  private:
  double _internal_relative_distance() const;
  void _internal_set_relative_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.ObservedVehicle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::person::v2::PersonMotion* motion_;
    int32_t id_;
    int relation_;
    double relative_distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fvehicle_2eproto;
};
// -------------------------------------------------------------------

class ObservedLane final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.ObservedLane) */ {
 public:
  inline ObservedLane() : ObservedLane(nullptr) {}
  ~ObservedLane() override;
  explicit PROTOBUF_CONSTEXPR ObservedLane(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObservedLane(const ObservedLane& from);
  ObservedLane(ObservedLane&& from) noexcept
    : ObservedLane() {
    *this = ::std::move(from);
  }

  inline ObservedLane& operator=(const ObservedLane& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObservedLane& operator=(ObservedLane&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObservedLane& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObservedLane* internal_default_instance() {
    return reinterpret_cast<const ObservedLane*>(
               &_ObservedLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ObservedLane& a, ObservedLane& b) {
    a.Swap(&b);
  }
  inline void Swap(ObservedLane* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObservedLane* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObservedLane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObservedLane>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObservedLane& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObservedLane& from) {
    ObservedLane::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservedLane* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.ObservedLane";
  }
  protected:
  explicit ObservedLane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRestrictionFieldNumber = 2,
    kLightRemainingTimeFieldNumber = 4,
    kLightStateFieldNumber = 3,
  };
  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // bool restriction = 2 [json_name = "restriction"];
  void clear_restriction();
  bool restriction() const;
  void set_restriction(bool value);
  private:
  bool _internal_restriction() const;
  void _internal_set_restriction(bool value);
  public:

  // double light_remaining_time = 4 [json_name = "lightRemainingTime"];
  void clear_light_remaining_time();
  double light_remaining_time() const;
  void set_light_remaining_time(double value);
  private:
  double _internal_light_remaining_time() const;
  void _internal_set_light_remaining_time(double value);
  public:

  // .city.person.v2.LightState light_state = 3 [json_name = "lightState"];
  void clear_light_state();
  ::city::person::v2::LightState light_state() const;
  void set_light_state(::city::person::v2::LightState value);
  private:
  ::city::person::v2::LightState _internal_light_state() const;
  void _internal_set_light_state(::city::person::v2::LightState value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.ObservedLane)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    bool restriction_;
    double light_remaining_time_;
    int light_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fvehicle_2eproto;
};
// -------------------------------------------------------------------

class VehicleEnv final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.VehicleEnv) */ {
 public:
  inline VehicleEnv() : VehicleEnv(nullptr) {}
  ~VehicleEnv() override;
  explicit PROTOBUF_CONSTEXPR VehicleEnv(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleEnv(const VehicleEnv& from);
  VehicleEnv(VehicleEnv&& from) noexcept
    : VehicleEnv() {
    *this = ::std::move(from);
  }

  inline VehicleEnv& operator=(const VehicleEnv& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleEnv& operator=(VehicleEnv&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleEnv& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleEnv* internal_default_instance() {
    return reinterpret_cast<const VehicleEnv*>(
               &_VehicleEnv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VehicleEnv& a, VehicleEnv& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleEnv* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleEnv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleEnv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleEnv>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleEnv& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleEnv& from) {
    VehicleEnv::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleEnv* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.VehicleEnv";
  }
  protected:
  explicit VehicleEnv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObservedVehiclesFieldNumber = 4,
    kObservedLanesFieldNumber = 5,
    kRuntimeFieldNumber = 2,
    kJourneyFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .city.person.v2.ObservedVehicle observed_vehicles = 4 [json_name = "observedVehicles"];
  int observed_vehicles_size() const;
  private:
  int _internal_observed_vehicles_size() const;
  public:
  void clear_observed_vehicles();
  ::city::person::v2::ObservedVehicle* mutable_observed_vehicles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::ObservedVehicle >*
      mutable_observed_vehicles();
  private:
  const ::city::person::v2::ObservedVehicle& _internal_observed_vehicles(int index) const;
  ::city::person::v2::ObservedVehicle* _internal_add_observed_vehicles();
  public:
  const ::city::person::v2::ObservedVehicle& observed_vehicles(int index) const;
  ::city::person::v2::ObservedVehicle* add_observed_vehicles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::ObservedVehicle >&
      observed_vehicles() const;

  // repeated .city.person.v2.ObservedLane observed_lanes = 5 [json_name = "observedLanes"];
  int observed_lanes_size() const;
  private:
  int _internal_observed_lanes_size() const;
  public:
  void clear_observed_lanes();
  ::city::person::v2::ObservedLane* mutable_observed_lanes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::ObservedLane >*
      mutable_observed_lanes();
  private:
  const ::city::person::v2::ObservedLane& _internal_observed_lanes(int index) const;
  ::city::person::v2::ObservedLane* _internal_add_observed_lanes();
  public:
  const ::city::person::v2::ObservedLane& observed_lanes(int index) const;
  ::city::person::v2::ObservedLane* add_observed_lanes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::ObservedLane >&
      observed_lanes() const;

  // .city.person.v2.VehicleRuntime runtime = 2 [json_name = "runtime"];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::city::person::v2::VehicleRuntime& runtime() const;
  PROTOBUF_NODISCARD ::city::person::v2::VehicleRuntime* release_runtime();
  ::city::person::v2::VehicleRuntime* mutable_runtime();
  void set_allocated_runtime(::city::person::v2::VehicleRuntime* runtime);
  private:
  const ::city::person::v2::VehicleRuntime& _internal_runtime() const;
  ::city::person::v2::VehicleRuntime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::city::person::v2::VehicleRuntime* runtime);
  ::city::person::v2::VehicleRuntime* unsafe_arena_release_runtime();

  // .city.routing.v2.Journey journey = 3 [json_name = "journey"];
  bool has_journey() const;
  private:
  bool _internal_has_journey() const;
  public:
  void clear_journey();
  const ::city::routing::v2::Journey& journey() const;
  PROTOBUF_NODISCARD ::city::routing::v2::Journey* release_journey();
  ::city::routing::v2::Journey* mutable_journey();
  void set_allocated_journey(::city::routing::v2::Journey* journey);
  private:
  const ::city::routing::v2::Journey& _internal_journey() const;
  ::city::routing::v2::Journey* _internal_mutable_journey();
  public:
  void unsafe_arena_set_allocated_journey(
      ::city::routing::v2::Journey* journey);
  ::city::routing::v2::Journey* unsafe_arena_release_journey();

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.VehicleEnv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::ObservedVehicle > observed_vehicles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::ObservedLane > observed_lanes_;
    ::city::person::v2::VehicleRuntime* runtime_;
    ::city::routing::v2::Journey* journey_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fvehicle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LC

// int32 shadow_lane_id = 1 [json_name = "shadowLaneId"];
inline void LC::clear_shadow_lane_id() {
  _impl_.shadow_lane_id_ = 0;
}
inline int32_t LC::_internal_shadow_lane_id() const {
  return _impl_.shadow_lane_id_;
}
inline int32_t LC::shadow_lane_id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.LC.shadow_lane_id)
  return _internal_shadow_lane_id();
}
inline void LC::_internal_set_shadow_lane_id(int32_t value) {
  
  _impl_.shadow_lane_id_ = value;
}
inline void LC::set_shadow_lane_id(int32_t value) {
  _internal_set_shadow_lane_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.LC.shadow_lane_id)
}

// double shadow_s = 2 [json_name = "shadowS"];
inline void LC::clear_shadow_s() {
  _impl_.shadow_s_ = 0;
}
inline double LC::_internal_shadow_s() const {
  return _impl_.shadow_s_;
}
inline double LC::shadow_s() const {
  // @@protoc_insertion_point(field_get:city.person.v2.LC.shadow_s)
  return _internal_shadow_s();
}
inline void LC::_internal_set_shadow_s(double value) {
  
  _impl_.shadow_s_ = value;
}
inline void LC::set_shadow_s(double value) {
  _internal_set_shadow_s(value);
  // @@protoc_insertion_point(field_set:city.person.v2.LC.shadow_s)
}

// double angle = 3 [json_name = "angle"];
inline void LC::clear_angle() {
  _impl_.angle_ = 0;
}
inline double LC::_internal_angle() const {
  return _impl_.angle_;
}
inline double LC::angle() const {
  // @@protoc_insertion_point(field_get:city.person.v2.LC.angle)
  return _internal_angle();
}
inline void LC::_internal_set_angle(double value) {
  
  _impl_.angle_ = value;
}
inline void LC::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:city.person.v2.LC.angle)
}

// double completed_ratio = 4 [json_name = "completedRatio"];
inline void LC::clear_completed_ratio() {
  _impl_.completed_ratio_ = 0;
}
inline double LC::_internal_completed_ratio() const {
  return _impl_.completed_ratio_;
}
inline double LC::completed_ratio() const {
  // @@protoc_insertion_point(field_get:city.person.v2.LC.completed_ratio)
  return _internal_completed_ratio();
}
inline void LC::_internal_set_completed_ratio(double value) {
  
  _impl_.completed_ratio_ = value;
}
inline void LC::set_completed_ratio(double value) {
  _internal_set_completed_ratio(value);
  // @@protoc_insertion_point(field_set:city.person.v2.LC.completed_ratio)
}

// -------------------------------------------------------------------

// VehicleAction

// int32 id = 4 [json_name = "id"];
inline void VehicleAction::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t VehicleAction::_internal_id() const {
  return _impl_.id_;
}
inline int32_t VehicleAction::id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAction.id)
  return _internal_id();
}
inline void VehicleAction::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void VehicleAction::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAction.id)
}

// double acc = 1 [json_name = "acc"];
inline void VehicleAction::clear_acc() {
  _impl_.acc_ = 0;
}
inline double VehicleAction::_internal_acc() const {
  return _impl_.acc_;
}
inline double VehicleAction::acc() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAction.acc)
  return _internal_acc();
}
inline void VehicleAction::_internal_set_acc(double value) {
  
  _impl_.acc_ = value;
}
inline void VehicleAction::set_acc(double value) {
  _internal_set_acc(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAction.acc)
}

// optional int32 lc_target_id = 2 [json_name = "lcTargetId"];
inline bool VehicleAction::_internal_has_lc_target_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehicleAction::has_lc_target_id() const {
  return _internal_has_lc_target_id();
}
inline void VehicleAction::clear_lc_target_id() {
  _impl_.lc_target_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t VehicleAction::_internal_lc_target_id() const {
  return _impl_.lc_target_id_;
}
inline int32_t VehicleAction::lc_target_id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAction.lc_target_id)
  return _internal_lc_target_id();
}
inline void VehicleAction::_internal_set_lc_target_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lc_target_id_ = value;
}
inline void VehicleAction::set_lc_target_id(int32_t value) {
  _internal_set_lc_target_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAction.lc_target_id)
}

// double angle = 3 [json_name = "angle"];
inline void VehicleAction::clear_angle() {
  _impl_.angle_ = 0;
}
inline double VehicleAction::_internal_angle() const {
  return _impl_.angle_;
}
inline double VehicleAction::angle() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAction.angle)
  return _internal_angle();
}
inline void VehicleAction::_internal_set_angle(double value) {
  
  _impl_.angle_ = value;
}
inline void VehicleAction::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAction.angle)
}

// -------------------------------------------------------------------

// VehicleRouteAction

// int32 id = 1 [json_name = "id"];
inline void VehicleRouteAction::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t VehicleRouteAction::_internal_id() const {
  return _impl_.id_;
}
inline int32_t VehicleRouteAction::id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleRouteAction.id)
  return _internal_id();
}
inline void VehicleRouteAction::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void VehicleRouteAction::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleRouteAction.id)
}

// .city.routing.v2.Journey journey = 2 [json_name = "journey"];
inline bool VehicleRouteAction::_internal_has_journey() const {
  return this != internal_default_instance() && _impl_.journey_ != nullptr;
}
inline bool VehicleRouteAction::has_journey() const {
  return _internal_has_journey();
}
inline const ::city::routing::v2::Journey& VehicleRouteAction::_internal_journey() const {
  const ::city::routing::v2::Journey* p = _impl_.journey_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::routing::v2::Journey&>(
      ::city::routing::v2::_Journey_default_instance_);
}
inline const ::city::routing::v2::Journey& VehicleRouteAction::journey() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleRouteAction.journey)
  return _internal_journey();
}
inline void VehicleRouteAction::unsafe_arena_set_allocated_journey(
    ::city::routing::v2::Journey* journey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.journey_);
  }
  _impl_.journey_ = journey;
  if (journey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.VehicleRouteAction.journey)
}
inline ::city::routing::v2::Journey* VehicleRouteAction::release_journey() {
  
  ::city::routing::v2::Journey* temp = _impl_.journey_;
  _impl_.journey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::routing::v2::Journey* VehicleRouteAction::unsafe_arena_release_journey() {
  // @@protoc_insertion_point(field_release:city.person.v2.VehicleRouteAction.journey)
  
  ::city::routing::v2::Journey* temp = _impl_.journey_;
  _impl_.journey_ = nullptr;
  return temp;
}
inline ::city::routing::v2::Journey* VehicleRouteAction::_internal_mutable_journey() {
  
  if (_impl_.journey_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::routing::v2::Journey>(GetArenaForAllocation());
    _impl_.journey_ = p;
  }
  return _impl_.journey_;
}
inline ::city::routing::v2::Journey* VehicleRouteAction::mutable_journey() {
  ::city::routing::v2::Journey* _msg = _internal_mutable_journey();
  // @@protoc_insertion_point(field_mutable:city.person.v2.VehicleRouteAction.journey)
  return _msg;
}
inline void VehicleRouteAction::set_allocated_journey(::city::routing::v2::Journey* journey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.journey_);
  }
  if (journey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(journey));
    if (message_arena != submessage_arena) {
      journey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, journey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.journey_ = journey;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.VehicleRouteAction.journey)
}

// -------------------------------------------------------------------

// VehicleRuntime

// .city.person.v2.PersonMotion base = 1 [json_name = "base"];
inline bool VehicleRuntime::_internal_has_base() const {
  return this != internal_default_instance() && _impl_.base_ != nullptr;
}
inline bool VehicleRuntime::has_base() const {
  return _internal_has_base();
}
inline const ::city::person::v2::PersonMotion& VehicleRuntime::_internal_base() const {
  const ::city::person::v2::PersonMotion* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::PersonMotion&>(
      ::city::person::v2::_PersonMotion_default_instance_);
}
inline const ::city::person::v2::PersonMotion& VehicleRuntime::base() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleRuntime.base)
  return _internal_base();
}
inline void VehicleRuntime::unsafe_arena_set_allocated_base(
    ::city::person::v2::PersonMotion* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.VehicleRuntime.base)
}
inline ::city::person::v2::PersonMotion* VehicleRuntime::release_base() {
  
  ::city::person::v2::PersonMotion* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::PersonMotion* VehicleRuntime::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:city.person.v2.VehicleRuntime.base)
  
  ::city::person::v2::PersonMotion* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::city::person::v2::PersonMotion* VehicleRuntime::_internal_mutable_base() {
  
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::PersonMotion>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::city::person::v2::PersonMotion* VehicleRuntime::mutable_base() {
  ::city::person::v2::PersonMotion* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:city.person.v2.VehicleRuntime.base)
  return _msg;
}
inline void VehicleRuntime::set_allocated_base(::city::person::v2::PersonMotion* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.VehicleRuntime.base)
}

// optional .city.person.v2.LC lc = 4 [json_name = "lc"];
inline bool VehicleRuntime::_internal_has_lc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lc_ != nullptr);
  return value;
}
inline bool VehicleRuntime::has_lc() const {
  return _internal_has_lc();
}
inline void VehicleRuntime::clear_lc() {
  if (_impl_.lc_ != nullptr) _impl_.lc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::city::person::v2::LC& VehicleRuntime::_internal_lc() const {
  const ::city::person::v2::LC* p = _impl_.lc_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::LC&>(
      ::city::person::v2::_LC_default_instance_);
}
inline const ::city::person::v2::LC& VehicleRuntime::lc() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleRuntime.lc)
  return _internal_lc();
}
inline void VehicleRuntime::unsafe_arena_set_allocated_lc(
    ::city::person::v2::LC* lc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lc_);
  }
  _impl_.lc_ = lc;
  if (lc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.VehicleRuntime.lc)
}
inline ::city::person::v2::LC* VehicleRuntime::release_lc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::person::v2::LC* temp = _impl_.lc_;
  _impl_.lc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::LC* VehicleRuntime::unsafe_arena_release_lc() {
  // @@protoc_insertion_point(field_release:city.person.v2.VehicleRuntime.lc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::person::v2::LC* temp = _impl_.lc_;
  _impl_.lc_ = nullptr;
  return temp;
}
inline ::city::person::v2::LC* VehicleRuntime::_internal_mutable_lc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.lc_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::LC>(GetArenaForAllocation());
    _impl_.lc_ = p;
  }
  return _impl_.lc_;
}
inline ::city::person::v2::LC* VehicleRuntime::mutable_lc() {
  ::city::person::v2::LC* _msg = _internal_mutable_lc();
  // @@protoc_insertion_point(field_mutable:city.person.v2.VehicleRuntime.lc)
  return _msg;
}
inline void VehicleRuntime::set_allocated_lc(::city::person::v2::LC* lc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lc_;
  }
  if (lc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lc);
    if (message_arena != submessage_arena) {
      lc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lc_ = lc;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.VehicleRuntime.lc)
}

// optional .city.person.v2.VehicleAction action = 5 [json_name = "action"];
inline bool VehicleRuntime::_internal_has_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.action_ != nullptr);
  return value;
}
inline bool VehicleRuntime::has_action() const {
  return _internal_has_action();
}
inline void VehicleRuntime::clear_action() {
  if (_impl_.action_ != nullptr) _impl_.action_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::city::person::v2::VehicleAction& VehicleRuntime::_internal_action() const {
  const ::city::person::v2::VehicleAction* p = _impl_.action_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::VehicleAction&>(
      ::city::person::v2::_VehicleAction_default_instance_);
}
inline const ::city::person::v2::VehicleAction& VehicleRuntime::action() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleRuntime.action)
  return _internal_action();
}
inline void VehicleRuntime::unsafe_arena_set_allocated_action(
    ::city::person::v2::VehicleAction* action) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.action_);
  }
  _impl_.action_ = action;
  if (action) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.VehicleRuntime.action)
}
inline ::city::person::v2::VehicleAction* VehicleRuntime::release_action() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::person::v2::VehicleAction* temp = _impl_.action_;
  _impl_.action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::VehicleAction* VehicleRuntime::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_release:city.person.v2.VehicleRuntime.action)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::person::v2::VehicleAction* temp = _impl_.action_;
  _impl_.action_ = nullptr;
  return temp;
}
inline ::city::person::v2::VehicleAction* VehicleRuntime::_internal_mutable_action() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.action_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::VehicleAction>(GetArenaForAllocation());
    _impl_.action_ = p;
  }
  return _impl_.action_;
}
inline ::city::person::v2::VehicleAction* VehicleRuntime::mutable_action() {
  ::city::person::v2::VehicleAction* _msg = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:city.person.v2.VehicleRuntime.action)
  return _msg;
}
inline void VehicleRuntime::set_allocated_action(::city::person::v2::VehicleAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.action_ = action;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.VehicleRuntime.action)
}

// double running_distance = 6 [json_name = "runningDistance"];
inline void VehicleRuntime::clear_running_distance() {
  _impl_.running_distance_ = 0;
}
inline double VehicleRuntime::_internal_running_distance() const {
  return _impl_.running_distance_;
}
inline double VehicleRuntime::running_distance() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleRuntime.running_distance)
  return _internal_running_distance();
}
inline void VehicleRuntime::_internal_set_running_distance(double value) {
  
  _impl_.running_distance_ = value;
}
inline void VehicleRuntime::set_running_distance(double value) {
  _internal_set_running_distance(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleRuntime.running_distance)
}

// int32 num_going_astray = 7 [json_name = "numGoingAstray"];
inline void VehicleRuntime::clear_num_going_astray() {
  _impl_.num_going_astray_ = 0;
}
inline int32_t VehicleRuntime::_internal_num_going_astray() const {
  return _impl_.num_going_astray_;
}
inline int32_t VehicleRuntime::num_going_astray() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleRuntime.num_going_astray)
  return _internal_num_going_astray();
}
inline void VehicleRuntime::_internal_set_num_going_astray(int32_t value) {
  
  _impl_.num_going_astray_ = value;
}
inline void VehicleRuntime::set_num_going_astray(int32_t value) {
  _internal_set_num_going_astray(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleRuntime.num_going_astray)
}

// double departure_time = 8 [json_name = "departureTime"];
inline void VehicleRuntime::clear_departure_time() {
  _impl_.departure_time_ = 0;
}
inline double VehicleRuntime::_internal_departure_time() const {
  return _impl_.departure_time_;
}
inline double VehicleRuntime::departure_time() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleRuntime.departure_time)
  return _internal_departure_time();
}
inline void VehicleRuntime::_internal_set_departure_time(double value) {
  
  _impl_.departure_time_ = value;
}
inline void VehicleRuntime::set_departure_time(double value) {
  _internal_set_departure_time(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleRuntime.departure_time)
}

// double eta = 9 [json_name = "eta"];
inline void VehicleRuntime::clear_eta() {
  _impl_.eta_ = 0;
}
inline double VehicleRuntime::_internal_eta() const {
  return _impl_.eta_;
}
inline double VehicleRuntime::eta() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleRuntime.eta)
  return _internal_eta();
}
inline void VehicleRuntime::_internal_set_eta(double value) {
  
  _impl_.eta_ = value;
}
inline void VehicleRuntime::set_eta(double value) {
  _internal_set_eta(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleRuntime.eta)
}

// double eta_free_flow = 10 [json_name = "etaFreeFlow"];
inline void VehicleRuntime::clear_eta_free_flow() {
  _impl_.eta_free_flow_ = 0;
}
inline double VehicleRuntime::_internal_eta_free_flow() const {
  return _impl_.eta_free_flow_;
}
inline double VehicleRuntime::eta_free_flow() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleRuntime.eta_free_flow)
  return _internal_eta_free_flow();
}
inline void VehicleRuntime::_internal_set_eta_free_flow(double value) {
  
  _impl_.eta_free_flow_ = value;
}
inline void VehicleRuntime::set_eta_free_flow(double value) {
  _internal_set_eta_free_flow(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleRuntime.eta_free_flow)
}

// optional .city.person.v2.VehicleCarbon carbon = 11 [json_name = "carbon"];
inline bool VehicleRuntime::_internal_has_carbon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.carbon_ != nullptr);
  return value;
}
inline bool VehicleRuntime::has_carbon() const {
  return _internal_has_carbon();
}
inline const ::city::person::v2::VehicleCarbon& VehicleRuntime::_internal_carbon() const {
  const ::city::person::v2::VehicleCarbon* p = _impl_.carbon_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::VehicleCarbon&>(
      ::city::person::v2::_VehicleCarbon_default_instance_);
}
inline const ::city::person::v2::VehicleCarbon& VehicleRuntime::carbon() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleRuntime.carbon)
  return _internal_carbon();
}
inline void VehicleRuntime::unsafe_arena_set_allocated_carbon(
    ::city::person::v2::VehicleCarbon* carbon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.carbon_);
  }
  _impl_.carbon_ = carbon;
  if (carbon) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.VehicleRuntime.carbon)
}
inline ::city::person::v2::VehicleCarbon* VehicleRuntime::release_carbon() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::person::v2::VehicleCarbon* temp = _impl_.carbon_;
  _impl_.carbon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::VehicleCarbon* VehicleRuntime::unsafe_arena_release_carbon() {
  // @@protoc_insertion_point(field_release:city.person.v2.VehicleRuntime.carbon)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::person::v2::VehicleCarbon* temp = _impl_.carbon_;
  _impl_.carbon_ = nullptr;
  return temp;
}
inline ::city::person::v2::VehicleCarbon* VehicleRuntime::_internal_mutable_carbon() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.carbon_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::VehicleCarbon>(GetArenaForAllocation());
    _impl_.carbon_ = p;
  }
  return _impl_.carbon_;
}
inline ::city::person::v2::VehicleCarbon* VehicleRuntime::mutable_carbon() {
  ::city::person::v2::VehicleCarbon* _msg = _internal_mutable_carbon();
  // @@protoc_insertion_point(field_mutable:city.person.v2.VehicleRuntime.carbon)
  return _msg;
}
inline void VehicleRuntime::set_allocated_carbon(::city::person::v2::VehicleCarbon* carbon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.carbon_);
  }
  if (carbon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(carbon));
    if (message_arena != submessage_arena) {
      carbon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, carbon, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.carbon_ = carbon;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.VehicleRuntime.carbon)
}

// optional .city.person.v2.EmissionStatistics emission_statistics = 12 [json_name = "emissionStatistics"];
inline bool VehicleRuntime::_internal_has_emission_statistics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.emission_statistics_ != nullptr);
  return value;
}
inline bool VehicleRuntime::has_emission_statistics() const {
  return _internal_has_emission_statistics();
}
inline const ::city::person::v2::EmissionStatistics& VehicleRuntime::_internal_emission_statistics() const {
  const ::city::person::v2::EmissionStatistics* p = _impl_.emission_statistics_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::EmissionStatistics&>(
      ::city::person::v2::_EmissionStatistics_default_instance_);
}
inline const ::city::person::v2::EmissionStatistics& VehicleRuntime::emission_statistics() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleRuntime.emission_statistics)
  return _internal_emission_statistics();
}
inline void VehicleRuntime::unsafe_arena_set_allocated_emission_statistics(
    ::city::person::v2::EmissionStatistics* emission_statistics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.emission_statistics_);
  }
  _impl_.emission_statistics_ = emission_statistics;
  if (emission_statistics) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.VehicleRuntime.emission_statistics)
}
inline ::city::person::v2::EmissionStatistics* VehicleRuntime::release_emission_statistics() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::city::person::v2::EmissionStatistics* temp = _impl_.emission_statistics_;
  _impl_.emission_statistics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::EmissionStatistics* VehicleRuntime::unsafe_arena_release_emission_statistics() {
  // @@protoc_insertion_point(field_release:city.person.v2.VehicleRuntime.emission_statistics)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::city::person::v2::EmissionStatistics* temp = _impl_.emission_statistics_;
  _impl_.emission_statistics_ = nullptr;
  return temp;
}
inline ::city::person::v2::EmissionStatistics* VehicleRuntime::_internal_mutable_emission_statistics() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.emission_statistics_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::EmissionStatistics>(GetArenaForAllocation());
    _impl_.emission_statistics_ = p;
  }
  return _impl_.emission_statistics_;
}
inline ::city::person::v2::EmissionStatistics* VehicleRuntime::mutable_emission_statistics() {
  ::city::person::v2::EmissionStatistics* _msg = _internal_mutable_emission_statistics();
  // @@protoc_insertion_point(field_mutable:city.person.v2.VehicleRuntime.emission_statistics)
  return _msg;
}
inline void VehicleRuntime::set_allocated_emission_statistics(::city::person::v2::EmissionStatistics* emission_statistics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.emission_statistics_);
  }
  if (emission_statistics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(emission_statistics));
    if (message_arena != submessage_arena) {
      emission_statistics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emission_statistics, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.emission_statistics_ = emission_statistics;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.VehicleRuntime.emission_statistics)
}

// optional .city.person.v2.PollutionStatistics pollution_statistics = 13 [json_name = "pollutionStatistics"];
inline bool VehicleRuntime::_internal_has_pollution_statistics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pollution_statistics_ != nullptr);
  return value;
}
inline bool VehicleRuntime::has_pollution_statistics() const {
  return _internal_has_pollution_statistics();
}
inline const ::city::person::v2::PollutionStatistics& VehicleRuntime::_internal_pollution_statistics() const {
  const ::city::person::v2::PollutionStatistics* p = _impl_.pollution_statistics_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::PollutionStatistics&>(
      ::city::person::v2::_PollutionStatistics_default_instance_);
}
inline const ::city::person::v2::PollutionStatistics& VehicleRuntime::pollution_statistics() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleRuntime.pollution_statistics)
  return _internal_pollution_statistics();
}
inline void VehicleRuntime::unsafe_arena_set_allocated_pollution_statistics(
    ::city::person::v2::PollutionStatistics* pollution_statistics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pollution_statistics_);
  }
  _impl_.pollution_statistics_ = pollution_statistics;
  if (pollution_statistics) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.VehicleRuntime.pollution_statistics)
}
inline ::city::person::v2::PollutionStatistics* VehicleRuntime::release_pollution_statistics() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::city::person::v2::PollutionStatistics* temp = _impl_.pollution_statistics_;
  _impl_.pollution_statistics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::PollutionStatistics* VehicleRuntime::unsafe_arena_release_pollution_statistics() {
  // @@protoc_insertion_point(field_release:city.person.v2.VehicleRuntime.pollution_statistics)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::city::person::v2::PollutionStatistics* temp = _impl_.pollution_statistics_;
  _impl_.pollution_statistics_ = nullptr;
  return temp;
}
inline ::city::person::v2::PollutionStatistics* VehicleRuntime::_internal_mutable_pollution_statistics() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.pollution_statistics_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::PollutionStatistics>(GetArenaForAllocation());
    _impl_.pollution_statistics_ = p;
  }
  return _impl_.pollution_statistics_;
}
inline ::city::person::v2::PollutionStatistics* VehicleRuntime::mutable_pollution_statistics() {
  ::city::person::v2::PollutionStatistics* _msg = _internal_mutable_pollution_statistics();
  // @@protoc_insertion_point(field_mutable:city.person.v2.VehicleRuntime.pollution_statistics)
  return _msg;
}
inline void VehicleRuntime::set_allocated_pollution_statistics(::city::person::v2::PollutionStatistics* pollution_statistics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pollution_statistics_);
  }
  if (pollution_statistics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pollution_statistics));
    if (message_arena != submessage_arena) {
      pollution_statistics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pollution_statistics, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.pollution_statistics_ = pollution_statistics;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.VehicleRuntime.pollution_statistics)
}

// .city.person.v2.VehicleParkingStatus parking_status = 14 [json_name = "parkingStatus"];
inline void VehicleRuntime::clear_parking_status() {
  _impl_.parking_status_ = 0;
}
inline ::city::person::v2::VehicleParkingStatus VehicleRuntime::_internal_parking_status() const {
  return static_cast< ::city::person::v2::VehicleParkingStatus >(_impl_.parking_status_);
}
inline ::city::person::v2::VehicleParkingStatus VehicleRuntime::parking_status() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleRuntime.parking_status)
  return _internal_parking_status();
}
inline void VehicleRuntime::_internal_set_parking_status(::city::person::v2::VehicleParkingStatus value) {
  
  _impl_.parking_status_ = value;
}
inline void VehicleRuntime::set_parking_status(::city::person::v2::VehicleParkingStatus value) {
  _internal_set_parking_status(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleRuntime.parking_status)
}

// -------------------------------------------------------------------

// ObservedVehicle

// int32 id = 1 [json_name = "id"];
inline void ObservedVehicle::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ObservedVehicle::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ObservedVehicle::id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.ObservedVehicle.id)
  return _internal_id();
}
inline void ObservedVehicle::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ObservedVehicle::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.ObservedVehicle.id)
}

// .city.person.v2.PersonMotion motion = 2 [json_name = "motion"];
inline bool ObservedVehicle::_internal_has_motion() const {
  return this != internal_default_instance() && _impl_.motion_ != nullptr;
}
inline bool ObservedVehicle::has_motion() const {
  return _internal_has_motion();
}
inline const ::city::person::v2::PersonMotion& ObservedVehicle::_internal_motion() const {
  const ::city::person::v2::PersonMotion* p = _impl_.motion_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::PersonMotion&>(
      ::city::person::v2::_PersonMotion_default_instance_);
}
inline const ::city::person::v2::PersonMotion& ObservedVehicle::motion() const {
  // @@protoc_insertion_point(field_get:city.person.v2.ObservedVehicle.motion)
  return _internal_motion();
}
inline void ObservedVehicle::unsafe_arena_set_allocated_motion(
    ::city::person::v2::PersonMotion* motion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_);
  }
  _impl_.motion_ = motion;
  if (motion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.ObservedVehicle.motion)
}
inline ::city::person::v2::PersonMotion* ObservedVehicle::release_motion() {
  
  ::city::person::v2::PersonMotion* temp = _impl_.motion_;
  _impl_.motion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::PersonMotion* ObservedVehicle::unsafe_arena_release_motion() {
  // @@protoc_insertion_point(field_release:city.person.v2.ObservedVehicle.motion)
  
  ::city::person::v2::PersonMotion* temp = _impl_.motion_;
  _impl_.motion_ = nullptr;
  return temp;
}
inline ::city::person::v2::PersonMotion* ObservedVehicle::_internal_mutable_motion() {
  
  if (_impl_.motion_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::PersonMotion>(GetArenaForAllocation());
    _impl_.motion_ = p;
  }
  return _impl_.motion_;
}
inline ::city::person::v2::PersonMotion* ObservedVehicle::mutable_motion() {
  ::city::person::v2::PersonMotion* _msg = _internal_mutable_motion();
  // @@protoc_insertion_point(field_mutable:city.person.v2.ObservedVehicle.motion)
  return _msg;
}
inline void ObservedVehicle::set_allocated_motion(::city::person::v2::PersonMotion* motion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_);
  }
  if (motion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion));
    if (message_arena != submessage_arena) {
      motion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.motion_ = motion;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.ObservedVehicle.motion)
}

// double relative_distance = 3 [json_name = "relativeDistance"];
inline void ObservedVehicle::clear_relative_distance() {
  _impl_.relative_distance_ = 0;
}
inline double ObservedVehicle::_internal_relative_distance() const {
  return _impl_.relative_distance_;
}
inline double ObservedVehicle::relative_distance() const {
  // @@protoc_insertion_point(field_get:city.person.v2.ObservedVehicle.relative_distance)
  return _internal_relative_distance();
}
inline void ObservedVehicle::_internal_set_relative_distance(double value) {
  
  _impl_.relative_distance_ = value;
}
inline void ObservedVehicle::set_relative_distance(double value) {
  _internal_set_relative_distance(value);
  // @@protoc_insertion_point(field_set:city.person.v2.ObservedVehicle.relative_distance)
}

// .city.person.v2.VehicleRelation relation = 4 [json_name = "relation"];
inline void ObservedVehicle::clear_relation() {
  _impl_.relation_ = 0;
}
inline ::city::person::v2::VehicleRelation ObservedVehicle::_internal_relation() const {
  return static_cast< ::city::person::v2::VehicleRelation >(_impl_.relation_);
}
inline ::city::person::v2::VehicleRelation ObservedVehicle::relation() const {
  // @@protoc_insertion_point(field_get:city.person.v2.ObservedVehicle.relation)
  return _internal_relation();
}
inline void ObservedVehicle::_internal_set_relation(::city::person::v2::VehicleRelation value) {
  
  _impl_.relation_ = value;
}
inline void ObservedVehicle::set_relation(::city::person::v2::VehicleRelation value) {
  _internal_set_relation(value);
  // @@protoc_insertion_point(field_set:city.person.v2.ObservedVehicle.relation)
}

// -------------------------------------------------------------------

// ObservedLane

// int32 id = 1 [json_name = "id"];
inline void ObservedLane::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ObservedLane::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ObservedLane::id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.ObservedLane.id)
  return _internal_id();
}
inline void ObservedLane::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ObservedLane::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.ObservedLane.id)
}

// bool restriction = 2 [json_name = "restriction"];
inline void ObservedLane::clear_restriction() {
  _impl_.restriction_ = false;
}
inline bool ObservedLane::_internal_restriction() const {
  return _impl_.restriction_;
}
inline bool ObservedLane::restriction() const {
  // @@protoc_insertion_point(field_get:city.person.v2.ObservedLane.restriction)
  return _internal_restriction();
}
inline void ObservedLane::_internal_set_restriction(bool value) {
  
  _impl_.restriction_ = value;
}
inline void ObservedLane::set_restriction(bool value) {
  _internal_set_restriction(value);
  // @@protoc_insertion_point(field_set:city.person.v2.ObservedLane.restriction)
}

// .city.person.v2.LightState light_state = 3 [json_name = "lightState"];
inline void ObservedLane::clear_light_state() {
  _impl_.light_state_ = 0;
}
inline ::city::person::v2::LightState ObservedLane::_internal_light_state() const {
  return static_cast< ::city::person::v2::LightState >(_impl_.light_state_);
}
inline ::city::person::v2::LightState ObservedLane::light_state() const {
  // @@protoc_insertion_point(field_get:city.person.v2.ObservedLane.light_state)
  return _internal_light_state();
}
inline void ObservedLane::_internal_set_light_state(::city::person::v2::LightState value) {
  
  _impl_.light_state_ = value;
}
inline void ObservedLane::set_light_state(::city::person::v2::LightState value) {
  _internal_set_light_state(value);
  // @@protoc_insertion_point(field_set:city.person.v2.ObservedLane.light_state)
}

// double light_remaining_time = 4 [json_name = "lightRemainingTime"];
inline void ObservedLane::clear_light_remaining_time() {
  _impl_.light_remaining_time_ = 0;
}
inline double ObservedLane::_internal_light_remaining_time() const {
  return _impl_.light_remaining_time_;
}
inline double ObservedLane::light_remaining_time() const {
  // @@protoc_insertion_point(field_get:city.person.v2.ObservedLane.light_remaining_time)
  return _internal_light_remaining_time();
}
inline void ObservedLane::_internal_set_light_remaining_time(double value) {
  
  _impl_.light_remaining_time_ = value;
}
inline void ObservedLane::set_light_remaining_time(double value) {
  _internal_set_light_remaining_time(value);
  // @@protoc_insertion_point(field_set:city.person.v2.ObservedLane.light_remaining_time)
}

// -------------------------------------------------------------------

// VehicleEnv

// int32 id = 1 [json_name = "id"];
inline void VehicleEnv::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t VehicleEnv::_internal_id() const {
  return _impl_.id_;
}
inline int32_t VehicleEnv::id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleEnv.id)
  return _internal_id();
}
inline void VehicleEnv::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void VehicleEnv::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleEnv.id)
}

// .city.person.v2.VehicleRuntime runtime = 2 [json_name = "runtime"];
inline bool VehicleEnv::_internal_has_runtime() const {
  return this != internal_default_instance() && _impl_.runtime_ != nullptr;
}
inline bool VehicleEnv::has_runtime() const {
  return _internal_has_runtime();
}
inline void VehicleEnv::clear_runtime() {
  if (GetArenaForAllocation() == nullptr && _impl_.runtime_ != nullptr) {
    delete _impl_.runtime_;
  }
  _impl_.runtime_ = nullptr;
}
inline const ::city::person::v2::VehicleRuntime& VehicleEnv::_internal_runtime() const {
  const ::city::person::v2::VehicleRuntime* p = _impl_.runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::VehicleRuntime&>(
      ::city::person::v2::_VehicleRuntime_default_instance_);
}
inline const ::city::person::v2::VehicleRuntime& VehicleEnv::runtime() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleEnv.runtime)
  return _internal_runtime();
}
inline void VehicleEnv::unsafe_arena_set_allocated_runtime(
    ::city::person::v2::VehicleRuntime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.runtime_);
  }
  _impl_.runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.VehicleEnv.runtime)
}
inline ::city::person::v2::VehicleRuntime* VehicleEnv::release_runtime() {
  
  ::city::person::v2::VehicleRuntime* temp = _impl_.runtime_;
  _impl_.runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::VehicleRuntime* VehicleEnv::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:city.person.v2.VehicleEnv.runtime)
  
  ::city::person::v2::VehicleRuntime* temp = _impl_.runtime_;
  _impl_.runtime_ = nullptr;
  return temp;
}
inline ::city::person::v2::VehicleRuntime* VehicleEnv::_internal_mutable_runtime() {
  
  if (_impl_.runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::VehicleRuntime>(GetArenaForAllocation());
    _impl_.runtime_ = p;
  }
  return _impl_.runtime_;
}
inline ::city::person::v2::VehicleRuntime* VehicleEnv::mutable_runtime() {
  ::city::person::v2::VehicleRuntime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:city.person.v2.VehicleEnv.runtime)
  return _msg;
}
inline void VehicleEnv::set_allocated_runtime(::city::person::v2::VehicleRuntime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.runtime_;
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(runtime);
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.VehicleEnv.runtime)
}

// .city.routing.v2.Journey journey = 3 [json_name = "journey"];
inline bool VehicleEnv::_internal_has_journey() const {
  return this != internal_default_instance() && _impl_.journey_ != nullptr;
}
inline bool VehicleEnv::has_journey() const {
  return _internal_has_journey();
}
inline const ::city::routing::v2::Journey& VehicleEnv::_internal_journey() const {
  const ::city::routing::v2::Journey* p = _impl_.journey_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::routing::v2::Journey&>(
      ::city::routing::v2::_Journey_default_instance_);
}
inline const ::city::routing::v2::Journey& VehicleEnv::journey() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleEnv.journey)
  return _internal_journey();
}
inline void VehicleEnv::unsafe_arena_set_allocated_journey(
    ::city::routing::v2::Journey* journey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.journey_);
  }
  _impl_.journey_ = journey;
  if (journey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.VehicleEnv.journey)
}
inline ::city::routing::v2::Journey* VehicleEnv::release_journey() {
  
  ::city::routing::v2::Journey* temp = _impl_.journey_;
  _impl_.journey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::routing::v2::Journey* VehicleEnv::unsafe_arena_release_journey() {
  // @@protoc_insertion_point(field_release:city.person.v2.VehicleEnv.journey)
  
  ::city::routing::v2::Journey* temp = _impl_.journey_;
  _impl_.journey_ = nullptr;
  return temp;
}
inline ::city::routing::v2::Journey* VehicleEnv::_internal_mutable_journey() {
  
  if (_impl_.journey_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::routing::v2::Journey>(GetArenaForAllocation());
    _impl_.journey_ = p;
  }
  return _impl_.journey_;
}
inline ::city::routing::v2::Journey* VehicleEnv::mutable_journey() {
  ::city::routing::v2::Journey* _msg = _internal_mutable_journey();
  // @@protoc_insertion_point(field_mutable:city.person.v2.VehicleEnv.journey)
  return _msg;
}
inline void VehicleEnv::set_allocated_journey(::city::routing::v2::Journey* journey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.journey_);
  }
  if (journey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(journey));
    if (message_arena != submessage_arena) {
      journey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, journey, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.journey_ = journey;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.VehicleEnv.journey)
}

// repeated .city.person.v2.ObservedVehicle observed_vehicles = 4 [json_name = "observedVehicles"];
inline int VehicleEnv::_internal_observed_vehicles_size() const {
  return _impl_.observed_vehicles_.size();
}
inline int VehicleEnv::observed_vehicles_size() const {
  return _internal_observed_vehicles_size();
}
inline void VehicleEnv::clear_observed_vehicles() {
  _impl_.observed_vehicles_.Clear();
}
inline ::city::person::v2::ObservedVehicle* VehicleEnv::mutable_observed_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v2.VehicleEnv.observed_vehicles)
  return _impl_.observed_vehicles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::ObservedVehicle >*
VehicleEnv::mutable_observed_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.VehicleEnv.observed_vehicles)
  return &_impl_.observed_vehicles_;
}
inline const ::city::person::v2::ObservedVehicle& VehicleEnv::_internal_observed_vehicles(int index) const {
  return _impl_.observed_vehicles_.Get(index);
}
inline const ::city::person::v2::ObservedVehicle& VehicleEnv::observed_vehicles(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleEnv.observed_vehicles)
  return _internal_observed_vehicles(index);
}
inline ::city::person::v2::ObservedVehicle* VehicleEnv::_internal_add_observed_vehicles() {
  return _impl_.observed_vehicles_.Add();
}
inline ::city::person::v2::ObservedVehicle* VehicleEnv::add_observed_vehicles() {
  ::city::person::v2::ObservedVehicle* _add = _internal_add_observed_vehicles();
  // @@protoc_insertion_point(field_add:city.person.v2.VehicleEnv.observed_vehicles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::ObservedVehicle >&
VehicleEnv::observed_vehicles() const {
  // @@protoc_insertion_point(field_list:city.person.v2.VehicleEnv.observed_vehicles)
  return _impl_.observed_vehicles_;
}

// repeated .city.person.v2.ObservedLane observed_lanes = 5 [json_name = "observedLanes"];
inline int VehicleEnv::_internal_observed_lanes_size() const {
  return _impl_.observed_lanes_.size();
}
inline int VehicleEnv::observed_lanes_size() const {
  return _internal_observed_lanes_size();
}
inline void VehicleEnv::clear_observed_lanes() {
  _impl_.observed_lanes_.Clear();
}
inline ::city::person::v2::ObservedLane* VehicleEnv::mutable_observed_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v2.VehicleEnv.observed_lanes)
  return _impl_.observed_lanes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::ObservedLane >*
VehicleEnv::mutable_observed_lanes() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.VehicleEnv.observed_lanes)
  return &_impl_.observed_lanes_;
}
inline const ::city::person::v2::ObservedLane& VehicleEnv::_internal_observed_lanes(int index) const {
  return _impl_.observed_lanes_.Get(index);
}
inline const ::city::person::v2::ObservedLane& VehicleEnv::observed_lanes(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleEnv.observed_lanes)
  return _internal_observed_lanes(index);
}
inline ::city::person::v2::ObservedLane* VehicleEnv::_internal_add_observed_lanes() {
  return _impl_.observed_lanes_.Add();
}
inline ::city::person::v2::ObservedLane* VehicleEnv::add_observed_lanes() {
  ::city::person::v2::ObservedLane* _add = _internal_add_observed_lanes();
  // @@protoc_insertion_point(field_add:city.person.v2.VehicleEnv.observed_lanes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::ObservedLane >&
VehicleEnv::observed_lanes() const {
  // @@protoc_insertion_point(field_list:city.person.v2.VehicleEnv.observed_lanes)
  return _impl_.observed_lanes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace person
}  // namespace city

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::city::person::v2::VehicleParkingStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::person::v2::VehicleParkingStatus>() {
  return ::city::person::v2::VehicleParkingStatus_descriptor();
}
template <> struct is_proto_enum< ::city::person::v2::VehicleRelation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::person::v2::VehicleRelation>() {
  return ::city::person::v2::VehicleRelation_descriptor();
}
template <> struct is_proto_enum< ::city::person::v2::LightState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::person::v2::LightState>() {
  return ::city::person::v2::LightState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv2_2fvehicle_2eproto
