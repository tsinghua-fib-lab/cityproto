// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/person/v2/person.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv2_2fperson_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv2_2fperson_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "city/geo/v2/geo.pb.h"
#include "city/trip/v2/trip.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fperson_2fv2_2fperson_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fperson_2fv2_2fperson_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fperson_2fv2_2fperson_2eproto;
namespace city {
namespace person {
namespace v2 {
class BikeAttribute;
struct BikeAttributeDefaultTypeInternal;
extern BikeAttributeDefaultTypeInternal _BikeAttribute_default_instance_;
class BusAttribute;
struct BusAttributeDefaultTypeInternal;
extern BusAttributeDefaultTypeInternal _BusAttribute_default_instance_;
class EmissionAttribute;
struct EmissionAttributeDefaultTypeInternal;
extern EmissionAttributeDefaultTypeInternal _EmissionAttribute_default_instance_;
class PedestrianAttribute;
struct PedestrianAttributeDefaultTypeInternal;
extern PedestrianAttributeDefaultTypeInternal _PedestrianAttribute_default_instance_;
class Person;
struct PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
class PersonAttribute;
struct PersonAttributeDefaultTypeInternal;
extern PersonAttributeDefaultTypeInternal _PersonAttribute_default_instance_;
class PersonProfile;
struct PersonProfileDefaultTypeInternal;
extern PersonProfileDefaultTypeInternal _PersonProfile_default_instance_;
class Person_LabelsEntry_DoNotUse;
struct Person_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Person_LabelsEntry_DoNotUseDefaultTypeInternal _Person_LabelsEntry_DoNotUse_default_instance_;
class Persons;
struct PersonsDefaultTypeInternal;
extern PersonsDefaultTypeInternal _Persons_default_instance_;
class VehicleAttribute;
struct VehicleAttributeDefaultTypeInternal;
extern VehicleAttributeDefaultTypeInternal _VehicleAttribute_default_instance_;
class VehicleEngineEfficiency;
struct VehicleEngineEfficiencyDefaultTypeInternal;
extern VehicleEngineEfficiencyDefaultTypeInternal _VehicleEngineEfficiency_default_instance_;
}  // namespace v2
}  // namespace person
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::person::v2::BikeAttribute* Arena::CreateMaybeMessage<::city::person::v2::BikeAttribute>(Arena*);
template<> ::city::person::v2::BusAttribute* Arena::CreateMaybeMessage<::city::person::v2::BusAttribute>(Arena*);
template<> ::city::person::v2::EmissionAttribute* Arena::CreateMaybeMessage<::city::person::v2::EmissionAttribute>(Arena*);
template<> ::city::person::v2::PedestrianAttribute* Arena::CreateMaybeMessage<::city::person::v2::PedestrianAttribute>(Arena*);
template<> ::city::person::v2::Person* Arena::CreateMaybeMessage<::city::person::v2::Person>(Arena*);
template<> ::city::person::v2::PersonAttribute* Arena::CreateMaybeMessage<::city::person::v2::PersonAttribute>(Arena*);
template<> ::city::person::v2::PersonProfile* Arena::CreateMaybeMessage<::city::person::v2::PersonProfile>(Arena*);
template<> ::city::person::v2::Person_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::city::person::v2::Person_LabelsEntry_DoNotUse>(Arena*);
template<> ::city::person::v2::Persons* Arena::CreateMaybeMessage<::city::person::v2::Persons>(Arena*);
template<> ::city::person::v2::VehicleAttribute* Arena::CreateMaybeMessage<::city::person::v2::VehicleAttribute>(Arena*);
template<> ::city::person::v2::VehicleEngineEfficiency* Arena::CreateMaybeMessage<::city::person::v2::VehicleEngineEfficiency>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace person {
namespace v2 {

enum VehicleEngineType : int {
  VEHICLE_ENGINE_TYPE_UNSPECIFIED = 0,
  VEHICLE_ENGINE_TYPE_FUEL = 1,
  VEHICLE_ENGINE_TYPE_ELECTRIC = 2,
  VEHICLE_ENGINE_TYPE_HYBRID = 3,
  VehicleEngineType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VehicleEngineType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VehicleEngineType_IsValid(int value);
constexpr VehicleEngineType VehicleEngineType_MIN = VEHICLE_ENGINE_TYPE_UNSPECIFIED;
constexpr VehicleEngineType VehicleEngineType_MAX = VEHICLE_ENGINE_TYPE_HYBRID;
constexpr int VehicleEngineType_ARRAYSIZE = VehicleEngineType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleEngineType_descriptor();
template<typename T>
inline const std::string& VehicleEngineType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleEngineType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleEngineType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleEngineType_descriptor(), enum_t_value);
}
inline bool VehicleEngineType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VehicleEngineType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleEngineType>(
    VehicleEngineType_descriptor(), name, value);
}
enum BusType : int {
  BUS_TYPE_UNSPECIFIED = 0,
  BUS_TYPE_BUS = 1,
  BUS_TYPE_SUBWAY = 2,
  BusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BusType_IsValid(int value);
constexpr BusType BusType_MIN = BUS_TYPE_UNSPECIFIED;
constexpr BusType BusType_MAX = BUS_TYPE_SUBWAY;
constexpr int BusType_ARRAYSIZE = BusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BusType_descriptor();
template<typename T>
inline const std::string& BusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BusType_descriptor(), enum_t_value);
}
inline bool BusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BusType>(
    BusType_descriptor(), name, value);
}
enum Education : int {
  EDUCATION_UNSPECIFIED = 0,
  EDUCATION_DOCTOR = 1,
  EDUCATION_MASTER = 2,
  EDUCATION_BACHELOR = 3,
  EDUCATION_HIGH_SCHOOL = 4,
  EDUCATION_JUNIOR_HIGH_SCHOOL = 5,
  EDUCATION_PRIMARY_SCHOOL = 6,
  EDUCATION_COLLEGE = 7,
  Education_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Education_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Education_IsValid(int value);
constexpr Education Education_MIN = EDUCATION_UNSPECIFIED;
constexpr Education Education_MAX = EDUCATION_COLLEGE;
constexpr int Education_ARRAYSIZE = Education_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Education_descriptor();
template<typename T>
inline const std::string& Education_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Education>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Education_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Education_descriptor(), enum_t_value);
}
inline bool Education_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Education* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Education>(
    Education_descriptor(), name, value);
}
enum Gender : int {
  GENDER_UNSPECIFIED = 0,
  GENDER_MALE = 1,
  GENDER_FEMALE = 2,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Gender_IsValid(int value);
constexpr Gender Gender_MIN = GENDER_UNSPECIFIED;
constexpr Gender Gender_MAX = GENDER_FEMALE;
constexpr int Gender_ARRAYSIZE = Gender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor();
template<typename T>
inline const std::string& Gender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Gender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Gender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Gender_descriptor(), enum_t_value);
}
inline bool Gender_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Gender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Gender>(
    Gender_descriptor(), name, value);
}
enum Consumption : int {
  CONSUMPTION_UNSPECIFIED = 0,
  CONSUMPTION_LOW = 1,
  CONSUMPTION_RELATIVELY_LOW = 2,
  CONSUMPTION_MEDIUM = 3,
  CONSUMPTION_RELATIVELY_HIGH = 4,
  CONSUMPTION_HIGH = 5,
  Consumption_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Consumption_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Consumption_IsValid(int value);
constexpr Consumption Consumption_MIN = CONSUMPTION_UNSPECIFIED;
constexpr Consumption Consumption_MAX = CONSUMPTION_HIGH;
constexpr int Consumption_ARRAYSIZE = Consumption_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Consumption_descriptor();
template<typename T>
inline const std::string& Consumption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Consumption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Consumption_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Consumption_descriptor(), enum_t_value);
}
inline bool Consumption_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Consumption* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Consumption>(
    Consumption_descriptor(), name, value);
}
enum PersonType : int {
  PERSON_TYPE_UNSPECIFIED = 0,
  PERSON_TYPE_TAXI = 1,
  PERSON_TYPE_NORMAL = 2,
  PersonType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PersonType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PersonType_IsValid(int value);
constexpr PersonType PersonType_MIN = PERSON_TYPE_UNSPECIFIED;
constexpr PersonType PersonType_MAX = PERSON_TYPE_NORMAL;
constexpr int PersonType_ARRAYSIZE = PersonType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PersonType_descriptor();
template<typename T>
inline const std::string& PersonType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PersonType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PersonType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PersonType_descriptor(), enum_t_value);
}
inline bool PersonType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PersonType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PersonType>(
    PersonType_descriptor(), name, value);
}
// ===================================================================

class PersonAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.person.v2.PersonAttribute) */ {
 public:
  inline PersonAttribute() : PersonAttribute(nullptr) {}
  explicit PROTOBUF_CONSTEXPR PersonAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PersonAttribute(const PersonAttribute& from);
  PersonAttribute(PersonAttribute&& from) noexcept
    : PersonAttribute() {
    *this = ::std::move(from);
  }

  inline PersonAttribute& operator=(const PersonAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersonAttribute& operator=(PersonAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PersonAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const PersonAttribute* internal_default_instance() {
    return reinterpret_cast<const PersonAttribute*>(
               &_PersonAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PersonAttribute& a, PersonAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(PersonAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersonAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PersonAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PersonAttribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PersonAttribute& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PersonAttribute& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.PersonAttribute";
  }
  protected:
  explicit PersonAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.person.v2.PersonAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_2eproto;
};
// -------------------------------------------------------------------

class VehicleEngineEfficiency final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.VehicleEngineEfficiency) */ {
 public:
  inline VehicleEngineEfficiency() : VehicleEngineEfficiency(nullptr) {}
  ~VehicleEngineEfficiency() override;
  explicit PROTOBUF_CONSTEXPR VehicleEngineEfficiency(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleEngineEfficiency(const VehicleEngineEfficiency& from);
  VehicleEngineEfficiency(VehicleEngineEfficiency&& from) noexcept
    : VehicleEngineEfficiency() {
    *this = ::std::move(from);
  }

  inline VehicleEngineEfficiency& operator=(const VehicleEngineEfficiency& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleEngineEfficiency& operator=(VehicleEngineEfficiency&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleEngineEfficiency& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleEngineEfficiency* internal_default_instance() {
    return reinterpret_cast<const VehicleEngineEfficiency*>(
               &_VehicleEngineEfficiency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VehicleEngineEfficiency& a, VehicleEngineEfficiency& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleEngineEfficiency* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleEngineEfficiency* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleEngineEfficiency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleEngineEfficiency>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleEngineEfficiency& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleEngineEfficiency& from) {
    VehicleEngineEfficiency::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleEngineEfficiency* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.VehicleEngineEfficiency";
  }
  protected:
  explicit VehicleEngineEfficiency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnergyConversionEfficiencyFieldNumber = 1,
    kCEfFieldNumber = 2,
  };
  // double energy_conversion_efficiency = 1 [json_name = "energyConversionEfficiency"];
  void clear_energy_conversion_efficiency();
  double energy_conversion_efficiency() const;
  void set_energy_conversion_efficiency(double value);
  private:
  double _internal_energy_conversion_efficiency() const;
  void _internal_set_energy_conversion_efficiency(double value);
  public:

  // double c_ef = 2 [json_name = "cEf"];
  void clear_c_ef();
  double c_ef() const;
  void set_c_ef(double value);
  private:
  double _internal_c_ef() const;
  void _internal_set_c_ef(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.VehicleEngineEfficiency)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double energy_conversion_efficiency_;
    double c_ef_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_2eproto;
};
// -------------------------------------------------------------------

class EmissionAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.EmissionAttribute) */ {
 public:
  inline EmissionAttribute() : EmissionAttribute(nullptr) {}
  ~EmissionAttribute() override;
  explicit PROTOBUF_CONSTEXPR EmissionAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmissionAttribute(const EmissionAttribute& from);
  EmissionAttribute(EmissionAttribute&& from) noexcept
    : EmissionAttribute() {
    *this = ::std::move(from);
  }

  inline EmissionAttribute& operator=(const EmissionAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmissionAttribute& operator=(EmissionAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmissionAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmissionAttribute* internal_default_instance() {
    return reinterpret_cast<const EmissionAttribute*>(
               &_EmissionAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EmissionAttribute& a, EmissionAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(EmissionAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmissionAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmissionAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmissionAttribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EmissionAttribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EmissionAttribute& from) {
    EmissionAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmissionAttribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.EmissionAttribute";
  }
  protected:
  explicit EmissionAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFuelEfficiencyFieldNumber = 6,
    kElectricEfficiencyFieldNumber = 7,
    kWeightFieldNumber = 1,
    kCoefficientDragFieldNumber = 3,
    kLambdaSFieldNumber = 4,
    kFrontalAreaFieldNumber = 5,
    kTypeFieldNumber = 2,
  };
  // optional .city.person.v2.VehicleEngineEfficiency fuel_efficiency = 6 [json_name = "fuelEfficiency"];
  bool has_fuel_efficiency() const;
  private:
  bool _internal_has_fuel_efficiency() const;
  public:
  void clear_fuel_efficiency();
  const ::city::person::v2::VehicleEngineEfficiency& fuel_efficiency() const;
  PROTOBUF_NODISCARD ::city::person::v2::VehicleEngineEfficiency* release_fuel_efficiency();
  ::city::person::v2::VehicleEngineEfficiency* mutable_fuel_efficiency();
  void set_allocated_fuel_efficiency(::city::person::v2::VehicleEngineEfficiency* fuel_efficiency);
  private:
  const ::city::person::v2::VehicleEngineEfficiency& _internal_fuel_efficiency() const;
  ::city::person::v2::VehicleEngineEfficiency* _internal_mutable_fuel_efficiency();
  public:
  void unsafe_arena_set_allocated_fuel_efficiency(
      ::city::person::v2::VehicleEngineEfficiency* fuel_efficiency);
  ::city::person::v2::VehicleEngineEfficiency* unsafe_arena_release_fuel_efficiency();

  // optional .city.person.v2.VehicleEngineEfficiency electric_efficiency = 7 [json_name = "electricEfficiency"];
  bool has_electric_efficiency() const;
  private:
  bool _internal_has_electric_efficiency() const;
  public:
  void clear_electric_efficiency();
  const ::city::person::v2::VehicleEngineEfficiency& electric_efficiency() const;
  PROTOBUF_NODISCARD ::city::person::v2::VehicleEngineEfficiency* release_electric_efficiency();
  ::city::person::v2::VehicleEngineEfficiency* mutable_electric_efficiency();
  void set_allocated_electric_efficiency(::city::person::v2::VehicleEngineEfficiency* electric_efficiency);
  private:
  const ::city::person::v2::VehicleEngineEfficiency& _internal_electric_efficiency() const;
  ::city::person::v2::VehicleEngineEfficiency* _internal_mutable_electric_efficiency();
  public:
  void unsafe_arena_set_allocated_electric_efficiency(
      ::city::person::v2::VehicleEngineEfficiency* electric_efficiency);
  ::city::person::v2::VehicleEngineEfficiency* unsafe_arena_release_electric_efficiency();

  // double weight = 1 [json_name = "weight"];
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // double coefficient_drag = 3 [json_name = "coefficientDrag"];
  void clear_coefficient_drag();
  double coefficient_drag() const;
  void set_coefficient_drag(double value);
  private:
  double _internal_coefficient_drag() const;
  void _internal_set_coefficient_drag(double value);
  public:

  // double lambda_s = 4 [json_name = "lambdaS"];
  void clear_lambda_s();
  double lambda_s() const;
  void set_lambda_s(double value);
  private:
  double _internal_lambda_s() const;
  void _internal_set_lambda_s(double value);
  public:

  // double frontal_area = 5 [json_name = "frontalArea"];
  void clear_frontal_area();
  double frontal_area() const;
  void set_frontal_area(double value);
  private:
  double _internal_frontal_area() const;
  void _internal_set_frontal_area(double value);
  public:

  // .city.person.v2.VehicleEngineType type = 2 [json_name = "type"];
  void clear_type();
  ::city::person::v2::VehicleEngineType type() const;
  void set_type(::city::person::v2::VehicleEngineType value);
  private:
  ::city::person::v2::VehicleEngineType _internal_type() const;
  void _internal_set_type(::city::person::v2::VehicleEngineType value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.EmissionAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::city::person::v2::VehicleEngineEfficiency* fuel_efficiency_;
    ::city::person::v2::VehicleEngineEfficiency* electric_efficiency_;
    double weight_;
    double coefficient_drag_;
    double lambda_s_;
    double frontal_area_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_2eproto;
};
// -------------------------------------------------------------------

class VehicleAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.VehicleAttribute) */ {
 public:
  inline VehicleAttribute() : VehicleAttribute(nullptr) {}
  ~VehicleAttribute() override;
  explicit PROTOBUF_CONSTEXPR VehicleAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleAttribute(const VehicleAttribute& from);
  VehicleAttribute(VehicleAttribute&& from) noexcept
    : VehicleAttribute() {
    *this = ::std::move(from);
  }

  inline VehicleAttribute& operator=(const VehicleAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleAttribute& operator=(VehicleAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleAttribute* internal_default_instance() {
    return reinterpret_cast<const VehicleAttribute*>(
               &_VehicleAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VehicleAttribute& a, VehicleAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleAttribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleAttribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleAttribute& from) {
    VehicleAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleAttribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.VehicleAttribute";
  }
  protected:
  explicit VehicleAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 11,
    kEmissionAttributeFieldNumber = 13,
    kLengthFieldNumber = 1,
    kWidthFieldNumber = 2,
    kMaxSpeedFieldNumber = 3,
    kMaxAccelerationFieldNumber = 4,
    kMaxBrakingAccelerationFieldNumber = 5,
    kUsualAccelerationFieldNumber = 6,
    kUsualBrakingAccelerationFieldNumber = 7,
    kLaneChangeLengthFieldNumber = 8,
    kMinGapFieldNumber = 9,
    kHeadwayFieldNumber = 10,
    kLaneMaxSpeedRecognitionDeviationFieldNumber = 12,
  };
  // optional string model = 11 [json_name = "model"];
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // .city.person.v2.EmissionAttribute emission_attribute = 13 [json_name = "emissionAttribute"];
  bool has_emission_attribute() const;
  private:
  bool _internal_has_emission_attribute() const;
  public:
  void clear_emission_attribute();
  const ::city::person::v2::EmissionAttribute& emission_attribute() const;
  PROTOBUF_NODISCARD ::city::person::v2::EmissionAttribute* release_emission_attribute();
  ::city::person::v2::EmissionAttribute* mutable_emission_attribute();
  void set_allocated_emission_attribute(::city::person::v2::EmissionAttribute* emission_attribute);
  private:
  const ::city::person::v2::EmissionAttribute& _internal_emission_attribute() const;
  ::city::person::v2::EmissionAttribute* _internal_mutable_emission_attribute();
  public:
  void unsafe_arena_set_allocated_emission_attribute(
      ::city::person::v2::EmissionAttribute* emission_attribute);
  ::city::person::v2::EmissionAttribute* unsafe_arena_release_emission_attribute();

  // double length = 1 [json_name = "length"];
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // double width = 2 [json_name = "width"];
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double max_speed = 3 [json_name = "maxSpeed"];
  void clear_max_speed();
  double max_speed() const;
  void set_max_speed(double value);
  private:
  double _internal_max_speed() const;
  void _internal_set_max_speed(double value);
  public:

  // double max_acceleration = 4 [json_name = "maxAcceleration"];
  void clear_max_acceleration();
  double max_acceleration() const;
  void set_max_acceleration(double value);
  private:
  double _internal_max_acceleration() const;
  void _internal_set_max_acceleration(double value);
  public:

  // double max_braking_acceleration = 5 [json_name = "maxBrakingAcceleration"];
  void clear_max_braking_acceleration();
  double max_braking_acceleration() const;
  void set_max_braking_acceleration(double value);
  private:
  double _internal_max_braking_acceleration() const;
  void _internal_set_max_braking_acceleration(double value);
  public:

  // double usual_acceleration = 6 [json_name = "usualAcceleration"];
  void clear_usual_acceleration();
  double usual_acceleration() const;
  void set_usual_acceleration(double value);
  private:
  double _internal_usual_acceleration() const;
  void _internal_set_usual_acceleration(double value);
  public:

  // double usual_braking_acceleration = 7 [json_name = "usualBrakingAcceleration"];
  void clear_usual_braking_acceleration();
  double usual_braking_acceleration() const;
  void set_usual_braking_acceleration(double value);
  private:
  double _internal_usual_braking_acceleration() const;
  void _internal_set_usual_braking_acceleration(double value);
  public:

  // double lane_change_length = 8 [json_name = "laneChangeLength"];
  void clear_lane_change_length();
  double lane_change_length() const;
  void set_lane_change_length(double value);
  private:
  double _internal_lane_change_length() const;
  void _internal_set_lane_change_length(double value);
  public:

  // double min_gap = 9 [json_name = "minGap"];
  void clear_min_gap();
  double min_gap() const;
  void set_min_gap(double value);
  private:
  double _internal_min_gap() const;
  void _internal_set_min_gap(double value);
  public:

  // double headway = 10 [json_name = "headway"];
  void clear_headway();
  double headway() const;
  void set_headway(double value);
  private:
  double _internal_headway() const;
  void _internal_set_headway(double value);
  public:

  // double lane_max_speed_recognition_deviation = 12 [json_name = "laneMaxSpeedRecognitionDeviation"];
  void clear_lane_max_speed_recognition_deviation();
  double lane_max_speed_recognition_deviation() const;
  void set_lane_max_speed_recognition_deviation(double value);
  private:
  double _internal_lane_max_speed_recognition_deviation() const;
  void _internal_set_lane_max_speed_recognition_deviation(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.VehicleAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
    ::city::person::v2::EmissionAttribute* emission_attribute_;
    double length_;
    double width_;
    double max_speed_;
    double max_acceleration_;
    double max_braking_acceleration_;
    double usual_acceleration_;
    double usual_braking_acceleration_;
    double lane_change_length_;
    double min_gap_;
    double headway_;
    double lane_max_speed_recognition_deviation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_2eproto;
};
// -------------------------------------------------------------------

class BusAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.BusAttribute) */ {
 public:
  inline BusAttribute() : BusAttribute(nullptr) {}
  ~BusAttribute() override;
  explicit PROTOBUF_CONSTEXPR BusAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusAttribute(const BusAttribute& from);
  BusAttribute(BusAttribute&& from) noexcept
    : BusAttribute() {
    *this = ::std::move(from);
  }

  inline BusAttribute& operator=(const BusAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusAttribute& operator=(BusAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusAttribute* internal_default_instance() {
    return reinterpret_cast<const BusAttribute*>(
               &_BusAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BusAttribute& a, BusAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(BusAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BusAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BusAttribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusAttribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BusAttribute& from) {
    BusAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusAttribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.BusAttribute";
  }
  protected:
  explicit BusAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSublineIdFieldNumber = 1,
    kCapacityFieldNumber = 2,
    kTypeFieldNumber = 5,
  };
  // int32 subline_id = 1 [json_name = "sublineId"];
  void clear_subline_id();
  int32_t subline_id() const;
  void set_subline_id(int32_t value);
  private:
  int32_t _internal_subline_id() const;
  void _internal_set_subline_id(int32_t value);
  public:

  // int32 capacity = 2 [json_name = "capacity"];
  void clear_capacity();
  int32_t capacity() const;
  void set_capacity(int32_t value);
  private:
  int32_t _internal_capacity() const;
  void _internal_set_capacity(int32_t value);
  public:

  // .city.person.v2.BusType type = 5 [json_name = "type"];
  void clear_type();
  ::city::person::v2::BusType type() const;
  void set_type(::city::person::v2::BusType value);
  private:
  ::city::person::v2::BusType _internal_type() const;
  void _internal_set_type(::city::person::v2::BusType value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.BusAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t subline_id_;
    int32_t capacity_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_2eproto;
};
// -------------------------------------------------------------------

class PedestrianAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.PedestrianAttribute) */ {
 public:
  inline PedestrianAttribute() : PedestrianAttribute(nullptr) {}
  ~PedestrianAttribute() override;
  explicit PROTOBUF_CONSTEXPR PedestrianAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PedestrianAttribute(const PedestrianAttribute& from);
  PedestrianAttribute(PedestrianAttribute&& from) noexcept
    : PedestrianAttribute() {
    *this = ::std::move(from);
  }

  inline PedestrianAttribute& operator=(const PedestrianAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline PedestrianAttribute& operator=(PedestrianAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PedestrianAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const PedestrianAttribute* internal_default_instance() {
    return reinterpret_cast<const PedestrianAttribute*>(
               &_PedestrianAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PedestrianAttribute& a, PedestrianAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(PedestrianAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PedestrianAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PedestrianAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PedestrianAttribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PedestrianAttribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PedestrianAttribute& from) {
    PedestrianAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PedestrianAttribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.PedestrianAttribute";
  }
  protected:
  explicit PedestrianAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 2,
    kSpeedFieldNumber = 1,
  };
  // optional string model = 2 [json_name = "model"];
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // double speed = 1 [json_name = "speed"];
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.PedestrianAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
    double speed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_2eproto;
};
// -------------------------------------------------------------------

class BikeAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.BikeAttribute) */ {
 public:
  inline BikeAttribute() : BikeAttribute(nullptr) {}
  ~BikeAttribute() override;
  explicit PROTOBUF_CONSTEXPR BikeAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BikeAttribute(const BikeAttribute& from);
  BikeAttribute(BikeAttribute&& from) noexcept
    : BikeAttribute() {
    *this = ::std::move(from);
  }

  inline BikeAttribute& operator=(const BikeAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline BikeAttribute& operator=(BikeAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BikeAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const BikeAttribute* internal_default_instance() {
    return reinterpret_cast<const BikeAttribute*>(
               &_BikeAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BikeAttribute& a, BikeAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(BikeAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BikeAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BikeAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BikeAttribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BikeAttribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BikeAttribute& from) {
    BikeAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BikeAttribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.BikeAttribute";
  }
  protected:
  explicit BikeAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 2,
    kSpeedFieldNumber = 1,
  };
  // optional string model = 2 [json_name = "model"];
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // double speed = 1 [json_name = "speed"];
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.BikeAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
    double speed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_2eproto;
};
// -------------------------------------------------------------------

class PersonProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.PersonProfile) */ {
 public:
  inline PersonProfile() : PersonProfile(nullptr) {}
  ~PersonProfile() override;
  explicit PROTOBUF_CONSTEXPR PersonProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PersonProfile(const PersonProfile& from);
  PersonProfile(PersonProfile&& from) noexcept
    : PersonProfile() {
    *this = ::std::move(from);
  }

  inline PersonProfile& operator=(const PersonProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersonProfile& operator=(PersonProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PersonProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const PersonProfile* internal_default_instance() {
    return reinterpret_cast<const PersonProfile*>(
               &_PersonProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PersonProfile& a, PersonProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(PersonProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersonProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PersonProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PersonProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PersonProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PersonProfile& from) {
    PersonProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersonProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.PersonProfile";
  }
  protected:
  explicit PersonProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgeFieldNumber = 1,
    kEducationFieldNumber = 2,
    kGenderFieldNumber = 3,
    kConsumptionFieldNumber = 4,
    kHouseIdFieldNumber = 5,
  };
  // int32 age = 1 [json_name = "age"];
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // .city.person.v2.Education education = 2 [json_name = "education"];
  void clear_education();
  ::city::person::v2::Education education() const;
  void set_education(::city::person::v2::Education value);
  private:
  ::city::person::v2::Education _internal_education() const;
  void _internal_set_education(::city::person::v2::Education value);
  public:

  // .city.person.v2.Gender gender = 3 [json_name = "gender"];
  void clear_gender();
  ::city::person::v2::Gender gender() const;
  void set_gender(::city::person::v2::Gender value);
  private:
  ::city::person::v2::Gender _internal_gender() const;
  void _internal_set_gender(::city::person::v2::Gender value);
  public:

  // .city.person.v2.Consumption consumption = 4 [json_name = "consumption"];
  void clear_consumption();
  ::city::person::v2::Consumption consumption() const;
  void set_consumption(::city::person::v2::Consumption value);
  private:
  ::city::person::v2::Consumption _internal_consumption() const;
  void _internal_set_consumption(::city::person::v2::Consumption value);
  public:

  // int32 house_id = 5 [json_name = "houseId"];
  void clear_house_id();
  int32_t house_id() const;
  void set_house_id(int32_t value);
  private:
  int32_t _internal_house_id() const;
  void _internal_set_house_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.PersonProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t age_;
    int education_;
    int gender_;
    int consumption_;
    int32_t house_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_2eproto;
};
// -------------------------------------------------------------------

class Person_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Person_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Person_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Person_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Person_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Person_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Person_LabelsEntry_DoNotUse& other);
  static const Person_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Person_LabelsEntry_DoNotUse*>(&_Person_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "city.person.v2.Person.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "city.person.v2.Person.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_2eproto;
};

// -------------------------------------------------------------------

class Person final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  ~Person() override;
  explicit PROTOBUF_CONSTEXPR Person(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Person& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Person& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Person& from) {
    Person::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSchedulesFieldNumber = 4,
    kLabelsFieldNumber = 10,
    kAttributeFieldNumber = 2,
    kHomeFieldNumber = 3,
    kVehicleAttributeFieldNumber = 7,
    kBusAttributeFieldNumber = 8,
    kBikeAttributeFieldNumber = 9,
    kProfileFieldNumber = 11,
    kPedestrianAttributeFieldNumber = 12,
    kWorkFieldNumber = 13,
    kIdFieldNumber = 1,
    kOutputWhenSleepFieldNumber = 14,
    kTypeFieldNumber = 15,
  };
  // repeated .city.trip.v2.Schedule schedules = 4 [json_name = "schedules"];
  int schedules_size() const;
  private:
  int _internal_schedules_size() const;
  public:
  void clear_schedules();
  ::city::trip::v2::Schedule* mutable_schedules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::trip::v2::Schedule >*
      mutable_schedules();
  private:
  const ::city::trip::v2::Schedule& _internal_schedules(int index) const;
  ::city::trip::v2::Schedule* _internal_add_schedules();
  public:
  const ::city::trip::v2::Schedule& schedules(int index) const;
  ::city::trip::v2::Schedule* add_schedules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::trip::v2::Schedule >&
      schedules() const;

  // map<string, string> labels = 10 [json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // .city.person.v2.PersonAttribute attribute = 2 [json_name = "attribute"];
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  const ::city::person::v2::PersonAttribute& attribute() const;
  PROTOBUF_NODISCARD ::city::person::v2::PersonAttribute* release_attribute();
  ::city::person::v2::PersonAttribute* mutable_attribute();
  void set_allocated_attribute(::city::person::v2::PersonAttribute* attribute);
  private:
  const ::city::person::v2::PersonAttribute& _internal_attribute() const;
  ::city::person::v2::PersonAttribute* _internal_mutable_attribute();
  public:
  void unsafe_arena_set_allocated_attribute(
      ::city::person::v2::PersonAttribute* attribute);
  ::city::person::v2::PersonAttribute* unsafe_arena_release_attribute();

  // .city.geo.v2.Position home = 3 [json_name = "home"];
  bool has_home() const;
  private:
  bool _internal_has_home() const;
  public:
  void clear_home();
  const ::city::geo::v2::Position& home() const;
  PROTOBUF_NODISCARD ::city::geo::v2::Position* release_home();
  ::city::geo::v2::Position* mutable_home();
  void set_allocated_home(::city::geo::v2::Position* home);
  private:
  const ::city::geo::v2::Position& _internal_home() const;
  ::city::geo::v2::Position* _internal_mutable_home();
  public:
  void unsafe_arena_set_allocated_home(
      ::city::geo::v2::Position* home);
  ::city::geo::v2::Position* unsafe_arena_release_home();

  // optional .city.person.v2.VehicleAttribute vehicle_attribute = 7 [json_name = "vehicleAttribute"];
  bool has_vehicle_attribute() const;
  private:
  bool _internal_has_vehicle_attribute() const;
  public:
  void clear_vehicle_attribute();
  const ::city::person::v2::VehicleAttribute& vehicle_attribute() const;
  PROTOBUF_NODISCARD ::city::person::v2::VehicleAttribute* release_vehicle_attribute();
  ::city::person::v2::VehicleAttribute* mutable_vehicle_attribute();
  void set_allocated_vehicle_attribute(::city::person::v2::VehicleAttribute* vehicle_attribute);
  private:
  const ::city::person::v2::VehicleAttribute& _internal_vehicle_attribute() const;
  ::city::person::v2::VehicleAttribute* _internal_mutable_vehicle_attribute();
  public:
  void unsafe_arena_set_allocated_vehicle_attribute(
      ::city::person::v2::VehicleAttribute* vehicle_attribute);
  ::city::person::v2::VehicleAttribute* unsafe_arena_release_vehicle_attribute();

  // optional .city.person.v2.BusAttribute bus_attribute = 8 [json_name = "busAttribute"];
  bool has_bus_attribute() const;
  private:
  bool _internal_has_bus_attribute() const;
  public:
  void clear_bus_attribute();
  const ::city::person::v2::BusAttribute& bus_attribute() const;
  PROTOBUF_NODISCARD ::city::person::v2::BusAttribute* release_bus_attribute();
  ::city::person::v2::BusAttribute* mutable_bus_attribute();
  void set_allocated_bus_attribute(::city::person::v2::BusAttribute* bus_attribute);
  private:
  const ::city::person::v2::BusAttribute& _internal_bus_attribute() const;
  ::city::person::v2::BusAttribute* _internal_mutable_bus_attribute();
  public:
  void unsafe_arena_set_allocated_bus_attribute(
      ::city::person::v2::BusAttribute* bus_attribute);
  ::city::person::v2::BusAttribute* unsafe_arena_release_bus_attribute();

  // optional .city.person.v2.BikeAttribute bike_attribute = 9 [json_name = "bikeAttribute"];
  bool has_bike_attribute() const;
  private:
  bool _internal_has_bike_attribute() const;
  public:
  void clear_bike_attribute();
  const ::city::person::v2::BikeAttribute& bike_attribute() const;
  PROTOBUF_NODISCARD ::city::person::v2::BikeAttribute* release_bike_attribute();
  ::city::person::v2::BikeAttribute* mutable_bike_attribute();
  void set_allocated_bike_attribute(::city::person::v2::BikeAttribute* bike_attribute);
  private:
  const ::city::person::v2::BikeAttribute& _internal_bike_attribute() const;
  ::city::person::v2::BikeAttribute* _internal_mutable_bike_attribute();
  public:
  void unsafe_arena_set_allocated_bike_attribute(
      ::city::person::v2::BikeAttribute* bike_attribute);
  ::city::person::v2::BikeAttribute* unsafe_arena_release_bike_attribute();

  // optional .city.person.v2.PersonProfile profile = 11 [json_name = "profile"];
  bool has_profile() const;
  private:
  bool _internal_has_profile() const;
  public:
  void clear_profile();
  const ::city::person::v2::PersonProfile& profile() const;
  PROTOBUF_NODISCARD ::city::person::v2::PersonProfile* release_profile();
  ::city::person::v2::PersonProfile* mutable_profile();
  void set_allocated_profile(::city::person::v2::PersonProfile* profile);
  private:
  const ::city::person::v2::PersonProfile& _internal_profile() const;
  ::city::person::v2::PersonProfile* _internal_mutable_profile();
  public:
  void unsafe_arena_set_allocated_profile(
      ::city::person::v2::PersonProfile* profile);
  ::city::person::v2::PersonProfile* unsafe_arena_release_profile();

  // optional .city.person.v2.PedestrianAttribute pedestrian_attribute = 12 [json_name = "pedestrianAttribute"];
  bool has_pedestrian_attribute() const;
  private:
  bool _internal_has_pedestrian_attribute() const;
  public:
  void clear_pedestrian_attribute();
  const ::city::person::v2::PedestrianAttribute& pedestrian_attribute() const;
  PROTOBUF_NODISCARD ::city::person::v2::PedestrianAttribute* release_pedestrian_attribute();
  ::city::person::v2::PedestrianAttribute* mutable_pedestrian_attribute();
  void set_allocated_pedestrian_attribute(::city::person::v2::PedestrianAttribute* pedestrian_attribute);
  private:
  const ::city::person::v2::PedestrianAttribute& _internal_pedestrian_attribute() const;
  ::city::person::v2::PedestrianAttribute* _internal_mutable_pedestrian_attribute();
  public:
  void unsafe_arena_set_allocated_pedestrian_attribute(
      ::city::person::v2::PedestrianAttribute* pedestrian_attribute);
  ::city::person::v2::PedestrianAttribute* unsafe_arena_release_pedestrian_attribute();

  // optional .city.geo.v2.Position work = 13 [json_name = "work"];
  bool has_work() const;
  private:
  bool _internal_has_work() const;
  public:
  void clear_work();
  const ::city::geo::v2::Position& work() const;
  PROTOBUF_NODISCARD ::city::geo::v2::Position* release_work();
  ::city::geo::v2::Position* mutable_work();
  void set_allocated_work(::city::geo::v2::Position* work);
  private:
  const ::city::geo::v2::Position& _internal_work() const;
  ::city::geo::v2::Position* _internal_mutable_work();
  public:
  void unsafe_arena_set_allocated_work(
      ::city::geo::v2::Position* work);
  ::city::geo::v2::Position* unsafe_arena_release_work();

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // optional bool output_when_sleep = 14 [json_name = "outputWhenSleep"];
  bool has_output_when_sleep() const;
  private:
  bool _internal_has_output_when_sleep() const;
  public:
  void clear_output_when_sleep();
  bool output_when_sleep() const;
  void set_output_when_sleep(bool value);
  private:
  bool _internal_output_when_sleep() const;
  void _internal_set_output_when_sleep(bool value);
  public:

  // .city.person.v2.PersonType type = 15 [json_name = "type"];
  void clear_type();
  ::city::person::v2::PersonType type() const;
  void set_type(::city::person::v2::PersonType value);
  private:
  ::city::person::v2::PersonType _internal_type() const;
  void _internal_set_type(::city::person::v2::PersonType value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.Person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::trip::v2::Schedule > schedules_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Person_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::city::person::v2::PersonAttribute* attribute_;
    ::city::geo::v2::Position* home_;
    ::city::person::v2::VehicleAttribute* vehicle_attribute_;
    ::city::person::v2::BusAttribute* bus_attribute_;
    ::city::person::v2::BikeAttribute* bike_attribute_;
    ::city::person::v2::PersonProfile* profile_;
    ::city::person::v2::PedestrianAttribute* pedestrian_attribute_;
    ::city::geo::v2::Position* work_;
    int32_t id_;
    bool output_when_sleep_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_2eproto;
};
// -------------------------------------------------------------------

class Persons final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.Persons) */ {
 public:
  inline Persons() : Persons(nullptr) {}
  ~Persons() override;
  explicit PROTOBUF_CONSTEXPR Persons(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Persons(const Persons& from);
  Persons(Persons&& from) noexcept
    : Persons() {
    *this = ::std::move(from);
  }

  inline Persons& operator=(const Persons& from) {
    CopyFrom(from);
    return *this;
  }
  inline Persons& operator=(Persons&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Persons& default_instance() {
    return *internal_default_instance();
  }
  static inline const Persons* internal_default_instance() {
    return reinterpret_cast<const Persons*>(
               &_Persons_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Persons& a, Persons& b) {
    a.Swap(&b);
  }
  inline void Swap(Persons* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Persons* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Persons* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Persons>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Persons& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Persons& from) {
    Persons::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Persons* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.Persons";
  }
  protected:
  explicit Persons(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonsFieldNumber = 1,
  };
  // repeated .city.person.v2.Person persons = 1 [json_name = "persons"];
  int persons_size() const;
  private:
  int _internal_persons_size() const;
  public:
  void clear_persons();
  ::city::person::v2::Person* mutable_persons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::Person >*
      mutable_persons();
  private:
  const ::city::person::v2::Person& _internal_persons(int index) const;
  ::city::person::v2::Person* _internal_add_persons();
  public:
  const ::city::person::v2::Person& persons(int index) const;
  ::city::person::v2::Person* add_persons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::Person >&
      persons() const;

  // @@protoc_insertion_point(class_scope:city.person.v2.Persons)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::Person > persons_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PersonAttribute

// -------------------------------------------------------------------

// VehicleEngineEfficiency

// double energy_conversion_efficiency = 1 [json_name = "energyConversionEfficiency"];
inline void VehicleEngineEfficiency::clear_energy_conversion_efficiency() {
  _impl_.energy_conversion_efficiency_ = 0;
}
inline double VehicleEngineEfficiency::_internal_energy_conversion_efficiency() const {
  return _impl_.energy_conversion_efficiency_;
}
inline double VehicleEngineEfficiency::energy_conversion_efficiency() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleEngineEfficiency.energy_conversion_efficiency)
  return _internal_energy_conversion_efficiency();
}
inline void VehicleEngineEfficiency::_internal_set_energy_conversion_efficiency(double value) {
  
  _impl_.energy_conversion_efficiency_ = value;
}
inline void VehicleEngineEfficiency::set_energy_conversion_efficiency(double value) {
  _internal_set_energy_conversion_efficiency(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleEngineEfficiency.energy_conversion_efficiency)
}

// double c_ef = 2 [json_name = "cEf"];
inline void VehicleEngineEfficiency::clear_c_ef() {
  _impl_.c_ef_ = 0;
}
inline double VehicleEngineEfficiency::_internal_c_ef() const {
  return _impl_.c_ef_;
}
inline double VehicleEngineEfficiency::c_ef() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleEngineEfficiency.c_ef)
  return _internal_c_ef();
}
inline void VehicleEngineEfficiency::_internal_set_c_ef(double value) {
  
  _impl_.c_ef_ = value;
}
inline void VehicleEngineEfficiency::set_c_ef(double value) {
  _internal_set_c_ef(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleEngineEfficiency.c_ef)
}

// -------------------------------------------------------------------

// EmissionAttribute

// double weight = 1 [json_name = "weight"];
inline void EmissionAttribute::clear_weight() {
  _impl_.weight_ = 0;
}
inline double EmissionAttribute::_internal_weight() const {
  return _impl_.weight_;
}
inline double EmissionAttribute::weight() const {
  // @@protoc_insertion_point(field_get:city.person.v2.EmissionAttribute.weight)
  return _internal_weight();
}
inline void EmissionAttribute::_internal_set_weight(double value) {
  
  _impl_.weight_ = value;
}
inline void EmissionAttribute::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:city.person.v2.EmissionAttribute.weight)
}

// .city.person.v2.VehicleEngineType type = 2 [json_name = "type"];
inline void EmissionAttribute::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::person::v2::VehicleEngineType EmissionAttribute::_internal_type() const {
  return static_cast< ::city::person::v2::VehicleEngineType >(_impl_.type_);
}
inline ::city::person::v2::VehicleEngineType EmissionAttribute::type() const {
  // @@protoc_insertion_point(field_get:city.person.v2.EmissionAttribute.type)
  return _internal_type();
}
inline void EmissionAttribute::_internal_set_type(::city::person::v2::VehicleEngineType value) {
  
  _impl_.type_ = value;
}
inline void EmissionAttribute::set_type(::city::person::v2::VehicleEngineType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.person.v2.EmissionAttribute.type)
}

// double coefficient_drag = 3 [json_name = "coefficientDrag"];
inline void EmissionAttribute::clear_coefficient_drag() {
  _impl_.coefficient_drag_ = 0;
}
inline double EmissionAttribute::_internal_coefficient_drag() const {
  return _impl_.coefficient_drag_;
}
inline double EmissionAttribute::coefficient_drag() const {
  // @@protoc_insertion_point(field_get:city.person.v2.EmissionAttribute.coefficient_drag)
  return _internal_coefficient_drag();
}
inline void EmissionAttribute::_internal_set_coefficient_drag(double value) {
  
  _impl_.coefficient_drag_ = value;
}
inline void EmissionAttribute::set_coefficient_drag(double value) {
  _internal_set_coefficient_drag(value);
  // @@protoc_insertion_point(field_set:city.person.v2.EmissionAttribute.coefficient_drag)
}

// double lambda_s = 4 [json_name = "lambdaS"];
inline void EmissionAttribute::clear_lambda_s() {
  _impl_.lambda_s_ = 0;
}
inline double EmissionAttribute::_internal_lambda_s() const {
  return _impl_.lambda_s_;
}
inline double EmissionAttribute::lambda_s() const {
  // @@protoc_insertion_point(field_get:city.person.v2.EmissionAttribute.lambda_s)
  return _internal_lambda_s();
}
inline void EmissionAttribute::_internal_set_lambda_s(double value) {
  
  _impl_.lambda_s_ = value;
}
inline void EmissionAttribute::set_lambda_s(double value) {
  _internal_set_lambda_s(value);
  // @@protoc_insertion_point(field_set:city.person.v2.EmissionAttribute.lambda_s)
}

// double frontal_area = 5 [json_name = "frontalArea"];
inline void EmissionAttribute::clear_frontal_area() {
  _impl_.frontal_area_ = 0;
}
inline double EmissionAttribute::_internal_frontal_area() const {
  return _impl_.frontal_area_;
}
inline double EmissionAttribute::frontal_area() const {
  // @@protoc_insertion_point(field_get:city.person.v2.EmissionAttribute.frontal_area)
  return _internal_frontal_area();
}
inline void EmissionAttribute::_internal_set_frontal_area(double value) {
  
  _impl_.frontal_area_ = value;
}
inline void EmissionAttribute::set_frontal_area(double value) {
  _internal_set_frontal_area(value);
  // @@protoc_insertion_point(field_set:city.person.v2.EmissionAttribute.frontal_area)
}

// optional .city.person.v2.VehicleEngineEfficiency fuel_efficiency = 6 [json_name = "fuelEfficiency"];
inline bool EmissionAttribute::_internal_has_fuel_efficiency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fuel_efficiency_ != nullptr);
  return value;
}
inline bool EmissionAttribute::has_fuel_efficiency() const {
  return _internal_has_fuel_efficiency();
}
inline void EmissionAttribute::clear_fuel_efficiency() {
  if (_impl_.fuel_efficiency_ != nullptr) _impl_.fuel_efficiency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::city::person::v2::VehicleEngineEfficiency& EmissionAttribute::_internal_fuel_efficiency() const {
  const ::city::person::v2::VehicleEngineEfficiency* p = _impl_.fuel_efficiency_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::VehicleEngineEfficiency&>(
      ::city::person::v2::_VehicleEngineEfficiency_default_instance_);
}
inline const ::city::person::v2::VehicleEngineEfficiency& EmissionAttribute::fuel_efficiency() const {
  // @@protoc_insertion_point(field_get:city.person.v2.EmissionAttribute.fuel_efficiency)
  return _internal_fuel_efficiency();
}
inline void EmissionAttribute::unsafe_arena_set_allocated_fuel_efficiency(
    ::city::person::v2::VehicleEngineEfficiency* fuel_efficiency) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fuel_efficiency_);
  }
  _impl_.fuel_efficiency_ = fuel_efficiency;
  if (fuel_efficiency) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.EmissionAttribute.fuel_efficiency)
}
inline ::city::person::v2::VehicleEngineEfficiency* EmissionAttribute::release_fuel_efficiency() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::person::v2::VehicleEngineEfficiency* temp = _impl_.fuel_efficiency_;
  _impl_.fuel_efficiency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::VehicleEngineEfficiency* EmissionAttribute::unsafe_arena_release_fuel_efficiency() {
  // @@protoc_insertion_point(field_release:city.person.v2.EmissionAttribute.fuel_efficiency)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::person::v2::VehicleEngineEfficiency* temp = _impl_.fuel_efficiency_;
  _impl_.fuel_efficiency_ = nullptr;
  return temp;
}
inline ::city::person::v2::VehicleEngineEfficiency* EmissionAttribute::_internal_mutable_fuel_efficiency() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.fuel_efficiency_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::VehicleEngineEfficiency>(GetArenaForAllocation());
    _impl_.fuel_efficiency_ = p;
  }
  return _impl_.fuel_efficiency_;
}
inline ::city::person::v2::VehicleEngineEfficiency* EmissionAttribute::mutable_fuel_efficiency() {
  ::city::person::v2::VehicleEngineEfficiency* _msg = _internal_mutable_fuel_efficiency();
  // @@protoc_insertion_point(field_mutable:city.person.v2.EmissionAttribute.fuel_efficiency)
  return _msg;
}
inline void EmissionAttribute::set_allocated_fuel_efficiency(::city::person::v2::VehicleEngineEfficiency* fuel_efficiency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fuel_efficiency_;
  }
  if (fuel_efficiency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fuel_efficiency);
    if (message_arena != submessage_arena) {
      fuel_efficiency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fuel_efficiency, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fuel_efficiency_ = fuel_efficiency;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.EmissionAttribute.fuel_efficiency)
}

// optional .city.person.v2.VehicleEngineEfficiency electric_efficiency = 7 [json_name = "electricEfficiency"];
inline bool EmissionAttribute::_internal_has_electric_efficiency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.electric_efficiency_ != nullptr);
  return value;
}
inline bool EmissionAttribute::has_electric_efficiency() const {
  return _internal_has_electric_efficiency();
}
inline void EmissionAttribute::clear_electric_efficiency() {
  if (_impl_.electric_efficiency_ != nullptr) _impl_.electric_efficiency_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::city::person::v2::VehicleEngineEfficiency& EmissionAttribute::_internal_electric_efficiency() const {
  const ::city::person::v2::VehicleEngineEfficiency* p = _impl_.electric_efficiency_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::VehicleEngineEfficiency&>(
      ::city::person::v2::_VehicleEngineEfficiency_default_instance_);
}
inline const ::city::person::v2::VehicleEngineEfficiency& EmissionAttribute::electric_efficiency() const {
  // @@protoc_insertion_point(field_get:city.person.v2.EmissionAttribute.electric_efficiency)
  return _internal_electric_efficiency();
}
inline void EmissionAttribute::unsafe_arena_set_allocated_electric_efficiency(
    ::city::person::v2::VehicleEngineEfficiency* electric_efficiency) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.electric_efficiency_);
  }
  _impl_.electric_efficiency_ = electric_efficiency;
  if (electric_efficiency) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.EmissionAttribute.electric_efficiency)
}
inline ::city::person::v2::VehicleEngineEfficiency* EmissionAttribute::release_electric_efficiency() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::person::v2::VehicleEngineEfficiency* temp = _impl_.electric_efficiency_;
  _impl_.electric_efficiency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::VehicleEngineEfficiency* EmissionAttribute::unsafe_arena_release_electric_efficiency() {
  // @@protoc_insertion_point(field_release:city.person.v2.EmissionAttribute.electric_efficiency)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::person::v2::VehicleEngineEfficiency* temp = _impl_.electric_efficiency_;
  _impl_.electric_efficiency_ = nullptr;
  return temp;
}
inline ::city::person::v2::VehicleEngineEfficiency* EmissionAttribute::_internal_mutable_electric_efficiency() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.electric_efficiency_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::VehicleEngineEfficiency>(GetArenaForAllocation());
    _impl_.electric_efficiency_ = p;
  }
  return _impl_.electric_efficiency_;
}
inline ::city::person::v2::VehicleEngineEfficiency* EmissionAttribute::mutable_electric_efficiency() {
  ::city::person::v2::VehicleEngineEfficiency* _msg = _internal_mutable_electric_efficiency();
  // @@protoc_insertion_point(field_mutable:city.person.v2.EmissionAttribute.electric_efficiency)
  return _msg;
}
inline void EmissionAttribute::set_allocated_electric_efficiency(::city::person::v2::VehicleEngineEfficiency* electric_efficiency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.electric_efficiency_;
  }
  if (electric_efficiency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(electric_efficiency);
    if (message_arena != submessage_arena) {
      electric_efficiency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, electric_efficiency, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.electric_efficiency_ = electric_efficiency;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.EmissionAttribute.electric_efficiency)
}

// -------------------------------------------------------------------

// VehicleAttribute

// double length = 1 [json_name = "length"];
inline void VehicleAttribute::clear_length() {
  _impl_.length_ = 0;
}
inline double VehicleAttribute::_internal_length() const {
  return _impl_.length_;
}
inline double VehicleAttribute::length() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAttribute.length)
  return _internal_length();
}
inline void VehicleAttribute::_internal_set_length(double value) {
  
  _impl_.length_ = value;
}
inline void VehicleAttribute::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAttribute.length)
}

// double width = 2 [json_name = "width"];
inline void VehicleAttribute::clear_width() {
  _impl_.width_ = 0;
}
inline double VehicleAttribute::_internal_width() const {
  return _impl_.width_;
}
inline double VehicleAttribute::width() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAttribute.width)
  return _internal_width();
}
inline void VehicleAttribute::_internal_set_width(double value) {
  
  _impl_.width_ = value;
}
inline void VehicleAttribute::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAttribute.width)
}

// double max_speed = 3 [json_name = "maxSpeed"];
inline void VehicleAttribute::clear_max_speed() {
  _impl_.max_speed_ = 0;
}
inline double VehicleAttribute::_internal_max_speed() const {
  return _impl_.max_speed_;
}
inline double VehicleAttribute::max_speed() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAttribute.max_speed)
  return _internal_max_speed();
}
inline void VehicleAttribute::_internal_set_max_speed(double value) {
  
  _impl_.max_speed_ = value;
}
inline void VehicleAttribute::set_max_speed(double value) {
  _internal_set_max_speed(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAttribute.max_speed)
}

// double max_acceleration = 4 [json_name = "maxAcceleration"];
inline void VehicleAttribute::clear_max_acceleration() {
  _impl_.max_acceleration_ = 0;
}
inline double VehicleAttribute::_internal_max_acceleration() const {
  return _impl_.max_acceleration_;
}
inline double VehicleAttribute::max_acceleration() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAttribute.max_acceleration)
  return _internal_max_acceleration();
}
inline void VehicleAttribute::_internal_set_max_acceleration(double value) {
  
  _impl_.max_acceleration_ = value;
}
inline void VehicleAttribute::set_max_acceleration(double value) {
  _internal_set_max_acceleration(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAttribute.max_acceleration)
}

// double max_braking_acceleration = 5 [json_name = "maxBrakingAcceleration"];
inline void VehicleAttribute::clear_max_braking_acceleration() {
  _impl_.max_braking_acceleration_ = 0;
}
inline double VehicleAttribute::_internal_max_braking_acceleration() const {
  return _impl_.max_braking_acceleration_;
}
inline double VehicleAttribute::max_braking_acceleration() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAttribute.max_braking_acceleration)
  return _internal_max_braking_acceleration();
}
inline void VehicleAttribute::_internal_set_max_braking_acceleration(double value) {
  
  _impl_.max_braking_acceleration_ = value;
}
inline void VehicleAttribute::set_max_braking_acceleration(double value) {
  _internal_set_max_braking_acceleration(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAttribute.max_braking_acceleration)
}

// double usual_acceleration = 6 [json_name = "usualAcceleration"];
inline void VehicleAttribute::clear_usual_acceleration() {
  _impl_.usual_acceleration_ = 0;
}
inline double VehicleAttribute::_internal_usual_acceleration() const {
  return _impl_.usual_acceleration_;
}
inline double VehicleAttribute::usual_acceleration() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAttribute.usual_acceleration)
  return _internal_usual_acceleration();
}
inline void VehicleAttribute::_internal_set_usual_acceleration(double value) {
  
  _impl_.usual_acceleration_ = value;
}
inline void VehicleAttribute::set_usual_acceleration(double value) {
  _internal_set_usual_acceleration(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAttribute.usual_acceleration)
}

// double usual_braking_acceleration = 7 [json_name = "usualBrakingAcceleration"];
inline void VehicleAttribute::clear_usual_braking_acceleration() {
  _impl_.usual_braking_acceleration_ = 0;
}
inline double VehicleAttribute::_internal_usual_braking_acceleration() const {
  return _impl_.usual_braking_acceleration_;
}
inline double VehicleAttribute::usual_braking_acceleration() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAttribute.usual_braking_acceleration)
  return _internal_usual_braking_acceleration();
}
inline void VehicleAttribute::_internal_set_usual_braking_acceleration(double value) {
  
  _impl_.usual_braking_acceleration_ = value;
}
inline void VehicleAttribute::set_usual_braking_acceleration(double value) {
  _internal_set_usual_braking_acceleration(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAttribute.usual_braking_acceleration)
}

// double lane_change_length = 8 [json_name = "laneChangeLength"];
inline void VehicleAttribute::clear_lane_change_length() {
  _impl_.lane_change_length_ = 0;
}
inline double VehicleAttribute::_internal_lane_change_length() const {
  return _impl_.lane_change_length_;
}
inline double VehicleAttribute::lane_change_length() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAttribute.lane_change_length)
  return _internal_lane_change_length();
}
inline void VehicleAttribute::_internal_set_lane_change_length(double value) {
  
  _impl_.lane_change_length_ = value;
}
inline void VehicleAttribute::set_lane_change_length(double value) {
  _internal_set_lane_change_length(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAttribute.lane_change_length)
}

// double min_gap = 9 [json_name = "minGap"];
inline void VehicleAttribute::clear_min_gap() {
  _impl_.min_gap_ = 0;
}
inline double VehicleAttribute::_internal_min_gap() const {
  return _impl_.min_gap_;
}
inline double VehicleAttribute::min_gap() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAttribute.min_gap)
  return _internal_min_gap();
}
inline void VehicleAttribute::_internal_set_min_gap(double value) {
  
  _impl_.min_gap_ = value;
}
inline void VehicleAttribute::set_min_gap(double value) {
  _internal_set_min_gap(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAttribute.min_gap)
}

// double headway = 10 [json_name = "headway"];
inline void VehicleAttribute::clear_headway() {
  _impl_.headway_ = 0;
}
inline double VehicleAttribute::_internal_headway() const {
  return _impl_.headway_;
}
inline double VehicleAttribute::headway() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAttribute.headway)
  return _internal_headway();
}
inline void VehicleAttribute::_internal_set_headway(double value) {
  
  _impl_.headway_ = value;
}
inline void VehicleAttribute::set_headway(double value) {
  _internal_set_headway(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAttribute.headway)
}

// optional string model = 11 [json_name = "model"];
inline bool VehicleAttribute::_internal_has_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehicleAttribute::has_model() const {
  return _internal_has_model();
}
inline void VehicleAttribute::clear_model() {
  _impl_.model_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VehicleAttribute::model() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAttribute.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VehicleAttribute::set_model(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAttribute.model)
}
inline std::string* VehicleAttribute::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:city.person.v2.VehicleAttribute.model)
  return _s;
}
inline const std::string& VehicleAttribute::_internal_model() const {
  return _impl_.model_.Get();
}
inline void VehicleAttribute::_internal_set_model(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* VehicleAttribute::_internal_mutable_model() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_.Mutable(GetArenaForAllocation());
}
inline std::string* VehicleAttribute::release_model() {
  // @@protoc_insertion_point(field_release:city.person.v2.VehicleAttribute.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.model_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void VehicleAttribute::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.VehicleAttribute.model)
}

// double lane_max_speed_recognition_deviation = 12 [json_name = "laneMaxSpeedRecognitionDeviation"];
inline void VehicleAttribute::clear_lane_max_speed_recognition_deviation() {
  _impl_.lane_max_speed_recognition_deviation_ = 0;
}
inline double VehicleAttribute::_internal_lane_max_speed_recognition_deviation() const {
  return _impl_.lane_max_speed_recognition_deviation_;
}
inline double VehicleAttribute::lane_max_speed_recognition_deviation() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAttribute.lane_max_speed_recognition_deviation)
  return _internal_lane_max_speed_recognition_deviation();
}
inline void VehicleAttribute::_internal_set_lane_max_speed_recognition_deviation(double value) {
  
  _impl_.lane_max_speed_recognition_deviation_ = value;
}
inline void VehicleAttribute::set_lane_max_speed_recognition_deviation(double value) {
  _internal_set_lane_max_speed_recognition_deviation(value);
  // @@protoc_insertion_point(field_set:city.person.v2.VehicleAttribute.lane_max_speed_recognition_deviation)
}

// .city.person.v2.EmissionAttribute emission_attribute = 13 [json_name = "emissionAttribute"];
inline bool VehicleAttribute::_internal_has_emission_attribute() const {
  return this != internal_default_instance() && _impl_.emission_attribute_ != nullptr;
}
inline bool VehicleAttribute::has_emission_attribute() const {
  return _internal_has_emission_attribute();
}
inline void VehicleAttribute::clear_emission_attribute() {
  if (GetArenaForAllocation() == nullptr && _impl_.emission_attribute_ != nullptr) {
    delete _impl_.emission_attribute_;
  }
  _impl_.emission_attribute_ = nullptr;
}
inline const ::city::person::v2::EmissionAttribute& VehicleAttribute::_internal_emission_attribute() const {
  const ::city::person::v2::EmissionAttribute* p = _impl_.emission_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::EmissionAttribute&>(
      ::city::person::v2::_EmissionAttribute_default_instance_);
}
inline const ::city::person::v2::EmissionAttribute& VehicleAttribute::emission_attribute() const {
  // @@protoc_insertion_point(field_get:city.person.v2.VehicleAttribute.emission_attribute)
  return _internal_emission_attribute();
}
inline void VehicleAttribute::unsafe_arena_set_allocated_emission_attribute(
    ::city::person::v2::EmissionAttribute* emission_attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.emission_attribute_);
  }
  _impl_.emission_attribute_ = emission_attribute;
  if (emission_attribute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.VehicleAttribute.emission_attribute)
}
inline ::city::person::v2::EmissionAttribute* VehicleAttribute::release_emission_attribute() {
  
  ::city::person::v2::EmissionAttribute* temp = _impl_.emission_attribute_;
  _impl_.emission_attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::EmissionAttribute* VehicleAttribute::unsafe_arena_release_emission_attribute() {
  // @@protoc_insertion_point(field_release:city.person.v2.VehicleAttribute.emission_attribute)
  
  ::city::person::v2::EmissionAttribute* temp = _impl_.emission_attribute_;
  _impl_.emission_attribute_ = nullptr;
  return temp;
}
inline ::city::person::v2::EmissionAttribute* VehicleAttribute::_internal_mutable_emission_attribute() {
  
  if (_impl_.emission_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::EmissionAttribute>(GetArenaForAllocation());
    _impl_.emission_attribute_ = p;
  }
  return _impl_.emission_attribute_;
}
inline ::city::person::v2::EmissionAttribute* VehicleAttribute::mutable_emission_attribute() {
  ::city::person::v2::EmissionAttribute* _msg = _internal_mutable_emission_attribute();
  // @@protoc_insertion_point(field_mutable:city.person.v2.VehicleAttribute.emission_attribute)
  return _msg;
}
inline void VehicleAttribute::set_allocated_emission_attribute(::city::person::v2::EmissionAttribute* emission_attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.emission_attribute_;
  }
  if (emission_attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(emission_attribute);
    if (message_arena != submessage_arena) {
      emission_attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emission_attribute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.emission_attribute_ = emission_attribute;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.VehicleAttribute.emission_attribute)
}

// -------------------------------------------------------------------

// BusAttribute

// int32 subline_id = 1 [json_name = "sublineId"];
inline void BusAttribute::clear_subline_id() {
  _impl_.subline_id_ = 0;
}
inline int32_t BusAttribute::_internal_subline_id() const {
  return _impl_.subline_id_;
}
inline int32_t BusAttribute::subline_id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.BusAttribute.subline_id)
  return _internal_subline_id();
}
inline void BusAttribute::_internal_set_subline_id(int32_t value) {
  
  _impl_.subline_id_ = value;
}
inline void BusAttribute::set_subline_id(int32_t value) {
  _internal_set_subline_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.BusAttribute.subline_id)
}

// int32 capacity = 2 [json_name = "capacity"];
inline void BusAttribute::clear_capacity() {
  _impl_.capacity_ = 0;
}
inline int32_t BusAttribute::_internal_capacity() const {
  return _impl_.capacity_;
}
inline int32_t BusAttribute::capacity() const {
  // @@protoc_insertion_point(field_get:city.person.v2.BusAttribute.capacity)
  return _internal_capacity();
}
inline void BusAttribute::_internal_set_capacity(int32_t value) {
  
  _impl_.capacity_ = value;
}
inline void BusAttribute::set_capacity(int32_t value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:city.person.v2.BusAttribute.capacity)
}

// .city.person.v2.BusType type = 5 [json_name = "type"];
inline void BusAttribute::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::person::v2::BusType BusAttribute::_internal_type() const {
  return static_cast< ::city::person::v2::BusType >(_impl_.type_);
}
inline ::city::person::v2::BusType BusAttribute::type() const {
  // @@protoc_insertion_point(field_get:city.person.v2.BusAttribute.type)
  return _internal_type();
}
inline void BusAttribute::_internal_set_type(::city::person::v2::BusType value) {
  
  _impl_.type_ = value;
}
inline void BusAttribute::set_type(::city::person::v2::BusType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.person.v2.BusAttribute.type)
}

// -------------------------------------------------------------------

// PedestrianAttribute

// double speed = 1 [json_name = "speed"];
inline void PedestrianAttribute::clear_speed() {
  _impl_.speed_ = 0;
}
inline double PedestrianAttribute::_internal_speed() const {
  return _impl_.speed_;
}
inline double PedestrianAttribute::speed() const {
  // @@protoc_insertion_point(field_get:city.person.v2.PedestrianAttribute.speed)
  return _internal_speed();
}
inline void PedestrianAttribute::_internal_set_speed(double value) {
  
  _impl_.speed_ = value;
}
inline void PedestrianAttribute::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:city.person.v2.PedestrianAttribute.speed)
}

// optional string model = 2 [json_name = "model"];
inline bool PedestrianAttribute::_internal_has_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PedestrianAttribute::has_model() const {
  return _internal_has_model();
}
inline void PedestrianAttribute::clear_model() {
  _impl_.model_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PedestrianAttribute::model() const {
  // @@protoc_insertion_point(field_get:city.person.v2.PedestrianAttribute.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PedestrianAttribute::set_model(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.person.v2.PedestrianAttribute.model)
}
inline std::string* PedestrianAttribute::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:city.person.v2.PedestrianAttribute.model)
  return _s;
}
inline const std::string& PedestrianAttribute::_internal_model() const {
  return _impl_.model_.Get();
}
inline void PedestrianAttribute::_internal_set_model(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* PedestrianAttribute::_internal_mutable_model() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_.Mutable(GetArenaForAllocation());
}
inline std::string* PedestrianAttribute::release_model() {
  // @@protoc_insertion_point(field_release:city.person.v2.PedestrianAttribute.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.model_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PedestrianAttribute::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.PedestrianAttribute.model)
}

// -------------------------------------------------------------------

// BikeAttribute

// double speed = 1 [json_name = "speed"];
inline void BikeAttribute::clear_speed() {
  _impl_.speed_ = 0;
}
inline double BikeAttribute::_internal_speed() const {
  return _impl_.speed_;
}
inline double BikeAttribute::speed() const {
  // @@protoc_insertion_point(field_get:city.person.v2.BikeAttribute.speed)
  return _internal_speed();
}
inline void BikeAttribute::_internal_set_speed(double value) {
  
  _impl_.speed_ = value;
}
inline void BikeAttribute::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:city.person.v2.BikeAttribute.speed)
}

// optional string model = 2 [json_name = "model"];
inline bool BikeAttribute::_internal_has_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BikeAttribute::has_model() const {
  return _internal_has_model();
}
inline void BikeAttribute::clear_model() {
  _impl_.model_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BikeAttribute::model() const {
  // @@protoc_insertion_point(field_get:city.person.v2.BikeAttribute.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BikeAttribute::set_model(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.person.v2.BikeAttribute.model)
}
inline std::string* BikeAttribute::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:city.person.v2.BikeAttribute.model)
  return _s;
}
inline const std::string& BikeAttribute::_internal_model() const {
  return _impl_.model_.Get();
}
inline void BikeAttribute::_internal_set_model(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* BikeAttribute::_internal_mutable_model() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_.Mutable(GetArenaForAllocation());
}
inline std::string* BikeAttribute::release_model() {
  // @@protoc_insertion_point(field_release:city.person.v2.BikeAttribute.model)
  if (!_internal_has_model()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.model_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BikeAttribute::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.model_.IsDefault()) {
    _impl_.model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.BikeAttribute.model)
}

// -------------------------------------------------------------------

// PersonProfile

// int32 age = 1 [json_name = "age"];
inline void PersonProfile::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t PersonProfile::_internal_age() const {
  return _impl_.age_;
}
inline int32_t PersonProfile::age() const {
  // @@protoc_insertion_point(field_get:city.person.v2.PersonProfile.age)
  return _internal_age();
}
inline void PersonProfile::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void PersonProfile::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:city.person.v2.PersonProfile.age)
}

// .city.person.v2.Education education = 2 [json_name = "education"];
inline void PersonProfile::clear_education() {
  _impl_.education_ = 0;
}
inline ::city::person::v2::Education PersonProfile::_internal_education() const {
  return static_cast< ::city::person::v2::Education >(_impl_.education_);
}
inline ::city::person::v2::Education PersonProfile::education() const {
  // @@protoc_insertion_point(field_get:city.person.v2.PersonProfile.education)
  return _internal_education();
}
inline void PersonProfile::_internal_set_education(::city::person::v2::Education value) {
  
  _impl_.education_ = value;
}
inline void PersonProfile::set_education(::city::person::v2::Education value) {
  _internal_set_education(value);
  // @@protoc_insertion_point(field_set:city.person.v2.PersonProfile.education)
}

// .city.person.v2.Gender gender = 3 [json_name = "gender"];
inline void PersonProfile::clear_gender() {
  _impl_.gender_ = 0;
}
inline ::city::person::v2::Gender PersonProfile::_internal_gender() const {
  return static_cast< ::city::person::v2::Gender >(_impl_.gender_);
}
inline ::city::person::v2::Gender PersonProfile::gender() const {
  // @@protoc_insertion_point(field_get:city.person.v2.PersonProfile.gender)
  return _internal_gender();
}
inline void PersonProfile::_internal_set_gender(::city::person::v2::Gender value) {
  
  _impl_.gender_ = value;
}
inline void PersonProfile::set_gender(::city::person::v2::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:city.person.v2.PersonProfile.gender)
}

// .city.person.v2.Consumption consumption = 4 [json_name = "consumption"];
inline void PersonProfile::clear_consumption() {
  _impl_.consumption_ = 0;
}
inline ::city::person::v2::Consumption PersonProfile::_internal_consumption() const {
  return static_cast< ::city::person::v2::Consumption >(_impl_.consumption_);
}
inline ::city::person::v2::Consumption PersonProfile::consumption() const {
  // @@protoc_insertion_point(field_get:city.person.v2.PersonProfile.consumption)
  return _internal_consumption();
}
inline void PersonProfile::_internal_set_consumption(::city::person::v2::Consumption value) {
  
  _impl_.consumption_ = value;
}
inline void PersonProfile::set_consumption(::city::person::v2::Consumption value) {
  _internal_set_consumption(value);
  // @@protoc_insertion_point(field_set:city.person.v2.PersonProfile.consumption)
}

// int32 house_id = 5 [json_name = "houseId"];
inline void PersonProfile::clear_house_id() {
  _impl_.house_id_ = 0;
}
inline int32_t PersonProfile::_internal_house_id() const {
  return _impl_.house_id_;
}
inline int32_t PersonProfile::house_id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.PersonProfile.house_id)
  return _internal_house_id();
}
inline void PersonProfile::_internal_set_house_id(int32_t value) {
  
  _impl_.house_id_ = value;
}
inline void PersonProfile::set_house_id(int32_t value) {
  _internal_set_house_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.PersonProfile.house_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Person

// int32 id = 1 [json_name = "id"];
inline void Person::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Person::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Person::id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.Person.id)
  return _internal_id();
}
inline void Person::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Person::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.Person.id)
}

// .city.person.v2.PersonAttribute attribute = 2 [json_name = "attribute"];
inline bool Person::_internal_has_attribute() const {
  return this != internal_default_instance() && _impl_.attribute_ != nullptr;
}
inline bool Person::has_attribute() const {
  return _internal_has_attribute();
}
inline void Person::clear_attribute() {
  if (GetArenaForAllocation() == nullptr && _impl_.attribute_ != nullptr) {
    delete _impl_.attribute_;
  }
  _impl_.attribute_ = nullptr;
}
inline const ::city::person::v2::PersonAttribute& Person::_internal_attribute() const {
  const ::city::person::v2::PersonAttribute* p = _impl_.attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::PersonAttribute&>(
      ::city::person::v2::_PersonAttribute_default_instance_);
}
inline const ::city::person::v2::PersonAttribute& Person::attribute() const {
  // @@protoc_insertion_point(field_get:city.person.v2.Person.attribute)
  return _internal_attribute();
}
inline void Person::unsafe_arena_set_allocated_attribute(
    ::city::person::v2::PersonAttribute* attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attribute_);
  }
  _impl_.attribute_ = attribute;
  if (attribute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.Person.attribute)
}
inline ::city::person::v2::PersonAttribute* Person::release_attribute() {
  
  ::city::person::v2::PersonAttribute* temp = _impl_.attribute_;
  _impl_.attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::PersonAttribute* Person::unsafe_arena_release_attribute() {
  // @@protoc_insertion_point(field_release:city.person.v2.Person.attribute)
  
  ::city::person::v2::PersonAttribute* temp = _impl_.attribute_;
  _impl_.attribute_ = nullptr;
  return temp;
}
inline ::city::person::v2::PersonAttribute* Person::_internal_mutable_attribute() {
  
  if (_impl_.attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::PersonAttribute>(GetArenaForAllocation());
    _impl_.attribute_ = p;
  }
  return _impl_.attribute_;
}
inline ::city::person::v2::PersonAttribute* Person::mutable_attribute() {
  ::city::person::v2::PersonAttribute* _msg = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:city.person.v2.Person.attribute)
  return _msg;
}
inline void Person::set_allocated_attribute(::city::person::v2::PersonAttribute* attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attribute_;
  }
  if (attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attribute);
    if (message_arena != submessage_arena) {
      attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attribute_ = attribute;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.Person.attribute)
}

// .city.geo.v2.Position home = 3 [json_name = "home"];
inline bool Person::_internal_has_home() const {
  return this != internal_default_instance() && _impl_.home_ != nullptr;
}
inline bool Person::has_home() const {
  return _internal_has_home();
}
inline const ::city::geo::v2::Position& Person::_internal_home() const {
  const ::city::geo::v2::Position* p = _impl_.home_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::Position&>(
      ::city::geo::v2::_Position_default_instance_);
}
inline const ::city::geo::v2::Position& Person::home() const {
  // @@protoc_insertion_point(field_get:city.person.v2.Person.home)
  return _internal_home();
}
inline void Person::unsafe_arena_set_allocated_home(
    ::city::geo::v2::Position* home) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.home_);
  }
  _impl_.home_ = home;
  if (home) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.Person.home)
}
inline ::city::geo::v2::Position* Person::release_home() {
  
  ::city::geo::v2::Position* temp = _impl_.home_;
  _impl_.home_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::geo::v2::Position* Person::unsafe_arena_release_home() {
  // @@protoc_insertion_point(field_release:city.person.v2.Person.home)
  
  ::city::geo::v2::Position* temp = _impl_.home_;
  _impl_.home_ = nullptr;
  return temp;
}
inline ::city::geo::v2::Position* Person::_internal_mutable_home() {
  
  if (_impl_.home_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::Position>(GetArenaForAllocation());
    _impl_.home_ = p;
  }
  return _impl_.home_;
}
inline ::city::geo::v2::Position* Person::mutable_home() {
  ::city::geo::v2::Position* _msg = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:city.person.v2.Person.home)
  return _msg;
}
inline void Person::set_allocated_home(::city::geo::v2::Position* home) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.home_);
  }
  if (home) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(home));
    if (message_arena != submessage_arena) {
      home = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, home, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.home_ = home;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.Person.home)
}

// repeated .city.trip.v2.Schedule schedules = 4 [json_name = "schedules"];
inline int Person::_internal_schedules_size() const {
  return _impl_.schedules_.size();
}
inline int Person::schedules_size() const {
  return _internal_schedules_size();
}
inline ::city::trip::v2::Schedule* Person::mutable_schedules(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v2.Person.schedules)
  return _impl_.schedules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::trip::v2::Schedule >*
Person::mutable_schedules() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.Person.schedules)
  return &_impl_.schedules_;
}
inline const ::city::trip::v2::Schedule& Person::_internal_schedules(int index) const {
  return _impl_.schedules_.Get(index);
}
inline const ::city::trip::v2::Schedule& Person::schedules(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.Person.schedules)
  return _internal_schedules(index);
}
inline ::city::trip::v2::Schedule* Person::_internal_add_schedules() {
  return _impl_.schedules_.Add();
}
inline ::city::trip::v2::Schedule* Person::add_schedules() {
  ::city::trip::v2::Schedule* _add = _internal_add_schedules();
  // @@protoc_insertion_point(field_add:city.person.v2.Person.schedules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::trip::v2::Schedule >&
Person::schedules() const {
  // @@protoc_insertion_point(field_list:city.person.v2.Person.schedules)
  return _impl_.schedules_;
}

// optional .city.person.v2.VehicleAttribute vehicle_attribute = 7 [json_name = "vehicleAttribute"];
inline bool Person::_internal_has_vehicle_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_attribute_ != nullptr);
  return value;
}
inline bool Person::has_vehicle_attribute() const {
  return _internal_has_vehicle_attribute();
}
inline void Person::clear_vehicle_attribute() {
  if (_impl_.vehicle_attribute_ != nullptr) _impl_.vehicle_attribute_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::city::person::v2::VehicleAttribute& Person::_internal_vehicle_attribute() const {
  const ::city::person::v2::VehicleAttribute* p = _impl_.vehicle_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::VehicleAttribute&>(
      ::city::person::v2::_VehicleAttribute_default_instance_);
}
inline const ::city::person::v2::VehicleAttribute& Person::vehicle_attribute() const {
  // @@protoc_insertion_point(field_get:city.person.v2.Person.vehicle_attribute)
  return _internal_vehicle_attribute();
}
inline void Person::unsafe_arena_set_allocated_vehicle_attribute(
    ::city::person::v2::VehicleAttribute* vehicle_attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehicle_attribute_);
  }
  _impl_.vehicle_attribute_ = vehicle_attribute;
  if (vehicle_attribute) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.Person.vehicle_attribute)
}
inline ::city::person::v2::VehicleAttribute* Person::release_vehicle_attribute() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::person::v2::VehicleAttribute* temp = _impl_.vehicle_attribute_;
  _impl_.vehicle_attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::VehicleAttribute* Person::unsafe_arena_release_vehicle_attribute() {
  // @@protoc_insertion_point(field_release:city.person.v2.Person.vehicle_attribute)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::person::v2::VehicleAttribute* temp = _impl_.vehicle_attribute_;
  _impl_.vehicle_attribute_ = nullptr;
  return temp;
}
inline ::city::person::v2::VehicleAttribute* Person::_internal_mutable_vehicle_attribute() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.vehicle_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::VehicleAttribute>(GetArenaForAllocation());
    _impl_.vehicle_attribute_ = p;
  }
  return _impl_.vehicle_attribute_;
}
inline ::city::person::v2::VehicleAttribute* Person::mutable_vehicle_attribute() {
  ::city::person::v2::VehicleAttribute* _msg = _internal_mutable_vehicle_attribute();
  // @@protoc_insertion_point(field_mutable:city.person.v2.Person.vehicle_attribute)
  return _msg;
}
inline void Person::set_allocated_vehicle_attribute(::city::person::v2::VehicleAttribute* vehicle_attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vehicle_attribute_;
  }
  if (vehicle_attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vehicle_attribute);
    if (message_arena != submessage_arena) {
      vehicle_attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_attribute, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.vehicle_attribute_ = vehicle_attribute;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.Person.vehicle_attribute)
}

// optional .city.person.v2.BusAttribute bus_attribute = 8 [json_name = "busAttribute"];
inline bool Person::_internal_has_bus_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bus_attribute_ != nullptr);
  return value;
}
inline bool Person::has_bus_attribute() const {
  return _internal_has_bus_attribute();
}
inline void Person::clear_bus_attribute() {
  if (_impl_.bus_attribute_ != nullptr) _impl_.bus_attribute_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::city::person::v2::BusAttribute& Person::_internal_bus_attribute() const {
  const ::city::person::v2::BusAttribute* p = _impl_.bus_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::BusAttribute&>(
      ::city::person::v2::_BusAttribute_default_instance_);
}
inline const ::city::person::v2::BusAttribute& Person::bus_attribute() const {
  // @@protoc_insertion_point(field_get:city.person.v2.Person.bus_attribute)
  return _internal_bus_attribute();
}
inline void Person::unsafe_arena_set_allocated_bus_attribute(
    ::city::person::v2::BusAttribute* bus_attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bus_attribute_);
  }
  _impl_.bus_attribute_ = bus_attribute;
  if (bus_attribute) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.Person.bus_attribute)
}
inline ::city::person::v2::BusAttribute* Person::release_bus_attribute() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::person::v2::BusAttribute* temp = _impl_.bus_attribute_;
  _impl_.bus_attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::BusAttribute* Person::unsafe_arena_release_bus_attribute() {
  // @@protoc_insertion_point(field_release:city.person.v2.Person.bus_attribute)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::person::v2::BusAttribute* temp = _impl_.bus_attribute_;
  _impl_.bus_attribute_ = nullptr;
  return temp;
}
inline ::city::person::v2::BusAttribute* Person::_internal_mutable_bus_attribute() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bus_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::BusAttribute>(GetArenaForAllocation());
    _impl_.bus_attribute_ = p;
  }
  return _impl_.bus_attribute_;
}
inline ::city::person::v2::BusAttribute* Person::mutable_bus_attribute() {
  ::city::person::v2::BusAttribute* _msg = _internal_mutable_bus_attribute();
  // @@protoc_insertion_point(field_mutable:city.person.v2.Person.bus_attribute)
  return _msg;
}
inline void Person::set_allocated_bus_attribute(::city::person::v2::BusAttribute* bus_attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bus_attribute_;
  }
  if (bus_attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bus_attribute);
    if (message_arena != submessage_arena) {
      bus_attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_attribute, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bus_attribute_ = bus_attribute;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.Person.bus_attribute)
}

// optional .city.person.v2.PedestrianAttribute pedestrian_attribute = 12 [json_name = "pedestrianAttribute"];
inline bool Person::_internal_has_pedestrian_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pedestrian_attribute_ != nullptr);
  return value;
}
inline bool Person::has_pedestrian_attribute() const {
  return _internal_has_pedestrian_attribute();
}
inline void Person::clear_pedestrian_attribute() {
  if (_impl_.pedestrian_attribute_ != nullptr) _impl_.pedestrian_attribute_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::city::person::v2::PedestrianAttribute& Person::_internal_pedestrian_attribute() const {
  const ::city::person::v2::PedestrianAttribute* p = _impl_.pedestrian_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::PedestrianAttribute&>(
      ::city::person::v2::_PedestrianAttribute_default_instance_);
}
inline const ::city::person::v2::PedestrianAttribute& Person::pedestrian_attribute() const {
  // @@protoc_insertion_point(field_get:city.person.v2.Person.pedestrian_attribute)
  return _internal_pedestrian_attribute();
}
inline void Person::unsafe_arena_set_allocated_pedestrian_attribute(
    ::city::person::v2::PedestrianAttribute* pedestrian_attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pedestrian_attribute_);
  }
  _impl_.pedestrian_attribute_ = pedestrian_attribute;
  if (pedestrian_attribute) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.Person.pedestrian_attribute)
}
inline ::city::person::v2::PedestrianAttribute* Person::release_pedestrian_attribute() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::city::person::v2::PedestrianAttribute* temp = _impl_.pedestrian_attribute_;
  _impl_.pedestrian_attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::PedestrianAttribute* Person::unsafe_arena_release_pedestrian_attribute() {
  // @@protoc_insertion_point(field_release:city.person.v2.Person.pedestrian_attribute)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::city::person::v2::PedestrianAttribute* temp = _impl_.pedestrian_attribute_;
  _impl_.pedestrian_attribute_ = nullptr;
  return temp;
}
inline ::city::person::v2::PedestrianAttribute* Person::_internal_mutable_pedestrian_attribute() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.pedestrian_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::PedestrianAttribute>(GetArenaForAllocation());
    _impl_.pedestrian_attribute_ = p;
  }
  return _impl_.pedestrian_attribute_;
}
inline ::city::person::v2::PedestrianAttribute* Person::mutable_pedestrian_attribute() {
  ::city::person::v2::PedestrianAttribute* _msg = _internal_mutable_pedestrian_attribute();
  // @@protoc_insertion_point(field_mutable:city.person.v2.Person.pedestrian_attribute)
  return _msg;
}
inline void Person::set_allocated_pedestrian_attribute(::city::person::v2::PedestrianAttribute* pedestrian_attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pedestrian_attribute_;
  }
  if (pedestrian_attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pedestrian_attribute);
    if (message_arena != submessage_arena) {
      pedestrian_attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pedestrian_attribute, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.pedestrian_attribute_ = pedestrian_attribute;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.Person.pedestrian_attribute)
}

// optional .city.person.v2.BikeAttribute bike_attribute = 9 [json_name = "bikeAttribute"];
inline bool Person::_internal_has_bike_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bike_attribute_ != nullptr);
  return value;
}
inline bool Person::has_bike_attribute() const {
  return _internal_has_bike_attribute();
}
inline void Person::clear_bike_attribute() {
  if (_impl_.bike_attribute_ != nullptr) _impl_.bike_attribute_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::city::person::v2::BikeAttribute& Person::_internal_bike_attribute() const {
  const ::city::person::v2::BikeAttribute* p = _impl_.bike_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::BikeAttribute&>(
      ::city::person::v2::_BikeAttribute_default_instance_);
}
inline const ::city::person::v2::BikeAttribute& Person::bike_attribute() const {
  // @@protoc_insertion_point(field_get:city.person.v2.Person.bike_attribute)
  return _internal_bike_attribute();
}
inline void Person::unsafe_arena_set_allocated_bike_attribute(
    ::city::person::v2::BikeAttribute* bike_attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bike_attribute_);
  }
  _impl_.bike_attribute_ = bike_attribute;
  if (bike_attribute) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.Person.bike_attribute)
}
inline ::city::person::v2::BikeAttribute* Person::release_bike_attribute() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::person::v2::BikeAttribute* temp = _impl_.bike_attribute_;
  _impl_.bike_attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::BikeAttribute* Person::unsafe_arena_release_bike_attribute() {
  // @@protoc_insertion_point(field_release:city.person.v2.Person.bike_attribute)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::person::v2::BikeAttribute* temp = _impl_.bike_attribute_;
  _impl_.bike_attribute_ = nullptr;
  return temp;
}
inline ::city::person::v2::BikeAttribute* Person::_internal_mutable_bike_attribute() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.bike_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::BikeAttribute>(GetArenaForAllocation());
    _impl_.bike_attribute_ = p;
  }
  return _impl_.bike_attribute_;
}
inline ::city::person::v2::BikeAttribute* Person::mutable_bike_attribute() {
  ::city::person::v2::BikeAttribute* _msg = _internal_mutable_bike_attribute();
  // @@protoc_insertion_point(field_mutable:city.person.v2.Person.bike_attribute)
  return _msg;
}
inline void Person::set_allocated_bike_attribute(::city::person::v2::BikeAttribute* bike_attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bike_attribute_;
  }
  if (bike_attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bike_attribute);
    if (message_arena != submessage_arena) {
      bike_attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bike_attribute, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.bike_attribute_ = bike_attribute;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.Person.bike_attribute)
}

// map<string, string> labels = 10 [json_name = "labels"];
inline int Person::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int Person::labels_size() const {
  return _internal_labels_size();
}
inline void Person::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Person::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Person::labels() const {
  // @@protoc_insertion_point(field_map:city.person.v2.Person.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Person::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Person::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:city.person.v2.Person.labels)
  return _internal_mutable_labels();
}

// optional .city.person.v2.PersonProfile profile = 11 [json_name = "profile"];
inline bool Person::_internal_has_profile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.profile_ != nullptr);
  return value;
}
inline bool Person::has_profile() const {
  return _internal_has_profile();
}
inline void Person::clear_profile() {
  if (_impl_.profile_ != nullptr) _impl_.profile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::city::person::v2::PersonProfile& Person::_internal_profile() const {
  const ::city::person::v2::PersonProfile* p = _impl_.profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::PersonProfile&>(
      ::city::person::v2::_PersonProfile_default_instance_);
}
inline const ::city::person::v2::PersonProfile& Person::profile() const {
  // @@protoc_insertion_point(field_get:city.person.v2.Person.profile)
  return _internal_profile();
}
inline void Person::unsafe_arena_set_allocated_profile(
    ::city::person::v2::PersonProfile* profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.profile_);
  }
  _impl_.profile_ = profile;
  if (profile) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.Person.profile)
}
inline ::city::person::v2::PersonProfile* Person::release_profile() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::city::person::v2::PersonProfile* temp = _impl_.profile_;
  _impl_.profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::PersonProfile* Person::unsafe_arena_release_profile() {
  // @@protoc_insertion_point(field_release:city.person.v2.Person.profile)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::city::person::v2::PersonProfile* temp = _impl_.profile_;
  _impl_.profile_ = nullptr;
  return temp;
}
inline ::city::person::v2::PersonProfile* Person::_internal_mutable_profile() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::PersonProfile>(GetArenaForAllocation());
    _impl_.profile_ = p;
  }
  return _impl_.profile_;
}
inline ::city::person::v2::PersonProfile* Person::mutable_profile() {
  ::city::person::v2::PersonProfile* _msg = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:city.person.v2.Person.profile)
  return _msg;
}
inline void Person::set_allocated_profile(::city::person::v2::PersonProfile* profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.profile_;
  }
  if (profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(profile);
    if (message_arena != submessage_arena) {
      profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.profile_ = profile;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.Person.profile)
}

// optional .city.geo.v2.Position work = 13 [json_name = "work"];
inline bool Person::_internal_has_work() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.work_ != nullptr);
  return value;
}
inline bool Person::has_work() const {
  return _internal_has_work();
}
inline const ::city::geo::v2::Position& Person::_internal_work() const {
  const ::city::geo::v2::Position* p = _impl_.work_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::Position&>(
      ::city::geo::v2::_Position_default_instance_);
}
inline const ::city::geo::v2::Position& Person::work() const {
  // @@protoc_insertion_point(field_get:city.person.v2.Person.work)
  return _internal_work();
}
inline void Person::unsafe_arena_set_allocated_work(
    ::city::geo::v2::Position* work) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.work_);
  }
  _impl_.work_ = work;
  if (work) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.Person.work)
}
inline ::city::geo::v2::Position* Person::release_work() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::city::geo::v2::Position* temp = _impl_.work_;
  _impl_.work_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::geo::v2::Position* Person::unsafe_arena_release_work() {
  // @@protoc_insertion_point(field_release:city.person.v2.Person.work)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::city::geo::v2::Position* temp = _impl_.work_;
  _impl_.work_ = nullptr;
  return temp;
}
inline ::city::geo::v2::Position* Person::_internal_mutable_work() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.work_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::Position>(GetArenaForAllocation());
    _impl_.work_ = p;
  }
  return _impl_.work_;
}
inline ::city::geo::v2::Position* Person::mutable_work() {
  ::city::geo::v2::Position* _msg = _internal_mutable_work();
  // @@protoc_insertion_point(field_mutable:city.person.v2.Person.work)
  return _msg;
}
inline void Person::set_allocated_work(::city::geo::v2::Position* work) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.work_);
  }
  if (work) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work));
    if (message_arena != submessage_arena) {
      work = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.work_ = work;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.Person.work)
}

// optional bool output_when_sleep = 14 [json_name = "outputWhenSleep"];
inline bool Person::_internal_has_output_when_sleep() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Person::has_output_when_sleep() const {
  return _internal_has_output_when_sleep();
}
inline void Person::clear_output_when_sleep() {
  _impl_.output_when_sleep_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool Person::_internal_output_when_sleep() const {
  return _impl_.output_when_sleep_;
}
inline bool Person::output_when_sleep() const {
  // @@protoc_insertion_point(field_get:city.person.v2.Person.output_when_sleep)
  return _internal_output_when_sleep();
}
inline void Person::_internal_set_output_when_sleep(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.output_when_sleep_ = value;
}
inline void Person::set_output_when_sleep(bool value) {
  _internal_set_output_when_sleep(value);
  // @@protoc_insertion_point(field_set:city.person.v2.Person.output_when_sleep)
}

// .city.person.v2.PersonType type = 15 [json_name = "type"];
inline void Person::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::person::v2::PersonType Person::_internal_type() const {
  return static_cast< ::city::person::v2::PersonType >(_impl_.type_);
}
inline ::city::person::v2::PersonType Person::type() const {
  // @@protoc_insertion_point(field_get:city.person.v2.Person.type)
  return _internal_type();
}
inline void Person::_internal_set_type(::city::person::v2::PersonType value) {
  
  _impl_.type_ = value;
}
inline void Person::set_type(::city::person::v2::PersonType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.person.v2.Person.type)
}

// -------------------------------------------------------------------

// Persons

// repeated .city.person.v2.Person persons = 1 [json_name = "persons"];
inline int Persons::_internal_persons_size() const {
  return _impl_.persons_.size();
}
inline int Persons::persons_size() const {
  return _internal_persons_size();
}
inline void Persons::clear_persons() {
  _impl_.persons_.Clear();
}
inline ::city::person::v2::Person* Persons::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v2.Persons.persons)
  return _impl_.persons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::Person >*
Persons::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.Persons.persons)
  return &_impl_.persons_;
}
inline const ::city::person::v2::Person& Persons::_internal_persons(int index) const {
  return _impl_.persons_.Get(index);
}
inline const ::city::person::v2::Person& Persons::persons(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.Persons.persons)
  return _internal_persons(index);
}
inline ::city::person::v2::Person* Persons::_internal_add_persons() {
  return _impl_.persons_.Add();
}
inline ::city::person::v2::Person* Persons::add_persons() {
  ::city::person::v2::Person* _add = _internal_add_persons();
  // @@protoc_insertion_point(field_add:city.person.v2.Persons.persons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::Person >&
Persons::persons() const {
  // @@protoc_insertion_point(field_list:city.person.v2.Persons.persons)
  return _impl_.persons_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace person
}  // namespace city

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::city::person::v2::VehicleEngineType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::person::v2::VehicleEngineType>() {
  return ::city::person::v2::VehicleEngineType_descriptor();
}
template <> struct is_proto_enum< ::city::person::v2::BusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::person::v2::BusType>() {
  return ::city::person::v2::BusType_descriptor();
}
template <> struct is_proto_enum< ::city::person::v2::Education> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::person::v2::Education>() {
  return ::city::person::v2::Education_descriptor();
}
template <> struct is_proto_enum< ::city::person::v2::Gender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::person::v2::Gender>() {
  return ::city::person::v2::Gender_descriptor();
}
template <> struct is_proto_enum< ::city::person::v2::Consumption> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::person::v2::Consumption>() {
  return ::city::person::v2::Consumption_descriptor();
}
template <> struct is_proto_enum< ::city::person::v2::PersonType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::person::v2::PersonType>() {
  return ::city::person::v2::PersonType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv2_2fperson_2eproto
