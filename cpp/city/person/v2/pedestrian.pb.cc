// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/person/v2/pedestrian.proto

#include "city/person/v2/pedestrian.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace person {
namespace v2 {
PROTOBUF_CONSTEXPR PedestrianAction::PedestrianAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vx_)*/0
  , /*decltype(_impl_.vy_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PedestrianActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PedestrianActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PedestrianActionDefaultTypeInternal() {}
  union {
    PedestrianAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PedestrianActionDefaultTypeInternal _PedestrianAction_default_instance_;
}  // namespace v2
}  // namespace person
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fperson_2fv2_2fpedestrian_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_city_2fperson_2fv2_2fpedestrian_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fperson_2fv2_2fpedestrian_2eproto = nullptr;

const uint32_t TableStruct_city_2fperson_2fv2_2fpedestrian_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PedestrianAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PedestrianAction, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PedestrianAction, _impl_.vx_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PedestrianAction, _impl_.vy_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::person::v2::PedestrianAction)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::person::v2::_PedestrianAction_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fperson_2fv2_2fpedestrian_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037city/person/v2/pedestrian.proto\022\016city."
  "person.v2\"B\n\020PedestrianAction\022\016\n\002id\030\001 \001("
  "\005R\002id\022\016\n\002vx\030\002 \001(\001R\002vx\022\016\n\002vy\030\003 \001(\001R\002vyB\270\001"
  "\n\022com.city.person.v2B\017PedestrianProtoP\001Z"
  "7git.fiblab.net/sim/protos/v2/go/city/pe"
  "rson/v2;personv2\242\002\003CPX\252\002\016City.Person.V2\312"
  "\002\016City\\Person\\V2\342\002\032City\\Person\\V2\\GPBMet"
  "adata\352\002\020City::Person::V2b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_city_2fperson_2fv2_2fpedestrian_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fperson_2fv2_2fpedestrian_2eproto = {
    false, false, 312, descriptor_table_protodef_city_2fperson_2fv2_2fpedestrian_2eproto,
    "city/person/v2/pedestrian.proto",
    &descriptor_table_city_2fperson_2fv2_2fpedestrian_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_city_2fperson_2fv2_2fpedestrian_2eproto::offsets,
    file_level_metadata_city_2fperson_2fv2_2fpedestrian_2eproto, file_level_enum_descriptors_city_2fperson_2fv2_2fpedestrian_2eproto,
    file_level_service_descriptors_city_2fperson_2fv2_2fpedestrian_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fperson_2fv2_2fpedestrian_2eproto_getter() {
  return &descriptor_table_city_2fperson_2fv2_2fpedestrian_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fperson_2fv2_2fpedestrian_2eproto(&descriptor_table_city_2fperson_2fv2_2fpedestrian_2eproto);
namespace city {
namespace person {
namespace v2 {

// ===================================================================

class PedestrianAction::_Internal {
 public:
};

PedestrianAction::PedestrianAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v2.PedestrianAction)
}
PedestrianAction::PedestrianAction(const PedestrianAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PedestrianAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vx_){}
    , decltype(_impl_.vy_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vx_, &from._impl_.vx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.vx_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:city.person.v2.PedestrianAction)
}

inline void PedestrianAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vx_){0}
    , decltype(_impl_.vy_){0}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PedestrianAction::~PedestrianAction() {
  // @@protoc_insertion_point(destructor:city.person.v2.PedestrianAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PedestrianAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PedestrianAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PedestrianAction::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v2.PedestrianAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.vx_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PedestrianAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double vx = 2 [json_name = "vx"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double vy = 3 [json_name = "vy"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PedestrianAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v2.PedestrianAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // double vx = 2 [json_name = "vx"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vx = this->_internal_vx();
  uint64_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_vx(), target);
  }

  // double vy = 3 [json_name = "vy"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vy = this->_internal_vy();
  uint64_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_vy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v2.PedestrianAction)
  return target;
}

size_t PedestrianAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v2.PedestrianAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double vx = 2 [json_name = "vx"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vx = this->_internal_vx();
  uint64_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    total_size += 1 + 8;
  }

  // double vy = 3 [json_name = "vy"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vy = this->_internal_vy();
  uint64_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PedestrianAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PedestrianAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PedestrianAction::GetClassData() const { return &_class_data_; }


void PedestrianAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PedestrianAction*>(&to_msg);
  auto& from = static_cast<const PedestrianAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v2.PedestrianAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vx = from._internal_vx();
  uint64_t raw_vx;
  memcpy(&raw_vx, &tmp_vx, sizeof(tmp_vx));
  if (raw_vx != 0) {
    _this->_internal_set_vx(from._internal_vx());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_vy = from._internal_vy();
  uint64_t raw_vy;
  memcpy(&raw_vy, &tmp_vy, sizeof(tmp_vy));
  if (raw_vy != 0) {
    _this->_internal_set_vy(from._internal_vy());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PedestrianAction::CopyFrom(const PedestrianAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v2.PedestrianAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PedestrianAction::IsInitialized() const {
  return true;
}

void PedestrianAction::InternalSwap(PedestrianAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PedestrianAction, _impl_.id_)
      + sizeof(PedestrianAction::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(PedestrianAction, _impl_.vx_)>(
          reinterpret_cast<char*>(&_impl_.vx_),
          reinterpret_cast<char*>(&other->_impl_.vx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PedestrianAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv2_2fpedestrian_2eproto_getter, &descriptor_table_city_2fperson_2fv2_2fpedestrian_2eproto_once,
      file_level_metadata_city_2fperson_2fv2_2fpedestrian_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace person
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::person::v2::PedestrianAction*
Arena::CreateMaybeMessage< ::city::person::v2::PedestrianAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v2::PedestrianAction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
