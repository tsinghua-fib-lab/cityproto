// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/person/v2/person_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv2_2fperson_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv2_2fperson_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "city/geo/v2/geo.pb.h"
#include "city/person/v2/motion.pb.h"
#include "city/person/v2/person.pb.h"
#include "city/person/v2/person_runtime.pb.h"
#include "city/person/v2/taxi.pb.h"
#include "city/person/v2/vehicle.pb.h"
#include "city/trip/v2/trip.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fperson_2fv2_2fperson_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fperson_2fv2_2fperson_5fservice_2eproto;
namespace city {
namespace person {
namespace v2 {
class AddPersonRequest;
struct AddPersonRequestDefaultTypeInternal;
extern AddPersonRequestDefaultTypeInternal _AddPersonRequest_default_instance_;
class AddPersonResponse;
struct AddPersonResponseDefaultTypeInternal;
extern AddPersonResponseDefaultTypeInternal _AddPersonResponse_default_instance_;
class FetchControlledVehicleEnvsRequest;
struct FetchControlledVehicleEnvsRequestDefaultTypeInternal;
extern FetchControlledVehicleEnvsRequestDefaultTypeInternal _FetchControlledVehicleEnvsRequest_default_instance_;
class FetchControlledVehicleEnvsResponse;
struct FetchControlledVehicleEnvsResponseDefaultTypeInternal;
extern FetchControlledVehicleEnvsResponseDefaultTypeInternal _FetchControlledVehicleEnvsResponse_default_instance_;
class GetAllOrdersRequest;
struct GetAllOrdersRequestDefaultTypeInternal;
extern GetAllOrdersRequestDefaultTypeInternal _GetAllOrdersRequest_default_instance_;
class GetAllOrdersResponse;
struct GetAllOrdersResponseDefaultTypeInternal;
extern GetAllOrdersResponseDefaultTypeInternal _GetAllOrdersResponse_default_instance_;
class GetAllVehiclesRequest;
struct GetAllVehiclesRequestDefaultTypeInternal;
extern GetAllVehiclesRequestDefaultTypeInternal _GetAllVehiclesRequest_default_instance_;
class GetAllVehiclesResponse;
struct GetAllVehiclesResponseDefaultTypeInternal;
extern GetAllVehiclesResponseDefaultTypeInternal _GetAllVehiclesResponse_default_instance_;
class GetPersonByLongLatBBoxRequest;
struct GetPersonByLongLatBBoxRequestDefaultTypeInternal;
extern GetPersonByLongLatBBoxRequestDefaultTypeInternal _GetPersonByLongLatBBoxRequest_default_instance_;
class GetPersonByLongLatBBoxResponse;
struct GetPersonByLongLatBBoxResponseDefaultTypeInternal;
extern GetPersonByLongLatBBoxResponseDefaultTypeInternal _GetPersonByLongLatBBoxResponse_default_instance_;
class GetPersonRequest;
struct GetPersonRequestDefaultTypeInternal;
extern GetPersonRequestDefaultTypeInternal _GetPersonRequest_default_instance_;
class GetPersonResponse;
struct GetPersonResponseDefaultTypeInternal;
extern GetPersonResponseDefaultTypeInternal _GetPersonResponse_default_instance_;
class GetPersonsRequest;
struct GetPersonsRequestDefaultTypeInternal;
extern GetPersonsRequestDefaultTypeInternal _GetPersonsRequest_default_instance_;
class GetPersonsResponse;
struct GetPersonsResponseDefaultTypeInternal;
extern GetPersonsResponseDefaultTypeInternal _GetPersonsResponse_default_instance_;
class ResetPersonPositionRequest;
struct ResetPersonPositionRequestDefaultTypeInternal;
extern ResetPersonPositionRequestDefaultTypeInternal _ResetPersonPositionRequest_default_instance_;
class ResetPersonPositionResponse;
struct ResetPersonPositionResponseDefaultTypeInternal;
extern ResetPersonPositionResponseDefaultTypeInternal _ResetPersonPositionResponse_default_instance_;
class SetControlledTaxiIDsRequest;
struct SetControlledTaxiIDsRequestDefaultTypeInternal;
extern SetControlledTaxiIDsRequestDefaultTypeInternal _SetControlledTaxiIDsRequest_default_instance_;
class SetControlledTaxiIDsResponse;
struct SetControlledTaxiIDsResponseDefaultTypeInternal;
extern SetControlledTaxiIDsResponseDefaultTypeInternal _SetControlledTaxiIDsResponse_default_instance_;
class SetControlledTaxiToOrdersRequest;
struct SetControlledTaxiToOrdersRequestDefaultTypeInternal;
extern SetControlledTaxiToOrdersRequestDefaultTypeInternal _SetControlledTaxiToOrdersRequest_default_instance_;
class SetControlledTaxiToOrdersResponse;
struct SetControlledTaxiToOrdersResponseDefaultTypeInternal;
extern SetControlledTaxiToOrdersResponseDefaultTypeInternal _SetControlledTaxiToOrdersResponse_default_instance_;
class SetControlledVehicleActionsRequest;
struct SetControlledVehicleActionsRequestDefaultTypeInternal;
extern SetControlledVehicleActionsRequestDefaultTypeInternal _SetControlledVehicleActionsRequest_default_instance_;
class SetControlledVehicleActionsResponse;
struct SetControlledVehicleActionsResponseDefaultTypeInternal;
extern SetControlledVehicleActionsResponseDefaultTypeInternal _SetControlledVehicleActionsResponse_default_instance_;
class SetControlledVehicleIDsRequest;
struct SetControlledVehicleIDsRequestDefaultTypeInternal;
extern SetControlledVehicleIDsRequestDefaultTypeInternal _SetControlledVehicleIDsRequest_default_instance_;
class SetControlledVehicleIDsResponse;
struct SetControlledVehicleIDsResponseDefaultTypeInternal;
extern SetControlledVehicleIDsResponseDefaultTypeInternal _SetControlledVehicleIDsResponse_default_instance_;
class SetScheduleRequest;
struct SetScheduleRequestDefaultTypeInternal;
extern SetScheduleRequestDefaultTypeInternal _SetScheduleRequest_default_instance_;
class SetScheduleResponse;
struct SetScheduleResponseDefaultTypeInternal;
extern SetScheduleResponseDefaultTypeInternal _SetScheduleResponse_default_instance_;
}  // namespace v2
}  // namespace person
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::person::v2::AddPersonRequest* Arena::CreateMaybeMessage<::city::person::v2::AddPersonRequest>(Arena*);
template<> ::city::person::v2::AddPersonResponse* Arena::CreateMaybeMessage<::city::person::v2::AddPersonResponse>(Arena*);
template<> ::city::person::v2::FetchControlledVehicleEnvsRequest* Arena::CreateMaybeMessage<::city::person::v2::FetchControlledVehicleEnvsRequest>(Arena*);
template<> ::city::person::v2::FetchControlledVehicleEnvsResponse* Arena::CreateMaybeMessage<::city::person::v2::FetchControlledVehicleEnvsResponse>(Arena*);
template<> ::city::person::v2::GetAllOrdersRequest* Arena::CreateMaybeMessage<::city::person::v2::GetAllOrdersRequest>(Arena*);
template<> ::city::person::v2::GetAllOrdersResponse* Arena::CreateMaybeMessage<::city::person::v2::GetAllOrdersResponse>(Arena*);
template<> ::city::person::v2::GetAllVehiclesRequest* Arena::CreateMaybeMessage<::city::person::v2::GetAllVehiclesRequest>(Arena*);
template<> ::city::person::v2::GetAllVehiclesResponse* Arena::CreateMaybeMessage<::city::person::v2::GetAllVehiclesResponse>(Arena*);
template<> ::city::person::v2::GetPersonByLongLatBBoxRequest* Arena::CreateMaybeMessage<::city::person::v2::GetPersonByLongLatBBoxRequest>(Arena*);
template<> ::city::person::v2::GetPersonByLongLatBBoxResponse* Arena::CreateMaybeMessage<::city::person::v2::GetPersonByLongLatBBoxResponse>(Arena*);
template<> ::city::person::v2::GetPersonRequest* Arena::CreateMaybeMessage<::city::person::v2::GetPersonRequest>(Arena*);
template<> ::city::person::v2::GetPersonResponse* Arena::CreateMaybeMessage<::city::person::v2::GetPersonResponse>(Arena*);
template<> ::city::person::v2::GetPersonsRequest* Arena::CreateMaybeMessage<::city::person::v2::GetPersonsRequest>(Arena*);
template<> ::city::person::v2::GetPersonsResponse* Arena::CreateMaybeMessage<::city::person::v2::GetPersonsResponse>(Arena*);
template<> ::city::person::v2::ResetPersonPositionRequest* Arena::CreateMaybeMessage<::city::person::v2::ResetPersonPositionRequest>(Arena*);
template<> ::city::person::v2::ResetPersonPositionResponse* Arena::CreateMaybeMessage<::city::person::v2::ResetPersonPositionResponse>(Arena*);
template<> ::city::person::v2::SetControlledTaxiIDsRequest* Arena::CreateMaybeMessage<::city::person::v2::SetControlledTaxiIDsRequest>(Arena*);
template<> ::city::person::v2::SetControlledTaxiIDsResponse* Arena::CreateMaybeMessage<::city::person::v2::SetControlledTaxiIDsResponse>(Arena*);
template<> ::city::person::v2::SetControlledTaxiToOrdersRequest* Arena::CreateMaybeMessage<::city::person::v2::SetControlledTaxiToOrdersRequest>(Arena*);
template<> ::city::person::v2::SetControlledTaxiToOrdersResponse* Arena::CreateMaybeMessage<::city::person::v2::SetControlledTaxiToOrdersResponse>(Arena*);
template<> ::city::person::v2::SetControlledVehicleActionsRequest* Arena::CreateMaybeMessage<::city::person::v2::SetControlledVehicleActionsRequest>(Arena*);
template<> ::city::person::v2::SetControlledVehicleActionsResponse* Arena::CreateMaybeMessage<::city::person::v2::SetControlledVehicleActionsResponse>(Arena*);
template<> ::city::person::v2::SetControlledVehicleIDsRequest* Arena::CreateMaybeMessage<::city::person::v2::SetControlledVehicleIDsRequest>(Arena*);
template<> ::city::person::v2::SetControlledVehicleIDsResponse* Arena::CreateMaybeMessage<::city::person::v2::SetControlledVehicleIDsResponse>(Arena*);
template<> ::city::person::v2::SetScheduleRequest* Arena::CreateMaybeMessage<::city::person::v2::SetScheduleRequest>(Arena*);
template<> ::city::person::v2::SetScheduleResponse* Arena::CreateMaybeMessage<::city::person::v2::SetScheduleResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace person {
namespace v2 {

// ===================================================================

class GetPersonRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.GetPersonRequest) */ {
 public:
  inline GetPersonRequest() : GetPersonRequest(nullptr) {}
  ~GetPersonRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPersonRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPersonRequest(const GetPersonRequest& from);
  GetPersonRequest(GetPersonRequest&& from) noexcept
    : GetPersonRequest() {
    *this = ::std::move(from);
  }

  inline GetPersonRequest& operator=(const GetPersonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersonRequest& operator=(GetPersonRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPersonRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPersonRequest* internal_default_instance() {
    return reinterpret_cast<const GetPersonRequest*>(
               &_GetPersonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetPersonRequest& a, GetPersonRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersonRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPersonRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPersonRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPersonRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPersonRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPersonRequest& from) {
    GetPersonRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersonRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.GetPersonRequest";
  }
  protected:
  explicit GetPersonRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonIdFieldNumber = 1,
  };
  // int32 person_id = 1 [json_name = "personId"];
  void clear_person_id();
  int32_t person_id() const;
  void set_person_id(int32_t value);
  private:
  int32_t _internal_person_id() const;
  void _internal_set_person_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.GetPersonRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t person_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPersonResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.GetPersonResponse) */ {
 public:
  inline GetPersonResponse() : GetPersonResponse(nullptr) {}
  ~GetPersonResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPersonResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPersonResponse(const GetPersonResponse& from);
  GetPersonResponse(GetPersonResponse&& from) noexcept
    : GetPersonResponse() {
    *this = ::std::move(from);
  }

  inline GetPersonResponse& operator=(const GetPersonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersonResponse& operator=(GetPersonResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPersonResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPersonResponse* internal_default_instance() {
    return reinterpret_cast<const GetPersonResponse*>(
               &_GetPersonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetPersonResponse& a, GetPersonResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersonResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPersonResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPersonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPersonResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPersonResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPersonResponse& from) {
    GetPersonResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersonResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.GetPersonResponse";
  }
  protected:
  explicit GetPersonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonFieldNumber = 1,
  };
  // .city.person.v2.PersonRuntime person = 1 [json_name = "person"];
  bool has_person() const;
  private:
  bool _internal_has_person() const;
  public:
  void clear_person();
  const ::city::person::v2::PersonRuntime& person() const;
  PROTOBUF_NODISCARD ::city::person::v2::PersonRuntime* release_person();
  ::city::person::v2::PersonRuntime* mutable_person();
  void set_allocated_person(::city::person::v2::PersonRuntime* person);
  private:
  const ::city::person::v2::PersonRuntime& _internal_person() const;
  ::city::person::v2::PersonRuntime* _internal_mutable_person();
  public:
  void unsafe_arena_set_allocated_person(
      ::city::person::v2::PersonRuntime* person);
  ::city::person::v2::PersonRuntime* unsafe_arena_release_person();

  // @@protoc_insertion_point(class_scope:city.person.v2.GetPersonResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::person::v2::PersonRuntime* person_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddPersonRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.AddPersonRequest) */ {
 public:
  inline AddPersonRequest() : AddPersonRequest(nullptr) {}
  ~AddPersonRequest() override;
  explicit PROTOBUF_CONSTEXPR AddPersonRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPersonRequest(const AddPersonRequest& from);
  AddPersonRequest(AddPersonRequest&& from) noexcept
    : AddPersonRequest() {
    *this = ::std::move(from);
  }

  inline AddPersonRequest& operator=(const AddPersonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPersonRequest& operator=(AddPersonRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPersonRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPersonRequest* internal_default_instance() {
    return reinterpret_cast<const AddPersonRequest*>(
               &_AddPersonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddPersonRequest& a, AddPersonRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPersonRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPersonRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddPersonRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddPersonRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddPersonRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddPersonRequest& from) {
    AddPersonRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPersonRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.AddPersonRequest";
  }
  protected:
  explicit AddPersonRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonFieldNumber = 1,
  };
  // .city.person.v2.Person person = 1 [json_name = "person"];
  bool has_person() const;
  private:
  bool _internal_has_person() const;
  public:
  void clear_person();
  const ::city::person::v2::Person& person() const;
  PROTOBUF_NODISCARD ::city::person::v2::Person* release_person();
  ::city::person::v2::Person* mutable_person();
  void set_allocated_person(::city::person::v2::Person* person);
  private:
  const ::city::person::v2::Person& _internal_person() const;
  ::city::person::v2::Person* _internal_mutable_person();
  public:
  void unsafe_arena_set_allocated_person(
      ::city::person::v2::Person* person);
  ::city::person::v2::Person* unsafe_arena_release_person();

  // @@protoc_insertion_point(class_scope:city.person.v2.AddPersonRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::person::v2::Person* person_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddPersonResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.AddPersonResponse) */ {
 public:
  inline AddPersonResponse() : AddPersonResponse(nullptr) {}
  ~AddPersonResponse() override;
  explicit PROTOBUF_CONSTEXPR AddPersonResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPersonResponse(const AddPersonResponse& from);
  AddPersonResponse(AddPersonResponse&& from) noexcept
    : AddPersonResponse() {
    *this = ::std::move(from);
  }

  inline AddPersonResponse& operator=(const AddPersonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPersonResponse& operator=(AddPersonResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPersonResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPersonResponse* internal_default_instance() {
    return reinterpret_cast<const AddPersonResponse*>(
               &_AddPersonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddPersonResponse& a, AddPersonResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPersonResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPersonResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddPersonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddPersonResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddPersonResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddPersonResponse& from) {
    AddPersonResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPersonResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.AddPersonResponse";
  }
  protected:
  explicit AddPersonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonIdFieldNumber = 1,
  };
  // int32 person_id = 1 [json_name = "personId"];
  void clear_person_id();
  int32_t person_id() const;
  void set_person_id(int32_t value);
  private:
  int32_t _internal_person_id() const;
  void _internal_set_person_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.AddPersonResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t person_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetScheduleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.SetScheduleRequest) */ {
 public:
  inline SetScheduleRequest() : SetScheduleRequest(nullptr) {}
  ~SetScheduleRequest() override;
  explicit PROTOBUF_CONSTEXPR SetScheduleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetScheduleRequest(const SetScheduleRequest& from);
  SetScheduleRequest(SetScheduleRequest&& from) noexcept
    : SetScheduleRequest() {
    *this = ::std::move(from);
  }

  inline SetScheduleRequest& operator=(const SetScheduleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetScheduleRequest& operator=(SetScheduleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetScheduleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetScheduleRequest* internal_default_instance() {
    return reinterpret_cast<const SetScheduleRequest*>(
               &_SetScheduleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetScheduleRequest& a, SetScheduleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetScheduleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetScheduleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetScheduleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetScheduleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetScheduleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetScheduleRequest& from) {
    SetScheduleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetScheduleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.SetScheduleRequest";
  }
  protected:
  explicit SetScheduleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchedulesFieldNumber = 2,
    kPersonIdFieldNumber = 1,
  };
  // repeated .city.trip.v2.Schedule schedules = 2 [json_name = "schedules"];
  int schedules_size() const;
  private:
  int _internal_schedules_size() const;
  public:
  void clear_schedules();
  ::city::trip::v2::Schedule* mutable_schedules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::trip::v2::Schedule >*
      mutable_schedules();
  private:
  const ::city::trip::v2::Schedule& _internal_schedules(int index) const;
  ::city::trip::v2::Schedule* _internal_add_schedules();
  public:
  const ::city::trip::v2::Schedule& schedules(int index) const;
  ::city::trip::v2::Schedule* add_schedules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::trip::v2::Schedule >&
      schedules() const;

  // int32 person_id = 1 [json_name = "personId"];
  void clear_person_id();
  int32_t person_id() const;
  void set_person_id(int32_t value);
  private:
  int32_t _internal_person_id() const;
  void _internal_set_person_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.SetScheduleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::trip::v2::Schedule > schedules_;
    int32_t person_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetScheduleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.person.v2.SetScheduleResponse) */ {
 public:
  inline SetScheduleResponse() : SetScheduleResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetScheduleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetScheduleResponse(const SetScheduleResponse& from);
  SetScheduleResponse(SetScheduleResponse&& from) noexcept
    : SetScheduleResponse() {
    *this = ::std::move(from);
  }

  inline SetScheduleResponse& operator=(const SetScheduleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetScheduleResponse& operator=(SetScheduleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetScheduleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetScheduleResponse* internal_default_instance() {
    return reinterpret_cast<const SetScheduleResponse*>(
               &_SetScheduleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SetScheduleResponse& a, SetScheduleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetScheduleResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetScheduleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetScheduleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetScheduleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetScheduleResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetScheduleResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.SetScheduleResponse";
  }
  protected:
  explicit SetScheduleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.person.v2.SetScheduleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPersonsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.GetPersonsRequest) */ {
 public:
  inline GetPersonsRequest() : GetPersonsRequest(nullptr) {}
  ~GetPersonsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPersonsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPersonsRequest(const GetPersonsRequest& from);
  GetPersonsRequest(GetPersonsRequest&& from) noexcept
    : GetPersonsRequest() {
    *this = ::std::move(from);
  }

  inline GetPersonsRequest& operator=(const GetPersonsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersonsRequest& operator=(GetPersonsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPersonsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPersonsRequest* internal_default_instance() {
    return reinterpret_cast<const GetPersonsRequest*>(
               &_GetPersonsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetPersonsRequest& a, GetPersonsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersonsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPersonsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPersonsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPersonsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPersonsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPersonsRequest& from) {
    GetPersonsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersonsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.GetPersonsRequest";
  }
  protected:
  explicit GetPersonsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonIdsFieldNumber = 1,
    kExcludeStatusesFieldNumber = 2,
    kReturnBaseFieldNumber = 3,
  };
  // repeated int32 person_ids = 1 [json_name = "personIds"];
  int person_ids_size() const;
  private:
  int _internal_person_ids_size() const;
  public:
  void clear_person_ids();
  private:
  int32_t _internal_person_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_person_ids() const;
  void _internal_add_person_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_person_ids();
  public:
  int32_t person_ids(int index) const;
  void set_person_ids(int index, int32_t value);
  void add_person_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      person_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_person_ids();

  // repeated .city.person.v2.Status exclude_statuses = 2 [json_name = "excludeStatuses"];
  int exclude_statuses_size() const;
  private:
  int _internal_exclude_statuses_size() const;
  public:
  void clear_exclude_statuses();
  private:
  ::city::person::v2::Status _internal_exclude_statuses(int index) const;
  void _internal_add_exclude_statuses(::city::person::v2::Status value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_exclude_statuses();
  public:
  ::city::person::v2::Status exclude_statuses(int index) const;
  void set_exclude_statuses(int index, ::city::person::v2::Status value);
  void add_exclude_statuses(::city::person::v2::Status value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& exclude_statuses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_exclude_statuses();

  // bool return_base = 3 [json_name = "returnBase"];
  void clear_return_base();
  bool return_base() const;
  void set_return_base(bool value);
  private:
  bool _internal_return_base() const;
  void _internal_set_return_base(bool value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.GetPersonsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > person_ids_;
    mutable std::atomic<int> _person_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> exclude_statuses_;
    mutable std::atomic<int> _exclude_statuses_cached_byte_size_;
    bool return_base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPersonsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.GetPersonsResponse) */ {
 public:
  inline GetPersonsResponse() : GetPersonsResponse(nullptr) {}
  ~GetPersonsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPersonsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPersonsResponse(const GetPersonsResponse& from);
  GetPersonsResponse(GetPersonsResponse&& from) noexcept
    : GetPersonsResponse() {
    *this = ::std::move(from);
  }

  inline GetPersonsResponse& operator=(const GetPersonsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersonsResponse& operator=(GetPersonsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPersonsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPersonsResponse* internal_default_instance() {
    return reinterpret_cast<const GetPersonsResponse*>(
               &_GetPersonsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetPersonsResponse& a, GetPersonsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersonsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPersonsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPersonsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPersonsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPersonsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPersonsResponse& from) {
    GetPersonsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersonsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.GetPersonsResponse";
  }
  protected:
  explicit GetPersonsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonsFieldNumber = 1,
  };
  // repeated .city.person.v2.PersonRuntime persons = 1 [json_name = "persons"];
  int persons_size() const;
  private:
  int _internal_persons_size() const;
  public:
  void clear_persons();
  ::city::person::v2::PersonRuntime* mutable_persons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::PersonRuntime >*
      mutable_persons();
  private:
  const ::city::person::v2::PersonRuntime& _internal_persons(int index) const;
  ::city::person::v2::PersonRuntime* _internal_add_persons();
  public:
  const ::city::person::v2::PersonRuntime& persons(int index) const;
  ::city::person::v2::PersonRuntime* add_persons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::PersonRuntime >&
      persons() const;

  // @@protoc_insertion_point(class_scope:city.person.v2.GetPersonsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::PersonRuntime > persons_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPersonByLongLatBBoxRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.GetPersonByLongLatBBoxRequest) */ {
 public:
  inline GetPersonByLongLatBBoxRequest() : GetPersonByLongLatBBoxRequest(nullptr) {}
  ~GetPersonByLongLatBBoxRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPersonByLongLatBBoxRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPersonByLongLatBBoxRequest(const GetPersonByLongLatBBoxRequest& from);
  GetPersonByLongLatBBoxRequest(GetPersonByLongLatBBoxRequest&& from) noexcept
    : GetPersonByLongLatBBoxRequest() {
    *this = ::std::move(from);
  }

  inline GetPersonByLongLatBBoxRequest& operator=(const GetPersonByLongLatBBoxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersonByLongLatBBoxRequest& operator=(GetPersonByLongLatBBoxRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPersonByLongLatBBoxRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPersonByLongLatBBoxRequest* internal_default_instance() {
    return reinterpret_cast<const GetPersonByLongLatBBoxRequest*>(
               &_GetPersonByLongLatBBoxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetPersonByLongLatBBoxRequest& a, GetPersonByLongLatBBoxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersonByLongLatBBoxRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPersonByLongLatBBoxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPersonByLongLatBBoxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPersonByLongLatBBoxRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPersonByLongLatBBoxRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPersonByLongLatBBoxRequest& from) {
    GetPersonByLongLatBBoxRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersonByLongLatBBoxRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.GetPersonByLongLatBBoxRequest";
  }
  protected:
  explicit GetPersonByLongLatBBoxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExcludeStatusesFieldNumber = 2,
    kBboxFieldNumber = 1,
    kReturnBaseFieldNumber = 3,
  };
  // repeated .city.person.v2.Status exclude_statuses = 2 [json_name = "excludeStatuses"];
  int exclude_statuses_size() const;
  private:
  int _internal_exclude_statuses_size() const;
  public:
  void clear_exclude_statuses();
  private:
  ::city::person::v2::Status _internal_exclude_statuses(int index) const;
  void _internal_add_exclude_statuses(::city::person::v2::Status value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_exclude_statuses();
  public:
  ::city::person::v2::Status exclude_statuses(int index) const;
  void set_exclude_statuses(int index, ::city::person::v2::Status value);
  void add_exclude_statuses(::city::person::v2::Status value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& exclude_statuses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_exclude_statuses();

  // .city.geo.v2.LongLatBBox bbox = 1 [json_name = "bbox"];
  bool has_bbox() const;
  private:
  bool _internal_has_bbox() const;
  public:
  void clear_bbox();
  const ::city::geo::v2::LongLatBBox& bbox() const;
  PROTOBUF_NODISCARD ::city::geo::v2::LongLatBBox* release_bbox();
  ::city::geo::v2::LongLatBBox* mutable_bbox();
  void set_allocated_bbox(::city::geo::v2::LongLatBBox* bbox);
  private:
  const ::city::geo::v2::LongLatBBox& _internal_bbox() const;
  ::city::geo::v2::LongLatBBox* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::city::geo::v2::LongLatBBox* bbox);
  ::city::geo::v2::LongLatBBox* unsafe_arena_release_bbox();

  // bool return_base = 3 [json_name = "returnBase"];
  void clear_return_base();
  bool return_base() const;
  void set_return_base(bool value);
  private:
  bool _internal_return_base() const;
  void _internal_set_return_base(bool value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.GetPersonByLongLatBBoxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> exclude_statuses_;
    mutable std::atomic<int> _exclude_statuses_cached_byte_size_;
    ::city::geo::v2::LongLatBBox* bbox_;
    bool return_base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPersonByLongLatBBoxResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.GetPersonByLongLatBBoxResponse) */ {
 public:
  inline GetPersonByLongLatBBoxResponse() : GetPersonByLongLatBBoxResponse(nullptr) {}
  ~GetPersonByLongLatBBoxResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPersonByLongLatBBoxResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPersonByLongLatBBoxResponse(const GetPersonByLongLatBBoxResponse& from);
  GetPersonByLongLatBBoxResponse(GetPersonByLongLatBBoxResponse&& from) noexcept
    : GetPersonByLongLatBBoxResponse() {
    *this = ::std::move(from);
  }

  inline GetPersonByLongLatBBoxResponse& operator=(const GetPersonByLongLatBBoxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPersonByLongLatBBoxResponse& operator=(GetPersonByLongLatBBoxResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPersonByLongLatBBoxResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPersonByLongLatBBoxResponse* internal_default_instance() {
    return reinterpret_cast<const GetPersonByLongLatBBoxResponse*>(
               &_GetPersonByLongLatBBoxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetPersonByLongLatBBoxResponse& a, GetPersonByLongLatBBoxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPersonByLongLatBBoxResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPersonByLongLatBBoxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPersonByLongLatBBoxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPersonByLongLatBBoxResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPersonByLongLatBBoxResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPersonByLongLatBBoxResponse& from) {
    GetPersonByLongLatBBoxResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPersonByLongLatBBoxResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.GetPersonByLongLatBBoxResponse";
  }
  protected:
  explicit GetPersonByLongLatBBoxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonsFieldNumber = 1,
  };
  // repeated .city.person.v2.PersonRuntime persons = 1 [json_name = "persons"];
  int persons_size() const;
  private:
  int _internal_persons_size() const;
  public:
  void clear_persons();
  ::city::person::v2::PersonRuntime* mutable_persons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::PersonRuntime >*
      mutable_persons();
  private:
  const ::city::person::v2::PersonRuntime& _internal_persons(int index) const;
  ::city::person::v2::PersonRuntime* _internal_add_persons();
  public:
  const ::city::person::v2::PersonRuntime& persons(int index) const;
  ::city::person::v2::PersonRuntime* add_persons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::PersonRuntime >&
      persons() const;

  // @@protoc_insertion_point(class_scope:city.person.v2.GetPersonByLongLatBBoxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::PersonRuntime > persons_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAllVehiclesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.person.v2.GetAllVehiclesRequest) */ {
 public:
  inline GetAllVehiclesRequest() : GetAllVehiclesRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetAllVehiclesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllVehiclesRequest(const GetAllVehiclesRequest& from);
  GetAllVehiclesRequest(GetAllVehiclesRequest&& from) noexcept
    : GetAllVehiclesRequest() {
    *this = ::std::move(from);
  }

  inline GetAllVehiclesRequest& operator=(const GetAllVehiclesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllVehiclesRequest& operator=(GetAllVehiclesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllVehiclesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllVehiclesRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllVehiclesRequest*>(
               &_GetAllVehiclesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetAllVehiclesRequest& a, GetAllVehiclesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllVehiclesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllVehiclesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllVehiclesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllVehiclesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetAllVehiclesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetAllVehiclesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.GetAllVehiclesRequest";
  }
  protected:
  explicit GetAllVehiclesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.person.v2.GetAllVehiclesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAllVehiclesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.GetAllVehiclesResponse) */ {
 public:
  inline GetAllVehiclesResponse() : GetAllVehiclesResponse(nullptr) {}
  ~GetAllVehiclesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAllVehiclesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllVehiclesResponse(const GetAllVehiclesResponse& from);
  GetAllVehiclesResponse(GetAllVehiclesResponse&& from) noexcept
    : GetAllVehiclesResponse() {
    *this = ::std::move(from);
  }

  inline GetAllVehiclesResponse& operator=(const GetAllVehiclesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllVehiclesResponse& operator=(GetAllVehiclesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllVehiclesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllVehiclesResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllVehiclesResponse*>(
               &_GetAllVehiclesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetAllVehiclesResponse& a, GetAllVehiclesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllVehiclesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllVehiclesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllVehiclesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllVehiclesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllVehiclesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllVehiclesResponse& from) {
    GetAllVehiclesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllVehiclesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.GetAllVehiclesResponse";
  }
  protected:
  explicit GetAllVehiclesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehiclesFieldNumber = 1,
  };
  // repeated .city.person.v2.VehicleRuntime vehicles = 1 [json_name = "vehicles"];
  int vehicles_size() const;
  private:
  int _internal_vehicles_size() const;
  public:
  void clear_vehicles();
  ::city::person::v2::VehicleRuntime* mutable_vehicles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleRuntime >*
      mutable_vehicles();
  private:
  const ::city::person::v2::VehicleRuntime& _internal_vehicles(int index) const;
  ::city::person::v2::VehicleRuntime* _internal_add_vehicles();
  public:
  const ::city::person::v2::VehicleRuntime& vehicles(int index) const;
  ::city::person::v2::VehicleRuntime* add_vehicles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleRuntime >&
      vehicles() const;

  // @@protoc_insertion_point(class_scope:city.person.v2.GetAllVehiclesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleRuntime > vehicles_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ResetPersonPositionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.ResetPersonPositionRequest) */ {
 public:
  inline ResetPersonPositionRequest() : ResetPersonPositionRequest(nullptr) {}
  ~ResetPersonPositionRequest() override;
  explicit PROTOBUF_CONSTEXPR ResetPersonPositionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetPersonPositionRequest(const ResetPersonPositionRequest& from);
  ResetPersonPositionRequest(ResetPersonPositionRequest&& from) noexcept
    : ResetPersonPositionRequest() {
    *this = ::std::move(from);
  }

  inline ResetPersonPositionRequest& operator=(const ResetPersonPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetPersonPositionRequest& operator=(ResetPersonPositionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetPersonPositionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetPersonPositionRequest* internal_default_instance() {
    return reinterpret_cast<const ResetPersonPositionRequest*>(
               &_ResetPersonPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ResetPersonPositionRequest& a, ResetPersonPositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetPersonPositionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetPersonPositionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResetPersonPositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResetPersonPositionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResetPersonPositionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResetPersonPositionRequest& from) {
    ResetPersonPositionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetPersonPositionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.ResetPersonPositionRequest";
  }
  protected:
  explicit ResetPersonPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kPersonIdFieldNumber = 1,
  };
  // .city.geo.v2.Position position = 2 [json_name = "position"];
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::city::geo::v2::Position& position() const;
  PROTOBUF_NODISCARD ::city::geo::v2::Position* release_position();
  ::city::geo::v2::Position* mutable_position();
  void set_allocated_position(::city::geo::v2::Position* position);
  private:
  const ::city::geo::v2::Position& _internal_position() const;
  ::city::geo::v2::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::city::geo::v2::Position* position);
  ::city::geo::v2::Position* unsafe_arena_release_position();

  // int32 person_id = 1 [json_name = "personId"];
  void clear_person_id();
  int32_t person_id() const;
  void set_person_id(int32_t value);
  private:
  int32_t _internal_person_id() const;
  void _internal_set_person_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.ResetPersonPositionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::geo::v2::Position* position_;
    int32_t person_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ResetPersonPositionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.person.v2.ResetPersonPositionResponse) */ {
 public:
  inline ResetPersonPositionResponse() : ResetPersonPositionResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ResetPersonPositionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetPersonPositionResponse(const ResetPersonPositionResponse& from);
  ResetPersonPositionResponse(ResetPersonPositionResponse&& from) noexcept
    : ResetPersonPositionResponse() {
    *this = ::std::move(from);
  }

  inline ResetPersonPositionResponse& operator=(const ResetPersonPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetPersonPositionResponse& operator=(ResetPersonPositionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetPersonPositionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetPersonPositionResponse* internal_default_instance() {
    return reinterpret_cast<const ResetPersonPositionResponse*>(
               &_ResetPersonPositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ResetPersonPositionResponse& a, ResetPersonPositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetPersonPositionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetPersonPositionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResetPersonPositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResetPersonPositionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResetPersonPositionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResetPersonPositionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.ResetPersonPositionResponse";
  }
  protected:
  explicit ResetPersonPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.person.v2.ResetPersonPositionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetControlledVehicleIDsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.SetControlledVehicleIDsRequest) */ {
 public:
  inline SetControlledVehicleIDsRequest() : SetControlledVehicleIDsRequest(nullptr) {}
  ~SetControlledVehicleIDsRequest() override;
  explicit PROTOBUF_CONSTEXPR SetControlledVehicleIDsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetControlledVehicleIDsRequest(const SetControlledVehicleIDsRequest& from);
  SetControlledVehicleIDsRequest(SetControlledVehicleIDsRequest&& from) noexcept
    : SetControlledVehicleIDsRequest() {
    *this = ::std::move(from);
  }

  inline SetControlledVehicleIDsRequest& operator=(const SetControlledVehicleIDsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetControlledVehicleIDsRequest& operator=(SetControlledVehicleIDsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetControlledVehicleIDsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetControlledVehicleIDsRequest* internal_default_instance() {
    return reinterpret_cast<const SetControlledVehicleIDsRequest*>(
               &_SetControlledVehicleIDsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetControlledVehicleIDsRequest& a, SetControlledVehicleIDsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetControlledVehicleIDsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetControlledVehicleIDsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetControlledVehicleIDsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetControlledVehicleIDsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetControlledVehicleIDsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetControlledVehicleIDsRequest& from) {
    SetControlledVehicleIDsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetControlledVehicleIDsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.SetControlledVehicleIDsRequest";
  }
  protected:
  explicit SetControlledVehicleIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleIdsFieldNumber = 1,
    kRouteVehicleIdsFieldNumber = 2,
  };
  // repeated int32 vehicle_ids = 1 [json_name = "vehicleIds"];
  int vehicle_ids_size() const;
  private:
  int _internal_vehicle_ids_size() const;
  public:
  void clear_vehicle_ids();
  private:
  int32_t _internal_vehicle_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_vehicle_ids() const;
  void _internal_add_vehicle_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_vehicle_ids();
  public:
  int32_t vehicle_ids(int index) const;
  void set_vehicle_ids(int index, int32_t value);
  void add_vehicle_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      vehicle_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_vehicle_ids();

  // repeated int32 route_vehicle_ids = 2 [json_name = "routeVehicleIds"];
  int route_vehicle_ids_size() const;
  private:
  int _internal_route_vehicle_ids_size() const;
  public:
  void clear_route_vehicle_ids();
  private:
  int32_t _internal_route_vehicle_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_route_vehicle_ids() const;
  void _internal_add_route_vehicle_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_route_vehicle_ids();
  public:
  int32_t route_vehicle_ids(int index) const;
  void set_route_vehicle_ids(int index, int32_t value);
  void add_route_vehicle_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      route_vehicle_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_route_vehicle_ids();

  // @@protoc_insertion_point(class_scope:city.person.v2.SetControlledVehicleIDsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > vehicle_ids_;
    mutable std::atomic<int> _vehicle_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > route_vehicle_ids_;
    mutable std::atomic<int> _route_vehicle_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetControlledVehicleIDsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.person.v2.SetControlledVehicleIDsResponse) */ {
 public:
  inline SetControlledVehicleIDsResponse() : SetControlledVehicleIDsResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetControlledVehicleIDsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetControlledVehicleIDsResponse(const SetControlledVehicleIDsResponse& from);
  SetControlledVehicleIDsResponse(SetControlledVehicleIDsResponse&& from) noexcept
    : SetControlledVehicleIDsResponse() {
    *this = ::std::move(from);
  }

  inline SetControlledVehicleIDsResponse& operator=(const SetControlledVehicleIDsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetControlledVehicleIDsResponse& operator=(SetControlledVehicleIDsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetControlledVehicleIDsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetControlledVehicleIDsResponse* internal_default_instance() {
    return reinterpret_cast<const SetControlledVehicleIDsResponse*>(
               &_SetControlledVehicleIDsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetControlledVehicleIDsResponse& a, SetControlledVehicleIDsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetControlledVehicleIDsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetControlledVehicleIDsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetControlledVehicleIDsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetControlledVehicleIDsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetControlledVehicleIDsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetControlledVehicleIDsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.SetControlledVehicleIDsResponse";
  }
  protected:
  explicit SetControlledVehicleIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.person.v2.SetControlledVehicleIDsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchControlledVehicleEnvsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.person.v2.FetchControlledVehicleEnvsRequest) */ {
 public:
  inline FetchControlledVehicleEnvsRequest() : FetchControlledVehicleEnvsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR FetchControlledVehicleEnvsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchControlledVehicleEnvsRequest(const FetchControlledVehicleEnvsRequest& from);
  FetchControlledVehicleEnvsRequest(FetchControlledVehicleEnvsRequest&& from) noexcept
    : FetchControlledVehicleEnvsRequest() {
    *this = ::std::move(from);
  }

  inline FetchControlledVehicleEnvsRequest& operator=(const FetchControlledVehicleEnvsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchControlledVehicleEnvsRequest& operator=(FetchControlledVehicleEnvsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchControlledVehicleEnvsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchControlledVehicleEnvsRequest* internal_default_instance() {
    return reinterpret_cast<const FetchControlledVehicleEnvsRequest*>(
               &_FetchControlledVehicleEnvsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FetchControlledVehicleEnvsRequest& a, FetchControlledVehicleEnvsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchControlledVehicleEnvsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchControlledVehicleEnvsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchControlledVehicleEnvsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchControlledVehicleEnvsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FetchControlledVehicleEnvsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FetchControlledVehicleEnvsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.FetchControlledVehicleEnvsRequest";
  }
  protected:
  explicit FetchControlledVehicleEnvsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.person.v2.FetchControlledVehicleEnvsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class FetchControlledVehicleEnvsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.FetchControlledVehicleEnvsResponse) */ {
 public:
  inline FetchControlledVehicleEnvsResponse() : FetchControlledVehicleEnvsResponse(nullptr) {}
  ~FetchControlledVehicleEnvsResponse() override;
  explicit PROTOBUF_CONSTEXPR FetchControlledVehicleEnvsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchControlledVehicleEnvsResponse(const FetchControlledVehicleEnvsResponse& from);
  FetchControlledVehicleEnvsResponse(FetchControlledVehicleEnvsResponse&& from) noexcept
    : FetchControlledVehicleEnvsResponse() {
    *this = ::std::move(from);
  }

  inline FetchControlledVehicleEnvsResponse& operator=(const FetchControlledVehicleEnvsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchControlledVehicleEnvsResponse& operator=(FetchControlledVehicleEnvsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchControlledVehicleEnvsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchControlledVehicleEnvsResponse* internal_default_instance() {
    return reinterpret_cast<const FetchControlledVehicleEnvsResponse*>(
               &_FetchControlledVehicleEnvsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(FetchControlledVehicleEnvsResponse& a, FetchControlledVehicleEnvsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchControlledVehicleEnvsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchControlledVehicleEnvsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchControlledVehicleEnvsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchControlledVehicleEnvsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchControlledVehicleEnvsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchControlledVehicleEnvsResponse& from) {
    FetchControlledVehicleEnvsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchControlledVehicleEnvsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.FetchControlledVehicleEnvsResponse";
  }
  protected:
  explicit FetchControlledVehicleEnvsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleEnvsFieldNumber = 1,
    kRouteVehicleEnvsFieldNumber = 2,
  };
  // repeated .city.person.v2.VehicleEnv vehicle_envs = 1 [json_name = "vehicleEnvs"];
  int vehicle_envs_size() const;
  private:
  int _internal_vehicle_envs_size() const;
  public:
  void clear_vehicle_envs();
  ::city::person::v2::VehicleEnv* mutable_vehicle_envs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleEnv >*
      mutable_vehicle_envs();
  private:
  const ::city::person::v2::VehicleEnv& _internal_vehicle_envs(int index) const;
  ::city::person::v2::VehicleEnv* _internal_add_vehicle_envs();
  public:
  const ::city::person::v2::VehicleEnv& vehicle_envs(int index) const;
  ::city::person::v2::VehicleEnv* add_vehicle_envs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleEnv >&
      vehicle_envs() const;

  // repeated .city.person.v2.VehicleEnv route_vehicle_envs = 2 [json_name = "routeVehicleEnvs"];
  int route_vehicle_envs_size() const;
  private:
  int _internal_route_vehicle_envs_size() const;
  public:
  void clear_route_vehicle_envs();
  ::city::person::v2::VehicleEnv* mutable_route_vehicle_envs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleEnv >*
      mutable_route_vehicle_envs();
  private:
  const ::city::person::v2::VehicleEnv& _internal_route_vehicle_envs(int index) const;
  ::city::person::v2::VehicleEnv* _internal_add_route_vehicle_envs();
  public:
  const ::city::person::v2::VehicleEnv& route_vehicle_envs(int index) const;
  ::city::person::v2::VehicleEnv* add_route_vehicle_envs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleEnv >&
      route_vehicle_envs() const;

  // @@protoc_insertion_point(class_scope:city.person.v2.FetchControlledVehicleEnvsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleEnv > vehicle_envs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleEnv > route_vehicle_envs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetControlledVehicleActionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.SetControlledVehicleActionsRequest) */ {
 public:
  inline SetControlledVehicleActionsRequest() : SetControlledVehicleActionsRequest(nullptr) {}
  ~SetControlledVehicleActionsRequest() override;
  explicit PROTOBUF_CONSTEXPR SetControlledVehicleActionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetControlledVehicleActionsRequest(const SetControlledVehicleActionsRequest& from);
  SetControlledVehicleActionsRequest(SetControlledVehicleActionsRequest&& from) noexcept
    : SetControlledVehicleActionsRequest() {
    *this = ::std::move(from);
  }

  inline SetControlledVehicleActionsRequest& operator=(const SetControlledVehicleActionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetControlledVehicleActionsRequest& operator=(SetControlledVehicleActionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetControlledVehicleActionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetControlledVehicleActionsRequest* internal_default_instance() {
    return reinterpret_cast<const SetControlledVehicleActionsRequest*>(
               &_SetControlledVehicleActionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SetControlledVehicleActionsRequest& a, SetControlledVehicleActionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetControlledVehicleActionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetControlledVehicleActionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetControlledVehicleActionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetControlledVehicleActionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetControlledVehicleActionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetControlledVehicleActionsRequest& from) {
    SetControlledVehicleActionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetControlledVehicleActionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.SetControlledVehicleActionsRequest";
  }
  protected:
  explicit SetControlledVehicleActionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleActionsFieldNumber = 1,
    kVehicleJourneysFieldNumber = 2,
  };
  // repeated .city.person.v2.VehicleAction vehicle_actions = 1 [json_name = "vehicleActions"];
  int vehicle_actions_size() const;
  private:
  int _internal_vehicle_actions_size() const;
  public:
  void clear_vehicle_actions();
  ::city::person::v2::VehicleAction* mutable_vehicle_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleAction >*
      mutable_vehicle_actions();
  private:
  const ::city::person::v2::VehicleAction& _internal_vehicle_actions(int index) const;
  ::city::person::v2::VehicleAction* _internal_add_vehicle_actions();
  public:
  const ::city::person::v2::VehicleAction& vehicle_actions(int index) const;
  ::city::person::v2::VehicleAction* add_vehicle_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleAction >&
      vehicle_actions() const;

  // repeated .city.person.v2.VehicleRouteAction vehicle_journeys = 2 [json_name = "vehicleJourneys"];
  int vehicle_journeys_size() const;
  private:
  int _internal_vehicle_journeys_size() const;
  public:
  void clear_vehicle_journeys();
  ::city::person::v2::VehicleRouteAction* mutable_vehicle_journeys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleRouteAction >*
      mutable_vehicle_journeys();
  private:
  const ::city::person::v2::VehicleRouteAction& _internal_vehicle_journeys(int index) const;
  ::city::person::v2::VehicleRouteAction* _internal_add_vehicle_journeys();
  public:
  const ::city::person::v2::VehicleRouteAction& vehicle_journeys(int index) const;
  ::city::person::v2::VehicleRouteAction* add_vehicle_journeys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleRouteAction >&
      vehicle_journeys() const;

  // @@protoc_insertion_point(class_scope:city.person.v2.SetControlledVehicleActionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleAction > vehicle_actions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleRouteAction > vehicle_journeys_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetControlledVehicleActionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.person.v2.SetControlledVehicleActionsResponse) */ {
 public:
  inline SetControlledVehicleActionsResponse() : SetControlledVehicleActionsResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetControlledVehicleActionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetControlledVehicleActionsResponse(const SetControlledVehicleActionsResponse& from);
  SetControlledVehicleActionsResponse(SetControlledVehicleActionsResponse&& from) noexcept
    : SetControlledVehicleActionsResponse() {
    *this = ::std::move(from);
  }

  inline SetControlledVehicleActionsResponse& operator=(const SetControlledVehicleActionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetControlledVehicleActionsResponse& operator=(SetControlledVehicleActionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetControlledVehicleActionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetControlledVehicleActionsResponse* internal_default_instance() {
    return reinterpret_cast<const SetControlledVehicleActionsResponse*>(
               &_SetControlledVehicleActionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SetControlledVehicleActionsResponse& a, SetControlledVehicleActionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetControlledVehicleActionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetControlledVehicleActionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetControlledVehicleActionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetControlledVehicleActionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetControlledVehicleActionsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetControlledVehicleActionsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.SetControlledVehicleActionsResponse";
  }
  protected:
  explicit SetControlledVehicleActionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.person.v2.SetControlledVehicleActionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetControlledTaxiIDsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.SetControlledTaxiIDsRequest) */ {
 public:
  inline SetControlledTaxiIDsRequest() : SetControlledTaxiIDsRequest(nullptr) {}
  ~SetControlledTaxiIDsRequest() override;
  explicit PROTOBUF_CONSTEXPR SetControlledTaxiIDsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetControlledTaxiIDsRequest(const SetControlledTaxiIDsRequest& from);
  SetControlledTaxiIDsRequest(SetControlledTaxiIDsRequest&& from) noexcept
    : SetControlledTaxiIDsRequest() {
    *this = ::std::move(from);
  }

  inline SetControlledTaxiIDsRequest& operator=(const SetControlledTaxiIDsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetControlledTaxiIDsRequest& operator=(SetControlledTaxiIDsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetControlledTaxiIDsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetControlledTaxiIDsRequest* internal_default_instance() {
    return reinterpret_cast<const SetControlledTaxiIDsRequest*>(
               &_SetControlledTaxiIDsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SetControlledTaxiIDsRequest& a, SetControlledTaxiIDsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetControlledTaxiIDsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetControlledTaxiIDsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetControlledTaxiIDsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetControlledTaxiIDsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetControlledTaxiIDsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetControlledTaxiIDsRequest& from) {
    SetControlledTaxiIDsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetControlledTaxiIDsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.SetControlledTaxiIDsRequest";
  }
  protected:
  explicit SetControlledTaxiIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaxiIdsFieldNumber = 1,
  };
  // repeated int32 taxi_ids = 1 [json_name = "taxiIds"];
  int taxi_ids_size() const;
  private:
  int _internal_taxi_ids_size() const;
  public:
  void clear_taxi_ids();
  private:
  int32_t _internal_taxi_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_taxi_ids() const;
  void _internal_add_taxi_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_taxi_ids();
  public:
  int32_t taxi_ids(int index) const;
  void set_taxi_ids(int index, int32_t value);
  void add_taxi_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      taxi_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_taxi_ids();

  // @@protoc_insertion_point(class_scope:city.person.v2.SetControlledTaxiIDsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > taxi_ids_;
    mutable std::atomic<int> _taxi_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetControlledTaxiIDsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.person.v2.SetControlledTaxiIDsResponse) */ {
 public:
  inline SetControlledTaxiIDsResponse() : SetControlledTaxiIDsResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetControlledTaxiIDsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetControlledTaxiIDsResponse(const SetControlledTaxiIDsResponse& from);
  SetControlledTaxiIDsResponse(SetControlledTaxiIDsResponse&& from) noexcept
    : SetControlledTaxiIDsResponse() {
    *this = ::std::move(from);
  }

  inline SetControlledTaxiIDsResponse& operator=(const SetControlledTaxiIDsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetControlledTaxiIDsResponse& operator=(SetControlledTaxiIDsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetControlledTaxiIDsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetControlledTaxiIDsResponse* internal_default_instance() {
    return reinterpret_cast<const SetControlledTaxiIDsResponse*>(
               &_SetControlledTaxiIDsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SetControlledTaxiIDsResponse& a, SetControlledTaxiIDsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetControlledTaxiIDsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetControlledTaxiIDsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetControlledTaxiIDsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetControlledTaxiIDsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetControlledTaxiIDsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetControlledTaxiIDsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.SetControlledTaxiIDsResponse";
  }
  protected:
  explicit SetControlledTaxiIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.person.v2.SetControlledTaxiIDsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAllOrdersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.person.v2.GetAllOrdersRequest) */ {
 public:
  inline GetAllOrdersRequest() : GetAllOrdersRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetAllOrdersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllOrdersRequest(const GetAllOrdersRequest& from);
  GetAllOrdersRequest(GetAllOrdersRequest&& from) noexcept
    : GetAllOrdersRequest() {
    *this = ::std::move(from);
  }

  inline GetAllOrdersRequest& operator=(const GetAllOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllOrdersRequest& operator=(GetAllOrdersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllOrdersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllOrdersRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllOrdersRequest*>(
               &_GetAllOrdersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetAllOrdersRequest& a, GetAllOrdersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllOrdersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllOrdersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllOrdersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllOrdersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetAllOrdersRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetAllOrdersRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.GetAllOrdersRequest";
  }
  protected:
  explicit GetAllOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.person.v2.GetAllOrdersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetAllOrdersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.GetAllOrdersResponse) */ {
 public:
  inline GetAllOrdersResponse() : GetAllOrdersResponse(nullptr) {}
  ~GetAllOrdersResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAllOrdersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllOrdersResponse(const GetAllOrdersResponse& from);
  GetAllOrdersResponse(GetAllOrdersResponse&& from) noexcept
    : GetAllOrdersResponse() {
    *this = ::std::move(from);
  }

  inline GetAllOrdersResponse& operator=(const GetAllOrdersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllOrdersResponse& operator=(GetAllOrdersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllOrdersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllOrdersResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllOrdersResponse*>(
               &_GetAllOrdersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetAllOrdersResponse& a, GetAllOrdersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllOrdersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllOrdersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllOrdersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllOrdersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllOrdersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllOrdersResponse& from) {
    GetAllOrdersResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllOrdersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.GetAllOrdersResponse";
  }
  protected:
  explicit GetAllOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderInfosFieldNumber = 1,
  };
  // repeated .city.person.v2.RequestOrderInfo order_infos = 1 [json_name = "orderInfos"];
  int order_infos_size() const;
  private:
  int _internal_order_infos_size() const;
  public:
  void clear_order_infos();
  ::city::person::v2::RequestOrderInfo* mutable_order_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::RequestOrderInfo >*
      mutable_order_infos();
  private:
  const ::city::person::v2::RequestOrderInfo& _internal_order_infos(int index) const;
  ::city::person::v2::RequestOrderInfo* _internal_add_order_infos();
  public:
  const ::city::person::v2::RequestOrderInfo& order_infos(int index) const;
  ::city::person::v2::RequestOrderInfo* add_order_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::RequestOrderInfo >&
      order_infos() const;

  // @@protoc_insertion_point(class_scope:city.person.v2.GetAllOrdersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::RequestOrderInfo > order_infos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetControlledTaxiToOrdersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.SetControlledTaxiToOrdersRequest) */ {
 public:
  inline SetControlledTaxiToOrdersRequest() : SetControlledTaxiToOrdersRequest(nullptr) {}
  ~SetControlledTaxiToOrdersRequest() override;
  explicit PROTOBUF_CONSTEXPR SetControlledTaxiToOrdersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetControlledTaxiToOrdersRequest(const SetControlledTaxiToOrdersRequest& from);
  SetControlledTaxiToOrdersRequest(SetControlledTaxiToOrdersRequest&& from) noexcept
    : SetControlledTaxiToOrdersRequest() {
    *this = ::std::move(from);
  }

  inline SetControlledTaxiToOrdersRequest& operator=(const SetControlledTaxiToOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetControlledTaxiToOrdersRequest& operator=(SetControlledTaxiToOrdersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetControlledTaxiToOrdersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetControlledTaxiToOrdersRequest* internal_default_instance() {
    return reinterpret_cast<const SetControlledTaxiToOrdersRequest*>(
               &_SetControlledTaxiToOrdersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SetControlledTaxiToOrdersRequest& a, SetControlledTaxiToOrdersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetControlledTaxiToOrdersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetControlledTaxiToOrdersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetControlledTaxiToOrdersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetControlledTaxiToOrdersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetControlledTaxiToOrdersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetControlledTaxiToOrdersRequest& from) {
    SetControlledTaxiToOrdersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetControlledTaxiToOrdersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.SetControlledTaxiToOrdersRequest";
  }
  protected:
  explicit SetControlledTaxiToOrdersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderPlansFieldNumber = 1,
  };
  // repeated .city.person.v2.OrderAllocationPlan order_plans = 1 [json_name = "orderPlans"];
  int order_plans_size() const;
  private:
  int _internal_order_plans_size() const;
  public:
  void clear_order_plans();
  ::city::person::v2::OrderAllocationPlan* mutable_order_plans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::OrderAllocationPlan >*
      mutable_order_plans();
  private:
  const ::city::person::v2::OrderAllocationPlan& _internal_order_plans(int index) const;
  ::city::person::v2::OrderAllocationPlan* _internal_add_order_plans();
  public:
  const ::city::person::v2::OrderAllocationPlan& order_plans(int index) const;
  ::city::person::v2::OrderAllocationPlan* add_order_plans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::OrderAllocationPlan >&
      order_plans() const;

  // @@protoc_insertion_point(class_scope:city.person.v2.SetControlledTaxiToOrdersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::OrderAllocationPlan > order_plans_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetControlledTaxiToOrdersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.person.v2.SetControlledTaxiToOrdersResponse) */ {
 public:
  inline SetControlledTaxiToOrdersResponse() : SetControlledTaxiToOrdersResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetControlledTaxiToOrdersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetControlledTaxiToOrdersResponse(const SetControlledTaxiToOrdersResponse& from);
  SetControlledTaxiToOrdersResponse(SetControlledTaxiToOrdersResponse&& from) noexcept
    : SetControlledTaxiToOrdersResponse() {
    *this = ::std::move(from);
  }

  inline SetControlledTaxiToOrdersResponse& operator=(const SetControlledTaxiToOrdersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetControlledTaxiToOrdersResponse& operator=(SetControlledTaxiToOrdersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetControlledTaxiToOrdersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetControlledTaxiToOrdersResponse* internal_default_instance() {
    return reinterpret_cast<const SetControlledTaxiToOrdersResponse*>(
               &_SetControlledTaxiToOrdersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SetControlledTaxiToOrdersResponse& a, SetControlledTaxiToOrdersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetControlledTaxiToOrdersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetControlledTaxiToOrdersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetControlledTaxiToOrdersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetControlledTaxiToOrdersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetControlledTaxiToOrdersResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetControlledTaxiToOrdersResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.SetControlledTaxiToOrdersResponse";
  }
  protected:
  explicit SetControlledTaxiToOrdersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.person.v2.SetControlledTaxiToOrdersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fperson_2fv2_2fperson_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetPersonRequest

// int32 person_id = 1 [json_name = "personId"];
inline void GetPersonRequest::clear_person_id() {
  _impl_.person_id_ = 0;
}
inline int32_t GetPersonRequest::_internal_person_id() const {
  return _impl_.person_id_;
}
inline int32_t GetPersonRequest::person_id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.GetPersonRequest.person_id)
  return _internal_person_id();
}
inline void GetPersonRequest::_internal_set_person_id(int32_t value) {
  
  _impl_.person_id_ = value;
}
inline void GetPersonRequest::set_person_id(int32_t value) {
  _internal_set_person_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.GetPersonRequest.person_id)
}

// -------------------------------------------------------------------

// GetPersonResponse

// .city.person.v2.PersonRuntime person = 1 [json_name = "person"];
inline bool GetPersonResponse::_internal_has_person() const {
  return this != internal_default_instance() && _impl_.person_ != nullptr;
}
inline bool GetPersonResponse::has_person() const {
  return _internal_has_person();
}
inline const ::city::person::v2::PersonRuntime& GetPersonResponse::_internal_person() const {
  const ::city::person::v2::PersonRuntime* p = _impl_.person_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::PersonRuntime&>(
      ::city::person::v2::_PersonRuntime_default_instance_);
}
inline const ::city::person::v2::PersonRuntime& GetPersonResponse::person() const {
  // @@protoc_insertion_point(field_get:city.person.v2.GetPersonResponse.person)
  return _internal_person();
}
inline void GetPersonResponse::unsafe_arena_set_allocated_person(
    ::city::person::v2::PersonRuntime* person) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.person_);
  }
  _impl_.person_ = person;
  if (person) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.GetPersonResponse.person)
}
inline ::city::person::v2::PersonRuntime* GetPersonResponse::release_person() {
  
  ::city::person::v2::PersonRuntime* temp = _impl_.person_;
  _impl_.person_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::PersonRuntime* GetPersonResponse::unsafe_arena_release_person() {
  // @@protoc_insertion_point(field_release:city.person.v2.GetPersonResponse.person)
  
  ::city::person::v2::PersonRuntime* temp = _impl_.person_;
  _impl_.person_ = nullptr;
  return temp;
}
inline ::city::person::v2::PersonRuntime* GetPersonResponse::_internal_mutable_person() {
  
  if (_impl_.person_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::PersonRuntime>(GetArenaForAllocation());
    _impl_.person_ = p;
  }
  return _impl_.person_;
}
inline ::city::person::v2::PersonRuntime* GetPersonResponse::mutable_person() {
  ::city::person::v2::PersonRuntime* _msg = _internal_mutable_person();
  // @@protoc_insertion_point(field_mutable:city.person.v2.GetPersonResponse.person)
  return _msg;
}
inline void GetPersonResponse::set_allocated_person(::city::person::v2::PersonRuntime* person) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.person_);
  }
  if (person) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(person));
    if (message_arena != submessage_arena) {
      person = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, person, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.person_ = person;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.GetPersonResponse.person)
}

// -------------------------------------------------------------------

// AddPersonRequest

// .city.person.v2.Person person = 1 [json_name = "person"];
inline bool AddPersonRequest::_internal_has_person() const {
  return this != internal_default_instance() && _impl_.person_ != nullptr;
}
inline bool AddPersonRequest::has_person() const {
  return _internal_has_person();
}
inline const ::city::person::v2::Person& AddPersonRequest::_internal_person() const {
  const ::city::person::v2::Person* p = _impl_.person_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v2::Person&>(
      ::city::person::v2::_Person_default_instance_);
}
inline const ::city::person::v2::Person& AddPersonRequest::person() const {
  // @@protoc_insertion_point(field_get:city.person.v2.AddPersonRequest.person)
  return _internal_person();
}
inline void AddPersonRequest::unsafe_arena_set_allocated_person(
    ::city::person::v2::Person* person) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.person_);
  }
  _impl_.person_ = person;
  if (person) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.AddPersonRequest.person)
}
inline ::city::person::v2::Person* AddPersonRequest::release_person() {
  
  ::city::person::v2::Person* temp = _impl_.person_;
  _impl_.person_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v2::Person* AddPersonRequest::unsafe_arena_release_person() {
  // @@protoc_insertion_point(field_release:city.person.v2.AddPersonRequest.person)
  
  ::city::person::v2::Person* temp = _impl_.person_;
  _impl_.person_ = nullptr;
  return temp;
}
inline ::city::person::v2::Person* AddPersonRequest::_internal_mutable_person() {
  
  if (_impl_.person_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v2::Person>(GetArenaForAllocation());
    _impl_.person_ = p;
  }
  return _impl_.person_;
}
inline ::city::person::v2::Person* AddPersonRequest::mutable_person() {
  ::city::person::v2::Person* _msg = _internal_mutable_person();
  // @@protoc_insertion_point(field_mutable:city.person.v2.AddPersonRequest.person)
  return _msg;
}
inline void AddPersonRequest::set_allocated_person(::city::person::v2::Person* person) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.person_);
  }
  if (person) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(person));
    if (message_arena != submessage_arena) {
      person = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, person, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.person_ = person;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.AddPersonRequest.person)
}

// -------------------------------------------------------------------

// AddPersonResponse

// int32 person_id = 1 [json_name = "personId"];
inline void AddPersonResponse::clear_person_id() {
  _impl_.person_id_ = 0;
}
inline int32_t AddPersonResponse::_internal_person_id() const {
  return _impl_.person_id_;
}
inline int32_t AddPersonResponse::person_id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.AddPersonResponse.person_id)
  return _internal_person_id();
}
inline void AddPersonResponse::_internal_set_person_id(int32_t value) {
  
  _impl_.person_id_ = value;
}
inline void AddPersonResponse::set_person_id(int32_t value) {
  _internal_set_person_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.AddPersonResponse.person_id)
}

// -------------------------------------------------------------------

// SetScheduleRequest

// int32 person_id = 1 [json_name = "personId"];
inline void SetScheduleRequest::clear_person_id() {
  _impl_.person_id_ = 0;
}
inline int32_t SetScheduleRequest::_internal_person_id() const {
  return _impl_.person_id_;
}
inline int32_t SetScheduleRequest::person_id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.SetScheduleRequest.person_id)
  return _internal_person_id();
}
inline void SetScheduleRequest::_internal_set_person_id(int32_t value) {
  
  _impl_.person_id_ = value;
}
inline void SetScheduleRequest::set_person_id(int32_t value) {
  _internal_set_person_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.SetScheduleRequest.person_id)
}

// repeated .city.trip.v2.Schedule schedules = 2 [json_name = "schedules"];
inline int SetScheduleRequest::_internal_schedules_size() const {
  return _impl_.schedules_.size();
}
inline int SetScheduleRequest::schedules_size() const {
  return _internal_schedules_size();
}
inline ::city::trip::v2::Schedule* SetScheduleRequest::mutable_schedules(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v2.SetScheduleRequest.schedules)
  return _impl_.schedules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::trip::v2::Schedule >*
SetScheduleRequest::mutable_schedules() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.SetScheduleRequest.schedules)
  return &_impl_.schedules_;
}
inline const ::city::trip::v2::Schedule& SetScheduleRequest::_internal_schedules(int index) const {
  return _impl_.schedules_.Get(index);
}
inline const ::city::trip::v2::Schedule& SetScheduleRequest::schedules(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.SetScheduleRequest.schedules)
  return _internal_schedules(index);
}
inline ::city::trip::v2::Schedule* SetScheduleRequest::_internal_add_schedules() {
  return _impl_.schedules_.Add();
}
inline ::city::trip::v2::Schedule* SetScheduleRequest::add_schedules() {
  ::city::trip::v2::Schedule* _add = _internal_add_schedules();
  // @@protoc_insertion_point(field_add:city.person.v2.SetScheduleRequest.schedules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::trip::v2::Schedule >&
SetScheduleRequest::schedules() const {
  // @@protoc_insertion_point(field_list:city.person.v2.SetScheduleRequest.schedules)
  return _impl_.schedules_;
}

// -------------------------------------------------------------------

// SetScheduleResponse

// -------------------------------------------------------------------

// GetPersonsRequest

// repeated int32 person_ids = 1 [json_name = "personIds"];
inline int GetPersonsRequest::_internal_person_ids_size() const {
  return _impl_.person_ids_.size();
}
inline int GetPersonsRequest::person_ids_size() const {
  return _internal_person_ids_size();
}
inline void GetPersonsRequest::clear_person_ids() {
  _impl_.person_ids_.Clear();
}
inline int32_t GetPersonsRequest::_internal_person_ids(int index) const {
  return _impl_.person_ids_.Get(index);
}
inline int32_t GetPersonsRequest::person_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.GetPersonsRequest.person_ids)
  return _internal_person_ids(index);
}
inline void GetPersonsRequest::set_person_ids(int index, int32_t value) {
  _impl_.person_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.person.v2.GetPersonsRequest.person_ids)
}
inline void GetPersonsRequest::_internal_add_person_ids(int32_t value) {
  _impl_.person_ids_.Add(value);
}
inline void GetPersonsRequest::add_person_ids(int32_t value) {
  _internal_add_person_ids(value);
  // @@protoc_insertion_point(field_add:city.person.v2.GetPersonsRequest.person_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetPersonsRequest::_internal_person_ids() const {
  return _impl_.person_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetPersonsRequest::person_ids() const {
  // @@protoc_insertion_point(field_list:city.person.v2.GetPersonsRequest.person_ids)
  return _internal_person_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetPersonsRequest::_internal_mutable_person_ids() {
  return &_impl_.person_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetPersonsRequest::mutable_person_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.GetPersonsRequest.person_ids)
  return _internal_mutable_person_ids();
}

// repeated .city.person.v2.Status exclude_statuses = 2 [json_name = "excludeStatuses"];
inline int GetPersonsRequest::_internal_exclude_statuses_size() const {
  return _impl_.exclude_statuses_.size();
}
inline int GetPersonsRequest::exclude_statuses_size() const {
  return _internal_exclude_statuses_size();
}
inline void GetPersonsRequest::clear_exclude_statuses() {
  _impl_.exclude_statuses_.Clear();
}
inline ::city::person::v2::Status GetPersonsRequest::_internal_exclude_statuses(int index) const {
  return static_cast< ::city::person::v2::Status >(_impl_.exclude_statuses_.Get(index));
}
inline ::city::person::v2::Status GetPersonsRequest::exclude_statuses(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.GetPersonsRequest.exclude_statuses)
  return _internal_exclude_statuses(index);
}
inline void GetPersonsRequest::set_exclude_statuses(int index, ::city::person::v2::Status value) {
  _impl_.exclude_statuses_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.person.v2.GetPersonsRequest.exclude_statuses)
}
inline void GetPersonsRequest::_internal_add_exclude_statuses(::city::person::v2::Status value) {
  _impl_.exclude_statuses_.Add(value);
}
inline void GetPersonsRequest::add_exclude_statuses(::city::person::v2::Status value) {
  _internal_add_exclude_statuses(value);
  // @@protoc_insertion_point(field_add:city.person.v2.GetPersonsRequest.exclude_statuses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GetPersonsRequest::exclude_statuses() const {
  // @@protoc_insertion_point(field_list:city.person.v2.GetPersonsRequest.exclude_statuses)
  return _impl_.exclude_statuses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetPersonsRequest::_internal_mutable_exclude_statuses() {
  return &_impl_.exclude_statuses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetPersonsRequest::mutable_exclude_statuses() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.GetPersonsRequest.exclude_statuses)
  return _internal_mutable_exclude_statuses();
}

// bool return_base = 3 [json_name = "returnBase"];
inline void GetPersonsRequest::clear_return_base() {
  _impl_.return_base_ = false;
}
inline bool GetPersonsRequest::_internal_return_base() const {
  return _impl_.return_base_;
}
inline bool GetPersonsRequest::return_base() const {
  // @@protoc_insertion_point(field_get:city.person.v2.GetPersonsRequest.return_base)
  return _internal_return_base();
}
inline void GetPersonsRequest::_internal_set_return_base(bool value) {
  
  _impl_.return_base_ = value;
}
inline void GetPersonsRequest::set_return_base(bool value) {
  _internal_set_return_base(value);
  // @@protoc_insertion_point(field_set:city.person.v2.GetPersonsRequest.return_base)
}

// -------------------------------------------------------------------

// GetPersonsResponse

// repeated .city.person.v2.PersonRuntime persons = 1 [json_name = "persons"];
inline int GetPersonsResponse::_internal_persons_size() const {
  return _impl_.persons_.size();
}
inline int GetPersonsResponse::persons_size() const {
  return _internal_persons_size();
}
inline ::city::person::v2::PersonRuntime* GetPersonsResponse::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v2.GetPersonsResponse.persons)
  return _impl_.persons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::PersonRuntime >*
GetPersonsResponse::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.GetPersonsResponse.persons)
  return &_impl_.persons_;
}
inline const ::city::person::v2::PersonRuntime& GetPersonsResponse::_internal_persons(int index) const {
  return _impl_.persons_.Get(index);
}
inline const ::city::person::v2::PersonRuntime& GetPersonsResponse::persons(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.GetPersonsResponse.persons)
  return _internal_persons(index);
}
inline ::city::person::v2::PersonRuntime* GetPersonsResponse::_internal_add_persons() {
  return _impl_.persons_.Add();
}
inline ::city::person::v2::PersonRuntime* GetPersonsResponse::add_persons() {
  ::city::person::v2::PersonRuntime* _add = _internal_add_persons();
  // @@protoc_insertion_point(field_add:city.person.v2.GetPersonsResponse.persons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::PersonRuntime >&
GetPersonsResponse::persons() const {
  // @@protoc_insertion_point(field_list:city.person.v2.GetPersonsResponse.persons)
  return _impl_.persons_;
}

// -------------------------------------------------------------------

// GetPersonByLongLatBBoxRequest

// .city.geo.v2.LongLatBBox bbox = 1 [json_name = "bbox"];
inline bool GetPersonByLongLatBBoxRequest::_internal_has_bbox() const {
  return this != internal_default_instance() && _impl_.bbox_ != nullptr;
}
inline bool GetPersonByLongLatBBoxRequest::has_bbox() const {
  return _internal_has_bbox();
}
inline const ::city::geo::v2::LongLatBBox& GetPersonByLongLatBBoxRequest::_internal_bbox() const {
  const ::city::geo::v2::LongLatBBox* p = _impl_.bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::LongLatBBox&>(
      ::city::geo::v2::_LongLatBBox_default_instance_);
}
inline const ::city::geo::v2::LongLatBBox& GetPersonByLongLatBBoxRequest::bbox() const {
  // @@protoc_insertion_point(field_get:city.person.v2.GetPersonByLongLatBBoxRequest.bbox)
  return _internal_bbox();
}
inline void GetPersonByLongLatBBoxRequest::unsafe_arena_set_allocated_bbox(
    ::city::geo::v2::LongLatBBox* bbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bbox_);
  }
  _impl_.bbox_ = bbox;
  if (bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.GetPersonByLongLatBBoxRequest.bbox)
}
inline ::city::geo::v2::LongLatBBox* GetPersonByLongLatBBoxRequest::release_bbox() {
  
  ::city::geo::v2::LongLatBBox* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::geo::v2::LongLatBBox* GetPersonByLongLatBBoxRequest::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_release:city.person.v2.GetPersonByLongLatBBoxRequest.bbox)
  
  ::city::geo::v2::LongLatBBox* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
  return temp;
}
inline ::city::geo::v2::LongLatBBox* GetPersonByLongLatBBoxRequest::_internal_mutable_bbox() {
  
  if (_impl_.bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::LongLatBBox>(GetArenaForAllocation());
    _impl_.bbox_ = p;
  }
  return _impl_.bbox_;
}
inline ::city::geo::v2::LongLatBBox* GetPersonByLongLatBBoxRequest::mutable_bbox() {
  ::city::geo::v2::LongLatBBox* _msg = _internal_mutable_bbox();
  // @@protoc_insertion_point(field_mutable:city.person.v2.GetPersonByLongLatBBoxRequest.bbox)
  return _msg;
}
inline void GetPersonByLongLatBBoxRequest::set_allocated_bbox(::city::geo::v2::LongLatBBox* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bbox_);
  }
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox));
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.GetPersonByLongLatBBoxRequest.bbox)
}

// repeated .city.person.v2.Status exclude_statuses = 2 [json_name = "excludeStatuses"];
inline int GetPersonByLongLatBBoxRequest::_internal_exclude_statuses_size() const {
  return _impl_.exclude_statuses_.size();
}
inline int GetPersonByLongLatBBoxRequest::exclude_statuses_size() const {
  return _internal_exclude_statuses_size();
}
inline void GetPersonByLongLatBBoxRequest::clear_exclude_statuses() {
  _impl_.exclude_statuses_.Clear();
}
inline ::city::person::v2::Status GetPersonByLongLatBBoxRequest::_internal_exclude_statuses(int index) const {
  return static_cast< ::city::person::v2::Status >(_impl_.exclude_statuses_.Get(index));
}
inline ::city::person::v2::Status GetPersonByLongLatBBoxRequest::exclude_statuses(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.GetPersonByLongLatBBoxRequest.exclude_statuses)
  return _internal_exclude_statuses(index);
}
inline void GetPersonByLongLatBBoxRequest::set_exclude_statuses(int index, ::city::person::v2::Status value) {
  _impl_.exclude_statuses_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.person.v2.GetPersonByLongLatBBoxRequest.exclude_statuses)
}
inline void GetPersonByLongLatBBoxRequest::_internal_add_exclude_statuses(::city::person::v2::Status value) {
  _impl_.exclude_statuses_.Add(value);
}
inline void GetPersonByLongLatBBoxRequest::add_exclude_statuses(::city::person::v2::Status value) {
  _internal_add_exclude_statuses(value);
  // @@protoc_insertion_point(field_add:city.person.v2.GetPersonByLongLatBBoxRequest.exclude_statuses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GetPersonByLongLatBBoxRequest::exclude_statuses() const {
  // @@protoc_insertion_point(field_list:city.person.v2.GetPersonByLongLatBBoxRequest.exclude_statuses)
  return _impl_.exclude_statuses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetPersonByLongLatBBoxRequest::_internal_mutable_exclude_statuses() {
  return &_impl_.exclude_statuses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetPersonByLongLatBBoxRequest::mutable_exclude_statuses() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.GetPersonByLongLatBBoxRequest.exclude_statuses)
  return _internal_mutable_exclude_statuses();
}

// bool return_base = 3 [json_name = "returnBase"];
inline void GetPersonByLongLatBBoxRequest::clear_return_base() {
  _impl_.return_base_ = false;
}
inline bool GetPersonByLongLatBBoxRequest::_internal_return_base() const {
  return _impl_.return_base_;
}
inline bool GetPersonByLongLatBBoxRequest::return_base() const {
  // @@protoc_insertion_point(field_get:city.person.v2.GetPersonByLongLatBBoxRequest.return_base)
  return _internal_return_base();
}
inline void GetPersonByLongLatBBoxRequest::_internal_set_return_base(bool value) {
  
  _impl_.return_base_ = value;
}
inline void GetPersonByLongLatBBoxRequest::set_return_base(bool value) {
  _internal_set_return_base(value);
  // @@protoc_insertion_point(field_set:city.person.v2.GetPersonByLongLatBBoxRequest.return_base)
}

// -------------------------------------------------------------------

// GetPersonByLongLatBBoxResponse

// repeated .city.person.v2.PersonRuntime persons = 1 [json_name = "persons"];
inline int GetPersonByLongLatBBoxResponse::_internal_persons_size() const {
  return _impl_.persons_.size();
}
inline int GetPersonByLongLatBBoxResponse::persons_size() const {
  return _internal_persons_size();
}
inline ::city::person::v2::PersonRuntime* GetPersonByLongLatBBoxResponse::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v2.GetPersonByLongLatBBoxResponse.persons)
  return _impl_.persons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::PersonRuntime >*
GetPersonByLongLatBBoxResponse::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.GetPersonByLongLatBBoxResponse.persons)
  return &_impl_.persons_;
}
inline const ::city::person::v2::PersonRuntime& GetPersonByLongLatBBoxResponse::_internal_persons(int index) const {
  return _impl_.persons_.Get(index);
}
inline const ::city::person::v2::PersonRuntime& GetPersonByLongLatBBoxResponse::persons(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.GetPersonByLongLatBBoxResponse.persons)
  return _internal_persons(index);
}
inline ::city::person::v2::PersonRuntime* GetPersonByLongLatBBoxResponse::_internal_add_persons() {
  return _impl_.persons_.Add();
}
inline ::city::person::v2::PersonRuntime* GetPersonByLongLatBBoxResponse::add_persons() {
  ::city::person::v2::PersonRuntime* _add = _internal_add_persons();
  // @@protoc_insertion_point(field_add:city.person.v2.GetPersonByLongLatBBoxResponse.persons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::PersonRuntime >&
GetPersonByLongLatBBoxResponse::persons() const {
  // @@protoc_insertion_point(field_list:city.person.v2.GetPersonByLongLatBBoxResponse.persons)
  return _impl_.persons_;
}

// -------------------------------------------------------------------

// GetAllVehiclesRequest

// -------------------------------------------------------------------

// GetAllVehiclesResponse

// repeated .city.person.v2.VehicleRuntime vehicles = 1 [json_name = "vehicles"];
inline int GetAllVehiclesResponse::_internal_vehicles_size() const {
  return _impl_.vehicles_.size();
}
inline int GetAllVehiclesResponse::vehicles_size() const {
  return _internal_vehicles_size();
}
inline ::city::person::v2::VehicleRuntime* GetAllVehiclesResponse::mutable_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v2.GetAllVehiclesResponse.vehicles)
  return _impl_.vehicles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleRuntime >*
GetAllVehiclesResponse::mutable_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.GetAllVehiclesResponse.vehicles)
  return &_impl_.vehicles_;
}
inline const ::city::person::v2::VehicleRuntime& GetAllVehiclesResponse::_internal_vehicles(int index) const {
  return _impl_.vehicles_.Get(index);
}
inline const ::city::person::v2::VehicleRuntime& GetAllVehiclesResponse::vehicles(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.GetAllVehiclesResponse.vehicles)
  return _internal_vehicles(index);
}
inline ::city::person::v2::VehicleRuntime* GetAllVehiclesResponse::_internal_add_vehicles() {
  return _impl_.vehicles_.Add();
}
inline ::city::person::v2::VehicleRuntime* GetAllVehiclesResponse::add_vehicles() {
  ::city::person::v2::VehicleRuntime* _add = _internal_add_vehicles();
  // @@protoc_insertion_point(field_add:city.person.v2.GetAllVehiclesResponse.vehicles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleRuntime >&
GetAllVehiclesResponse::vehicles() const {
  // @@protoc_insertion_point(field_list:city.person.v2.GetAllVehiclesResponse.vehicles)
  return _impl_.vehicles_;
}

// -------------------------------------------------------------------

// ResetPersonPositionRequest

// int32 person_id = 1 [json_name = "personId"];
inline void ResetPersonPositionRequest::clear_person_id() {
  _impl_.person_id_ = 0;
}
inline int32_t ResetPersonPositionRequest::_internal_person_id() const {
  return _impl_.person_id_;
}
inline int32_t ResetPersonPositionRequest::person_id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.ResetPersonPositionRequest.person_id)
  return _internal_person_id();
}
inline void ResetPersonPositionRequest::_internal_set_person_id(int32_t value) {
  
  _impl_.person_id_ = value;
}
inline void ResetPersonPositionRequest::set_person_id(int32_t value) {
  _internal_set_person_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.ResetPersonPositionRequest.person_id)
}

// .city.geo.v2.Position position = 2 [json_name = "position"];
inline bool ResetPersonPositionRequest::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool ResetPersonPositionRequest::has_position() const {
  return _internal_has_position();
}
inline const ::city::geo::v2::Position& ResetPersonPositionRequest::_internal_position() const {
  const ::city::geo::v2::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::Position&>(
      ::city::geo::v2::_Position_default_instance_);
}
inline const ::city::geo::v2::Position& ResetPersonPositionRequest::position() const {
  // @@protoc_insertion_point(field_get:city.person.v2.ResetPersonPositionRequest.position)
  return _internal_position();
}
inline void ResetPersonPositionRequest::unsafe_arena_set_allocated_position(
    ::city::geo::v2::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.ResetPersonPositionRequest.position)
}
inline ::city::geo::v2::Position* ResetPersonPositionRequest::release_position() {
  
  ::city::geo::v2::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::geo::v2::Position* ResetPersonPositionRequest::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:city.person.v2.ResetPersonPositionRequest.position)
  
  ::city::geo::v2::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::city::geo::v2::Position* ResetPersonPositionRequest::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::city::geo::v2::Position* ResetPersonPositionRequest::mutable_position() {
  ::city::geo::v2::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:city.person.v2.ResetPersonPositionRequest.position)
  return _msg;
}
inline void ResetPersonPositionRequest::set_allocated_position(::city::geo::v2::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.ResetPersonPositionRequest.position)
}

// -------------------------------------------------------------------

// ResetPersonPositionResponse

// -------------------------------------------------------------------

// SetControlledVehicleIDsRequest

// repeated int32 vehicle_ids = 1 [json_name = "vehicleIds"];
inline int SetControlledVehicleIDsRequest::_internal_vehicle_ids_size() const {
  return _impl_.vehicle_ids_.size();
}
inline int SetControlledVehicleIDsRequest::vehicle_ids_size() const {
  return _internal_vehicle_ids_size();
}
inline void SetControlledVehicleIDsRequest::clear_vehicle_ids() {
  _impl_.vehicle_ids_.Clear();
}
inline int32_t SetControlledVehicleIDsRequest::_internal_vehicle_ids(int index) const {
  return _impl_.vehicle_ids_.Get(index);
}
inline int32_t SetControlledVehicleIDsRequest::vehicle_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.SetControlledVehicleIDsRequest.vehicle_ids)
  return _internal_vehicle_ids(index);
}
inline void SetControlledVehicleIDsRequest::set_vehicle_ids(int index, int32_t value) {
  _impl_.vehicle_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.person.v2.SetControlledVehicleIDsRequest.vehicle_ids)
}
inline void SetControlledVehicleIDsRequest::_internal_add_vehicle_ids(int32_t value) {
  _impl_.vehicle_ids_.Add(value);
}
inline void SetControlledVehicleIDsRequest::add_vehicle_ids(int32_t value) {
  _internal_add_vehicle_ids(value);
  // @@protoc_insertion_point(field_add:city.person.v2.SetControlledVehicleIDsRequest.vehicle_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SetControlledVehicleIDsRequest::_internal_vehicle_ids() const {
  return _impl_.vehicle_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SetControlledVehicleIDsRequest::vehicle_ids() const {
  // @@protoc_insertion_point(field_list:city.person.v2.SetControlledVehicleIDsRequest.vehicle_ids)
  return _internal_vehicle_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SetControlledVehicleIDsRequest::_internal_mutable_vehicle_ids() {
  return &_impl_.vehicle_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SetControlledVehicleIDsRequest::mutable_vehicle_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.SetControlledVehicleIDsRequest.vehicle_ids)
  return _internal_mutable_vehicle_ids();
}

// repeated int32 route_vehicle_ids = 2 [json_name = "routeVehicleIds"];
inline int SetControlledVehicleIDsRequest::_internal_route_vehicle_ids_size() const {
  return _impl_.route_vehicle_ids_.size();
}
inline int SetControlledVehicleIDsRequest::route_vehicle_ids_size() const {
  return _internal_route_vehicle_ids_size();
}
inline void SetControlledVehicleIDsRequest::clear_route_vehicle_ids() {
  _impl_.route_vehicle_ids_.Clear();
}
inline int32_t SetControlledVehicleIDsRequest::_internal_route_vehicle_ids(int index) const {
  return _impl_.route_vehicle_ids_.Get(index);
}
inline int32_t SetControlledVehicleIDsRequest::route_vehicle_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.SetControlledVehicleIDsRequest.route_vehicle_ids)
  return _internal_route_vehicle_ids(index);
}
inline void SetControlledVehicleIDsRequest::set_route_vehicle_ids(int index, int32_t value) {
  _impl_.route_vehicle_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.person.v2.SetControlledVehicleIDsRequest.route_vehicle_ids)
}
inline void SetControlledVehicleIDsRequest::_internal_add_route_vehicle_ids(int32_t value) {
  _impl_.route_vehicle_ids_.Add(value);
}
inline void SetControlledVehicleIDsRequest::add_route_vehicle_ids(int32_t value) {
  _internal_add_route_vehicle_ids(value);
  // @@protoc_insertion_point(field_add:city.person.v2.SetControlledVehicleIDsRequest.route_vehicle_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SetControlledVehicleIDsRequest::_internal_route_vehicle_ids() const {
  return _impl_.route_vehicle_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SetControlledVehicleIDsRequest::route_vehicle_ids() const {
  // @@protoc_insertion_point(field_list:city.person.v2.SetControlledVehicleIDsRequest.route_vehicle_ids)
  return _internal_route_vehicle_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SetControlledVehicleIDsRequest::_internal_mutable_route_vehicle_ids() {
  return &_impl_.route_vehicle_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SetControlledVehicleIDsRequest::mutable_route_vehicle_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.SetControlledVehicleIDsRequest.route_vehicle_ids)
  return _internal_mutable_route_vehicle_ids();
}

// -------------------------------------------------------------------

// SetControlledVehicleIDsResponse

// -------------------------------------------------------------------

// FetchControlledVehicleEnvsRequest

// -------------------------------------------------------------------

// FetchControlledVehicleEnvsResponse

// repeated .city.person.v2.VehicleEnv vehicle_envs = 1 [json_name = "vehicleEnvs"];
inline int FetchControlledVehicleEnvsResponse::_internal_vehicle_envs_size() const {
  return _impl_.vehicle_envs_.size();
}
inline int FetchControlledVehicleEnvsResponse::vehicle_envs_size() const {
  return _internal_vehicle_envs_size();
}
inline ::city::person::v2::VehicleEnv* FetchControlledVehicleEnvsResponse::mutable_vehicle_envs(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v2.FetchControlledVehicleEnvsResponse.vehicle_envs)
  return _impl_.vehicle_envs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleEnv >*
FetchControlledVehicleEnvsResponse::mutable_vehicle_envs() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.FetchControlledVehicleEnvsResponse.vehicle_envs)
  return &_impl_.vehicle_envs_;
}
inline const ::city::person::v2::VehicleEnv& FetchControlledVehicleEnvsResponse::_internal_vehicle_envs(int index) const {
  return _impl_.vehicle_envs_.Get(index);
}
inline const ::city::person::v2::VehicleEnv& FetchControlledVehicleEnvsResponse::vehicle_envs(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.FetchControlledVehicleEnvsResponse.vehicle_envs)
  return _internal_vehicle_envs(index);
}
inline ::city::person::v2::VehicleEnv* FetchControlledVehicleEnvsResponse::_internal_add_vehicle_envs() {
  return _impl_.vehicle_envs_.Add();
}
inline ::city::person::v2::VehicleEnv* FetchControlledVehicleEnvsResponse::add_vehicle_envs() {
  ::city::person::v2::VehicleEnv* _add = _internal_add_vehicle_envs();
  // @@protoc_insertion_point(field_add:city.person.v2.FetchControlledVehicleEnvsResponse.vehicle_envs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleEnv >&
FetchControlledVehicleEnvsResponse::vehicle_envs() const {
  // @@protoc_insertion_point(field_list:city.person.v2.FetchControlledVehicleEnvsResponse.vehicle_envs)
  return _impl_.vehicle_envs_;
}

// repeated .city.person.v2.VehicleEnv route_vehicle_envs = 2 [json_name = "routeVehicleEnvs"];
inline int FetchControlledVehicleEnvsResponse::_internal_route_vehicle_envs_size() const {
  return _impl_.route_vehicle_envs_.size();
}
inline int FetchControlledVehicleEnvsResponse::route_vehicle_envs_size() const {
  return _internal_route_vehicle_envs_size();
}
inline ::city::person::v2::VehicleEnv* FetchControlledVehicleEnvsResponse::mutable_route_vehicle_envs(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v2.FetchControlledVehicleEnvsResponse.route_vehicle_envs)
  return _impl_.route_vehicle_envs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleEnv >*
FetchControlledVehicleEnvsResponse::mutable_route_vehicle_envs() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.FetchControlledVehicleEnvsResponse.route_vehicle_envs)
  return &_impl_.route_vehicle_envs_;
}
inline const ::city::person::v2::VehicleEnv& FetchControlledVehicleEnvsResponse::_internal_route_vehicle_envs(int index) const {
  return _impl_.route_vehicle_envs_.Get(index);
}
inline const ::city::person::v2::VehicleEnv& FetchControlledVehicleEnvsResponse::route_vehicle_envs(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.FetchControlledVehicleEnvsResponse.route_vehicle_envs)
  return _internal_route_vehicle_envs(index);
}
inline ::city::person::v2::VehicleEnv* FetchControlledVehicleEnvsResponse::_internal_add_route_vehicle_envs() {
  return _impl_.route_vehicle_envs_.Add();
}
inline ::city::person::v2::VehicleEnv* FetchControlledVehicleEnvsResponse::add_route_vehicle_envs() {
  ::city::person::v2::VehicleEnv* _add = _internal_add_route_vehicle_envs();
  // @@protoc_insertion_point(field_add:city.person.v2.FetchControlledVehicleEnvsResponse.route_vehicle_envs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleEnv >&
FetchControlledVehicleEnvsResponse::route_vehicle_envs() const {
  // @@protoc_insertion_point(field_list:city.person.v2.FetchControlledVehicleEnvsResponse.route_vehicle_envs)
  return _impl_.route_vehicle_envs_;
}

// -------------------------------------------------------------------

// SetControlledVehicleActionsRequest

// repeated .city.person.v2.VehicleAction vehicle_actions = 1 [json_name = "vehicleActions"];
inline int SetControlledVehicleActionsRequest::_internal_vehicle_actions_size() const {
  return _impl_.vehicle_actions_.size();
}
inline int SetControlledVehicleActionsRequest::vehicle_actions_size() const {
  return _internal_vehicle_actions_size();
}
inline ::city::person::v2::VehicleAction* SetControlledVehicleActionsRequest::mutable_vehicle_actions(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v2.SetControlledVehicleActionsRequest.vehicle_actions)
  return _impl_.vehicle_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleAction >*
SetControlledVehicleActionsRequest::mutable_vehicle_actions() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.SetControlledVehicleActionsRequest.vehicle_actions)
  return &_impl_.vehicle_actions_;
}
inline const ::city::person::v2::VehicleAction& SetControlledVehicleActionsRequest::_internal_vehicle_actions(int index) const {
  return _impl_.vehicle_actions_.Get(index);
}
inline const ::city::person::v2::VehicleAction& SetControlledVehicleActionsRequest::vehicle_actions(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.SetControlledVehicleActionsRequest.vehicle_actions)
  return _internal_vehicle_actions(index);
}
inline ::city::person::v2::VehicleAction* SetControlledVehicleActionsRequest::_internal_add_vehicle_actions() {
  return _impl_.vehicle_actions_.Add();
}
inline ::city::person::v2::VehicleAction* SetControlledVehicleActionsRequest::add_vehicle_actions() {
  ::city::person::v2::VehicleAction* _add = _internal_add_vehicle_actions();
  // @@protoc_insertion_point(field_add:city.person.v2.SetControlledVehicleActionsRequest.vehicle_actions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleAction >&
SetControlledVehicleActionsRequest::vehicle_actions() const {
  // @@protoc_insertion_point(field_list:city.person.v2.SetControlledVehicleActionsRequest.vehicle_actions)
  return _impl_.vehicle_actions_;
}

// repeated .city.person.v2.VehicleRouteAction vehicle_journeys = 2 [json_name = "vehicleJourneys"];
inline int SetControlledVehicleActionsRequest::_internal_vehicle_journeys_size() const {
  return _impl_.vehicle_journeys_.size();
}
inline int SetControlledVehicleActionsRequest::vehicle_journeys_size() const {
  return _internal_vehicle_journeys_size();
}
inline ::city::person::v2::VehicleRouteAction* SetControlledVehicleActionsRequest::mutable_vehicle_journeys(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v2.SetControlledVehicleActionsRequest.vehicle_journeys)
  return _impl_.vehicle_journeys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleRouteAction >*
SetControlledVehicleActionsRequest::mutable_vehicle_journeys() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.SetControlledVehicleActionsRequest.vehicle_journeys)
  return &_impl_.vehicle_journeys_;
}
inline const ::city::person::v2::VehicleRouteAction& SetControlledVehicleActionsRequest::_internal_vehicle_journeys(int index) const {
  return _impl_.vehicle_journeys_.Get(index);
}
inline const ::city::person::v2::VehicleRouteAction& SetControlledVehicleActionsRequest::vehicle_journeys(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.SetControlledVehicleActionsRequest.vehicle_journeys)
  return _internal_vehicle_journeys(index);
}
inline ::city::person::v2::VehicleRouteAction* SetControlledVehicleActionsRequest::_internal_add_vehicle_journeys() {
  return _impl_.vehicle_journeys_.Add();
}
inline ::city::person::v2::VehicleRouteAction* SetControlledVehicleActionsRequest::add_vehicle_journeys() {
  ::city::person::v2::VehicleRouteAction* _add = _internal_add_vehicle_journeys();
  // @@protoc_insertion_point(field_add:city.person.v2.SetControlledVehicleActionsRequest.vehicle_journeys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::VehicleRouteAction >&
SetControlledVehicleActionsRequest::vehicle_journeys() const {
  // @@protoc_insertion_point(field_list:city.person.v2.SetControlledVehicleActionsRequest.vehicle_journeys)
  return _impl_.vehicle_journeys_;
}

// -------------------------------------------------------------------

// SetControlledVehicleActionsResponse

// -------------------------------------------------------------------

// SetControlledTaxiIDsRequest

// repeated int32 taxi_ids = 1 [json_name = "taxiIds"];
inline int SetControlledTaxiIDsRequest::_internal_taxi_ids_size() const {
  return _impl_.taxi_ids_.size();
}
inline int SetControlledTaxiIDsRequest::taxi_ids_size() const {
  return _internal_taxi_ids_size();
}
inline void SetControlledTaxiIDsRequest::clear_taxi_ids() {
  _impl_.taxi_ids_.Clear();
}
inline int32_t SetControlledTaxiIDsRequest::_internal_taxi_ids(int index) const {
  return _impl_.taxi_ids_.Get(index);
}
inline int32_t SetControlledTaxiIDsRequest::taxi_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.SetControlledTaxiIDsRequest.taxi_ids)
  return _internal_taxi_ids(index);
}
inline void SetControlledTaxiIDsRequest::set_taxi_ids(int index, int32_t value) {
  _impl_.taxi_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.person.v2.SetControlledTaxiIDsRequest.taxi_ids)
}
inline void SetControlledTaxiIDsRequest::_internal_add_taxi_ids(int32_t value) {
  _impl_.taxi_ids_.Add(value);
}
inline void SetControlledTaxiIDsRequest::add_taxi_ids(int32_t value) {
  _internal_add_taxi_ids(value);
  // @@protoc_insertion_point(field_add:city.person.v2.SetControlledTaxiIDsRequest.taxi_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SetControlledTaxiIDsRequest::_internal_taxi_ids() const {
  return _impl_.taxi_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SetControlledTaxiIDsRequest::taxi_ids() const {
  // @@protoc_insertion_point(field_list:city.person.v2.SetControlledTaxiIDsRequest.taxi_ids)
  return _internal_taxi_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SetControlledTaxiIDsRequest::_internal_mutable_taxi_ids() {
  return &_impl_.taxi_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SetControlledTaxiIDsRequest::mutable_taxi_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.SetControlledTaxiIDsRequest.taxi_ids)
  return _internal_mutable_taxi_ids();
}

// -------------------------------------------------------------------

// SetControlledTaxiIDsResponse

// -------------------------------------------------------------------

// GetAllOrdersRequest

// -------------------------------------------------------------------

// GetAllOrdersResponse

// repeated .city.person.v2.RequestOrderInfo order_infos = 1 [json_name = "orderInfos"];
inline int GetAllOrdersResponse::_internal_order_infos_size() const {
  return _impl_.order_infos_.size();
}
inline int GetAllOrdersResponse::order_infos_size() const {
  return _internal_order_infos_size();
}
inline ::city::person::v2::RequestOrderInfo* GetAllOrdersResponse::mutable_order_infos(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v2.GetAllOrdersResponse.order_infos)
  return _impl_.order_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::RequestOrderInfo >*
GetAllOrdersResponse::mutable_order_infos() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.GetAllOrdersResponse.order_infos)
  return &_impl_.order_infos_;
}
inline const ::city::person::v2::RequestOrderInfo& GetAllOrdersResponse::_internal_order_infos(int index) const {
  return _impl_.order_infos_.Get(index);
}
inline const ::city::person::v2::RequestOrderInfo& GetAllOrdersResponse::order_infos(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.GetAllOrdersResponse.order_infos)
  return _internal_order_infos(index);
}
inline ::city::person::v2::RequestOrderInfo* GetAllOrdersResponse::_internal_add_order_infos() {
  return _impl_.order_infos_.Add();
}
inline ::city::person::v2::RequestOrderInfo* GetAllOrdersResponse::add_order_infos() {
  ::city::person::v2::RequestOrderInfo* _add = _internal_add_order_infos();
  // @@protoc_insertion_point(field_add:city.person.v2.GetAllOrdersResponse.order_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::RequestOrderInfo >&
GetAllOrdersResponse::order_infos() const {
  // @@protoc_insertion_point(field_list:city.person.v2.GetAllOrdersResponse.order_infos)
  return _impl_.order_infos_;
}

// -------------------------------------------------------------------

// SetControlledTaxiToOrdersRequest

// repeated .city.person.v2.OrderAllocationPlan order_plans = 1 [json_name = "orderPlans"];
inline int SetControlledTaxiToOrdersRequest::_internal_order_plans_size() const {
  return _impl_.order_plans_.size();
}
inline int SetControlledTaxiToOrdersRequest::order_plans_size() const {
  return _internal_order_plans_size();
}
inline ::city::person::v2::OrderAllocationPlan* SetControlledTaxiToOrdersRequest::mutable_order_plans(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v2.SetControlledTaxiToOrdersRequest.order_plans)
  return _impl_.order_plans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::OrderAllocationPlan >*
SetControlledTaxiToOrdersRequest::mutable_order_plans() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.SetControlledTaxiToOrdersRequest.order_plans)
  return &_impl_.order_plans_;
}
inline const ::city::person::v2::OrderAllocationPlan& SetControlledTaxiToOrdersRequest::_internal_order_plans(int index) const {
  return _impl_.order_plans_.Get(index);
}
inline const ::city::person::v2::OrderAllocationPlan& SetControlledTaxiToOrdersRequest::order_plans(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.SetControlledTaxiToOrdersRequest.order_plans)
  return _internal_order_plans(index);
}
inline ::city::person::v2::OrderAllocationPlan* SetControlledTaxiToOrdersRequest::_internal_add_order_plans() {
  return _impl_.order_plans_.Add();
}
inline ::city::person::v2::OrderAllocationPlan* SetControlledTaxiToOrdersRequest::add_order_plans() {
  ::city::person::v2::OrderAllocationPlan* _add = _internal_add_order_plans();
  // @@protoc_insertion_point(field_add:city.person.v2.SetControlledTaxiToOrdersRequest.order_plans)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::OrderAllocationPlan >&
SetControlledTaxiToOrdersRequest::order_plans() const {
  // @@protoc_insertion_point(field_list:city.person.v2.SetControlledTaxiToOrdersRequest.order_plans)
  return _impl_.order_plans_;
}

// -------------------------------------------------------------------

// SetControlledTaxiToOrdersResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace person
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv2_2fperson_5fservice_2eproto
