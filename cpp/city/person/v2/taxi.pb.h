// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/person/v2/taxi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv2_2ftaxi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv2_2ftaxi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "city/geo/v2/geo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fperson_2fv2_2ftaxi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fperson_2fv2_2ftaxi_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fperson_2fv2_2ftaxi_2eproto;
namespace city {
namespace person {
namespace v2 {
class OrderAllocationPlan;
struct OrderAllocationPlanDefaultTypeInternal;
extern OrderAllocationPlanDefaultTypeInternal _OrderAllocationPlan_default_instance_;
class OrderAllocations;
struct OrderAllocationsDefaultTypeInternal;
extern OrderAllocationsDefaultTypeInternal _OrderAllocations_default_instance_;
class RequestOrderInfo;
struct RequestOrderInfoDefaultTypeInternal;
extern RequestOrderInfoDefaultTypeInternal _RequestOrderInfo_default_instance_;
}  // namespace v2
}  // namespace person
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::person::v2::OrderAllocationPlan* Arena::CreateMaybeMessage<::city::person::v2::OrderAllocationPlan>(Arena*);
template<> ::city::person::v2::OrderAllocations* Arena::CreateMaybeMessage<::city::person::v2::OrderAllocations>(Arena*);
template<> ::city::person::v2::RequestOrderInfo* Arena::CreateMaybeMessage<::city::person::v2::RequestOrderInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace person {
namespace v2 {

enum OrderStatus : int {
  ORDER_STATUS_UNSPECIFIED = 0,
  ORDER_STATUS_WAITING = 1,
  ORDER_STATUS_PICKING_UP = 2,
  ORDER_STATUS_DELIVERING = 3,
  ORDER_STATUS_COMPLETED = 4,
  OrderStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OrderStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OrderStatus_IsValid(int value);
constexpr OrderStatus OrderStatus_MIN = ORDER_STATUS_UNSPECIFIED;
constexpr OrderStatus OrderStatus_MAX = ORDER_STATUS_COMPLETED;
constexpr int OrderStatus_ARRAYSIZE = OrderStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderStatus_descriptor();
template<typename T>
inline const std::string& OrderStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderStatus_descriptor(), enum_t_value);
}
inline bool OrderStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderStatus>(
    OrderStatus_descriptor(), name, value);
}
enum AllocationPlanType : int {
  ALLOCATION_PLAN_TYPE_UNSPECIFIED = 0,
  ALLOCATION_PLAN_TYPE_PICK_UP = 1,
  ALLOCATION_PLAN_TYPE_DELIVER = 2,
  AllocationPlanType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AllocationPlanType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AllocationPlanType_IsValid(int value);
constexpr AllocationPlanType AllocationPlanType_MIN = ALLOCATION_PLAN_TYPE_UNSPECIFIED;
constexpr AllocationPlanType AllocationPlanType_MAX = ALLOCATION_PLAN_TYPE_DELIVER;
constexpr int AllocationPlanType_ARRAYSIZE = AllocationPlanType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AllocationPlanType_descriptor();
template<typename T>
inline const std::string& AllocationPlanType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AllocationPlanType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AllocationPlanType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AllocationPlanType_descriptor(), enum_t_value);
}
inline bool AllocationPlanType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AllocationPlanType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AllocationPlanType>(
    AllocationPlanType_descriptor(), name, value);
}
// ===================================================================

class RequestOrderInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.RequestOrderInfo) */ {
 public:
  inline RequestOrderInfo() : RequestOrderInfo(nullptr) {}
  ~RequestOrderInfo() override;
  explicit PROTOBUF_CONSTEXPR RequestOrderInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestOrderInfo(const RequestOrderInfo& from);
  RequestOrderInfo(RequestOrderInfo&& from) noexcept
    : RequestOrderInfo() {
    *this = ::std::move(from);
  }

  inline RequestOrderInfo& operator=(const RequestOrderInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestOrderInfo& operator=(RequestOrderInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestOrderInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestOrderInfo* internal_default_instance() {
    return reinterpret_cast<const RequestOrderInfo*>(
               &_RequestOrderInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestOrderInfo& a, RequestOrderInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestOrderInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestOrderInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestOrderInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestOrderInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestOrderInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestOrderInfo& from) {
    RequestOrderInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestOrderInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.RequestOrderInfo";
  }
  protected:
  explicit RequestOrderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepartureFieldNumber = 4,
    kDestinationFieldNumber = 5,
    kRequestTimeFieldNumber = 2,
    kPersonIdFieldNumber = 1,
    kOrderIdFieldNumber = 3,
    kDepartureTimeFieldNumber = 7,
    kStatusFieldNumber = 6,
  };
  // .city.geo.v2.Position departure = 4 [json_name = "departure"];
  bool has_departure() const;
  private:
  bool _internal_has_departure() const;
  public:
  void clear_departure();
  const ::city::geo::v2::Position& departure() const;
  PROTOBUF_NODISCARD ::city::geo::v2::Position* release_departure();
  ::city::geo::v2::Position* mutable_departure();
  void set_allocated_departure(::city::geo::v2::Position* departure);
  private:
  const ::city::geo::v2::Position& _internal_departure() const;
  ::city::geo::v2::Position* _internal_mutable_departure();
  public:
  void unsafe_arena_set_allocated_departure(
      ::city::geo::v2::Position* departure);
  ::city::geo::v2::Position* unsafe_arena_release_departure();

  // .city.geo.v2.Position destination = 5 [json_name = "destination"];
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const ::city::geo::v2::Position& destination() const;
  PROTOBUF_NODISCARD ::city::geo::v2::Position* release_destination();
  ::city::geo::v2::Position* mutable_destination();
  void set_allocated_destination(::city::geo::v2::Position* destination);
  private:
  const ::city::geo::v2::Position& _internal_destination() const;
  ::city::geo::v2::Position* _internal_mutable_destination();
  public:
  void unsafe_arena_set_allocated_destination(
      ::city::geo::v2::Position* destination);
  ::city::geo::v2::Position* unsafe_arena_release_destination();

  // double request_time = 2 [json_name = "requestTime"];
  void clear_request_time();
  double request_time() const;
  void set_request_time(double value);
  private:
  double _internal_request_time() const;
  void _internal_set_request_time(double value);
  public:

  // int32 person_id = 1 [json_name = "personId"];
  void clear_person_id();
  int32_t person_id() const;
  void set_person_id(int32_t value);
  private:
  int32_t _internal_person_id() const;
  void _internal_set_person_id(int32_t value);
  public:

  // int32 order_id = 3 [json_name = "orderId"];
  void clear_order_id();
  int32_t order_id() const;
  void set_order_id(int32_t value);
  private:
  int32_t _internal_order_id() const;
  void _internal_set_order_id(int32_t value);
  public:

  // double departure_time = 7 [json_name = "departureTime"];
  void clear_departure_time();
  double departure_time() const;
  void set_departure_time(double value);
  private:
  double _internal_departure_time() const;
  void _internal_set_departure_time(double value);
  public:

  // .city.person.v2.OrderStatus status = 6 [json_name = "status"];
  void clear_status();
  ::city::person::v2::OrderStatus status() const;
  void set_status(::city::person::v2::OrderStatus value);
  private:
  ::city::person::v2::OrderStatus _internal_status() const;
  void _internal_set_status(::city::person::v2::OrderStatus value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.RequestOrderInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::geo::v2::Position* departure_;
    ::city::geo::v2::Position* destination_;
    double request_time_;
    int32_t person_id_;
    int32_t order_id_;
    double departure_time_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2ftaxi_2eproto;
};
// -------------------------------------------------------------------

class OrderAllocationPlan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.OrderAllocationPlan) */ {
 public:
  inline OrderAllocationPlan() : OrderAllocationPlan(nullptr) {}
  ~OrderAllocationPlan() override;
  explicit PROTOBUF_CONSTEXPR OrderAllocationPlan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderAllocationPlan(const OrderAllocationPlan& from);
  OrderAllocationPlan(OrderAllocationPlan&& from) noexcept
    : OrderAllocationPlan() {
    *this = ::std::move(from);
  }

  inline OrderAllocationPlan& operator=(const OrderAllocationPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderAllocationPlan& operator=(OrderAllocationPlan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderAllocationPlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderAllocationPlan* internal_default_instance() {
    return reinterpret_cast<const OrderAllocationPlan*>(
               &_OrderAllocationPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OrderAllocationPlan& a, OrderAllocationPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderAllocationPlan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderAllocationPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderAllocationPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderAllocationPlan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderAllocationPlan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderAllocationPlan& from) {
    OrderAllocationPlan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderAllocationPlan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.OrderAllocationPlan";
  }
  protected:
  explicit OrderAllocationPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdsFieldNumber = 1,
    kPickUpPersonIdsFieldNumber = 4,
    kDeliverPersonIdsFieldNumber = 5,
    kTaxiIdFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // repeated int32 order_ids = 1 [json_name = "orderIds"];
  int order_ids_size() const;
  private:
  int _internal_order_ids_size() const;
  public:
  void clear_order_ids();
  private:
  int32_t _internal_order_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_order_ids() const;
  void _internal_add_order_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_order_ids();
  public:
  int32_t order_ids(int index) const;
  void set_order_ids(int index, int32_t value);
  void add_order_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      order_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_order_ids();

  // repeated int32 pick_up_person_ids = 4 [json_name = "pickUpPersonIds"];
  int pick_up_person_ids_size() const;
  private:
  int _internal_pick_up_person_ids_size() const;
  public:
  void clear_pick_up_person_ids();
  private:
  int32_t _internal_pick_up_person_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_pick_up_person_ids() const;
  void _internal_add_pick_up_person_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_pick_up_person_ids();
  public:
  int32_t pick_up_person_ids(int index) const;
  void set_pick_up_person_ids(int index, int32_t value);
  void add_pick_up_person_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      pick_up_person_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_pick_up_person_ids();

  // repeated int32 deliver_person_ids = 5 [json_name = "deliverPersonIds"];
  int deliver_person_ids_size() const;
  private:
  int _internal_deliver_person_ids_size() const;
  public:
  void clear_deliver_person_ids();
  private:
  int32_t _internal_deliver_person_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_deliver_person_ids() const;
  void _internal_add_deliver_person_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_deliver_person_ids();
  public:
  int32_t deliver_person_ids(int index) const;
  void set_deliver_person_ids(int index, int32_t value);
  void add_deliver_person_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      deliver_person_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_deliver_person_ids();

  // int32 taxi_id = 2 [json_name = "taxiId"];
  void clear_taxi_id();
  int32_t taxi_id() const;
  void set_taxi_id(int32_t value);
  private:
  int32_t _internal_taxi_id() const;
  void _internal_set_taxi_id(int32_t value);
  public:

  // .city.person.v2.AllocationPlanType type = 3 [json_name = "type"];
  void clear_type();
  ::city::person::v2::AllocationPlanType type() const;
  void set_type(::city::person::v2::AllocationPlanType value);
  private:
  ::city::person::v2::AllocationPlanType _internal_type() const;
  void _internal_set_type(::city::person::v2::AllocationPlanType value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v2.OrderAllocationPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > order_ids_;
    mutable std::atomic<int> _order_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > pick_up_person_ids_;
    mutable std::atomic<int> _pick_up_person_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > deliver_person_ids_;
    mutable std::atomic<int> _deliver_person_ids_cached_byte_size_;
    int32_t taxi_id_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2ftaxi_2eproto;
};
// -------------------------------------------------------------------

class OrderAllocations final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v2.OrderAllocations) */ {
 public:
  inline OrderAllocations() : OrderAllocations(nullptr) {}
  ~OrderAllocations() override;
  explicit PROTOBUF_CONSTEXPR OrderAllocations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderAllocations(const OrderAllocations& from);
  OrderAllocations(OrderAllocations&& from) noexcept
    : OrderAllocations() {
    *this = ::std::move(from);
  }

  inline OrderAllocations& operator=(const OrderAllocations& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderAllocations& operator=(OrderAllocations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderAllocations& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderAllocations* internal_default_instance() {
    return reinterpret_cast<const OrderAllocations*>(
               &_OrderAllocations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OrderAllocations& a, OrderAllocations& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderAllocations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderAllocations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderAllocations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderAllocations>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderAllocations& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderAllocations& from) {
    OrderAllocations::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderAllocations* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v2.OrderAllocations";
  }
  protected:
  explicit OrderAllocations(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderAllocationsFieldNumber = 1,
  };
  // repeated .city.person.v2.OrderAllocationPlan order_allocations = 1 [json_name = "orderAllocations"];
  int order_allocations_size() const;
  private:
  int _internal_order_allocations_size() const;
  public:
  void clear_order_allocations();
  ::city::person::v2::OrderAllocationPlan* mutable_order_allocations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::OrderAllocationPlan >*
      mutable_order_allocations();
  private:
  const ::city::person::v2::OrderAllocationPlan& _internal_order_allocations(int index) const;
  ::city::person::v2::OrderAllocationPlan* _internal_add_order_allocations();
  public:
  const ::city::person::v2::OrderAllocationPlan& order_allocations(int index) const;
  ::city::person::v2::OrderAllocationPlan* add_order_allocations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::OrderAllocationPlan >&
      order_allocations() const;

  // @@protoc_insertion_point(class_scope:city.person.v2.OrderAllocations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::OrderAllocationPlan > order_allocations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv2_2ftaxi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestOrderInfo

// int32 person_id = 1 [json_name = "personId"];
inline void RequestOrderInfo::clear_person_id() {
  _impl_.person_id_ = 0;
}
inline int32_t RequestOrderInfo::_internal_person_id() const {
  return _impl_.person_id_;
}
inline int32_t RequestOrderInfo::person_id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.RequestOrderInfo.person_id)
  return _internal_person_id();
}
inline void RequestOrderInfo::_internal_set_person_id(int32_t value) {
  
  _impl_.person_id_ = value;
}
inline void RequestOrderInfo::set_person_id(int32_t value) {
  _internal_set_person_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.RequestOrderInfo.person_id)
}

// double request_time = 2 [json_name = "requestTime"];
inline void RequestOrderInfo::clear_request_time() {
  _impl_.request_time_ = 0;
}
inline double RequestOrderInfo::_internal_request_time() const {
  return _impl_.request_time_;
}
inline double RequestOrderInfo::request_time() const {
  // @@protoc_insertion_point(field_get:city.person.v2.RequestOrderInfo.request_time)
  return _internal_request_time();
}
inline void RequestOrderInfo::_internal_set_request_time(double value) {
  
  _impl_.request_time_ = value;
}
inline void RequestOrderInfo::set_request_time(double value) {
  _internal_set_request_time(value);
  // @@protoc_insertion_point(field_set:city.person.v2.RequestOrderInfo.request_time)
}

// int32 order_id = 3 [json_name = "orderId"];
inline void RequestOrderInfo::clear_order_id() {
  _impl_.order_id_ = 0;
}
inline int32_t RequestOrderInfo::_internal_order_id() const {
  return _impl_.order_id_;
}
inline int32_t RequestOrderInfo::order_id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.RequestOrderInfo.order_id)
  return _internal_order_id();
}
inline void RequestOrderInfo::_internal_set_order_id(int32_t value) {
  
  _impl_.order_id_ = value;
}
inline void RequestOrderInfo::set_order_id(int32_t value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.RequestOrderInfo.order_id)
}

// .city.geo.v2.Position departure = 4 [json_name = "departure"];
inline bool RequestOrderInfo::_internal_has_departure() const {
  return this != internal_default_instance() && _impl_.departure_ != nullptr;
}
inline bool RequestOrderInfo::has_departure() const {
  return _internal_has_departure();
}
inline const ::city::geo::v2::Position& RequestOrderInfo::_internal_departure() const {
  const ::city::geo::v2::Position* p = _impl_.departure_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::Position&>(
      ::city::geo::v2::_Position_default_instance_);
}
inline const ::city::geo::v2::Position& RequestOrderInfo::departure() const {
  // @@protoc_insertion_point(field_get:city.person.v2.RequestOrderInfo.departure)
  return _internal_departure();
}
inline void RequestOrderInfo::unsafe_arena_set_allocated_departure(
    ::city::geo::v2::Position* departure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.departure_);
  }
  _impl_.departure_ = departure;
  if (departure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.RequestOrderInfo.departure)
}
inline ::city::geo::v2::Position* RequestOrderInfo::release_departure() {
  
  ::city::geo::v2::Position* temp = _impl_.departure_;
  _impl_.departure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::geo::v2::Position* RequestOrderInfo::unsafe_arena_release_departure() {
  // @@protoc_insertion_point(field_release:city.person.v2.RequestOrderInfo.departure)
  
  ::city::geo::v2::Position* temp = _impl_.departure_;
  _impl_.departure_ = nullptr;
  return temp;
}
inline ::city::geo::v2::Position* RequestOrderInfo::_internal_mutable_departure() {
  
  if (_impl_.departure_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::Position>(GetArenaForAllocation());
    _impl_.departure_ = p;
  }
  return _impl_.departure_;
}
inline ::city::geo::v2::Position* RequestOrderInfo::mutable_departure() {
  ::city::geo::v2::Position* _msg = _internal_mutable_departure();
  // @@protoc_insertion_point(field_mutable:city.person.v2.RequestOrderInfo.departure)
  return _msg;
}
inline void RequestOrderInfo::set_allocated_departure(::city::geo::v2::Position* departure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.departure_);
  }
  if (departure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(departure));
    if (message_arena != submessage_arena) {
      departure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, departure, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.departure_ = departure;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.RequestOrderInfo.departure)
}

// .city.geo.v2.Position destination = 5 [json_name = "destination"];
inline bool RequestOrderInfo::_internal_has_destination() const {
  return this != internal_default_instance() && _impl_.destination_ != nullptr;
}
inline bool RequestOrderInfo::has_destination() const {
  return _internal_has_destination();
}
inline const ::city::geo::v2::Position& RequestOrderInfo::_internal_destination() const {
  const ::city::geo::v2::Position* p = _impl_.destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::Position&>(
      ::city::geo::v2::_Position_default_instance_);
}
inline const ::city::geo::v2::Position& RequestOrderInfo::destination() const {
  // @@protoc_insertion_point(field_get:city.person.v2.RequestOrderInfo.destination)
  return _internal_destination();
}
inline void RequestOrderInfo::unsafe_arena_set_allocated_destination(
    ::city::geo::v2::Position* destination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_);
  }
  _impl_.destination_ = destination;
  if (destination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v2.RequestOrderInfo.destination)
}
inline ::city::geo::v2::Position* RequestOrderInfo::release_destination() {
  
  ::city::geo::v2::Position* temp = _impl_.destination_;
  _impl_.destination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::geo::v2::Position* RequestOrderInfo::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_release:city.person.v2.RequestOrderInfo.destination)
  
  ::city::geo::v2::Position* temp = _impl_.destination_;
  _impl_.destination_ = nullptr;
  return temp;
}
inline ::city::geo::v2::Position* RequestOrderInfo::_internal_mutable_destination() {
  
  if (_impl_.destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::Position>(GetArenaForAllocation());
    _impl_.destination_ = p;
  }
  return _impl_.destination_;
}
inline ::city::geo::v2::Position* RequestOrderInfo::mutable_destination() {
  ::city::geo::v2::Position* _msg = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:city.person.v2.RequestOrderInfo.destination)
  return _msg;
}
inline void RequestOrderInfo::set_allocated_destination(::city::geo::v2::Position* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_);
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination));
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:city.person.v2.RequestOrderInfo.destination)
}

// .city.person.v2.OrderStatus status = 6 [json_name = "status"];
inline void RequestOrderInfo::clear_status() {
  _impl_.status_ = 0;
}
inline ::city::person::v2::OrderStatus RequestOrderInfo::_internal_status() const {
  return static_cast< ::city::person::v2::OrderStatus >(_impl_.status_);
}
inline ::city::person::v2::OrderStatus RequestOrderInfo::status() const {
  // @@protoc_insertion_point(field_get:city.person.v2.RequestOrderInfo.status)
  return _internal_status();
}
inline void RequestOrderInfo::_internal_set_status(::city::person::v2::OrderStatus value) {
  
  _impl_.status_ = value;
}
inline void RequestOrderInfo::set_status(::city::person::v2::OrderStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:city.person.v2.RequestOrderInfo.status)
}

// double departure_time = 7 [json_name = "departureTime"];
inline void RequestOrderInfo::clear_departure_time() {
  _impl_.departure_time_ = 0;
}
inline double RequestOrderInfo::_internal_departure_time() const {
  return _impl_.departure_time_;
}
inline double RequestOrderInfo::departure_time() const {
  // @@protoc_insertion_point(field_get:city.person.v2.RequestOrderInfo.departure_time)
  return _internal_departure_time();
}
inline void RequestOrderInfo::_internal_set_departure_time(double value) {
  
  _impl_.departure_time_ = value;
}
inline void RequestOrderInfo::set_departure_time(double value) {
  _internal_set_departure_time(value);
  // @@protoc_insertion_point(field_set:city.person.v2.RequestOrderInfo.departure_time)
}

// -------------------------------------------------------------------

// OrderAllocationPlan

// repeated int32 order_ids = 1 [json_name = "orderIds"];
inline int OrderAllocationPlan::_internal_order_ids_size() const {
  return _impl_.order_ids_.size();
}
inline int OrderAllocationPlan::order_ids_size() const {
  return _internal_order_ids_size();
}
inline void OrderAllocationPlan::clear_order_ids() {
  _impl_.order_ids_.Clear();
}
inline int32_t OrderAllocationPlan::_internal_order_ids(int index) const {
  return _impl_.order_ids_.Get(index);
}
inline int32_t OrderAllocationPlan::order_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.OrderAllocationPlan.order_ids)
  return _internal_order_ids(index);
}
inline void OrderAllocationPlan::set_order_ids(int index, int32_t value) {
  _impl_.order_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.person.v2.OrderAllocationPlan.order_ids)
}
inline void OrderAllocationPlan::_internal_add_order_ids(int32_t value) {
  _impl_.order_ids_.Add(value);
}
inline void OrderAllocationPlan::add_order_ids(int32_t value) {
  _internal_add_order_ids(value);
  // @@protoc_insertion_point(field_add:city.person.v2.OrderAllocationPlan.order_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
OrderAllocationPlan::_internal_order_ids() const {
  return _impl_.order_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
OrderAllocationPlan::order_ids() const {
  // @@protoc_insertion_point(field_list:city.person.v2.OrderAllocationPlan.order_ids)
  return _internal_order_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
OrderAllocationPlan::_internal_mutable_order_ids() {
  return &_impl_.order_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
OrderAllocationPlan::mutable_order_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.OrderAllocationPlan.order_ids)
  return _internal_mutable_order_ids();
}

// int32 taxi_id = 2 [json_name = "taxiId"];
inline void OrderAllocationPlan::clear_taxi_id() {
  _impl_.taxi_id_ = 0;
}
inline int32_t OrderAllocationPlan::_internal_taxi_id() const {
  return _impl_.taxi_id_;
}
inline int32_t OrderAllocationPlan::taxi_id() const {
  // @@protoc_insertion_point(field_get:city.person.v2.OrderAllocationPlan.taxi_id)
  return _internal_taxi_id();
}
inline void OrderAllocationPlan::_internal_set_taxi_id(int32_t value) {
  
  _impl_.taxi_id_ = value;
}
inline void OrderAllocationPlan::set_taxi_id(int32_t value) {
  _internal_set_taxi_id(value);
  // @@protoc_insertion_point(field_set:city.person.v2.OrderAllocationPlan.taxi_id)
}

// .city.person.v2.AllocationPlanType type = 3 [json_name = "type"];
inline void OrderAllocationPlan::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::person::v2::AllocationPlanType OrderAllocationPlan::_internal_type() const {
  return static_cast< ::city::person::v2::AllocationPlanType >(_impl_.type_);
}
inline ::city::person::v2::AllocationPlanType OrderAllocationPlan::type() const {
  // @@protoc_insertion_point(field_get:city.person.v2.OrderAllocationPlan.type)
  return _internal_type();
}
inline void OrderAllocationPlan::_internal_set_type(::city::person::v2::AllocationPlanType value) {
  
  _impl_.type_ = value;
}
inline void OrderAllocationPlan::set_type(::city::person::v2::AllocationPlanType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.person.v2.OrderAllocationPlan.type)
}

// repeated int32 pick_up_person_ids = 4 [json_name = "pickUpPersonIds"];
inline int OrderAllocationPlan::_internal_pick_up_person_ids_size() const {
  return _impl_.pick_up_person_ids_.size();
}
inline int OrderAllocationPlan::pick_up_person_ids_size() const {
  return _internal_pick_up_person_ids_size();
}
inline void OrderAllocationPlan::clear_pick_up_person_ids() {
  _impl_.pick_up_person_ids_.Clear();
}
inline int32_t OrderAllocationPlan::_internal_pick_up_person_ids(int index) const {
  return _impl_.pick_up_person_ids_.Get(index);
}
inline int32_t OrderAllocationPlan::pick_up_person_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.OrderAllocationPlan.pick_up_person_ids)
  return _internal_pick_up_person_ids(index);
}
inline void OrderAllocationPlan::set_pick_up_person_ids(int index, int32_t value) {
  _impl_.pick_up_person_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.person.v2.OrderAllocationPlan.pick_up_person_ids)
}
inline void OrderAllocationPlan::_internal_add_pick_up_person_ids(int32_t value) {
  _impl_.pick_up_person_ids_.Add(value);
}
inline void OrderAllocationPlan::add_pick_up_person_ids(int32_t value) {
  _internal_add_pick_up_person_ids(value);
  // @@protoc_insertion_point(field_add:city.person.v2.OrderAllocationPlan.pick_up_person_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
OrderAllocationPlan::_internal_pick_up_person_ids() const {
  return _impl_.pick_up_person_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
OrderAllocationPlan::pick_up_person_ids() const {
  // @@protoc_insertion_point(field_list:city.person.v2.OrderAllocationPlan.pick_up_person_ids)
  return _internal_pick_up_person_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
OrderAllocationPlan::_internal_mutable_pick_up_person_ids() {
  return &_impl_.pick_up_person_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
OrderAllocationPlan::mutable_pick_up_person_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.OrderAllocationPlan.pick_up_person_ids)
  return _internal_mutable_pick_up_person_ids();
}

// repeated int32 deliver_person_ids = 5 [json_name = "deliverPersonIds"];
inline int OrderAllocationPlan::_internal_deliver_person_ids_size() const {
  return _impl_.deliver_person_ids_.size();
}
inline int OrderAllocationPlan::deliver_person_ids_size() const {
  return _internal_deliver_person_ids_size();
}
inline void OrderAllocationPlan::clear_deliver_person_ids() {
  _impl_.deliver_person_ids_.Clear();
}
inline int32_t OrderAllocationPlan::_internal_deliver_person_ids(int index) const {
  return _impl_.deliver_person_ids_.Get(index);
}
inline int32_t OrderAllocationPlan::deliver_person_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.OrderAllocationPlan.deliver_person_ids)
  return _internal_deliver_person_ids(index);
}
inline void OrderAllocationPlan::set_deliver_person_ids(int index, int32_t value) {
  _impl_.deliver_person_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.person.v2.OrderAllocationPlan.deliver_person_ids)
}
inline void OrderAllocationPlan::_internal_add_deliver_person_ids(int32_t value) {
  _impl_.deliver_person_ids_.Add(value);
}
inline void OrderAllocationPlan::add_deliver_person_ids(int32_t value) {
  _internal_add_deliver_person_ids(value);
  // @@protoc_insertion_point(field_add:city.person.v2.OrderAllocationPlan.deliver_person_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
OrderAllocationPlan::_internal_deliver_person_ids() const {
  return _impl_.deliver_person_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
OrderAllocationPlan::deliver_person_ids() const {
  // @@protoc_insertion_point(field_list:city.person.v2.OrderAllocationPlan.deliver_person_ids)
  return _internal_deliver_person_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
OrderAllocationPlan::_internal_mutable_deliver_person_ids() {
  return &_impl_.deliver_person_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
OrderAllocationPlan::mutable_deliver_person_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.OrderAllocationPlan.deliver_person_ids)
  return _internal_mutable_deliver_person_ids();
}

// -------------------------------------------------------------------

// OrderAllocations

// repeated .city.person.v2.OrderAllocationPlan order_allocations = 1 [json_name = "orderAllocations"];
inline int OrderAllocations::_internal_order_allocations_size() const {
  return _impl_.order_allocations_.size();
}
inline int OrderAllocations::order_allocations_size() const {
  return _internal_order_allocations_size();
}
inline void OrderAllocations::clear_order_allocations() {
  _impl_.order_allocations_.Clear();
}
inline ::city::person::v2::OrderAllocationPlan* OrderAllocations::mutable_order_allocations(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v2.OrderAllocations.order_allocations)
  return _impl_.order_allocations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::OrderAllocationPlan >*
OrderAllocations::mutable_order_allocations() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v2.OrderAllocations.order_allocations)
  return &_impl_.order_allocations_;
}
inline const ::city::person::v2::OrderAllocationPlan& OrderAllocations::_internal_order_allocations(int index) const {
  return _impl_.order_allocations_.Get(index);
}
inline const ::city::person::v2::OrderAllocationPlan& OrderAllocations::order_allocations(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v2.OrderAllocations.order_allocations)
  return _internal_order_allocations(index);
}
inline ::city::person::v2::OrderAllocationPlan* OrderAllocations::_internal_add_order_allocations() {
  return _impl_.order_allocations_.Add();
}
inline ::city::person::v2::OrderAllocationPlan* OrderAllocations::add_order_allocations() {
  ::city::person::v2::OrderAllocationPlan* _add = _internal_add_order_allocations();
  // @@protoc_insertion_point(field_add:city.person.v2.OrderAllocations.order_allocations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::person::v2::OrderAllocationPlan >&
OrderAllocations::order_allocations() const {
  // @@protoc_insertion_point(field_list:city.person.v2.OrderAllocations.order_allocations)
  return _impl_.order_allocations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace person
}  // namespace city

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::city::person::v2::OrderStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::person::v2::OrderStatus>() {
  return ::city::person::v2::OrderStatus_descriptor();
}
template <> struct is_proto_enum< ::city::person::v2::AllocationPlanType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::person::v2::AllocationPlanType>() {
  return ::city::person::v2::AllocationPlanType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv2_2ftaxi_2eproto
