// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/person/v2/taxi.proto

#include "city/person/v2/taxi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace person {
namespace v2 {
PROTOBUF_CONSTEXPR RequestOrderInfo::RequestOrderInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.departure_)*/nullptr
  , /*decltype(_impl_.destination_)*/nullptr
  , /*decltype(_impl_.request_time_)*/0
  , /*decltype(_impl_.person_id_)*/0
  , /*decltype(_impl_.order_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestOrderInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestOrderInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestOrderInfoDefaultTypeInternal() {}
  union {
    RequestOrderInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestOrderInfoDefaultTypeInternal _RequestOrderInfo_default_instance_;
PROTOBUF_CONSTEXPR OrderAllocationPlan::OrderAllocationPlan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_ids_)*/{}
  , /*decltype(_impl_._order_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.pick_up_person_ids_)*/{}
  , /*decltype(_impl_._pick_up_person_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.deliver_person_ids_)*/{}
  , /*decltype(_impl_._deliver_person_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.taxi_id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderAllocationPlanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderAllocationPlanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderAllocationPlanDefaultTypeInternal() {}
  union {
    OrderAllocationPlan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderAllocationPlanDefaultTypeInternal _OrderAllocationPlan_default_instance_;
}  // namespace v2
}  // namespace person
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fperson_2fv2_2ftaxi_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_city_2fperson_2fv2_2ftaxi_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fperson_2fv2_2ftaxi_2eproto = nullptr;

const uint32_t TableStruct_city_2fperson_2fv2_2ftaxi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::RequestOrderInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::RequestOrderInfo, _impl_.person_id_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::RequestOrderInfo, _impl_.request_time_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::RequestOrderInfo, _impl_.order_id_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::RequestOrderInfo, _impl_.departure_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::RequestOrderInfo, _impl_.destination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::OrderAllocationPlan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::OrderAllocationPlan, _impl_.order_ids_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::OrderAllocationPlan, _impl_.taxi_id_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::OrderAllocationPlan, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::OrderAllocationPlan, _impl_.pick_up_person_ids_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::OrderAllocationPlan, _impl_.deliver_person_ids_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::person::v2::RequestOrderInfo)},
  { 11, -1, -1, sizeof(::city::person::v2::OrderAllocationPlan)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::person::v2::_RequestOrderInfo_default_instance_._instance,
  &::city::person::v2::_OrderAllocationPlan_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fperson_2fv2_2ftaxi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031city/person/v2/taxi.proto\022\016city.person"
  ".v2\032\025city/geo/v2/geo.proto\"\333\001\n\020RequestOr"
  "derInfo\022\033\n\tperson_id\030\001 \001(\005R\010personId\022!\n\014"
  "request_time\030\002 \001(\001R\013requestTime\022\031\n\010order"
  "_id\030\003 \001(\005R\007orderId\0223\n\tdeparture\030\004 \001(\0132\025."
  "city.geo.v2.PositionR\tdeparture\0227\n\013desti"
  "nation\030\005 \001(\0132\025.city.geo.v2.PositionR\013des"
  "tination\"\336\001\n\023OrderAllocationPlan\022\033\n\torde"
  "r_ids\030\001 \003(\005R\010orderIds\022\027\n\007taxi_id\030\002 \001(\005R\006"
  "taxiId\0226\n\004type\030\003 \001(\0162\".city.person.v2.Al"
  "locationPlanTypeR\004type\022+\n\022pick_up_person"
  "_ids\030\004 \003(\005R\017pickUpPersonIds\022,\n\022deliver_p"
  "erson_ids\030\005 \003(\005R\020deliverPersonIds*~\n\022All"
  "ocationPlanType\022$\n ALLOCATION_PLAN_TYPE_"
  "UNSPECIFIED\020\000\022 \n\034ALLOCATION_PLAN_TYPE_PI"
  "CK_UP\020\001\022 \n\034ALLOCATION_PLAN_TYPE_DELIVER\020"
  "\002B\262\001\n\022com.city.person.v2B\tTaxiProtoP\001Z7g"
  "it.fiblab.net/sim/protos/v2/go/city/pers"
  "on/v2;personv2\242\002\003CPX\252\002\016City.Person.V2\312\002\016"
  "City\\Person\\V2\342\002\032City\\Person\\V2\\GPBMetad"
  "ata\352\002\020City::Person::V2b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_city_2fperson_2fv2_2ftaxi_2eproto_deps[1] = {
  &::descriptor_table_city_2fgeo_2fv2_2fgeo_2eproto,
};
static ::_pbi::once_flag descriptor_table_city_2fperson_2fv2_2ftaxi_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fperson_2fv2_2ftaxi_2eproto = {
    false, false, 830, descriptor_table_protodef_city_2fperson_2fv2_2ftaxi_2eproto,
    "city/person/v2/taxi.proto",
    &descriptor_table_city_2fperson_2fv2_2ftaxi_2eproto_once, descriptor_table_city_2fperson_2fv2_2ftaxi_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_city_2fperson_2fv2_2ftaxi_2eproto::offsets,
    file_level_metadata_city_2fperson_2fv2_2ftaxi_2eproto, file_level_enum_descriptors_city_2fperson_2fv2_2ftaxi_2eproto,
    file_level_service_descriptors_city_2fperson_2fv2_2ftaxi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fperson_2fv2_2ftaxi_2eproto_getter() {
  return &descriptor_table_city_2fperson_2fv2_2ftaxi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fperson_2fv2_2ftaxi_2eproto(&descriptor_table_city_2fperson_2fv2_2ftaxi_2eproto);
namespace city {
namespace person {
namespace v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AllocationPlanType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fperson_2fv2_2ftaxi_2eproto);
  return file_level_enum_descriptors_city_2fperson_2fv2_2ftaxi_2eproto[0];
}
bool AllocationPlanType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RequestOrderInfo::_Internal {
 public:
  static const ::city::geo::v2::Position& departure(const RequestOrderInfo* msg);
  static const ::city::geo::v2::Position& destination(const RequestOrderInfo* msg);
};

const ::city::geo::v2::Position&
RequestOrderInfo::_Internal::departure(const RequestOrderInfo* msg) {
  return *msg->_impl_.departure_;
}
const ::city::geo::v2::Position&
RequestOrderInfo::_Internal::destination(const RequestOrderInfo* msg) {
  return *msg->_impl_.destination_;
}
void RequestOrderInfo::clear_departure() {
  if (GetArenaForAllocation() == nullptr && _impl_.departure_ != nullptr) {
    delete _impl_.departure_;
  }
  _impl_.departure_ = nullptr;
}
void RequestOrderInfo::clear_destination() {
  if (GetArenaForAllocation() == nullptr && _impl_.destination_ != nullptr) {
    delete _impl_.destination_;
  }
  _impl_.destination_ = nullptr;
}
RequestOrderInfo::RequestOrderInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v2.RequestOrderInfo)
}
RequestOrderInfo::RequestOrderInfo(const RequestOrderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestOrderInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.departure_){nullptr}
    , decltype(_impl_.destination_){nullptr}
    , decltype(_impl_.request_time_){}
    , decltype(_impl_.person_id_){}
    , decltype(_impl_.order_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_departure()) {
    _this->_impl_.departure_ = new ::city::geo::v2::Position(*from._impl_.departure_);
  }
  if (from._internal_has_destination()) {
    _this->_impl_.destination_ = new ::city::geo::v2::Position(*from._impl_.destination_);
  }
  ::memcpy(&_impl_.request_time_, &from._impl_.request_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.order_id_) -
    reinterpret_cast<char*>(&_impl_.request_time_)) + sizeof(_impl_.order_id_));
  // @@protoc_insertion_point(copy_constructor:city.person.v2.RequestOrderInfo)
}

inline void RequestOrderInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.departure_){nullptr}
    , decltype(_impl_.destination_){nullptr}
    , decltype(_impl_.request_time_){0}
    , decltype(_impl_.person_id_){0}
    , decltype(_impl_.order_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestOrderInfo::~RequestOrderInfo() {
  // @@protoc_insertion_point(destructor:city.person.v2.RequestOrderInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestOrderInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.departure_;
  if (this != internal_default_instance()) delete _impl_.destination_;
}

void RequestOrderInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestOrderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v2.RequestOrderInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.departure_ != nullptr) {
    delete _impl_.departure_;
  }
  _impl_.departure_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.destination_ != nullptr) {
    delete _impl_.destination_;
  }
  _impl_.destination_ = nullptr;
  ::memset(&_impl_.request_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.order_id_) -
      reinterpret_cast<char*>(&_impl_.request_time_)) + sizeof(_impl_.order_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestOrderInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 person_id = 1 [json_name = "personId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.person_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double request_time = 2 [json_name = "requestTime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.request_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 order_id = 3 [json_name = "orderId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.geo.v2.Position departure = 4 [json_name = "departure"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_departure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.geo.v2.Position destination = 5 [json_name = "destination"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestOrderInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v2.RequestOrderInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 person_id = 1 [json_name = "personId"];
  if (this->_internal_person_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_person_id(), target);
  }

  // double request_time = 2 [json_name = "requestTime"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_request_time = this->_internal_request_time();
  uint64_t raw_request_time;
  memcpy(&raw_request_time, &tmp_request_time, sizeof(tmp_request_time));
  if (raw_request_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_request_time(), target);
  }

  // int32 order_id = 3 [json_name = "orderId"];
  if (this->_internal_order_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_order_id(), target);
  }

  // .city.geo.v2.Position departure = 4 [json_name = "departure"];
  if (this->_internal_has_departure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::departure(this),
        _Internal::departure(this).GetCachedSize(), target, stream);
  }

  // .city.geo.v2.Position destination = 5 [json_name = "destination"];
  if (this->_internal_has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::destination(this),
        _Internal::destination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v2.RequestOrderInfo)
  return target;
}

size_t RequestOrderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v2.RequestOrderInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.geo.v2.Position departure = 4 [json_name = "departure"];
  if (this->_internal_has_departure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.departure_);
  }

  // .city.geo.v2.Position destination = 5 [json_name = "destination"];
  if (this->_internal_has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destination_);
  }

  // double request_time = 2 [json_name = "requestTime"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_request_time = this->_internal_request_time();
  uint64_t raw_request_time;
  memcpy(&raw_request_time, &tmp_request_time, sizeof(tmp_request_time));
  if (raw_request_time != 0) {
    total_size += 1 + 8;
  }

  // int32 person_id = 1 [json_name = "personId"];
  if (this->_internal_person_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_person_id());
  }

  // int32 order_id = 3 [json_name = "orderId"];
  if (this->_internal_order_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_order_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestOrderInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestOrderInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestOrderInfo::GetClassData() const { return &_class_data_; }


void RequestOrderInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestOrderInfo*>(&to_msg);
  auto& from = static_cast<const RequestOrderInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v2.RequestOrderInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_departure()) {
    _this->_internal_mutable_departure()->::city::geo::v2::Position::MergeFrom(
        from._internal_departure());
  }
  if (from._internal_has_destination()) {
    _this->_internal_mutable_destination()->::city::geo::v2::Position::MergeFrom(
        from._internal_destination());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_request_time = from._internal_request_time();
  uint64_t raw_request_time;
  memcpy(&raw_request_time, &tmp_request_time, sizeof(tmp_request_time));
  if (raw_request_time != 0) {
    _this->_internal_set_request_time(from._internal_request_time());
  }
  if (from._internal_person_id() != 0) {
    _this->_internal_set_person_id(from._internal_person_id());
  }
  if (from._internal_order_id() != 0) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestOrderInfo::CopyFrom(const RequestOrderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v2.RequestOrderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOrderInfo::IsInitialized() const {
  return true;
}

void RequestOrderInfo::InternalSwap(RequestOrderInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestOrderInfo, _impl_.order_id_)
      + sizeof(RequestOrderInfo::_impl_.order_id_)
      - PROTOBUF_FIELD_OFFSET(RequestOrderInfo, _impl_.departure_)>(
          reinterpret_cast<char*>(&_impl_.departure_),
          reinterpret_cast<char*>(&other->_impl_.departure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestOrderInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv2_2ftaxi_2eproto_getter, &descriptor_table_city_2fperson_2fv2_2ftaxi_2eproto_once,
      file_level_metadata_city_2fperson_2fv2_2ftaxi_2eproto[0]);
}

// ===================================================================

class OrderAllocationPlan::_Internal {
 public:
};

OrderAllocationPlan::OrderAllocationPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v2.OrderAllocationPlan)
}
OrderAllocationPlan::OrderAllocationPlan(const OrderAllocationPlan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderAllocationPlan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_ids_){from._impl_.order_ids_}
    , /*decltype(_impl_._order_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.pick_up_person_ids_){from._impl_.pick_up_person_ids_}
    , /*decltype(_impl_._pick_up_person_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.deliver_person_ids_){from._impl_.deliver_person_ids_}
    , /*decltype(_impl_._deliver_person_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.taxi_id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.taxi_id_, &from._impl_.taxi_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.taxi_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:city.person.v2.OrderAllocationPlan)
}

inline void OrderAllocationPlan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.order_ids_){arena}
    , /*decltype(_impl_._order_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.pick_up_person_ids_){arena}
    , /*decltype(_impl_._pick_up_person_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.deliver_person_ids_){arena}
    , /*decltype(_impl_._deliver_person_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.taxi_id_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OrderAllocationPlan::~OrderAllocationPlan() {
  // @@protoc_insertion_point(destructor:city.person.v2.OrderAllocationPlan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderAllocationPlan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_ids_.~RepeatedField();
  _impl_.pick_up_person_ids_.~RepeatedField();
  _impl_.deliver_person_ids_.~RepeatedField();
}

void OrderAllocationPlan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderAllocationPlan::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v2.OrderAllocationPlan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_ids_.Clear();
  _impl_.pick_up_person_ids_.Clear();
  _impl_.deliver_person_ids_.Clear();
  ::memset(&_impl_.taxi_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.taxi_id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderAllocationPlan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 order_ids = 1 [json_name = "orderIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_order_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_order_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 taxi_id = 2 [json_name = "taxiId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.taxi_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.person.v2.AllocationPlanType type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::city::person::v2::AllocationPlanType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 pick_up_person_ids = 4 [json_name = "pickUpPersonIds"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pick_up_person_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_pick_up_person_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 deliver_person_ids = 5 [json_name = "deliverPersonIds"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_deliver_person_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_deliver_person_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderAllocationPlan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v2.OrderAllocationPlan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 order_ids = 1 [json_name = "orderIds"];
  {
    int byte_size = _impl_._order_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_order_ids(), byte_size, target);
    }
  }

  // int32 taxi_id = 2 [json_name = "taxiId"];
  if (this->_internal_taxi_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_taxi_id(), target);
  }

  // .city.person.v2.AllocationPlanType type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // repeated int32 pick_up_person_ids = 4 [json_name = "pickUpPersonIds"];
  {
    int byte_size = _impl_._pick_up_person_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_pick_up_person_ids(), byte_size, target);
    }
  }

  // repeated int32 deliver_person_ids = 5 [json_name = "deliverPersonIds"];
  {
    int byte_size = _impl_._deliver_person_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_deliver_person_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v2.OrderAllocationPlan)
  return target;
}

size_t OrderAllocationPlan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v2.OrderAllocationPlan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 order_ids = 1 [json_name = "orderIds"];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.order_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._order_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 pick_up_person_ids = 4 [json_name = "pickUpPersonIds"];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.pick_up_person_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._pick_up_person_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 deliver_person_ids = 5 [json_name = "deliverPersonIds"];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.deliver_person_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._deliver_person_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 taxi_id = 2 [json_name = "taxiId"];
  if (this->_internal_taxi_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_taxi_id());
  }

  // .city.person.v2.AllocationPlanType type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderAllocationPlan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderAllocationPlan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderAllocationPlan::GetClassData() const { return &_class_data_; }


void OrderAllocationPlan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderAllocationPlan*>(&to_msg);
  auto& from = static_cast<const OrderAllocationPlan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v2.OrderAllocationPlan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.order_ids_.MergeFrom(from._impl_.order_ids_);
  _this->_impl_.pick_up_person_ids_.MergeFrom(from._impl_.pick_up_person_ids_);
  _this->_impl_.deliver_person_ids_.MergeFrom(from._impl_.deliver_person_ids_);
  if (from._internal_taxi_id() != 0) {
    _this->_internal_set_taxi_id(from._internal_taxi_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderAllocationPlan::CopyFrom(const OrderAllocationPlan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v2.OrderAllocationPlan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderAllocationPlan::IsInitialized() const {
  return true;
}

void OrderAllocationPlan::InternalSwap(OrderAllocationPlan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.order_ids_.InternalSwap(&other->_impl_.order_ids_);
  _impl_.pick_up_person_ids_.InternalSwap(&other->_impl_.pick_up_person_ids_);
  _impl_.deliver_person_ids_.InternalSwap(&other->_impl_.deliver_person_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderAllocationPlan, _impl_.type_)
      + sizeof(OrderAllocationPlan::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(OrderAllocationPlan, _impl_.taxi_id_)>(
          reinterpret_cast<char*>(&_impl_.taxi_id_),
          reinterpret_cast<char*>(&other->_impl_.taxi_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderAllocationPlan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv2_2ftaxi_2eproto_getter, &descriptor_table_city_2fperson_2fv2_2ftaxi_2eproto_once,
      file_level_metadata_city_2fperson_2fv2_2ftaxi_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace person
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::person::v2::RequestOrderInfo*
Arena::CreateMaybeMessage< ::city::person::v2::RequestOrderInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v2::RequestOrderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v2::OrderAllocationPlan*
Arena::CreateMaybeMessage< ::city::person::v2::OrderAllocationPlan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v2::OrderAllocationPlan >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
