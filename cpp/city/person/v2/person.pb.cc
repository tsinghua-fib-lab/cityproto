// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/person/v2/person.proto

#include "city/person/v2/person.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace person {
namespace v2 {
PROTOBUF_CONSTEXPR PersonAttribute::PersonAttribute(
    ::_pbi::ConstantInitialized) {}
struct PersonAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PersonAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PersonAttributeDefaultTypeInternal() {}
  union {
    PersonAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PersonAttributeDefaultTypeInternal _PersonAttribute_default_instance_;
PROTOBUF_CONSTEXPR VehicleEngineEfficiency::VehicleEngineEfficiency(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.energy_conversion_efficiency_)*/0
  , /*decltype(_impl_.c_ef_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehicleEngineEfficiencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleEngineEfficiencyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleEngineEfficiencyDefaultTypeInternal() {}
  union {
    VehicleEngineEfficiency _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleEngineEfficiencyDefaultTypeInternal _VehicleEngineEfficiency_default_instance_;
PROTOBUF_CONSTEXPR EmissionAttribute::EmissionAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fuel_efficiency_)*/nullptr
  , /*decltype(_impl_.electric_efficiency_)*/nullptr
  , /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_.coefficient_drag_)*/0
  , /*decltype(_impl_.lambda_s_)*/0
  , /*decltype(_impl_.frontal_area_)*/0
  , /*decltype(_impl_.type_)*/0} {}
struct EmissionAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmissionAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmissionAttributeDefaultTypeInternal() {}
  union {
    EmissionAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmissionAttributeDefaultTypeInternal _EmissionAttribute_default_instance_;
PROTOBUF_CONSTEXPR VehicleAttribute::VehicleAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.emission_attribute_)*/nullptr
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.max_speed_)*/0
  , /*decltype(_impl_.max_acceleration_)*/0
  , /*decltype(_impl_.max_braking_acceleration_)*/0
  , /*decltype(_impl_.usual_acceleration_)*/0
  , /*decltype(_impl_.usual_braking_acceleration_)*/0
  , /*decltype(_impl_.lane_change_length_)*/0
  , /*decltype(_impl_.min_gap_)*/0
  , /*decltype(_impl_.headway_)*/0
  , /*decltype(_impl_.lane_max_speed_recognition_deviation_)*/0} {}
struct VehicleAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleAttributeDefaultTypeInternal() {}
  union {
    VehicleAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleAttributeDefaultTypeInternal _VehicleAttribute_default_instance_;
PROTOBUF_CONSTEXPR BusAttribute::BusAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subline_id_)*/0
  , /*decltype(_impl_.capacity_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BusAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BusAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BusAttributeDefaultTypeInternal() {}
  union {
    BusAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BusAttributeDefaultTypeInternal _BusAttribute_default_instance_;
PROTOBUF_CONSTEXPR PedestrianAttribute::PedestrianAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.speed_)*/0} {}
struct PedestrianAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PedestrianAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PedestrianAttributeDefaultTypeInternal() {}
  union {
    PedestrianAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PedestrianAttributeDefaultTypeInternal _PedestrianAttribute_default_instance_;
PROTOBUF_CONSTEXPR BikeAttribute::BikeAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.speed_)*/0} {}
struct BikeAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BikeAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BikeAttributeDefaultTypeInternal() {}
  union {
    BikeAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BikeAttributeDefaultTypeInternal _BikeAttribute_default_instance_;
PROTOBUF_CONSTEXPR PersonProfile::PersonProfile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.age_)*/0
  , /*decltype(_impl_.education_)*/0
  , /*decltype(_impl_.gender_)*/0
  , /*decltype(_impl_.consumption_)*/0
  , /*decltype(_impl_.house_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PersonProfileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PersonProfileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PersonProfileDefaultTypeInternal() {}
  union {
    PersonProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PersonProfileDefaultTypeInternal _PersonProfile_default_instance_;
PROTOBUF_CONSTEXPR Person_LabelsEntry_DoNotUse::Person_LabelsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Person_LabelsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Person_LabelsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Person_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Person_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Person_LabelsEntry_DoNotUseDefaultTypeInternal _Person_LabelsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Person::Person(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.schedules_)*/{}
  , /*decltype(_impl_.labels_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.attribute_)*/nullptr
  , /*decltype(_impl_.home_)*/nullptr
  , /*decltype(_impl_.vehicle_attribute_)*/nullptr
  , /*decltype(_impl_.bus_attribute_)*/nullptr
  , /*decltype(_impl_.bike_attribute_)*/nullptr
  , /*decltype(_impl_.profile_)*/nullptr
  , /*decltype(_impl_.pedestrian_attribute_)*/nullptr
  , /*decltype(_impl_.work_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.output_when_sleep_)*/false
  , /*decltype(_impl_.type_)*/0} {}
struct PersonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PersonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PersonDefaultTypeInternal() {}
  union {
    Person _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PersonDefaultTypeInternal _Person_default_instance_;
PROTOBUF_CONSTEXPR Persons::Persons(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.persons_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PersonsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PersonsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PersonsDefaultTypeInternal() {}
  union {
    Persons _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PersonsDefaultTypeInternal _Persons_default_instance_;
}  // namespace v2
}  // namespace person
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fperson_2fv2_2fperson_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_city_2fperson_2fv2_2fperson_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fperson_2fv2_2fperson_2eproto = nullptr;

const uint32_t TableStruct_city_2fperson_2fv2_2fperson_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PersonAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleEngineEfficiency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleEngineEfficiency, _impl_.energy_conversion_efficiency_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleEngineEfficiency, _impl_.c_ef_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::EmissionAttribute, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::EmissionAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::EmissionAttribute, _impl_.weight_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::EmissionAttribute, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::EmissionAttribute, _impl_.coefficient_drag_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::EmissionAttribute, _impl_.lambda_s_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::EmissionAttribute, _impl_.frontal_area_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::EmissionAttribute, _impl_.fuel_efficiency_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::EmissionAttribute, _impl_.electric_efficiency_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleAttribute, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleAttribute, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleAttribute, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleAttribute, _impl_.max_speed_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleAttribute, _impl_.max_acceleration_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleAttribute, _impl_.max_braking_acceleration_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleAttribute, _impl_.usual_acceleration_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleAttribute, _impl_.usual_braking_acceleration_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleAttribute, _impl_.lane_change_length_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleAttribute, _impl_.min_gap_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleAttribute, _impl_.headway_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleAttribute, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleAttribute, _impl_.lane_max_speed_recognition_deviation_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::VehicleAttribute, _impl_.emission_attribute_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::BusAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::BusAttribute, _impl_.subline_id_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::BusAttribute, _impl_.capacity_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::BusAttribute, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PedestrianAttribute, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PedestrianAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PedestrianAttribute, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PedestrianAttribute, _impl_.model_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::city::person::v2::BikeAttribute, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::BikeAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::BikeAttribute, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::BikeAttribute, _impl_.model_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PersonProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PersonProfile, _impl_.age_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PersonProfile, _impl_.education_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PersonProfile, _impl_.gender_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PersonProfile, _impl_.consumption_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::PersonProfile, _impl_.house_id_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person, _impl_.attribute_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person, _impl_.home_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person, _impl_.schedules_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person, _impl_.vehicle_attribute_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person, _impl_.bus_attribute_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person, _impl_.pedestrian_attribute_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person, _impl_.bike_attribute_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person, _impl_.labels_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person, _impl_.profile_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person, _impl_.work_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person, _impl_.output_when_sleep_),
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Person, _impl_.type_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  4,
  2,
  ~0u,
  3,
  5,
  6,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Persons, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v2::Persons, _impl_.persons_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::person::v2::PersonAttribute)},
  { 6, -1, -1, sizeof(::city::person::v2::VehicleEngineEfficiency)},
  { 14, 27, -1, sizeof(::city::person::v2::EmissionAttribute)},
  { 34, 53, -1, sizeof(::city::person::v2::VehicleAttribute)},
  { 66, -1, -1, sizeof(::city::person::v2::BusAttribute)},
  { 75, 83, -1, sizeof(::city::person::v2::PedestrianAttribute)},
  { 85, 93, -1, sizeof(::city::person::v2::BikeAttribute)},
  { 95, -1, -1, sizeof(::city::person::v2::PersonProfile)},
  { 106, 114, -1, sizeof(::city::person::v2::Person_LabelsEntry_DoNotUse)},
  { 116, 135, -1, sizeof(::city::person::v2::Person)},
  { 148, -1, -1, sizeof(::city::person::v2::Persons)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::person::v2::_PersonAttribute_default_instance_._instance,
  &::city::person::v2::_VehicleEngineEfficiency_default_instance_._instance,
  &::city::person::v2::_EmissionAttribute_default_instance_._instance,
  &::city::person::v2::_VehicleAttribute_default_instance_._instance,
  &::city::person::v2::_BusAttribute_default_instance_._instance,
  &::city::person::v2::_PedestrianAttribute_default_instance_._instance,
  &::city::person::v2::_BikeAttribute_default_instance_._instance,
  &::city::person::v2::_PersonProfile_default_instance_._instance,
  &::city::person::v2::_Person_LabelsEntry_DoNotUse_default_instance_._instance,
  &::city::person::v2::_Person_default_instance_._instance,
  &::city::person::v2::_Persons_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fperson_2fv2_2fperson_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033city/person/v2/person.proto\022\016city.pers"
  "on.v2\032\025city/geo/v2/geo.proto\032\027city/trip/"
  "v2/trip.proto\"\021\n\017PersonAttribute\"n\n\027Vehi"
  "cleEngineEfficiency\022@\n\034energy_conversion"
  "_efficiency\030\001 \001(\001R\032energyConversionEffic"
  "iency\022\021\n\004c_ef\030\002 \001(\001R\003cEf\"\255\003\n\021EmissionAtt"
  "ribute\022\026\n\006weight\030\001 \001(\001R\006weight\0225\n\004type\030\002"
  " \001(\0162!.city.person.v2.VehicleEngineTypeR"
  "\004type\022)\n\020coefficient_drag\030\003 \001(\001R\017coeffic"
  "ientDrag\022\031\n\010lambda_s\030\004 \001(\001R\007lambdaS\022!\n\014f"
  "rontal_area\030\005 \001(\001R\013frontalArea\022U\n\017fuel_e"
  "fficiency\030\006 \001(\0132\'.city.person.v2.Vehicle"
  "EngineEfficiencyH\000R\016fuelEfficiency\210\001\001\022]\n"
  "\023electric_efficiency\030\007 \001(\0132\'.city.person"
  ".v2.VehicleEngineEfficiencyH\001R\022electricE"
  "fficiency\210\001\001B\022\n\020_fuel_efficiencyB\026\n\024_ele"
  "ctric_efficiency\"\327\004\n\020VehicleAttribute\022\026\n"
  "\006length\030\001 \001(\001R\006length\022\024\n\005width\030\002 \001(\001R\005wi"
  "dth\022\033\n\tmax_speed\030\003 \001(\001R\010maxSpeed\022)\n\020max_"
  "acceleration\030\004 \001(\001R\017maxAcceleration\0228\n\030m"
  "ax_braking_acceleration\030\005 \001(\001R\026maxBrakin"
  "gAcceleration\022-\n\022usual_acceleration\030\006 \001("
  "\001R\021usualAcceleration\022<\n\032usual_braking_ac"
  "celeration\030\007 \001(\001R\030usualBrakingAccelerati"
  "on\022,\n\022lane_change_length\030\010 \001(\001R\020laneChan"
  "geLength\022\027\n\007min_gap\030\t \001(\001R\006minGap\022\030\n\007hea"
  "dway\030\n \001(\001R\007headway\022\031\n\005model\030\013 \001(\tH\000R\005mo"
  "del\210\001\001\022N\n$lane_max_speed_recognition_dev"
  "iation\030\014 \001(\001R laneMaxSpeedRecognitionDev"
  "iation\022P\n\022emission_attribute\030\r \001(\0132!.cit"
  "y.person.v2.EmissionAttributeR\021emissionA"
  "ttributeB\010\n\006_model\"v\n\014BusAttribute\022\035\n\nsu"
  "bline_id\030\001 \001(\005R\tsublineId\022\032\n\010capacity\030\002 "
  "\001(\005R\010capacity\022+\n\004type\030\005 \001(\0162\027.city.perso"
  "n.v2.BusTypeR\004type\"P\n\023PedestrianAttribut"
  "e\022\024\n\005speed\030\001 \001(\001R\005speed\022\031\n\005model\030\002 \001(\tH\000"
  "R\005model\210\001\001B\010\n\006_model\"J\n\rBikeAttribute\022\024\n"
  "\005speed\030\001 \001(\001R\005speed\022\031\n\005model\030\002 \001(\tH\000R\005mo"
  "del\210\001\001B\010\n\006_model\"\344\001\n\rPersonProfile\022\020\n\003ag"
  "e\030\001 \001(\005R\003age\0227\n\teducation\030\002 \001(\0162\031.city.p"
  "erson.v2.EducationR\teducation\022.\n\006gender\030"
  "\003 \001(\0162\026.city.person.v2.GenderR\006gender\022=\n"
  "\013consumption\030\004 \001(\0162\033.city.person.v2.Cons"
  "umptionR\013consumption\022\031\n\010house_id\030\005 \001(\005R\007"
  "houseId\"\301\007\n\006Person\022\016\n\002id\030\001 \001(\005R\002id\022=\n\tat"
  "tribute\030\002 \001(\0132\037.city.person.v2.PersonAtt"
  "ributeR\tattribute\022)\n\004home\030\003 \001(\0132\025.city.g"
  "eo.v2.PositionR\004home\0224\n\tschedules\030\004 \003(\0132"
  "\026.city.trip.v2.ScheduleR\tschedules\022R\n\021ve"
  "hicle_attribute\030\007 \001(\0132 .city.person.v2.V"
  "ehicleAttributeH\000R\020vehicleAttribute\210\001\001\022F"
  "\n\rbus_attribute\030\010 \001(\0132\034.city.person.v2.B"
  "usAttributeH\001R\014busAttribute\210\001\001\022[\n\024pedest"
  "rian_attribute\030\014 \001(\0132#.city.person.v2.Pe"
  "destrianAttributeH\002R\023pedestrianAttribute"
  "\210\001\001\022I\n\016bike_attribute\030\t \001(\0132\035.city.perso"
  "n.v2.BikeAttributeH\003R\rbikeAttribute\210\001\001\022:"
  "\n\006labels\030\n \003(\0132\".city.person.v2.Person.L"
  "abelsEntryR\006labels\022<\n\007profile\030\013 \001(\0132\035.ci"
  "ty.person.v2.PersonProfileH\004R\007profile\210\001\001"
  "\022.\n\004work\030\r \001(\0132\025.city.geo.v2.PositionH\005R"
  "\004work\210\001\001\022/\n\021output_when_sleep\030\016 \001(\010H\006R\017o"
  "utputWhenSleep\210\001\001\022.\n\004type\030\017 \001(\0162\032.city.p"
  "erson.v2.PersonTypeR\004type\0329\n\013LabelsEntry"
  "\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value"
  ":\0028\001B\024\n\022_vehicle_attributeB\020\n\016_bus_attri"
  "buteB\027\n\025_pedestrian_attributeB\021\n\017_bike_a"
  "ttributeB\n\n\010_profileB\007\n\005_workB\024\n\022_output"
  "_when_sleep\";\n\007Persons\0220\n\007persons\030\001 \003(\0132"
  "\026.city.person.v2.PersonR\007persons*\230\001\n\021Veh"
  "icleEngineType\022#\n\037VEHICLE_ENGINE_TYPE_UN"
  "SPECIFIED\020\000\022\034\n\030VEHICLE_ENGINE_TYPE_FUEL\020"
  "\001\022 \n\034VEHICLE_ENGINE_TYPE_ELECTRIC\020\002\022\036\n\032V"
  "EHICLE_ENGINE_TYPE_HYBRID\020\003*J\n\007BusType\022\030"
  "\n\024BUS_TYPE_UNSPECIFIED\020\000\022\020\n\014BUS_TYPE_BUS"
  "\020\001\022\023\n\017BUS_TYPE_SUBWAY\020\002*\334\001\n\tEducation\022\031\n"
  "\025EDUCATION_UNSPECIFIED\020\000\022\024\n\020EDUCATION_DO"
  "CTOR\020\001\022\024\n\020EDUCATION_MASTER\020\002\022\026\n\022EDUCATIO"
  "N_BACHELOR\020\003\022\031\n\025EDUCATION_HIGH_SCHOOL\020\004\022"
  " \n\034EDUCATION_JUNIOR_HIGH_SCHOOL\020\005\022\034\n\030EDU"
  "CATION_PRIMARY_SCHOOL\020\006\022\025\n\021EDUCATION_COL"
  "LEGE\020\007*D\n\006Gender\022\026\n\022GENDER_UNSPECIFIED\020\000"
  "\022\017\n\013GENDER_MALE\020\001\022\021\n\rGENDER_FEMALE\020\002*\256\001\n"
  "\013Consumption\022\033\n\027CONSUMPTION_UNSPECIFIED\020"
  "\000\022\023\n\017CONSUMPTION_LOW\020\001\022\036\n\032CONSUMPTION_RE"
  "LATIVELY_LOW\020\002\022\026\n\022CONSUMPTION_MEDIUM\020\003\022\037"
  "\n\033CONSUMPTION_RELATIVELY_HIGH\020\004\022\024\n\020CONSU"
  "MPTION_HIGH\020\005*W\n\nPersonType\022\033\n\027PERSON_TY"
  "PE_UNSPECIFIED\020\000\022\024\n\020PERSON_TYPE_TAXI\020\001\022\026"
  "\n\022PERSON_TYPE_NORMAL\020\002B\264\001\n\022com.city.pers"
  "on.v2B\013PersonProtoP\001Z7git.fiblab.net/sim"
  "/protos/v2/go/city/person/v2;personv2\242\002\003"
  "CPX\252\002\016City.Person.V2\312\002\016City\\Person\\V2\342\002\032"
  "City\\Person\\V2\\GPBMetadata\352\002\020City::Perso"
  "n::V2b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_city_2fperson_2fv2_2fperson_2eproto_deps[2] = {
  &::descriptor_table_city_2fgeo_2fv2_2fgeo_2eproto,
  &::descriptor_table_city_2ftrip_2fv2_2ftrip_2eproto,
};
static ::_pbi::once_flag descriptor_table_city_2fperson_2fv2_2fperson_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fperson_2fv2_2fperson_2eproto = {
    false, false, 3773, descriptor_table_protodef_city_2fperson_2fv2_2fperson_2eproto,
    "city/person/v2/person.proto",
    &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_once, descriptor_table_city_2fperson_2fv2_2fperson_2eproto_deps, 2, 11,
    schemas, file_default_instances, TableStruct_city_2fperson_2fv2_2fperson_2eproto::offsets,
    file_level_metadata_city_2fperson_2fv2_2fperson_2eproto, file_level_enum_descriptors_city_2fperson_2fv2_2fperson_2eproto,
    file_level_service_descriptors_city_2fperson_2fv2_2fperson_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fperson_2fv2_2fperson_2eproto_getter() {
  return &descriptor_table_city_2fperson_2fv2_2fperson_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fperson_2fv2_2fperson_2eproto(&descriptor_table_city_2fperson_2fv2_2fperson_2eproto);
namespace city {
namespace person {
namespace v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleEngineType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fperson_2fv2_2fperson_2eproto);
  return file_level_enum_descriptors_city_2fperson_2fv2_2fperson_2eproto[0];
}
bool VehicleEngineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BusType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fperson_2fv2_2fperson_2eproto);
  return file_level_enum_descriptors_city_2fperson_2fv2_2fperson_2eproto[1];
}
bool BusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Education_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fperson_2fv2_2fperson_2eproto);
  return file_level_enum_descriptors_city_2fperson_2fv2_2fperson_2eproto[2];
}
bool Education_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fperson_2fv2_2fperson_2eproto);
  return file_level_enum_descriptors_city_2fperson_2fv2_2fperson_2eproto[3];
}
bool Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Consumption_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fperson_2fv2_2fperson_2eproto);
  return file_level_enum_descriptors_city_2fperson_2fv2_2fperson_2eproto[4];
}
bool Consumption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PersonType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fperson_2fv2_2fperson_2eproto);
  return file_level_enum_descriptors_city_2fperson_2fv2_2fperson_2eproto[5];
}
bool PersonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PersonAttribute::_Internal {
 public:
};

PersonAttribute::PersonAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.person.v2.PersonAttribute)
}
PersonAttribute::PersonAttribute(const PersonAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PersonAttribute* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.person.v2.PersonAttribute)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PersonAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PersonAttribute::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PersonAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_getter, &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_once,
      file_level_metadata_city_2fperson_2fv2_2fperson_2eproto[0]);
}

// ===================================================================

class VehicleEngineEfficiency::_Internal {
 public:
};

VehicleEngineEfficiency::VehicleEngineEfficiency(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v2.VehicleEngineEfficiency)
}
VehicleEngineEfficiency::VehicleEngineEfficiency(const VehicleEngineEfficiency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleEngineEfficiency* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.energy_conversion_efficiency_){}
    , decltype(_impl_.c_ef_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.energy_conversion_efficiency_, &from._impl_.energy_conversion_efficiency_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.c_ef_) -
    reinterpret_cast<char*>(&_impl_.energy_conversion_efficiency_)) + sizeof(_impl_.c_ef_));
  // @@protoc_insertion_point(copy_constructor:city.person.v2.VehicleEngineEfficiency)
}

inline void VehicleEngineEfficiency::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.energy_conversion_efficiency_){0}
    , decltype(_impl_.c_ef_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VehicleEngineEfficiency::~VehicleEngineEfficiency() {
  // @@protoc_insertion_point(destructor:city.person.v2.VehicleEngineEfficiency)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleEngineEfficiency::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VehicleEngineEfficiency::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleEngineEfficiency::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v2.VehicleEngineEfficiency)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.energy_conversion_efficiency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.c_ef_) -
      reinterpret_cast<char*>(&_impl_.energy_conversion_efficiency_)) + sizeof(_impl_.c_ef_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleEngineEfficiency::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double energy_conversion_efficiency = 1 [json_name = "energyConversionEfficiency"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.energy_conversion_efficiency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double c_ef = 2 [json_name = "cEf"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.c_ef_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleEngineEfficiency::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v2.VehicleEngineEfficiency)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double energy_conversion_efficiency = 1 [json_name = "energyConversionEfficiency"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_energy_conversion_efficiency = this->_internal_energy_conversion_efficiency();
  uint64_t raw_energy_conversion_efficiency;
  memcpy(&raw_energy_conversion_efficiency, &tmp_energy_conversion_efficiency, sizeof(tmp_energy_conversion_efficiency));
  if (raw_energy_conversion_efficiency != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_energy_conversion_efficiency(), target);
  }

  // double c_ef = 2 [json_name = "cEf"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_c_ef = this->_internal_c_ef();
  uint64_t raw_c_ef;
  memcpy(&raw_c_ef, &tmp_c_ef, sizeof(tmp_c_ef));
  if (raw_c_ef != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_c_ef(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v2.VehicleEngineEfficiency)
  return target;
}

size_t VehicleEngineEfficiency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v2.VehicleEngineEfficiency)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double energy_conversion_efficiency = 1 [json_name = "energyConversionEfficiency"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_energy_conversion_efficiency = this->_internal_energy_conversion_efficiency();
  uint64_t raw_energy_conversion_efficiency;
  memcpy(&raw_energy_conversion_efficiency, &tmp_energy_conversion_efficiency, sizeof(tmp_energy_conversion_efficiency));
  if (raw_energy_conversion_efficiency != 0) {
    total_size += 1 + 8;
  }

  // double c_ef = 2 [json_name = "cEf"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_c_ef = this->_internal_c_ef();
  uint64_t raw_c_ef;
  memcpy(&raw_c_ef, &tmp_c_ef, sizeof(tmp_c_ef));
  if (raw_c_ef != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleEngineEfficiency::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleEngineEfficiency::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleEngineEfficiency::GetClassData() const { return &_class_data_; }


void VehicleEngineEfficiency::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleEngineEfficiency*>(&to_msg);
  auto& from = static_cast<const VehicleEngineEfficiency&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v2.VehicleEngineEfficiency)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_energy_conversion_efficiency = from._internal_energy_conversion_efficiency();
  uint64_t raw_energy_conversion_efficiency;
  memcpy(&raw_energy_conversion_efficiency, &tmp_energy_conversion_efficiency, sizeof(tmp_energy_conversion_efficiency));
  if (raw_energy_conversion_efficiency != 0) {
    _this->_internal_set_energy_conversion_efficiency(from._internal_energy_conversion_efficiency());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_c_ef = from._internal_c_ef();
  uint64_t raw_c_ef;
  memcpy(&raw_c_ef, &tmp_c_ef, sizeof(tmp_c_ef));
  if (raw_c_ef != 0) {
    _this->_internal_set_c_ef(from._internal_c_ef());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleEngineEfficiency::CopyFrom(const VehicleEngineEfficiency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v2.VehicleEngineEfficiency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleEngineEfficiency::IsInitialized() const {
  return true;
}

void VehicleEngineEfficiency::InternalSwap(VehicleEngineEfficiency* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleEngineEfficiency, _impl_.c_ef_)
      + sizeof(VehicleEngineEfficiency::_impl_.c_ef_)
      - PROTOBUF_FIELD_OFFSET(VehicleEngineEfficiency, _impl_.energy_conversion_efficiency_)>(
          reinterpret_cast<char*>(&_impl_.energy_conversion_efficiency_),
          reinterpret_cast<char*>(&other->_impl_.energy_conversion_efficiency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleEngineEfficiency::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_getter, &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_once,
      file_level_metadata_city_2fperson_2fv2_2fperson_2eproto[1]);
}

// ===================================================================

class EmissionAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<EmissionAttribute>()._impl_._has_bits_);
  static const ::city::person::v2::VehicleEngineEfficiency& fuel_efficiency(const EmissionAttribute* msg);
  static void set_has_fuel_efficiency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::city::person::v2::VehicleEngineEfficiency& electric_efficiency(const EmissionAttribute* msg);
  static void set_has_electric_efficiency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::city::person::v2::VehicleEngineEfficiency&
EmissionAttribute::_Internal::fuel_efficiency(const EmissionAttribute* msg) {
  return *msg->_impl_.fuel_efficiency_;
}
const ::city::person::v2::VehicleEngineEfficiency&
EmissionAttribute::_Internal::electric_efficiency(const EmissionAttribute* msg) {
  return *msg->_impl_.electric_efficiency_;
}
EmissionAttribute::EmissionAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v2.EmissionAttribute)
}
EmissionAttribute::EmissionAttribute(const EmissionAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EmissionAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fuel_efficiency_){nullptr}
    , decltype(_impl_.electric_efficiency_){nullptr}
    , decltype(_impl_.weight_){}
    , decltype(_impl_.coefficient_drag_){}
    , decltype(_impl_.lambda_s_){}
    , decltype(_impl_.frontal_area_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fuel_efficiency()) {
    _this->_impl_.fuel_efficiency_ = new ::city::person::v2::VehicleEngineEfficiency(*from._impl_.fuel_efficiency_);
  }
  if (from._internal_has_electric_efficiency()) {
    _this->_impl_.electric_efficiency_ = new ::city::person::v2::VehicleEngineEfficiency(*from._impl_.electric_efficiency_);
  }
  ::memcpy(&_impl_.weight_, &from._impl_.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.weight_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:city.person.v2.EmissionAttribute)
}

inline void EmissionAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fuel_efficiency_){nullptr}
    , decltype(_impl_.electric_efficiency_){nullptr}
    , decltype(_impl_.weight_){0}
    , decltype(_impl_.coefficient_drag_){0}
    , decltype(_impl_.lambda_s_){0}
    , decltype(_impl_.frontal_area_){0}
    , decltype(_impl_.type_){0}
  };
}

EmissionAttribute::~EmissionAttribute() {
  // @@protoc_insertion_point(destructor:city.person.v2.EmissionAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EmissionAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fuel_efficiency_;
  if (this != internal_default_instance()) delete _impl_.electric_efficiency_;
}

void EmissionAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EmissionAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v2.EmissionAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.fuel_efficiency_ != nullptr);
      _impl_.fuel_efficiency_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.electric_efficiency_ != nullptr);
      _impl_.electric_efficiency_->Clear();
    }
  }
  ::memset(&_impl_.weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.weight_)) + sizeof(_impl_.type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EmissionAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double weight = 1 [json_name = "weight"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .city.person.v2.VehicleEngineType type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::city::person::v2::VehicleEngineType>(val));
        } else
          goto handle_unusual;
        continue;
      // double coefficient_drag = 3 [json_name = "coefficientDrag"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.coefficient_drag_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lambda_s = 4 [json_name = "lambdaS"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.lambda_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double frontal_area = 5 [json_name = "frontalArea"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.frontal_area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .city.person.v2.VehicleEngineEfficiency fuel_efficiency = 6 [json_name = "fuelEfficiency"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fuel_efficiency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .city.person.v2.VehicleEngineEfficiency electric_efficiency = 7 [json_name = "electricEfficiency"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_electric_efficiency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EmissionAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v2.EmissionAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double weight = 1 [json_name = "weight"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight(), target);
  }

  // .city.person.v2.VehicleEngineType type = 2 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // double coefficient_drag = 3 [json_name = "coefficientDrag"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_coefficient_drag = this->_internal_coefficient_drag();
  uint64_t raw_coefficient_drag;
  memcpy(&raw_coefficient_drag, &tmp_coefficient_drag, sizeof(tmp_coefficient_drag));
  if (raw_coefficient_drag != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_coefficient_drag(), target);
  }

  // double lambda_s = 4 [json_name = "lambdaS"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lambda_s = this->_internal_lambda_s();
  uint64_t raw_lambda_s;
  memcpy(&raw_lambda_s, &tmp_lambda_s, sizeof(tmp_lambda_s));
  if (raw_lambda_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_lambda_s(), target);
  }

  // double frontal_area = 5 [json_name = "frontalArea"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_frontal_area = this->_internal_frontal_area();
  uint64_t raw_frontal_area;
  memcpy(&raw_frontal_area, &tmp_frontal_area, sizeof(tmp_frontal_area));
  if (raw_frontal_area != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_frontal_area(), target);
  }

  // optional .city.person.v2.VehicleEngineEfficiency fuel_efficiency = 6 [json_name = "fuelEfficiency"];
  if (_internal_has_fuel_efficiency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::fuel_efficiency(this),
        _Internal::fuel_efficiency(this).GetCachedSize(), target, stream);
  }

  // optional .city.person.v2.VehicleEngineEfficiency electric_efficiency = 7 [json_name = "electricEfficiency"];
  if (_internal_has_electric_efficiency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::electric_efficiency(this),
        _Internal::electric_efficiency(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v2.EmissionAttribute)
  return target;
}

size_t EmissionAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v2.EmissionAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .city.person.v2.VehicleEngineEfficiency fuel_efficiency = 6 [json_name = "fuelEfficiency"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fuel_efficiency_);
    }

    // optional .city.person.v2.VehicleEngineEfficiency electric_efficiency = 7 [json_name = "electricEfficiency"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.electric_efficiency_);
    }

  }
  // double weight = 1 [json_name = "weight"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  // double coefficient_drag = 3 [json_name = "coefficientDrag"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_coefficient_drag = this->_internal_coefficient_drag();
  uint64_t raw_coefficient_drag;
  memcpy(&raw_coefficient_drag, &tmp_coefficient_drag, sizeof(tmp_coefficient_drag));
  if (raw_coefficient_drag != 0) {
    total_size += 1 + 8;
  }

  // double lambda_s = 4 [json_name = "lambdaS"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lambda_s = this->_internal_lambda_s();
  uint64_t raw_lambda_s;
  memcpy(&raw_lambda_s, &tmp_lambda_s, sizeof(tmp_lambda_s));
  if (raw_lambda_s != 0) {
    total_size += 1 + 8;
  }

  // double frontal_area = 5 [json_name = "frontalArea"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_frontal_area = this->_internal_frontal_area();
  uint64_t raw_frontal_area;
  memcpy(&raw_frontal_area, &tmp_frontal_area, sizeof(tmp_frontal_area));
  if (raw_frontal_area != 0) {
    total_size += 1 + 8;
  }

  // .city.person.v2.VehicleEngineType type = 2 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EmissionAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EmissionAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EmissionAttribute::GetClassData() const { return &_class_data_; }


void EmissionAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EmissionAttribute*>(&to_msg);
  auto& from = static_cast<const EmissionAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v2.EmissionAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_fuel_efficiency()->::city::person::v2::VehicleEngineEfficiency::MergeFrom(
          from._internal_fuel_efficiency());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_electric_efficiency()->::city::person::v2::VehicleEngineEfficiency::MergeFrom(
          from._internal_electric_efficiency());
    }
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_coefficient_drag = from._internal_coefficient_drag();
  uint64_t raw_coefficient_drag;
  memcpy(&raw_coefficient_drag, &tmp_coefficient_drag, sizeof(tmp_coefficient_drag));
  if (raw_coefficient_drag != 0) {
    _this->_internal_set_coefficient_drag(from._internal_coefficient_drag());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lambda_s = from._internal_lambda_s();
  uint64_t raw_lambda_s;
  memcpy(&raw_lambda_s, &tmp_lambda_s, sizeof(tmp_lambda_s));
  if (raw_lambda_s != 0) {
    _this->_internal_set_lambda_s(from._internal_lambda_s());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_frontal_area = from._internal_frontal_area();
  uint64_t raw_frontal_area;
  memcpy(&raw_frontal_area, &tmp_frontal_area, sizeof(tmp_frontal_area));
  if (raw_frontal_area != 0) {
    _this->_internal_set_frontal_area(from._internal_frontal_area());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EmissionAttribute::CopyFrom(const EmissionAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v2.EmissionAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmissionAttribute::IsInitialized() const {
  return true;
}

void EmissionAttribute::InternalSwap(EmissionAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EmissionAttribute, _impl_.type_)
      + sizeof(EmissionAttribute::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(EmissionAttribute, _impl_.fuel_efficiency_)>(
          reinterpret_cast<char*>(&_impl_.fuel_efficiency_),
          reinterpret_cast<char*>(&other->_impl_.fuel_efficiency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EmissionAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_getter, &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_once,
      file_level_metadata_city_2fperson_2fv2_2fperson_2eproto[2]);
}

// ===================================================================

class VehicleAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleAttribute>()._impl_._has_bits_);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::city::person::v2::EmissionAttribute& emission_attribute(const VehicleAttribute* msg);
};

const ::city::person::v2::EmissionAttribute&
VehicleAttribute::_Internal::emission_attribute(const VehicleAttribute* msg) {
  return *msg->_impl_.emission_attribute_;
}
VehicleAttribute::VehicleAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v2.VehicleAttribute)
}
VehicleAttribute::VehicleAttribute(const VehicleAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_){}
    , decltype(_impl_.emission_attribute_){nullptr}
    , decltype(_impl_.length_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.max_speed_){}
    , decltype(_impl_.max_acceleration_){}
    , decltype(_impl_.max_braking_acceleration_){}
    , decltype(_impl_.usual_acceleration_){}
    , decltype(_impl_.usual_braking_acceleration_){}
    , decltype(_impl_.lane_change_length_){}
    , decltype(_impl_.min_gap_){}
    , decltype(_impl_.headway_){}
    , decltype(_impl_.lane_max_speed_recognition_deviation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_emission_attribute()) {
    _this->_impl_.emission_attribute_ = new ::city::person::v2::EmissionAttribute(*from._impl_.emission_attribute_);
  }
  ::memcpy(&_impl_.length_, &from._impl_.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lane_max_speed_recognition_deviation_) -
    reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.lane_max_speed_recognition_deviation_));
  // @@protoc_insertion_point(copy_constructor:city.person.v2.VehicleAttribute)
}

inline void VehicleAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_){}
    , decltype(_impl_.emission_attribute_){nullptr}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.max_speed_){0}
    , decltype(_impl_.max_acceleration_){0}
    , decltype(_impl_.max_braking_acceleration_){0}
    , decltype(_impl_.usual_acceleration_){0}
    , decltype(_impl_.usual_braking_acceleration_){0}
    , decltype(_impl_.lane_change_length_){0}
    , decltype(_impl_.min_gap_){0}
    , decltype(_impl_.headway_){0}
    , decltype(_impl_.lane_max_speed_recognition_deviation_){0}
  };
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VehicleAttribute::~VehicleAttribute() {
  // @@protoc_insertion_point(destructor:city.person.v2.VehicleAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_.Destroy();
  if (this != internal_default_instance()) delete _impl_.emission_attribute_;
}

void VehicleAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v2.VehicleAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.model_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.emission_attribute_ != nullptr) {
    delete _impl_.emission_attribute_;
  }
  _impl_.emission_attribute_ = nullptr;
  ::memset(&_impl_.length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lane_max_speed_recognition_deviation_) -
      reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.lane_max_speed_recognition_deviation_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double length = 1 [json_name = "length"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double width = 2 [json_name = "width"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_speed = 3 [json_name = "maxSpeed"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_acceleration = 4 [json_name = "maxAcceleration"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.max_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_braking_acceleration = 5 [json_name = "maxBrakingAcceleration"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.max_braking_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double usual_acceleration = 6 [json_name = "usualAcceleration"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.usual_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double usual_braking_acceleration = 7 [json_name = "usualBrakingAcceleration"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.usual_braking_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lane_change_length = 8 [json_name = "laneChangeLength"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.lane_change_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double min_gap = 9 [json_name = "minGap"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.min_gap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double headway = 10 [json_name = "headway"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.headway_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string model = 11 [json_name = "model"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "city.person.v2.VehicleAttribute.model"));
        } else
          goto handle_unusual;
        continue;
      // double lane_max_speed_recognition_deviation = 12 [json_name = "laneMaxSpeedRecognitionDeviation"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.lane_max_speed_recognition_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .city.person.v2.EmissionAttribute emission_attribute = 13 [json_name = "emissionAttribute"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_emission_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v2.VehicleAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double length = 1 [json_name = "length"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_length(), target);
  }

  // double width = 2 [json_name = "width"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_width(), target);
  }

  // double max_speed = 3 [json_name = "maxSpeed"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_speed = this->_internal_max_speed();
  uint64_t raw_max_speed;
  memcpy(&raw_max_speed, &tmp_max_speed, sizeof(tmp_max_speed));
  if (raw_max_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_speed(), target);
  }

  // double max_acceleration = 4 [json_name = "maxAcceleration"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_acceleration = this->_internal_max_acceleration();
  uint64_t raw_max_acceleration;
  memcpy(&raw_max_acceleration, &tmp_max_acceleration, sizeof(tmp_max_acceleration));
  if (raw_max_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_max_acceleration(), target);
  }

  // double max_braking_acceleration = 5 [json_name = "maxBrakingAcceleration"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_braking_acceleration = this->_internal_max_braking_acceleration();
  uint64_t raw_max_braking_acceleration;
  memcpy(&raw_max_braking_acceleration, &tmp_max_braking_acceleration, sizeof(tmp_max_braking_acceleration));
  if (raw_max_braking_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_braking_acceleration(), target);
  }

  // double usual_acceleration = 6 [json_name = "usualAcceleration"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_usual_acceleration = this->_internal_usual_acceleration();
  uint64_t raw_usual_acceleration;
  memcpy(&raw_usual_acceleration, &tmp_usual_acceleration, sizeof(tmp_usual_acceleration));
  if (raw_usual_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_usual_acceleration(), target);
  }

  // double usual_braking_acceleration = 7 [json_name = "usualBrakingAcceleration"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_usual_braking_acceleration = this->_internal_usual_braking_acceleration();
  uint64_t raw_usual_braking_acceleration;
  memcpy(&raw_usual_braking_acceleration, &tmp_usual_braking_acceleration, sizeof(tmp_usual_braking_acceleration));
  if (raw_usual_braking_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_usual_braking_acceleration(), target);
  }

  // double lane_change_length = 8 [json_name = "laneChangeLength"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lane_change_length = this->_internal_lane_change_length();
  uint64_t raw_lane_change_length;
  memcpy(&raw_lane_change_length, &tmp_lane_change_length, sizeof(tmp_lane_change_length));
  if (raw_lane_change_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_lane_change_length(), target);
  }

  // double min_gap = 9 [json_name = "minGap"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_gap = this->_internal_min_gap();
  uint64_t raw_min_gap;
  memcpy(&raw_min_gap, &tmp_min_gap, sizeof(tmp_min_gap));
  if (raw_min_gap != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_min_gap(), target);
  }

  // double headway = 10 [json_name = "headway"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_headway = this->_internal_headway();
  uint64_t raw_headway;
  memcpy(&raw_headway, &tmp_headway, sizeof(tmp_headway));
  if (raw_headway != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_headway(), target);
  }

  // optional string model = 11 [json_name = "model"];
  if (_internal_has_model()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "city.person.v2.VehicleAttribute.model");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_model(), target);
  }

  // double lane_max_speed_recognition_deviation = 12 [json_name = "laneMaxSpeedRecognitionDeviation"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lane_max_speed_recognition_deviation = this->_internal_lane_max_speed_recognition_deviation();
  uint64_t raw_lane_max_speed_recognition_deviation;
  memcpy(&raw_lane_max_speed_recognition_deviation, &tmp_lane_max_speed_recognition_deviation, sizeof(tmp_lane_max_speed_recognition_deviation));
  if (raw_lane_max_speed_recognition_deviation != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_lane_max_speed_recognition_deviation(), target);
  }

  // .city.person.v2.EmissionAttribute emission_attribute = 13 [json_name = "emissionAttribute"];
  if (this->_internal_has_emission_attribute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::emission_attribute(this),
        _Internal::emission_attribute(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v2.VehicleAttribute)
  return target;
}

size_t VehicleAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v2.VehicleAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string model = 11 [json_name = "model"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // .city.person.v2.EmissionAttribute emission_attribute = 13 [json_name = "emissionAttribute"];
  if (this->_internal_has_emission_attribute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.emission_attribute_);
  }

  // double length = 1 [json_name = "length"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 1 + 8;
  }

  // double width = 2 [json_name = "width"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 8;
  }

  // double max_speed = 3 [json_name = "maxSpeed"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_speed = this->_internal_max_speed();
  uint64_t raw_max_speed;
  memcpy(&raw_max_speed, &tmp_max_speed, sizeof(tmp_max_speed));
  if (raw_max_speed != 0) {
    total_size += 1 + 8;
  }

  // double max_acceleration = 4 [json_name = "maxAcceleration"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_acceleration = this->_internal_max_acceleration();
  uint64_t raw_max_acceleration;
  memcpy(&raw_max_acceleration, &tmp_max_acceleration, sizeof(tmp_max_acceleration));
  if (raw_max_acceleration != 0) {
    total_size += 1 + 8;
  }

  // double max_braking_acceleration = 5 [json_name = "maxBrakingAcceleration"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_braking_acceleration = this->_internal_max_braking_acceleration();
  uint64_t raw_max_braking_acceleration;
  memcpy(&raw_max_braking_acceleration, &tmp_max_braking_acceleration, sizeof(tmp_max_braking_acceleration));
  if (raw_max_braking_acceleration != 0) {
    total_size += 1 + 8;
  }

  // double usual_acceleration = 6 [json_name = "usualAcceleration"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_usual_acceleration = this->_internal_usual_acceleration();
  uint64_t raw_usual_acceleration;
  memcpy(&raw_usual_acceleration, &tmp_usual_acceleration, sizeof(tmp_usual_acceleration));
  if (raw_usual_acceleration != 0) {
    total_size += 1 + 8;
  }

  // double usual_braking_acceleration = 7 [json_name = "usualBrakingAcceleration"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_usual_braking_acceleration = this->_internal_usual_braking_acceleration();
  uint64_t raw_usual_braking_acceleration;
  memcpy(&raw_usual_braking_acceleration, &tmp_usual_braking_acceleration, sizeof(tmp_usual_braking_acceleration));
  if (raw_usual_braking_acceleration != 0) {
    total_size += 1 + 8;
  }

  // double lane_change_length = 8 [json_name = "laneChangeLength"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lane_change_length = this->_internal_lane_change_length();
  uint64_t raw_lane_change_length;
  memcpy(&raw_lane_change_length, &tmp_lane_change_length, sizeof(tmp_lane_change_length));
  if (raw_lane_change_length != 0) {
    total_size += 1 + 8;
  }

  // double min_gap = 9 [json_name = "minGap"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_gap = this->_internal_min_gap();
  uint64_t raw_min_gap;
  memcpy(&raw_min_gap, &tmp_min_gap, sizeof(tmp_min_gap));
  if (raw_min_gap != 0) {
    total_size += 1 + 8;
  }

  // double headway = 10 [json_name = "headway"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_headway = this->_internal_headway();
  uint64_t raw_headway;
  memcpy(&raw_headway, &tmp_headway, sizeof(tmp_headway));
  if (raw_headway != 0) {
    total_size += 1 + 8;
  }

  // double lane_max_speed_recognition_deviation = 12 [json_name = "laneMaxSpeedRecognitionDeviation"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lane_max_speed_recognition_deviation = this->_internal_lane_max_speed_recognition_deviation();
  uint64_t raw_lane_max_speed_recognition_deviation;
  memcpy(&raw_lane_max_speed_recognition_deviation, &tmp_lane_max_speed_recognition_deviation, sizeof(tmp_lane_max_speed_recognition_deviation));
  if (raw_lane_max_speed_recognition_deviation != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleAttribute::GetClassData() const { return &_class_data_; }


void VehicleAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleAttribute*>(&to_msg);
  auto& from = static_cast<const VehicleAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v2.VehicleAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_model()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (from._internal_has_emission_attribute()) {
    _this->_internal_mutable_emission_attribute()->::city::person::v2::EmissionAttribute::MergeFrom(
        from._internal_emission_attribute());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length = from._internal_length();
  uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_speed = from._internal_max_speed();
  uint64_t raw_max_speed;
  memcpy(&raw_max_speed, &tmp_max_speed, sizeof(tmp_max_speed));
  if (raw_max_speed != 0) {
    _this->_internal_set_max_speed(from._internal_max_speed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_acceleration = from._internal_max_acceleration();
  uint64_t raw_max_acceleration;
  memcpy(&raw_max_acceleration, &tmp_max_acceleration, sizeof(tmp_max_acceleration));
  if (raw_max_acceleration != 0) {
    _this->_internal_set_max_acceleration(from._internal_max_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_braking_acceleration = from._internal_max_braking_acceleration();
  uint64_t raw_max_braking_acceleration;
  memcpy(&raw_max_braking_acceleration, &tmp_max_braking_acceleration, sizeof(tmp_max_braking_acceleration));
  if (raw_max_braking_acceleration != 0) {
    _this->_internal_set_max_braking_acceleration(from._internal_max_braking_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_usual_acceleration = from._internal_usual_acceleration();
  uint64_t raw_usual_acceleration;
  memcpy(&raw_usual_acceleration, &tmp_usual_acceleration, sizeof(tmp_usual_acceleration));
  if (raw_usual_acceleration != 0) {
    _this->_internal_set_usual_acceleration(from._internal_usual_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_usual_braking_acceleration = from._internal_usual_braking_acceleration();
  uint64_t raw_usual_braking_acceleration;
  memcpy(&raw_usual_braking_acceleration, &tmp_usual_braking_acceleration, sizeof(tmp_usual_braking_acceleration));
  if (raw_usual_braking_acceleration != 0) {
    _this->_internal_set_usual_braking_acceleration(from._internal_usual_braking_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lane_change_length = from._internal_lane_change_length();
  uint64_t raw_lane_change_length;
  memcpy(&raw_lane_change_length, &tmp_lane_change_length, sizeof(tmp_lane_change_length));
  if (raw_lane_change_length != 0) {
    _this->_internal_set_lane_change_length(from._internal_lane_change_length());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_gap = from._internal_min_gap();
  uint64_t raw_min_gap;
  memcpy(&raw_min_gap, &tmp_min_gap, sizeof(tmp_min_gap));
  if (raw_min_gap != 0) {
    _this->_internal_set_min_gap(from._internal_min_gap());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_headway = from._internal_headway();
  uint64_t raw_headway;
  memcpy(&raw_headway, &tmp_headway, sizeof(tmp_headway));
  if (raw_headway != 0) {
    _this->_internal_set_headway(from._internal_headway());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lane_max_speed_recognition_deviation = from._internal_lane_max_speed_recognition_deviation();
  uint64_t raw_lane_max_speed_recognition_deviation;
  memcpy(&raw_lane_max_speed_recognition_deviation, &tmp_lane_max_speed_recognition_deviation, sizeof(tmp_lane_max_speed_recognition_deviation));
  if (raw_lane_max_speed_recognition_deviation != 0) {
    _this->_internal_set_lane_max_speed_recognition_deviation(from._internal_lane_max_speed_recognition_deviation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleAttribute::CopyFrom(const VehicleAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v2.VehicleAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleAttribute::IsInitialized() const {
  return true;
}

void VehicleAttribute::InternalSwap(VehicleAttribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleAttribute, _impl_.lane_max_speed_recognition_deviation_)
      + sizeof(VehicleAttribute::_impl_.lane_max_speed_recognition_deviation_)
      - PROTOBUF_FIELD_OFFSET(VehicleAttribute, _impl_.emission_attribute_)>(
          reinterpret_cast<char*>(&_impl_.emission_attribute_),
          reinterpret_cast<char*>(&other->_impl_.emission_attribute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_getter, &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_once,
      file_level_metadata_city_2fperson_2fv2_2fperson_2eproto[3]);
}

// ===================================================================

class BusAttribute::_Internal {
 public:
};

BusAttribute::BusAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v2.BusAttribute)
}
BusAttribute::BusAttribute(const BusAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BusAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subline_id_){}
    , decltype(_impl_.capacity_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.subline_id_, &from._impl_.subline_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.subline_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:city.person.v2.BusAttribute)
}

inline void BusAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.subline_id_){0}
    , decltype(_impl_.capacity_){0}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BusAttribute::~BusAttribute() {
  // @@protoc_insertion_point(destructor:city.person.v2.BusAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BusAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BusAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BusAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v2.BusAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.subline_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.subline_id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BusAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 subline_id = 1 [json_name = "sublineId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.subline_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 capacity = 2 [json_name = "capacity"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.person.v2.BusType type = 5 [json_name = "type"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::city::person::v2::BusType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BusAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v2.BusAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 subline_id = 1 [json_name = "sublineId"];
  if (this->_internal_subline_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_subline_id(), target);
  }

  // int32 capacity = 2 [json_name = "capacity"];
  if (this->_internal_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_capacity(), target);
  }

  // .city.person.v2.BusType type = 5 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v2.BusAttribute)
  return target;
}

size_t BusAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v2.BusAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 subline_id = 1 [json_name = "sublineId"];
  if (this->_internal_subline_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_subline_id());
  }

  // int32 capacity = 2 [json_name = "capacity"];
  if (this->_internal_capacity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_capacity());
  }

  // .city.person.v2.BusType type = 5 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BusAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BusAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BusAttribute::GetClassData() const { return &_class_data_; }


void BusAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BusAttribute*>(&to_msg);
  auto& from = static_cast<const BusAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v2.BusAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_subline_id() != 0) {
    _this->_internal_set_subline_id(from._internal_subline_id());
  }
  if (from._internal_capacity() != 0) {
    _this->_internal_set_capacity(from._internal_capacity());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BusAttribute::CopyFrom(const BusAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v2.BusAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BusAttribute::IsInitialized() const {
  return true;
}

void BusAttribute::InternalSwap(BusAttribute* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BusAttribute, _impl_.type_)
      + sizeof(BusAttribute::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(BusAttribute, _impl_.subline_id_)>(
          reinterpret_cast<char*>(&_impl_.subline_id_),
          reinterpret_cast<char*>(&other->_impl_.subline_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BusAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_getter, &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_once,
      file_level_metadata_city_2fperson_2fv2_2fperson_2eproto[4]);
}

// ===================================================================

class PedestrianAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<PedestrianAttribute>()._impl_._has_bits_);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PedestrianAttribute::PedestrianAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v2.PedestrianAttribute)
}
PedestrianAttribute::PedestrianAttribute(const PedestrianAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PedestrianAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_){}
    , decltype(_impl_.speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.speed_ = from._impl_.speed_;
  // @@protoc_insertion_point(copy_constructor:city.person.v2.PedestrianAttribute)
}

inline void PedestrianAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_){}
    , decltype(_impl_.speed_){0}
  };
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PedestrianAttribute::~PedestrianAttribute() {
  // @@protoc_insertion_point(destructor:city.person.v2.PedestrianAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PedestrianAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_.Destroy();
}

void PedestrianAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PedestrianAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v2.PedestrianAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.model_.ClearNonDefaultToEmpty();
  }
  _impl_.speed_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PedestrianAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double speed = 1 [json_name = "speed"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string model = 2 [json_name = "model"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "city.person.v2.PedestrianAttribute.model"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PedestrianAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v2.PedestrianAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double speed = 1 [json_name = "speed"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_speed(), target);
  }

  // optional string model = 2 [json_name = "model"];
  if (_internal_has_model()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "city.person.v2.PedestrianAttribute.model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v2.PedestrianAttribute)
  return target;
}

size_t PedestrianAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v2.PedestrianAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string model = 2 [json_name = "model"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // double speed = 1 [json_name = "speed"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PedestrianAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PedestrianAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PedestrianAttribute::GetClassData() const { return &_class_data_; }


void PedestrianAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PedestrianAttribute*>(&to_msg);
  auto& from = static_cast<const PedestrianAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v2.PedestrianAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_model()) {
    _this->_internal_set_model(from._internal_model());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = from._internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PedestrianAttribute::CopyFrom(const PedestrianAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v2.PedestrianAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PedestrianAttribute::IsInitialized() const {
  return true;
}

void PedestrianAttribute::InternalSwap(PedestrianAttribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  swap(_impl_.speed_, other->_impl_.speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PedestrianAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_getter, &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_once,
      file_level_metadata_city_2fperson_2fv2_2fperson_2eproto[5]);
}

// ===================================================================

class BikeAttribute::_Internal {
 public:
  using HasBits = decltype(std::declval<BikeAttribute>()._impl_._has_bits_);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BikeAttribute::BikeAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v2.BikeAttribute)
}
BikeAttribute::BikeAttribute(const BikeAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BikeAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_){}
    , decltype(_impl_.speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_model()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.speed_ = from._impl_.speed_;
  // @@protoc_insertion_point(copy_constructor:city.person.v2.BikeAttribute)
}

inline void BikeAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.model_){}
    , decltype(_impl_.speed_){0}
  };
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BikeAttribute::~BikeAttribute() {
  // @@protoc_insertion_point(destructor:city.person.v2.BikeAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BikeAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_.Destroy();
}

void BikeAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BikeAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v2.BikeAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.model_.ClearNonDefaultToEmpty();
  }
  _impl_.speed_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BikeAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double speed = 1 [json_name = "speed"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string model = 2 [json_name = "model"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "city.person.v2.BikeAttribute.model"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BikeAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v2.BikeAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double speed = 1 [json_name = "speed"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_speed(), target);
  }

  // optional string model = 2 [json_name = "model"];
  if (_internal_has_model()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "city.person.v2.BikeAttribute.model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v2.BikeAttribute)
  return target;
}

size_t BikeAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v2.BikeAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string model = 2 [json_name = "model"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // double speed = 1 [json_name = "speed"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BikeAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BikeAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BikeAttribute::GetClassData() const { return &_class_data_; }


void BikeAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BikeAttribute*>(&to_msg);
  auto& from = static_cast<const BikeAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v2.BikeAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_model()) {
    _this->_internal_set_model(from._internal_model());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = from._internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BikeAttribute::CopyFrom(const BikeAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v2.BikeAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BikeAttribute::IsInitialized() const {
  return true;
}

void BikeAttribute::InternalSwap(BikeAttribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  swap(_impl_.speed_, other->_impl_.speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BikeAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_getter, &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_once,
      file_level_metadata_city_2fperson_2fv2_2fperson_2eproto[6]);
}

// ===================================================================

class PersonProfile::_Internal {
 public:
};

PersonProfile::PersonProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v2.PersonProfile)
}
PersonProfile::PersonProfile(const PersonProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PersonProfile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.age_){}
    , decltype(_impl_.education_){}
    , decltype(_impl_.gender_){}
    , decltype(_impl_.consumption_){}
    , decltype(_impl_.house_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.age_, &from._impl_.age_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.house_id_) -
    reinterpret_cast<char*>(&_impl_.age_)) + sizeof(_impl_.house_id_));
  // @@protoc_insertion_point(copy_constructor:city.person.v2.PersonProfile)
}

inline void PersonProfile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.age_){0}
    , decltype(_impl_.education_){0}
    , decltype(_impl_.gender_){0}
    , decltype(_impl_.consumption_){0}
    , decltype(_impl_.house_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PersonProfile::~PersonProfile() {
  // @@protoc_insertion_point(destructor:city.person.v2.PersonProfile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PersonProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PersonProfile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PersonProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v2.PersonProfile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.age_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.house_id_) -
      reinterpret_cast<char*>(&_impl_.age_)) + sizeof(_impl_.house_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PersonProfile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 age = 1 [json_name = "age"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.person.v2.Education education = 2 [json_name = "education"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_education(static_cast<::city::person::v2::Education>(val));
        } else
          goto handle_unusual;
        continue;
      // .city.person.v2.Gender gender = 3 [json_name = "gender"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gender(static_cast<::city::person::v2::Gender>(val));
        } else
          goto handle_unusual;
        continue;
      // .city.person.v2.Consumption consumption = 4 [json_name = "consumption"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_consumption(static_cast<::city::person::v2::Consumption>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 house_id = 5 [json_name = "houseId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.house_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PersonProfile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v2.PersonProfile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 age = 1 [json_name = "age"];
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_age(), target);
  }

  // .city.person.v2.Education education = 2 [json_name = "education"];
  if (this->_internal_education() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_education(), target);
  }

  // .city.person.v2.Gender gender = 3 [json_name = "gender"];
  if (this->_internal_gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_gender(), target);
  }

  // .city.person.v2.Consumption consumption = 4 [json_name = "consumption"];
  if (this->_internal_consumption() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_consumption(), target);
  }

  // int32 house_id = 5 [json_name = "houseId"];
  if (this->_internal_house_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_house_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v2.PersonProfile)
  return target;
}

size_t PersonProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v2.PersonProfile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 age = 1 [json_name = "age"];
  if (this->_internal_age() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_age());
  }

  // .city.person.v2.Education education = 2 [json_name = "education"];
  if (this->_internal_education() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_education());
  }

  // .city.person.v2.Gender gender = 3 [json_name = "gender"];
  if (this->_internal_gender() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gender());
  }

  // .city.person.v2.Consumption consumption = 4 [json_name = "consumption"];
  if (this->_internal_consumption() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_consumption());
  }

  // int32 house_id = 5 [json_name = "houseId"];
  if (this->_internal_house_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_house_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PersonProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PersonProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PersonProfile::GetClassData() const { return &_class_data_; }


void PersonProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PersonProfile*>(&to_msg);
  auto& from = static_cast<const PersonProfile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v2.PersonProfile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_age() != 0) {
    _this->_internal_set_age(from._internal_age());
  }
  if (from._internal_education() != 0) {
    _this->_internal_set_education(from._internal_education());
  }
  if (from._internal_gender() != 0) {
    _this->_internal_set_gender(from._internal_gender());
  }
  if (from._internal_consumption() != 0) {
    _this->_internal_set_consumption(from._internal_consumption());
  }
  if (from._internal_house_id() != 0) {
    _this->_internal_set_house_id(from._internal_house_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PersonProfile::CopyFrom(const PersonProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v2.PersonProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersonProfile::IsInitialized() const {
  return true;
}

void PersonProfile::InternalSwap(PersonProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PersonProfile, _impl_.house_id_)
      + sizeof(PersonProfile::_impl_.house_id_)
      - PROTOBUF_FIELD_OFFSET(PersonProfile, _impl_.age_)>(
          reinterpret_cast<char*>(&_impl_.age_),
          reinterpret_cast<char*>(&other->_impl_.age_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PersonProfile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_getter, &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_once,
      file_level_metadata_city_2fperson_2fv2_2fperson_2eproto[7]);
}

// ===================================================================

Person_LabelsEntry_DoNotUse::Person_LabelsEntry_DoNotUse() {}
Person_LabelsEntry_DoNotUse::Person_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Person_LabelsEntry_DoNotUse::MergeFrom(const Person_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Person_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_getter, &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_once,
      file_level_metadata_city_2fperson_2fv2_2fperson_2eproto[8]);
}

// ===================================================================

class Person::_Internal {
 public:
  using HasBits = decltype(std::declval<Person>()._impl_._has_bits_);
  static const ::city::person::v2::PersonAttribute& attribute(const Person* msg);
  static const ::city::geo::v2::Position& home(const Person* msg);
  static const ::city::person::v2::VehicleAttribute& vehicle_attribute(const Person* msg);
  static void set_has_vehicle_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::city::person::v2::BusAttribute& bus_attribute(const Person* msg);
  static void set_has_bus_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::city::person::v2::PedestrianAttribute& pedestrian_attribute(const Person* msg);
  static void set_has_pedestrian_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::city::person::v2::BikeAttribute& bike_attribute(const Person* msg);
  static void set_has_bike_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::city::person::v2::PersonProfile& profile(const Person* msg);
  static void set_has_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::city::geo::v2::Position& work(const Person* msg);
  static void set_has_work(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_output_when_sleep(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::city::person::v2::PersonAttribute&
Person::_Internal::attribute(const Person* msg) {
  return *msg->_impl_.attribute_;
}
const ::city::geo::v2::Position&
Person::_Internal::home(const Person* msg) {
  return *msg->_impl_.home_;
}
const ::city::person::v2::VehicleAttribute&
Person::_Internal::vehicle_attribute(const Person* msg) {
  return *msg->_impl_.vehicle_attribute_;
}
const ::city::person::v2::BusAttribute&
Person::_Internal::bus_attribute(const Person* msg) {
  return *msg->_impl_.bus_attribute_;
}
const ::city::person::v2::PedestrianAttribute&
Person::_Internal::pedestrian_attribute(const Person* msg) {
  return *msg->_impl_.pedestrian_attribute_;
}
const ::city::person::v2::BikeAttribute&
Person::_Internal::bike_attribute(const Person* msg) {
  return *msg->_impl_.bike_attribute_;
}
const ::city::person::v2::PersonProfile&
Person::_Internal::profile(const Person* msg) {
  return *msg->_impl_.profile_;
}
const ::city::geo::v2::Position&
Person::_Internal::work(const Person* msg) {
  return *msg->_impl_.work_;
}
void Person::clear_home() {
  if (GetArenaForAllocation() == nullptr && _impl_.home_ != nullptr) {
    delete _impl_.home_;
  }
  _impl_.home_ = nullptr;
}
void Person::clear_schedules() {
  _impl_.schedules_.Clear();
}
void Person::clear_work() {
  if (_impl_.work_ != nullptr) _impl_.work_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
Person::Person(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Person::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:city.person.v2.Person)
}
Person::Person(const Person& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Person* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.schedules_){from._impl_.schedules_}
    , /*decltype(_impl_.labels_)*/{}
    , decltype(_impl_.attribute_){nullptr}
    , decltype(_impl_.home_){nullptr}
    , decltype(_impl_.vehicle_attribute_){nullptr}
    , decltype(_impl_.bus_attribute_){nullptr}
    , decltype(_impl_.bike_attribute_){nullptr}
    , decltype(_impl_.profile_){nullptr}
    , decltype(_impl_.pedestrian_attribute_){nullptr}
    , decltype(_impl_.work_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.output_when_sleep_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  if (from._internal_has_attribute()) {
    _this->_impl_.attribute_ = new ::city::person::v2::PersonAttribute(*from._impl_.attribute_);
  }
  if (from._internal_has_home()) {
    _this->_impl_.home_ = new ::city::geo::v2::Position(*from._impl_.home_);
  }
  if (from._internal_has_vehicle_attribute()) {
    _this->_impl_.vehicle_attribute_ = new ::city::person::v2::VehicleAttribute(*from._impl_.vehicle_attribute_);
  }
  if (from._internal_has_bus_attribute()) {
    _this->_impl_.bus_attribute_ = new ::city::person::v2::BusAttribute(*from._impl_.bus_attribute_);
  }
  if (from._internal_has_bike_attribute()) {
    _this->_impl_.bike_attribute_ = new ::city::person::v2::BikeAttribute(*from._impl_.bike_attribute_);
  }
  if (from._internal_has_profile()) {
    _this->_impl_.profile_ = new ::city::person::v2::PersonProfile(*from._impl_.profile_);
  }
  if (from._internal_has_pedestrian_attribute()) {
    _this->_impl_.pedestrian_attribute_ = new ::city::person::v2::PedestrianAttribute(*from._impl_.pedestrian_attribute_);
  }
  if (from._internal_has_work()) {
    _this->_impl_.work_ = new ::city::geo::v2::Position(*from._impl_.work_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:city.person.v2.Person)
}

inline void Person::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.schedules_){arena}
    , /*decltype(_impl_.labels_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.attribute_){nullptr}
    , decltype(_impl_.home_){nullptr}
    , decltype(_impl_.vehicle_attribute_){nullptr}
    , decltype(_impl_.bus_attribute_){nullptr}
    , decltype(_impl_.bike_attribute_){nullptr}
    , decltype(_impl_.profile_){nullptr}
    , decltype(_impl_.pedestrian_attribute_){nullptr}
    , decltype(_impl_.work_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.output_when_sleep_){false}
    , decltype(_impl_.type_){0}
  };
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:city.person.v2.Person)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Person::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.schedules_.~RepeatedPtrField();
  _impl_.labels_.Destruct();
  _impl_.labels_.~MapField();
  if (this != internal_default_instance()) delete _impl_.attribute_;
  if (this != internal_default_instance()) delete _impl_.home_;
  if (this != internal_default_instance()) delete _impl_.vehicle_attribute_;
  if (this != internal_default_instance()) delete _impl_.bus_attribute_;
  if (this != internal_default_instance()) delete _impl_.bike_attribute_;
  if (this != internal_default_instance()) delete _impl_.profile_;
  if (this != internal_default_instance()) delete _impl_.pedestrian_attribute_;
  if (this != internal_default_instance()) delete _impl_.work_;
}

void Person::ArenaDtor(void* object) {
  Person* _this = reinterpret_cast< Person* >(object);
  _this->_impl_.labels_.Destruct();
}
void Person::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Person::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v2.Person)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.schedules_.Clear();
  _impl_.labels_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.attribute_ != nullptr) {
    delete _impl_.attribute_;
  }
  _impl_.attribute_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.home_ != nullptr) {
    delete _impl_.home_;
  }
  _impl_.home_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.vehicle_attribute_ != nullptr);
      _impl_.vehicle_attribute_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.bus_attribute_ != nullptr);
      _impl_.bus_attribute_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.bike_attribute_ != nullptr);
      _impl_.bike_attribute_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.profile_ != nullptr);
      _impl_.profile_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.pedestrian_attribute_ != nullptr);
      _impl_.pedestrian_attribute_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.work_ != nullptr);
      _impl_.work_->Clear();
    }
  }
  _impl_.id_ = 0;
  _impl_.output_when_sleep_ = false;
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Person::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.person.v2.PersonAttribute attribute = 2 [json_name = "attribute"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.geo.v2.Position home = 3 [json_name = "home"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_home(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .city.trip.v2.Schedule schedules = 4 [json_name = "schedules"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_schedules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .city.person.v2.VehicleAttribute vehicle_attribute = 7 [json_name = "vehicleAttribute"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .city.person.v2.BusAttribute bus_attribute = 8 [json_name = "busAttribute"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_bus_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .city.person.v2.BikeAttribute bike_attribute = 9 [json_name = "bikeAttribute"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_bike_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> labels = 10 [json_name = "labels"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .city.person.v2.PersonProfile profile = 11 [json_name = "profile"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_profile(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .city.person.v2.PedestrianAttribute pedestrian_attribute = 12 [json_name = "pedestrianAttribute"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_pedestrian_attribute(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .city.geo.v2.Position work = 13 [json_name = "work"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_work(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool output_when_sleep = 14 [json_name = "outputWhenSleep"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_output_when_sleep(&has_bits);
          _impl_.output_when_sleep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.person.v2.PersonType type = 15 [json_name = "type"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::city::person::v2::PersonType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Person::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v2.Person)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .city.person.v2.PersonAttribute attribute = 2 [json_name = "attribute"];
  if (this->_internal_has_attribute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::attribute(this),
        _Internal::attribute(this).GetCachedSize(), target, stream);
  }

  // .city.geo.v2.Position home = 3 [json_name = "home"];
  if (this->_internal_has_home()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::home(this),
        _Internal::home(this).GetCachedSize(), target, stream);
  }

  // repeated .city.trip.v2.Schedule schedules = 4 [json_name = "schedules"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_schedules_size()); i < n; i++) {
    const auto& repfield = this->_internal_schedules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .city.person.v2.VehicleAttribute vehicle_attribute = 7 [json_name = "vehicleAttribute"];
  if (_internal_has_vehicle_attribute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::vehicle_attribute(this),
        _Internal::vehicle_attribute(this).GetCachedSize(), target, stream);
  }

  // optional .city.person.v2.BusAttribute bus_attribute = 8 [json_name = "busAttribute"];
  if (_internal_has_bus_attribute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::bus_attribute(this),
        _Internal::bus_attribute(this).GetCachedSize(), target, stream);
  }

  // optional .city.person.v2.BikeAttribute bike_attribute = 9 [json_name = "bikeAttribute"];
  if (_internal_has_bike_attribute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::bike_attribute(this),
        _Internal::bike_attribute(this).GetCachedSize(), target, stream);
  }

  // map<string, string> labels = 10 [json_name = "labels"];
  if (!this->_internal_labels().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Person_LabelsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_labels();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "city.person.v2.Person.LabelsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "city.person.v2.Person.LabelsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // optional .city.person.v2.PersonProfile profile = 11 [json_name = "profile"];
  if (_internal_has_profile()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::profile(this),
        _Internal::profile(this).GetCachedSize(), target, stream);
  }

  // optional .city.person.v2.PedestrianAttribute pedestrian_attribute = 12 [json_name = "pedestrianAttribute"];
  if (_internal_has_pedestrian_attribute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::pedestrian_attribute(this),
        _Internal::pedestrian_attribute(this).GetCachedSize(), target, stream);
  }

  // optional .city.geo.v2.Position work = 13 [json_name = "work"];
  if (_internal_has_work()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::work(this),
        _Internal::work(this).GetCachedSize(), target, stream);
  }

  // optional bool output_when_sleep = 14 [json_name = "outputWhenSleep"];
  if (_internal_has_output_when_sleep()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_output_when_sleep(), target);
  }

  // .city.person.v2.PersonType type = 15 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      15, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v2.Person)
  return target;
}

size_t Person::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v2.Person)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.trip.v2.Schedule schedules = 4 [json_name = "schedules"];
  total_size += 1UL * this->_internal_schedules_size();
  for (const auto& msg : this->_impl_.schedules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> labels = 10 [json_name = "labels"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += Person_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .city.person.v2.PersonAttribute attribute = 2 [json_name = "attribute"];
  if (this->_internal_has_attribute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attribute_);
  }

  // .city.geo.v2.Position home = 3 [json_name = "home"];
  if (this->_internal_has_home()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.home_);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .city.person.v2.VehicleAttribute vehicle_attribute = 7 [json_name = "vehicleAttribute"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_attribute_);
    }

    // optional .city.person.v2.BusAttribute bus_attribute = 8 [json_name = "busAttribute"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bus_attribute_);
    }

    // optional .city.person.v2.BikeAttribute bike_attribute = 9 [json_name = "bikeAttribute"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bike_attribute_);
    }

    // optional .city.person.v2.PersonProfile profile = 11 [json_name = "profile"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.profile_);
    }

    // optional .city.person.v2.PedestrianAttribute pedestrian_attribute = 12 [json_name = "pedestrianAttribute"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pedestrian_attribute_);
    }

    // optional .city.geo.v2.Position work = 13 [json_name = "work"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.work_);
    }

  }
  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // optional bool output_when_sleep = 14 [json_name = "outputWhenSleep"];
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 + 1;
  }

  // .city.person.v2.PersonType type = 15 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Person::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Person::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Person::GetClassData() const { return &_class_data_; }


void Person::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Person*>(&to_msg);
  auto& from = static_cast<const Person&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v2.Person)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.schedules_.MergeFrom(from._impl_.schedules_);
  _this->_impl_.labels_.MergeFrom(from._impl_.labels_);
  if (from._internal_has_attribute()) {
    _this->_internal_mutable_attribute()->::city::person::v2::PersonAttribute::MergeFrom(
        from._internal_attribute());
  }
  if (from._internal_has_home()) {
    _this->_internal_mutable_home()->::city::geo::v2::Position::MergeFrom(
        from._internal_home());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_vehicle_attribute()->::city::person::v2::VehicleAttribute::MergeFrom(
          from._internal_vehicle_attribute());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_bus_attribute()->::city::person::v2::BusAttribute::MergeFrom(
          from._internal_bus_attribute());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_bike_attribute()->::city::person::v2::BikeAttribute::MergeFrom(
          from._internal_bike_attribute());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_profile()->::city::person::v2::PersonProfile::MergeFrom(
          from._internal_profile());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_pedestrian_attribute()->::city::person::v2::PedestrianAttribute::MergeFrom(
          from._internal_pedestrian_attribute());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_work()->::city::geo::v2::Position::MergeFrom(
          from._internal_work());
    }
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (cached_has_bits & 0x00000040u) {
    _this->_internal_set_output_when_sleep(from._internal_output_when_sleep());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Person::CopyFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v2.Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {
  return true;
}

void Person::InternalSwap(Person* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.schedules_.InternalSwap(&other->_impl_.schedules_);
  _impl_.labels_.InternalSwap(&other->_impl_.labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Person, _impl_.type_)
      + sizeof(Person::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Person, _impl_.attribute_)>(
          reinterpret_cast<char*>(&_impl_.attribute_),
          reinterpret_cast<char*>(&other->_impl_.attribute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Person::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_getter, &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_once,
      file_level_metadata_city_2fperson_2fv2_2fperson_2eproto[9]);
}

// ===================================================================

class Persons::_Internal {
 public:
};

Persons::Persons(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v2.Persons)
}
Persons::Persons(const Persons& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Persons* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.persons_){from._impl_.persons_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.person.v2.Persons)
}

inline void Persons::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.persons_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Persons::~Persons() {
  // @@protoc_insertion_point(destructor:city.person.v2.Persons)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Persons::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.persons_.~RepeatedPtrField();
}

void Persons::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Persons::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v2.Persons)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.persons_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Persons::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .city.person.v2.Person persons = 1 [json_name = "persons"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_persons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Persons::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v2.Persons)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .city.person.v2.Person persons = 1 [json_name = "persons"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_persons_size()); i < n; i++) {
    const auto& repfield = this->_internal_persons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v2.Persons)
  return target;
}

size_t Persons::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v2.Persons)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.person.v2.Person persons = 1 [json_name = "persons"];
  total_size += 1UL * this->_internal_persons_size();
  for (const auto& msg : this->_impl_.persons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Persons::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Persons::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Persons::GetClassData() const { return &_class_data_; }


void Persons::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Persons*>(&to_msg);
  auto& from = static_cast<const Persons&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v2.Persons)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.persons_.MergeFrom(from._impl_.persons_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Persons::CopyFrom(const Persons& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v2.Persons)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Persons::IsInitialized() const {
  return true;
}

void Persons::InternalSwap(Persons* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.persons_.InternalSwap(&other->_impl_.persons_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Persons::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_getter, &descriptor_table_city_2fperson_2fv2_2fperson_2eproto_once,
      file_level_metadata_city_2fperson_2fv2_2fperson_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace person
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::person::v2::PersonAttribute*
Arena::CreateMaybeMessage< ::city::person::v2::PersonAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v2::PersonAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v2::VehicleEngineEfficiency*
Arena::CreateMaybeMessage< ::city::person::v2::VehicleEngineEfficiency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v2::VehicleEngineEfficiency >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v2::EmissionAttribute*
Arena::CreateMaybeMessage< ::city::person::v2::EmissionAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v2::EmissionAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v2::VehicleAttribute*
Arena::CreateMaybeMessage< ::city::person::v2::VehicleAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v2::VehicleAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v2::BusAttribute*
Arena::CreateMaybeMessage< ::city::person::v2::BusAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v2::BusAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v2::PedestrianAttribute*
Arena::CreateMaybeMessage< ::city::person::v2::PedestrianAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v2::PedestrianAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v2::BikeAttribute*
Arena::CreateMaybeMessage< ::city::person::v2::BikeAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v2::BikeAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v2::PersonProfile*
Arena::CreateMaybeMessage< ::city::person::v2::PersonProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v2::PersonProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v2::Person_LabelsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::city::person::v2::Person_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v2::Person_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v2::Person*
Arena::CreateMaybeMessage< ::city::person::v2::Person >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v2::Person >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v2::Persons*
Arena::CreateMaybeMessage< ::city::person::v2::Persons >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v2::Persons >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
