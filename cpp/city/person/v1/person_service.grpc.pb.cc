// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/person/v1/person_service.proto

#include "city/person/v1/person_service.pb.h"
#include "city/person/v1/person_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace city {
namespace person {
namespace v1 {

static const char* PersonService_method_names[] = {
  "/city.person.v1.PersonService/GetPerson",
  "/city.person.v1.PersonService/AddPerson",
  "/city.person.v1.PersonService/SetSchedule",
  "/city.person.v1.PersonService/GetPersons",
  "/city.person.v1.PersonService/GetPersonByLongLatBBox",
  "/city.person.v1.PersonService/GetAllVehicles",
  "/city.person.v1.PersonService/ResetPersonPosition",
  "/city.person.v1.PersonService/SetControlledVehicleIDs",
  "/city.person.v1.PersonService/FetchControlledVehicleEnvs",
  "/city.person.v1.PersonService/SetControlledVehicleActions",
};

std::unique_ptr< PersonService::Stub> PersonService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PersonService::Stub> stub(new PersonService::Stub(channel, options));
  return stub;
}

PersonService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetPerson_(PersonService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPerson_(PersonService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSchedule_(PersonService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPersons_(PersonService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPersonByLongLatBBox_(PersonService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllVehicles_(PersonService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetPersonPosition_(PersonService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetControlledVehicleIDs_(PersonService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchControlledVehicleEnvs_(PersonService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetControlledVehicleActions_(PersonService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PersonService::Stub::GetPerson(::grpc::ClientContext* context, const ::city::person::v1::GetPersonRequest& request, ::city::person::v1::GetPersonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::person::v1::GetPersonRequest, ::city::person::v1::GetPersonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPerson_, context, request, response);
}

void PersonService::Stub::async::GetPerson(::grpc::ClientContext* context, const ::city::person::v1::GetPersonRequest* request, ::city::person::v1::GetPersonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::person::v1::GetPersonRequest, ::city::person::v1::GetPersonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPerson_, context, request, response, std::move(f));
}

void PersonService::Stub::async::GetPerson(::grpc::ClientContext* context, const ::city::person::v1::GetPersonRequest* request, ::city::person::v1::GetPersonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPerson_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::GetPersonResponse>* PersonService::Stub::PrepareAsyncGetPersonRaw(::grpc::ClientContext* context, const ::city::person::v1::GetPersonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::person::v1::GetPersonResponse, ::city::person::v1::GetPersonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPerson_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::GetPersonResponse>* PersonService::Stub::AsyncGetPersonRaw(::grpc::ClientContext* context, const ::city::person::v1::GetPersonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPersonRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersonService::Stub::AddPerson(::grpc::ClientContext* context, const ::city::person::v1::AddPersonRequest& request, ::city::person::v1::AddPersonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::person::v1::AddPersonRequest, ::city::person::v1::AddPersonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPerson_, context, request, response);
}

void PersonService::Stub::async::AddPerson(::grpc::ClientContext* context, const ::city::person::v1::AddPersonRequest* request, ::city::person::v1::AddPersonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::person::v1::AddPersonRequest, ::city::person::v1::AddPersonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPerson_, context, request, response, std::move(f));
}

void PersonService::Stub::async::AddPerson(::grpc::ClientContext* context, const ::city::person::v1::AddPersonRequest* request, ::city::person::v1::AddPersonResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPerson_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::AddPersonResponse>* PersonService::Stub::PrepareAsyncAddPersonRaw(::grpc::ClientContext* context, const ::city::person::v1::AddPersonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::person::v1::AddPersonResponse, ::city::person::v1::AddPersonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPerson_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::AddPersonResponse>* PersonService::Stub::AsyncAddPersonRaw(::grpc::ClientContext* context, const ::city::person::v1::AddPersonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPersonRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersonService::Stub::SetSchedule(::grpc::ClientContext* context, const ::city::person::v1::SetScheduleRequest& request, ::city::person::v1::SetScheduleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::person::v1::SetScheduleRequest, ::city::person::v1::SetScheduleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSchedule_, context, request, response);
}

void PersonService::Stub::async::SetSchedule(::grpc::ClientContext* context, const ::city::person::v1::SetScheduleRequest* request, ::city::person::v1::SetScheduleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::person::v1::SetScheduleRequest, ::city::person::v1::SetScheduleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSchedule_, context, request, response, std::move(f));
}

void PersonService::Stub::async::SetSchedule(::grpc::ClientContext* context, const ::city::person::v1::SetScheduleRequest* request, ::city::person::v1::SetScheduleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSchedule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::SetScheduleResponse>* PersonService::Stub::PrepareAsyncSetScheduleRaw(::grpc::ClientContext* context, const ::city::person::v1::SetScheduleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::person::v1::SetScheduleResponse, ::city::person::v1::SetScheduleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSchedule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::SetScheduleResponse>* PersonService::Stub::AsyncSetScheduleRaw(::grpc::ClientContext* context, const ::city::person::v1::SetScheduleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetScheduleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersonService::Stub::GetPersons(::grpc::ClientContext* context, const ::city::person::v1::GetPersonsRequest& request, ::city::person::v1::GetPersonsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::person::v1::GetPersonsRequest, ::city::person::v1::GetPersonsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPersons_, context, request, response);
}

void PersonService::Stub::async::GetPersons(::grpc::ClientContext* context, const ::city::person::v1::GetPersonsRequest* request, ::city::person::v1::GetPersonsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::person::v1::GetPersonsRequest, ::city::person::v1::GetPersonsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPersons_, context, request, response, std::move(f));
}

void PersonService::Stub::async::GetPersons(::grpc::ClientContext* context, const ::city::person::v1::GetPersonsRequest* request, ::city::person::v1::GetPersonsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPersons_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::GetPersonsResponse>* PersonService::Stub::PrepareAsyncGetPersonsRaw(::grpc::ClientContext* context, const ::city::person::v1::GetPersonsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::person::v1::GetPersonsResponse, ::city::person::v1::GetPersonsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPersons_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::GetPersonsResponse>* PersonService::Stub::AsyncGetPersonsRaw(::grpc::ClientContext* context, const ::city::person::v1::GetPersonsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPersonsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersonService::Stub::GetPersonByLongLatBBox(::grpc::ClientContext* context, const ::city::person::v1::GetPersonByLongLatBBoxRequest& request, ::city::person::v1::GetPersonByLongLatBBoxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::person::v1::GetPersonByLongLatBBoxRequest, ::city::person::v1::GetPersonByLongLatBBoxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPersonByLongLatBBox_, context, request, response);
}

void PersonService::Stub::async::GetPersonByLongLatBBox(::grpc::ClientContext* context, const ::city::person::v1::GetPersonByLongLatBBoxRequest* request, ::city::person::v1::GetPersonByLongLatBBoxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::person::v1::GetPersonByLongLatBBoxRequest, ::city::person::v1::GetPersonByLongLatBBoxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPersonByLongLatBBox_, context, request, response, std::move(f));
}

void PersonService::Stub::async::GetPersonByLongLatBBox(::grpc::ClientContext* context, const ::city::person::v1::GetPersonByLongLatBBoxRequest* request, ::city::person::v1::GetPersonByLongLatBBoxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPersonByLongLatBBox_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::GetPersonByLongLatBBoxResponse>* PersonService::Stub::PrepareAsyncGetPersonByLongLatBBoxRaw(::grpc::ClientContext* context, const ::city::person::v1::GetPersonByLongLatBBoxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::person::v1::GetPersonByLongLatBBoxResponse, ::city::person::v1::GetPersonByLongLatBBoxRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPersonByLongLatBBox_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::GetPersonByLongLatBBoxResponse>* PersonService::Stub::AsyncGetPersonByLongLatBBoxRaw(::grpc::ClientContext* context, const ::city::person::v1::GetPersonByLongLatBBoxRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPersonByLongLatBBoxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersonService::Stub::GetAllVehicles(::grpc::ClientContext* context, const ::city::person::v1::GetAllVehiclesRequest& request, ::city::person::v1::GetAllVehiclesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::person::v1::GetAllVehiclesRequest, ::city::person::v1::GetAllVehiclesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllVehicles_, context, request, response);
}

void PersonService::Stub::async::GetAllVehicles(::grpc::ClientContext* context, const ::city::person::v1::GetAllVehiclesRequest* request, ::city::person::v1::GetAllVehiclesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::person::v1::GetAllVehiclesRequest, ::city::person::v1::GetAllVehiclesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllVehicles_, context, request, response, std::move(f));
}

void PersonService::Stub::async::GetAllVehicles(::grpc::ClientContext* context, const ::city::person::v1::GetAllVehiclesRequest* request, ::city::person::v1::GetAllVehiclesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllVehicles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::GetAllVehiclesResponse>* PersonService::Stub::PrepareAsyncGetAllVehiclesRaw(::grpc::ClientContext* context, const ::city::person::v1::GetAllVehiclesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::person::v1::GetAllVehiclesResponse, ::city::person::v1::GetAllVehiclesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllVehicles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::GetAllVehiclesResponse>* PersonService::Stub::AsyncGetAllVehiclesRaw(::grpc::ClientContext* context, const ::city::person::v1::GetAllVehiclesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllVehiclesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersonService::Stub::ResetPersonPosition(::grpc::ClientContext* context, const ::city::person::v1::ResetPersonPositionRequest& request, ::city::person::v1::ResetPersonPositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::person::v1::ResetPersonPositionRequest, ::city::person::v1::ResetPersonPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetPersonPosition_, context, request, response);
}

void PersonService::Stub::async::ResetPersonPosition(::grpc::ClientContext* context, const ::city::person::v1::ResetPersonPositionRequest* request, ::city::person::v1::ResetPersonPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::person::v1::ResetPersonPositionRequest, ::city::person::v1::ResetPersonPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPersonPosition_, context, request, response, std::move(f));
}

void PersonService::Stub::async::ResetPersonPosition(::grpc::ClientContext* context, const ::city::person::v1::ResetPersonPositionRequest* request, ::city::person::v1::ResetPersonPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetPersonPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::ResetPersonPositionResponse>* PersonService::Stub::PrepareAsyncResetPersonPositionRaw(::grpc::ClientContext* context, const ::city::person::v1::ResetPersonPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::person::v1::ResetPersonPositionResponse, ::city::person::v1::ResetPersonPositionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetPersonPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::ResetPersonPositionResponse>* PersonService::Stub::AsyncResetPersonPositionRaw(::grpc::ClientContext* context, const ::city::person::v1::ResetPersonPositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetPersonPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersonService::Stub::SetControlledVehicleIDs(::grpc::ClientContext* context, const ::city::person::v1::SetControlledVehicleIDsRequest& request, ::city::person::v1::SetControlledVehicleIDsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::person::v1::SetControlledVehicleIDsRequest, ::city::person::v1::SetControlledVehicleIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetControlledVehicleIDs_, context, request, response);
}

void PersonService::Stub::async::SetControlledVehicleIDs(::grpc::ClientContext* context, const ::city::person::v1::SetControlledVehicleIDsRequest* request, ::city::person::v1::SetControlledVehicleIDsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::person::v1::SetControlledVehicleIDsRequest, ::city::person::v1::SetControlledVehicleIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetControlledVehicleIDs_, context, request, response, std::move(f));
}

void PersonService::Stub::async::SetControlledVehicleIDs(::grpc::ClientContext* context, const ::city::person::v1::SetControlledVehicleIDsRequest* request, ::city::person::v1::SetControlledVehicleIDsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetControlledVehicleIDs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::SetControlledVehicleIDsResponse>* PersonService::Stub::PrepareAsyncSetControlledVehicleIDsRaw(::grpc::ClientContext* context, const ::city::person::v1::SetControlledVehicleIDsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::person::v1::SetControlledVehicleIDsResponse, ::city::person::v1::SetControlledVehicleIDsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetControlledVehicleIDs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::SetControlledVehicleIDsResponse>* PersonService::Stub::AsyncSetControlledVehicleIDsRaw(::grpc::ClientContext* context, const ::city::person::v1::SetControlledVehicleIDsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetControlledVehicleIDsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersonService::Stub::FetchControlledVehicleEnvs(::grpc::ClientContext* context, const ::city::person::v1::FetchControlledVehicleEnvsRequest& request, ::city::person::v1::FetchControlledVehicleEnvsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::person::v1::FetchControlledVehicleEnvsRequest, ::city::person::v1::FetchControlledVehicleEnvsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FetchControlledVehicleEnvs_, context, request, response);
}

void PersonService::Stub::async::FetchControlledVehicleEnvs(::grpc::ClientContext* context, const ::city::person::v1::FetchControlledVehicleEnvsRequest* request, ::city::person::v1::FetchControlledVehicleEnvsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::person::v1::FetchControlledVehicleEnvsRequest, ::city::person::v1::FetchControlledVehicleEnvsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchControlledVehicleEnvs_, context, request, response, std::move(f));
}

void PersonService::Stub::async::FetchControlledVehicleEnvs(::grpc::ClientContext* context, const ::city::person::v1::FetchControlledVehicleEnvsRequest* request, ::city::person::v1::FetchControlledVehicleEnvsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchControlledVehicleEnvs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::FetchControlledVehicleEnvsResponse>* PersonService::Stub::PrepareAsyncFetchControlledVehicleEnvsRaw(::grpc::ClientContext* context, const ::city::person::v1::FetchControlledVehicleEnvsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::person::v1::FetchControlledVehicleEnvsResponse, ::city::person::v1::FetchControlledVehicleEnvsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FetchControlledVehicleEnvs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::FetchControlledVehicleEnvsResponse>* PersonService::Stub::AsyncFetchControlledVehicleEnvsRaw(::grpc::ClientContext* context, const ::city::person::v1::FetchControlledVehicleEnvsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFetchControlledVehicleEnvsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PersonService::Stub::SetControlledVehicleActions(::grpc::ClientContext* context, const ::city::person::v1::SetControlledVehicleActionsRequest& request, ::city::person::v1::SetControlledVehicleActionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::person::v1::SetControlledVehicleActionsRequest, ::city::person::v1::SetControlledVehicleActionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetControlledVehicleActions_, context, request, response);
}

void PersonService::Stub::async::SetControlledVehicleActions(::grpc::ClientContext* context, const ::city::person::v1::SetControlledVehicleActionsRequest* request, ::city::person::v1::SetControlledVehicleActionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::person::v1::SetControlledVehicleActionsRequest, ::city::person::v1::SetControlledVehicleActionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetControlledVehicleActions_, context, request, response, std::move(f));
}

void PersonService::Stub::async::SetControlledVehicleActions(::grpc::ClientContext* context, const ::city::person::v1::SetControlledVehicleActionsRequest* request, ::city::person::v1::SetControlledVehicleActionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetControlledVehicleActions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::SetControlledVehicleActionsResponse>* PersonService::Stub::PrepareAsyncSetControlledVehicleActionsRaw(::grpc::ClientContext* context, const ::city::person::v1::SetControlledVehicleActionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::person::v1::SetControlledVehicleActionsResponse, ::city::person::v1::SetControlledVehicleActionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetControlledVehicleActions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::person::v1::SetControlledVehicleActionsResponse>* PersonService::Stub::AsyncSetControlledVehicleActionsRaw(::grpc::ClientContext* context, const ::city::person::v1::SetControlledVehicleActionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetControlledVehicleActionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

PersonService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersonService::Service, ::city::person::v1::GetPersonRequest, ::city::person::v1::GetPersonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::person::v1::GetPersonRequest* req,
             ::city::person::v1::GetPersonResponse* resp) {
               return service->GetPerson(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersonService::Service, ::city::person::v1::AddPersonRequest, ::city::person::v1::AddPersonResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::person::v1::AddPersonRequest* req,
             ::city::person::v1::AddPersonResponse* resp) {
               return service->AddPerson(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersonService::Service, ::city::person::v1::SetScheduleRequest, ::city::person::v1::SetScheduleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::person::v1::SetScheduleRequest* req,
             ::city::person::v1::SetScheduleResponse* resp) {
               return service->SetSchedule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersonService::Service, ::city::person::v1::GetPersonsRequest, ::city::person::v1::GetPersonsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::person::v1::GetPersonsRequest* req,
             ::city::person::v1::GetPersonsResponse* resp) {
               return service->GetPersons(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersonService::Service, ::city::person::v1::GetPersonByLongLatBBoxRequest, ::city::person::v1::GetPersonByLongLatBBoxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::person::v1::GetPersonByLongLatBBoxRequest* req,
             ::city::person::v1::GetPersonByLongLatBBoxResponse* resp) {
               return service->GetPersonByLongLatBBox(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersonService::Service, ::city::person::v1::GetAllVehiclesRequest, ::city::person::v1::GetAllVehiclesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::person::v1::GetAllVehiclesRequest* req,
             ::city::person::v1::GetAllVehiclesResponse* resp) {
               return service->GetAllVehicles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersonService::Service, ::city::person::v1::ResetPersonPositionRequest, ::city::person::v1::ResetPersonPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::person::v1::ResetPersonPositionRequest* req,
             ::city::person::v1::ResetPersonPositionResponse* resp) {
               return service->ResetPersonPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersonService::Service, ::city::person::v1::SetControlledVehicleIDsRequest, ::city::person::v1::SetControlledVehicleIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::person::v1::SetControlledVehicleIDsRequest* req,
             ::city::person::v1::SetControlledVehicleIDsResponse* resp) {
               return service->SetControlledVehicleIDs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersonService::Service, ::city::person::v1::FetchControlledVehicleEnvsRequest, ::city::person::v1::FetchControlledVehicleEnvsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::person::v1::FetchControlledVehicleEnvsRequest* req,
             ::city::person::v1::FetchControlledVehicleEnvsResponse* resp) {
               return service->FetchControlledVehicleEnvs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PersonService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PersonService::Service, ::city::person::v1::SetControlledVehicleActionsRequest, ::city::person::v1::SetControlledVehicleActionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PersonService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::person::v1::SetControlledVehicleActionsRequest* req,
             ::city::person::v1::SetControlledVehicleActionsResponse* resp) {
               return service->SetControlledVehicleActions(ctx, req, resp);
             }, this)));
}

PersonService::Service::~Service() {
}

::grpc::Status PersonService::Service::GetPerson(::grpc::ServerContext* context, const ::city::person::v1::GetPersonRequest* request, ::city::person::v1::GetPersonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonService::Service::AddPerson(::grpc::ServerContext* context, const ::city::person::v1::AddPersonRequest* request, ::city::person::v1::AddPersonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonService::Service::SetSchedule(::grpc::ServerContext* context, const ::city::person::v1::SetScheduleRequest* request, ::city::person::v1::SetScheduleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonService::Service::GetPersons(::grpc::ServerContext* context, const ::city::person::v1::GetPersonsRequest* request, ::city::person::v1::GetPersonsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonService::Service::GetPersonByLongLatBBox(::grpc::ServerContext* context, const ::city::person::v1::GetPersonByLongLatBBoxRequest* request, ::city::person::v1::GetPersonByLongLatBBoxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonService::Service::GetAllVehicles(::grpc::ServerContext* context, const ::city::person::v1::GetAllVehiclesRequest* request, ::city::person::v1::GetAllVehiclesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonService::Service::ResetPersonPosition(::grpc::ServerContext* context, const ::city::person::v1::ResetPersonPositionRequest* request, ::city::person::v1::ResetPersonPositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonService::Service::SetControlledVehicleIDs(::grpc::ServerContext* context, const ::city::person::v1::SetControlledVehicleIDsRequest* request, ::city::person::v1::SetControlledVehicleIDsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonService::Service::FetchControlledVehicleEnvs(::grpc::ServerContext* context, const ::city::person::v1::FetchControlledVehicleEnvsRequest* request, ::city::person::v1::FetchControlledVehicleEnvsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PersonService::Service::SetControlledVehicleActions(::grpc::ServerContext* context, const ::city::person::v1::SetControlledVehicleActionsRequest* request, ::city::person::v1::SetControlledVehicleActionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace city
}  // namespace person
}  // namespace v1

