// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/person/v1/vehicle.proto

#include "city/person/v1/vehicle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace person {
namespace v1 {
PROTOBUF_CONSTEXPR LC::LC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shadow_s_)*/0
  , /*decltype(_impl_.angle_)*/0
  , /*decltype(_impl_.completed_ratio_)*/0
  , /*decltype(_impl_.shadow_lane_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LCDefaultTypeInternal() {}
  union {
    LC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LCDefaultTypeInternal _LC_default_instance_;
PROTOBUF_CONSTEXPR VehicleAction::VehicleAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.acc_)*/0
  , /*decltype(_impl_.angle_)*/0
  , /*decltype(_impl_.lc_target_id_)*/0
  , /*decltype(_impl_.id_)*/0} {}
struct VehicleActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleActionDefaultTypeInternal() {}
  union {
    VehicleAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleActionDefaultTypeInternal _VehicleAction_default_instance_;
PROTOBUF_CONSTEXPR VehicleRuntime::VehicleRuntime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.base_)*/nullptr
  , /*decltype(_impl_.base_on_road_)*/nullptr
  , /*decltype(_impl_.lc_)*/nullptr
  , /*decltype(_impl_.action_)*/nullptr
  , /*decltype(_impl_.distance_to_end_)*/0} {}
struct VehicleRuntimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleRuntimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleRuntimeDefaultTypeInternal() {}
  union {
    VehicleRuntime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleRuntimeDefaultTypeInternal _VehicleRuntime_default_instance_;
PROTOBUF_CONSTEXPR ObservedVehicle::ObservedVehicle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.motion_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.relation_)*/0
  , /*decltype(_impl_.relative_distance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObservedVehicleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObservedVehicleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObservedVehicleDefaultTypeInternal() {}
  union {
    ObservedVehicle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObservedVehicleDefaultTypeInternal _ObservedVehicle_default_instance_;
PROTOBUF_CONSTEXPR ObservedLane::ObservedLane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.restriction_)*/false
  , /*decltype(_impl_.light_remaining_time_)*/0
  , /*decltype(_impl_.light_state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObservedLaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObservedLaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObservedLaneDefaultTypeInternal() {}
  union {
    ObservedLane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObservedLaneDefaultTypeInternal _ObservedLane_default_instance_;
PROTOBUF_CONSTEXPR VehicleEnv::VehicleEnv(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.observed_vehicles_)*/{}
  , /*decltype(_impl_.observed_lanes_)*/{}
  , /*decltype(_impl_.runtime_)*/nullptr
  , /*decltype(_impl_.journey_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehicleEnvDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleEnvDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleEnvDefaultTypeInternal() {}
  union {
    VehicleEnv _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleEnvDefaultTypeInternal _VehicleEnv_default_instance_;
}  // namespace v1
}  // namespace person
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fperson_2fv1_2fvehicle_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_city_2fperson_2fv1_2fvehicle_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fperson_2fv1_2fvehicle_2eproto = nullptr;

const uint32_t TableStruct_city_2fperson_2fv1_2fvehicle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::person::v1::LC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v1::LC, _impl_.shadow_lane_id_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::LC, _impl_.shadow_s_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::LC, _impl_.angle_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::LC, _impl_.completed_ratio_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleAction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleAction, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleAction, _impl_.acc_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleAction, _impl_.lc_target_id_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleAction, _impl_.angle_),
  ~0u,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleRuntime, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleRuntime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleRuntime, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleRuntime, _impl_.base_on_road_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleRuntime, _impl_.distance_to_end_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleRuntime, _impl_.lc_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleRuntime, _impl_.action_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::person::v1::ObservedVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v1::ObservedVehicle, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::ObservedVehicle, _impl_.motion_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::ObservedVehicle, _impl_.relative_distance_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::ObservedVehicle, _impl_.relation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::person::v1::ObservedLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v1::ObservedLane, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::ObservedLane, _impl_.restriction_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::ObservedLane, _impl_.light_state_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::ObservedLane, _impl_.light_remaining_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleEnv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleEnv, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleEnv, _impl_.runtime_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleEnv, _impl_.journey_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleEnv, _impl_.observed_vehicles_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::VehicleEnv, _impl_.observed_lanes_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::person::v1::LC)},
  { 10, 20, -1, sizeof(::city::person::v1::VehicleAction)},
  { 24, 35, -1, sizeof(::city::person::v1::VehicleRuntime)},
  { 40, -1, -1, sizeof(::city::person::v1::ObservedVehicle)},
  { 50, -1, -1, sizeof(::city::person::v1::ObservedLane)},
  { 60, -1, -1, sizeof(::city::person::v1::VehicleEnv)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::person::v1::_LC_default_instance_._instance,
  &::city::person::v1::_VehicleAction_default_instance_._instance,
  &::city::person::v1::_VehicleRuntime_default_instance_._instance,
  &::city::person::v1::_ObservedVehicle_default_instance_._instance,
  &::city::person::v1::_ObservedLane_default_instance_._instance,
  &::city::person::v1::_VehicleEnv_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fperson_2fv1_2fvehicle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034city/person/v1/vehicle.proto\022\016city.per"
  "son.v1\032\033city/person/v1/motion.proto\032\034cit"
  "y/person/v1/runtime.proto\032\035city/routing/"
  "v2/routing.proto\"\204\001\n\002LC\022$\n\016shadow_lane_i"
  "d\030\001 \001(\005R\014shadowLaneId\022\031\n\010shadow_s\030\002 \001(\001R"
  "\007shadowS\022\024\n\005angle\030\003 \001(\001R\005angle\022\'\n\017comple"
  "ted_ratio\030\004 \001(\001R\016completedRatio\"\177\n\rVehic"
  "leAction\022\016\n\002id\030\004 \001(\005R\002id\022\020\n\003acc\030\001 \001(\001R\003a"
  "cc\022%\n\014lc_target_id\030\002 \001(\005H\000R\nlcTargetId\210\001"
  "\001\022\024\n\005angle\030\003 \001(\001R\005angleB\017\n\r_lc_target_id"
  "\"\245\002\n\016VehicleRuntime\022/\n\004base\030\001 \001(\0132\033.city"
  ".person.v1.BaseRuntimeR\004base\022C\n\014base_on_"
  "road\030\002 \001(\0132!.city.person.v1.BaseRuntimeO"
  "nRoadR\nbaseOnRoad\022&\n\017distance_to_end\030\003 \001"
  "(\001R\rdistanceToEnd\022\'\n\002lc\030\004 \001(\0132\022.city.per"
  "son.v1.LCH\000R\002lc\210\001\001\022:\n\006action\030\005 \001(\0132\035.cit"
  "y.person.v1.VehicleActionH\001R\006action\210\001\001B\005"
  "\n\003_lcB\t\n\007_action\"\301\001\n\017ObservedVehicle\022\016\n\002"
  "id\030\001 \001(\005R\002id\0224\n\006motion\030\002 \001(\0132\034.city.pers"
  "on.v1.PersonMotionR\006motion\022+\n\021relative_d"
  "istance\030\003 \001(\001R\020relativeDistance\022;\n\010relat"
  "ion\030\004 \001(\0162\037.city.person.v1.VehicleRelati"
  "onR\010relation\"\257\001\n\014ObservedLane\022\016\n\002id\030\001 \001("
  "\005R\002id\022 \n\013restriction\030\002 \001(\010R\013restriction\022"
  ";\n\013light_state\030\003 \001(\0162\032.city.person.v1.Li"
  "ghtStateR\nlightState\0220\n\024light_remaining_"
  "time\030\004 \001(\001R\022lightRemainingTime\"\235\002\n\nVehic"
  "leEnv\022\016\n\002id\030\001 \001(\005R\002id\0228\n\007runtime\030\002 \001(\0132\036"
  ".city.person.v1.VehicleRuntimeR\007runtime\022"
  "2\n\007journey\030\003 \001(\0132\030.city.routing.v2.Journ"
  "eyR\007journey\022L\n\021observed_vehicles\030\004 \003(\0132\037"
  ".city.person.v1.ObservedVehicleR\020observe"
  "dVehicles\022C\n\016observed_lanes\030\005 \003(\0132\034.city"
  ".person.v1.ObservedLaneR\robservedLanes*\273"
  "\002\n\017VehicleRelation\022 \n\034VEHICLE_RELATION_U"
  "NSPECIFIED\020\000\022\032\n\026VEHICLE_RELATION_AHEAD\020\001"
  "\022\033\n\027VEHICLE_RELATION_BEHIND\020\002\022!\n\035VEHICLE"
  "_RELATION_SHADOW_AHEAD\020\003\022\"\n\036VEHICLE_RELA"
  "TION_SHADOW_BEHIND\020\004\022\037\n\033VEHICLE_RELATION"
  "_LEFT_AHEAD\020\005\022 \n\034VEHICLE_RELATION_RIGHT_"
  "AHEAD\020\006\022 \n\034VEHICLE_RELATION_LEFT_BEHIND\020"
  "\007\022!\n\035VEHICLE_RELATION_RIGHT_BEHIND\020\010*m\n\n"
  "LightState\022\033\n\027LIGHT_STATE_UNSPECIFIED\020\000\022"
  "\023\n\017LIGHT_STATE_RED\020\001\022\025\n\021LIGHT_STATE_GREE"
  "N\020\002\022\026\n\022LIGHT_STATE_YELLOW\020\003B\262\001\n\022com.city"
  ".person.v1B\014VehicleProtoP\001Z4git.fiblab.n"
  "et/sim/protos/go/city/person/v1;personv1"
  "\242\002\003CPX\252\002\016City.Person.V1\312\002\016City\\Person\\V1"
  "\342\002\032City\\Person\\V1\\GPBMetadata\352\002\020City::Pe"
  "rson::V1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_deps[3] = {
  &::descriptor_table_city_2fperson_2fv1_2fmotion_2eproto,
  &::descriptor_table_city_2fperson_2fv1_2fruntime_2eproto,
  &::descriptor_table_city_2frouting_2fv2_2frouting_2eproto,
};
static ::_pbi::once_flag descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto = {
    false, false, 1976, descriptor_table_protodef_city_2fperson_2fv1_2fvehicle_2eproto,
    "city/person/v1/vehicle.proto",
    &descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_once, descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_deps, 3, 6,
    schemas, file_default_instances, TableStruct_city_2fperson_2fv1_2fvehicle_2eproto::offsets,
    file_level_metadata_city_2fperson_2fv1_2fvehicle_2eproto, file_level_enum_descriptors_city_2fperson_2fv1_2fvehicle_2eproto,
    file_level_service_descriptors_city_2fperson_2fv1_2fvehicle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_getter() {
  return &descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fperson_2fv1_2fvehicle_2eproto(&descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto);
namespace city {
namespace person {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleRelation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto);
  return file_level_enum_descriptors_city_2fperson_2fv1_2fvehicle_2eproto[0];
}
bool VehicleRelation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LightState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto);
  return file_level_enum_descriptors_city_2fperson_2fv1_2fvehicle_2eproto[1];
}
bool LightState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LC::_Internal {
 public:
};

LC::LC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v1.LC)
}
LC::LC(const LC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shadow_s_){}
    , decltype(_impl_.angle_){}
    , decltype(_impl_.completed_ratio_){}
    , decltype(_impl_.shadow_lane_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.shadow_s_, &from._impl_.shadow_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shadow_lane_id_) -
    reinterpret_cast<char*>(&_impl_.shadow_s_)) + sizeof(_impl_.shadow_lane_id_));
  // @@protoc_insertion_point(copy_constructor:city.person.v1.LC)
}

inline void LC::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shadow_s_){0}
    , decltype(_impl_.angle_){0}
    , decltype(_impl_.completed_ratio_){0}
    , decltype(_impl_.shadow_lane_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LC::~LC() {
  // @@protoc_insertion_point(destructor:city.person.v1.LC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LC::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v1.LC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.shadow_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shadow_lane_id_) -
      reinterpret_cast<char*>(&_impl_.shadow_s_)) + sizeof(_impl_.shadow_lane_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 shadow_lane_id = 1 [json_name = "shadowLaneId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.shadow_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double shadow_s = 2 [json_name = "shadowS"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.shadow_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double angle = 3 [json_name = "angle"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double completed_ratio = 4 [json_name = "completedRatio"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.completed_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v1.LC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 shadow_lane_id = 1 [json_name = "shadowLaneId"];
  if (this->_internal_shadow_lane_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_shadow_lane_id(), target);
  }

  // double shadow_s = 2 [json_name = "shadowS"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_shadow_s = this->_internal_shadow_s();
  uint64_t raw_shadow_s;
  memcpy(&raw_shadow_s, &tmp_shadow_s, sizeof(tmp_shadow_s));
  if (raw_shadow_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_shadow_s(), target);
  }

  // double angle = 3 [json_name = "angle"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = this->_internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_angle(), target);
  }

  // double completed_ratio = 4 [json_name = "completedRatio"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_completed_ratio = this->_internal_completed_ratio();
  uint64_t raw_completed_ratio;
  memcpy(&raw_completed_ratio, &tmp_completed_ratio, sizeof(tmp_completed_ratio));
  if (raw_completed_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_completed_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v1.LC)
  return target;
}

size_t LC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v1.LC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double shadow_s = 2 [json_name = "shadowS"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_shadow_s = this->_internal_shadow_s();
  uint64_t raw_shadow_s;
  memcpy(&raw_shadow_s, &tmp_shadow_s, sizeof(tmp_shadow_s));
  if (raw_shadow_s != 0) {
    total_size += 1 + 8;
  }

  // double angle = 3 [json_name = "angle"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = this->_internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 1 + 8;
  }

  // double completed_ratio = 4 [json_name = "completedRatio"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_completed_ratio = this->_internal_completed_ratio();
  uint64_t raw_completed_ratio;
  memcpy(&raw_completed_ratio, &tmp_completed_ratio, sizeof(tmp_completed_ratio));
  if (raw_completed_ratio != 0) {
    total_size += 1 + 8;
  }

  // int32 shadow_lane_id = 1 [json_name = "shadowLaneId"];
  if (this->_internal_shadow_lane_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shadow_lane_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LC::GetClassData() const { return &_class_data_; }


void LC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LC*>(&to_msg);
  auto& from = static_cast<const LC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v1.LC)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_shadow_s = from._internal_shadow_s();
  uint64_t raw_shadow_s;
  memcpy(&raw_shadow_s, &tmp_shadow_s, sizeof(tmp_shadow_s));
  if (raw_shadow_s != 0) {
    _this->_internal_set_shadow_s(from._internal_shadow_s());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = from._internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _this->_internal_set_angle(from._internal_angle());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_completed_ratio = from._internal_completed_ratio();
  uint64_t raw_completed_ratio;
  memcpy(&raw_completed_ratio, &tmp_completed_ratio, sizeof(tmp_completed_ratio));
  if (raw_completed_ratio != 0) {
    _this->_internal_set_completed_ratio(from._internal_completed_ratio());
  }
  if (from._internal_shadow_lane_id() != 0) {
    _this->_internal_set_shadow_lane_id(from._internal_shadow_lane_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LC::CopyFrom(const LC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v1.LC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LC::IsInitialized() const {
  return true;
}

void LC::InternalSwap(LC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LC, _impl_.shadow_lane_id_)
      + sizeof(LC::_impl_.shadow_lane_id_)
      - PROTOBUF_FIELD_OFFSET(LC, _impl_.shadow_s_)>(
          reinterpret_cast<char*>(&_impl_.shadow_s_),
          reinterpret_cast<char*>(&other->_impl_.shadow_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_getter, &descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_once,
      file_level_metadata_city_2fperson_2fv1_2fvehicle_2eproto[0]);
}

// ===================================================================

class VehicleAction::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleAction>()._impl_._has_bits_);
  static void set_has_lc_target_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VehicleAction::VehicleAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v1.VehicleAction)
}
VehicleAction::VehicleAction(const VehicleAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acc_){}
    , decltype(_impl_.angle_){}
    , decltype(_impl_.lc_target_id_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.acc_, &from._impl_.acc_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.acc_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:city.person.v1.VehicleAction)
}

inline void VehicleAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acc_){0}
    , decltype(_impl_.angle_){0}
    , decltype(_impl_.lc_target_id_){0}
    , decltype(_impl_.id_){0}
  };
}

VehicleAction::~VehicleAction() {
  // @@protoc_insertion_point(destructor:city.person.v1.VehicleAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VehicleAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleAction::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v1.VehicleAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.acc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.angle_) -
      reinterpret_cast<char*>(&_impl_.acc_)) + sizeof(_impl_.angle_));
  _impl_.lc_target_id_ = 0;
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double acc = 1 [json_name = "acc"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lc_target_id = 2 [json_name = "lcTargetId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lc_target_id(&has_bits);
          _impl_.lc_target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double angle = 3 [json_name = "angle"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 id = 4 [json_name = "id"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v1.VehicleAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double acc = 1 [json_name = "acc"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc = this->_internal_acc();
  uint64_t raw_acc;
  memcpy(&raw_acc, &tmp_acc, sizeof(tmp_acc));
  if (raw_acc != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_acc(), target);
  }

  // optional int32 lc_target_id = 2 [json_name = "lcTargetId"];
  if (_internal_has_lc_target_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_lc_target_id(), target);
  }

  // double angle = 3 [json_name = "angle"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = this->_internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_angle(), target);
  }

  // int32 id = 4 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v1.VehicleAction)
  return target;
}

size_t VehicleAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v1.VehicleAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double acc = 1 [json_name = "acc"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc = this->_internal_acc();
  uint64_t raw_acc;
  memcpy(&raw_acc, &tmp_acc, sizeof(tmp_acc));
  if (raw_acc != 0) {
    total_size += 1 + 8;
  }

  // double angle = 3 [json_name = "angle"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = this->_internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 1 + 8;
  }

  // optional int32 lc_target_id = 2 [json_name = "lcTargetId"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lc_target_id());
  }

  // int32 id = 4 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleAction::GetClassData() const { return &_class_data_; }


void VehicleAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleAction*>(&to_msg);
  auto& from = static_cast<const VehicleAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v1.VehicleAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc = from._internal_acc();
  uint64_t raw_acc;
  memcpy(&raw_acc, &tmp_acc, sizeof(tmp_acc));
  if (raw_acc != 0) {
    _this->_internal_set_acc(from._internal_acc());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle = from._internal_angle();
  uint64_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _this->_internal_set_angle(from._internal_angle());
  }
  if (from._internal_has_lc_target_id()) {
    _this->_internal_set_lc_target_id(from._internal_lc_target_id());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleAction::CopyFrom(const VehicleAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v1.VehicleAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleAction::IsInitialized() const {
  return true;
}

void VehicleAction::InternalSwap(VehicleAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleAction, _impl_.id_)
      + sizeof(VehicleAction::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(VehicleAction, _impl_.acc_)>(
          reinterpret_cast<char*>(&_impl_.acc_),
          reinterpret_cast<char*>(&other->_impl_.acc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_getter, &descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_once,
      file_level_metadata_city_2fperson_2fv1_2fvehicle_2eproto[1]);
}

// ===================================================================

class VehicleRuntime::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleRuntime>()._impl_._has_bits_);
  static const ::city::person::v1::BaseRuntime& base(const VehicleRuntime* msg);
  static const ::city::person::v1::BaseRuntimeOnRoad& base_on_road(const VehicleRuntime* msg);
  static const ::city::person::v1::LC& lc(const VehicleRuntime* msg);
  static void set_has_lc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::city::person::v1::VehicleAction& action(const VehicleRuntime* msg);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::city::person::v1::BaseRuntime&
VehicleRuntime::_Internal::base(const VehicleRuntime* msg) {
  return *msg->_impl_.base_;
}
const ::city::person::v1::BaseRuntimeOnRoad&
VehicleRuntime::_Internal::base_on_road(const VehicleRuntime* msg) {
  return *msg->_impl_.base_on_road_;
}
const ::city::person::v1::LC&
VehicleRuntime::_Internal::lc(const VehicleRuntime* msg) {
  return *msg->_impl_.lc_;
}
const ::city::person::v1::VehicleAction&
VehicleRuntime::_Internal::action(const VehicleRuntime* msg) {
  return *msg->_impl_.action_;
}
void VehicleRuntime::clear_base() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
}
void VehicleRuntime::clear_base_on_road() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_on_road_ != nullptr) {
    delete _impl_.base_on_road_;
  }
  _impl_.base_on_road_ = nullptr;
}
VehicleRuntime::VehicleRuntime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v1.VehicleRuntime)
}
VehicleRuntime::VehicleRuntime(const VehicleRuntime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleRuntime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.base_on_road_){nullptr}
    , decltype(_impl_.lc_){nullptr}
    , decltype(_impl_.action_){nullptr}
    , decltype(_impl_.distance_to_end_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base()) {
    _this->_impl_.base_ = new ::city::person::v1::BaseRuntime(*from._impl_.base_);
  }
  if (from._internal_has_base_on_road()) {
    _this->_impl_.base_on_road_ = new ::city::person::v1::BaseRuntimeOnRoad(*from._impl_.base_on_road_);
  }
  if (from._internal_has_lc()) {
    _this->_impl_.lc_ = new ::city::person::v1::LC(*from._impl_.lc_);
  }
  if (from._internal_has_action()) {
    _this->_impl_.action_ = new ::city::person::v1::VehicleAction(*from._impl_.action_);
  }
  _this->_impl_.distance_to_end_ = from._impl_.distance_to_end_;
  // @@protoc_insertion_point(copy_constructor:city.person.v1.VehicleRuntime)
}

inline void VehicleRuntime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_){nullptr}
    , decltype(_impl_.base_on_road_){nullptr}
    , decltype(_impl_.lc_){nullptr}
    , decltype(_impl_.action_){nullptr}
    , decltype(_impl_.distance_to_end_){0}
  };
}

VehicleRuntime::~VehicleRuntime() {
  // @@protoc_insertion_point(destructor:city.person.v1.VehicleRuntime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleRuntime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_;
  if (this != internal_default_instance()) delete _impl_.base_on_road_;
  if (this != internal_default_instance()) delete _impl_.lc_;
  if (this != internal_default_instance()) delete _impl_.action_;
}

void VehicleRuntime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleRuntime::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v1.VehicleRuntime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.base_ != nullptr) {
    delete _impl_.base_;
  }
  _impl_.base_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.base_on_road_ != nullptr) {
    delete _impl_.base_on_road_;
  }
  _impl_.base_on_road_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.lc_ != nullptr);
      _impl_.lc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.action_ != nullptr);
      _impl_.action_->Clear();
    }
  }
  _impl_.distance_to_end_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleRuntime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.person.v1.BaseRuntime base = 1 [json_name = "base"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.person.v1.BaseRuntimeOnRoad base_on_road = 2 [json_name = "baseOnRoad"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_on_road(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double distance_to_end = 3 [json_name = "distanceToEnd"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.distance_to_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .city.person.v1.LC lc = 4 [json_name = "lc"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .city.person.v1.VehicleAction action = 5 [json_name = "action"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleRuntime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v1.VehicleRuntime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.person.v1.BaseRuntime base = 1 [json_name = "base"];
  if (this->_internal_has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base(this),
        _Internal::base(this).GetCachedSize(), target, stream);
  }

  // .city.person.v1.BaseRuntimeOnRoad base_on_road = 2 [json_name = "baseOnRoad"];
  if (this->_internal_has_base_on_road()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::base_on_road(this),
        _Internal::base_on_road(this).GetCachedSize(), target, stream);
  }

  // double distance_to_end = 3 [json_name = "distanceToEnd"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance_to_end = this->_internal_distance_to_end();
  uint64_t raw_distance_to_end;
  memcpy(&raw_distance_to_end, &tmp_distance_to_end, sizeof(tmp_distance_to_end));
  if (raw_distance_to_end != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance_to_end(), target);
  }

  // optional .city.person.v1.LC lc = 4 [json_name = "lc"];
  if (_internal_has_lc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::lc(this),
        _Internal::lc(this).GetCachedSize(), target, stream);
  }

  // optional .city.person.v1.VehicleAction action = 5 [json_name = "action"];
  if (_internal_has_action()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::action(this),
        _Internal::action(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v1.VehicleRuntime)
  return target;
}

size_t VehicleRuntime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v1.VehicleRuntime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.person.v1.BaseRuntime base = 1 [json_name = "base"];
  if (this->_internal_has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_);
  }

  // .city.person.v1.BaseRuntimeOnRoad base_on_road = 2 [json_name = "baseOnRoad"];
  if (this->_internal_has_base_on_road()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_on_road_);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .city.person.v1.LC lc = 4 [json_name = "lc"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lc_);
    }

    // optional .city.person.v1.VehicleAction action = 5 [json_name = "action"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_);
    }

  }
  // double distance_to_end = 3 [json_name = "distanceToEnd"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance_to_end = this->_internal_distance_to_end();
  uint64_t raw_distance_to_end;
  memcpy(&raw_distance_to_end, &tmp_distance_to_end, sizeof(tmp_distance_to_end));
  if (raw_distance_to_end != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleRuntime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleRuntime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleRuntime::GetClassData() const { return &_class_data_; }


void VehicleRuntime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleRuntime*>(&to_msg);
  auto& from = static_cast<const VehicleRuntime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v1.VehicleRuntime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_base()) {
    _this->_internal_mutable_base()->::city::person::v1::BaseRuntime::MergeFrom(
        from._internal_base());
  }
  if (from._internal_has_base_on_road()) {
    _this->_internal_mutable_base_on_road()->::city::person::v1::BaseRuntimeOnRoad::MergeFrom(
        from._internal_base_on_road());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_lc()->::city::person::v1::LC::MergeFrom(
          from._internal_lc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_action()->::city::person::v1::VehicleAction::MergeFrom(
          from._internal_action());
    }
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance_to_end = from._internal_distance_to_end();
  uint64_t raw_distance_to_end;
  memcpy(&raw_distance_to_end, &tmp_distance_to_end, sizeof(tmp_distance_to_end));
  if (raw_distance_to_end != 0) {
    _this->_internal_set_distance_to_end(from._internal_distance_to_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleRuntime::CopyFrom(const VehicleRuntime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v1.VehicleRuntime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleRuntime::IsInitialized() const {
  return true;
}

void VehicleRuntime::InternalSwap(VehicleRuntime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleRuntime, _impl_.distance_to_end_)
      + sizeof(VehicleRuntime::_impl_.distance_to_end_)
      - PROTOBUF_FIELD_OFFSET(VehicleRuntime, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleRuntime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_getter, &descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_once,
      file_level_metadata_city_2fperson_2fv1_2fvehicle_2eproto[2]);
}

// ===================================================================

class ObservedVehicle::_Internal {
 public:
  static const ::city::person::v1::PersonMotion& motion(const ObservedVehicle* msg);
};

const ::city::person::v1::PersonMotion&
ObservedVehicle::_Internal::motion(const ObservedVehicle* msg) {
  return *msg->_impl_.motion_;
}
void ObservedVehicle::clear_motion() {
  if (GetArenaForAllocation() == nullptr && _impl_.motion_ != nullptr) {
    delete _impl_.motion_;
  }
  _impl_.motion_ = nullptr;
}
ObservedVehicle::ObservedVehicle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v1.ObservedVehicle)
}
ObservedVehicle::ObservedVehicle(const ObservedVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObservedVehicle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.motion_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.relation_){}
    , decltype(_impl_.relative_distance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_motion()) {
    _this->_impl_.motion_ = new ::city::person::v1::PersonMotion(*from._impl_.motion_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.relative_distance_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.relative_distance_));
  // @@protoc_insertion_point(copy_constructor:city.person.v1.ObservedVehicle)
}

inline void ObservedVehicle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.motion_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.relation_){0}
    , decltype(_impl_.relative_distance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObservedVehicle::~ObservedVehicle() {
  // @@protoc_insertion_point(destructor:city.person.v1.ObservedVehicle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObservedVehicle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.motion_;
}

void ObservedVehicle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObservedVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v1.ObservedVehicle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.motion_ != nullptr) {
    delete _impl_.motion_;
  }
  _impl_.motion_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.relative_distance_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.relative_distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObservedVehicle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.person.v1.PersonMotion motion = 2 [json_name = "motion"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double relative_distance = 3 [json_name = "relativeDistance"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.relative_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .city.person.v1.VehicleRelation relation = 4 [json_name = "relation"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_relation(static_cast<::city::person::v1::VehicleRelation>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObservedVehicle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v1.ObservedVehicle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .city.person.v1.PersonMotion motion = 2 [json_name = "motion"];
  if (this->_internal_has_motion()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::motion(this),
        _Internal::motion(this).GetCachedSize(), target, stream);
  }

  // double relative_distance = 3 [json_name = "relativeDistance"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relative_distance = this->_internal_relative_distance();
  uint64_t raw_relative_distance;
  memcpy(&raw_relative_distance, &tmp_relative_distance, sizeof(tmp_relative_distance));
  if (raw_relative_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_relative_distance(), target);
  }

  // .city.person.v1.VehicleRelation relation = 4 [json_name = "relation"];
  if (this->_internal_relation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_relation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v1.ObservedVehicle)
  return target;
}

size_t ObservedVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v1.ObservedVehicle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.person.v1.PersonMotion motion = 2 [json_name = "motion"];
  if (this->_internal_has_motion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.motion_);
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .city.person.v1.VehicleRelation relation = 4 [json_name = "relation"];
  if (this->_internal_relation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_relation());
  }

  // double relative_distance = 3 [json_name = "relativeDistance"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relative_distance = this->_internal_relative_distance();
  uint64_t raw_relative_distance;
  memcpy(&raw_relative_distance, &tmp_relative_distance, sizeof(tmp_relative_distance));
  if (raw_relative_distance != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObservedVehicle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObservedVehicle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObservedVehicle::GetClassData() const { return &_class_data_; }


void ObservedVehicle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObservedVehicle*>(&to_msg);
  auto& from = static_cast<const ObservedVehicle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v1.ObservedVehicle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_motion()) {
    _this->_internal_mutable_motion()->::city::person::v1::PersonMotion::MergeFrom(
        from._internal_motion());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_relation() != 0) {
    _this->_internal_set_relation(from._internal_relation());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_relative_distance = from._internal_relative_distance();
  uint64_t raw_relative_distance;
  memcpy(&raw_relative_distance, &tmp_relative_distance, sizeof(tmp_relative_distance));
  if (raw_relative_distance != 0) {
    _this->_internal_set_relative_distance(from._internal_relative_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObservedVehicle::CopyFrom(const ObservedVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v1.ObservedVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservedVehicle::IsInitialized() const {
  return true;
}

void ObservedVehicle::InternalSwap(ObservedVehicle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObservedVehicle, _impl_.relative_distance_)
      + sizeof(ObservedVehicle::_impl_.relative_distance_)
      - PROTOBUF_FIELD_OFFSET(ObservedVehicle, _impl_.motion_)>(
          reinterpret_cast<char*>(&_impl_.motion_),
          reinterpret_cast<char*>(&other->_impl_.motion_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservedVehicle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_getter, &descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_once,
      file_level_metadata_city_2fperson_2fv1_2fvehicle_2eproto[3]);
}

// ===================================================================

class ObservedLane::_Internal {
 public:
};

ObservedLane::ObservedLane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v1.ObservedLane)
}
ObservedLane::ObservedLane(const ObservedLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObservedLane* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.restriction_){}
    , decltype(_impl_.light_remaining_time_){}
    , decltype(_impl_.light_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.light_state_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.light_state_));
  // @@protoc_insertion_point(copy_constructor:city.person.v1.ObservedLane)
}

inline void ObservedLane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0}
    , decltype(_impl_.restriction_){false}
    , decltype(_impl_.light_remaining_time_){0}
    , decltype(_impl_.light_state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObservedLane::~ObservedLane() {
  // @@protoc_insertion_point(destructor:city.person.v1.ObservedLane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObservedLane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObservedLane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObservedLane::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v1.ObservedLane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.light_state_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.light_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObservedLane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool restriction = 2 [json_name = "restriction"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.restriction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.person.v1.LightState light_state = 3 [json_name = "lightState"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_light_state(static_cast<::city::person::v1::LightState>(val));
        } else
          goto handle_unusual;
        continue;
      // double light_remaining_time = 4 [json_name = "lightRemainingTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.light_remaining_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObservedLane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v1.ObservedLane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // bool restriction = 2 [json_name = "restriction"];
  if (this->_internal_restriction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_restriction(), target);
  }

  // .city.person.v1.LightState light_state = 3 [json_name = "lightState"];
  if (this->_internal_light_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_light_state(), target);
  }

  // double light_remaining_time = 4 [json_name = "lightRemainingTime"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_light_remaining_time = this->_internal_light_remaining_time();
  uint64_t raw_light_remaining_time;
  memcpy(&raw_light_remaining_time, &tmp_light_remaining_time, sizeof(tmp_light_remaining_time));
  if (raw_light_remaining_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_light_remaining_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v1.ObservedLane)
  return target;
}

size_t ObservedLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v1.ObservedLane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // bool restriction = 2 [json_name = "restriction"];
  if (this->_internal_restriction() != 0) {
    total_size += 1 + 1;
  }

  // double light_remaining_time = 4 [json_name = "lightRemainingTime"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_light_remaining_time = this->_internal_light_remaining_time();
  uint64_t raw_light_remaining_time;
  memcpy(&raw_light_remaining_time, &tmp_light_remaining_time, sizeof(tmp_light_remaining_time));
  if (raw_light_remaining_time != 0) {
    total_size += 1 + 8;
  }

  // .city.person.v1.LightState light_state = 3 [json_name = "lightState"];
  if (this->_internal_light_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_light_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObservedLane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObservedLane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObservedLane::GetClassData() const { return &_class_data_; }


void ObservedLane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObservedLane*>(&to_msg);
  auto& from = static_cast<const ObservedLane&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v1.ObservedLane)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_restriction() != 0) {
    _this->_internal_set_restriction(from._internal_restriction());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_light_remaining_time = from._internal_light_remaining_time();
  uint64_t raw_light_remaining_time;
  memcpy(&raw_light_remaining_time, &tmp_light_remaining_time, sizeof(tmp_light_remaining_time));
  if (raw_light_remaining_time != 0) {
    _this->_internal_set_light_remaining_time(from._internal_light_remaining_time());
  }
  if (from._internal_light_state() != 0) {
    _this->_internal_set_light_state(from._internal_light_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObservedLane::CopyFrom(const ObservedLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v1.ObservedLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservedLane::IsInitialized() const {
  return true;
}

void ObservedLane::InternalSwap(ObservedLane* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObservedLane, _impl_.light_state_)
      + sizeof(ObservedLane::_impl_.light_state_)
      - PROTOBUF_FIELD_OFFSET(ObservedLane, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObservedLane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_getter, &descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_once,
      file_level_metadata_city_2fperson_2fv1_2fvehicle_2eproto[4]);
}

// ===================================================================

class VehicleEnv::_Internal {
 public:
  static const ::city::person::v1::VehicleRuntime& runtime(const VehicleEnv* msg);
  static const ::city::routing::v2::Journey& journey(const VehicleEnv* msg);
};

const ::city::person::v1::VehicleRuntime&
VehicleEnv::_Internal::runtime(const VehicleEnv* msg) {
  return *msg->_impl_.runtime_;
}
const ::city::routing::v2::Journey&
VehicleEnv::_Internal::journey(const VehicleEnv* msg) {
  return *msg->_impl_.journey_;
}
void VehicleEnv::clear_journey() {
  if (GetArenaForAllocation() == nullptr && _impl_.journey_ != nullptr) {
    delete _impl_.journey_;
  }
  _impl_.journey_ = nullptr;
}
VehicleEnv::VehicleEnv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v1.VehicleEnv)
}
VehicleEnv::VehicleEnv(const VehicleEnv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleEnv* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.observed_vehicles_){from._impl_.observed_vehicles_}
    , decltype(_impl_.observed_lanes_){from._impl_.observed_lanes_}
    , decltype(_impl_.runtime_){nullptr}
    , decltype(_impl_.journey_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_runtime()) {
    _this->_impl_.runtime_ = new ::city::person::v1::VehicleRuntime(*from._impl_.runtime_);
  }
  if (from._internal_has_journey()) {
    _this->_impl_.journey_ = new ::city::routing::v2::Journey(*from._impl_.journey_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:city.person.v1.VehicleEnv)
}

inline void VehicleEnv::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.observed_vehicles_){arena}
    , decltype(_impl_.observed_lanes_){arena}
    , decltype(_impl_.runtime_){nullptr}
    , decltype(_impl_.journey_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VehicleEnv::~VehicleEnv() {
  // @@protoc_insertion_point(destructor:city.person.v1.VehicleEnv)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleEnv::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.observed_vehicles_.~RepeatedPtrField();
  _impl_.observed_lanes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.runtime_;
  if (this != internal_default_instance()) delete _impl_.journey_;
}

void VehicleEnv::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleEnv::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v1.VehicleEnv)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.observed_vehicles_.Clear();
  _impl_.observed_lanes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.runtime_ != nullptr) {
    delete _impl_.runtime_;
  }
  _impl_.runtime_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.journey_ != nullptr) {
    delete _impl_.journey_;
  }
  _impl_.journey_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleEnv::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.person.v1.VehicleRuntime runtime = 2 [json_name = "runtime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_runtime(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.routing.v2.Journey journey = 3 [json_name = "journey"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_journey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .city.person.v1.ObservedVehicle observed_vehicles = 4 [json_name = "observedVehicles"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_observed_vehicles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .city.person.v1.ObservedLane observed_lanes = 5 [json_name = "observedLanes"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_observed_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleEnv::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v1.VehicleEnv)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .city.person.v1.VehicleRuntime runtime = 2 [json_name = "runtime"];
  if (this->_internal_has_runtime()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::runtime(this),
        _Internal::runtime(this).GetCachedSize(), target, stream);
  }

  // .city.routing.v2.Journey journey = 3 [json_name = "journey"];
  if (this->_internal_has_journey()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::journey(this),
        _Internal::journey(this).GetCachedSize(), target, stream);
  }

  // repeated .city.person.v1.ObservedVehicle observed_vehicles = 4 [json_name = "observedVehicles"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_observed_vehicles_size()); i < n; i++) {
    const auto& repfield = this->_internal_observed_vehicles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .city.person.v1.ObservedLane observed_lanes = 5 [json_name = "observedLanes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_observed_lanes_size()); i < n; i++) {
    const auto& repfield = this->_internal_observed_lanes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v1.VehicleEnv)
  return target;
}

size_t VehicleEnv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v1.VehicleEnv)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.person.v1.ObservedVehicle observed_vehicles = 4 [json_name = "observedVehicles"];
  total_size += 1UL * this->_internal_observed_vehicles_size();
  for (const auto& msg : this->_impl_.observed_vehicles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .city.person.v1.ObservedLane observed_lanes = 5 [json_name = "observedLanes"];
  total_size += 1UL * this->_internal_observed_lanes_size();
  for (const auto& msg : this->_impl_.observed_lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .city.person.v1.VehicleRuntime runtime = 2 [json_name = "runtime"];
  if (this->_internal_has_runtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.runtime_);
  }

  // .city.routing.v2.Journey journey = 3 [json_name = "journey"];
  if (this->_internal_has_journey()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.journey_);
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleEnv::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleEnv::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleEnv::GetClassData() const { return &_class_data_; }


void VehicleEnv::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleEnv*>(&to_msg);
  auto& from = static_cast<const VehicleEnv&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v1.VehicleEnv)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.observed_vehicles_.MergeFrom(from._impl_.observed_vehicles_);
  _this->_impl_.observed_lanes_.MergeFrom(from._impl_.observed_lanes_);
  if (from._internal_has_runtime()) {
    _this->_internal_mutable_runtime()->::city::person::v1::VehicleRuntime::MergeFrom(
        from._internal_runtime());
  }
  if (from._internal_has_journey()) {
    _this->_internal_mutable_journey()->::city::routing::v2::Journey::MergeFrom(
        from._internal_journey());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleEnv::CopyFrom(const VehicleEnv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v1.VehicleEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleEnv::IsInitialized() const {
  return true;
}

void VehicleEnv::InternalSwap(VehicleEnv* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.observed_vehicles_.InternalSwap(&other->_impl_.observed_vehicles_);
  _impl_.observed_lanes_.InternalSwap(&other->_impl_.observed_lanes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleEnv, _impl_.id_)
      + sizeof(VehicleEnv::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(VehicleEnv, _impl_.runtime_)>(
          reinterpret_cast<char*>(&_impl_.runtime_),
          reinterpret_cast<char*>(&other->_impl_.runtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleEnv::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_getter, &descriptor_table_city_2fperson_2fv1_2fvehicle_2eproto_once,
      file_level_metadata_city_2fperson_2fv1_2fvehicle_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace person
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::person::v1::LC*
Arena::CreateMaybeMessage< ::city::person::v1::LC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v1::LC >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v1::VehicleAction*
Arena::CreateMaybeMessage< ::city::person::v1::VehicleAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v1::VehicleAction >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v1::VehicleRuntime*
Arena::CreateMaybeMessage< ::city::person::v1::VehicleRuntime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v1::VehicleRuntime >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v1::ObservedVehicle*
Arena::CreateMaybeMessage< ::city::person::v1::ObservedVehicle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v1::ObservedVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v1::ObservedLane*
Arena::CreateMaybeMessage< ::city::person::v1::ObservedLane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v1::ObservedLane >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v1::VehicleEnv*
Arena::CreateMaybeMessage< ::city::person::v1::VehicleEnv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v1::VehicleEnv >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
