// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/person/v1/runtime.proto

#include "city/person/v1/runtime.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace person {
namespace v1 {
PROTOBUF_CONSTEXPR BaseRuntime::BaseRuntime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.v_)*/0
  , /*decltype(_impl_.direction_)*/0
  , /*decltype(_impl_.l_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BaseRuntimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseRuntimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseRuntimeDefaultTypeInternal() {}
  union {
    BaseRuntime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseRuntimeDefaultTypeInternal _BaseRuntime_default_instance_;
PROTOBUF_CONSTEXPR BaseRuntimeOnRoad::BaseRuntimeOnRoad(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.s_)*/0
  , /*decltype(_impl_.lane_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BaseRuntimeOnRoadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseRuntimeOnRoadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseRuntimeOnRoadDefaultTypeInternal() {}
  union {
    BaseRuntimeOnRoad _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseRuntimeOnRoadDefaultTypeInternal _BaseRuntimeOnRoad_default_instance_;
}  // namespace v1
}  // namespace person
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fperson_2fv1_2fruntime_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_city_2fperson_2fv1_2fruntime_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fperson_2fv1_2fruntime_2eproto = nullptr;

const uint32_t TableStruct_city_2fperson_2fv1_2fruntime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::person::v1::BaseRuntime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v1::BaseRuntime, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::BaseRuntime, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::BaseRuntime, _impl_.v_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::BaseRuntime, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::BaseRuntime, _impl_.l_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::person::v1::BaseRuntimeOnRoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::person::v1::BaseRuntimeOnRoad, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::city::person::v1::BaseRuntimeOnRoad, _impl_.s_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::person::v1::BaseRuntime)},
  { 11, -1, -1, sizeof(::city::person::v1::BaseRuntimeOnRoad)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::person::v1::_BaseRuntime_default_instance_._instance,
  &::city::person::v1::_BaseRuntimeOnRoad_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fperson_2fv1_2fruntime_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034city/person/v1/runtime.proto\022\016city.per"
  "son.v1\"c\n\013BaseRuntime\022\014\n\001x\030\001 \001(\001R\001x\022\014\n\001y"
  "\030\002 \001(\001R\001y\022\014\n\001v\030\003 \001(\001R\001v\022\034\n\tdirection\030\004 \001"
  "(\001R\tdirection\022\014\n\001l\030\005 \001(\001R\001l\":\n\021BaseRunti"
  "meOnRoad\022\027\n\007lane_id\030\001 \001(\005R\006laneId\022\014\n\001s\030\002"
  " \001(\001R\001sB\262\001\n\022com.city.person.v1B\014RuntimeP"
  "rotoP\001Z4git.fiblab.net/sim/protos/go/cit"
  "y/person/v1;personv1\242\002\003CPX\252\002\016City.Person"
  ".V1\312\002\016City\\Person\\V1\342\002\032City\\Person\\V1\\GP"
  "BMetadata\352\002\020City::Person::V1b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_city_2fperson_2fv1_2fruntime_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fperson_2fv1_2fruntime_2eproto = {
    false, false, 396, descriptor_table_protodef_city_2fperson_2fv1_2fruntime_2eproto,
    "city/person/v1/runtime.proto",
    &descriptor_table_city_2fperson_2fv1_2fruntime_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_city_2fperson_2fv1_2fruntime_2eproto::offsets,
    file_level_metadata_city_2fperson_2fv1_2fruntime_2eproto, file_level_enum_descriptors_city_2fperson_2fv1_2fruntime_2eproto,
    file_level_service_descriptors_city_2fperson_2fv1_2fruntime_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fperson_2fv1_2fruntime_2eproto_getter() {
  return &descriptor_table_city_2fperson_2fv1_2fruntime_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fperson_2fv1_2fruntime_2eproto(&descriptor_table_city_2fperson_2fv1_2fruntime_2eproto);
namespace city {
namespace person {
namespace v1 {

// ===================================================================

class BaseRuntime::_Internal {
 public:
};

BaseRuntime::BaseRuntime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v1.BaseRuntime)
}
BaseRuntime::BaseRuntime(const BaseRuntime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaseRuntime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.v_){}
    , decltype(_impl_.direction_){}
    , decltype(_impl_.l_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.l_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.l_));
  // @@protoc_insertion_point(copy_constructor:city.person.v1.BaseRuntime)
}

inline void BaseRuntime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.v_){0}
    , decltype(_impl_.direction_){0}
    , decltype(_impl_.l_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BaseRuntime::~BaseRuntime() {
  // @@protoc_insertion_point(destructor:city.person.v1.BaseRuntime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaseRuntime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BaseRuntime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaseRuntime::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v1.BaseRuntime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.l_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.l_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseRuntime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1 [json_name = "x"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2 [json_name = "y"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double v = 3 [json_name = "v"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double direction = 4 [json_name = "direction"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double l = 5 [json_name = "l"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaseRuntime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v1.BaseRuntime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double v = 3 [json_name = "v"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_v = this->_internal_v();
  uint64_t raw_v;
  memcpy(&raw_v, &tmp_v, sizeof(tmp_v));
  if (raw_v != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_v(), target);
  }

  // double direction = 4 [json_name = "direction"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_direction = this->_internal_direction();
  uint64_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_direction(), target);
  }

  // double l = 5 [json_name = "l"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_l = this->_internal_l();
  uint64_t raw_l;
  memcpy(&raw_l, &tmp_l, sizeof(tmp_l));
  if (raw_l != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_l(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v1.BaseRuntime)
  return target;
}

size_t BaseRuntime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v1.BaseRuntime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double v = 3 [json_name = "v"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_v = this->_internal_v();
  uint64_t raw_v;
  memcpy(&raw_v, &tmp_v, sizeof(tmp_v));
  if (raw_v != 0) {
    total_size += 1 + 8;
  }

  // double direction = 4 [json_name = "direction"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_direction = this->_internal_direction();
  uint64_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    total_size += 1 + 8;
  }

  // double l = 5 [json_name = "l"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_l = this->_internal_l();
  uint64_t raw_l;
  memcpy(&raw_l, &tmp_l, sizeof(tmp_l));
  if (raw_l != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseRuntime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaseRuntime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseRuntime::GetClassData() const { return &_class_data_; }


void BaseRuntime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaseRuntime*>(&to_msg);
  auto& from = static_cast<const BaseRuntime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v1.BaseRuntime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_v = from._internal_v();
  uint64_t raw_v;
  memcpy(&raw_v, &tmp_v, sizeof(tmp_v));
  if (raw_v != 0) {
    _this->_internal_set_v(from._internal_v());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_direction = from._internal_direction();
  uint64_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_l = from._internal_l();
  uint64_t raw_l;
  memcpy(&raw_l, &tmp_l, sizeof(tmp_l));
  if (raw_l != 0) {
    _this->_internal_set_l(from._internal_l());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseRuntime::CopyFrom(const BaseRuntime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v1.BaseRuntime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseRuntime::IsInitialized() const {
  return true;
}

void BaseRuntime::InternalSwap(BaseRuntime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseRuntime, _impl_.l_)
      + sizeof(BaseRuntime::_impl_.l_)
      - PROTOBUF_FIELD_OFFSET(BaseRuntime, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseRuntime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv1_2fruntime_2eproto_getter, &descriptor_table_city_2fperson_2fv1_2fruntime_2eproto_once,
      file_level_metadata_city_2fperson_2fv1_2fruntime_2eproto[0]);
}

// ===================================================================

class BaseRuntimeOnRoad::_Internal {
 public:
};

BaseRuntimeOnRoad::BaseRuntimeOnRoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.person.v1.BaseRuntimeOnRoad)
}
BaseRuntimeOnRoad::BaseRuntimeOnRoad(const BaseRuntimeOnRoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BaseRuntimeOnRoad* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.s_){}
    , decltype(_impl_.lane_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.s_, &from._impl_.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lane_id_) -
    reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.lane_id_));
  // @@protoc_insertion_point(copy_constructor:city.person.v1.BaseRuntimeOnRoad)
}

inline void BaseRuntimeOnRoad::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.s_){0}
    , decltype(_impl_.lane_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BaseRuntimeOnRoad::~BaseRuntimeOnRoad() {
  // @@protoc_insertion_point(destructor:city.person.v1.BaseRuntimeOnRoad)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BaseRuntimeOnRoad::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BaseRuntimeOnRoad::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BaseRuntimeOnRoad::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v1.BaseRuntimeOnRoad)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lane_id_) -
      reinterpret_cast<char*>(&_impl_.s_)) + sizeof(_impl_.lane_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseRuntimeOnRoad::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 lane_id = 1 [json_name = "laneId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double s = 2 [json_name = "s"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaseRuntimeOnRoad::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v1.BaseRuntimeOnRoad)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lane_id = 1 [json_name = "laneId"];
  if (this->_internal_lane_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_lane_id(), target);
  }

  // double s = 2 [json_name = "s"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_s = this->_internal_s();
  uint64_t raw_s;
  memcpy(&raw_s, &tmp_s, sizeof(tmp_s));
  if (raw_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v1.BaseRuntimeOnRoad)
  return target;
}

size_t BaseRuntimeOnRoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v1.BaseRuntimeOnRoad)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double s = 2 [json_name = "s"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_s = this->_internal_s();
  uint64_t raw_s;
  memcpy(&raw_s, &tmp_s, sizeof(tmp_s));
  if (raw_s != 0) {
    total_size += 1 + 8;
  }

  // int32 lane_id = 1 [json_name = "laneId"];
  if (this->_internal_lane_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lane_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseRuntimeOnRoad::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BaseRuntimeOnRoad::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseRuntimeOnRoad::GetClassData() const { return &_class_data_; }


void BaseRuntimeOnRoad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BaseRuntimeOnRoad*>(&to_msg);
  auto& from = static_cast<const BaseRuntimeOnRoad&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v1.BaseRuntimeOnRoad)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_s = from._internal_s();
  uint64_t raw_s;
  memcpy(&raw_s, &tmp_s, sizeof(tmp_s));
  if (raw_s != 0) {
    _this->_internal_set_s(from._internal_s());
  }
  if (from._internal_lane_id() != 0) {
    _this->_internal_set_lane_id(from._internal_lane_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseRuntimeOnRoad::CopyFrom(const BaseRuntimeOnRoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v1.BaseRuntimeOnRoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseRuntimeOnRoad::IsInitialized() const {
  return true;
}

void BaseRuntimeOnRoad::InternalSwap(BaseRuntimeOnRoad* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseRuntimeOnRoad, _impl_.lane_id_)
      + sizeof(BaseRuntimeOnRoad::_impl_.lane_id_)
      - PROTOBUF_FIELD_OFFSET(BaseRuntimeOnRoad, _impl_.s_)>(
          reinterpret_cast<char*>(&_impl_.s_),
          reinterpret_cast<char*>(&other->_impl_.s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseRuntimeOnRoad::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv1_2fruntime_2eproto_getter, &descriptor_table_city_2fperson_2fv1_2fruntime_2eproto_once,
      file_level_metadata_city_2fperson_2fv1_2fruntime_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace person
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::person::v1::BaseRuntime*
Arena::CreateMaybeMessage< ::city::person::v1::BaseRuntime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v1::BaseRuntime >(arena);
}
template<> PROTOBUF_NOINLINE ::city::person::v1::BaseRuntimeOnRoad*
Arena::CreateMaybeMessage< ::city::person::v1::BaseRuntimeOnRoad >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::person::v1::BaseRuntimeOnRoad >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
