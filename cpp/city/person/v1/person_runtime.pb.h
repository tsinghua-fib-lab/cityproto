// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/person/v1/person_runtime.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv1_2fperson_5fruntime_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv1_2fperson_5fruntime_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "city/event/v2/event.pb.h"
#include "city/person/v1/motion.pb.h"
#include "city/person/v1/person.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fperson_2fv1_2fperson_5fruntime_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fperson_2fv1_2fperson_5fruntime_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fperson_2fv1_2fperson_5fruntime_2eproto;
namespace city {
namespace person {
namespace v1 {
class PersonRuntime;
struct PersonRuntimeDefaultTypeInternal;
extern PersonRuntimeDefaultTypeInternal _PersonRuntime_default_instance_;
}  // namespace v1
}  // namespace person
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::person::v1::PersonRuntime* Arena::CreateMaybeMessage<::city::person::v1::PersonRuntime>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace person {
namespace v1 {

// ===================================================================

class PersonRuntime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v1.PersonRuntime) */ {
 public:
  inline PersonRuntime() : PersonRuntime(nullptr) {}
  ~PersonRuntime() override;
  explicit PROTOBUF_CONSTEXPR PersonRuntime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PersonRuntime(const PersonRuntime& from);
  PersonRuntime(PersonRuntime&& from) noexcept
    : PersonRuntime() {
    *this = ::std::move(from);
  }

  inline PersonRuntime& operator=(const PersonRuntime& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersonRuntime& operator=(PersonRuntime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PersonRuntime& default_instance() {
    return *internal_default_instance();
  }
  static inline const PersonRuntime* internal_default_instance() {
    return reinterpret_cast<const PersonRuntime*>(
               &_PersonRuntime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PersonRuntime& a, PersonRuntime& b) {
    a.Swap(&b);
  }
  inline void Swap(PersonRuntime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersonRuntime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PersonRuntime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PersonRuntime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PersonRuntime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PersonRuntime& from) {
    PersonRuntime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersonRuntime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v1.PersonRuntime";
  }
  protected:
  explicit PersonRuntime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 3,
    kBaseFieldNumber = 1,
    kMotionFieldNumber = 2,
  };
  // repeated .city.event.v2.Event events = 3 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::city::event::v2::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::event::v2::Event >*
      mutable_events();
  private:
  const ::city::event::v2::Event& _internal_events(int index) const;
  ::city::event::v2::Event* _internal_add_events();
  public:
  const ::city::event::v2::Event& events(int index) const;
  ::city::event::v2::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::event::v2::Event >&
      events() const;

  // optional .city.person.v1.Person base = 1 [json_name = "base"];
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::city::person::v1::Person& base() const;
  PROTOBUF_NODISCARD ::city::person::v1::Person* release_base();
  ::city::person::v1::Person* mutable_base();
  void set_allocated_base(::city::person::v1::Person* base);
  private:
  const ::city::person::v1::Person& _internal_base() const;
  ::city::person::v1::Person* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::city::person::v1::Person* base);
  ::city::person::v1::Person* unsafe_arena_release_base();

  // .city.person.v1.PersonMotion motion = 2 [json_name = "motion"];
  bool has_motion() const;
  private:
  bool _internal_has_motion() const;
  public:
  void clear_motion();
  const ::city::person::v1::PersonMotion& motion() const;
  PROTOBUF_NODISCARD ::city::person::v1::PersonMotion* release_motion();
  ::city::person::v1::PersonMotion* mutable_motion();
  void set_allocated_motion(::city::person::v1::PersonMotion* motion);
  private:
  const ::city::person::v1::PersonMotion& _internal_motion() const;
  ::city::person::v1::PersonMotion* _internal_mutable_motion();
  public:
  void unsafe_arena_set_allocated_motion(
      ::city::person::v1::PersonMotion* motion);
  ::city::person::v1::PersonMotion* unsafe_arena_release_motion();

  // @@protoc_insertion_point(class_scope:city.person.v1.PersonRuntime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::event::v2::Event > events_;
    ::city::person::v1::Person* base_;
    ::city::person::v1::PersonMotion* motion_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv1_2fperson_5fruntime_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PersonRuntime

// optional .city.person.v1.Person base = 1 [json_name = "base"];
inline bool PersonRuntime::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool PersonRuntime::has_base() const {
  return _internal_has_base();
}
inline const ::city::person::v1::Person& PersonRuntime::_internal_base() const {
  const ::city::person::v1::Person* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v1::Person&>(
      ::city::person::v1::_Person_default_instance_);
}
inline const ::city::person::v1::Person& PersonRuntime::base() const {
  // @@protoc_insertion_point(field_get:city.person.v1.PersonRuntime.base)
  return _internal_base();
}
inline void PersonRuntime::unsafe_arena_set_allocated_base(
    ::city::person::v1::Person* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v1.PersonRuntime.base)
}
inline ::city::person::v1::Person* PersonRuntime::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::person::v1::Person* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v1::Person* PersonRuntime::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:city.person.v1.PersonRuntime.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::person::v1::Person* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::city::person::v1::Person* PersonRuntime::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v1::Person>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::city::person::v1::Person* PersonRuntime::mutable_base() {
  ::city::person::v1::Person* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:city.person.v1.PersonRuntime.base)
  return _msg;
}
inline void PersonRuntime::set_allocated_base(::city::person::v1::Person* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base));
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:city.person.v1.PersonRuntime.base)
}

// .city.person.v1.PersonMotion motion = 2 [json_name = "motion"];
inline bool PersonRuntime::_internal_has_motion() const {
  return this != internal_default_instance() && _impl_.motion_ != nullptr;
}
inline bool PersonRuntime::has_motion() const {
  return _internal_has_motion();
}
inline const ::city::person::v1::PersonMotion& PersonRuntime::_internal_motion() const {
  const ::city::person::v1::PersonMotion* p = _impl_.motion_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v1::PersonMotion&>(
      ::city::person::v1::_PersonMotion_default_instance_);
}
inline const ::city::person::v1::PersonMotion& PersonRuntime::motion() const {
  // @@protoc_insertion_point(field_get:city.person.v1.PersonRuntime.motion)
  return _internal_motion();
}
inline void PersonRuntime::unsafe_arena_set_allocated_motion(
    ::city::person::v1::PersonMotion* motion) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_);
  }
  _impl_.motion_ = motion;
  if (motion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v1.PersonRuntime.motion)
}
inline ::city::person::v1::PersonMotion* PersonRuntime::release_motion() {
  
  ::city::person::v1::PersonMotion* temp = _impl_.motion_;
  _impl_.motion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::person::v1::PersonMotion* PersonRuntime::unsafe_arena_release_motion() {
  // @@protoc_insertion_point(field_release:city.person.v1.PersonRuntime.motion)
  
  ::city::person::v1::PersonMotion* temp = _impl_.motion_;
  _impl_.motion_ = nullptr;
  return temp;
}
inline ::city::person::v1::PersonMotion* PersonRuntime::_internal_mutable_motion() {
  
  if (_impl_.motion_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v1::PersonMotion>(GetArenaForAllocation());
    _impl_.motion_ = p;
  }
  return _impl_.motion_;
}
inline ::city::person::v1::PersonMotion* PersonRuntime::mutable_motion() {
  ::city::person::v1::PersonMotion* _msg = _internal_mutable_motion();
  // @@protoc_insertion_point(field_mutable:city.person.v1.PersonRuntime.motion)
  return _msg;
}
inline void PersonRuntime::set_allocated_motion(::city::person::v1::PersonMotion* motion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.motion_);
  }
  if (motion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motion));
    if (message_arena != submessage_arena) {
      motion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motion, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.motion_ = motion;
  // @@protoc_insertion_point(field_set_allocated:city.person.v1.PersonRuntime.motion)
}

// repeated .city.event.v2.Event events = 3 [json_name = "events"];
inline int PersonRuntime::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int PersonRuntime::events_size() const {
  return _internal_events_size();
}
inline ::city::event::v2::Event* PersonRuntime::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v1.PersonRuntime.events)
  return _impl_.events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::event::v2::Event >*
PersonRuntime::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v1.PersonRuntime.events)
  return &_impl_.events_;
}
inline const ::city::event::v2::Event& PersonRuntime::_internal_events(int index) const {
  return _impl_.events_.Get(index);
}
inline const ::city::event::v2::Event& PersonRuntime::events(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v1.PersonRuntime.events)
  return _internal_events(index);
}
inline ::city::event::v2::Event* PersonRuntime::_internal_add_events() {
  return _impl_.events_.Add();
}
inline ::city::event::v2::Event* PersonRuntime::add_events() {
  ::city::event::v2::Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:city.person.v1.PersonRuntime.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::event::v2::Event >&
PersonRuntime::events() const {
  // @@protoc_insertion_point(field_list:city.person.v1.PersonRuntime.events)
  return _impl_.events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace person
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv1_2fperson_5fruntime_2eproto
