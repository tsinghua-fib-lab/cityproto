// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/person/v1/motion.proto

#include "city/person/v1/motion.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace city {
namespace person {
namespace v1 {
        template <typename>
PROTOBUF_CONSTEXPR PersonMotion::PersonMotion(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.activity_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.position_)*/ nullptr,
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_.status_)*/ 0,
      /*decltype(_impl_.v_)*/ 0,
      /*decltype(_impl_.direction_)*/ 0,
    } {}
struct PersonMotionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PersonMotionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PersonMotionDefaultTypeInternal() {}
  union {
    PersonMotion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PersonMotionDefaultTypeInternal _PersonMotion_default_instance_;
}  // namespace v1
}  // namespace person
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fperson_2fv1_2fmotion_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_city_2fperson_2fv1_2fmotion_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_city_2fperson_2fv1_2fmotion_2eproto = nullptr;
const ::uint32_t TableStruct_city_2fperson_2fv1_2fmotion_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::city::person::v1::PersonMotion, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::city::person::v1::PersonMotion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::city::person::v1::PersonMotion, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::city::person::v1::PersonMotion, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::city::person::v1::PersonMotion, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::city::person::v1::PersonMotion, _impl_.v_),
    PROTOBUF_FIELD_OFFSET(::city::person::v1::PersonMotion, _impl_.direction_),
    PROTOBUF_FIELD_OFFSET(::city::person::v1::PersonMotion, _impl_.activity_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 14, -1, sizeof(::city::person::v1::PersonMotion)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::city::person::v1::_PersonMotion_default_instance_._instance,
};
const char descriptor_table_protodef_city_2fperson_2fv1_2fmotion_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\033city/person/v1/motion.proto\022\016city.pers"
    "on.v1\032\025city/geo/v2/geo.proto\"\311\001\n\014PersonM"
    "otion\022\016\n\002id\030\001 \001(\005R\002id\022.\n\006status\030\002 \001(\0162\026."
    "city.person.v1.StatusR\006status\0221\n\010positio"
    "n\030\003 \001(\0132\025.city.geo.v2.PositionR\010position"
    "\022\014\n\001v\030\004 \001(\001R\001v\022\034\n\tdirection\030\005 \001(\001R\tdirec"
    "tion\022\032\n\010activity\030\006 \001(\tR\010activity*\231\001\n\006Sta"
    "tus\022\026\n\022STATUS_UNSPECIFIED\020\000\022\020\n\014STATUS_SL"
    "EEP\020\001\022\022\n\016STATUS_DRIVING\020\002\022\022\n\016STATUS_WALK"
    "ING\020\003\022\020\n\014STATUS_CROWD\020\004\022\024\n\020STATUS_PASSEN"
    "GER\020\005\022\025\n\021STATUS_WAIT_ROUTE\020\006B\261\001\n\022com.cit"
    "y.person.v1B\013MotionProtoP\001Z4git.fiblab.n"
    "et/sim/protos/go/city/person/v1;personv1"
    "\242\002\003CPX\252\002\016City.Person.V1\312\002\016City\\Person\\V1"
    "\342\002\032City\\Person\\V1\\GPBMetadata\352\002\020City::Pe"
    "rson::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_city_2fperson_2fv1_2fmotion_2eproto_deps[1] =
    {
        &::descriptor_table_city_2fgeo_2fv2_2fgeo_2eproto,
};
static ::absl::once_flag descriptor_table_city_2fperson_2fv1_2fmotion_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fperson_2fv1_2fmotion_2eproto = {
    false,
    false,
    616,
    descriptor_table_protodef_city_2fperson_2fv1_2fmotion_2eproto,
    "city/person/v1/motion.proto",
    &descriptor_table_city_2fperson_2fv1_2fmotion_2eproto_once,
    descriptor_table_city_2fperson_2fv1_2fmotion_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_city_2fperson_2fv1_2fmotion_2eproto::offsets,
    file_level_metadata_city_2fperson_2fv1_2fmotion_2eproto,
    file_level_enum_descriptors_city_2fperson_2fv1_2fmotion_2eproto,
    file_level_service_descriptors_city_2fperson_2fv1_2fmotion_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fperson_2fv1_2fmotion_2eproto_getter() {
  return &descriptor_table_city_2fperson_2fv1_2fmotion_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fperson_2fv1_2fmotion_2eproto(&descriptor_table_city_2fperson_2fv1_2fmotion_2eproto);
namespace city {
namespace person {
namespace v1 {
const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_city_2fperson_2fv1_2fmotion_2eproto);
  return file_level_enum_descriptors_city_2fperson_2fv1_2fmotion_2eproto[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class PersonMotion::_Internal {
 public:
  using HasBits = decltype(std::declval<PersonMotion>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_._has_bits_);
  static const ::city::geo::v2::Position& position(const PersonMotion* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::city::geo::v2::Position& PersonMotion::_Internal::position(const PersonMotion* msg) {
  return *msg->_impl_.position_;
}
void PersonMotion::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PersonMotion::PersonMotion(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:city.person.v1.PersonMotion)
}
PersonMotion::PersonMotion(const PersonMotion& from) : ::google::protobuf::Message() {
  PersonMotion* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.activity_){},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.id_){},
      decltype(_impl_.status_){},
      decltype(_impl_.v_){},
      decltype(_impl_.direction_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.activity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.activity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_activity().empty()) {
    _this->_impl_.activity_.Set(from._internal_activity(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.position_ = new ::city::geo::v2::Position(*from._impl_.position_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.direction_));

  // @@protoc_insertion_point(copy_constructor:city.person.v1.PersonMotion)
}
inline void PersonMotion::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.activity_){},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.id_){0},
      decltype(_impl_.status_){0},
      decltype(_impl_.v_){0},
      decltype(_impl_.direction_){0},
  };
  _impl_.activity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.activity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
PersonMotion::~PersonMotion() {
  // @@protoc_insertion_point(destructor:city.person.v1.PersonMotion)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PersonMotion::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activity_.Destroy();
  if (this != internal_default_instance()) delete _impl_.position_;
}
void PersonMotion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void PersonMotion::Clear() {
// @@protoc_insertion_point(message_clear_start:city.person.v1.PersonMotion)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.activity_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.position_ != nullptr);
    _impl_.position_->Clear();
  }
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.direction_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.direction_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PersonMotion::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 44, 2> PersonMotion::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PersonMotion_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1 [json_name = "id"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PersonMotion, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_.id_)}},
    // .city.person.v1.Status status = 2 [json_name = "status"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PersonMotion, _impl_.status_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_.status_)}},
    // .city.geo.v2.Position position = 3 [json_name = "position"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_.position_)}},
    // double v = 4 [json_name = "v"];
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_.v_)}},
    // double direction = 5 [json_name = "direction"];
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_.direction_)}},
    // string activity = 6 [json_name = "activity"];
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_.activity_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .city.person.v1.Status status = 2 [json_name = "status"];
    {PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .city.geo.v2.Position position = 3 [json_name = "position"];
    {PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double v = 4 [json_name = "v"];
    {PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_.v_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double direction = 5 [json_name = "direction"];
    {PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_.direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string activity = 6 [json_name = "activity"];
    {PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_.activity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::city::geo::v2::Position>()},
  }}, {{
    "\33\0\0\0\0\0\10\0"
    "city.person.v1.PersonMotion"
    "activity"
  }},
};

::uint8_t* PersonMotion::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.person.v1.PersonMotion)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // .city.person.v1.Status status = 2 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_status(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .city.geo.v2.Position position = 3 [json_name = "position"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // double v = 4 [json_name = "v"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_v = this->_internal_v();
  ::uint64_t raw_v;
  memcpy(&raw_v, &tmp_v, sizeof(tmp_v));
  if (raw_v != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this->_internal_v(), target);
  }

  // double direction = 5 [json_name = "direction"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_direction = this->_internal_direction();
  ::uint64_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_direction(), target);
  }

  // string activity = 6 [json_name = "activity"];
  if (!this->_internal_activity().empty()) {
    const std::string& _s = this->_internal_activity();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "city.person.v1.PersonMotion.activity");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.person.v1.PersonMotion)
  return target;
}

::size_t PersonMotion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.person.v1.PersonMotion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string activity = 6 [json_name = "activity"];
  if (!this->_internal_activity().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_activity());
  }

  // .city.geo.v2.Position position = 3 [json_name = "position"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // .city.person.v1.Status status = 2 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // double v = 4 [json_name = "v"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_v = this->_internal_v();
  ::uint64_t raw_v;
  memcpy(&raw_v, &tmp_v, sizeof(tmp_v));
  if (raw_v != 0) {
    total_size += 9;
  }

  // double direction = 5 [json_name = "direction"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_direction = this->_internal_direction();
  ::uint64_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PersonMotion::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    PersonMotion::MergeImpl
};
const ::google::protobuf::Message::ClassData*PersonMotion::GetClassData() const { return &_class_data_; }


void PersonMotion::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PersonMotion*>(&to_msg);
  auto& from = static_cast<const PersonMotion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.person.v1.PersonMotion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_activity().empty()) {
    _this->_internal_set_activity(from._internal_activity());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_position()->::city::geo::v2::Position::MergeFrom(
        from._internal_position());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_v = from._internal_v();
  ::uint64_t raw_v;
  memcpy(&raw_v, &tmp_v, sizeof(tmp_v));
  if (raw_v != 0) {
    _this->_internal_set_v(from._internal_v());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_direction = from._internal_direction();
  ::uint64_t raw_direction;
  memcpy(&raw_direction, &tmp_direction, sizeof(tmp_direction));
  if (raw_direction != 0) {
    _this->_internal_set_direction(from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PersonMotion::CopyFrom(const PersonMotion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.person.v1.PersonMotion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PersonMotion::IsInitialized() const {
  return true;
}

void PersonMotion::InternalSwap(PersonMotion* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.activity_, lhs_arena,
                                       &other->_impl_.activity_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_.direction_)
      + sizeof(PersonMotion::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(PersonMotion, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata PersonMotion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fperson_2fv1_2fmotion_2eproto_getter, &descriptor_table_city_2fperson_2fv1_2fmotion_2eproto_once,
      file_level_metadata_city_2fperson_2fv1_2fmotion_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace person
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
