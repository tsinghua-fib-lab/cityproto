// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/person/v1/runtime.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv1_2fruntime_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv1_2fruntime_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fperson_2fv1_2fruntime_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fperson_2fv1_2fruntime_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fperson_2fv1_2fruntime_2eproto;
namespace city {
namespace person {
namespace v1 {
class BaseRuntime;
struct BaseRuntimeDefaultTypeInternal;
extern BaseRuntimeDefaultTypeInternal _BaseRuntime_default_instance_;
class BaseRuntimeOnRoad;
struct BaseRuntimeOnRoadDefaultTypeInternal;
extern BaseRuntimeOnRoadDefaultTypeInternal _BaseRuntimeOnRoad_default_instance_;
}  // namespace v1
}  // namespace person
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::person::v1::BaseRuntime* Arena::CreateMaybeMessage<::city::person::v1::BaseRuntime>(Arena*);
template<> ::city::person::v1::BaseRuntimeOnRoad* Arena::CreateMaybeMessage<::city::person::v1::BaseRuntimeOnRoad>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace person {
namespace v1 {

// ===================================================================

class BaseRuntime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v1.BaseRuntime) */ {
 public:
  inline BaseRuntime() : BaseRuntime(nullptr) {}
  ~BaseRuntime() override;
  explicit PROTOBUF_CONSTEXPR BaseRuntime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseRuntime(const BaseRuntime& from);
  BaseRuntime(BaseRuntime&& from) noexcept
    : BaseRuntime() {
    *this = ::std::move(from);
  }

  inline BaseRuntime& operator=(const BaseRuntime& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseRuntime& operator=(BaseRuntime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseRuntime& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseRuntime* internal_default_instance() {
    return reinterpret_cast<const BaseRuntime*>(
               &_BaseRuntime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseRuntime& a, BaseRuntime& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseRuntime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseRuntime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseRuntime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseRuntime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseRuntime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BaseRuntime& from) {
    BaseRuntime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseRuntime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v1.BaseRuntime";
  }
  protected:
  explicit BaseRuntime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kVFieldNumber = 3,
    kDirectionFieldNumber = 4,
  };
  // double x = 1 [json_name = "x"];
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2 [json_name = "y"];
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double v = 3 [json_name = "v"];
  void clear_v();
  double v() const;
  void set_v(double value);
  private:
  double _internal_v() const;
  void _internal_set_v(double value);
  public:

  // double direction = 4 [json_name = "direction"];
  void clear_direction();
  double direction() const;
  void set_direction(double value);
  private:
  double _internal_direction() const;
  void _internal_set_direction(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v1.BaseRuntime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double v_;
    double direction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv1_2fruntime_2eproto;
};
// -------------------------------------------------------------------

class BaseRuntimeOnRoad final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.person.v1.BaseRuntimeOnRoad) */ {
 public:
  inline BaseRuntimeOnRoad() : BaseRuntimeOnRoad(nullptr) {}
  ~BaseRuntimeOnRoad() override;
  explicit PROTOBUF_CONSTEXPR BaseRuntimeOnRoad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseRuntimeOnRoad(const BaseRuntimeOnRoad& from);
  BaseRuntimeOnRoad(BaseRuntimeOnRoad&& from) noexcept
    : BaseRuntimeOnRoad() {
    *this = ::std::move(from);
  }

  inline BaseRuntimeOnRoad& operator=(const BaseRuntimeOnRoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseRuntimeOnRoad& operator=(BaseRuntimeOnRoad&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseRuntimeOnRoad& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseRuntimeOnRoad* internal_default_instance() {
    return reinterpret_cast<const BaseRuntimeOnRoad*>(
               &_BaseRuntimeOnRoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BaseRuntimeOnRoad& a, BaseRuntimeOnRoad& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseRuntimeOnRoad* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseRuntimeOnRoad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseRuntimeOnRoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseRuntimeOnRoad>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseRuntimeOnRoad& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BaseRuntimeOnRoad& from) {
    BaseRuntimeOnRoad::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseRuntimeOnRoad* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.person.v1.BaseRuntimeOnRoad";
  }
  protected:
  explicit BaseRuntimeOnRoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 2,
    kLaneIdFieldNumber = 1,
  };
  // double s = 2 [json_name = "s"];
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // int32 lane_id = 1 [json_name = "laneId"];
  void clear_lane_id();
  int32_t lane_id() const;
  void set_lane_id(int32_t value);
  private:
  int32_t _internal_lane_id() const;
  void _internal_set_lane_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.person.v1.BaseRuntimeOnRoad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double s_;
    int32_t lane_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv1_2fruntime_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseRuntime

// double x = 1 [json_name = "x"];
inline void BaseRuntime::clear_x() {
  _impl_.x_ = 0;
}
inline double BaseRuntime::_internal_x() const {
  return _impl_.x_;
}
inline double BaseRuntime::x() const {
  // @@protoc_insertion_point(field_get:city.person.v1.BaseRuntime.x)
  return _internal_x();
}
inline void BaseRuntime::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void BaseRuntime::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:city.person.v1.BaseRuntime.x)
}

// double y = 2 [json_name = "y"];
inline void BaseRuntime::clear_y() {
  _impl_.y_ = 0;
}
inline double BaseRuntime::_internal_y() const {
  return _impl_.y_;
}
inline double BaseRuntime::y() const {
  // @@protoc_insertion_point(field_get:city.person.v1.BaseRuntime.y)
  return _internal_y();
}
inline void BaseRuntime::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void BaseRuntime::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:city.person.v1.BaseRuntime.y)
}

// double v = 3 [json_name = "v"];
inline void BaseRuntime::clear_v() {
  _impl_.v_ = 0;
}
inline double BaseRuntime::_internal_v() const {
  return _impl_.v_;
}
inline double BaseRuntime::v() const {
  // @@protoc_insertion_point(field_get:city.person.v1.BaseRuntime.v)
  return _internal_v();
}
inline void BaseRuntime::_internal_set_v(double value) {
  
  _impl_.v_ = value;
}
inline void BaseRuntime::set_v(double value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:city.person.v1.BaseRuntime.v)
}

// double direction = 4 [json_name = "direction"];
inline void BaseRuntime::clear_direction() {
  _impl_.direction_ = 0;
}
inline double BaseRuntime::_internal_direction() const {
  return _impl_.direction_;
}
inline double BaseRuntime::direction() const {
  // @@protoc_insertion_point(field_get:city.person.v1.BaseRuntime.direction)
  return _internal_direction();
}
inline void BaseRuntime::_internal_set_direction(double value) {
  
  _impl_.direction_ = value;
}
inline void BaseRuntime::set_direction(double value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:city.person.v1.BaseRuntime.direction)
}

// -------------------------------------------------------------------

// BaseRuntimeOnRoad

// int32 lane_id = 1 [json_name = "laneId"];
inline void BaseRuntimeOnRoad::clear_lane_id() {
  _impl_.lane_id_ = 0;
}
inline int32_t BaseRuntimeOnRoad::_internal_lane_id() const {
  return _impl_.lane_id_;
}
inline int32_t BaseRuntimeOnRoad::lane_id() const {
  // @@protoc_insertion_point(field_get:city.person.v1.BaseRuntimeOnRoad.lane_id)
  return _internal_lane_id();
}
inline void BaseRuntimeOnRoad::_internal_set_lane_id(int32_t value) {
  
  _impl_.lane_id_ = value;
}
inline void BaseRuntimeOnRoad::set_lane_id(int32_t value) {
  _internal_set_lane_id(value);
  // @@protoc_insertion_point(field_set:city.person.v1.BaseRuntimeOnRoad.lane_id)
}

// double s = 2 [json_name = "s"];
inline void BaseRuntimeOnRoad::clear_s() {
  _impl_.s_ = 0;
}
inline double BaseRuntimeOnRoad::_internal_s() const {
  return _impl_.s_;
}
inline double BaseRuntimeOnRoad::s() const {
  // @@protoc_insertion_point(field_get:city.person.v1.BaseRuntimeOnRoad.s)
  return _internal_s();
}
inline void BaseRuntimeOnRoad::_internal_set_s(double value) {
  
  _impl_.s_ = value;
}
inline void BaseRuntimeOnRoad::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:city.person.v1.BaseRuntimeOnRoad.s)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace person
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv1_2fruntime_2eproto
