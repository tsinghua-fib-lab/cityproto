// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/person/v1/person.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv1_2fperson_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv1_2fperson_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "city/geo/v2/geo.pb.h"
#include "city/trip/v2/trip.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_city_2fperson_2fv1_2fperson_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fperson_2fv1_2fperson_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_city_2fperson_2fv1_2fperson_2eproto;
namespace city {
namespace person {
namespace v1 {
class BikeAttribute;
struct BikeAttributeDefaultTypeInternal;
extern BikeAttributeDefaultTypeInternal _BikeAttribute_default_instance_;
class BusAttribute;
struct BusAttributeDefaultTypeInternal;
extern BusAttributeDefaultTypeInternal _BusAttribute_default_instance_;
class PedestrianAttribute;
struct PedestrianAttributeDefaultTypeInternal;
extern PedestrianAttributeDefaultTypeInternal _PedestrianAttribute_default_instance_;
class Person;
struct PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
class PersonAttribute;
struct PersonAttributeDefaultTypeInternal;
extern PersonAttributeDefaultTypeInternal _PersonAttribute_default_instance_;
class PersonProfile;
struct PersonProfileDefaultTypeInternal;
extern PersonProfileDefaultTypeInternal _PersonProfile_default_instance_;
class Person_LabelsEntry_DoNotUse;
struct Person_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Person_LabelsEntry_DoNotUseDefaultTypeInternal _Person_LabelsEntry_DoNotUse_default_instance_;
class Persons;
struct PersonsDefaultTypeInternal;
extern PersonsDefaultTypeInternal _Persons_default_instance_;
class VehicleAttribute;
struct VehicleAttributeDefaultTypeInternal;
extern VehicleAttributeDefaultTypeInternal _VehicleAttribute_default_instance_;
}  // namespace v1
}  // namespace person
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace city {
namespace person {
namespace v1 {
enum Education : int {
  EDUCATION_UNSPECIFIED = 0,
  EDUCATION_DOCTOR = 1,
  EDUCATION_MASTER = 2,
  EDUCATION_BACHELOR = 3,
  EDUCATION_HIGH_SCHOOL = 4,
  EDUCATION_JUNIOR_HIGH_SCHOOL = 5,
  EDUCATION_PRIMARY_SCHOOL = 6,
  EDUCATION_COLLEGE = 7,
  Education_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Education_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Education_IsValid(int value);
constexpr Education Education_MIN = static_cast<Education>(0);
constexpr Education Education_MAX = static_cast<Education>(7);
constexpr int Education_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
Education_descriptor();
template <typename T>
const std::string& Education_Name(T value) {
  static_assert(std::is_same<T, Education>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Education_Name().");
  return Education_Name(static_cast<Education>(value));
}
template <>
inline const std::string& Education_Name(Education value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Education_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool Education_Parse(absl::string_view name, Education* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Education>(
      Education_descriptor(), name, value);
}
enum Gender : int {
  GENDER_UNSPECIFIED = 0,
  GENDER_MALE = 1,
  GENDER_FEMALE = 2,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Gender_IsValid(int value);
constexpr Gender Gender_MIN = static_cast<Gender>(0);
constexpr Gender Gender_MAX = static_cast<Gender>(2);
constexpr int Gender_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
Gender_descriptor();
template <typename T>
const std::string& Gender_Name(T value) {
  static_assert(std::is_same<T, Gender>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Gender_Name().");
  return Gender_Name(static_cast<Gender>(value));
}
template <>
inline const std::string& Gender_Name(Gender value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Gender_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Gender_Parse(absl::string_view name, Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gender>(
      Gender_descriptor(), name, value);
}
enum Consumption : int {
  CONSUMPTION_UNSPECIFIED = 0,
  CONSUMPTION_LOW = 1,
  CONSUMPTION_RELATIVELY_LOW = 2,
  CONSUMPTION_MEDIUM = 3,
  CONSUMPTION_RELATIVELY_HIGH = 4,
  CONSUMPTION_HIGH = 5,
  Consumption_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Consumption_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Consumption_IsValid(int value);
constexpr Consumption Consumption_MIN = static_cast<Consumption>(0);
constexpr Consumption Consumption_MAX = static_cast<Consumption>(5);
constexpr int Consumption_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
Consumption_descriptor();
template <typename T>
const std::string& Consumption_Name(T value) {
  static_assert(std::is_same<T, Consumption>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Consumption_Name().");
  return Consumption_Name(static_cast<Consumption>(value));
}
template <>
inline const std::string& Consumption_Name(Consumption value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Consumption_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool Consumption_Parse(absl::string_view name, Consumption* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Consumption>(
      Consumption_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PersonAttribute final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.person.v1.PersonAttribute) */ {
 public:
  inline PersonAttribute() : PersonAttribute(nullptr) {}
  ~PersonAttribute() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PersonAttribute(::google::protobuf::internal::ConstantInitialized);

  PersonAttribute(const PersonAttribute& from);
  PersonAttribute(PersonAttribute&& from) noexcept
    : PersonAttribute() {
    *this = ::std::move(from);
  }

  inline PersonAttribute& operator=(const PersonAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersonAttribute& operator=(PersonAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PersonAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const PersonAttribute* internal_default_instance() {
    return reinterpret_cast<const PersonAttribute*>(
               &_PersonAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PersonAttribute& a, PersonAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(PersonAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersonAttribute* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PersonAttribute* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PersonAttribute>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PersonAttribute& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PersonAttribute& from) {
    PersonAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersonAttribute* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.person.v1.PersonAttribute";
  }
  protected:
  explicit PersonAttribute(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 2,
    kWidthFieldNumber = 3,
    kMaxSpeedFieldNumber = 4,
    kMaxAccelerationFieldNumber = 5,
    kMaxBrakingAccelerationFieldNumber = 6,
    kUsualAccelerationFieldNumber = 7,
    kUsualBrakingAccelerationFieldNumber = 8,
  };
  // double length = 2 [json_name = "length"];
  void clear_length() ;
  double length() const;
  void set_length(double value);

  private:
  double _internal_length() const;
  void _internal_set_length(double value);

  public:
  // double width = 3 [json_name = "width"];
  void clear_width() ;
  double width() const;
  void set_width(double value);

  private:
  double _internal_width() const;
  void _internal_set_width(double value);

  public:
  // double max_speed = 4 [json_name = "maxSpeed"];
  void clear_max_speed() ;
  double max_speed() const;
  void set_max_speed(double value);

  private:
  double _internal_max_speed() const;
  void _internal_set_max_speed(double value);

  public:
  // double max_acceleration = 5 [json_name = "maxAcceleration"];
  void clear_max_acceleration() ;
  double max_acceleration() const;
  void set_max_acceleration(double value);

  private:
  double _internal_max_acceleration() const;
  void _internal_set_max_acceleration(double value);

  public:
  // double max_braking_acceleration = 6 [json_name = "maxBrakingAcceleration"];
  void clear_max_braking_acceleration() ;
  double max_braking_acceleration() const;
  void set_max_braking_acceleration(double value);

  private:
  double _internal_max_braking_acceleration() const;
  void _internal_set_max_braking_acceleration(double value);

  public:
  // double usual_acceleration = 7 [json_name = "usualAcceleration"];
  void clear_usual_acceleration() ;
  double usual_acceleration() const;
  void set_usual_acceleration(double value);

  private:
  double _internal_usual_acceleration() const;
  void _internal_set_usual_acceleration(double value);

  public:
  // double usual_braking_acceleration = 8 [json_name = "usualBrakingAcceleration"];
  void clear_usual_braking_acceleration() ;
  double usual_braking_acceleration() const;
  void set_usual_braking_acceleration(double value);

  private:
  double _internal_usual_braking_acceleration() const;
  void _internal_set_usual_braking_acceleration(double value);

  public:
  // @@protoc_insertion_point(class_scope:city.person.v1.PersonAttribute)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double length_;
    double width_;
    double max_speed_;
    double max_acceleration_;
    double max_braking_acceleration_;
    double usual_acceleration_;
    double usual_braking_acceleration_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv1_2fperson_2eproto;
};// -------------------------------------------------------------------

class VehicleAttribute final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.person.v1.VehicleAttribute) */ {
 public:
  inline VehicleAttribute() : VehicleAttribute(nullptr) {}
  ~VehicleAttribute() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VehicleAttribute(::google::protobuf::internal::ConstantInitialized);

  VehicleAttribute(const VehicleAttribute& from);
  VehicleAttribute(VehicleAttribute&& from) noexcept
    : VehicleAttribute() {
    *this = ::std::move(from);
  }

  inline VehicleAttribute& operator=(const VehicleAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleAttribute& operator=(VehicleAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleAttribute* internal_default_instance() {
    return reinterpret_cast<const VehicleAttribute*>(
               &_VehicleAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VehicleAttribute& a, VehicleAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleAttribute* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleAttribute* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleAttribute>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VehicleAttribute& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VehicleAttribute& from) {
    VehicleAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleAttribute* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.person.v1.VehicleAttribute";
  }
  protected:
  explicit VehicleAttribute(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 3,
    kLaneChangeLengthFieldNumber = 1,
    kMinGapFieldNumber = 2,
  };
  // optional string model = 3 [json_name = "model"];
  bool has_model() const;
  void clear_model() ;
  const std::string& model() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model(Arg_&& arg, Args_... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* ptr);

  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(
      const std::string& value);
  std::string* _internal_mutable_model();

  public:
  // double lane_change_length = 1 [json_name = "laneChangeLength"];
  void clear_lane_change_length() ;
  double lane_change_length() const;
  void set_lane_change_length(double value);

  private:
  double _internal_lane_change_length() const;
  void _internal_set_lane_change_length(double value);

  public:
  // double min_gap = 2 [json_name = "minGap"];
  void clear_min_gap() ;
  double min_gap() const;
  void set_min_gap(double value);

  private:
  double _internal_min_gap() const;
  void _internal_set_min_gap(double value);

  public:
  // @@protoc_insertion_point(class_scope:city.person.v1.VehicleAttribute)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr model_;
    double lane_change_length_;
    double min_gap_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv1_2fperson_2eproto;
};// -------------------------------------------------------------------

class BusAttribute final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.person.v1.BusAttribute) */ {
 public:
  inline BusAttribute() : BusAttribute(nullptr) {}
  ~BusAttribute() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BusAttribute(::google::protobuf::internal::ConstantInitialized);

  BusAttribute(const BusAttribute& from);
  BusAttribute(BusAttribute&& from) noexcept
    : BusAttribute() {
    *this = ::std::move(from);
  }

  inline BusAttribute& operator=(const BusAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusAttribute& operator=(BusAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusAttribute* internal_default_instance() {
    return reinterpret_cast<const BusAttribute*>(
               &_BusAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BusAttribute& a, BusAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(BusAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusAttribute* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BusAttribute* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BusAttribute>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BusAttribute& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BusAttribute& from) {
    BusAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusAttribute* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.person.v1.BusAttribute";
  }
  protected:
  explicit BusAttribute(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 3,
    kLineIdFieldNumber = 1,
    kCapacityFieldNumber = 2,
  };
  // optional string model = 3 [json_name = "model"];
  bool has_model() const;
  void clear_model() ;
  const std::string& model() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model(Arg_&& arg, Args_... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* ptr);

  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(
      const std::string& value);
  std::string* _internal_mutable_model();

  public:
  // int32 line_id = 1 [json_name = "lineId"];
  void clear_line_id() ;
  ::int32_t line_id() const;
  void set_line_id(::int32_t value);

  private:
  ::int32_t _internal_line_id() const;
  void _internal_set_line_id(::int32_t value);

  public:
  // int32 capacity = 2 [json_name = "capacity"];
  void clear_capacity() ;
  ::int32_t capacity() const;
  void set_capacity(::int32_t value);

  private:
  ::int32_t _internal_capacity() const;
  void _internal_set_capacity(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.person.v1.BusAttribute)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 41, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr model_;
    ::int32_t line_id_;
    ::int32_t capacity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv1_2fperson_2eproto;
};// -------------------------------------------------------------------

class PedestrianAttribute final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.person.v1.PedestrianAttribute) */ {
 public:
  inline PedestrianAttribute() : PedestrianAttribute(nullptr) {}
  ~PedestrianAttribute() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PedestrianAttribute(::google::protobuf::internal::ConstantInitialized);

  PedestrianAttribute(const PedestrianAttribute& from);
  PedestrianAttribute(PedestrianAttribute&& from) noexcept
    : PedestrianAttribute() {
    *this = ::std::move(from);
  }

  inline PedestrianAttribute& operator=(const PedestrianAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline PedestrianAttribute& operator=(PedestrianAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PedestrianAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const PedestrianAttribute* internal_default_instance() {
    return reinterpret_cast<const PedestrianAttribute*>(
               &_PedestrianAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PedestrianAttribute& a, PedestrianAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(PedestrianAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PedestrianAttribute* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PedestrianAttribute* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PedestrianAttribute>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PedestrianAttribute& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PedestrianAttribute& from) {
    PedestrianAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PedestrianAttribute* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.person.v1.PedestrianAttribute";
  }
  protected:
  explicit PedestrianAttribute(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 2,
    kSpeedFieldNumber = 1,
  };
  // optional string model = 2 [json_name = "model"];
  bool has_model() const;
  void clear_model() ;
  const std::string& model() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model(Arg_&& arg, Args_... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* ptr);

  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(
      const std::string& value);
  std::string* _internal_mutable_model();

  public:
  // double speed = 1 [json_name = "speed"];
  void clear_speed() ;
  double speed() const;
  void set_speed(double value);

  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);

  public:
  // @@protoc_insertion_point(class_scope:city.person.v1.PedestrianAttribute)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 48, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr model_;
    double speed_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv1_2fperson_2eproto;
};// -------------------------------------------------------------------

class BikeAttribute final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.person.v1.BikeAttribute) */ {
 public:
  inline BikeAttribute() : BikeAttribute(nullptr) {}
  ~BikeAttribute() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BikeAttribute(::google::protobuf::internal::ConstantInitialized);

  BikeAttribute(const BikeAttribute& from);
  BikeAttribute(BikeAttribute&& from) noexcept
    : BikeAttribute() {
    *this = ::std::move(from);
  }

  inline BikeAttribute& operator=(const BikeAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline BikeAttribute& operator=(BikeAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BikeAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const BikeAttribute* internal_default_instance() {
    return reinterpret_cast<const BikeAttribute*>(
               &_BikeAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BikeAttribute& a, BikeAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(BikeAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BikeAttribute* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BikeAttribute* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BikeAttribute>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BikeAttribute& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BikeAttribute& from) {
    BikeAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BikeAttribute* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.person.v1.BikeAttribute";
  }
  protected:
  explicit BikeAttribute(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 2,
    kSpeedFieldNumber = 1,
  };
  // optional string model = 2 [json_name = "model"];
  bool has_model() const;
  void clear_model() ;
  const std::string& model() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model(Arg_&& arg, Args_... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* ptr);

  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(
      const std::string& value);
  std::string* _internal_mutable_model();

  public:
  // double speed = 1 [json_name = "speed"];
  void clear_speed() ;
  double speed() const;
  void set_speed(double value);

  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);

  public:
  // @@protoc_insertion_point(class_scope:city.person.v1.BikeAttribute)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 42, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr model_;
    double speed_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv1_2fperson_2eproto;
};// -------------------------------------------------------------------

class PersonProfile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.person.v1.PersonProfile) */ {
 public:
  inline PersonProfile() : PersonProfile(nullptr) {}
  ~PersonProfile() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PersonProfile(::google::protobuf::internal::ConstantInitialized);

  PersonProfile(const PersonProfile& from);
  PersonProfile(PersonProfile&& from) noexcept
    : PersonProfile() {
    *this = ::std::move(from);
  }

  inline PersonProfile& operator=(const PersonProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersonProfile& operator=(PersonProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PersonProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const PersonProfile* internal_default_instance() {
    return reinterpret_cast<const PersonProfile*>(
               &_PersonProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PersonProfile& a, PersonProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(PersonProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersonProfile* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PersonProfile* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PersonProfile>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PersonProfile& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PersonProfile& from) {
    PersonProfile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PersonProfile* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.person.v1.PersonProfile";
  }
  protected:
  explicit PersonProfile(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgeFieldNumber = 1,
    kEducationFieldNumber = 2,
    kGenderFieldNumber = 3,
    kConsumptionFieldNumber = 4,
  };
  // int32 age = 1 [json_name = "age"];
  void clear_age() ;
  ::int32_t age() const;
  void set_age(::int32_t value);

  private:
  ::int32_t _internal_age() const;
  void _internal_set_age(::int32_t value);

  public:
  // .city.person.v1.Education education = 2 [json_name = "education"];
  void clear_education() ;
  ::city::person::v1::Education education() const;
  void set_education(::city::person::v1::Education value);

  private:
  ::city::person::v1::Education _internal_education() const;
  void _internal_set_education(::city::person::v1::Education value);

  public:
  // .city.person.v1.Gender gender = 3 [json_name = "gender"];
  void clear_gender() ;
  ::city::person::v1::Gender gender() const;
  void set_gender(::city::person::v1::Gender value);

  private:
  ::city::person::v1::Gender _internal_gender() const;
  void _internal_set_gender(::city::person::v1::Gender value);

  public:
  // .city.person.v1.Consumption consumption = 4 [json_name = "consumption"];
  void clear_consumption() ;
  ::city::person::v1::Consumption consumption() const;
  void set_consumption(::city::person::v1::Consumption value);

  private:
  ::city::person::v1::Consumption _internal_consumption() const;
  void _internal_set_consumption(::city::person::v1::Consumption value);

  public:
  // @@protoc_insertion_point(class_scope:city.person.v1.PersonProfile)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t age_;
    int education_;
    int gender_;
    int consumption_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv1_2fperson_2eproto;
};// -------------------------------------------------------------------

class Person_LabelsEntry_DoNotUse final : public ::google::protobuf::internal::MapEntry<Person_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::google::protobuf::internal::MapEntry<Person_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING> SuperType;
  Person_LabelsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Person_LabelsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Person_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Person_LabelsEntry_DoNotUse& other);
  static const Person_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Person_LabelsEntry_DoNotUse*>(&_Person_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "city.person.v1.Person.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "city.person.v1.Person.LabelsEntry.value");
 }
  using ::google::protobuf::Message::MergeFrom;
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_city_2fperson_2fv1_2fperson_2eproto;
};
// -------------------------------------------------------------------

class Person final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.person.v1.Person) */ {
 public:
  inline Person() : Person(nullptr) {}
  ~Person() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Person(::google::protobuf::internal::ConstantInitialized);

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Person& default_instance() {
    return *internal_default_instance();
  }
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Person* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Person& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Person& from) {
    Person::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.person.v1.Person";
  }
  protected:
  explicit Person(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSchedulesFieldNumber = 4,
    kLabelsFieldNumber = 10,
    kAttributeFieldNumber = 2,
    kHomeFieldNumber = 3,
    kVehicleAttributeFieldNumber = 7,
    kBusAttributeFieldNumber = 8,
    kBikeAttributeFieldNumber = 9,
    kProfileFieldNumber = 11,
    kPedestrianAttributeFieldNumber = 12,
    kIdFieldNumber = 1,
  };
  // repeated .city.trip.v2.Schedule schedules = 4 [json_name = "schedules"];
  int schedules_size() const;
  private:
  int _internal_schedules_size() const;

  public:
  void clear_schedules() ;
  ::city::trip::v2::Schedule* mutable_schedules(int index);
  ::google::protobuf::RepeatedPtrField< ::city::trip::v2::Schedule >*
      mutable_schedules();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::trip::v2::Schedule>& _internal_schedules() const;
  ::google::protobuf::RepeatedPtrField<::city::trip::v2::Schedule>* _internal_mutable_schedules();
  public:
  const ::city::trip::v2::Schedule& schedules(int index) const;
  ::city::trip::v2::Schedule* add_schedules();
  const ::google::protobuf::RepeatedPtrField< ::city::trip::v2::Schedule >&
      schedules() const;
  // map<string, string> labels = 10 [json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;

  public:
  void clear_labels() ;
  const ::google::protobuf::Map<std::string, std::string>& labels() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_labels();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_labels() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_labels();

  public:
  // .city.person.v1.PersonAttribute attribute = 2 [json_name = "attribute"];
  bool has_attribute() const;
  void clear_attribute() ;
  const ::city::person::v1::PersonAttribute& attribute() const;
  PROTOBUF_NODISCARD ::city::person::v1::PersonAttribute* release_attribute();
  ::city::person::v1::PersonAttribute* mutable_attribute();
  void set_allocated_attribute(::city::person::v1::PersonAttribute* value);
  void unsafe_arena_set_allocated_attribute(::city::person::v1::PersonAttribute* value);
  ::city::person::v1::PersonAttribute* unsafe_arena_release_attribute();

  private:
  const ::city::person::v1::PersonAttribute& _internal_attribute() const;
  ::city::person::v1::PersonAttribute* _internal_mutable_attribute();

  public:
  // .city.geo.v2.Position home = 3 [json_name = "home"];
  bool has_home() const;
  void clear_home() ;
  const ::city::geo::v2::Position& home() const;
  PROTOBUF_NODISCARD ::city::geo::v2::Position* release_home();
  ::city::geo::v2::Position* mutable_home();
  void set_allocated_home(::city::geo::v2::Position* value);
  void unsafe_arena_set_allocated_home(::city::geo::v2::Position* value);
  ::city::geo::v2::Position* unsafe_arena_release_home();

  private:
  const ::city::geo::v2::Position& _internal_home() const;
  ::city::geo::v2::Position* _internal_mutable_home();

  public:
  // optional .city.person.v1.VehicleAttribute vehicle_attribute = 7 [json_name = "vehicleAttribute"];
  bool has_vehicle_attribute() const;
  void clear_vehicle_attribute() ;
  const ::city::person::v1::VehicleAttribute& vehicle_attribute() const;
  PROTOBUF_NODISCARD ::city::person::v1::VehicleAttribute* release_vehicle_attribute();
  ::city::person::v1::VehicleAttribute* mutable_vehicle_attribute();
  void set_allocated_vehicle_attribute(::city::person::v1::VehicleAttribute* value);
  void unsafe_arena_set_allocated_vehicle_attribute(::city::person::v1::VehicleAttribute* value);
  ::city::person::v1::VehicleAttribute* unsafe_arena_release_vehicle_attribute();

  private:
  const ::city::person::v1::VehicleAttribute& _internal_vehicle_attribute() const;
  ::city::person::v1::VehicleAttribute* _internal_mutable_vehicle_attribute();

  public:
  // optional .city.person.v1.BusAttribute bus_attribute = 8 [json_name = "busAttribute"];
  bool has_bus_attribute() const;
  void clear_bus_attribute() ;
  const ::city::person::v1::BusAttribute& bus_attribute() const;
  PROTOBUF_NODISCARD ::city::person::v1::BusAttribute* release_bus_attribute();
  ::city::person::v1::BusAttribute* mutable_bus_attribute();
  void set_allocated_bus_attribute(::city::person::v1::BusAttribute* value);
  void unsafe_arena_set_allocated_bus_attribute(::city::person::v1::BusAttribute* value);
  ::city::person::v1::BusAttribute* unsafe_arena_release_bus_attribute();

  private:
  const ::city::person::v1::BusAttribute& _internal_bus_attribute() const;
  ::city::person::v1::BusAttribute* _internal_mutable_bus_attribute();

  public:
  // optional .city.person.v1.BikeAttribute bike_attribute = 9 [json_name = "bikeAttribute"];
  bool has_bike_attribute() const;
  void clear_bike_attribute() ;
  const ::city::person::v1::BikeAttribute& bike_attribute() const;
  PROTOBUF_NODISCARD ::city::person::v1::BikeAttribute* release_bike_attribute();
  ::city::person::v1::BikeAttribute* mutable_bike_attribute();
  void set_allocated_bike_attribute(::city::person::v1::BikeAttribute* value);
  void unsafe_arena_set_allocated_bike_attribute(::city::person::v1::BikeAttribute* value);
  ::city::person::v1::BikeAttribute* unsafe_arena_release_bike_attribute();

  private:
  const ::city::person::v1::BikeAttribute& _internal_bike_attribute() const;
  ::city::person::v1::BikeAttribute* _internal_mutable_bike_attribute();

  public:
  // optional .city.person.v1.PersonProfile profile = 11 [json_name = "profile"];
  bool has_profile() const;
  void clear_profile() ;
  const ::city::person::v1::PersonProfile& profile() const;
  PROTOBUF_NODISCARD ::city::person::v1::PersonProfile* release_profile();
  ::city::person::v1::PersonProfile* mutable_profile();
  void set_allocated_profile(::city::person::v1::PersonProfile* value);
  void unsafe_arena_set_allocated_profile(::city::person::v1::PersonProfile* value);
  ::city::person::v1::PersonProfile* unsafe_arena_release_profile();

  private:
  const ::city::person::v1::PersonProfile& _internal_profile() const;
  ::city::person::v1::PersonProfile* _internal_mutable_profile();

  public:
  // optional .city.person.v1.PedestrianAttribute pedestrian_attribute = 12 [json_name = "pedestrianAttribute"];
  bool has_pedestrian_attribute() const;
  void clear_pedestrian_attribute() ;
  const ::city::person::v1::PedestrianAttribute& pedestrian_attribute() const;
  PROTOBUF_NODISCARD ::city::person::v1::PedestrianAttribute* release_pedestrian_attribute();
  ::city::person::v1::PedestrianAttribute* mutable_pedestrian_attribute();
  void set_allocated_pedestrian_attribute(::city::person::v1::PedestrianAttribute* value);
  void unsafe_arena_set_allocated_pedestrian_attribute(::city::person::v1::PedestrianAttribute* value);
  ::city::person::v1::PedestrianAttribute* unsafe_arena_release_pedestrian_attribute();

  private:
  const ::city::person::v1::PedestrianAttribute& _internal_pedestrian_attribute() const;
  ::city::person::v1::PedestrianAttribute* _internal_mutable_pedestrian_attribute();

  public:
  // int32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.person.v1.Person)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10, 9, 44, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::city::trip::v2::Schedule > schedules_;
    ::google::protobuf::internal::MapField<Person_LabelsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        labels_;
    ::city::person::v1::PersonAttribute* attribute_;
    ::city::geo::v2::Position* home_;
    ::city::person::v1::VehicleAttribute* vehicle_attribute_;
    ::city::person::v1::BusAttribute* bus_attribute_;
    ::city::person::v1::BikeAttribute* bike_attribute_;
    ::city::person::v1::PersonProfile* profile_;
    ::city::person::v1::PedestrianAttribute* pedestrian_attribute_;
    ::int32_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv1_2fperson_2eproto;
};// -------------------------------------------------------------------

class Persons final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.person.v1.Persons) */ {
 public:
  inline Persons() : Persons(nullptr) {}
  ~Persons() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Persons(::google::protobuf::internal::ConstantInitialized);

  Persons(const Persons& from);
  Persons(Persons&& from) noexcept
    : Persons() {
    *this = ::std::move(from);
  }

  inline Persons& operator=(const Persons& from) {
    CopyFrom(from);
    return *this;
  }
  inline Persons& operator=(Persons&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Persons& default_instance() {
    return *internal_default_instance();
  }
  static inline const Persons* internal_default_instance() {
    return reinterpret_cast<const Persons*>(
               &_Persons_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Persons& a, Persons& b) {
    a.Swap(&b);
  }
  inline void Swap(Persons* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Persons* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Persons* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Persons>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Persons& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Persons& from) {
    Persons::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Persons* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.person.v1.Persons";
  }
  protected:
  explicit Persons(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonsFieldNumber = 1,
  };
  // repeated .city.person.v1.Person persons = 1 [json_name = "persons"];
  int persons_size() const;
  private:
  int _internal_persons_size() const;

  public:
  void clear_persons() ;
  ::city::person::v1::Person* mutable_persons(int index);
  ::google::protobuf::RepeatedPtrField< ::city::person::v1::Person >*
      mutable_persons();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::person::v1::Person>& _internal_persons() const;
  ::google::protobuf::RepeatedPtrField<::city::person::v1::Person>* _internal_mutable_persons();
  public:
  const ::city::person::v1::Person& persons(int index) const;
  ::city::person::v1::Person* add_persons();
  const ::google::protobuf::RepeatedPtrField< ::city::person::v1::Person >&
      persons() const;
  // @@protoc_insertion_point(class_scope:city.person.v1.Persons)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::city::person::v1::Person > persons_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fperson_2fv1_2fperson_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PersonAttribute

// double length = 2 [json_name = "length"];
inline void PersonAttribute::clear_length() {
  _impl_.length_ = 0;
}
inline double PersonAttribute::length() const {
  // @@protoc_insertion_point(field_get:city.person.v1.PersonAttribute.length)
  return _internal_length();
}
inline void PersonAttribute::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:city.person.v1.PersonAttribute.length)
}
inline double PersonAttribute::_internal_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.length_;
}
inline void PersonAttribute::_internal_set_length(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.length_ = value;
}

// double width = 3 [json_name = "width"];
inline void PersonAttribute::clear_width() {
  _impl_.width_ = 0;
}
inline double PersonAttribute::width() const {
  // @@protoc_insertion_point(field_get:city.person.v1.PersonAttribute.width)
  return _internal_width();
}
inline void PersonAttribute::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:city.person.v1.PersonAttribute.width)
}
inline double PersonAttribute::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void PersonAttribute::_internal_set_width(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// double max_speed = 4 [json_name = "maxSpeed"];
inline void PersonAttribute::clear_max_speed() {
  _impl_.max_speed_ = 0;
}
inline double PersonAttribute::max_speed() const {
  // @@protoc_insertion_point(field_get:city.person.v1.PersonAttribute.max_speed)
  return _internal_max_speed();
}
inline void PersonAttribute::set_max_speed(double value) {
  _internal_set_max_speed(value);
  // @@protoc_insertion_point(field_set:city.person.v1.PersonAttribute.max_speed)
}
inline double PersonAttribute::_internal_max_speed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_speed_;
}
inline void PersonAttribute::_internal_set_max_speed(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_speed_ = value;
}

// double max_acceleration = 5 [json_name = "maxAcceleration"];
inline void PersonAttribute::clear_max_acceleration() {
  _impl_.max_acceleration_ = 0;
}
inline double PersonAttribute::max_acceleration() const {
  // @@protoc_insertion_point(field_get:city.person.v1.PersonAttribute.max_acceleration)
  return _internal_max_acceleration();
}
inline void PersonAttribute::set_max_acceleration(double value) {
  _internal_set_max_acceleration(value);
  // @@protoc_insertion_point(field_set:city.person.v1.PersonAttribute.max_acceleration)
}
inline double PersonAttribute::_internal_max_acceleration() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_acceleration_;
}
inline void PersonAttribute::_internal_set_max_acceleration(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_acceleration_ = value;
}

// double max_braking_acceleration = 6 [json_name = "maxBrakingAcceleration"];
inline void PersonAttribute::clear_max_braking_acceleration() {
  _impl_.max_braking_acceleration_ = 0;
}
inline double PersonAttribute::max_braking_acceleration() const {
  // @@protoc_insertion_point(field_get:city.person.v1.PersonAttribute.max_braking_acceleration)
  return _internal_max_braking_acceleration();
}
inline void PersonAttribute::set_max_braking_acceleration(double value) {
  _internal_set_max_braking_acceleration(value);
  // @@protoc_insertion_point(field_set:city.person.v1.PersonAttribute.max_braking_acceleration)
}
inline double PersonAttribute::_internal_max_braking_acceleration() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_braking_acceleration_;
}
inline void PersonAttribute::_internal_set_max_braking_acceleration(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_braking_acceleration_ = value;
}

// double usual_acceleration = 7 [json_name = "usualAcceleration"];
inline void PersonAttribute::clear_usual_acceleration() {
  _impl_.usual_acceleration_ = 0;
}
inline double PersonAttribute::usual_acceleration() const {
  // @@protoc_insertion_point(field_get:city.person.v1.PersonAttribute.usual_acceleration)
  return _internal_usual_acceleration();
}
inline void PersonAttribute::set_usual_acceleration(double value) {
  _internal_set_usual_acceleration(value);
  // @@protoc_insertion_point(field_set:city.person.v1.PersonAttribute.usual_acceleration)
}
inline double PersonAttribute::_internal_usual_acceleration() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.usual_acceleration_;
}
inline void PersonAttribute::_internal_set_usual_acceleration(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.usual_acceleration_ = value;
}

// double usual_braking_acceleration = 8 [json_name = "usualBrakingAcceleration"];
inline void PersonAttribute::clear_usual_braking_acceleration() {
  _impl_.usual_braking_acceleration_ = 0;
}
inline double PersonAttribute::usual_braking_acceleration() const {
  // @@protoc_insertion_point(field_get:city.person.v1.PersonAttribute.usual_braking_acceleration)
  return _internal_usual_braking_acceleration();
}
inline void PersonAttribute::set_usual_braking_acceleration(double value) {
  _internal_set_usual_braking_acceleration(value);
  // @@protoc_insertion_point(field_set:city.person.v1.PersonAttribute.usual_braking_acceleration)
}
inline double PersonAttribute::_internal_usual_braking_acceleration() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.usual_braking_acceleration_;
}
inline void PersonAttribute::_internal_set_usual_braking_acceleration(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.usual_braking_acceleration_ = value;
}

// -------------------------------------------------------------------

// VehicleAttribute

// double lane_change_length = 1 [json_name = "laneChangeLength"];
inline void VehicleAttribute::clear_lane_change_length() {
  _impl_.lane_change_length_ = 0;
}
inline double VehicleAttribute::lane_change_length() const {
  // @@protoc_insertion_point(field_get:city.person.v1.VehicleAttribute.lane_change_length)
  return _internal_lane_change_length();
}
inline void VehicleAttribute::set_lane_change_length(double value) {
  _internal_set_lane_change_length(value);
  // @@protoc_insertion_point(field_set:city.person.v1.VehicleAttribute.lane_change_length)
}
inline double VehicleAttribute::_internal_lane_change_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lane_change_length_;
}
inline void VehicleAttribute::_internal_set_lane_change_length(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lane_change_length_ = value;
}

// double min_gap = 2 [json_name = "minGap"];
inline void VehicleAttribute::clear_min_gap() {
  _impl_.min_gap_ = 0;
}
inline double VehicleAttribute::min_gap() const {
  // @@protoc_insertion_point(field_get:city.person.v1.VehicleAttribute.min_gap)
  return _internal_min_gap();
}
inline void VehicleAttribute::set_min_gap(double value) {
  _internal_set_min_gap(value);
  // @@protoc_insertion_point(field_set:city.person.v1.VehicleAttribute.min_gap)
}
inline double VehicleAttribute::_internal_min_gap() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_gap_;
}
inline void VehicleAttribute::_internal_set_min_gap(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.min_gap_ = value;
}

// optional string model = 3 [json_name = "model"];
inline bool VehicleAttribute::has_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VehicleAttribute::clear_model() {
  _impl_.model_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VehicleAttribute::model() const {
  // @@protoc_insertion_point(field_get:city.person.v1.VehicleAttribute.model)
  return _internal_model();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VehicleAttribute::set_model(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.person.v1.VehicleAttribute.model)
}
inline std::string* VehicleAttribute::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:city.person.v1.VehicleAttribute.model)
  return _s;
}
inline const std::string& VehicleAttribute::_internal_model() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_.Get();
}
inline void VehicleAttribute::_internal_set_model(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* VehicleAttribute::_internal_mutable_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_.Mutable( GetArenaForAllocation());
}
inline std::string* VehicleAttribute::release_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.person.v1.VehicleAttribute.model)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.model_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VehicleAttribute::set_allocated_model(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_.IsDefault()) {
          _impl_.model_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.person.v1.VehicleAttribute.model)
}

// -------------------------------------------------------------------

// BusAttribute

// int32 line_id = 1 [json_name = "lineId"];
inline void BusAttribute::clear_line_id() {
  _impl_.line_id_ = 0;
}
inline ::int32_t BusAttribute::line_id() const {
  // @@protoc_insertion_point(field_get:city.person.v1.BusAttribute.line_id)
  return _internal_line_id();
}
inline void BusAttribute::set_line_id(::int32_t value) {
  _internal_set_line_id(value);
  // @@protoc_insertion_point(field_set:city.person.v1.BusAttribute.line_id)
}
inline ::int32_t BusAttribute::_internal_line_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.line_id_;
}
inline void BusAttribute::_internal_set_line_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.line_id_ = value;
}

// int32 capacity = 2 [json_name = "capacity"];
inline void BusAttribute::clear_capacity() {
  _impl_.capacity_ = 0;
}
inline ::int32_t BusAttribute::capacity() const {
  // @@protoc_insertion_point(field_get:city.person.v1.BusAttribute.capacity)
  return _internal_capacity();
}
inline void BusAttribute::set_capacity(::int32_t value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:city.person.v1.BusAttribute.capacity)
}
inline ::int32_t BusAttribute::_internal_capacity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.capacity_;
}
inline void BusAttribute::_internal_set_capacity(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.capacity_ = value;
}

// optional string model = 3 [json_name = "model"];
inline bool BusAttribute::has_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BusAttribute::clear_model() {
  _impl_.model_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BusAttribute::model() const {
  // @@protoc_insertion_point(field_get:city.person.v1.BusAttribute.model)
  return _internal_model();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BusAttribute::set_model(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.person.v1.BusAttribute.model)
}
inline std::string* BusAttribute::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:city.person.v1.BusAttribute.model)
  return _s;
}
inline const std::string& BusAttribute::_internal_model() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_.Get();
}
inline void BusAttribute::_internal_set_model(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* BusAttribute::_internal_mutable_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_.Mutable( GetArenaForAllocation());
}
inline std::string* BusAttribute::release_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.person.v1.BusAttribute.model)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.model_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BusAttribute::set_allocated_model(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_.IsDefault()) {
          _impl_.model_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.person.v1.BusAttribute.model)
}

// -------------------------------------------------------------------

// PedestrianAttribute

// double speed = 1 [json_name = "speed"];
inline void PedestrianAttribute::clear_speed() {
  _impl_.speed_ = 0;
}
inline double PedestrianAttribute::speed() const {
  // @@protoc_insertion_point(field_get:city.person.v1.PedestrianAttribute.speed)
  return _internal_speed();
}
inline void PedestrianAttribute::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:city.person.v1.PedestrianAttribute.speed)
}
inline double PedestrianAttribute::_internal_speed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.speed_;
}
inline void PedestrianAttribute::_internal_set_speed(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.speed_ = value;
}

// optional string model = 2 [json_name = "model"];
inline bool PedestrianAttribute::has_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PedestrianAttribute::clear_model() {
  _impl_.model_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PedestrianAttribute::model() const {
  // @@protoc_insertion_point(field_get:city.person.v1.PedestrianAttribute.model)
  return _internal_model();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PedestrianAttribute::set_model(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.person.v1.PedestrianAttribute.model)
}
inline std::string* PedestrianAttribute::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:city.person.v1.PedestrianAttribute.model)
  return _s;
}
inline const std::string& PedestrianAttribute::_internal_model() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_.Get();
}
inline void PedestrianAttribute::_internal_set_model(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* PedestrianAttribute::_internal_mutable_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_.Mutable( GetArenaForAllocation());
}
inline std::string* PedestrianAttribute::release_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.person.v1.PedestrianAttribute.model)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.model_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PedestrianAttribute::set_allocated_model(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_.IsDefault()) {
          _impl_.model_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.person.v1.PedestrianAttribute.model)
}

// -------------------------------------------------------------------

// BikeAttribute

// double speed = 1 [json_name = "speed"];
inline void BikeAttribute::clear_speed() {
  _impl_.speed_ = 0;
}
inline double BikeAttribute::speed() const {
  // @@protoc_insertion_point(field_get:city.person.v1.BikeAttribute.speed)
  return _internal_speed();
}
inline void BikeAttribute::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:city.person.v1.BikeAttribute.speed)
}
inline double BikeAttribute::_internal_speed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.speed_;
}
inline void BikeAttribute::_internal_set_speed(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.speed_ = value;
}

// optional string model = 2 [json_name = "model"];
inline bool BikeAttribute::has_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BikeAttribute::clear_model() {
  _impl_.model_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BikeAttribute::model() const {
  // @@protoc_insertion_point(field_get:city.person.v1.BikeAttribute.model)
  return _internal_model();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BikeAttribute::set_model(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.person.v1.BikeAttribute.model)
}
inline std::string* BikeAttribute::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:city.person.v1.BikeAttribute.model)
  return _s;
}
inline const std::string& BikeAttribute::_internal_model() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_.Get();
}
inline void BikeAttribute::_internal_set_model(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.model_.Set(value, GetArenaForAllocation());
}
inline std::string* BikeAttribute::_internal_mutable_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.model_.Mutable( GetArenaForAllocation());
}
inline std::string* BikeAttribute::release_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.person.v1.BikeAttribute.model)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.model_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BikeAttribute::set_allocated_model(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.model_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_.IsDefault()) {
          _impl_.model_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.person.v1.BikeAttribute.model)
}

// -------------------------------------------------------------------

// PersonProfile

// int32 age = 1 [json_name = "age"];
inline void PersonProfile::clear_age() {
  _impl_.age_ = 0;
}
inline ::int32_t PersonProfile::age() const {
  // @@protoc_insertion_point(field_get:city.person.v1.PersonProfile.age)
  return _internal_age();
}
inline void PersonProfile::set_age(::int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:city.person.v1.PersonProfile.age)
}
inline ::int32_t PersonProfile::_internal_age() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.age_;
}
inline void PersonProfile::_internal_set_age(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.age_ = value;
}

// .city.person.v1.Education education = 2 [json_name = "education"];
inline void PersonProfile::clear_education() {
  _impl_.education_ = 0;
}
inline ::city::person::v1::Education PersonProfile::education() const {
  // @@protoc_insertion_point(field_get:city.person.v1.PersonProfile.education)
  return _internal_education();
}
inline void PersonProfile::set_education(::city::person::v1::Education value) {
  _internal_set_education(value);
  // @@protoc_insertion_point(field_set:city.person.v1.PersonProfile.education)
}
inline ::city::person::v1::Education PersonProfile::_internal_education() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::person::v1::Education>(_impl_.education_);
}
inline void PersonProfile::_internal_set_education(::city::person::v1::Education value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.education_ = value;
}

// .city.person.v1.Gender gender = 3 [json_name = "gender"];
inline void PersonProfile::clear_gender() {
  _impl_.gender_ = 0;
}
inline ::city::person::v1::Gender PersonProfile::gender() const {
  // @@protoc_insertion_point(field_get:city.person.v1.PersonProfile.gender)
  return _internal_gender();
}
inline void PersonProfile::set_gender(::city::person::v1::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:city.person.v1.PersonProfile.gender)
}
inline ::city::person::v1::Gender PersonProfile::_internal_gender() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::person::v1::Gender>(_impl_.gender_);
}
inline void PersonProfile::_internal_set_gender(::city::person::v1::Gender value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gender_ = value;
}

// .city.person.v1.Consumption consumption = 4 [json_name = "consumption"];
inline void PersonProfile::clear_consumption() {
  _impl_.consumption_ = 0;
}
inline ::city::person::v1::Consumption PersonProfile::consumption() const {
  // @@protoc_insertion_point(field_get:city.person.v1.PersonProfile.consumption)
  return _internal_consumption();
}
inline void PersonProfile::set_consumption(::city::person::v1::Consumption value) {
  _internal_set_consumption(value);
  // @@protoc_insertion_point(field_set:city.person.v1.PersonProfile.consumption)
}
inline ::city::person::v1::Consumption PersonProfile::_internal_consumption() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::person::v1::Consumption>(_impl_.consumption_);
}
inline void PersonProfile::_internal_set_consumption(::city::person::v1::Consumption value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.consumption_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Person

// int32 id = 1 [json_name = "id"];
inline void Person::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t Person::id() const {
  // @@protoc_insertion_point(field_get:city.person.v1.Person.id)
  return _internal_id();
}
inline void Person::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.person.v1.Person.id)
}
inline ::int32_t Person::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Person::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .city.person.v1.PersonAttribute attribute = 2 [json_name = "attribute"];
inline bool Person::has_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attribute_ != nullptr);
  return value;
}
inline void Person::clear_attribute() {
  if (_impl_.attribute_ != nullptr) _impl_.attribute_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::city::person::v1::PersonAttribute& Person::_internal_attribute() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::person::v1::PersonAttribute* p = _impl_.attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v1::PersonAttribute&>(::city::person::v1::_PersonAttribute_default_instance_);
}
inline const ::city::person::v1::PersonAttribute& Person::attribute() const {
  // @@protoc_insertion_point(field_get:city.person.v1.Person.attribute)
  return _internal_attribute();
}
inline void Person::unsafe_arena_set_allocated_attribute(::city::person::v1::PersonAttribute* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attribute_);
  }
  _impl_.attribute_ = reinterpret_cast<::city::person::v1::PersonAttribute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v1.Person.attribute)
}
inline ::city::person::v1::PersonAttribute* Person::release_attribute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::person::v1::PersonAttribute* released = _impl_.attribute_;
  _impl_.attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::person::v1::PersonAttribute* Person::unsafe_arena_release_attribute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.person.v1.Person.attribute)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::person::v1::PersonAttribute* temp = _impl_.attribute_;
  _impl_.attribute_ = nullptr;
  return temp;
}
inline ::city::person::v1::PersonAttribute* Person::_internal_mutable_attribute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v1::PersonAttribute>(GetArenaForAllocation());
    _impl_.attribute_ = reinterpret_cast<::city::person::v1::PersonAttribute*>(p);
  }
  return _impl_.attribute_;
}
inline ::city::person::v1::PersonAttribute* Person::mutable_attribute() {
  ::city::person::v1::PersonAttribute* _msg = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:city.person.v1.Person.attribute)
  return _msg;
}
inline void Person::set_allocated_attribute(::city::person::v1::PersonAttribute* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::city::person::v1::PersonAttribute*>(_impl_.attribute_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::city::person::v1::PersonAttribute*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.attribute_ = reinterpret_cast<::city::person::v1::PersonAttribute*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.person.v1.Person.attribute)
}

// .city.geo.v2.Position home = 3 [json_name = "home"];
inline bool Person::has_home() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.home_ != nullptr);
  return value;
}
inline const ::city::geo::v2::Position& Person::_internal_home() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::geo::v2::Position* p = _impl_.home_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::Position&>(::city::geo::v2::_Position_default_instance_);
}
inline const ::city::geo::v2::Position& Person::home() const {
  // @@protoc_insertion_point(field_get:city.person.v1.Person.home)
  return _internal_home();
}
inline void Person::unsafe_arena_set_allocated_home(::city::geo::v2::Position* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.home_);
  }
  _impl_.home_ = reinterpret_cast<::city::geo::v2::Position*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v1.Person.home)
}
inline ::city::geo::v2::Position* Person::release_home() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::geo::v2::Position* released = _impl_.home_;
  _impl_.home_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::geo::v2::Position* Person::unsafe_arena_release_home() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.person.v1.Person.home)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::geo::v2::Position* temp = _impl_.home_;
  _impl_.home_ = nullptr;
  return temp;
}
inline ::city::geo::v2::Position* Person::_internal_mutable_home() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.home_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::Position>(GetArenaForAllocation());
    _impl_.home_ = reinterpret_cast<::city::geo::v2::Position*>(p);
  }
  return _impl_.home_;
}
inline ::city::geo::v2::Position* Person::mutable_home() {
  ::city::geo::v2::Position* _msg = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:city.person.v1.Person.home)
  return _msg;
}
inline void Person::set_allocated_home(::city::geo::v2::Position* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.home_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.home_ = reinterpret_cast<::city::geo::v2::Position*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.person.v1.Person.home)
}

// repeated .city.trip.v2.Schedule schedules = 4 [json_name = "schedules"];
inline int Person::_internal_schedules_size() const {
  return _internal_schedules().size();
}
inline int Person::schedules_size() const {
  return _internal_schedules_size();
}
inline ::city::trip::v2::Schedule* Person::mutable_schedules(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v1.Person.schedules)
  return _internal_mutable_schedules()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::trip::v2::Schedule >*
Person::mutable_schedules() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v1.Person.schedules)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_schedules();
}
inline const ::city::trip::v2::Schedule& Person::schedules(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v1.Person.schedules)
    return _internal_schedules().Get(index);
}
inline ::city::trip::v2::Schedule* Person::add_schedules() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::trip::v2::Schedule* _add = _internal_mutable_schedules()->Add();
  // @@protoc_insertion_point(field_add:city.person.v1.Person.schedules)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::trip::v2::Schedule >&
Person::schedules() const {
  // @@protoc_insertion_point(field_list:city.person.v1.Person.schedules)
  return _internal_schedules();
}
inline const ::google::protobuf::RepeatedPtrField<::city::trip::v2::Schedule>&
Person::_internal_schedules() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.schedules_;
}
inline ::google::protobuf::RepeatedPtrField<::city::trip::v2::Schedule>*
Person::_internal_mutable_schedules() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.schedules_;
}

// optional .city.person.v1.VehicleAttribute vehicle_attribute = 7 [json_name = "vehicleAttribute"];
inline bool Person::has_vehicle_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_attribute_ != nullptr);
  return value;
}
inline void Person::clear_vehicle_attribute() {
  if (_impl_.vehicle_attribute_ != nullptr) _impl_.vehicle_attribute_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::city::person::v1::VehicleAttribute& Person::_internal_vehicle_attribute() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::person::v1::VehicleAttribute* p = _impl_.vehicle_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v1::VehicleAttribute&>(::city::person::v1::_VehicleAttribute_default_instance_);
}
inline const ::city::person::v1::VehicleAttribute& Person::vehicle_attribute() const {
  // @@protoc_insertion_point(field_get:city.person.v1.Person.vehicle_attribute)
  return _internal_vehicle_attribute();
}
inline void Person::unsafe_arena_set_allocated_vehicle_attribute(::city::person::v1::VehicleAttribute* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vehicle_attribute_);
  }
  _impl_.vehicle_attribute_ = reinterpret_cast<::city::person::v1::VehicleAttribute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v1.Person.vehicle_attribute)
}
inline ::city::person::v1::VehicleAttribute* Person::release_vehicle_attribute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::person::v1::VehicleAttribute* released = _impl_.vehicle_attribute_;
  _impl_.vehicle_attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::person::v1::VehicleAttribute* Person::unsafe_arena_release_vehicle_attribute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.person.v1.Person.vehicle_attribute)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::person::v1::VehicleAttribute* temp = _impl_.vehicle_attribute_;
  _impl_.vehicle_attribute_ = nullptr;
  return temp;
}
inline ::city::person::v1::VehicleAttribute* Person::_internal_mutable_vehicle_attribute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.vehicle_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v1::VehicleAttribute>(GetArenaForAllocation());
    _impl_.vehicle_attribute_ = reinterpret_cast<::city::person::v1::VehicleAttribute*>(p);
  }
  return _impl_.vehicle_attribute_;
}
inline ::city::person::v1::VehicleAttribute* Person::mutable_vehicle_attribute() {
  ::city::person::v1::VehicleAttribute* _msg = _internal_mutable_vehicle_attribute();
  // @@protoc_insertion_point(field_mutable:city.person.v1.Person.vehicle_attribute)
  return _msg;
}
inline void Person::set_allocated_vehicle_attribute(::city::person::v1::VehicleAttribute* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::city::person::v1::VehicleAttribute*>(_impl_.vehicle_attribute_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::city::person::v1::VehicleAttribute*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.vehicle_attribute_ = reinterpret_cast<::city::person::v1::VehicleAttribute*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.person.v1.Person.vehicle_attribute)
}

// optional .city.person.v1.BusAttribute bus_attribute = 8 [json_name = "busAttribute"];
inline bool Person::has_bus_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bus_attribute_ != nullptr);
  return value;
}
inline void Person::clear_bus_attribute() {
  if (_impl_.bus_attribute_ != nullptr) _impl_.bus_attribute_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::city::person::v1::BusAttribute& Person::_internal_bus_attribute() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::person::v1::BusAttribute* p = _impl_.bus_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v1::BusAttribute&>(::city::person::v1::_BusAttribute_default_instance_);
}
inline const ::city::person::v1::BusAttribute& Person::bus_attribute() const {
  // @@protoc_insertion_point(field_get:city.person.v1.Person.bus_attribute)
  return _internal_bus_attribute();
}
inline void Person::unsafe_arena_set_allocated_bus_attribute(::city::person::v1::BusAttribute* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bus_attribute_);
  }
  _impl_.bus_attribute_ = reinterpret_cast<::city::person::v1::BusAttribute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v1.Person.bus_attribute)
}
inline ::city::person::v1::BusAttribute* Person::release_bus_attribute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::city::person::v1::BusAttribute* released = _impl_.bus_attribute_;
  _impl_.bus_attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::person::v1::BusAttribute* Person::unsafe_arena_release_bus_attribute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.person.v1.Person.bus_attribute)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::city::person::v1::BusAttribute* temp = _impl_.bus_attribute_;
  _impl_.bus_attribute_ = nullptr;
  return temp;
}
inline ::city::person::v1::BusAttribute* Person::_internal_mutable_bus_attribute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.bus_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v1::BusAttribute>(GetArenaForAllocation());
    _impl_.bus_attribute_ = reinterpret_cast<::city::person::v1::BusAttribute*>(p);
  }
  return _impl_.bus_attribute_;
}
inline ::city::person::v1::BusAttribute* Person::mutable_bus_attribute() {
  ::city::person::v1::BusAttribute* _msg = _internal_mutable_bus_attribute();
  // @@protoc_insertion_point(field_mutable:city.person.v1.Person.bus_attribute)
  return _msg;
}
inline void Person::set_allocated_bus_attribute(::city::person::v1::BusAttribute* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::city::person::v1::BusAttribute*>(_impl_.bus_attribute_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::city::person::v1::BusAttribute*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.bus_attribute_ = reinterpret_cast<::city::person::v1::BusAttribute*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.person.v1.Person.bus_attribute)
}

// optional .city.person.v1.PedestrianAttribute pedestrian_attribute = 12 [json_name = "pedestrianAttribute"];
inline bool Person::has_pedestrian_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pedestrian_attribute_ != nullptr);
  return value;
}
inline void Person::clear_pedestrian_attribute() {
  if (_impl_.pedestrian_attribute_ != nullptr) _impl_.pedestrian_attribute_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::city::person::v1::PedestrianAttribute& Person::_internal_pedestrian_attribute() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::person::v1::PedestrianAttribute* p = _impl_.pedestrian_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v1::PedestrianAttribute&>(::city::person::v1::_PedestrianAttribute_default_instance_);
}
inline const ::city::person::v1::PedestrianAttribute& Person::pedestrian_attribute() const {
  // @@protoc_insertion_point(field_get:city.person.v1.Person.pedestrian_attribute)
  return _internal_pedestrian_attribute();
}
inline void Person::unsafe_arena_set_allocated_pedestrian_attribute(::city::person::v1::PedestrianAttribute* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pedestrian_attribute_);
  }
  _impl_.pedestrian_attribute_ = reinterpret_cast<::city::person::v1::PedestrianAttribute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v1.Person.pedestrian_attribute)
}
inline ::city::person::v1::PedestrianAttribute* Person::release_pedestrian_attribute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::city::person::v1::PedestrianAttribute* released = _impl_.pedestrian_attribute_;
  _impl_.pedestrian_attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::person::v1::PedestrianAttribute* Person::unsafe_arena_release_pedestrian_attribute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.person.v1.Person.pedestrian_attribute)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::city::person::v1::PedestrianAttribute* temp = _impl_.pedestrian_attribute_;
  _impl_.pedestrian_attribute_ = nullptr;
  return temp;
}
inline ::city::person::v1::PedestrianAttribute* Person::_internal_mutable_pedestrian_attribute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.pedestrian_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v1::PedestrianAttribute>(GetArenaForAllocation());
    _impl_.pedestrian_attribute_ = reinterpret_cast<::city::person::v1::PedestrianAttribute*>(p);
  }
  return _impl_.pedestrian_attribute_;
}
inline ::city::person::v1::PedestrianAttribute* Person::mutable_pedestrian_attribute() {
  ::city::person::v1::PedestrianAttribute* _msg = _internal_mutable_pedestrian_attribute();
  // @@protoc_insertion_point(field_mutable:city.person.v1.Person.pedestrian_attribute)
  return _msg;
}
inline void Person::set_allocated_pedestrian_attribute(::city::person::v1::PedestrianAttribute* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::city::person::v1::PedestrianAttribute*>(_impl_.pedestrian_attribute_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::city::person::v1::PedestrianAttribute*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.pedestrian_attribute_ = reinterpret_cast<::city::person::v1::PedestrianAttribute*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.person.v1.Person.pedestrian_attribute)
}

// optional .city.person.v1.BikeAttribute bike_attribute = 9 [json_name = "bikeAttribute"];
inline bool Person::has_bike_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bike_attribute_ != nullptr);
  return value;
}
inline void Person::clear_bike_attribute() {
  if (_impl_.bike_attribute_ != nullptr) _impl_.bike_attribute_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::city::person::v1::BikeAttribute& Person::_internal_bike_attribute() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::person::v1::BikeAttribute* p = _impl_.bike_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v1::BikeAttribute&>(::city::person::v1::_BikeAttribute_default_instance_);
}
inline const ::city::person::v1::BikeAttribute& Person::bike_attribute() const {
  // @@protoc_insertion_point(field_get:city.person.v1.Person.bike_attribute)
  return _internal_bike_attribute();
}
inline void Person::unsafe_arena_set_allocated_bike_attribute(::city::person::v1::BikeAttribute* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.bike_attribute_);
  }
  _impl_.bike_attribute_ = reinterpret_cast<::city::person::v1::BikeAttribute*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v1.Person.bike_attribute)
}
inline ::city::person::v1::BikeAttribute* Person::release_bike_attribute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::city::person::v1::BikeAttribute* released = _impl_.bike_attribute_;
  _impl_.bike_attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::person::v1::BikeAttribute* Person::unsafe_arena_release_bike_attribute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.person.v1.Person.bike_attribute)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::city::person::v1::BikeAttribute* temp = _impl_.bike_attribute_;
  _impl_.bike_attribute_ = nullptr;
  return temp;
}
inline ::city::person::v1::BikeAttribute* Person::_internal_mutable_bike_attribute() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.bike_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v1::BikeAttribute>(GetArenaForAllocation());
    _impl_.bike_attribute_ = reinterpret_cast<::city::person::v1::BikeAttribute*>(p);
  }
  return _impl_.bike_attribute_;
}
inline ::city::person::v1::BikeAttribute* Person::mutable_bike_attribute() {
  ::city::person::v1::BikeAttribute* _msg = _internal_mutable_bike_attribute();
  // @@protoc_insertion_point(field_mutable:city.person.v1.Person.bike_attribute)
  return _msg;
}
inline void Person::set_allocated_bike_attribute(::city::person::v1::BikeAttribute* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::city::person::v1::BikeAttribute*>(_impl_.bike_attribute_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::city::person::v1::BikeAttribute*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.bike_attribute_ = reinterpret_cast<::city::person::v1::BikeAttribute*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.person.v1.Person.bike_attribute)
}

// map<string, string> labels = 10 [json_name = "labels"];
inline int Person::_internal_labels_size() const {
  return _internal_labels().size();
}
inline int Person::labels_size() const {
  return _internal_labels_size();
}
inline void Person::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Person::_internal_labels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.labels_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Person::labels() const {
  // @@protoc_insertion_point(field_map:city.person.v1.Person.labels)
  return _internal_labels();
}
inline ::google::protobuf::Map<std::string, std::string>* Person::_internal_mutable_labels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.labels_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Person::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:city.person.v1.Person.labels)
  return _internal_mutable_labels();
}

// optional .city.person.v1.PersonProfile profile = 11 [json_name = "profile"];
inline bool Person::has_profile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.profile_ != nullptr);
  return value;
}
inline void Person::clear_profile() {
  if (_impl_.profile_ != nullptr) _impl_.profile_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::city::person::v1::PersonProfile& Person::_internal_profile() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::person::v1::PersonProfile* p = _impl_.profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::person::v1::PersonProfile&>(::city::person::v1::_PersonProfile_default_instance_);
}
inline const ::city::person::v1::PersonProfile& Person::profile() const {
  // @@protoc_insertion_point(field_get:city.person.v1.Person.profile)
  return _internal_profile();
}
inline void Person::unsafe_arena_set_allocated_profile(::city::person::v1::PersonProfile* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.profile_);
  }
  _impl_.profile_ = reinterpret_cast<::city::person::v1::PersonProfile*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.person.v1.Person.profile)
}
inline ::city::person::v1::PersonProfile* Person::release_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::city::person::v1::PersonProfile* released = _impl_.profile_;
  _impl_.profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::person::v1::PersonProfile* Person::unsafe_arena_release_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.person.v1.Person.profile)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::city::person::v1::PersonProfile* temp = _impl_.profile_;
  _impl_.profile_ = nullptr;
  return temp;
}
inline ::city::person::v1::PersonProfile* Person::_internal_mutable_profile() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::person::v1::PersonProfile>(GetArenaForAllocation());
    _impl_.profile_ = reinterpret_cast<::city::person::v1::PersonProfile*>(p);
  }
  return _impl_.profile_;
}
inline ::city::person::v1::PersonProfile* Person::mutable_profile() {
  ::city::person::v1::PersonProfile* _msg = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:city.person.v1.Person.profile)
  return _msg;
}
inline void Person::set_allocated_profile(::city::person::v1::PersonProfile* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::city::person::v1::PersonProfile*>(_impl_.profile_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::city::person::v1::PersonProfile*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.profile_ = reinterpret_cast<::city::person::v1::PersonProfile*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.person.v1.Person.profile)
}

// -------------------------------------------------------------------

// Persons

// repeated .city.person.v1.Person persons = 1 [json_name = "persons"];
inline int Persons::_internal_persons_size() const {
  return _internal_persons().size();
}
inline int Persons::persons_size() const {
  return _internal_persons_size();
}
inline void Persons::clear_persons() {
  _internal_mutable_persons()->Clear();
}
inline ::city::person::v1::Person* Persons::mutable_persons(int index) {
  // @@protoc_insertion_point(field_mutable:city.person.v1.Persons.persons)
  return _internal_mutable_persons()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::person::v1::Person >*
Persons::mutable_persons() {
  // @@protoc_insertion_point(field_mutable_list:city.person.v1.Persons.persons)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_persons();
}
inline const ::city::person::v1::Person& Persons::persons(int index) const {
  // @@protoc_insertion_point(field_get:city.person.v1.Persons.persons)
    return _internal_persons().Get(index);
}
inline ::city::person::v1::Person* Persons::add_persons() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::person::v1::Person* _add = _internal_mutable_persons()->Add();
  // @@protoc_insertion_point(field_add:city.person.v1.Persons.persons)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::person::v1::Person >&
Persons::persons() const {
  // @@protoc_insertion_point(field_list:city.person.v1.Persons.persons)
  return _internal_persons();
}
inline const ::google::protobuf::RepeatedPtrField<::city::person::v1::Person>&
Persons::_internal_persons() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.persons_;
}
inline ::google::protobuf::RepeatedPtrField<::city::person::v1::Person>*
Persons::_internal_mutable_persons() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.persons_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace person
}  // namespace city


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::city::person::v1::Education> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::person::v1::Education>() {
  return ::city::person::v1::Education_descriptor();
}
template <>
struct is_proto_enum<::city::person::v1::Gender> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::person::v1::Gender>() {
  return ::city::person::v1::Gender_descriptor();
}
template <>
struct is_proto_enum<::city::person::v1::Consumption> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::person::v1::Consumption>() {
  return ::city::person::v1::Consumption_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_city_2fperson_2fv1_2fperson_2eproto_2epb_2eh
