// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/agent/v2/agent_service.proto

#include "city/agent/v2/agent_service.pb.h"
#include "city/agent/v2/agent_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace city {
namespace agent {
namespace v2 {

static const char* AgentService_method_names[] = {
  "/city.agent.v2.AgentService/GetAgent",
  "/city.agent.v2.AgentService/AddAgent",
  "/city.agent.v2.AgentService/SetSchedule",
  "/city.agent.v2.AgentService/GetAgentsByLongLatArea",
};

std::unique_ptr< AgentService::Stub> AgentService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AgentService::Stub> stub(new AgentService::Stub(channel, options));
  return stub;
}

AgentService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetAgent_(AgentService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddAgent_(AgentService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSchedule_(AgentService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAgentsByLongLatArea_(AgentService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AgentService::Stub::GetAgent(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest& request, ::city::agent::v2::GetAgentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::agent::v2::GetAgentRequest, ::city::agent::v2::GetAgentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAgent_, context, request, response);
}

void AgentService::Stub::async::GetAgent(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest* request, ::city::agent::v2::GetAgentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::agent::v2::GetAgentRequest, ::city::agent::v2::GetAgentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgent_, context, request, response, std::move(f));
}

void AgentService::Stub::async::GetAgent(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest* request, ::city::agent::v2::GetAgentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentResponse>* AgentService::Stub::PrepareAsyncGetAgentRaw(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::agent::v2::GetAgentResponse, ::city::agent::v2::GetAgentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAgent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentResponse>* AgentService::Stub::AsyncGetAgentRaw(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAgentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgentService::Stub::AddAgent(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest& request, ::city::agent::v2::AddAgentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::agent::v2::AddAgentRequest, ::city::agent::v2::AddAgentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddAgent_, context, request, response);
}

void AgentService::Stub::async::AddAgent(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest* request, ::city::agent::v2::AddAgentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::agent::v2::AddAgentRequest, ::city::agent::v2::AddAgentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddAgent_, context, request, response, std::move(f));
}

void AgentService::Stub::async::AddAgent(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest* request, ::city::agent::v2::AddAgentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddAgent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::agent::v2::AddAgentResponse>* AgentService::Stub::PrepareAsyncAddAgentRaw(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::agent::v2::AddAgentResponse, ::city::agent::v2::AddAgentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddAgent_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::agent::v2::AddAgentResponse>* AgentService::Stub::AsyncAddAgentRaw(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddAgentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgentService::Stub::SetSchedule(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest& request, ::city::agent::v2::SetScheduleResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::agent::v2::SetScheduleRequest, ::city::agent::v2::SetScheduleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSchedule_, context, request, response);
}

void AgentService::Stub::async::SetSchedule(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest* request, ::city::agent::v2::SetScheduleResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::agent::v2::SetScheduleRequest, ::city::agent::v2::SetScheduleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSchedule_, context, request, response, std::move(f));
}

void AgentService::Stub::async::SetSchedule(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest* request, ::city::agent::v2::SetScheduleResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSchedule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::agent::v2::SetScheduleResponse>* AgentService::Stub::PrepareAsyncSetScheduleRaw(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::agent::v2::SetScheduleResponse, ::city::agent::v2::SetScheduleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSchedule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::agent::v2::SetScheduleResponse>* AgentService::Stub::AsyncSetScheduleRaw(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetScheduleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AgentService::Stub::GetAgentsByLongLatArea(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest& request, ::city::agent::v2::GetAgentsByLongLatAreaResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::agent::v2::GetAgentsByLongLatAreaRequest, ::city::agent::v2::GetAgentsByLongLatAreaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAgentsByLongLatArea_, context, request, response);
}

void AgentService::Stub::async::GetAgentsByLongLatArea(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* request, ::city::agent::v2::GetAgentsByLongLatAreaResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::agent::v2::GetAgentsByLongLatAreaRequest, ::city::agent::v2::GetAgentsByLongLatAreaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgentsByLongLatArea_, context, request, response, std::move(f));
}

void AgentService::Stub::async::GetAgentsByLongLatArea(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* request, ::city::agent::v2::GetAgentsByLongLatAreaResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAgentsByLongLatArea_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentsByLongLatAreaResponse>* AgentService::Stub::PrepareAsyncGetAgentsByLongLatAreaRaw(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::agent::v2::GetAgentsByLongLatAreaResponse, ::city::agent::v2::GetAgentsByLongLatAreaRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAgentsByLongLatArea_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentsByLongLatAreaResponse>* AgentService::Stub::AsyncGetAgentsByLongLatAreaRaw(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAgentsByLongLatAreaRaw(context, request, cq);
  result->StartCall();
  return result;
}

AgentService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentService::Service, ::city::agent::v2::GetAgentRequest, ::city::agent::v2::GetAgentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::agent::v2::GetAgentRequest* req,
             ::city::agent::v2::GetAgentResponse* resp) {
               return service->GetAgent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentService::Service, ::city::agent::v2::AddAgentRequest, ::city::agent::v2::AddAgentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::agent::v2::AddAgentRequest* req,
             ::city::agent::v2::AddAgentResponse* resp) {
               return service->AddAgent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentService::Service, ::city::agent::v2::SetScheduleRequest, ::city::agent::v2::SetScheduleResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::agent::v2::SetScheduleRequest* req,
             ::city::agent::v2::SetScheduleResponse* resp) {
               return service->SetSchedule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AgentService::Service, ::city::agent::v2::GetAgentsByLongLatAreaRequest, ::city::agent::v2::GetAgentsByLongLatAreaResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AgentService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::agent::v2::GetAgentsByLongLatAreaRequest* req,
             ::city::agent::v2::GetAgentsByLongLatAreaResponse* resp) {
               return service->GetAgentsByLongLatArea(ctx, req, resp);
             }, this)));
}

AgentService::Service::~Service() {
}

::grpc::Status AgentService::Service::GetAgent(::grpc::ServerContext* context, const ::city::agent::v2::GetAgentRequest* request, ::city::agent::v2::GetAgentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentService::Service::AddAgent(::grpc::ServerContext* context, const ::city::agent::v2::AddAgentRequest* request, ::city::agent::v2::AddAgentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentService::Service::SetSchedule(::grpc::ServerContext* context, const ::city::agent::v2::SetScheduleRequest* request, ::city::agent::v2::SetScheduleResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AgentService::Service::GetAgentsByLongLatArea(::grpc::ServerContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* request, ::city::agent::v2::GetAgentsByLongLatAreaResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace city
}  // namespace agent
}  // namespace v2

