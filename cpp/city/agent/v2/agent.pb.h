// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/agent/v2/agent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fagent_2fv2_2fagent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fagent_2fv2_2fagent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "city/geo/v2/geo.pb.h"
#include "city/trip/v2/trip.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fagent_2fv2_2fagent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fagent_2fv2_2fagent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fagent_2fv2_2fagent_2eproto;
namespace city {
namespace agent {
namespace v2 {
class Agent;
struct AgentDefaultTypeInternal;
extern AgentDefaultTypeInternal _Agent_default_instance_;
class AgentAttribute;
struct AgentAttributeDefaultTypeInternal;
extern AgentAttributeDefaultTypeInternal _AgentAttribute_default_instance_;
class Agent_LabelsEntry_DoNotUse;
struct Agent_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Agent_LabelsEntry_DoNotUseDefaultTypeInternal _Agent_LabelsEntry_DoNotUse_default_instance_;
class Agents;
struct AgentsDefaultTypeInternal;
extern AgentsDefaultTypeInternal _Agents_default_instance_;
class BikeAttribute;
struct BikeAttributeDefaultTypeInternal;
extern BikeAttributeDefaultTypeInternal _BikeAttribute_default_instance_;
class BusAttribute;
struct BusAttributeDefaultTypeInternal;
extern BusAttributeDefaultTypeInternal _BusAttribute_default_instance_;
class VehicleAttribute;
struct VehicleAttributeDefaultTypeInternal;
extern VehicleAttributeDefaultTypeInternal _VehicleAttribute_default_instance_;
}  // namespace v2
}  // namespace agent
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::agent::v2::Agent* Arena::CreateMaybeMessage<::city::agent::v2::Agent>(Arena*);
template<> ::city::agent::v2::AgentAttribute* Arena::CreateMaybeMessage<::city::agent::v2::AgentAttribute>(Arena*);
template<> ::city::agent::v2::Agent_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::city::agent::v2::Agent_LabelsEntry_DoNotUse>(Arena*);
template<> ::city::agent::v2::Agents* Arena::CreateMaybeMessage<::city::agent::v2::Agents>(Arena*);
template<> ::city::agent::v2::BikeAttribute* Arena::CreateMaybeMessage<::city::agent::v2::BikeAttribute>(Arena*);
template<> ::city::agent::v2::BusAttribute* Arena::CreateMaybeMessage<::city::agent::v2::BusAttribute>(Arena*);
template<> ::city::agent::v2::VehicleAttribute* Arena::CreateMaybeMessage<::city::agent::v2::VehicleAttribute>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace agent {
namespace v2 {

enum AgentType : int {
  AGENT_TYPE_UNSPECIFIED = 0,
  AGENT_TYPE_PERSON = 1,
  AGENT_TYPE_PRIVATE_CAR = 2,
  AGENT_TYPE_BUS = 3,
  AgentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AgentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AgentType_IsValid(int value);
constexpr AgentType AgentType_MIN = AGENT_TYPE_UNSPECIFIED;
constexpr AgentType AgentType_MAX = AGENT_TYPE_BUS;
constexpr int AgentType_ARRAYSIZE = AgentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgentType_descriptor();
template<typename T>
inline const std::string& AgentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AgentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AgentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AgentType_descriptor(), enum_t_value);
}
inline bool AgentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AgentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AgentType>(
    AgentType_descriptor(), name, value);
}
// ===================================================================

class AgentAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.agent.v2.AgentAttribute) */ {
 public:
  inline AgentAttribute() : AgentAttribute(nullptr) {}
  ~AgentAttribute() override;
  explicit PROTOBUF_CONSTEXPR AgentAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentAttribute(const AgentAttribute& from);
  AgentAttribute(AgentAttribute&& from) noexcept
    : AgentAttribute() {
    *this = ::std::move(from);
  }

  inline AgentAttribute& operator=(const AgentAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentAttribute& operator=(AgentAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentAttribute* internal_default_instance() {
    return reinterpret_cast<const AgentAttribute*>(
               &_AgentAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AgentAttribute& a, AgentAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentAttribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentAttribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AgentAttribute& from) {
    AgentAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentAttribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.agent.v2.AgentAttribute";
  }
  protected:
  explicit AgentAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 2,
    kWidthFieldNumber = 3,
    kMaxSpeedFieldNumber = 4,
    kMaxAccelerationFieldNumber = 5,
    kMaxBrakingAccelerationFieldNumber = 6,
    kUsualAccelerationFieldNumber = 7,
    kUsualBrakingAccelerationFieldNumber = 8,
    kTypeFieldNumber = 1,
  };
  // double length = 2 [json_name = "length"];
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // double width = 3 [json_name = "width"];
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double max_speed = 4 [json_name = "maxSpeed"];
  void clear_max_speed();
  double max_speed() const;
  void set_max_speed(double value);
  private:
  double _internal_max_speed() const;
  void _internal_set_max_speed(double value);
  public:

  // double max_acceleration = 5 [json_name = "maxAcceleration"];
  void clear_max_acceleration();
  double max_acceleration() const;
  void set_max_acceleration(double value);
  private:
  double _internal_max_acceleration() const;
  void _internal_set_max_acceleration(double value);
  public:

  // double max_braking_acceleration = 6 [json_name = "maxBrakingAcceleration"];
  void clear_max_braking_acceleration();
  double max_braking_acceleration() const;
  void set_max_braking_acceleration(double value);
  private:
  double _internal_max_braking_acceleration() const;
  void _internal_set_max_braking_acceleration(double value);
  public:

  // double usual_acceleration = 7 [json_name = "usualAcceleration"];
  void clear_usual_acceleration();
  double usual_acceleration() const;
  void set_usual_acceleration(double value);
  private:
  double _internal_usual_acceleration() const;
  void _internal_set_usual_acceleration(double value);
  public:

  // double usual_braking_acceleration = 8 [json_name = "usualBrakingAcceleration"];
  void clear_usual_braking_acceleration();
  double usual_braking_acceleration() const;
  void set_usual_braking_acceleration(double value);
  private:
  double _internal_usual_braking_acceleration() const;
  void _internal_set_usual_braking_acceleration(double value);
  public:

  // .city.agent.v2.AgentType type = 1 [json_name = "type"];
  void clear_type();
  ::city::agent::v2::AgentType type() const;
  void set_type(::city::agent::v2::AgentType value);
  private:
  ::city::agent::v2::AgentType _internal_type() const;
  void _internal_set_type(::city::agent::v2::AgentType value);
  public:

  // @@protoc_insertion_point(class_scope:city.agent.v2.AgentAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double length_;
    double width_;
    double max_speed_;
    double max_acceleration_;
    double max_braking_acceleration_;
    double usual_acceleration_;
    double usual_braking_acceleration_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fagent_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class VehicleAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.agent.v2.VehicleAttribute) */ {
 public:
  inline VehicleAttribute() : VehicleAttribute(nullptr) {}
  ~VehicleAttribute() override;
  explicit PROTOBUF_CONSTEXPR VehicleAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleAttribute(const VehicleAttribute& from);
  VehicleAttribute(VehicleAttribute&& from) noexcept
    : VehicleAttribute() {
    *this = ::std::move(from);
  }

  inline VehicleAttribute& operator=(const VehicleAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleAttribute& operator=(VehicleAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleAttribute* internal_default_instance() {
    return reinterpret_cast<const VehicleAttribute*>(
               &_VehicleAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VehicleAttribute& a, VehicleAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleAttribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleAttribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VehicleAttribute& from) {
    VehicleAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleAttribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.agent.v2.VehicleAttribute";
  }
  protected:
  explicit VehicleAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneChangeLengthFieldNumber = 1,
    kMinGapFieldNumber = 2,
  };
  // double lane_change_length = 1 [json_name = "laneChangeLength"];
  void clear_lane_change_length();
  double lane_change_length() const;
  void set_lane_change_length(double value);
  private:
  double _internal_lane_change_length() const;
  void _internal_set_lane_change_length(double value);
  public:

  // double min_gap = 2 [json_name = "minGap"];
  void clear_min_gap();
  double min_gap() const;
  void set_min_gap(double value);
  private:
  double _internal_min_gap() const;
  void _internal_set_min_gap(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.agent.v2.VehicleAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double lane_change_length_;
    double min_gap_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fagent_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class BusAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.agent.v2.BusAttribute) */ {
 public:
  inline BusAttribute() : BusAttribute(nullptr) {}
  ~BusAttribute() override;
  explicit PROTOBUF_CONSTEXPR BusAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusAttribute(const BusAttribute& from);
  BusAttribute(BusAttribute&& from) noexcept
    : BusAttribute() {
    *this = ::std::move(from);
  }

  inline BusAttribute& operator=(const BusAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusAttribute& operator=(BusAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusAttribute* internal_default_instance() {
    return reinterpret_cast<const BusAttribute*>(
               &_BusAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BusAttribute& a, BusAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(BusAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BusAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BusAttribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusAttribute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BusAttribute& from) {
    BusAttribute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusAttribute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.agent.v2.BusAttribute";
  }
  protected:
  explicit BusAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineIdFieldNumber = 1,
    kCapacityFieldNumber = 2,
  };
  // int32 line_id = 1 [json_name = "lineId"];
  void clear_line_id();
  int32_t line_id() const;
  void set_line_id(int32_t value);
  private:
  int32_t _internal_line_id() const;
  void _internal_set_line_id(int32_t value);
  public:

  // int32 capacity = 2 [json_name = "capacity"];
  void clear_capacity();
  int32_t capacity() const;
  void set_capacity(int32_t value);
  private:
  int32_t _internal_capacity() const;
  void _internal_set_capacity(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.agent.v2.BusAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t line_id_;
    int32_t capacity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fagent_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class BikeAttribute final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.agent.v2.BikeAttribute) */ {
 public:
  inline BikeAttribute() : BikeAttribute(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BikeAttribute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BikeAttribute(const BikeAttribute& from);
  BikeAttribute(BikeAttribute&& from) noexcept
    : BikeAttribute() {
    *this = ::std::move(from);
  }

  inline BikeAttribute& operator=(const BikeAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline BikeAttribute& operator=(BikeAttribute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BikeAttribute& default_instance() {
    return *internal_default_instance();
  }
  static inline const BikeAttribute* internal_default_instance() {
    return reinterpret_cast<const BikeAttribute*>(
               &_BikeAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BikeAttribute& a, BikeAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(BikeAttribute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BikeAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BikeAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BikeAttribute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BikeAttribute& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BikeAttribute& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.agent.v2.BikeAttribute";
  }
  protected:
  explicit BikeAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.agent.v2.BikeAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fagent_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class Agent_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Agent_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Agent_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Agent_LabelsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Agent_LabelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Agent_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Agent_LabelsEntry_DoNotUse& other);
  static const Agent_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Agent_LabelsEntry_DoNotUse*>(&_Agent_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "city.agent.v2.Agent.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "city.agent.v2.Agent.LabelsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_city_2fagent_2fv2_2fagent_2eproto;
};

// -------------------------------------------------------------------

class Agent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.agent.v2.Agent) */ {
 public:
  inline Agent() : Agent(nullptr) {}
  ~Agent() override;
  explicit PROTOBUF_CONSTEXPR Agent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Agent(const Agent& from);
  Agent(Agent&& from) noexcept
    : Agent() {
    *this = ::std::move(from);
  }

  inline Agent& operator=(const Agent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Agent& operator=(Agent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Agent& default_instance() {
    return *internal_default_instance();
  }
  static inline const Agent* internal_default_instance() {
    return reinterpret_cast<const Agent*>(
               &_Agent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Agent& a, Agent& b) {
    a.Swap(&b);
  }
  inline void Swap(Agent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Agent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Agent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Agent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Agent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Agent& from) {
    Agent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Agent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.agent.v2.Agent";
  }
  protected:
  explicit Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSchedulesFieldNumber = 4,
    kLabelsFieldNumber = 10,
    kAttributeFieldNumber = 2,
    kHomeFieldNumber = 3,
    kVehicleAttributeFieldNumber = 7,
    kBusAttributeFieldNumber = 8,
    kBikeAttributeFieldNumber = 9,
    kIdFieldNumber = 1,
  };
  // repeated .city.trip.v2.Schedule schedules = 4 [json_name = "schedules"];
  int schedules_size() const;
  private:
  int _internal_schedules_size() const;
  public:
  void clear_schedules();
  ::city::trip::v2::Schedule* mutable_schedules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::trip::v2::Schedule >*
      mutable_schedules();
  private:
  const ::city::trip::v2::Schedule& _internal_schedules(int index) const;
  ::city::trip::v2::Schedule* _internal_add_schedules();
  public:
  const ::city::trip::v2::Schedule& schedules(int index) const;
  ::city::trip::v2::Schedule* add_schedules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::trip::v2::Schedule >&
      schedules() const;

  // map<string, string> labels = 10 [json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // .city.agent.v2.AgentAttribute attribute = 2 [json_name = "attribute"];
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  const ::city::agent::v2::AgentAttribute& attribute() const;
  PROTOBUF_NODISCARD ::city::agent::v2::AgentAttribute* release_attribute();
  ::city::agent::v2::AgentAttribute* mutable_attribute();
  void set_allocated_attribute(::city::agent::v2::AgentAttribute* attribute);
  private:
  const ::city::agent::v2::AgentAttribute& _internal_attribute() const;
  ::city::agent::v2::AgentAttribute* _internal_mutable_attribute();
  public:
  void unsafe_arena_set_allocated_attribute(
      ::city::agent::v2::AgentAttribute* attribute);
  ::city::agent::v2::AgentAttribute* unsafe_arena_release_attribute();

  // .city.geo.v2.Position home = 3 [json_name = "home"];
  bool has_home() const;
  private:
  bool _internal_has_home() const;
  public:
  void clear_home();
  const ::city::geo::v2::Position& home() const;
  PROTOBUF_NODISCARD ::city::geo::v2::Position* release_home();
  ::city::geo::v2::Position* mutable_home();
  void set_allocated_home(::city::geo::v2::Position* home);
  private:
  const ::city::geo::v2::Position& _internal_home() const;
  ::city::geo::v2::Position* _internal_mutable_home();
  public:
  void unsafe_arena_set_allocated_home(
      ::city::geo::v2::Position* home);
  ::city::geo::v2::Position* unsafe_arena_release_home();

  // optional .city.agent.v2.VehicleAttribute vehicle_attribute = 7 [json_name = "vehicleAttribute"];
  bool has_vehicle_attribute() const;
  private:
  bool _internal_has_vehicle_attribute() const;
  public:
  void clear_vehicle_attribute();
  const ::city::agent::v2::VehicleAttribute& vehicle_attribute() const;
  PROTOBUF_NODISCARD ::city::agent::v2::VehicleAttribute* release_vehicle_attribute();
  ::city::agent::v2::VehicleAttribute* mutable_vehicle_attribute();
  void set_allocated_vehicle_attribute(::city::agent::v2::VehicleAttribute* vehicle_attribute);
  private:
  const ::city::agent::v2::VehicleAttribute& _internal_vehicle_attribute() const;
  ::city::agent::v2::VehicleAttribute* _internal_mutable_vehicle_attribute();
  public:
  void unsafe_arena_set_allocated_vehicle_attribute(
      ::city::agent::v2::VehicleAttribute* vehicle_attribute);
  ::city::agent::v2::VehicleAttribute* unsafe_arena_release_vehicle_attribute();

  // optional .city.agent.v2.BusAttribute bus_attribute = 8 [json_name = "busAttribute"];
  bool has_bus_attribute() const;
  private:
  bool _internal_has_bus_attribute() const;
  public:
  void clear_bus_attribute();
  const ::city::agent::v2::BusAttribute& bus_attribute() const;
  PROTOBUF_NODISCARD ::city::agent::v2::BusAttribute* release_bus_attribute();
  ::city::agent::v2::BusAttribute* mutable_bus_attribute();
  void set_allocated_bus_attribute(::city::agent::v2::BusAttribute* bus_attribute);
  private:
  const ::city::agent::v2::BusAttribute& _internal_bus_attribute() const;
  ::city::agent::v2::BusAttribute* _internal_mutable_bus_attribute();
  public:
  void unsafe_arena_set_allocated_bus_attribute(
      ::city::agent::v2::BusAttribute* bus_attribute);
  ::city::agent::v2::BusAttribute* unsafe_arena_release_bus_attribute();

  // optional .city.agent.v2.BikeAttribute bike_attribute = 9 [json_name = "bikeAttribute"];
  bool has_bike_attribute() const;
  private:
  bool _internal_has_bike_attribute() const;
  public:
  void clear_bike_attribute();
  const ::city::agent::v2::BikeAttribute& bike_attribute() const;
  PROTOBUF_NODISCARD ::city::agent::v2::BikeAttribute* release_bike_attribute();
  ::city::agent::v2::BikeAttribute* mutable_bike_attribute();
  void set_allocated_bike_attribute(::city::agent::v2::BikeAttribute* bike_attribute);
  private:
  const ::city::agent::v2::BikeAttribute& _internal_bike_attribute() const;
  ::city::agent::v2::BikeAttribute* _internal_mutable_bike_attribute();
  public:
  void unsafe_arena_set_allocated_bike_attribute(
      ::city::agent::v2::BikeAttribute* bike_attribute);
  ::city::agent::v2::BikeAttribute* unsafe_arena_release_bike_attribute();

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.agent.v2.Agent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::trip::v2::Schedule > schedules_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Agent_LabelsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> labels_;
    ::city::agent::v2::AgentAttribute* attribute_;
    ::city::geo::v2::Position* home_;
    ::city::agent::v2::VehicleAttribute* vehicle_attribute_;
    ::city::agent::v2::BusAttribute* bus_attribute_;
    ::city::agent::v2::BikeAttribute* bike_attribute_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fagent_2fv2_2fagent_2eproto;
};
// -------------------------------------------------------------------

class Agents final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.agent.v2.Agents) */ {
 public:
  inline Agents() : Agents(nullptr) {}
  ~Agents() override;
  explicit PROTOBUF_CONSTEXPR Agents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Agents(const Agents& from);
  Agents(Agents&& from) noexcept
    : Agents() {
    *this = ::std::move(from);
  }

  inline Agents& operator=(const Agents& from) {
    CopyFrom(from);
    return *this;
  }
  inline Agents& operator=(Agents&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Agents& default_instance() {
    return *internal_default_instance();
  }
  static inline const Agents* internal_default_instance() {
    return reinterpret_cast<const Agents*>(
               &_Agents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Agents& a, Agents& b) {
    a.Swap(&b);
  }
  inline void Swap(Agents* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Agents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Agents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Agents>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Agents& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Agents& from) {
    Agents::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Agents* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.agent.v2.Agents";
  }
  protected:
  explicit Agents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentsFieldNumber = 1,
  };
  // repeated .city.agent.v2.Agent agents = 1 [json_name = "agents"];
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::city::agent::v2::Agent* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::agent::v2::Agent >*
      mutable_agents();
  private:
  const ::city::agent::v2::Agent& _internal_agents(int index) const;
  ::city::agent::v2::Agent* _internal_add_agents();
  public:
  const ::city::agent::v2::Agent& agents(int index) const;
  ::city::agent::v2::Agent* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::agent::v2::Agent >&
      agents() const;

  // @@protoc_insertion_point(class_scope:city.agent.v2.Agents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::agent::v2::Agent > agents_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fagent_2fv2_2fagent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AgentAttribute

// .city.agent.v2.AgentType type = 1 [json_name = "type"];
inline void AgentAttribute::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::agent::v2::AgentType AgentAttribute::_internal_type() const {
  return static_cast< ::city::agent::v2::AgentType >(_impl_.type_);
}
inline ::city::agent::v2::AgentType AgentAttribute::type() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.AgentAttribute.type)
  return _internal_type();
}
inline void AgentAttribute::_internal_set_type(::city::agent::v2::AgentType value) {
  
  _impl_.type_ = value;
}
inline void AgentAttribute::set_type(::city::agent::v2::AgentType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.AgentAttribute.type)
}

// double length = 2 [json_name = "length"];
inline void AgentAttribute::clear_length() {
  _impl_.length_ = 0;
}
inline double AgentAttribute::_internal_length() const {
  return _impl_.length_;
}
inline double AgentAttribute::length() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.AgentAttribute.length)
  return _internal_length();
}
inline void AgentAttribute::_internal_set_length(double value) {
  
  _impl_.length_ = value;
}
inline void AgentAttribute::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.AgentAttribute.length)
}

// double width = 3 [json_name = "width"];
inline void AgentAttribute::clear_width() {
  _impl_.width_ = 0;
}
inline double AgentAttribute::_internal_width() const {
  return _impl_.width_;
}
inline double AgentAttribute::width() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.AgentAttribute.width)
  return _internal_width();
}
inline void AgentAttribute::_internal_set_width(double value) {
  
  _impl_.width_ = value;
}
inline void AgentAttribute::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.AgentAttribute.width)
}

// double max_speed = 4 [json_name = "maxSpeed"];
inline void AgentAttribute::clear_max_speed() {
  _impl_.max_speed_ = 0;
}
inline double AgentAttribute::_internal_max_speed() const {
  return _impl_.max_speed_;
}
inline double AgentAttribute::max_speed() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.AgentAttribute.max_speed)
  return _internal_max_speed();
}
inline void AgentAttribute::_internal_set_max_speed(double value) {
  
  _impl_.max_speed_ = value;
}
inline void AgentAttribute::set_max_speed(double value) {
  _internal_set_max_speed(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.AgentAttribute.max_speed)
}

// double max_acceleration = 5 [json_name = "maxAcceleration"];
inline void AgentAttribute::clear_max_acceleration() {
  _impl_.max_acceleration_ = 0;
}
inline double AgentAttribute::_internal_max_acceleration() const {
  return _impl_.max_acceleration_;
}
inline double AgentAttribute::max_acceleration() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.AgentAttribute.max_acceleration)
  return _internal_max_acceleration();
}
inline void AgentAttribute::_internal_set_max_acceleration(double value) {
  
  _impl_.max_acceleration_ = value;
}
inline void AgentAttribute::set_max_acceleration(double value) {
  _internal_set_max_acceleration(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.AgentAttribute.max_acceleration)
}

// double max_braking_acceleration = 6 [json_name = "maxBrakingAcceleration"];
inline void AgentAttribute::clear_max_braking_acceleration() {
  _impl_.max_braking_acceleration_ = 0;
}
inline double AgentAttribute::_internal_max_braking_acceleration() const {
  return _impl_.max_braking_acceleration_;
}
inline double AgentAttribute::max_braking_acceleration() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.AgentAttribute.max_braking_acceleration)
  return _internal_max_braking_acceleration();
}
inline void AgentAttribute::_internal_set_max_braking_acceleration(double value) {
  
  _impl_.max_braking_acceleration_ = value;
}
inline void AgentAttribute::set_max_braking_acceleration(double value) {
  _internal_set_max_braking_acceleration(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.AgentAttribute.max_braking_acceleration)
}

// double usual_acceleration = 7 [json_name = "usualAcceleration"];
inline void AgentAttribute::clear_usual_acceleration() {
  _impl_.usual_acceleration_ = 0;
}
inline double AgentAttribute::_internal_usual_acceleration() const {
  return _impl_.usual_acceleration_;
}
inline double AgentAttribute::usual_acceleration() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.AgentAttribute.usual_acceleration)
  return _internal_usual_acceleration();
}
inline void AgentAttribute::_internal_set_usual_acceleration(double value) {
  
  _impl_.usual_acceleration_ = value;
}
inline void AgentAttribute::set_usual_acceleration(double value) {
  _internal_set_usual_acceleration(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.AgentAttribute.usual_acceleration)
}

// double usual_braking_acceleration = 8 [json_name = "usualBrakingAcceleration"];
inline void AgentAttribute::clear_usual_braking_acceleration() {
  _impl_.usual_braking_acceleration_ = 0;
}
inline double AgentAttribute::_internal_usual_braking_acceleration() const {
  return _impl_.usual_braking_acceleration_;
}
inline double AgentAttribute::usual_braking_acceleration() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.AgentAttribute.usual_braking_acceleration)
  return _internal_usual_braking_acceleration();
}
inline void AgentAttribute::_internal_set_usual_braking_acceleration(double value) {
  
  _impl_.usual_braking_acceleration_ = value;
}
inline void AgentAttribute::set_usual_braking_acceleration(double value) {
  _internal_set_usual_braking_acceleration(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.AgentAttribute.usual_braking_acceleration)
}

// -------------------------------------------------------------------

// VehicleAttribute

// double lane_change_length = 1 [json_name = "laneChangeLength"];
inline void VehicleAttribute::clear_lane_change_length() {
  _impl_.lane_change_length_ = 0;
}
inline double VehicleAttribute::_internal_lane_change_length() const {
  return _impl_.lane_change_length_;
}
inline double VehicleAttribute::lane_change_length() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.VehicleAttribute.lane_change_length)
  return _internal_lane_change_length();
}
inline void VehicleAttribute::_internal_set_lane_change_length(double value) {
  
  _impl_.lane_change_length_ = value;
}
inline void VehicleAttribute::set_lane_change_length(double value) {
  _internal_set_lane_change_length(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.VehicleAttribute.lane_change_length)
}

// double min_gap = 2 [json_name = "minGap"];
inline void VehicleAttribute::clear_min_gap() {
  _impl_.min_gap_ = 0;
}
inline double VehicleAttribute::_internal_min_gap() const {
  return _impl_.min_gap_;
}
inline double VehicleAttribute::min_gap() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.VehicleAttribute.min_gap)
  return _internal_min_gap();
}
inline void VehicleAttribute::_internal_set_min_gap(double value) {
  
  _impl_.min_gap_ = value;
}
inline void VehicleAttribute::set_min_gap(double value) {
  _internal_set_min_gap(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.VehicleAttribute.min_gap)
}

// -------------------------------------------------------------------

// BusAttribute

// int32 line_id = 1 [json_name = "lineId"];
inline void BusAttribute::clear_line_id() {
  _impl_.line_id_ = 0;
}
inline int32_t BusAttribute::_internal_line_id() const {
  return _impl_.line_id_;
}
inline int32_t BusAttribute::line_id() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.BusAttribute.line_id)
  return _internal_line_id();
}
inline void BusAttribute::_internal_set_line_id(int32_t value) {
  
  _impl_.line_id_ = value;
}
inline void BusAttribute::set_line_id(int32_t value) {
  _internal_set_line_id(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.BusAttribute.line_id)
}

// int32 capacity = 2 [json_name = "capacity"];
inline void BusAttribute::clear_capacity() {
  _impl_.capacity_ = 0;
}
inline int32_t BusAttribute::_internal_capacity() const {
  return _impl_.capacity_;
}
inline int32_t BusAttribute::capacity() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.BusAttribute.capacity)
  return _internal_capacity();
}
inline void BusAttribute::_internal_set_capacity(int32_t value) {
  
  _impl_.capacity_ = value;
}
inline void BusAttribute::set_capacity(int32_t value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.BusAttribute.capacity)
}

// -------------------------------------------------------------------

// BikeAttribute

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Agent

// int32 id = 1 [json_name = "id"];
inline void Agent::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Agent::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Agent::id() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.Agent.id)
  return _internal_id();
}
inline void Agent::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Agent::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.Agent.id)
}

// .city.agent.v2.AgentAttribute attribute = 2 [json_name = "attribute"];
inline bool Agent::_internal_has_attribute() const {
  return this != internal_default_instance() && _impl_.attribute_ != nullptr;
}
inline bool Agent::has_attribute() const {
  return _internal_has_attribute();
}
inline void Agent::clear_attribute() {
  if (GetArenaForAllocation() == nullptr && _impl_.attribute_ != nullptr) {
    delete _impl_.attribute_;
  }
  _impl_.attribute_ = nullptr;
}
inline const ::city::agent::v2::AgentAttribute& Agent::_internal_attribute() const {
  const ::city::agent::v2::AgentAttribute* p = _impl_.attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::agent::v2::AgentAttribute&>(
      ::city::agent::v2::_AgentAttribute_default_instance_);
}
inline const ::city::agent::v2::AgentAttribute& Agent::attribute() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.Agent.attribute)
  return _internal_attribute();
}
inline void Agent::unsafe_arena_set_allocated_attribute(
    ::city::agent::v2::AgentAttribute* attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attribute_);
  }
  _impl_.attribute_ = attribute;
  if (attribute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.agent.v2.Agent.attribute)
}
inline ::city::agent::v2::AgentAttribute* Agent::release_attribute() {
  
  ::city::agent::v2::AgentAttribute* temp = _impl_.attribute_;
  _impl_.attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::agent::v2::AgentAttribute* Agent::unsafe_arena_release_attribute() {
  // @@protoc_insertion_point(field_release:city.agent.v2.Agent.attribute)
  
  ::city::agent::v2::AgentAttribute* temp = _impl_.attribute_;
  _impl_.attribute_ = nullptr;
  return temp;
}
inline ::city::agent::v2::AgentAttribute* Agent::_internal_mutable_attribute() {
  
  if (_impl_.attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::agent::v2::AgentAttribute>(GetArenaForAllocation());
    _impl_.attribute_ = p;
  }
  return _impl_.attribute_;
}
inline ::city::agent::v2::AgentAttribute* Agent::mutable_attribute() {
  ::city::agent::v2::AgentAttribute* _msg = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:city.agent.v2.Agent.attribute)
  return _msg;
}
inline void Agent::set_allocated_attribute(::city::agent::v2::AgentAttribute* attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attribute_;
  }
  if (attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attribute);
    if (message_arena != submessage_arena) {
      attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attribute_ = attribute;
  // @@protoc_insertion_point(field_set_allocated:city.agent.v2.Agent.attribute)
}

// .city.geo.v2.Position home = 3 [json_name = "home"];
inline bool Agent::_internal_has_home() const {
  return this != internal_default_instance() && _impl_.home_ != nullptr;
}
inline bool Agent::has_home() const {
  return _internal_has_home();
}
inline const ::city::geo::v2::Position& Agent::_internal_home() const {
  const ::city::geo::v2::Position* p = _impl_.home_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::Position&>(
      ::city::geo::v2::_Position_default_instance_);
}
inline const ::city::geo::v2::Position& Agent::home() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.Agent.home)
  return _internal_home();
}
inline void Agent::unsafe_arena_set_allocated_home(
    ::city::geo::v2::Position* home) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.home_);
  }
  _impl_.home_ = home;
  if (home) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.agent.v2.Agent.home)
}
inline ::city::geo::v2::Position* Agent::release_home() {
  
  ::city::geo::v2::Position* temp = _impl_.home_;
  _impl_.home_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::geo::v2::Position* Agent::unsafe_arena_release_home() {
  // @@protoc_insertion_point(field_release:city.agent.v2.Agent.home)
  
  ::city::geo::v2::Position* temp = _impl_.home_;
  _impl_.home_ = nullptr;
  return temp;
}
inline ::city::geo::v2::Position* Agent::_internal_mutable_home() {
  
  if (_impl_.home_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::Position>(GetArenaForAllocation());
    _impl_.home_ = p;
  }
  return _impl_.home_;
}
inline ::city::geo::v2::Position* Agent::mutable_home() {
  ::city::geo::v2::Position* _msg = _internal_mutable_home();
  // @@protoc_insertion_point(field_mutable:city.agent.v2.Agent.home)
  return _msg;
}
inline void Agent::set_allocated_home(::city::geo::v2::Position* home) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.home_);
  }
  if (home) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(home));
    if (message_arena != submessage_arena) {
      home = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, home, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.home_ = home;
  // @@protoc_insertion_point(field_set_allocated:city.agent.v2.Agent.home)
}

// repeated .city.trip.v2.Schedule schedules = 4 [json_name = "schedules"];
inline int Agent::_internal_schedules_size() const {
  return _impl_.schedules_.size();
}
inline int Agent::schedules_size() const {
  return _internal_schedules_size();
}
inline ::city::trip::v2::Schedule* Agent::mutable_schedules(int index) {
  // @@protoc_insertion_point(field_mutable:city.agent.v2.Agent.schedules)
  return _impl_.schedules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::trip::v2::Schedule >*
Agent::mutable_schedules() {
  // @@protoc_insertion_point(field_mutable_list:city.agent.v2.Agent.schedules)
  return &_impl_.schedules_;
}
inline const ::city::trip::v2::Schedule& Agent::_internal_schedules(int index) const {
  return _impl_.schedules_.Get(index);
}
inline const ::city::trip::v2::Schedule& Agent::schedules(int index) const {
  // @@protoc_insertion_point(field_get:city.agent.v2.Agent.schedules)
  return _internal_schedules(index);
}
inline ::city::trip::v2::Schedule* Agent::_internal_add_schedules() {
  return _impl_.schedules_.Add();
}
inline ::city::trip::v2::Schedule* Agent::add_schedules() {
  ::city::trip::v2::Schedule* _add = _internal_add_schedules();
  // @@protoc_insertion_point(field_add:city.agent.v2.Agent.schedules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::trip::v2::Schedule >&
Agent::schedules() const {
  // @@protoc_insertion_point(field_list:city.agent.v2.Agent.schedules)
  return _impl_.schedules_;
}

// optional .city.agent.v2.VehicleAttribute vehicle_attribute = 7 [json_name = "vehicleAttribute"];
inline bool Agent::_internal_has_vehicle_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_attribute_ != nullptr);
  return value;
}
inline bool Agent::has_vehicle_attribute() const {
  return _internal_has_vehicle_attribute();
}
inline void Agent::clear_vehicle_attribute() {
  if (_impl_.vehicle_attribute_ != nullptr) _impl_.vehicle_attribute_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::city::agent::v2::VehicleAttribute& Agent::_internal_vehicle_attribute() const {
  const ::city::agent::v2::VehicleAttribute* p = _impl_.vehicle_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::agent::v2::VehicleAttribute&>(
      ::city::agent::v2::_VehicleAttribute_default_instance_);
}
inline const ::city::agent::v2::VehicleAttribute& Agent::vehicle_attribute() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.Agent.vehicle_attribute)
  return _internal_vehicle_attribute();
}
inline void Agent::unsafe_arena_set_allocated_vehicle_attribute(
    ::city::agent::v2::VehicleAttribute* vehicle_attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehicle_attribute_);
  }
  _impl_.vehicle_attribute_ = vehicle_attribute;
  if (vehicle_attribute) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.agent.v2.Agent.vehicle_attribute)
}
inline ::city::agent::v2::VehicleAttribute* Agent::release_vehicle_attribute() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::agent::v2::VehicleAttribute* temp = _impl_.vehicle_attribute_;
  _impl_.vehicle_attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::agent::v2::VehicleAttribute* Agent::unsafe_arena_release_vehicle_attribute() {
  // @@protoc_insertion_point(field_release:city.agent.v2.Agent.vehicle_attribute)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::agent::v2::VehicleAttribute* temp = _impl_.vehicle_attribute_;
  _impl_.vehicle_attribute_ = nullptr;
  return temp;
}
inline ::city::agent::v2::VehicleAttribute* Agent::_internal_mutable_vehicle_attribute() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.vehicle_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::agent::v2::VehicleAttribute>(GetArenaForAllocation());
    _impl_.vehicle_attribute_ = p;
  }
  return _impl_.vehicle_attribute_;
}
inline ::city::agent::v2::VehicleAttribute* Agent::mutable_vehicle_attribute() {
  ::city::agent::v2::VehicleAttribute* _msg = _internal_mutable_vehicle_attribute();
  // @@protoc_insertion_point(field_mutable:city.agent.v2.Agent.vehicle_attribute)
  return _msg;
}
inline void Agent::set_allocated_vehicle_attribute(::city::agent::v2::VehicleAttribute* vehicle_attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vehicle_attribute_;
  }
  if (vehicle_attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vehicle_attribute);
    if (message_arena != submessage_arena) {
      vehicle_attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_attribute, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.vehicle_attribute_ = vehicle_attribute;
  // @@protoc_insertion_point(field_set_allocated:city.agent.v2.Agent.vehicle_attribute)
}

// optional .city.agent.v2.BusAttribute bus_attribute = 8 [json_name = "busAttribute"];
inline bool Agent::_internal_has_bus_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bus_attribute_ != nullptr);
  return value;
}
inline bool Agent::has_bus_attribute() const {
  return _internal_has_bus_attribute();
}
inline void Agent::clear_bus_attribute() {
  if (_impl_.bus_attribute_ != nullptr) _impl_.bus_attribute_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::city::agent::v2::BusAttribute& Agent::_internal_bus_attribute() const {
  const ::city::agent::v2::BusAttribute* p = _impl_.bus_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::agent::v2::BusAttribute&>(
      ::city::agent::v2::_BusAttribute_default_instance_);
}
inline const ::city::agent::v2::BusAttribute& Agent::bus_attribute() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.Agent.bus_attribute)
  return _internal_bus_attribute();
}
inline void Agent::unsafe_arena_set_allocated_bus_attribute(
    ::city::agent::v2::BusAttribute* bus_attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bus_attribute_);
  }
  _impl_.bus_attribute_ = bus_attribute;
  if (bus_attribute) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.agent.v2.Agent.bus_attribute)
}
inline ::city::agent::v2::BusAttribute* Agent::release_bus_attribute() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::agent::v2::BusAttribute* temp = _impl_.bus_attribute_;
  _impl_.bus_attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::agent::v2::BusAttribute* Agent::unsafe_arena_release_bus_attribute() {
  // @@protoc_insertion_point(field_release:city.agent.v2.Agent.bus_attribute)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::agent::v2::BusAttribute* temp = _impl_.bus_attribute_;
  _impl_.bus_attribute_ = nullptr;
  return temp;
}
inline ::city::agent::v2::BusAttribute* Agent::_internal_mutable_bus_attribute() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bus_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::agent::v2::BusAttribute>(GetArenaForAllocation());
    _impl_.bus_attribute_ = p;
  }
  return _impl_.bus_attribute_;
}
inline ::city::agent::v2::BusAttribute* Agent::mutable_bus_attribute() {
  ::city::agent::v2::BusAttribute* _msg = _internal_mutable_bus_attribute();
  // @@protoc_insertion_point(field_mutable:city.agent.v2.Agent.bus_attribute)
  return _msg;
}
inline void Agent::set_allocated_bus_attribute(::city::agent::v2::BusAttribute* bus_attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bus_attribute_;
  }
  if (bus_attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bus_attribute);
    if (message_arena != submessage_arena) {
      bus_attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_attribute, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bus_attribute_ = bus_attribute;
  // @@protoc_insertion_point(field_set_allocated:city.agent.v2.Agent.bus_attribute)
}

// optional .city.agent.v2.BikeAttribute bike_attribute = 9 [json_name = "bikeAttribute"];
inline bool Agent::_internal_has_bike_attribute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bike_attribute_ != nullptr);
  return value;
}
inline bool Agent::has_bike_attribute() const {
  return _internal_has_bike_attribute();
}
inline void Agent::clear_bike_attribute() {
  if (_impl_.bike_attribute_ != nullptr) _impl_.bike_attribute_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::city::agent::v2::BikeAttribute& Agent::_internal_bike_attribute() const {
  const ::city::agent::v2::BikeAttribute* p = _impl_.bike_attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::agent::v2::BikeAttribute&>(
      ::city::agent::v2::_BikeAttribute_default_instance_);
}
inline const ::city::agent::v2::BikeAttribute& Agent::bike_attribute() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.Agent.bike_attribute)
  return _internal_bike_attribute();
}
inline void Agent::unsafe_arena_set_allocated_bike_attribute(
    ::city::agent::v2::BikeAttribute* bike_attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bike_attribute_);
  }
  _impl_.bike_attribute_ = bike_attribute;
  if (bike_attribute) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.agent.v2.Agent.bike_attribute)
}
inline ::city::agent::v2::BikeAttribute* Agent::release_bike_attribute() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::agent::v2::BikeAttribute* temp = _impl_.bike_attribute_;
  _impl_.bike_attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::agent::v2::BikeAttribute* Agent::unsafe_arena_release_bike_attribute() {
  // @@protoc_insertion_point(field_release:city.agent.v2.Agent.bike_attribute)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::agent::v2::BikeAttribute* temp = _impl_.bike_attribute_;
  _impl_.bike_attribute_ = nullptr;
  return temp;
}
inline ::city::agent::v2::BikeAttribute* Agent::_internal_mutable_bike_attribute() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.bike_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::agent::v2::BikeAttribute>(GetArenaForAllocation());
    _impl_.bike_attribute_ = p;
  }
  return _impl_.bike_attribute_;
}
inline ::city::agent::v2::BikeAttribute* Agent::mutable_bike_attribute() {
  ::city::agent::v2::BikeAttribute* _msg = _internal_mutable_bike_attribute();
  // @@protoc_insertion_point(field_mutable:city.agent.v2.Agent.bike_attribute)
  return _msg;
}
inline void Agent::set_allocated_bike_attribute(::city::agent::v2::BikeAttribute* bike_attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bike_attribute_;
  }
  if (bike_attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bike_attribute);
    if (message_arena != submessage_arena) {
      bike_attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bike_attribute, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.bike_attribute_ = bike_attribute;
  // @@protoc_insertion_point(field_set_allocated:city.agent.v2.Agent.bike_attribute)
}

// map<string, string> labels = 10 [json_name = "labels"];
inline int Agent::_internal_labels_size() const {
  return _impl_.labels_.size();
}
inline int Agent::labels_size() const {
  return _internal_labels_size();
}
inline void Agent::clear_labels() {
  _impl_.labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Agent::_internal_labels() const {
  return _impl_.labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Agent::labels() const {
  // @@protoc_insertion_point(field_map:city.agent.v2.Agent.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Agent::_internal_mutable_labels() {
  return _impl_.labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Agent::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:city.agent.v2.Agent.labels)
  return _internal_mutable_labels();
}

// -------------------------------------------------------------------

// Agents

// repeated .city.agent.v2.Agent agents = 1 [json_name = "agents"];
inline int Agents::_internal_agents_size() const {
  return _impl_.agents_.size();
}
inline int Agents::agents_size() const {
  return _internal_agents_size();
}
inline void Agents::clear_agents() {
  _impl_.agents_.Clear();
}
inline ::city::agent::v2::Agent* Agents::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:city.agent.v2.Agents.agents)
  return _impl_.agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::agent::v2::Agent >*
Agents::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:city.agent.v2.Agents.agents)
  return &_impl_.agents_;
}
inline const ::city::agent::v2::Agent& Agents::_internal_agents(int index) const {
  return _impl_.agents_.Get(index);
}
inline const ::city::agent::v2::Agent& Agents::agents(int index) const {
  // @@protoc_insertion_point(field_get:city.agent.v2.Agents.agents)
  return _internal_agents(index);
}
inline ::city::agent::v2::Agent* Agents::_internal_add_agents() {
  return _impl_.agents_.Add();
}
inline ::city::agent::v2::Agent* Agents::add_agents() {
  ::city::agent::v2::Agent* _add = _internal_add_agents();
  // @@protoc_insertion_point(field_add:city.agent.v2.Agents.agents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::agent::v2::Agent >&
Agents::agents() const {
  // @@protoc_insertion_point(field_list:city.agent.v2.Agents.agents)
  return _impl_.agents_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace agent
}  // namespace city

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::city::agent::v2::AgentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::agent::v2::AgentType>() {
  return ::city::agent::v2::AgentType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fagent_2fv2_2fagent_2eproto
