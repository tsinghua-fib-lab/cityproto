// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/agent/v2/motion.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fagent_2fv2_2fmotion_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_city_2fagent_2fv2_2fmotion_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "city/geo/v2/geo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_city_2fagent_2fv2_2fmotion_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fagent_2fv2_2fmotion_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_city_2fagent_2fv2_2fmotion_2eproto;
namespace city {
namespace agent {
namespace v2 {
class AgentMotion;
struct AgentMotionDefaultTypeInternal;
extern AgentMotionDefaultTypeInternal _AgentMotion_default_instance_;
}  // namespace v2
}  // namespace agent
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace city {
namespace agent {
namespace v2 {
enum Status : int {
  STATUS_UNSPECIFIED = 0,
  STATUS_SLEEP = 1,
  STATUS_DRIVING = 2,
  STATUS_WALKING = 3,
  STATUS_CROWD = 4,
  STATUS_PASSENGER = 5,
  STATUS_WAIT_ROUTE = 6,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Status_IsValid(int value);
constexpr Status Status_MIN = static_cast<Status>(0);
constexpr Status Status_MAX = static_cast<Status>(6);
constexpr int Status_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
Status_descriptor();
template <typename T>
const std::string& Status_Name(T value) {
  static_assert(std::is_same<T, Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return Status_Name(static_cast<Status>(value));
}
template <>
inline const std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Status_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool Status_Parse(absl::string_view name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
      Status_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class AgentMotion final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.agent.v2.AgentMotion) */ {
 public:
  inline AgentMotion() : AgentMotion(nullptr) {}
  ~AgentMotion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AgentMotion(::google::protobuf::internal::ConstantInitialized);

  AgentMotion(const AgentMotion& from);
  AgentMotion(AgentMotion&& from) noexcept
    : AgentMotion() {
    *this = ::std::move(from);
  }

  inline AgentMotion& operator=(const AgentMotion& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentMotion& operator=(AgentMotion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentMotion& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentMotion* internal_default_instance() {
    return reinterpret_cast<const AgentMotion*>(
               &_AgentMotion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AgentMotion& a, AgentMotion& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentMotion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentMotion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentMotion* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentMotion>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AgentMotion& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AgentMotion& from) {
    AgentMotion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentMotion* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.agent.v2.AgentMotion";
  }
  protected:
  explicit AgentMotion(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityFieldNumber = 6,
    kPositionFieldNumber = 3,
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kVFieldNumber = 4,
    kDirectionFieldNumber = 5,
  };
  // string activity = 6 [json_name = "activity"];
  void clear_activity() ;
  const std::string& activity() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_activity(Arg_&& arg, Args_... args);
  std::string* mutable_activity();
  PROTOBUF_NODISCARD std::string* release_activity();
  void set_allocated_activity(std::string* ptr);

  private:
  const std::string& _internal_activity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_activity(
      const std::string& value);
  std::string* _internal_mutable_activity();

  public:
  // .city.geo.v2.Position position = 3 [json_name = "position"];
  bool has_position() const;
  void clear_position() ;
  const ::city::geo::v2::Position& position() const;
  PROTOBUF_NODISCARD ::city::geo::v2::Position* release_position();
  ::city::geo::v2::Position* mutable_position();
  void set_allocated_position(::city::geo::v2::Position* value);
  void unsafe_arena_set_allocated_position(::city::geo::v2::Position* value);
  ::city::geo::v2::Position* unsafe_arena_release_position();

  private:
  const ::city::geo::v2::Position& _internal_position() const;
  ::city::geo::v2::Position* _internal_mutable_position();

  public:
  // int32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .city.agent.v2.Status status = 2 [json_name = "status"];
  void clear_status() ;
  ::city::agent::v2::Status status() const;
  void set_status(::city::agent::v2::Status value);

  private:
  ::city::agent::v2::Status _internal_status() const;
  void _internal_set_status(::city::agent::v2::Status value);

  public:
  // double v = 4 [json_name = "v"];
  void clear_v() ;
  double v() const;
  void set_v(double value);

  private:
  double _internal_v() const;
  void _internal_set_v(double value);

  public:
  // double direction = 5 [json_name = "direction"];
  void clear_direction() ;
  double direction() const;
  void set_direction(double value);

  private:
  double _internal_direction() const;
  void _internal_set_direction(double value);

  public:
  // @@protoc_insertion_point(class_scope:city.agent.v2.AgentMotion)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 1, 42, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr activity_;
    ::city::geo::v2::Position* position_;
    ::int32_t id_;
    int status_;
    double v_;
    double direction_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fagent_2fv2_2fmotion_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AgentMotion

// int32 id = 1 [json_name = "id"];
inline void AgentMotion::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t AgentMotion::id() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.AgentMotion.id)
  return _internal_id();
}
inline void AgentMotion::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.AgentMotion.id)
}
inline ::int32_t AgentMotion::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void AgentMotion::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .city.agent.v2.Status status = 2 [json_name = "status"];
inline void AgentMotion::clear_status() {
  _impl_.status_ = 0;
}
inline ::city::agent::v2::Status AgentMotion::status() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.AgentMotion.status)
  return _internal_status();
}
inline void AgentMotion::set_status(::city::agent::v2::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.AgentMotion.status)
}
inline ::city::agent::v2::Status AgentMotion::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::agent::v2::Status>(_impl_.status_);
}
inline void AgentMotion::_internal_set_status(::city::agent::v2::Status value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// .city.geo.v2.Position position = 3 [json_name = "position"];
inline bool AgentMotion::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::city::geo::v2::Position& AgentMotion::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::geo::v2::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::Position&>(::city::geo::v2::_Position_default_instance_);
}
inline const ::city::geo::v2::Position& AgentMotion::position() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.AgentMotion.position)
  return _internal_position();
}
inline void AgentMotion::unsafe_arena_set_allocated_position(::city::geo::v2::Position* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::city::geo::v2::Position*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.agent.v2.AgentMotion.position)
}
inline ::city::geo::v2::Position* AgentMotion::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::Position* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::geo::v2::Position* AgentMotion::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.agent.v2.AgentMotion.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::city::geo::v2::Position* AgentMotion::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::Position>(GetArenaForAllocation());
    _impl_.position_ = reinterpret_cast<::city::geo::v2::Position*>(p);
  }
  return _impl_.position_;
}
inline ::city::geo::v2::Position* AgentMotion::mutable_position() {
  ::city::geo::v2::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:city.agent.v2.AgentMotion.position)
  return _msg;
}
inline void AgentMotion::set_allocated_position(::city::geo::v2::Position* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::city::geo::v2::Position*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.agent.v2.AgentMotion.position)
}

// double v = 4 [json_name = "v"];
inline void AgentMotion::clear_v() {
  _impl_.v_ = 0;
}
inline double AgentMotion::v() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.AgentMotion.v)
  return _internal_v();
}
inline void AgentMotion::set_v(double value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.AgentMotion.v)
}
inline double AgentMotion::_internal_v() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.v_;
}
inline void AgentMotion::_internal_set_v(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.v_ = value;
}

// double direction = 5 [json_name = "direction"];
inline void AgentMotion::clear_direction() {
  _impl_.direction_ = 0;
}
inline double AgentMotion::direction() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.AgentMotion.direction)
  return _internal_direction();
}
inline void AgentMotion::set_direction(double value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:city.agent.v2.AgentMotion.direction)
}
inline double AgentMotion::_internal_direction() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.direction_;
}
inline void AgentMotion::_internal_set_direction(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.direction_ = value;
}

// string activity = 6 [json_name = "activity"];
inline void AgentMotion::clear_activity() {
  _impl_.activity_.ClearToEmpty();
}
inline const std::string& AgentMotion::activity() const {
  // @@protoc_insertion_point(field_get:city.agent.v2.AgentMotion.activity)
  return _internal_activity();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AgentMotion::set_activity(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.activity_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.agent.v2.AgentMotion.activity)
}
inline std::string* AgentMotion::mutable_activity() {
  std::string* _s = _internal_mutable_activity();
  // @@protoc_insertion_point(field_mutable:city.agent.v2.AgentMotion.activity)
  return _s;
}
inline const std::string& AgentMotion::_internal_activity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.activity_.Get();
}
inline void AgentMotion::_internal_set_activity(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.activity_.Set(value, GetArenaForAllocation());
}
inline std::string* AgentMotion::_internal_mutable_activity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.activity_.Mutable( GetArenaForAllocation());
}
inline std::string* AgentMotion::release_activity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.agent.v2.AgentMotion.activity)
  return _impl_.activity_.Release();
}
inline void AgentMotion::set_allocated_activity(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.activity_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.activity_.IsDefault()) {
          _impl_.activity_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.agent.v2.AgentMotion.activity)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace agent
}  // namespace city


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::city::agent::v2::Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::agent::v2::Status>() {
  return ::city::agent::v2::Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_city_2fagent_2fv2_2fmotion_2eproto_2epb_2eh
