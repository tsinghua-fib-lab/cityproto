// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/agent/v2/agent_service.proto
#ifndef GRPC_city_2fagent_2fv2_2fagent_5fservice_2eproto__INCLUDED
#define GRPC_city_2fagent_2fv2_2fagent_5fservice_2eproto__INCLUDED

#include "city/agent/v2/agent_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace city {
namespace agent {
namespace v2 {

class AgentService final {
 public:
  static constexpr char const* service_full_name() {
    return "city.agent.v2.AgentService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 获取agent信息
    virtual ::grpc::Status GetAgent(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest& request, ::city::agent::v2::GetAgentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::GetAgentResponse>> AsyncGetAgent(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::GetAgentResponse>>(AsyncGetAgentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::GetAgentResponse>> PrepareAsyncGetAgent(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::GetAgentResponse>>(PrepareAsyncGetAgentRaw(context, request, cq));
    }
    // 新增agent 传入agent初始位置、目的地表、属性 返回agentid
    virtual ::grpc::Status AddAgent(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest& request, ::city::agent::v2::AddAgentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::AddAgentResponse>> AsyncAddAgent(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::AddAgentResponse>>(AsyncAddAgentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::AddAgentResponse>> PrepareAsyncAddAgent(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::AddAgentResponse>>(PrepareAsyncAddAgentRaw(context, request, cq));
    }
    // 修改agent的schedule 传入agentid、目的地表
    virtual ::grpc::Status SetSchedule(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest& request, ::city::agent::v2::SetScheduleResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::SetScheduleResponse>> AsyncSetSchedule(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::SetScheduleResponse>>(AsyncSetScheduleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::SetScheduleResponse>> PrepareAsyncSetSchedule(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::SetScheduleResponse>>(PrepareAsyncSetScheduleRaw(context, request, cq));
    }
    // 获取特定区域内的agent
    virtual ::grpc::Status GetAgentsByLongLatArea(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest& request, ::city::agent::v2::GetAgentsByLongLatAreaResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::GetAgentsByLongLatAreaResponse>> AsyncGetAgentsByLongLatArea(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::GetAgentsByLongLatAreaResponse>>(AsyncGetAgentsByLongLatAreaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::GetAgentsByLongLatAreaResponse>> PrepareAsyncGetAgentsByLongLatArea(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::GetAgentsByLongLatAreaResponse>>(PrepareAsyncGetAgentsByLongLatAreaRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 获取agent信息
      virtual void GetAgent(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest* request, ::city::agent::v2::GetAgentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAgent(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest* request, ::city::agent::v2::GetAgentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 新增agent 传入agent初始位置、目的地表、属性 返回agentid
      virtual void AddAgent(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest* request, ::city::agent::v2::AddAgentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddAgent(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest* request, ::city::agent::v2::AddAgentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 修改agent的schedule 传入agentid、目的地表
      virtual void SetSchedule(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest* request, ::city::agent::v2::SetScheduleResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetSchedule(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest* request, ::city::agent::v2::SetScheduleResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 获取特定区域内的agent
      virtual void GetAgentsByLongLatArea(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* request, ::city::agent::v2::GetAgentsByLongLatAreaResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAgentsByLongLatArea(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* request, ::city::agent::v2::GetAgentsByLongLatAreaResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::GetAgentResponse>* AsyncGetAgentRaw(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::GetAgentResponse>* PrepareAsyncGetAgentRaw(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::AddAgentResponse>* AsyncAddAgentRaw(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::AddAgentResponse>* PrepareAsyncAddAgentRaw(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::SetScheduleResponse>* AsyncSetScheduleRaw(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::SetScheduleResponse>* PrepareAsyncSetScheduleRaw(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::GetAgentsByLongLatAreaResponse>* AsyncGetAgentsByLongLatAreaRaw(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::agent::v2::GetAgentsByLongLatAreaResponse>* PrepareAsyncGetAgentsByLongLatAreaRaw(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetAgent(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest& request, ::city::agent::v2::GetAgentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentResponse>> AsyncGetAgent(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentResponse>>(AsyncGetAgentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentResponse>> PrepareAsyncGetAgent(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentResponse>>(PrepareAsyncGetAgentRaw(context, request, cq));
    }
    ::grpc::Status AddAgent(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest& request, ::city::agent::v2::AddAgentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::AddAgentResponse>> AsyncAddAgent(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::AddAgentResponse>>(AsyncAddAgentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::AddAgentResponse>> PrepareAsyncAddAgent(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::AddAgentResponse>>(PrepareAsyncAddAgentRaw(context, request, cq));
    }
    ::grpc::Status SetSchedule(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest& request, ::city::agent::v2::SetScheduleResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::SetScheduleResponse>> AsyncSetSchedule(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::SetScheduleResponse>>(AsyncSetScheduleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::SetScheduleResponse>> PrepareAsyncSetSchedule(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::SetScheduleResponse>>(PrepareAsyncSetScheduleRaw(context, request, cq));
    }
    ::grpc::Status GetAgentsByLongLatArea(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest& request, ::city::agent::v2::GetAgentsByLongLatAreaResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentsByLongLatAreaResponse>> AsyncGetAgentsByLongLatArea(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentsByLongLatAreaResponse>>(AsyncGetAgentsByLongLatAreaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentsByLongLatAreaResponse>> PrepareAsyncGetAgentsByLongLatArea(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentsByLongLatAreaResponse>>(PrepareAsyncGetAgentsByLongLatAreaRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetAgent(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest* request, ::city::agent::v2::GetAgentResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAgent(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest* request, ::city::agent::v2::GetAgentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddAgent(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest* request, ::city::agent::v2::AddAgentResponse* response, std::function<void(::grpc::Status)>) override;
      void AddAgent(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest* request, ::city::agent::v2::AddAgentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetSchedule(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest* request, ::city::agent::v2::SetScheduleResponse* response, std::function<void(::grpc::Status)>) override;
      void SetSchedule(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest* request, ::city::agent::v2::SetScheduleResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAgentsByLongLatArea(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* request, ::city::agent::v2::GetAgentsByLongLatAreaResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAgentsByLongLatArea(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* request, ::city::agent::v2::GetAgentsByLongLatAreaResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentResponse>* AsyncGetAgentRaw(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentResponse>* PrepareAsyncGetAgentRaw(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::agent::v2::AddAgentResponse>* AsyncAddAgentRaw(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::agent::v2::AddAgentResponse>* PrepareAsyncAddAgentRaw(::grpc::ClientContext* context, const ::city::agent::v2::AddAgentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::agent::v2::SetScheduleResponse>* AsyncSetScheduleRaw(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::agent::v2::SetScheduleResponse>* PrepareAsyncSetScheduleRaw(::grpc::ClientContext* context, const ::city::agent::v2::SetScheduleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentsByLongLatAreaResponse>* AsyncGetAgentsByLongLatAreaRaw(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::agent::v2::GetAgentsByLongLatAreaResponse>* PrepareAsyncGetAgentsByLongLatAreaRaw(::grpc::ClientContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAgent_;
    const ::grpc::internal::RpcMethod rpcmethod_AddAgent_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSchedule_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAgentsByLongLatArea_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 获取agent信息
    virtual ::grpc::Status GetAgent(::grpc::ServerContext* context, const ::city::agent::v2::GetAgentRequest* request, ::city::agent::v2::GetAgentResponse* response);
    // 新增agent 传入agent初始位置、目的地表、属性 返回agentid
    virtual ::grpc::Status AddAgent(::grpc::ServerContext* context, const ::city::agent::v2::AddAgentRequest* request, ::city::agent::v2::AddAgentResponse* response);
    // 修改agent的schedule 传入agentid、目的地表
    virtual ::grpc::Status SetSchedule(::grpc::ServerContext* context, const ::city::agent::v2::SetScheduleRequest* request, ::city::agent::v2::SetScheduleResponse* response);
    // 获取特定区域内的agent
    virtual ::grpc::Status GetAgentsByLongLatArea(::grpc::ServerContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* request, ::city::agent::v2::GetAgentsByLongLatAreaResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAgent() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgent(::grpc::ServerContext* /*context*/, const ::city::agent::v2::GetAgentRequest* /*request*/, ::city::agent::v2::GetAgentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgent(::grpc::ServerContext* context, ::city::agent::v2::GetAgentRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::agent::v2::GetAgentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddAgent() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAgent(::grpc::ServerContext* /*context*/, const ::city::agent::v2::AddAgentRequest* /*request*/, ::city::agent::v2::AddAgentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddAgent(::grpc::ServerContext* context, ::city::agent::v2::AddAgentRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::agent::v2::AddAgentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetSchedule() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSchedule(::grpc::ServerContext* /*context*/, const ::city::agent::v2::SetScheduleRequest* /*request*/, ::city::agent::v2::SetScheduleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSchedule(::grpc::ServerContext* context, ::city::agent::v2::SetScheduleRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::agent::v2::SetScheduleResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAgentsByLongLatArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAgentsByLongLatArea() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetAgentsByLongLatArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentsByLongLatArea(::grpc::ServerContext* /*context*/, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* /*request*/, ::city::agent::v2::GetAgentsByLongLatAreaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgentsByLongLatArea(::grpc::ServerContext* context, ::city::agent::v2::GetAgentsByLongLatAreaRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::agent::v2::GetAgentsByLongLatAreaResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAgent<WithAsyncMethod_AddAgent<WithAsyncMethod_SetSchedule<WithAsyncMethod_GetAgentsByLongLatArea<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAgent() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::city::agent::v2::GetAgentRequest, ::city::agent::v2::GetAgentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::agent::v2::GetAgentRequest* request, ::city::agent::v2::GetAgentResponse* response) { return this->GetAgent(context, request, response); }));}
    void SetMessageAllocatorFor_GetAgent(
        ::grpc::MessageAllocator< ::city::agent::v2::GetAgentRequest, ::city::agent::v2::GetAgentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::agent::v2::GetAgentRequest, ::city::agent::v2::GetAgentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgent(::grpc::ServerContext* /*context*/, const ::city::agent::v2::GetAgentRequest* /*request*/, ::city::agent::v2::GetAgentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAgent(
      ::grpc::CallbackServerContext* /*context*/, const ::city::agent::v2::GetAgentRequest* /*request*/, ::city::agent::v2::GetAgentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddAgent() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::city::agent::v2::AddAgentRequest, ::city::agent::v2::AddAgentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::agent::v2::AddAgentRequest* request, ::city::agent::v2::AddAgentResponse* response) { return this->AddAgent(context, request, response); }));}
    void SetMessageAllocatorFor_AddAgent(
        ::grpc::MessageAllocator< ::city::agent::v2::AddAgentRequest, ::city::agent::v2::AddAgentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::agent::v2::AddAgentRequest, ::city::agent::v2::AddAgentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAgent(::grpc::ServerContext* /*context*/, const ::city::agent::v2::AddAgentRequest* /*request*/, ::city::agent::v2::AddAgentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddAgent(
      ::grpc::CallbackServerContext* /*context*/, const ::city::agent::v2::AddAgentRequest* /*request*/, ::city::agent::v2::AddAgentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetSchedule() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::city::agent::v2::SetScheduleRequest, ::city::agent::v2::SetScheduleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::agent::v2::SetScheduleRequest* request, ::city::agent::v2::SetScheduleResponse* response) { return this->SetSchedule(context, request, response); }));}
    void SetMessageAllocatorFor_SetSchedule(
        ::grpc::MessageAllocator< ::city::agent::v2::SetScheduleRequest, ::city::agent::v2::SetScheduleResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::agent::v2::SetScheduleRequest, ::city::agent::v2::SetScheduleResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSchedule(::grpc::ServerContext* /*context*/, const ::city::agent::v2::SetScheduleRequest* /*request*/, ::city::agent::v2::SetScheduleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSchedule(
      ::grpc::CallbackServerContext* /*context*/, const ::city::agent::v2::SetScheduleRequest* /*request*/, ::city::agent::v2::SetScheduleResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAgentsByLongLatArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAgentsByLongLatArea() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::city::agent::v2::GetAgentsByLongLatAreaRequest, ::city::agent::v2::GetAgentsByLongLatAreaResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* request, ::city::agent::v2::GetAgentsByLongLatAreaResponse* response) { return this->GetAgentsByLongLatArea(context, request, response); }));}
    void SetMessageAllocatorFor_GetAgentsByLongLatArea(
        ::grpc::MessageAllocator< ::city::agent::v2::GetAgentsByLongLatAreaRequest, ::city::agent::v2::GetAgentsByLongLatAreaResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::agent::v2::GetAgentsByLongLatAreaRequest, ::city::agent::v2::GetAgentsByLongLatAreaResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAgentsByLongLatArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentsByLongLatArea(::grpc::ServerContext* /*context*/, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* /*request*/, ::city::agent::v2::GetAgentsByLongLatAreaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAgentsByLongLatArea(
      ::grpc::CallbackServerContext* /*context*/, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* /*request*/, ::city::agent::v2::GetAgentsByLongLatAreaResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetAgent<WithCallbackMethod_AddAgent<WithCallbackMethod_SetSchedule<WithCallbackMethod_GetAgentsByLongLatArea<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAgent() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgent(::grpc::ServerContext* /*context*/, const ::city::agent::v2::GetAgentRequest* /*request*/, ::city::agent::v2::GetAgentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddAgent() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAgent(::grpc::ServerContext* /*context*/, const ::city::agent::v2::AddAgentRequest* /*request*/, ::city::agent::v2::AddAgentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetSchedule() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSchedule(::grpc::ServerContext* /*context*/, const ::city::agent::v2::SetScheduleRequest* /*request*/, ::city::agent::v2::SetScheduleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAgentsByLongLatArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAgentsByLongLatArea() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetAgentsByLongLatArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentsByLongLatArea(::grpc::ServerContext* /*context*/, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* /*request*/, ::city::agent::v2::GetAgentsByLongLatAreaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAgent() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgent(::grpc::ServerContext* /*context*/, const ::city::agent::v2::GetAgentRequest* /*request*/, ::city::agent::v2::GetAgentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddAgent() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAgent(::grpc::ServerContext* /*context*/, const ::city::agent::v2::AddAgentRequest* /*request*/, ::city::agent::v2::AddAgentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddAgent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetSchedule() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSchedule(::grpc::ServerContext* /*context*/, const ::city::agent::v2::SetScheduleRequest* /*request*/, ::city::agent::v2::SetScheduleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSchedule(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAgentsByLongLatArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAgentsByLongLatArea() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetAgentsByLongLatArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentsByLongLatArea(::grpc::ServerContext* /*context*/, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* /*request*/, ::city::agent::v2::GetAgentsByLongLatAreaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAgentsByLongLatArea(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAgent() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAgent(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgent(::grpc::ServerContext* /*context*/, const ::city::agent::v2::GetAgentRequest* /*request*/, ::city::agent::v2::GetAgentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAgent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddAgent() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddAgent(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAgent(::grpc::ServerContext* /*context*/, const ::city::agent::v2::AddAgentRequest* /*request*/, ::city::agent::v2::AddAgentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddAgent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetSchedule() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetSchedule(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSchedule(::grpc::ServerContext* /*context*/, const ::city::agent::v2::SetScheduleRequest* /*request*/, ::city::agent::v2::SetScheduleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSchedule(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAgentsByLongLatArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAgentsByLongLatArea() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAgentsByLongLatArea(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAgentsByLongLatArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAgentsByLongLatArea(::grpc::ServerContext* /*context*/, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* /*request*/, ::city::agent::v2::GetAgentsByLongLatAreaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAgentsByLongLatArea(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAgent() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::agent::v2::GetAgentRequest, ::city::agent::v2::GetAgentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::agent::v2::GetAgentRequest, ::city::agent::v2::GetAgentResponse>* streamer) {
                       return this->StreamedGetAgent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAgent(::grpc::ServerContext* /*context*/, const ::city::agent::v2::GetAgentRequest* /*request*/, ::city::agent::v2::GetAgentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAgent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::agent::v2::GetAgentRequest,::city::agent::v2::GetAgentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddAgent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddAgent() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::agent::v2::AddAgentRequest, ::city::agent::v2::AddAgentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::agent::v2::AddAgentRequest, ::city::agent::v2::AddAgentResponse>* streamer) {
                       return this->StreamedAddAgent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddAgent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddAgent(::grpc::ServerContext* /*context*/, const ::city::agent::v2::AddAgentRequest* /*request*/, ::city::agent::v2::AddAgentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddAgent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::agent::v2::AddAgentRequest,::city::agent::v2::AddAgentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetSchedule() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::agent::v2::SetScheduleRequest, ::city::agent::v2::SetScheduleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::agent::v2::SetScheduleRequest, ::city::agent::v2::SetScheduleResponse>* streamer) {
                       return this->StreamedSetSchedule(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSchedule(::grpc::ServerContext* /*context*/, const ::city::agent::v2::SetScheduleRequest* /*request*/, ::city::agent::v2::SetScheduleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSchedule(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::agent::v2::SetScheduleRequest,::city::agent::v2::SetScheduleResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAgentsByLongLatArea : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAgentsByLongLatArea() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::agent::v2::GetAgentsByLongLatAreaRequest, ::city::agent::v2::GetAgentsByLongLatAreaResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::agent::v2::GetAgentsByLongLatAreaRequest, ::city::agent::v2::GetAgentsByLongLatAreaResponse>* streamer) {
                       return this->StreamedGetAgentsByLongLatArea(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAgentsByLongLatArea() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAgentsByLongLatArea(::grpc::ServerContext* /*context*/, const ::city::agent::v2::GetAgentsByLongLatAreaRequest* /*request*/, ::city::agent::v2::GetAgentsByLongLatAreaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAgentsByLongLatArea(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::agent::v2::GetAgentsByLongLatAreaRequest,::city::agent::v2::GetAgentsByLongLatAreaResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAgent<WithStreamedUnaryMethod_AddAgent<WithStreamedUnaryMethod_SetSchedule<WithStreamedUnaryMethod_GetAgentsByLongLatArea<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAgent<WithStreamedUnaryMethod_AddAgent<WithStreamedUnaryMethod_SetSchedule<WithStreamedUnaryMethod_GetAgentsByLongLatArea<Service > > > > StreamedService;
};

}  // namespace v2
}  // namespace agent
}  // namespace city


#endif  // GRPC_city_2fagent_2fv2_2fagent_5fservice_2eproto__INCLUDED
