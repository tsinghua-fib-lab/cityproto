// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/map/v2/junction_service.proto

#include "city/map/v2/junction_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace map {
namespace v2 {
PROTOBUF_CONSTEXPR GetJunctionRequest::GetJunctionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.junction_ids_)*/{}
  , /*decltype(_impl_._junction_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.exclude_lane_)*/false
  , /*decltype(_impl_.exclude_person_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetJunctionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetJunctionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetJunctionRequestDefaultTypeInternal() {}
  union {
    GetJunctionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetJunctionRequestDefaultTypeInternal _GetJunctionRequest_default_instance_;
PROTOBUF_CONSTEXPR GetJunctionResponse::GetJunctionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.states_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetJunctionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetJunctionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetJunctionResponseDefaultTypeInternal() {}
  union {
    GetJunctionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetJunctionResponseDefaultTypeInternal _GetJunctionResponse_default_instance_;
PROTOBUF_CONSTEXPR JunctionState::JunctionState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lanes_)*/{}
  , /*decltype(_impl_.predecessor_driving_lanes_)*/{}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.in_vehicle_cnt_)*/0
  , /*decltype(_impl_.out_vehicle_cnt_)*/0
  , /*decltype(_impl_.vehicle_cnt_)*/0
  , /*decltype(_impl_.cum_in_vehicle_cnt_)*/0
  , /*decltype(_impl_.cum_out_vehicle_cnt_)*/0
  , /*decltype(_impl_.total_queuing_time_)*/0
  , /*decltype(_impl_.total_queuing_vehicle_cnt_)*/0
  , /*decltype(_impl_.max_queuing_vehicle_cnt_)*/0
  , /*decltype(_impl_.avg_queuing_time_)*/0
  , /*decltype(_impl_.has_traffic_light_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JunctionStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JunctionStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JunctionStateDefaultTypeInternal() {}
  union {
    JunctionState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JunctionStateDefaultTypeInternal _JunctionState_default_instance_;
}  // namespace v2
}  // namespace map
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fmap_2fv2_2fjunction_5fservice_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_city_2fmap_2fv2_2fjunction_5fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fmap_2fv2_2fjunction_5fservice_2eproto = nullptr;

const uint32_t TableStruct_city_2fmap_2fv2_2fjunction_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetJunctionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetJunctionRequest, _impl_.junction_ids_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetJunctionRequest, _impl_.exclude_lane_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetJunctionRequest, _impl_.exclude_person_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetJunctionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetJunctionResponse, _impl_.states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::JunctionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::JunctionState, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::JunctionState, _impl_.in_vehicle_cnt_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::JunctionState, _impl_.out_vehicle_cnt_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::JunctionState, _impl_.vehicle_cnt_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::JunctionState, _impl_.cum_in_vehicle_cnt_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::JunctionState, _impl_.cum_out_vehicle_cnt_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::JunctionState, _impl_.lanes_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::JunctionState, _impl_.predecessor_driving_lanes_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::JunctionState, _impl_.total_queuing_vehicle_cnt_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::JunctionState, _impl_.total_queuing_time_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::JunctionState, _impl_.avg_queuing_time_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::JunctionState, _impl_.max_queuing_vehicle_cnt_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::JunctionState, _impl_.has_traffic_light_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::map::v2::GetJunctionRequest)},
  { 9, -1, -1, sizeof(::city::map::v2::GetJunctionResponse)},
  { 16, -1, -1, sizeof(::city::map::v2::JunctionState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::map::v2::_GetJunctionRequest_default_instance_._instance,
  &::city::map::v2::_GetJunctionResponse_default_instance_._instance,
  &::city::map::v2::_JunctionState_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fmap_2fv2_2fjunction_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"city/map/v2/junction_service.proto\022\013ci"
  "ty.map.v2\032\034city/map/v2/lane_state.proto\""
  "\201\001\n\022GetJunctionRequest\022!\n\014junction_ids\030\001"
  " \003(\005R\013junctionIds\022!\n\014exclude_lane\030\002 \001(\010R"
  "\013excludeLane\022%\n\016exclude_person\030\003 \001(\010R\rex"
  "cludePerson\"I\n\023GetJunctionResponse\0222\n\006st"
  "ates\030\001 \003(\0132\032.city.map.v2.JunctionStateR\006"
  "states\"\342\004\n\rJunctionState\022\016\n\002id\030\001 \001(\005R\002id"
  "\022$\n\016in_vehicle_cnt\030\002 \001(\005R\014inVehicleCnt\022&"
  "\n\017out_vehicle_cnt\030\003 \001(\005R\routVehicleCnt\022\037"
  "\n\013vehicle_cnt\030\004 \001(\005R\nvehicleCnt\022+\n\022cum_i"
  "n_vehicle_cnt\030\005 \001(\005R\017cumInVehicleCnt\022-\n\023"
  "cum_out_vehicle_cnt\030\006 \001(\005R\020cumOutVehicle"
  "Cnt\022,\n\005lanes\030\007 \003(\0132\026.city.map.v2.LaneSta"
  "teR\005lanes\022R\n\031predecessor_driving_lanes\030\010"
  " \003(\0132\026.city.map.v2.LaneStateR\027predecesso"
  "rDrivingLanes\0229\n\031total_queuing_vehicle_c"
  "nt\030\t \001(\005R\026totalQueuingVehicleCnt\022,\n\022tota"
  "l_queuing_time\030\n \001(\001R\020totalQueuingTime\022("
  "\n\020avg_queuing_time\030\013 \001(\001R\016avgQueuingTime"
  "\0225\n\027max_queuing_vehicle_cnt\030\014 \001(\005R\024maxQu"
  "euingVehicleCnt\022*\n\021has_traffic_light\030\r \001"
  "(\010R\017hasTrafficLight2c\n\017JunctionService\022P"
  "\n\013GetJunction\022\037.city.map.v2.GetJunctionR"
  "equest\032 .city.map.v2.GetJunctionResponse"
  "B\250\001\n\017com.city.map.v2B\024JunctionServicePro"
  "toP\001Z1git.fiblab.net/sim/protos/v2/go/ci"
  "ty/map/v2;mapv2\242\002\003CMX\252\002\013City.Map.V2\312\002\013Ci"
  "ty\\Map\\V2\342\002\027City\\Map\\V2\\GPBMetadata\352\002\rCi"
  "ty::Map::V2b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_city_2fmap_2fv2_2fjunction_5fservice_2eproto_deps[1] = {
  &::descriptor_table_city_2fmap_2fv2_2flane_5fstate_2eproto,
};
static ::_pbi::once_flag descriptor_table_city_2fmap_2fv2_2fjunction_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fmap_2fv2_2fjunction_5fservice_2eproto = {
    false, false, 1179, descriptor_table_protodef_city_2fmap_2fv2_2fjunction_5fservice_2eproto,
    "city/map/v2/junction_service.proto",
    &descriptor_table_city_2fmap_2fv2_2fjunction_5fservice_2eproto_once, descriptor_table_city_2fmap_2fv2_2fjunction_5fservice_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_city_2fmap_2fv2_2fjunction_5fservice_2eproto::offsets,
    file_level_metadata_city_2fmap_2fv2_2fjunction_5fservice_2eproto, file_level_enum_descriptors_city_2fmap_2fv2_2fjunction_5fservice_2eproto,
    file_level_service_descriptors_city_2fmap_2fv2_2fjunction_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fmap_2fv2_2fjunction_5fservice_2eproto_getter() {
  return &descriptor_table_city_2fmap_2fv2_2fjunction_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fmap_2fv2_2fjunction_5fservice_2eproto(&descriptor_table_city_2fmap_2fv2_2fjunction_5fservice_2eproto);
namespace city {
namespace map {
namespace v2 {

// ===================================================================

class GetJunctionRequest::_Internal {
 public:
};

GetJunctionRequest::GetJunctionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetJunctionRequest)
}
GetJunctionRequest::GetJunctionRequest(const GetJunctionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetJunctionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.junction_ids_){from._impl_.junction_ids_}
    , /*decltype(_impl_._junction_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.exclude_lane_){}
    , decltype(_impl_.exclude_person_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.exclude_lane_, &from._impl_.exclude_lane_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exclude_person_) -
    reinterpret_cast<char*>(&_impl_.exclude_lane_)) + sizeof(_impl_.exclude_person_));
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetJunctionRequest)
}

inline void GetJunctionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.junction_ids_){arena}
    , /*decltype(_impl_._junction_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.exclude_lane_){false}
    , decltype(_impl_.exclude_person_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetJunctionRequest::~GetJunctionRequest() {
  // @@protoc_insertion_point(destructor:city.map.v2.GetJunctionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetJunctionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.junction_ids_.~RepeatedField();
}

void GetJunctionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetJunctionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.GetJunctionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.junction_ids_.Clear();
  ::memset(&_impl_.exclude_lane_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exclude_person_) -
      reinterpret_cast<char*>(&_impl_.exclude_lane_)) + sizeof(_impl_.exclude_person_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetJunctionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 junction_ids = 1 [json_name = "junctionIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_junction_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_junction_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool exclude_lane = 2 [json_name = "excludeLane"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.exclude_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool exclude_person = 3 [json_name = "excludePerson"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.exclude_person_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetJunctionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.GetJunctionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 junction_ids = 1 [json_name = "junctionIds"];
  {
    int byte_size = _impl_._junction_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_junction_ids(), byte_size, target);
    }
  }

  // bool exclude_lane = 2 [json_name = "excludeLane"];
  if (this->_internal_exclude_lane() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_exclude_lane(), target);
  }

  // bool exclude_person = 3 [json_name = "excludePerson"];
  if (this->_internal_exclude_person() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_exclude_person(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.GetJunctionRequest)
  return target;
}

size_t GetJunctionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.GetJunctionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 junction_ids = 1 [json_name = "junctionIds"];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.junction_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._junction_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool exclude_lane = 2 [json_name = "excludeLane"];
  if (this->_internal_exclude_lane() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_person = 3 [json_name = "excludePerson"];
  if (this->_internal_exclude_person() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetJunctionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetJunctionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetJunctionRequest::GetClassData() const { return &_class_data_; }


void GetJunctionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetJunctionRequest*>(&to_msg);
  auto& from = static_cast<const GetJunctionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.GetJunctionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.junction_ids_.MergeFrom(from._impl_.junction_ids_);
  if (from._internal_exclude_lane() != 0) {
    _this->_internal_set_exclude_lane(from._internal_exclude_lane());
  }
  if (from._internal_exclude_person() != 0) {
    _this->_internal_set_exclude_person(from._internal_exclude_person());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetJunctionRequest::CopyFrom(const GetJunctionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.GetJunctionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetJunctionRequest::IsInitialized() const {
  return true;
}

void GetJunctionRequest::InternalSwap(GetJunctionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.junction_ids_.InternalSwap(&other->_impl_.junction_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetJunctionRequest, _impl_.exclude_person_)
      + sizeof(GetJunctionRequest::_impl_.exclude_person_)
      - PROTOBUF_FIELD_OFFSET(GetJunctionRequest, _impl_.exclude_lane_)>(
          reinterpret_cast<char*>(&_impl_.exclude_lane_),
          reinterpret_cast<char*>(&other->_impl_.exclude_lane_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetJunctionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2fjunction_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2fjunction_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2fjunction_5fservice_2eproto[0]);
}

// ===================================================================

class GetJunctionResponse::_Internal {
 public:
};

GetJunctionResponse::GetJunctionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetJunctionResponse)
}
GetJunctionResponse::GetJunctionResponse(const GetJunctionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetJunctionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){from._impl_.states_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetJunctionResponse)
}

inline void GetJunctionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetJunctionResponse::~GetJunctionResponse() {
  // @@protoc_insertion_point(destructor:city.map.v2.GetJunctionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetJunctionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.states_.~RepeatedPtrField();
}

void GetJunctionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetJunctionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.GetJunctionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.states_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetJunctionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .city.map.v2.JunctionState states = 1 [json_name = "states"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetJunctionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.GetJunctionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .city.map.v2.JunctionState states = 1 [json_name = "states"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.GetJunctionResponse)
  return target;
}

size_t GetJunctionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.GetJunctionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.map.v2.JunctionState states = 1 [json_name = "states"];
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->_impl_.states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetJunctionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetJunctionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetJunctionResponse::GetClassData() const { return &_class_data_; }


void GetJunctionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetJunctionResponse*>(&to_msg);
  auto& from = static_cast<const GetJunctionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.GetJunctionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.states_.MergeFrom(from._impl_.states_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetJunctionResponse::CopyFrom(const GetJunctionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.GetJunctionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetJunctionResponse::IsInitialized() const {
  return true;
}

void GetJunctionResponse::InternalSwap(GetJunctionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.states_.InternalSwap(&other->_impl_.states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetJunctionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2fjunction_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2fjunction_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2fjunction_5fservice_2eproto[1]);
}

// ===================================================================

class JunctionState::_Internal {
 public:
};

void JunctionState::clear_lanes() {
  _impl_.lanes_.Clear();
}
void JunctionState::clear_predecessor_driving_lanes() {
  _impl_.predecessor_driving_lanes_.Clear();
}
JunctionState::JunctionState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.JunctionState)
}
JunctionState::JunctionState(const JunctionState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JunctionState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lanes_){from._impl_.lanes_}
    , decltype(_impl_.predecessor_driving_lanes_){from._impl_.predecessor_driving_lanes_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.in_vehicle_cnt_){}
    , decltype(_impl_.out_vehicle_cnt_){}
    , decltype(_impl_.vehicle_cnt_){}
    , decltype(_impl_.cum_in_vehicle_cnt_){}
    , decltype(_impl_.cum_out_vehicle_cnt_){}
    , decltype(_impl_.total_queuing_time_){}
    , decltype(_impl_.total_queuing_vehicle_cnt_){}
    , decltype(_impl_.max_queuing_vehicle_cnt_){}
    , decltype(_impl_.avg_queuing_time_){}
    , decltype(_impl_.has_traffic_light_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_traffic_light_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.has_traffic_light_));
  // @@protoc_insertion_point(copy_constructor:city.map.v2.JunctionState)
}

inline void JunctionState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lanes_){arena}
    , decltype(_impl_.predecessor_driving_lanes_){arena}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.in_vehicle_cnt_){0}
    , decltype(_impl_.out_vehicle_cnt_){0}
    , decltype(_impl_.vehicle_cnt_){0}
    , decltype(_impl_.cum_in_vehicle_cnt_){0}
    , decltype(_impl_.cum_out_vehicle_cnt_){0}
    , decltype(_impl_.total_queuing_time_){0}
    , decltype(_impl_.total_queuing_vehicle_cnt_){0}
    , decltype(_impl_.max_queuing_vehicle_cnt_){0}
    , decltype(_impl_.avg_queuing_time_){0}
    , decltype(_impl_.has_traffic_light_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JunctionState::~JunctionState() {
  // @@protoc_insertion_point(destructor:city.map.v2.JunctionState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JunctionState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lanes_.~RepeatedPtrField();
  _impl_.predecessor_driving_lanes_.~RepeatedPtrField();
}

void JunctionState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JunctionState::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.JunctionState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lanes_.Clear();
  _impl_.predecessor_driving_lanes_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_traffic_light_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.has_traffic_light_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JunctionState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 in_vehicle_cnt = 2 [json_name = "inVehicleCnt"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.in_vehicle_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 out_vehicle_cnt = 3 [json_name = "outVehicleCnt"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.out_vehicle_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vehicle_cnt = 4 [json_name = "vehicleCnt"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.vehicle_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cum_in_vehicle_cnt = 5 [json_name = "cumInVehicleCnt"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.cum_in_vehicle_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cum_out_vehicle_cnt = 6 [json_name = "cumOutVehicleCnt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.cum_out_vehicle_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .city.map.v2.LaneState lanes = 7 [json_name = "lanes"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .city.map.v2.LaneState predecessor_driving_lanes = 8 [json_name = "predecessorDrivingLanes"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predecessor_driving_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 total_queuing_vehicle_cnt = 9 [json_name = "totalQueuingVehicleCnt"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.total_queuing_vehicle_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double total_queuing_time = 10 [json_name = "totalQueuingTime"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.total_queuing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double avg_queuing_time = 11 [json_name = "avgQueuingTime"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.avg_queuing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 max_queuing_vehicle_cnt = 12 [json_name = "maxQueuingVehicleCnt"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.max_queuing_vehicle_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_traffic_light = 13 [json_name = "hasTrafficLight"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.has_traffic_light_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JunctionState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.JunctionState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 in_vehicle_cnt = 2 [json_name = "inVehicleCnt"];
  if (this->_internal_in_vehicle_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_in_vehicle_cnt(), target);
  }

  // int32 out_vehicle_cnt = 3 [json_name = "outVehicleCnt"];
  if (this->_internal_out_vehicle_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_out_vehicle_cnt(), target);
  }

  // int32 vehicle_cnt = 4 [json_name = "vehicleCnt"];
  if (this->_internal_vehicle_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_vehicle_cnt(), target);
  }

  // int32 cum_in_vehicle_cnt = 5 [json_name = "cumInVehicleCnt"];
  if (this->_internal_cum_in_vehicle_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_cum_in_vehicle_cnt(), target);
  }

  // int32 cum_out_vehicle_cnt = 6 [json_name = "cumOutVehicleCnt"];
  if (this->_internal_cum_out_vehicle_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_cum_out_vehicle_cnt(), target);
  }

  // repeated .city.map.v2.LaneState lanes = 7 [json_name = "lanes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lanes_size()); i < n; i++) {
    const auto& repfield = this->_internal_lanes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .city.map.v2.LaneState predecessor_driving_lanes = 8 [json_name = "predecessorDrivingLanes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_predecessor_driving_lanes_size()); i < n; i++) {
    const auto& repfield = this->_internal_predecessor_driving_lanes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 total_queuing_vehicle_cnt = 9 [json_name = "totalQueuingVehicleCnt"];
  if (this->_internal_total_queuing_vehicle_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_total_queuing_vehicle_cnt(), target);
  }

  // double total_queuing_time = 10 [json_name = "totalQueuingTime"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_queuing_time = this->_internal_total_queuing_time();
  uint64_t raw_total_queuing_time;
  memcpy(&raw_total_queuing_time, &tmp_total_queuing_time, sizeof(tmp_total_queuing_time));
  if (raw_total_queuing_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_total_queuing_time(), target);
  }

  // double avg_queuing_time = 11 [json_name = "avgQueuingTime"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_queuing_time = this->_internal_avg_queuing_time();
  uint64_t raw_avg_queuing_time;
  memcpy(&raw_avg_queuing_time, &tmp_avg_queuing_time, sizeof(tmp_avg_queuing_time));
  if (raw_avg_queuing_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_avg_queuing_time(), target);
  }

  // int32 max_queuing_vehicle_cnt = 12 [json_name = "maxQueuingVehicleCnt"];
  if (this->_internal_max_queuing_vehicle_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_max_queuing_vehicle_cnt(), target);
  }

  // bool has_traffic_light = 13 [json_name = "hasTrafficLight"];
  if (this->_internal_has_traffic_light() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_has_traffic_light(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.JunctionState)
  return target;
}

size_t JunctionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.JunctionState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.map.v2.LaneState lanes = 7 [json_name = "lanes"];
  total_size += 1UL * this->_internal_lanes_size();
  for (const auto& msg : this->_impl_.lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .city.map.v2.LaneState predecessor_driving_lanes = 8 [json_name = "predecessorDrivingLanes"];
  total_size += 1UL * this->_internal_predecessor_driving_lanes_size();
  for (const auto& msg : this->_impl_.predecessor_driving_lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 in_vehicle_cnt = 2 [json_name = "inVehicleCnt"];
  if (this->_internal_in_vehicle_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_in_vehicle_cnt());
  }

  // int32 out_vehicle_cnt = 3 [json_name = "outVehicleCnt"];
  if (this->_internal_out_vehicle_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_out_vehicle_cnt());
  }

  // int32 vehicle_cnt = 4 [json_name = "vehicleCnt"];
  if (this->_internal_vehicle_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vehicle_cnt());
  }

  // int32 cum_in_vehicle_cnt = 5 [json_name = "cumInVehicleCnt"];
  if (this->_internal_cum_in_vehicle_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cum_in_vehicle_cnt());
  }

  // int32 cum_out_vehicle_cnt = 6 [json_name = "cumOutVehicleCnt"];
  if (this->_internal_cum_out_vehicle_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cum_out_vehicle_cnt());
  }

  // double total_queuing_time = 10 [json_name = "totalQueuingTime"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_queuing_time = this->_internal_total_queuing_time();
  uint64_t raw_total_queuing_time;
  memcpy(&raw_total_queuing_time, &tmp_total_queuing_time, sizeof(tmp_total_queuing_time));
  if (raw_total_queuing_time != 0) {
    total_size += 1 + 8;
  }

  // int32 total_queuing_vehicle_cnt = 9 [json_name = "totalQueuingVehicleCnt"];
  if (this->_internal_total_queuing_vehicle_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_queuing_vehicle_cnt());
  }

  // int32 max_queuing_vehicle_cnt = 12 [json_name = "maxQueuingVehicleCnt"];
  if (this->_internal_max_queuing_vehicle_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_queuing_vehicle_cnt());
  }

  // double avg_queuing_time = 11 [json_name = "avgQueuingTime"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_queuing_time = this->_internal_avg_queuing_time();
  uint64_t raw_avg_queuing_time;
  memcpy(&raw_avg_queuing_time, &tmp_avg_queuing_time, sizeof(tmp_avg_queuing_time));
  if (raw_avg_queuing_time != 0) {
    total_size += 1 + 8;
  }

  // bool has_traffic_light = 13 [json_name = "hasTrafficLight"];
  if (this->_internal_has_traffic_light() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JunctionState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JunctionState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JunctionState::GetClassData() const { return &_class_data_; }


void JunctionState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JunctionState*>(&to_msg);
  auto& from = static_cast<const JunctionState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.JunctionState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lanes_.MergeFrom(from._impl_.lanes_);
  _this->_impl_.predecessor_driving_lanes_.MergeFrom(from._impl_.predecessor_driving_lanes_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_in_vehicle_cnt() != 0) {
    _this->_internal_set_in_vehicle_cnt(from._internal_in_vehicle_cnt());
  }
  if (from._internal_out_vehicle_cnt() != 0) {
    _this->_internal_set_out_vehicle_cnt(from._internal_out_vehicle_cnt());
  }
  if (from._internal_vehicle_cnt() != 0) {
    _this->_internal_set_vehicle_cnt(from._internal_vehicle_cnt());
  }
  if (from._internal_cum_in_vehicle_cnt() != 0) {
    _this->_internal_set_cum_in_vehicle_cnt(from._internal_cum_in_vehicle_cnt());
  }
  if (from._internal_cum_out_vehicle_cnt() != 0) {
    _this->_internal_set_cum_out_vehicle_cnt(from._internal_cum_out_vehicle_cnt());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_queuing_time = from._internal_total_queuing_time();
  uint64_t raw_total_queuing_time;
  memcpy(&raw_total_queuing_time, &tmp_total_queuing_time, sizeof(tmp_total_queuing_time));
  if (raw_total_queuing_time != 0) {
    _this->_internal_set_total_queuing_time(from._internal_total_queuing_time());
  }
  if (from._internal_total_queuing_vehicle_cnt() != 0) {
    _this->_internal_set_total_queuing_vehicle_cnt(from._internal_total_queuing_vehicle_cnt());
  }
  if (from._internal_max_queuing_vehicle_cnt() != 0) {
    _this->_internal_set_max_queuing_vehicle_cnt(from._internal_max_queuing_vehicle_cnt());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_queuing_time = from._internal_avg_queuing_time();
  uint64_t raw_avg_queuing_time;
  memcpy(&raw_avg_queuing_time, &tmp_avg_queuing_time, sizeof(tmp_avg_queuing_time));
  if (raw_avg_queuing_time != 0) {
    _this->_internal_set_avg_queuing_time(from._internal_avg_queuing_time());
  }
  if (from._internal_has_traffic_light() != 0) {
    _this->_internal_set_has_traffic_light(from._internal_has_traffic_light());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JunctionState::CopyFrom(const JunctionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.JunctionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunctionState::IsInitialized() const {
  return true;
}

void JunctionState::InternalSwap(JunctionState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lanes_.InternalSwap(&other->_impl_.lanes_);
  _impl_.predecessor_driving_lanes_.InternalSwap(&other->_impl_.predecessor_driving_lanes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JunctionState, _impl_.has_traffic_light_)
      + sizeof(JunctionState::_impl_.has_traffic_light_)
      - PROTOBUF_FIELD_OFFSET(JunctionState, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JunctionState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2fjunction_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2fjunction_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2fjunction_5fservice_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace map
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::map::v2::GetJunctionRequest*
Arena::CreateMaybeMessage< ::city::map::v2::GetJunctionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetJunctionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::GetJunctionResponse*
Arena::CreateMaybeMessage< ::city::map::v2::GetJunctionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetJunctionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::JunctionState*
Arena::CreateMaybeMessage< ::city::map::v2::JunctionState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::JunctionState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
