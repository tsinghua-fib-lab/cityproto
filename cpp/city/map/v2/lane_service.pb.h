// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/map/v2/lane_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2flane_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2flane_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "city/geo/v2/geo.pb.h"
#include "city/map/v2/lane_state.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fmap_2fv2_2flane_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fmap_2fv2_2flane_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto;
namespace city {
namespace map {
namespace v2 {
class GetLaneByLongLatBBoxRequest;
struct GetLaneByLongLatBBoxRequestDefaultTypeInternal;
extern GetLaneByLongLatBBoxRequestDefaultTypeInternal _GetLaneByLongLatBBoxRequest_default_instance_;
class GetLaneByLongLatBBoxResponse;
struct GetLaneByLongLatBBoxResponseDefaultTypeInternal;
extern GetLaneByLongLatBBoxResponseDefaultTypeInternal _GetLaneByLongLatBBoxResponse_default_instance_;
class GetLaneRequest;
struct GetLaneRequestDefaultTypeInternal;
extern GetLaneRequestDefaultTypeInternal _GetLaneRequest_default_instance_;
class GetLaneResponse;
struct GetLaneResponseDefaultTypeInternal;
extern GetLaneResponseDefaultTypeInternal _GetLaneResponse_default_instance_;
class SetLaneMaxVRequest;
struct SetLaneMaxVRequestDefaultTypeInternal;
extern SetLaneMaxVRequestDefaultTypeInternal _SetLaneMaxVRequest_default_instance_;
class SetLaneMaxVResponse;
struct SetLaneMaxVResponseDefaultTypeInternal;
extern SetLaneMaxVResponseDefaultTypeInternal _SetLaneMaxVResponse_default_instance_;
class SetLaneRestrictionRequest;
struct SetLaneRestrictionRequestDefaultTypeInternal;
extern SetLaneRestrictionRequestDefaultTypeInternal _SetLaneRestrictionRequest_default_instance_;
class SetLaneRestrictionResponse;
struct SetLaneRestrictionResponseDefaultTypeInternal;
extern SetLaneRestrictionResponseDefaultTypeInternal _SetLaneRestrictionResponse_default_instance_;
}  // namespace v2
}  // namespace map
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::map::v2::GetLaneByLongLatBBoxRequest* Arena::CreateMaybeMessage<::city::map::v2::GetLaneByLongLatBBoxRequest>(Arena*);
template<> ::city::map::v2::GetLaneByLongLatBBoxResponse* Arena::CreateMaybeMessage<::city::map::v2::GetLaneByLongLatBBoxResponse>(Arena*);
template<> ::city::map::v2::GetLaneRequest* Arena::CreateMaybeMessage<::city::map::v2::GetLaneRequest>(Arena*);
template<> ::city::map::v2::GetLaneResponse* Arena::CreateMaybeMessage<::city::map::v2::GetLaneResponse>(Arena*);
template<> ::city::map::v2::SetLaneMaxVRequest* Arena::CreateMaybeMessage<::city::map::v2::SetLaneMaxVRequest>(Arena*);
template<> ::city::map::v2::SetLaneMaxVResponse* Arena::CreateMaybeMessage<::city::map::v2::SetLaneMaxVResponse>(Arena*);
template<> ::city::map::v2::SetLaneRestrictionRequest* Arena::CreateMaybeMessage<::city::map::v2::SetLaneRestrictionRequest>(Arena*);
template<> ::city::map::v2::SetLaneRestrictionResponse* Arena::CreateMaybeMessage<::city::map::v2::SetLaneRestrictionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace map {
namespace v2 {

// ===================================================================

class SetLaneMaxVRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.map.v2.SetLaneMaxVRequest) */ {
 public:
  inline SetLaneMaxVRequest() : SetLaneMaxVRequest(nullptr) {}
  ~SetLaneMaxVRequest() override;
  explicit PROTOBUF_CONSTEXPR SetLaneMaxVRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLaneMaxVRequest(const SetLaneMaxVRequest& from);
  SetLaneMaxVRequest(SetLaneMaxVRequest&& from) noexcept
    : SetLaneMaxVRequest() {
    *this = ::std::move(from);
  }

  inline SetLaneMaxVRequest& operator=(const SetLaneMaxVRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLaneMaxVRequest& operator=(SetLaneMaxVRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetLaneMaxVRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLaneMaxVRequest* internal_default_instance() {
    return reinterpret_cast<const SetLaneMaxVRequest*>(
               &_SetLaneMaxVRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetLaneMaxVRequest& a, SetLaneMaxVRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLaneMaxVRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLaneMaxVRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetLaneMaxVRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetLaneMaxVRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetLaneMaxVRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetLaneMaxVRequest& from) {
    SetLaneMaxVRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLaneMaxVRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.SetLaneMaxVRequest";
  }
  protected:
  explicit SetLaneMaxVRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxVFieldNumber = 2,
    kLaneIdFieldNumber = 1,
  };
  // double max_v = 2 [json_name = "maxV"];
  void clear_max_v();
  double max_v() const;
  void set_max_v(double value);
  private:
  double _internal_max_v() const;
  void _internal_set_max_v(double value);
  public:

  // int32 lane_id = 1 [json_name = "laneId"];
  void clear_lane_id();
  int32_t lane_id() const;
  void set_lane_id(int32_t value);
  private:
  int32_t _internal_lane_id() const;
  void _internal_set_lane_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.map.v2.SetLaneMaxVRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double max_v_;
    int32_t lane_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2flane_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetLaneMaxVResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.map.v2.SetLaneMaxVResponse) */ {
 public:
  inline SetLaneMaxVResponse() : SetLaneMaxVResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetLaneMaxVResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLaneMaxVResponse(const SetLaneMaxVResponse& from);
  SetLaneMaxVResponse(SetLaneMaxVResponse&& from) noexcept
    : SetLaneMaxVResponse() {
    *this = ::std::move(from);
  }

  inline SetLaneMaxVResponse& operator=(const SetLaneMaxVResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLaneMaxVResponse& operator=(SetLaneMaxVResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetLaneMaxVResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLaneMaxVResponse* internal_default_instance() {
    return reinterpret_cast<const SetLaneMaxVResponse*>(
               &_SetLaneMaxVResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetLaneMaxVResponse& a, SetLaneMaxVResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLaneMaxVResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLaneMaxVResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetLaneMaxVResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetLaneMaxVResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetLaneMaxVResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetLaneMaxVResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.SetLaneMaxVResponse";
  }
  protected:
  explicit SetLaneMaxVResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.map.v2.SetLaneMaxVResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fmap_2fv2_2flane_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetLaneRestrictionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.map.v2.SetLaneRestrictionRequest) */ {
 public:
  inline SetLaneRestrictionRequest() : SetLaneRestrictionRequest(nullptr) {}
  ~SetLaneRestrictionRequest() override;
  explicit PROTOBUF_CONSTEXPR SetLaneRestrictionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLaneRestrictionRequest(const SetLaneRestrictionRequest& from);
  SetLaneRestrictionRequest(SetLaneRestrictionRequest&& from) noexcept
    : SetLaneRestrictionRequest() {
    *this = ::std::move(from);
  }

  inline SetLaneRestrictionRequest& operator=(const SetLaneRestrictionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLaneRestrictionRequest& operator=(SetLaneRestrictionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetLaneRestrictionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLaneRestrictionRequest* internal_default_instance() {
    return reinterpret_cast<const SetLaneRestrictionRequest*>(
               &_SetLaneRestrictionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetLaneRestrictionRequest& a, SetLaneRestrictionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLaneRestrictionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLaneRestrictionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetLaneRestrictionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetLaneRestrictionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetLaneRestrictionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetLaneRestrictionRequest& from) {
    SetLaneRestrictionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLaneRestrictionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.SetLaneRestrictionRequest";
  }
  protected:
  explicit SetLaneRestrictionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneIdFieldNumber = 1,
    kRestrictionFieldNumber = 2,
  };
  // int32 lane_id = 1 [json_name = "laneId"];
  void clear_lane_id();
  int32_t lane_id() const;
  void set_lane_id(int32_t value);
  private:
  int32_t _internal_lane_id() const;
  void _internal_set_lane_id(int32_t value);
  public:

  // bool restriction = 2 [json_name = "restriction"];
  void clear_restriction();
  bool restriction() const;
  void set_restriction(bool value);
  private:
  bool _internal_restriction() const;
  void _internal_set_restriction(bool value);
  public:

  // @@protoc_insertion_point(class_scope:city.map.v2.SetLaneRestrictionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t lane_id_;
    bool restriction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2flane_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetLaneRestrictionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.map.v2.SetLaneRestrictionResponse) */ {
 public:
  inline SetLaneRestrictionResponse() : SetLaneRestrictionResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetLaneRestrictionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetLaneRestrictionResponse(const SetLaneRestrictionResponse& from);
  SetLaneRestrictionResponse(SetLaneRestrictionResponse&& from) noexcept
    : SetLaneRestrictionResponse() {
    *this = ::std::move(from);
  }

  inline SetLaneRestrictionResponse& operator=(const SetLaneRestrictionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLaneRestrictionResponse& operator=(SetLaneRestrictionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetLaneRestrictionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetLaneRestrictionResponse* internal_default_instance() {
    return reinterpret_cast<const SetLaneRestrictionResponse*>(
               &_SetLaneRestrictionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetLaneRestrictionResponse& a, SetLaneRestrictionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLaneRestrictionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLaneRestrictionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetLaneRestrictionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetLaneRestrictionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetLaneRestrictionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetLaneRestrictionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.SetLaneRestrictionResponse";
  }
  protected:
  explicit SetLaneRestrictionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.map.v2.SetLaneRestrictionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fmap_2fv2_2flane_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLaneRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.map.v2.GetLaneRequest) */ {
 public:
  inline GetLaneRequest() : GetLaneRequest(nullptr) {}
  ~GetLaneRequest() override;
  explicit PROTOBUF_CONSTEXPR GetLaneRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLaneRequest(const GetLaneRequest& from);
  GetLaneRequest(GetLaneRequest&& from) noexcept
    : GetLaneRequest() {
    *this = ::std::move(from);
  }

  inline GetLaneRequest& operator=(const GetLaneRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLaneRequest& operator=(GetLaneRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLaneRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLaneRequest* internal_default_instance() {
    return reinterpret_cast<const GetLaneRequest*>(
               &_GetLaneRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetLaneRequest& a, GetLaneRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLaneRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLaneRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLaneRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLaneRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLaneRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLaneRequest& from) {
    GetLaneRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLaneRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.GetLaneRequest";
  }
  protected:
  explicit GetLaneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneIdsFieldNumber = 1,
    kExcludePersonFieldNumber = 2,
  };
  // repeated int32 lane_ids = 1 [json_name = "laneIds"];
  int lane_ids_size() const;
  private:
  int _internal_lane_ids_size() const;
  public:
  void clear_lane_ids();
  private:
  int32_t _internal_lane_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_lane_ids() const;
  void _internal_add_lane_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_lane_ids();
  public:
  int32_t lane_ids(int index) const;
  void set_lane_ids(int index, int32_t value);
  void add_lane_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      lane_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_lane_ids();

  // bool exclude_person = 2 [json_name = "excludePerson"];
  void clear_exclude_person();
  bool exclude_person() const;
  void set_exclude_person(bool value);
  private:
  bool _internal_exclude_person() const;
  void _internal_set_exclude_person(bool value);
  public:

  // @@protoc_insertion_point(class_scope:city.map.v2.GetLaneRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > lane_ids_;
    mutable std::atomic<int> _lane_ids_cached_byte_size_;
    bool exclude_person_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2flane_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLaneResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.map.v2.GetLaneResponse) */ {
 public:
  inline GetLaneResponse() : GetLaneResponse(nullptr) {}
  ~GetLaneResponse() override;
  explicit PROTOBUF_CONSTEXPR GetLaneResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLaneResponse(const GetLaneResponse& from);
  GetLaneResponse(GetLaneResponse&& from) noexcept
    : GetLaneResponse() {
    *this = ::std::move(from);
  }

  inline GetLaneResponse& operator=(const GetLaneResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLaneResponse& operator=(GetLaneResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLaneResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLaneResponse* internal_default_instance() {
    return reinterpret_cast<const GetLaneResponse*>(
               &_GetLaneResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetLaneResponse& a, GetLaneResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLaneResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLaneResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLaneResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLaneResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLaneResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLaneResponse& from) {
    GetLaneResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLaneResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.GetLaneResponse";
  }
  protected:
  explicit GetLaneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
  };
  // repeated .city.map.v2.LaneState states = 1 [json_name = "states"];
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::city::map::v2::LaneState* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >*
      mutable_states();
  private:
  const ::city::map::v2::LaneState& _internal_states(int index) const;
  ::city::map::v2::LaneState* _internal_add_states();
  public:
  const ::city::map::v2::LaneState& states(int index) const;
  ::city::map::v2::LaneState* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >&
      states() const;

  // @@protoc_insertion_point(class_scope:city.map.v2.GetLaneResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState > states_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2flane_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLaneByLongLatBBoxRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.map.v2.GetLaneByLongLatBBoxRequest) */ {
 public:
  inline GetLaneByLongLatBBoxRequest() : GetLaneByLongLatBBoxRequest(nullptr) {}
  ~GetLaneByLongLatBBoxRequest() override;
  explicit PROTOBUF_CONSTEXPR GetLaneByLongLatBBoxRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLaneByLongLatBBoxRequest(const GetLaneByLongLatBBoxRequest& from);
  GetLaneByLongLatBBoxRequest(GetLaneByLongLatBBoxRequest&& from) noexcept
    : GetLaneByLongLatBBoxRequest() {
    *this = ::std::move(from);
  }

  inline GetLaneByLongLatBBoxRequest& operator=(const GetLaneByLongLatBBoxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLaneByLongLatBBoxRequest& operator=(GetLaneByLongLatBBoxRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLaneByLongLatBBoxRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLaneByLongLatBBoxRequest* internal_default_instance() {
    return reinterpret_cast<const GetLaneByLongLatBBoxRequest*>(
               &_GetLaneByLongLatBBoxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetLaneByLongLatBBoxRequest& a, GetLaneByLongLatBBoxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLaneByLongLatBBoxRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLaneByLongLatBBoxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLaneByLongLatBBoxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLaneByLongLatBBoxRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLaneByLongLatBBoxRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLaneByLongLatBBoxRequest& from) {
    GetLaneByLongLatBBoxRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLaneByLongLatBBoxRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.GetLaneByLongLatBBoxRequest";
  }
  protected:
  explicit GetLaneByLongLatBBoxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBboxFieldNumber = 1,
    kExcludePersonFieldNumber = 2,
  };
  // .city.geo.v2.LongLatBBox bbox = 1 [json_name = "bbox"];
  bool has_bbox() const;
  private:
  bool _internal_has_bbox() const;
  public:
  void clear_bbox();
  const ::city::geo::v2::LongLatBBox& bbox() const;
  PROTOBUF_NODISCARD ::city::geo::v2::LongLatBBox* release_bbox();
  ::city::geo::v2::LongLatBBox* mutable_bbox();
  void set_allocated_bbox(::city::geo::v2::LongLatBBox* bbox);
  private:
  const ::city::geo::v2::LongLatBBox& _internal_bbox() const;
  ::city::geo::v2::LongLatBBox* _internal_mutable_bbox();
  public:
  void unsafe_arena_set_allocated_bbox(
      ::city::geo::v2::LongLatBBox* bbox);
  ::city::geo::v2::LongLatBBox* unsafe_arena_release_bbox();

  // bool exclude_person = 2 [json_name = "excludePerson"];
  void clear_exclude_person();
  bool exclude_person() const;
  void set_exclude_person(bool value);
  private:
  bool _internal_exclude_person() const;
  void _internal_set_exclude_person(bool value);
  public:

  // @@protoc_insertion_point(class_scope:city.map.v2.GetLaneByLongLatBBoxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::geo::v2::LongLatBBox* bbox_;
    bool exclude_person_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2flane_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetLaneByLongLatBBoxResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.map.v2.GetLaneByLongLatBBoxResponse) */ {
 public:
  inline GetLaneByLongLatBBoxResponse() : GetLaneByLongLatBBoxResponse(nullptr) {}
  ~GetLaneByLongLatBBoxResponse() override;
  explicit PROTOBUF_CONSTEXPR GetLaneByLongLatBBoxResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLaneByLongLatBBoxResponse(const GetLaneByLongLatBBoxResponse& from);
  GetLaneByLongLatBBoxResponse(GetLaneByLongLatBBoxResponse&& from) noexcept
    : GetLaneByLongLatBBoxResponse() {
    *this = ::std::move(from);
  }

  inline GetLaneByLongLatBBoxResponse& operator=(const GetLaneByLongLatBBoxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLaneByLongLatBBoxResponse& operator=(GetLaneByLongLatBBoxResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLaneByLongLatBBoxResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLaneByLongLatBBoxResponse* internal_default_instance() {
    return reinterpret_cast<const GetLaneByLongLatBBoxResponse*>(
               &_GetLaneByLongLatBBoxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetLaneByLongLatBBoxResponse& a, GetLaneByLongLatBBoxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLaneByLongLatBBoxResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLaneByLongLatBBoxResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLaneByLongLatBBoxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLaneByLongLatBBoxResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLaneByLongLatBBoxResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetLaneByLongLatBBoxResponse& from) {
    GetLaneByLongLatBBoxResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLaneByLongLatBBoxResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.GetLaneByLongLatBBoxResponse";
  }
  protected:
  explicit GetLaneByLongLatBBoxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
  };
  // repeated .city.map.v2.LaneState states = 1 [json_name = "states"];
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::city::map::v2::LaneState* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >*
      mutable_states();
  private:
  const ::city::map::v2::LaneState& _internal_states(int index) const;
  ::city::map::v2::LaneState* _internal_add_states();
  public:
  const ::city::map::v2::LaneState& states(int index) const;
  ::city::map::v2::LaneState* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >&
      states() const;

  // @@protoc_insertion_point(class_scope:city.map.v2.GetLaneByLongLatBBoxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState > states_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2flane_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetLaneMaxVRequest

// int32 lane_id = 1 [json_name = "laneId"];
inline void SetLaneMaxVRequest::clear_lane_id() {
  _impl_.lane_id_ = 0;
}
inline int32_t SetLaneMaxVRequest::_internal_lane_id() const {
  return _impl_.lane_id_;
}
inline int32_t SetLaneMaxVRequest::lane_id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.SetLaneMaxVRequest.lane_id)
  return _internal_lane_id();
}
inline void SetLaneMaxVRequest::_internal_set_lane_id(int32_t value) {
  
  _impl_.lane_id_ = value;
}
inline void SetLaneMaxVRequest::set_lane_id(int32_t value) {
  _internal_set_lane_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.SetLaneMaxVRequest.lane_id)
}

// double max_v = 2 [json_name = "maxV"];
inline void SetLaneMaxVRequest::clear_max_v() {
  _impl_.max_v_ = 0;
}
inline double SetLaneMaxVRequest::_internal_max_v() const {
  return _impl_.max_v_;
}
inline double SetLaneMaxVRequest::max_v() const {
  // @@protoc_insertion_point(field_get:city.map.v2.SetLaneMaxVRequest.max_v)
  return _internal_max_v();
}
inline void SetLaneMaxVRequest::_internal_set_max_v(double value) {
  
  _impl_.max_v_ = value;
}
inline void SetLaneMaxVRequest::set_max_v(double value) {
  _internal_set_max_v(value);
  // @@protoc_insertion_point(field_set:city.map.v2.SetLaneMaxVRequest.max_v)
}

// -------------------------------------------------------------------

// SetLaneMaxVResponse

// -------------------------------------------------------------------

// SetLaneRestrictionRequest

// int32 lane_id = 1 [json_name = "laneId"];
inline void SetLaneRestrictionRequest::clear_lane_id() {
  _impl_.lane_id_ = 0;
}
inline int32_t SetLaneRestrictionRequest::_internal_lane_id() const {
  return _impl_.lane_id_;
}
inline int32_t SetLaneRestrictionRequest::lane_id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.SetLaneRestrictionRequest.lane_id)
  return _internal_lane_id();
}
inline void SetLaneRestrictionRequest::_internal_set_lane_id(int32_t value) {
  
  _impl_.lane_id_ = value;
}
inline void SetLaneRestrictionRequest::set_lane_id(int32_t value) {
  _internal_set_lane_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.SetLaneRestrictionRequest.lane_id)
}

// bool restriction = 2 [json_name = "restriction"];
inline void SetLaneRestrictionRequest::clear_restriction() {
  _impl_.restriction_ = false;
}
inline bool SetLaneRestrictionRequest::_internal_restriction() const {
  return _impl_.restriction_;
}
inline bool SetLaneRestrictionRequest::restriction() const {
  // @@protoc_insertion_point(field_get:city.map.v2.SetLaneRestrictionRequest.restriction)
  return _internal_restriction();
}
inline void SetLaneRestrictionRequest::_internal_set_restriction(bool value) {
  
  _impl_.restriction_ = value;
}
inline void SetLaneRestrictionRequest::set_restriction(bool value) {
  _internal_set_restriction(value);
  // @@protoc_insertion_point(field_set:city.map.v2.SetLaneRestrictionRequest.restriction)
}

// -------------------------------------------------------------------

// SetLaneRestrictionResponse

// -------------------------------------------------------------------

// GetLaneRequest

// repeated int32 lane_ids = 1 [json_name = "laneIds"];
inline int GetLaneRequest::_internal_lane_ids_size() const {
  return _impl_.lane_ids_.size();
}
inline int GetLaneRequest::lane_ids_size() const {
  return _internal_lane_ids_size();
}
inline void GetLaneRequest::clear_lane_ids() {
  _impl_.lane_ids_.Clear();
}
inline int32_t GetLaneRequest::_internal_lane_ids(int index) const {
  return _impl_.lane_ids_.Get(index);
}
inline int32_t GetLaneRequest::lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetLaneRequest.lane_ids)
  return _internal_lane_ids(index);
}
inline void GetLaneRequest::set_lane_ids(int index, int32_t value) {
  _impl_.lane_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.map.v2.GetLaneRequest.lane_ids)
}
inline void GetLaneRequest::_internal_add_lane_ids(int32_t value) {
  _impl_.lane_ids_.Add(value);
}
inline void GetLaneRequest::add_lane_ids(int32_t value) {
  _internal_add_lane_ids(value);
  // @@protoc_insertion_point(field_add:city.map.v2.GetLaneRequest.lane_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetLaneRequest::_internal_lane_ids() const {
  return _impl_.lane_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetLaneRequest::lane_ids() const {
  // @@protoc_insertion_point(field_list:city.map.v2.GetLaneRequest.lane_ids)
  return _internal_lane_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetLaneRequest::_internal_mutable_lane_ids() {
  return &_impl_.lane_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetLaneRequest::mutable_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.GetLaneRequest.lane_ids)
  return _internal_mutable_lane_ids();
}

// bool exclude_person = 2 [json_name = "excludePerson"];
inline void GetLaneRequest::clear_exclude_person() {
  _impl_.exclude_person_ = false;
}
inline bool GetLaneRequest::_internal_exclude_person() const {
  return _impl_.exclude_person_;
}
inline bool GetLaneRequest::exclude_person() const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetLaneRequest.exclude_person)
  return _internal_exclude_person();
}
inline void GetLaneRequest::_internal_set_exclude_person(bool value) {
  
  _impl_.exclude_person_ = value;
}
inline void GetLaneRequest::set_exclude_person(bool value) {
  _internal_set_exclude_person(value);
  // @@protoc_insertion_point(field_set:city.map.v2.GetLaneRequest.exclude_person)
}

// -------------------------------------------------------------------

// GetLaneResponse

// repeated .city.map.v2.LaneState states = 1 [json_name = "states"];
inline int GetLaneResponse::_internal_states_size() const {
  return _impl_.states_.size();
}
inline int GetLaneResponse::states_size() const {
  return _internal_states_size();
}
inline ::city::map::v2::LaneState* GetLaneResponse::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.GetLaneResponse.states)
  return _impl_.states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >*
GetLaneResponse::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.GetLaneResponse.states)
  return &_impl_.states_;
}
inline const ::city::map::v2::LaneState& GetLaneResponse::_internal_states(int index) const {
  return _impl_.states_.Get(index);
}
inline const ::city::map::v2::LaneState& GetLaneResponse::states(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetLaneResponse.states)
  return _internal_states(index);
}
inline ::city::map::v2::LaneState* GetLaneResponse::_internal_add_states() {
  return _impl_.states_.Add();
}
inline ::city::map::v2::LaneState* GetLaneResponse::add_states() {
  ::city::map::v2::LaneState* _add = _internal_add_states();
  // @@protoc_insertion_point(field_add:city.map.v2.GetLaneResponse.states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >&
GetLaneResponse::states() const {
  // @@protoc_insertion_point(field_list:city.map.v2.GetLaneResponse.states)
  return _impl_.states_;
}

// -------------------------------------------------------------------

// GetLaneByLongLatBBoxRequest

// .city.geo.v2.LongLatBBox bbox = 1 [json_name = "bbox"];
inline bool GetLaneByLongLatBBoxRequest::_internal_has_bbox() const {
  return this != internal_default_instance() && _impl_.bbox_ != nullptr;
}
inline bool GetLaneByLongLatBBoxRequest::has_bbox() const {
  return _internal_has_bbox();
}
inline const ::city::geo::v2::LongLatBBox& GetLaneByLongLatBBoxRequest::_internal_bbox() const {
  const ::city::geo::v2::LongLatBBox* p = _impl_.bbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::LongLatBBox&>(
      ::city::geo::v2::_LongLatBBox_default_instance_);
}
inline const ::city::geo::v2::LongLatBBox& GetLaneByLongLatBBoxRequest::bbox() const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetLaneByLongLatBBoxRequest.bbox)
  return _internal_bbox();
}
inline void GetLaneByLongLatBBoxRequest::unsafe_arena_set_allocated_bbox(
    ::city::geo::v2::LongLatBBox* bbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bbox_);
  }
  _impl_.bbox_ = bbox;
  if (bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.map.v2.GetLaneByLongLatBBoxRequest.bbox)
}
inline ::city::geo::v2::LongLatBBox* GetLaneByLongLatBBoxRequest::release_bbox() {
  
  ::city::geo::v2::LongLatBBox* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::geo::v2::LongLatBBox* GetLaneByLongLatBBoxRequest::unsafe_arena_release_bbox() {
  // @@protoc_insertion_point(field_release:city.map.v2.GetLaneByLongLatBBoxRequest.bbox)
  
  ::city::geo::v2::LongLatBBox* temp = _impl_.bbox_;
  _impl_.bbox_ = nullptr;
  return temp;
}
inline ::city::geo::v2::LongLatBBox* GetLaneByLongLatBBoxRequest::_internal_mutable_bbox() {
  
  if (_impl_.bbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::LongLatBBox>(GetArenaForAllocation());
    _impl_.bbox_ = p;
  }
  return _impl_.bbox_;
}
inline ::city::geo::v2::LongLatBBox* GetLaneByLongLatBBoxRequest::mutable_bbox() {
  ::city::geo::v2::LongLatBBox* _msg = _internal_mutable_bbox();
  // @@protoc_insertion_point(field_mutable:city.map.v2.GetLaneByLongLatBBoxRequest.bbox)
  return _msg;
}
inline void GetLaneByLongLatBBoxRequest::set_allocated_bbox(::city::geo::v2::LongLatBBox* bbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bbox_);
  }
  if (bbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbox));
    if (message_arena != submessage_arena) {
      bbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbox, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bbox_ = bbox;
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.GetLaneByLongLatBBoxRequest.bbox)
}

// bool exclude_person = 2 [json_name = "excludePerson"];
inline void GetLaneByLongLatBBoxRequest::clear_exclude_person() {
  _impl_.exclude_person_ = false;
}
inline bool GetLaneByLongLatBBoxRequest::_internal_exclude_person() const {
  return _impl_.exclude_person_;
}
inline bool GetLaneByLongLatBBoxRequest::exclude_person() const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetLaneByLongLatBBoxRequest.exclude_person)
  return _internal_exclude_person();
}
inline void GetLaneByLongLatBBoxRequest::_internal_set_exclude_person(bool value) {
  
  _impl_.exclude_person_ = value;
}
inline void GetLaneByLongLatBBoxRequest::set_exclude_person(bool value) {
  _internal_set_exclude_person(value);
  // @@protoc_insertion_point(field_set:city.map.v2.GetLaneByLongLatBBoxRequest.exclude_person)
}

// -------------------------------------------------------------------

// GetLaneByLongLatBBoxResponse

// repeated .city.map.v2.LaneState states = 1 [json_name = "states"];
inline int GetLaneByLongLatBBoxResponse::_internal_states_size() const {
  return _impl_.states_.size();
}
inline int GetLaneByLongLatBBoxResponse::states_size() const {
  return _internal_states_size();
}
inline ::city::map::v2::LaneState* GetLaneByLongLatBBoxResponse::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.GetLaneByLongLatBBoxResponse.states)
  return _impl_.states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >*
GetLaneByLongLatBBoxResponse::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.GetLaneByLongLatBBoxResponse.states)
  return &_impl_.states_;
}
inline const ::city::map::v2::LaneState& GetLaneByLongLatBBoxResponse::_internal_states(int index) const {
  return _impl_.states_.Get(index);
}
inline const ::city::map::v2::LaneState& GetLaneByLongLatBBoxResponse::states(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetLaneByLongLatBBoxResponse.states)
  return _internal_states(index);
}
inline ::city::map::v2::LaneState* GetLaneByLongLatBBoxResponse::_internal_add_states() {
  return _impl_.states_.Add();
}
inline ::city::map::v2::LaneState* GetLaneByLongLatBBoxResponse::add_states() {
  ::city::map::v2::LaneState* _add = _internal_add_states();
  // @@protoc_insertion_point(field_add:city.map.v2.GetLaneByLongLatBBoxResponse.states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >&
GetLaneByLongLatBBoxResponse::states() const {
  // @@protoc_insertion_point(field_list:city.map.v2.GetLaneByLongLatBBoxResponse.states)
  return _impl_.states_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace map
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2flane_5fservice_2eproto
