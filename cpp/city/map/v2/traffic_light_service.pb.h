// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/map/v2/traffic_light_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "city/map/v2/light.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto;
namespace city {
namespace map {
namespace v2 {
class GetTrafficLightRequest;
struct GetTrafficLightRequestDefaultTypeInternal;
extern GetTrafficLightRequestDefaultTypeInternal _GetTrafficLightRequest_default_instance_;
class GetTrafficLightResponse;
struct GetTrafficLightResponseDefaultTypeInternal;
extern GetTrafficLightResponseDefaultTypeInternal _GetTrafficLightResponse_default_instance_;
class SetTrafficLightPhaseRequest;
struct SetTrafficLightPhaseRequestDefaultTypeInternal;
extern SetTrafficLightPhaseRequestDefaultTypeInternal _SetTrafficLightPhaseRequest_default_instance_;
class SetTrafficLightPhaseResponse;
struct SetTrafficLightPhaseResponseDefaultTypeInternal;
extern SetTrafficLightPhaseResponseDefaultTypeInternal _SetTrafficLightPhaseResponse_default_instance_;
class SetTrafficLightRequest;
struct SetTrafficLightRequestDefaultTypeInternal;
extern SetTrafficLightRequestDefaultTypeInternal _SetTrafficLightRequest_default_instance_;
class SetTrafficLightResponse;
struct SetTrafficLightResponseDefaultTypeInternal;
extern SetTrafficLightResponseDefaultTypeInternal _SetTrafficLightResponse_default_instance_;
class SetTrafficLightStatusRequest;
struct SetTrafficLightStatusRequestDefaultTypeInternal;
extern SetTrafficLightStatusRequestDefaultTypeInternal _SetTrafficLightStatusRequest_default_instance_;
class SetTrafficLightStatusResponse;
struct SetTrafficLightStatusResponseDefaultTypeInternal;
extern SetTrafficLightStatusResponseDefaultTypeInternal _SetTrafficLightStatusResponse_default_instance_;
}  // namespace v2
}  // namespace map
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::map::v2::GetTrafficLightRequest* Arena::CreateMaybeMessage<::city::map::v2::GetTrafficLightRequest>(Arena*);
template<> ::city::map::v2::GetTrafficLightResponse* Arena::CreateMaybeMessage<::city::map::v2::GetTrafficLightResponse>(Arena*);
template<> ::city::map::v2::SetTrafficLightPhaseRequest* Arena::CreateMaybeMessage<::city::map::v2::SetTrafficLightPhaseRequest>(Arena*);
template<> ::city::map::v2::SetTrafficLightPhaseResponse* Arena::CreateMaybeMessage<::city::map::v2::SetTrafficLightPhaseResponse>(Arena*);
template<> ::city::map::v2::SetTrafficLightRequest* Arena::CreateMaybeMessage<::city::map::v2::SetTrafficLightRequest>(Arena*);
template<> ::city::map::v2::SetTrafficLightResponse* Arena::CreateMaybeMessage<::city::map::v2::SetTrafficLightResponse>(Arena*);
template<> ::city::map::v2::SetTrafficLightStatusRequest* Arena::CreateMaybeMessage<::city::map::v2::SetTrafficLightStatusRequest>(Arena*);
template<> ::city::map::v2::SetTrafficLightStatusResponse* Arena::CreateMaybeMessage<::city::map::v2::SetTrafficLightStatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace map {
namespace v2 {

// ===================================================================

class GetTrafficLightRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.map.v2.GetTrafficLightRequest) */ {
 public:
  inline GetTrafficLightRequest() : GetTrafficLightRequest(nullptr) {}
  ~GetTrafficLightRequest() override;
  explicit PROTOBUF_CONSTEXPR GetTrafficLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTrafficLightRequest(const GetTrafficLightRequest& from);
  GetTrafficLightRequest(GetTrafficLightRequest&& from) noexcept
    : GetTrafficLightRequest() {
    *this = ::std::move(from);
  }

  inline GetTrafficLightRequest& operator=(const GetTrafficLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTrafficLightRequest& operator=(GetTrafficLightRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTrafficLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTrafficLightRequest* internal_default_instance() {
    return reinterpret_cast<const GetTrafficLightRequest*>(
               &_GetTrafficLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetTrafficLightRequest& a, GetTrafficLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTrafficLightRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTrafficLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTrafficLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTrafficLightRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTrafficLightRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTrafficLightRequest& from) {
    GetTrafficLightRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTrafficLightRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.GetTrafficLightRequest";
  }
  protected:
  explicit GetTrafficLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJunctionIdFieldNumber = 1,
  };
  // int32 junction_id = 1 [json_name = "junctionId"];
  void clear_junction_id();
  int32_t junction_id() const;
  void set_junction_id(int32_t value);
  private:
  int32_t _internal_junction_id() const;
  void _internal_set_junction_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.map.v2.GetTrafficLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t junction_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetTrafficLightResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.map.v2.GetTrafficLightResponse) */ {
 public:
  inline GetTrafficLightResponse() : GetTrafficLightResponse(nullptr) {}
  ~GetTrafficLightResponse() override;
  explicit PROTOBUF_CONSTEXPR GetTrafficLightResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTrafficLightResponse(const GetTrafficLightResponse& from);
  GetTrafficLightResponse(GetTrafficLightResponse&& from) noexcept
    : GetTrafficLightResponse() {
    *this = ::std::move(from);
  }

  inline GetTrafficLightResponse& operator=(const GetTrafficLightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTrafficLightResponse& operator=(GetTrafficLightResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTrafficLightResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTrafficLightResponse* internal_default_instance() {
    return reinterpret_cast<const GetTrafficLightResponse*>(
               &_GetTrafficLightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetTrafficLightResponse& a, GetTrafficLightResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTrafficLightResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTrafficLightResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTrafficLightResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTrafficLightResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTrafficLightResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTrafficLightResponse& from) {
    GetTrafficLightResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTrafficLightResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.GetTrafficLightResponse";
  }
  protected:
  explicit GetTrafficLightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficLightFieldNumber = 1,
    kTimeRemainingFieldNumber = 3,
    kPhaseIndexFieldNumber = 2,
  };
  // .city.map.v2.TrafficLight traffic_light = 1 [json_name = "trafficLight"];
  bool has_traffic_light() const;
  private:
  bool _internal_has_traffic_light() const;
  public:
  void clear_traffic_light();
  const ::city::map::v2::TrafficLight& traffic_light() const;
  PROTOBUF_NODISCARD ::city::map::v2::TrafficLight* release_traffic_light();
  ::city::map::v2::TrafficLight* mutable_traffic_light();
  void set_allocated_traffic_light(::city::map::v2::TrafficLight* traffic_light);
  private:
  const ::city::map::v2::TrafficLight& _internal_traffic_light() const;
  ::city::map::v2::TrafficLight* _internal_mutable_traffic_light();
  public:
  void unsafe_arena_set_allocated_traffic_light(
      ::city::map::v2::TrafficLight* traffic_light);
  ::city::map::v2::TrafficLight* unsafe_arena_release_traffic_light();

  // double time_remaining = 3 [json_name = "timeRemaining"];
  void clear_time_remaining();
  double time_remaining() const;
  void set_time_remaining(double value);
  private:
  double _internal_time_remaining() const;
  void _internal_set_time_remaining(double value);
  public:

  // int32 phase_index = 2 [json_name = "phaseIndex"];
  void clear_phase_index();
  int32_t phase_index() const;
  void set_phase_index(int32_t value);
  private:
  int32_t _internal_phase_index() const;
  void _internal_set_phase_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.map.v2.GetTrafficLightResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::map::v2::TrafficLight* traffic_light_;
    double time_remaining_;
    int32_t phase_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetTrafficLightRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.map.v2.SetTrafficLightRequest) */ {
 public:
  inline SetTrafficLightRequest() : SetTrafficLightRequest(nullptr) {}
  ~SetTrafficLightRequest() override;
  explicit PROTOBUF_CONSTEXPR SetTrafficLightRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTrafficLightRequest(const SetTrafficLightRequest& from);
  SetTrafficLightRequest(SetTrafficLightRequest&& from) noexcept
    : SetTrafficLightRequest() {
    *this = ::std::move(from);
  }

  inline SetTrafficLightRequest& operator=(const SetTrafficLightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTrafficLightRequest& operator=(SetTrafficLightRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTrafficLightRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTrafficLightRequest* internal_default_instance() {
    return reinterpret_cast<const SetTrafficLightRequest*>(
               &_SetTrafficLightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetTrafficLightRequest& a, SetTrafficLightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTrafficLightRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTrafficLightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTrafficLightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTrafficLightRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTrafficLightRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetTrafficLightRequest& from) {
    SetTrafficLightRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTrafficLightRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.SetTrafficLightRequest";
  }
  protected:
  explicit SetTrafficLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficLightFieldNumber = 1,
    kTimeRemainingFieldNumber = 3,
    kPhaseIndexFieldNumber = 2,
  };
  // .city.map.v2.TrafficLight traffic_light = 1 [json_name = "trafficLight"];
  bool has_traffic_light() const;
  private:
  bool _internal_has_traffic_light() const;
  public:
  void clear_traffic_light();
  const ::city::map::v2::TrafficLight& traffic_light() const;
  PROTOBUF_NODISCARD ::city::map::v2::TrafficLight* release_traffic_light();
  ::city::map::v2::TrafficLight* mutable_traffic_light();
  void set_allocated_traffic_light(::city::map::v2::TrafficLight* traffic_light);
  private:
  const ::city::map::v2::TrafficLight& _internal_traffic_light() const;
  ::city::map::v2::TrafficLight* _internal_mutable_traffic_light();
  public:
  void unsafe_arena_set_allocated_traffic_light(
      ::city::map::v2::TrafficLight* traffic_light);
  ::city::map::v2::TrafficLight* unsafe_arena_release_traffic_light();

  // double time_remaining = 3 [json_name = "timeRemaining"];
  void clear_time_remaining();
  double time_remaining() const;
  void set_time_remaining(double value);
  private:
  double _internal_time_remaining() const;
  void _internal_set_time_remaining(double value);
  public:

  // int32 phase_index = 2 [json_name = "phaseIndex"];
  void clear_phase_index();
  int32_t phase_index() const;
  void set_phase_index(int32_t value);
  private:
  int32_t _internal_phase_index() const;
  void _internal_set_phase_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.map.v2.SetTrafficLightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::map::v2::TrafficLight* traffic_light_;
    double time_remaining_;
    int32_t phase_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetTrafficLightResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.map.v2.SetTrafficLightResponse) */ {
 public:
  inline SetTrafficLightResponse() : SetTrafficLightResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetTrafficLightResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTrafficLightResponse(const SetTrafficLightResponse& from);
  SetTrafficLightResponse(SetTrafficLightResponse&& from) noexcept
    : SetTrafficLightResponse() {
    *this = ::std::move(from);
  }

  inline SetTrafficLightResponse& operator=(const SetTrafficLightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTrafficLightResponse& operator=(SetTrafficLightResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTrafficLightResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTrafficLightResponse* internal_default_instance() {
    return reinterpret_cast<const SetTrafficLightResponse*>(
               &_SetTrafficLightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetTrafficLightResponse& a, SetTrafficLightResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTrafficLightResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTrafficLightResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTrafficLightResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTrafficLightResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetTrafficLightResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetTrafficLightResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.SetTrafficLightResponse";
  }
  protected:
  explicit SetTrafficLightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.map.v2.SetTrafficLightResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetTrafficLightPhaseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.map.v2.SetTrafficLightPhaseRequest) */ {
 public:
  inline SetTrafficLightPhaseRequest() : SetTrafficLightPhaseRequest(nullptr) {}
  ~SetTrafficLightPhaseRequest() override;
  explicit PROTOBUF_CONSTEXPR SetTrafficLightPhaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTrafficLightPhaseRequest(const SetTrafficLightPhaseRequest& from);
  SetTrafficLightPhaseRequest(SetTrafficLightPhaseRequest&& from) noexcept
    : SetTrafficLightPhaseRequest() {
    *this = ::std::move(from);
  }

  inline SetTrafficLightPhaseRequest& operator=(const SetTrafficLightPhaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTrafficLightPhaseRequest& operator=(SetTrafficLightPhaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTrafficLightPhaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTrafficLightPhaseRequest* internal_default_instance() {
    return reinterpret_cast<const SetTrafficLightPhaseRequest*>(
               &_SetTrafficLightPhaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetTrafficLightPhaseRequest& a, SetTrafficLightPhaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTrafficLightPhaseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTrafficLightPhaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTrafficLightPhaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTrafficLightPhaseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTrafficLightPhaseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetTrafficLightPhaseRequest& from) {
    SetTrafficLightPhaseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTrafficLightPhaseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.SetTrafficLightPhaseRequest";
  }
  protected:
  explicit SetTrafficLightPhaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJunctionIdFieldNumber = 1,
    kPhaseIndexFieldNumber = 2,
    kTimeRemainingFieldNumber = 3,
  };
  // int32 junction_id = 1 [json_name = "junctionId"];
  void clear_junction_id();
  int32_t junction_id() const;
  void set_junction_id(int32_t value);
  private:
  int32_t _internal_junction_id() const;
  void _internal_set_junction_id(int32_t value);
  public:

  // int32 phase_index = 2 [json_name = "phaseIndex"];
  void clear_phase_index();
  int32_t phase_index() const;
  void set_phase_index(int32_t value);
  private:
  int32_t _internal_phase_index() const;
  void _internal_set_phase_index(int32_t value);
  public:

  // double time_remaining = 3 [json_name = "timeRemaining"];
  void clear_time_remaining();
  double time_remaining() const;
  void set_time_remaining(double value);
  private:
  double _internal_time_remaining() const;
  void _internal_set_time_remaining(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.map.v2.SetTrafficLightPhaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t junction_id_;
    int32_t phase_index_;
    double time_remaining_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetTrafficLightPhaseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.map.v2.SetTrafficLightPhaseResponse) */ {
 public:
  inline SetTrafficLightPhaseResponse() : SetTrafficLightPhaseResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetTrafficLightPhaseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTrafficLightPhaseResponse(const SetTrafficLightPhaseResponse& from);
  SetTrafficLightPhaseResponse(SetTrafficLightPhaseResponse&& from) noexcept
    : SetTrafficLightPhaseResponse() {
    *this = ::std::move(from);
  }

  inline SetTrafficLightPhaseResponse& operator=(const SetTrafficLightPhaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTrafficLightPhaseResponse& operator=(SetTrafficLightPhaseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTrafficLightPhaseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTrafficLightPhaseResponse* internal_default_instance() {
    return reinterpret_cast<const SetTrafficLightPhaseResponse*>(
               &_SetTrafficLightPhaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SetTrafficLightPhaseResponse& a, SetTrafficLightPhaseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTrafficLightPhaseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTrafficLightPhaseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTrafficLightPhaseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTrafficLightPhaseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetTrafficLightPhaseResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetTrafficLightPhaseResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.SetTrafficLightPhaseResponse";
  }
  protected:
  explicit SetTrafficLightPhaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.map.v2.SetTrafficLightPhaseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetTrafficLightStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.map.v2.SetTrafficLightStatusRequest) */ {
 public:
  inline SetTrafficLightStatusRequest() : SetTrafficLightStatusRequest(nullptr) {}
  ~SetTrafficLightStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR SetTrafficLightStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTrafficLightStatusRequest(const SetTrafficLightStatusRequest& from);
  SetTrafficLightStatusRequest(SetTrafficLightStatusRequest&& from) noexcept
    : SetTrafficLightStatusRequest() {
    *this = ::std::move(from);
  }

  inline SetTrafficLightStatusRequest& operator=(const SetTrafficLightStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTrafficLightStatusRequest& operator=(SetTrafficLightStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTrafficLightStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTrafficLightStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SetTrafficLightStatusRequest*>(
               &_SetTrafficLightStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SetTrafficLightStatusRequest& a, SetTrafficLightStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTrafficLightStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTrafficLightStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTrafficLightStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTrafficLightStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTrafficLightStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetTrafficLightStatusRequest& from) {
    SetTrafficLightStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTrafficLightStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.SetTrafficLightStatusRequest";
  }
  protected:
  explicit SetTrafficLightStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJunctionIdFieldNumber = 1,
    kOkFieldNumber = 2,
  };
  // int32 junction_id = 1 [json_name = "junctionId"];
  void clear_junction_id();
  int32_t junction_id() const;
  void set_junction_id(int32_t value);
  private:
  int32_t _internal_junction_id() const;
  void _internal_set_junction_id(int32_t value);
  public:

  // bool ok = 2 [json_name = "ok"];
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:city.map.v2.SetTrafficLightStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t junction_id_;
    bool ok_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetTrafficLightStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.map.v2.SetTrafficLightStatusResponse) */ {
 public:
  inline SetTrafficLightStatusResponse() : SetTrafficLightStatusResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetTrafficLightStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTrafficLightStatusResponse(const SetTrafficLightStatusResponse& from);
  SetTrafficLightStatusResponse(SetTrafficLightStatusResponse&& from) noexcept
    : SetTrafficLightStatusResponse() {
    *this = ::std::move(from);
  }

  inline SetTrafficLightStatusResponse& operator=(const SetTrafficLightStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTrafficLightStatusResponse& operator=(SetTrafficLightStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTrafficLightStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTrafficLightStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SetTrafficLightStatusResponse*>(
               &_SetTrafficLightStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SetTrafficLightStatusResponse& a, SetTrafficLightStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTrafficLightStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTrafficLightStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTrafficLightStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTrafficLightStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetTrafficLightStatusResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetTrafficLightStatusResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.SetTrafficLightStatusResponse";
  }
  protected:
  explicit SetTrafficLightStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.map.v2.SetTrafficLightStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetTrafficLightRequest

// int32 junction_id = 1 [json_name = "junctionId"];
inline void GetTrafficLightRequest::clear_junction_id() {
  _impl_.junction_id_ = 0;
}
inline int32_t GetTrafficLightRequest::_internal_junction_id() const {
  return _impl_.junction_id_;
}
inline int32_t GetTrafficLightRequest::junction_id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetTrafficLightRequest.junction_id)
  return _internal_junction_id();
}
inline void GetTrafficLightRequest::_internal_set_junction_id(int32_t value) {
  
  _impl_.junction_id_ = value;
}
inline void GetTrafficLightRequest::set_junction_id(int32_t value) {
  _internal_set_junction_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.GetTrafficLightRequest.junction_id)
}

// -------------------------------------------------------------------

// GetTrafficLightResponse

// .city.map.v2.TrafficLight traffic_light = 1 [json_name = "trafficLight"];
inline bool GetTrafficLightResponse::_internal_has_traffic_light() const {
  return this != internal_default_instance() && _impl_.traffic_light_ != nullptr;
}
inline bool GetTrafficLightResponse::has_traffic_light() const {
  return _internal_has_traffic_light();
}
inline const ::city::map::v2::TrafficLight& GetTrafficLightResponse::_internal_traffic_light() const {
  const ::city::map::v2::TrafficLight* p = _impl_.traffic_light_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::map::v2::TrafficLight&>(
      ::city::map::v2::_TrafficLight_default_instance_);
}
inline const ::city::map::v2::TrafficLight& GetTrafficLightResponse::traffic_light() const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetTrafficLightResponse.traffic_light)
  return _internal_traffic_light();
}
inline void GetTrafficLightResponse::unsafe_arena_set_allocated_traffic_light(
    ::city::map::v2::TrafficLight* traffic_light) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.traffic_light_);
  }
  _impl_.traffic_light_ = traffic_light;
  if (traffic_light) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.map.v2.GetTrafficLightResponse.traffic_light)
}
inline ::city::map::v2::TrafficLight* GetTrafficLightResponse::release_traffic_light() {
  
  ::city::map::v2::TrafficLight* temp = _impl_.traffic_light_;
  _impl_.traffic_light_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::map::v2::TrafficLight* GetTrafficLightResponse::unsafe_arena_release_traffic_light() {
  // @@protoc_insertion_point(field_release:city.map.v2.GetTrafficLightResponse.traffic_light)
  
  ::city::map::v2::TrafficLight* temp = _impl_.traffic_light_;
  _impl_.traffic_light_ = nullptr;
  return temp;
}
inline ::city::map::v2::TrafficLight* GetTrafficLightResponse::_internal_mutable_traffic_light() {
  
  if (_impl_.traffic_light_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::map::v2::TrafficLight>(GetArenaForAllocation());
    _impl_.traffic_light_ = p;
  }
  return _impl_.traffic_light_;
}
inline ::city::map::v2::TrafficLight* GetTrafficLightResponse::mutable_traffic_light() {
  ::city::map::v2::TrafficLight* _msg = _internal_mutable_traffic_light();
  // @@protoc_insertion_point(field_mutable:city.map.v2.GetTrafficLightResponse.traffic_light)
  return _msg;
}
inline void GetTrafficLightResponse::set_allocated_traffic_light(::city::map::v2::TrafficLight* traffic_light) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.traffic_light_);
  }
  if (traffic_light) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(traffic_light));
    if (message_arena != submessage_arena) {
      traffic_light = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_light, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.traffic_light_ = traffic_light;
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.GetTrafficLightResponse.traffic_light)
}

// int32 phase_index = 2 [json_name = "phaseIndex"];
inline void GetTrafficLightResponse::clear_phase_index() {
  _impl_.phase_index_ = 0;
}
inline int32_t GetTrafficLightResponse::_internal_phase_index() const {
  return _impl_.phase_index_;
}
inline int32_t GetTrafficLightResponse::phase_index() const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetTrafficLightResponse.phase_index)
  return _internal_phase_index();
}
inline void GetTrafficLightResponse::_internal_set_phase_index(int32_t value) {
  
  _impl_.phase_index_ = value;
}
inline void GetTrafficLightResponse::set_phase_index(int32_t value) {
  _internal_set_phase_index(value);
  // @@protoc_insertion_point(field_set:city.map.v2.GetTrafficLightResponse.phase_index)
}

// double time_remaining = 3 [json_name = "timeRemaining"];
inline void GetTrafficLightResponse::clear_time_remaining() {
  _impl_.time_remaining_ = 0;
}
inline double GetTrafficLightResponse::_internal_time_remaining() const {
  return _impl_.time_remaining_;
}
inline double GetTrafficLightResponse::time_remaining() const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetTrafficLightResponse.time_remaining)
  return _internal_time_remaining();
}
inline void GetTrafficLightResponse::_internal_set_time_remaining(double value) {
  
  _impl_.time_remaining_ = value;
}
inline void GetTrafficLightResponse::set_time_remaining(double value) {
  _internal_set_time_remaining(value);
  // @@protoc_insertion_point(field_set:city.map.v2.GetTrafficLightResponse.time_remaining)
}

// -------------------------------------------------------------------

// SetTrafficLightRequest

// .city.map.v2.TrafficLight traffic_light = 1 [json_name = "trafficLight"];
inline bool SetTrafficLightRequest::_internal_has_traffic_light() const {
  return this != internal_default_instance() && _impl_.traffic_light_ != nullptr;
}
inline bool SetTrafficLightRequest::has_traffic_light() const {
  return _internal_has_traffic_light();
}
inline const ::city::map::v2::TrafficLight& SetTrafficLightRequest::_internal_traffic_light() const {
  const ::city::map::v2::TrafficLight* p = _impl_.traffic_light_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::map::v2::TrafficLight&>(
      ::city::map::v2::_TrafficLight_default_instance_);
}
inline const ::city::map::v2::TrafficLight& SetTrafficLightRequest::traffic_light() const {
  // @@protoc_insertion_point(field_get:city.map.v2.SetTrafficLightRequest.traffic_light)
  return _internal_traffic_light();
}
inline void SetTrafficLightRequest::unsafe_arena_set_allocated_traffic_light(
    ::city::map::v2::TrafficLight* traffic_light) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.traffic_light_);
  }
  _impl_.traffic_light_ = traffic_light;
  if (traffic_light) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.map.v2.SetTrafficLightRequest.traffic_light)
}
inline ::city::map::v2::TrafficLight* SetTrafficLightRequest::release_traffic_light() {
  
  ::city::map::v2::TrafficLight* temp = _impl_.traffic_light_;
  _impl_.traffic_light_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::map::v2::TrafficLight* SetTrafficLightRequest::unsafe_arena_release_traffic_light() {
  // @@protoc_insertion_point(field_release:city.map.v2.SetTrafficLightRequest.traffic_light)
  
  ::city::map::v2::TrafficLight* temp = _impl_.traffic_light_;
  _impl_.traffic_light_ = nullptr;
  return temp;
}
inline ::city::map::v2::TrafficLight* SetTrafficLightRequest::_internal_mutable_traffic_light() {
  
  if (_impl_.traffic_light_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::map::v2::TrafficLight>(GetArenaForAllocation());
    _impl_.traffic_light_ = p;
  }
  return _impl_.traffic_light_;
}
inline ::city::map::v2::TrafficLight* SetTrafficLightRequest::mutable_traffic_light() {
  ::city::map::v2::TrafficLight* _msg = _internal_mutable_traffic_light();
  // @@protoc_insertion_point(field_mutable:city.map.v2.SetTrafficLightRequest.traffic_light)
  return _msg;
}
inline void SetTrafficLightRequest::set_allocated_traffic_light(::city::map::v2::TrafficLight* traffic_light) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.traffic_light_);
  }
  if (traffic_light) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(traffic_light));
    if (message_arena != submessage_arena) {
      traffic_light = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_light, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.traffic_light_ = traffic_light;
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.SetTrafficLightRequest.traffic_light)
}

// int32 phase_index = 2 [json_name = "phaseIndex"];
inline void SetTrafficLightRequest::clear_phase_index() {
  _impl_.phase_index_ = 0;
}
inline int32_t SetTrafficLightRequest::_internal_phase_index() const {
  return _impl_.phase_index_;
}
inline int32_t SetTrafficLightRequest::phase_index() const {
  // @@protoc_insertion_point(field_get:city.map.v2.SetTrafficLightRequest.phase_index)
  return _internal_phase_index();
}
inline void SetTrafficLightRequest::_internal_set_phase_index(int32_t value) {
  
  _impl_.phase_index_ = value;
}
inline void SetTrafficLightRequest::set_phase_index(int32_t value) {
  _internal_set_phase_index(value);
  // @@protoc_insertion_point(field_set:city.map.v2.SetTrafficLightRequest.phase_index)
}

// double time_remaining = 3 [json_name = "timeRemaining"];
inline void SetTrafficLightRequest::clear_time_remaining() {
  _impl_.time_remaining_ = 0;
}
inline double SetTrafficLightRequest::_internal_time_remaining() const {
  return _impl_.time_remaining_;
}
inline double SetTrafficLightRequest::time_remaining() const {
  // @@protoc_insertion_point(field_get:city.map.v2.SetTrafficLightRequest.time_remaining)
  return _internal_time_remaining();
}
inline void SetTrafficLightRequest::_internal_set_time_remaining(double value) {
  
  _impl_.time_remaining_ = value;
}
inline void SetTrafficLightRequest::set_time_remaining(double value) {
  _internal_set_time_remaining(value);
  // @@protoc_insertion_point(field_set:city.map.v2.SetTrafficLightRequest.time_remaining)
}

// -------------------------------------------------------------------

// SetTrafficLightResponse

// -------------------------------------------------------------------

// SetTrafficLightPhaseRequest

// int32 junction_id = 1 [json_name = "junctionId"];
inline void SetTrafficLightPhaseRequest::clear_junction_id() {
  _impl_.junction_id_ = 0;
}
inline int32_t SetTrafficLightPhaseRequest::_internal_junction_id() const {
  return _impl_.junction_id_;
}
inline int32_t SetTrafficLightPhaseRequest::junction_id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.SetTrafficLightPhaseRequest.junction_id)
  return _internal_junction_id();
}
inline void SetTrafficLightPhaseRequest::_internal_set_junction_id(int32_t value) {
  
  _impl_.junction_id_ = value;
}
inline void SetTrafficLightPhaseRequest::set_junction_id(int32_t value) {
  _internal_set_junction_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.SetTrafficLightPhaseRequest.junction_id)
}

// int32 phase_index = 2 [json_name = "phaseIndex"];
inline void SetTrafficLightPhaseRequest::clear_phase_index() {
  _impl_.phase_index_ = 0;
}
inline int32_t SetTrafficLightPhaseRequest::_internal_phase_index() const {
  return _impl_.phase_index_;
}
inline int32_t SetTrafficLightPhaseRequest::phase_index() const {
  // @@protoc_insertion_point(field_get:city.map.v2.SetTrafficLightPhaseRequest.phase_index)
  return _internal_phase_index();
}
inline void SetTrafficLightPhaseRequest::_internal_set_phase_index(int32_t value) {
  
  _impl_.phase_index_ = value;
}
inline void SetTrafficLightPhaseRequest::set_phase_index(int32_t value) {
  _internal_set_phase_index(value);
  // @@protoc_insertion_point(field_set:city.map.v2.SetTrafficLightPhaseRequest.phase_index)
}

// double time_remaining = 3 [json_name = "timeRemaining"];
inline void SetTrafficLightPhaseRequest::clear_time_remaining() {
  _impl_.time_remaining_ = 0;
}
inline double SetTrafficLightPhaseRequest::_internal_time_remaining() const {
  return _impl_.time_remaining_;
}
inline double SetTrafficLightPhaseRequest::time_remaining() const {
  // @@protoc_insertion_point(field_get:city.map.v2.SetTrafficLightPhaseRequest.time_remaining)
  return _internal_time_remaining();
}
inline void SetTrafficLightPhaseRequest::_internal_set_time_remaining(double value) {
  
  _impl_.time_remaining_ = value;
}
inline void SetTrafficLightPhaseRequest::set_time_remaining(double value) {
  _internal_set_time_remaining(value);
  // @@protoc_insertion_point(field_set:city.map.v2.SetTrafficLightPhaseRequest.time_remaining)
}

// -------------------------------------------------------------------

// SetTrafficLightPhaseResponse

// -------------------------------------------------------------------

// SetTrafficLightStatusRequest

// int32 junction_id = 1 [json_name = "junctionId"];
inline void SetTrafficLightStatusRequest::clear_junction_id() {
  _impl_.junction_id_ = 0;
}
inline int32_t SetTrafficLightStatusRequest::_internal_junction_id() const {
  return _impl_.junction_id_;
}
inline int32_t SetTrafficLightStatusRequest::junction_id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.SetTrafficLightStatusRequest.junction_id)
  return _internal_junction_id();
}
inline void SetTrafficLightStatusRequest::_internal_set_junction_id(int32_t value) {
  
  _impl_.junction_id_ = value;
}
inline void SetTrafficLightStatusRequest::set_junction_id(int32_t value) {
  _internal_set_junction_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.SetTrafficLightStatusRequest.junction_id)
}

// bool ok = 2 [json_name = "ok"];
inline void SetTrafficLightStatusRequest::clear_ok() {
  _impl_.ok_ = false;
}
inline bool SetTrafficLightStatusRequest::_internal_ok() const {
  return _impl_.ok_;
}
inline bool SetTrafficLightStatusRequest::ok() const {
  // @@protoc_insertion_point(field_get:city.map.v2.SetTrafficLightStatusRequest.ok)
  return _internal_ok();
}
inline void SetTrafficLightStatusRequest::_internal_set_ok(bool value) {
  
  _impl_.ok_ = value;
}
inline void SetTrafficLightStatusRequest::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:city.map.v2.SetTrafficLightStatusRequest.ok)
}

// -------------------------------------------------------------------

// SetTrafficLightStatusResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace map
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto
