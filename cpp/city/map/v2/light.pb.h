// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/map/v2/light.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2flight_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2flight_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_city_2fmap_2fv2_2flight_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fmap_2fv2_2flight_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_city_2fmap_2fv2_2flight_2eproto;
namespace city {
namespace map {
namespace v2 {
class AvailablePhase;
struct AvailablePhaseDefaultTypeInternal;
extern AvailablePhaseDefaultTypeInternal _AvailablePhase_default_instance_;
class Phase;
struct PhaseDefaultTypeInternal;
extern PhaseDefaultTypeInternal _Phase_default_instance_;
class TrafficLight;
struct TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
}  // namespace v2
}  // namespace map
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace city {
namespace map {
namespace v2 {
enum LightState : int {
  LIGHT_STATE_UNSPECIFIED = 0,
  LIGHT_STATE_RED = 1,
  LIGHT_STATE_GREEN = 2,
  LIGHT_STATE_YELLOW = 3,
  LightState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LightState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LightState_IsValid(int value);
constexpr LightState LightState_MIN = static_cast<LightState>(0);
constexpr LightState LightState_MAX = static_cast<LightState>(3);
constexpr int LightState_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
LightState_descriptor();
template <typename T>
const std::string& LightState_Name(T value) {
  static_assert(std::is_same<T, LightState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LightState_Name().");
  return LightState_Name(static_cast<LightState>(value));
}
template <>
inline const std::string& LightState_Name(LightState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LightState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool LightState_Parse(absl::string_view name, LightState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LightState>(
      LightState_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Phase final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.Phase) */ {
 public:
  inline Phase() : Phase(nullptr) {}
  ~Phase() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Phase(::google::protobuf::internal::ConstantInitialized);

  Phase(const Phase& from);
  Phase(Phase&& from) noexcept
    : Phase() {
    *this = ::std::move(from);
  }

  inline Phase& operator=(const Phase& from) {
    CopyFrom(from);
    return *this;
  }
  inline Phase& operator=(Phase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Phase& default_instance() {
    return *internal_default_instance();
  }
  static inline const Phase* internal_default_instance() {
    return reinterpret_cast<const Phase*>(
               &_Phase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Phase& a, Phase& b) {
    a.Swap(&b);
  }
  inline void Swap(Phase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Phase* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Phase* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Phase>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Phase& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Phase& from) {
    Phase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Phase* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.Phase";
  }
  protected:
  explicit Phase(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 2,
    kDurationFieldNumber = 1,
  };
  // repeated .city.map.v2.LightState states = 2 [json_name = "states"];
  int states_size() const;
  private:
  int _internal_states_size() const;

  public:
  void clear_states() ;
  public:
  ::city::map::v2::LightState states(int index) const;
  void set_states(int index, ::city::map::v2::LightState value);
  void add_states(::city::map::v2::LightState value);
  const ::google::protobuf::RepeatedField<int>& states() const;
  ::google::protobuf::RepeatedField<int>* mutable_states();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_states() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_states();

  public:
  // double duration = 1 [json_name = "duration"];
  void clear_duration() ;
  double duration() const;
  void set_duration(double value);

  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.Phase)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<int> states_;
    mutable ::google::protobuf::internal::CachedSize _states_cached_byte_size_;
    double duration_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2flight_2eproto;
};// -------------------------------------------------------------------

class AvailablePhase final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.AvailablePhase) */ {
 public:
  inline AvailablePhase() : AvailablePhase(nullptr) {}
  ~AvailablePhase() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AvailablePhase(::google::protobuf::internal::ConstantInitialized);

  AvailablePhase(const AvailablePhase& from);
  AvailablePhase(AvailablePhase&& from) noexcept
    : AvailablePhase() {
    *this = ::std::move(from);
  }

  inline AvailablePhase& operator=(const AvailablePhase& from) {
    CopyFrom(from);
    return *this;
  }
  inline AvailablePhase& operator=(AvailablePhase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AvailablePhase& default_instance() {
    return *internal_default_instance();
  }
  static inline const AvailablePhase* internal_default_instance() {
    return reinterpret_cast<const AvailablePhase*>(
               &_AvailablePhase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AvailablePhase& a, AvailablePhase& b) {
    a.Swap(&b);
  }
  inline void Swap(AvailablePhase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AvailablePhase* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AvailablePhase* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AvailablePhase>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AvailablePhase& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AvailablePhase& from) {
    AvailablePhase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AvailablePhase* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.AvailablePhase";
  }
  protected:
  explicit AvailablePhase(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
  };
  // repeated .city.map.v2.LightState states = 1 [json_name = "states"];
  int states_size() const;
  private:
  int _internal_states_size() const;

  public:
  void clear_states() ;
  public:
  ::city::map::v2::LightState states(int index) const;
  void set_states(int index, ::city::map::v2::LightState value);
  void add_states(::city::map::v2::LightState value);
  const ::google::protobuf::RepeatedField<int>& states() const;
  ::google::protobuf::RepeatedField<int>* mutable_states();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_states() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_states();

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.AvailablePhase)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<int> states_;
    mutable ::google::protobuf::internal::CachedSize _states_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2flight_2eproto;
};// -------------------------------------------------------------------

class TrafficLight final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.TrafficLight) */ {
 public:
  inline TrafficLight() : TrafficLight(nullptr) {}
  ~TrafficLight() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TrafficLight(::google::protobuf::internal::ConstantInitialized);

  TrafficLight(const TrafficLight& from);
  TrafficLight(TrafficLight&& from) noexcept
    : TrafficLight() {
    *this = ::std::move(from);
  }

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLight& operator=(TrafficLight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficLight& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
               &_TrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrafficLight& a, TrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficLight* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrafficLight* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrafficLight>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TrafficLight& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TrafficLight& from) {
    TrafficLight::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLight* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.TrafficLight";
  }
  protected:
  explicit TrafficLight(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhasesFieldNumber = 2,
    kJunctionIdFieldNumber = 1,
  };
  // repeated .city.map.v2.Phase phases = 2 [json_name = "phases"];
  int phases_size() const;
  private:
  int _internal_phases_size() const;

  public:
  void clear_phases() ;
  ::city::map::v2::Phase* mutable_phases(int index);
  ::google::protobuf::RepeatedPtrField< ::city::map::v2::Phase >*
      mutable_phases();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::map::v2::Phase>& _internal_phases() const;
  ::google::protobuf::RepeatedPtrField<::city::map::v2::Phase>* _internal_mutable_phases();
  public:
  const ::city::map::v2::Phase& phases(int index) const;
  ::city::map::v2::Phase* add_phases();
  const ::google::protobuf::RepeatedPtrField< ::city::map::v2::Phase >&
      phases() const;
  // int32 junction_id = 1 [json_name = "junctionId"];
  void clear_junction_id() ;
  ::int32_t junction_id() const;
  void set_junction_id(::int32_t value);

  private:
  ::int32_t _internal_junction_id() const;
  void _internal_set_junction_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.TrafficLight)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::city::map::v2::Phase > phases_;
    ::int32_t junction_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2flight_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Phase

// double duration = 1 [json_name = "duration"];
inline void Phase::clear_duration() {
  _impl_.duration_ = 0;
}
inline double Phase::duration() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Phase.duration)
  return _internal_duration();
}
inline void Phase::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Phase.duration)
}
inline double Phase::_internal_duration() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.duration_;
}
inline void Phase::_internal_set_duration(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.duration_ = value;
}

// repeated .city.map.v2.LightState states = 2 [json_name = "states"];
inline int Phase::_internal_states_size() const {
  return _internal_states().size();
}
inline int Phase::states_size() const {
  return _internal_states_size();
}
inline void Phase::clear_states() {
  _internal_mutable_states()->Clear();
}
inline ::city::map::v2::LightState Phase::states(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Phase.states)
  return static_cast<::city::map::v2::LightState>(_internal_states().Get(index));
}
inline void Phase::set_states(int index, ::city::map::v2::LightState value) {
  _internal_mutable_states()->Set(index, value);
  // @@protoc_insertion_point(field_set:city.map.v2.Phase.states)
}
inline void Phase::add_states(::city::map::v2::LightState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_states()->Add(value);
  // @@protoc_insertion_point(field_add:city.map.v2.Phase.states)
}
inline const ::google::protobuf::RepeatedField<int>& Phase::states() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Phase.states)
  return _internal_states();
}
inline ::google::protobuf::RepeatedField<int>* Phase::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Phase.states)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_states();
}
inline const ::google::protobuf::RepeatedField<int>& Phase::_internal_states() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.states_;
}
inline ::google::protobuf::RepeatedField<int>* Phase::_internal_mutable_states() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.states_;
}

// -------------------------------------------------------------------

// AvailablePhase

// repeated .city.map.v2.LightState states = 1 [json_name = "states"];
inline int AvailablePhase::_internal_states_size() const {
  return _internal_states().size();
}
inline int AvailablePhase::states_size() const {
  return _internal_states_size();
}
inline void AvailablePhase::clear_states() {
  _internal_mutable_states()->Clear();
}
inline ::city::map::v2::LightState AvailablePhase::states(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.AvailablePhase.states)
  return static_cast<::city::map::v2::LightState>(_internal_states().Get(index));
}
inline void AvailablePhase::set_states(int index, ::city::map::v2::LightState value) {
  _internal_mutable_states()->Set(index, value);
  // @@protoc_insertion_point(field_set:city.map.v2.AvailablePhase.states)
}
inline void AvailablePhase::add_states(::city::map::v2::LightState value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_states()->Add(value);
  // @@protoc_insertion_point(field_add:city.map.v2.AvailablePhase.states)
}
inline const ::google::protobuf::RepeatedField<int>& AvailablePhase::states() const {
  // @@protoc_insertion_point(field_list:city.map.v2.AvailablePhase.states)
  return _internal_states();
}
inline ::google::protobuf::RepeatedField<int>* AvailablePhase::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.AvailablePhase.states)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_states();
}
inline const ::google::protobuf::RepeatedField<int>& AvailablePhase::_internal_states() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.states_;
}
inline ::google::protobuf::RepeatedField<int>* AvailablePhase::_internal_mutable_states() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.states_;
}

// -------------------------------------------------------------------

// TrafficLight

// int32 junction_id = 1 [json_name = "junctionId"];
inline void TrafficLight::clear_junction_id() {
  _impl_.junction_id_ = 0;
}
inline ::int32_t TrafficLight::junction_id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.TrafficLight.junction_id)
  return _internal_junction_id();
}
inline void TrafficLight::set_junction_id(::int32_t value) {
  _internal_set_junction_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.TrafficLight.junction_id)
}
inline ::int32_t TrafficLight::_internal_junction_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.junction_id_;
}
inline void TrafficLight::_internal_set_junction_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.junction_id_ = value;
}

// repeated .city.map.v2.Phase phases = 2 [json_name = "phases"];
inline int TrafficLight::_internal_phases_size() const {
  return _internal_phases().size();
}
inline int TrafficLight::phases_size() const {
  return _internal_phases_size();
}
inline void TrafficLight::clear_phases() {
  _internal_mutable_phases()->Clear();
}
inline ::city::map::v2::Phase* TrafficLight::mutable_phases(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.TrafficLight.phases)
  return _internal_mutable_phases()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::map::v2::Phase >*
TrafficLight::mutable_phases() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.TrafficLight.phases)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_phases();
}
inline const ::city::map::v2::Phase& TrafficLight::phases(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.TrafficLight.phases)
    return _internal_phases().Get(index);
}
inline ::city::map::v2::Phase* TrafficLight::add_phases() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::map::v2::Phase* _add = _internal_mutable_phases()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.TrafficLight.phases)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::map::v2::Phase >&
TrafficLight::phases() const {
  // @@protoc_insertion_point(field_list:city.map.v2.TrafficLight.phases)
  return _internal_phases();
}
inline const ::google::protobuf::RepeatedPtrField<::city::map::v2::Phase>&
TrafficLight::_internal_phases() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.phases_;
}
inline ::google::protobuf::RepeatedPtrField<::city::map::v2::Phase>*
TrafficLight::_internal_mutable_phases() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.phases_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace map
}  // namespace city


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::city::map::v2::LightState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::map::v2::LightState>() {
  return ::city::map::v2::LightState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2flight_2eproto_2epb_2eh
