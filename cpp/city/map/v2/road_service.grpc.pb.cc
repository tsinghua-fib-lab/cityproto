// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/map/v2/road_service.proto

#include "city/map/v2/road_service.pb.h"
#include "city/map/v2/road_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace city {
namespace map {
namespace v2 {

static const char* RoadService_method_names[] = {
  "/city.map.v2.RoadService/GetRoad",
  "/city.map.v2.RoadService/GetRoadGlobalStatistics",
  "/city.map.v2.RoadService/GetRuinInfo",
  "/city.map.v2.RoadService/GetEvents",
};

std::unique_ptr< RoadService::Stub> RoadService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RoadService::Stub> stub(new RoadService::Stub(channel, options));
  return stub;
}

RoadService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetRoad_(RoadService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRoadGlobalStatistics_(RoadService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRuinInfo_(RoadService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEvents_(RoadService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RoadService::Stub::GetRoad(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest& request, ::city::map::v2::GetRoadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::map::v2::GetRoadRequest, ::city::map::v2::GetRoadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRoad_, context, request, response);
}

void RoadService::Stub::async::GetRoad(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest* request, ::city::map::v2::GetRoadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::map::v2::GetRoadRequest, ::city::map::v2::GetRoadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoad_, context, request, response, std::move(f));
}

void RoadService::Stub::async::GetRoad(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest* request, ::city::map::v2::GetRoadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoad_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRoadResponse>* RoadService::Stub::PrepareAsyncGetRoadRaw(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::map::v2::GetRoadResponse, ::city::map::v2::GetRoadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRoad_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRoadResponse>* RoadService::Stub::AsyncGetRoadRaw(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRoadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RoadService::Stub::GetRoadGlobalStatistics(::grpc::ClientContext* context, const ::city::map::v2::GetRoadGlobalStatisticsRequest& request, ::city::map::v2::GetRoadGlobalStatisticsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::map::v2::GetRoadGlobalStatisticsRequest, ::city::map::v2::GetRoadGlobalStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRoadGlobalStatistics_, context, request, response);
}

void RoadService::Stub::async::GetRoadGlobalStatistics(::grpc::ClientContext* context, const ::city::map::v2::GetRoadGlobalStatisticsRequest* request, ::city::map::v2::GetRoadGlobalStatisticsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::map::v2::GetRoadGlobalStatisticsRequest, ::city::map::v2::GetRoadGlobalStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoadGlobalStatistics_, context, request, response, std::move(f));
}

void RoadService::Stub::async::GetRoadGlobalStatistics(::grpc::ClientContext* context, const ::city::map::v2::GetRoadGlobalStatisticsRequest* request, ::city::map::v2::GetRoadGlobalStatisticsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoadGlobalStatistics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRoadGlobalStatisticsResponse>* RoadService::Stub::PrepareAsyncGetRoadGlobalStatisticsRaw(::grpc::ClientContext* context, const ::city::map::v2::GetRoadGlobalStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::map::v2::GetRoadGlobalStatisticsResponse, ::city::map::v2::GetRoadGlobalStatisticsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRoadGlobalStatistics_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRoadGlobalStatisticsResponse>* RoadService::Stub::AsyncGetRoadGlobalStatisticsRaw(::grpc::ClientContext* context, const ::city::map::v2::GetRoadGlobalStatisticsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRoadGlobalStatisticsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RoadService::Stub::GetRuinInfo(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest& request, ::city::map::v2::GetRuinInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::map::v2::GetRuinInfoRequest, ::city::map::v2::GetRuinInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRuinInfo_, context, request, response);
}

void RoadService::Stub::async::GetRuinInfo(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest* request, ::city::map::v2::GetRuinInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::map::v2::GetRuinInfoRequest, ::city::map::v2::GetRuinInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRuinInfo_, context, request, response, std::move(f));
}

void RoadService::Stub::async::GetRuinInfo(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest* request, ::city::map::v2::GetRuinInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRuinInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRuinInfoResponse>* RoadService::Stub::PrepareAsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::map::v2::GetRuinInfoResponse, ::city::map::v2::GetRuinInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRuinInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRuinInfoResponse>* RoadService::Stub::AsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRuinInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RoadService::Stub::GetEvents(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest& request, ::city::map::v2::GetEventsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::map::v2::GetEventsRequest, ::city::map::v2::GetEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEvents_, context, request, response);
}

void RoadService::Stub::async::GetEvents(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest* request, ::city::map::v2::GetEventsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::map::v2::GetEventsRequest, ::city::map::v2::GetEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEvents_, context, request, response, std::move(f));
}

void RoadService::Stub::async::GetEvents(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest* request, ::city::map::v2::GetEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::GetEventsResponse>* RoadService::Stub::PrepareAsyncGetEventsRaw(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::map::v2::GetEventsResponse, ::city::map::v2::GetEventsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEvents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::GetEventsResponse>* RoadService::Stub::AsyncGetEventsRaw(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEventsRaw(context, request, cq);
  result->StartCall();
  return result;
}

RoadService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoadService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoadService::Service, ::city::map::v2::GetRoadRequest, ::city::map::v2::GetRoadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RoadService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::map::v2::GetRoadRequest* req,
             ::city::map::v2::GetRoadResponse* resp) {
               return service->GetRoad(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoadService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoadService::Service, ::city::map::v2::GetRoadGlobalStatisticsRequest, ::city::map::v2::GetRoadGlobalStatisticsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RoadService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::map::v2::GetRoadGlobalStatisticsRequest* req,
             ::city::map::v2::GetRoadGlobalStatisticsResponse* resp) {
               return service->GetRoadGlobalStatistics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoadService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoadService::Service, ::city::map::v2::GetRuinInfoRequest, ::city::map::v2::GetRuinInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RoadService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::map::v2::GetRuinInfoRequest* req,
             ::city::map::v2::GetRuinInfoResponse* resp) {
               return service->GetRuinInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RoadService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RoadService::Service, ::city::map::v2::GetEventsRequest, ::city::map::v2::GetEventsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RoadService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::map::v2::GetEventsRequest* req,
             ::city::map::v2::GetEventsResponse* resp) {
               return service->GetEvents(ctx, req, resp);
             }, this)));
}

RoadService::Service::~Service() {
}

::grpc::Status RoadService::Service::GetRoad(::grpc::ServerContext* context, const ::city::map::v2::GetRoadRequest* request, ::city::map::v2::GetRoadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RoadService::Service::GetRoadGlobalStatistics(::grpc::ServerContext* context, const ::city::map::v2::GetRoadGlobalStatisticsRequest* request, ::city::map::v2::GetRoadGlobalStatisticsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RoadService::Service::GetRuinInfo(::grpc::ServerContext* context, const ::city::map::v2::GetRuinInfoRequest* request, ::city::map::v2::GetRuinInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RoadService::Service::GetEvents(::grpc::ServerContext* context, const ::city::map::v2::GetEventsRequest* request, ::city::map::v2::GetEventsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace city
}  // namespace map
}  // namespace v2

