// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/map/v2/road_service.proto
#ifndef GRPC_city_2fmap_2fv2_2froad_5fservice_2eproto__INCLUDED
#define GRPC_city_2fmap_2fv2_2froad_5fservice_2eproto__INCLUDED

#include "city/map/v2/road_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace city {
namespace map {
namespace v2 {

class RoadService final {
 public:
  static constexpr char const* service_full_name() {
    return "city.map.v2.RoadService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 查询道路信息
    // Get road information
    virtual ::grpc::Status GetRoad(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest& request, ::city::map::v2::GetRoadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetRoadResponse>> AsyncGetRoad(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetRoadResponse>>(AsyncGetRoadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetRoadResponse>> PrepareAsyncGetRoad(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetRoadResponse>>(PrepareAsyncGetRoadRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRuinInfo(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest& request, ::city::map::v2::GetRuinInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetRuinInfoResponse>> AsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetRuinInfoResponse>>(AsyncGetRuinInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetRuinInfoResponse>> PrepareAsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetRuinInfoResponse>>(PrepareAsyncGetRuinInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetEvents(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest& request, ::city::map::v2::GetEventsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetEventsResponse>> AsyncGetEvents(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetEventsResponse>>(AsyncGetEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetEventsResponse>> PrepareAsyncGetEvents(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetEventsResponse>>(PrepareAsyncGetEventsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 查询道路信息
      // Get road information
      virtual void GetRoad(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest* request, ::city::map::v2::GetRoadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRoad(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest* request, ::city::map::v2::GetRoadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRuinInfo(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest* request, ::city::map::v2::GetRuinInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRuinInfo(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest* request, ::city::map::v2::GetRuinInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetEvents(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest* request, ::city::map::v2::GetEventsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEvents(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest* request, ::city::map::v2::GetEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetRoadResponse>* AsyncGetRoadRaw(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetRoadResponse>* PrepareAsyncGetRoadRaw(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetRuinInfoResponse>* AsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetRuinInfoResponse>* PrepareAsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetEventsResponse>* AsyncGetEventsRaw(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetEventsResponse>* PrepareAsyncGetEventsRaw(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetRoad(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest& request, ::city::map::v2::GetRoadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRoadResponse>> AsyncGetRoad(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRoadResponse>>(AsyncGetRoadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRoadResponse>> PrepareAsyncGetRoad(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRoadResponse>>(PrepareAsyncGetRoadRaw(context, request, cq));
    }
    ::grpc::Status GetRuinInfo(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest& request, ::city::map::v2::GetRuinInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRuinInfoResponse>> AsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRuinInfoResponse>>(AsyncGetRuinInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRuinInfoResponse>> PrepareAsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRuinInfoResponse>>(PrepareAsyncGetRuinInfoRaw(context, request, cq));
    }
    ::grpc::Status GetEvents(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest& request, ::city::map::v2::GetEventsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetEventsResponse>> AsyncGetEvents(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetEventsResponse>>(AsyncGetEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetEventsResponse>> PrepareAsyncGetEvents(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetEventsResponse>>(PrepareAsyncGetEventsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetRoad(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest* request, ::city::map::v2::GetRoadResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRoad(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest* request, ::city::map::v2::GetRoadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRuinInfo(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest* request, ::city::map::v2::GetRuinInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRuinInfo(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest* request, ::city::map::v2::GetRuinInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetEvents(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest* request, ::city::map::v2::GetEventsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEvents(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest* request, ::city::map::v2::GetEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRoadResponse>* AsyncGetRoadRaw(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRoadResponse>* PrepareAsyncGetRoadRaw(::grpc::ClientContext* context, const ::city::map::v2::GetRoadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRuinInfoResponse>* AsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetRuinInfoResponse>* PrepareAsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::map::v2::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetEventsResponse>* AsyncGetEventsRaw(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetEventsResponse>* PrepareAsyncGetEventsRaw(::grpc::ClientContext* context, const ::city::map::v2::GetEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetRoad_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRuinInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEvents_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 查询道路信息
    // Get road information
    virtual ::grpc::Status GetRoad(::grpc::ServerContext* context, const ::city::map::v2::GetRoadRequest* request, ::city::map::v2::GetRoadResponse* response);
    virtual ::grpc::Status GetRuinInfo(::grpc::ServerContext* context, const ::city::map::v2::GetRuinInfoRequest* request, ::city::map::v2::GetRuinInfoResponse* response);
    virtual ::grpc::Status GetEvents(::grpc::ServerContext* context, const ::city::map::v2::GetEventsRequest* request, ::city::map::v2::GetEventsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRoad() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetRoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoad(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetRoadRequest* /*request*/, ::city::map::v2::GetRoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRoad(::grpc::ServerContext* context, ::city::map::v2::GetRoadRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::map::v2::GetRoadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetRuinInfoRequest* /*request*/, ::city::map::v2::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRuinInfo(::grpc::ServerContext* context, ::city::map::v2::GetRuinInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::map::v2::GetRuinInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEvents() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetEventsRequest* /*request*/, ::city::map::v2::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEvents(::grpc::ServerContext* context, ::city::map::v2::GetEventsRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::map::v2::GetEventsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetRoad<WithAsyncMethod_GetRuinInfo<WithAsyncMethod_GetEvents<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetRoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRoad() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::city::map::v2::GetRoadRequest, ::city::map::v2::GetRoadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::map::v2::GetRoadRequest* request, ::city::map::v2::GetRoadResponse* response) { return this->GetRoad(context, request, response); }));}
    void SetMessageAllocatorFor_GetRoad(
        ::grpc::MessageAllocator< ::city::map::v2::GetRoadRequest, ::city::map::v2::GetRoadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::map::v2::GetRoadRequest, ::city::map::v2::GetRoadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoad(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetRoadRequest* /*request*/, ::city::map::v2::GetRoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRoad(
      ::grpc::CallbackServerContext* /*context*/, const ::city::map::v2::GetRoadRequest* /*request*/, ::city::map::v2::GetRoadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::city::map::v2::GetRuinInfoRequest, ::city::map::v2::GetRuinInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::map::v2::GetRuinInfoRequest* request, ::city::map::v2::GetRuinInfoResponse* response) { return this->GetRuinInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetRuinInfo(
        ::grpc::MessageAllocator< ::city::map::v2::GetRuinInfoRequest, ::city::map::v2::GetRuinInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::map::v2::GetRuinInfoRequest, ::city::map::v2::GetRuinInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetRuinInfoRequest* /*request*/, ::city::map::v2::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRuinInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::city::map::v2::GetRuinInfoRequest* /*request*/, ::city::map::v2::GetRuinInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEvents() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::city::map::v2::GetEventsRequest, ::city::map::v2::GetEventsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::map::v2::GetEventsRequest* request, ::city::map::v2::GetEventsResponse* response) { return this->GetEvents(context, request, response); }));}
    void SetMessageAllocatorFor_GetEvents(
        ::grpc::MessageAllocator< ::city::map::v2::GetEventsRequest, ::city::map::v2::GetEventsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::map::v2::GetEventsRequest, ::city::map::v2::GetEventsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetEventsRequest* /*request*/, ::city::map::v2::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::city::map::v2::GetEventsRequest* /*request*/, ::city::map::v2::GetEventsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetRoad<WithCallbackMethod_GetRuinInfo<WithCallbackMethod_GetEvents<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetRoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRoad() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetRoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoad(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetRoadRequest* /*request*/, ::city::map::v2::GetRoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetRuinInfoRequest* /*request*/, ::city::map::v2::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEvents() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetEventsRequest* /*request*/, ::city::map::v2::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRoad() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetRoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoad(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetRoadRequest* /*request*/, ::city::map::v2::GetRoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRoad(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetRuinInfoRequest* /*request*/, ::city::map::v2::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRuinInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEvents() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetEventsRequest* /*request*/, ::city::map::v2::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRoad() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRoad(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoad(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetRoadRequest* /*request*/, ::city::map::v2::GetRoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRoad(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRuinInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetRuinInfoRequest* /*request*/, ::city::map::v2::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRuinInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEvents() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEvents(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetEventsRequest* /*request*/, ::city::map::v2::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRoad : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRoad() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::map::v2::GetRoadRequest, ::city::map::v2::GetRoadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::map::v2::GetRoadRequest, ::city::map::v2::GetRoadResponse>* streamer) {
                       return this->StreamedGetRoad(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRoad() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRoad(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetRoadRequest* /*request*/, ::city::map::v2::GetRoadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRoad(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::map::v2::GetRoadRequest,::city::map::v2::GetRoadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::map::v2::GetRuinInfoRequest, ::city::map::v2::GetRuinInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::map::v2::GetRuinInfoRequest, ::city::map::v2::GetRuinInfoResponse>* streamer) {
                       return this->StreamedGetRuinInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetRuinInfoRequest* /*request*/, ::city::map::v2::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRuinInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::map::v2::GetRuinInfoRequest,::city::map::v2::GetRuinInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEvents() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::map::v2::GetEventsRequest, ::city::map::v2::GetEventsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::map::v2::GetEventsRequest, ::city::map::v2::GetEventsResponse>* streamer) {
                       return this->StreamedGetEvents(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetEventsRequest* /*request*/, ::city::map::v2::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::map::v2::GetEventsRequest,::city::map::v2::GetEventsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetRoad<WithStreamedUnaryMethod_GetRuinInfo<WithStreamedUnaryMethod_GetEvents<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetRoad<WithStreamedUnaryMethod_GetRuinInfo<WithStreamedUnaryMethod_GetEvents<Service > > > StreamedService;
};

}  // namespace v2
}  // namespace map
}  // namespace city


#endif  // GRPC_city_2fmap_2fv2_2froad_5fservice_2eproto__INCLUDED
