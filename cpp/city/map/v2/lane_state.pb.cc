// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/map/v2/lane_state.proto

#include "city/map/v2/lane_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace map {
namespace v2 {
PROTOBUF_CONSTEXPR LaneState::LaneState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.persons_)*/{}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.restriction_)*/false
  , /*decltype(_impl_.avg_v_)*/0
  , /*decltype(_impl_.light_state_)*/0
  , /*decltype(_impl_.in_vehicle_cnt_)*/0
  , /*decltype(_impl_.out_vehicle_cnt_)*/0
  , /*decltype(_impl_.vehicle_cnt_)*/0
  , /*decltype(_impl_.total_queuing_time_)*/0
  , /*decltype(_impl_.avg_queuing_time_)*/0
  , /*decltype(_impl_.total_queuing_vehicle_cnt_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LaneStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LaneStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LaneStateDefaultTypeInternal() {}
  union {
    LaneState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LaneStateDefaultTypeInternal _LaneState_default_instance_;
}  // namespace v2
}  // namespace map
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fmap_2fv2_2flane_5fstate_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_city_2fmap_2fv2_2flane_5fstate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fmap_2fv2_2flane_5fstate_2eproto = nullptr;

const uint32_t TableStruct_city_2fmap_2fv2_2flane_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::LaneState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::LaneState, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::LaneState, _impl_.persons_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::LaneState, _impl_.avg_v_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::LaneState, _impl_.restriction_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::LaneState, _impl_.light_state_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::LaneState, _impl_.in_vehicle_cnt_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::LaneState, _impl_.out_vehicle_cnt_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::LaneState, _impl_.vehicle_cnt_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::LaneState, _impl_.total_queuing_vehicle_cnt_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::LaneState, _impl_.total_queuing_time_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::LaneState, _impl_.avg_queuing_time_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::map::v2::LaneState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::map::v2::_LaneState_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fmap_2fv2_2flane_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034city/map/v2/lane_state.proto\022\013city.map"
  ".v2\032\027city/map/v2/light.proto\032\033city/perso"
  "n/v2/motion.proto\"\306\003\n\tLaneState\022\016\n\002id\030\001 "
  "\001(\005R\002id\0226\n\007persons\030\002 \003(\0132\034.city.person.v"
  "2.PersonMotionR\007persons\022\023\n\005avg_v\030\003 \001(\001R\004"
  "avgV\022 \n\013restriction\030\004 \001(\010R\013restriction\0228"
  "\n\013light_state\030\005 \001(\0162\027.city.map.v2.LightS"
  "tateR\nlightState\022$\n\016in_vehicle_cnt\030\006 \001(\005"
  "R\014inVehicleCnt\022&\n\017out_vehicle_cnt\030\007 \001(\005R"
  "\routVehicleCnt\022\037\n\013vehicle_cnt\030\010 \001(\005R\nveh"
  "icleCnt\0229\n\031total_queuing_vehicle_cnt\030\t \001"
  "(\005R\026totalQueuingVehicleCnt\022,\n\022total_queu"
  "ing_time\030\n \001(\001R\020totalQueuingTime\022(\n\020avg_"
  "queuing_time\030\013 \001(\001R\016avgQueuingTimeB\242\001\n\017c"
  "om.city.map.v2B\016LaneStateProtoP\001Z1git.fi"
  "blab.net/sim/protos/v2/go/city/map/v2;ma"
  "pv2\242\002\003CMX\252\002\013City.Map.V2\312\002\013City\\Map\\V2\342\002\027"
  "City\\Map\\V2\\GPBMetadata\352\002\rCity::Map::V2b"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_city_2fmap_2fv2_2flane_5fstate_2eproto_deps[2] = {
  &::descriptor_table_city_2fmap_2fv2_2flight_2eproto,
  &::descriptor_table_city_2fperson_2fv2_2fmotion_2eproto,
};
static ::_pbi::once_flag descriptor_table_city_2fmap_2fv2_2flane_5fstate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fmap_2fv2_2flane_5fstate_2eproto = {
    false, false, 727, descriptor_table_protodef_city_2fmap_2fv2_2flane_5fstate_2eproto,
    "city/map/v2/lane_state.proto",
    &descriptor_table_city_2fmap_2fv2_2flane_5fstate_2eproto_once, descriptor_table_city_2fmap_2fv2_2flane_5fstate_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_city_2fmap_2fv2_2flane_5fstate_2eproto::offsets,
    file_level_metadata_city_2fmap_2fv2_2flane_5fstate_2eproto, file_level_enum_descriptors_city_2fmap_2fv2_2flane_5fstate_2eproto,
    file_level_service_descriptors_city_2fmap_2fv2_2flane_5fstate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fmap_2fv2_2flane_5fstate_2eproto_getter() {
  return &descriptor_table_city_2fmap_2fv2_2flane_5fstate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fmap_2fv2_2flane_5fstate_2eproto(&descriptor_table_city_2fmap_2fv2_2flane_5fstate_2eproto);
namespace city {
namespace map {
namespace v2 {

// ===================================================================

class LaneState::_Internal {
 public:
};

void LaneState::clear_persons() {
  _impl_.persons_.Clear();
}
LaneState::LaneState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.LaneState)
}
LaneState::LaneState(const LaneState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LaneState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.persons_){from._impl_.persons_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.restriction_){}
    , decltype(_impl_.avg_v_){}
    , decltype(_impl_.light_state_){}
    , decltype(_impl_.in_vehicle_cnt_){}
    , decltype(_impl_.out_vehicle_cnt_){}
    , decltype(_impl_.vehicle_cnt_){}
    , decltype(_impl_.total_queuing_time_){}
    , decltype(_impl_.avg_queuing_time_){}
    , decltype(_impl_.total_queuing_vehicle_cnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_queuing_vehicle_cnt_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.total_queuing_vehicle_cnt_));
  // @@protoc_insertion_point(copy_constructor:city.map.v2.LaneState)
}

inline void LaneState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.persons_){arena}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.restriction_){false}
    , decltype(_impl_.avg_v_){0}
    , decltype(_impl_.light_state_){0}
    , decltype(_impl_.in_vehicle_cnt_){0}
    , decltype(_impl_.out_vehicle_cnt_){0}
    , decltype(_impl_.vehicle_cnt_){0}
    , decltype(_impl_.total_queuing_time_){0}
    , decltype(_impl_.avg_queuing_time_){0}
    , decltype(_impl_.total_queuing_vehicle_cnt_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LaneState::~LaneState() {
  // @@protoc_insertion_point(destructor:city.map.v2.LaneState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LaneState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.persons_.~RepeatedPtrField();
}

void LaneState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LaneState::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.LaneState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.persons_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_queuing_vehicle_cnt_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.total_queuing_vehicle_cnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .city.person.v2.PersonMotion persons = 2 [json_name = "persons"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_persons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double avg_v = 3 [json_name = "avgV"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.avg_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool restriction = 4 [json_name = "restriction"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.restriction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.map.v2.LightState light_state = 5 [json_name = "lightState"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_light_state(static_cast<::city::map::v2::LightState>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 in_vehicle_cnt = 6 [json_name = "inVehicleCnt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.in_vehicle_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 out_vehicle_cnt = 7 [json_name = "outVehicleCnt"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.out_vehicle_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vehicle_cnt = 8 [json_name = "vehicleCnt"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.vehicle_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_queuing_vehicle_cnt = 9 [json_name = "totalQueuingVehicleCnt"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.total_queuing_vehicle_cnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double total_queuing_time = 10 [json_name = "totalQueuingTime"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.total_queuing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double avg_queuing_time = 11 [json_name = "avgQueuingTime"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.avg_queuing_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LaneState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.LaneState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .city.person.v2.PersonMotion persons = 2 [json_name = "persons"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_persons_size()); i < n; i++) {
    const auto& repfield = this->_internal_persons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // double avg_v = 3 [json_name = "avgV"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_v = this->_internal_avg_v();
  uint64_t raw_avg_v;
  memcpy(&raw_avg_v, &tmp_avg_v, sizeof(tmp_avg_v));
  if (raw_avg_v != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_avg_v(), target);
  }

  // bool restriction = 4 [json_name = "restriction"];
  if (this->_internal_restriction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_restriction(), target);
  }

  // .city.map.v2.LightState light_state = 5 [json_name = "lightState"];
  if (this->_internal_light_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_light_state(), target);
  }

  // int32 in_vehicle_cnt = 6 [json_name = "inVehicleCnt"];
  if (this->_internal_in_vehicle_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_in_vehicle_cnt(), target);
  }

  // int32 out_vehicle_cnt = 7 [json_name = "outVehicleCnt"];
  if (this->_internal_out_vehicle_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_out_vehicle_cnt(), target);
  }

  // int32 vehicle_cnt = 8 [json_name = "vehicleCnt"];
  if (this->_internal_vehicle_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_vehicle_cnt(), target);
  }

  // int32 total_queuing_vehicle_cnt = 9 [json_name = "totalQueuingVehicleCnt"];
  if (this->_internal_total_queuing_vehicle_cnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_total_queuing_vehicle_cnt(), target);
  }

  // double total_queuing_time = 10 [json_name = "totalQueuingTime"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_queuing_time = this->_internal_total_queuing_time();
  uint64_t raw_total_queuing_time;
  memcpy(&raw_total_queuing_time, &tmp_total_queuing_time, sizeof(tmp_total_queuing_time));
  if (raw_total_queuing_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_total_queuing_time(), target);
  }

  // double avg_queuing_time = 11 [json_name = "avgQueuingTime"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_queuing_time = this->_internal_avg_queuing_time();
  uint64_t raw_avg_queuing_time;
  memcpy(&raw_avg_queuing_time, &tmp_avg_queuing_time, sizeof(tmp_avg_queuing_time));
  if (raw_avg_queuing_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_avg_queuing_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.LaneState)
  return target;
}

size_t LaneState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.LaneState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.person.v2.PersonMotion persons = 2 [json_name = "persons"];
  total_size += 1UL * this->_internal_persons_size();
  for (const auto& msg : this->_impl_.persons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // bool restriction = 4 [json_name = "restriction"];
  if (this->_internal_restriction() != 0) {
    total_size += 1 + 1;
  }

  // double avg_v = 3 [json_name = "avgV"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_v = this->_internal_avg_v();
  uint64_t raw_avg_v;
  memcpy(&raw_avg_v, &tmp_avg_v, sizeof(tmp_avg_v));
  if (raw_avg_v != 0) {
    total_size += 1 + 8;
  }

  // .city.map.v2.LightState light_state = 5 [json_name = "lightState"];
  if (this->_internal_light_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_light_state());
  }

  // int32 in_vehicle_cnt = 6 [json_name = "inVehicleCnt"];
  if (this->_internal_in_vehicle_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_in_vehicle_cnt());
  }

  // int32 out_vehicle_cnt = 7 [json_name = "outVehicleCnt"];
  if (this->_internal_out_vehicle_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_out_vehicle_cnt());
  }

  // int32 vehicle_cnt = 8 [json_name = "vehicleCnt"];
  if (this->_internal_vehicle_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vehicle_cnt());
  }

  // double total_queuing_time = 10 [json_name = "totalQueuingTime"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_queuing_time = this->_internal_total_queuing_time();
  uint64_t raw_total_queuing_time;
  memcpy(&raw_total_queuing_time, &tmp_total_queuing_time, sizeof(tmp_total_queuing_time));
  if (raw_total_queuing_time != 0) {
    total_size += 1 + 8;
  }

  // double avg_queuing_time = 11 [json_name = "avgQueuingTime"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_queuing_time = this->_internal_avg_queuing_time();
  uint64_t raw_avg_queuing_time;
  memcpy(&raw_avg_queuing_time, &tmp_avg_queuing_time, sizeof(tmp_avg_queuing_time));
  if (raw_avg_queuing_time != 0) {
    total_size += 1 + 8;
  }

  // int32 total_queuing_vehicle_cnt = 9 [json_name = "totalQueuingVehicleCnt"];
  if (this->_internal_total_queuing_vehicle_cnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_queuing_vehicle_cnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LaneState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneState::GetClassData() const { return &_class_data_; }


void LaneState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LaneState*>(&to_msg);
  auto& from = static_cast<const LaneState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.LaneState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.persons_.MergeFrom(from._impl_.persons_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_restriction() != 0) {
    _this->_internal_set_restriction(from._internal_restriction());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_v = from._internal_avg_v();
  uint64_t raw_avg_v;
  memcpy(&raw_avg_v, &tmp_avg_v, sizeof(tmp_avg_v));
  if (raw_avg_v != 0) {
    _this->_internal_set_avg_v(from._internal_avg_v());
  }
  if (from._internal_light_state() != 0) {
    _this->_internal_set_light_state(from._internal_light_state());
  }
  if (from._internal_in_vehicle_cnt() != 0) {
    _this->_internal_set_in_vehicle_cnt(from._internal_in_vehicle_cnt());
  }
  if (from._internal_out_vehicle_cnt() != 0) {
    _this->_internal_set_out_vehicle_cnt(from._internal_out_vehicle_cnt());
  }
  if (from._internal_vehicle_cnt() != 0) {
    _this->_internal_set_vehicle_cnt(from._internal_vehicle_cnt());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_queuing_time = from._internal_total_queuing_time();
  uint64_t raw_total_queuing_time;
  memcpy(&raw_total_queuing_time, &tmp_total_queuing_time, sizeof(tmp_total_queuing_time));
  if (raw_total_queuing_time != 0) {
    _this->_internal_set_total_queuing_time(from._internal_total_queuing_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_queuing_time = from._internal_avg_queuing_time();
  uint64_t raw_avg_queuing_time;
  memcpy(&raw_avg_queuing_time, &tmp_avg_queuing_time, sizeof(tmp_avg_queuing_time));
  if (raw_avg_queuing_time != 0) {
    _this->_internal_set_avg_queuing_time(from._internal_avg_queuing_time());
  }
  if (from._internal_total_queuing_vehicle_cnt() != 0) {
    _this->_internal_set_total_queuing_vehicle_cnt(from._internal_total_queuing_vehicle_cnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneState::CopyFrom(const LaneState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.LaneState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneState::IsInitialized() const {
  return true;
}

void LaneState::InternalSwap(LaneState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.persons_.InternalSwap(&other->_impl_.persons_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneState, _impl_.total_queuing_vehicle_cnt_)
      + sizeof(LaneState::_impl_.total_queuing_vehicle_cnt_)
      - PROTOBUF_FIELD_OFFSET(LaneState, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2flane_5fstate_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2flane_5fstate_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2flane_5fstate_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace map
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::map::v2::LaneState*
Arena::CreateMaybeMessage< ::city::map::v2::LaneState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::LaneState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
