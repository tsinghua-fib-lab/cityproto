// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/map/v2/lane_service.proto

#include "city/map/v2/lane_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace map {
namespace v2 {
PROTOBUF_CONSTEXPR SetLaneMaxVRequest::SetLaneMaxVRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_v_)*/0
  , /*decltype(_impl_.lane_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetLaneMaxVRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetLaneMaxVRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetLaneMaxVRequestDefaultTypeInternal() {}
  union {
    SetLaneMaxVRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetLaneMaxVRequestDefaultTypeInternal _SetLaneMaxVRequest_default_instance_;
PROTOBUF_CONSTEXPR SetLaneMaxVResponse::SetLaneMaxVResponse(
    ::_pbi::ConstantInitialized) {}
struct SetLaneMaxVResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetLaneMaxVResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetLaneMaxVResponseDefaultTypeInternal() {}
  union {
    SetLaneMaxVResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetLaneMaxVResponseDefaultTypeInternal _SetLaneMaxVResponse_default_instance_;
PROTOBUF_CONSTEXPR SetLaneRestrictionRequest::SetLaneRestrictionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lane_id_)*/0
  , /*decltype(_impl_.restriction_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetLaneRestrictionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetLaneRestrictionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetLaneRestrictionRequestDefaultTypeInternal() {}
  union {
    SetLaneRestrictionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetLaneRestrictionRequestDefaultTypeInternal _SetLaneRestrictionRequest_default_instance_;
PROTOBUF_CONSTEXPR SetLaneRestrictionResponse::SetLaneRestrictionResponse(
    ::_pbi::ConstantInitialized) {}
struct SetLaneRestrictionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetLaneRestrictionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetLaneRestrictionResponseDefaultTypeInternal() {}
  union {
    SetLaneRestrictionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetLaneRestrictionResponseDefaultTypeInternal _SetLaneRestrictionResponse_default_instance_;
PROTOBUF_CONSTEXPR GetLaneRequest::GetLaneRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lane_ids_)*/{}
  , /*decltype(_impl_._lane_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.exclude_person_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLaneRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLaneRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLaneRequestDefaultTypeInternal() {}
  union {
    GetLaneRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLaneRequestDefaultTypeInternal _GetLaneRequest_default_instance_;
PROTOBUF_CONSTEXPR GetLaneResponse::GetLaneResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.states_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLaneResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLaneResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLaneResponseDefaultTypeInternal() {}
  union {
    GetLaneResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLaneResponseDefaultTypeInternal _GetLaneResponse_default_instance_;
PROTOBUF_CONSTEXPR GetLaneByLongLatBBoxRequest::GetLaneByLongLatBBoxRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bbox_)*/nullptr
  , /*decltype(_impl_.exclude_person_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLaneByLongLatBBoxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLaneByLongLatBBoxRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLaneByLongLatBBoxRequestDefaultTypeInternal() {}
  union {
    GetLaneByLongLatBBoxRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLaneByLongLatBBoxRequestDefaultTypeInternal _GetLaneByLongLatBBoxRequest_default_instance_;
PROTOBUF_CONSTEXPR GetLaneByLongLatBBoxResponse::GetLaneByLongLatBBoxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.states_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetLaneByLongLatBBoxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLaneByLongLatBBoxResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLaneByLongLatBBoxResponseDefaultTypeInternal() {}
  union {
    GetLaneByLongLatBBoxResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLaneByLongLatBBoxResponseDefaultTypeInternal _GetLaneByLongLatBBoxResponse_default_instance_;
}  // namespace v2
}  // namespace map
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fmap_2fv2_2flane_5fservice_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_city_2fmap_2fv2_2flane_5fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fmap_2fv2_2flane_5fservice_2eproto = nullptr;

const uint32_t TableStruct_city_2fmap_2fv2_2flane_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetLaneMaxVRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetLaneMaxVRequest, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetLaneMaxVRequest, _impl_.max_v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetLaneMaxVResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetLaneRestrictionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetLaneRestrictionRequest, _impl_.lane_id_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetLaneRestrictionRequest, _impl_.restriction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetLaneRestrictionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetLaneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetLaneRequest, _impl_.lane_ids_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetLaneRequest, _impl_.exclude_person_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetLaneResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetLaneResponse, _impl_.states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetLaneByLongLatBBoxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetLaneByLongLatBBoxRequest, _impl_.bbox_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetLaneByLongLatBBoxRequest, _impl_.exclude_person_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetLaneByLongLatBBoxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetLaneByLongLatBBoxResponse, _impl_.states_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::map::v2::SetLaneMaxVRequest)},
  { 8, -1, -1, sizeof(::city::map::v2::SetLaneMaxVResponse)},
  { 14, -1, -1, sizeof(::city::map::v2::SetLaneRestrictionRequest)},
  { 22, -1, -1, sizeof(::city::map::v2::SetLaneRestrictionResponse)},
  { 28, -1, -1, sizeof(::city::map::v2::GetLaneRequest)},
  { 36, -1, -1, sizeof(::city::map::v2::GetLaneResponse)},
  { 43, -1, -1, sizeof(::city::map::v2::GetLaneByLongLatBBoxRequest)},
  { 51, -1, -1, sizeof(::city::map::v2::GetLaneByLongLatBBoxResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::map::v2::_SetLaneMaxVRequest_default_instance_._instance,
  &::city::map::v2::_SetLaneMaxVResponse_default_instance_._instance,
  &::city::map::v2::_SetLaneRestrictionRequest_default_instance_._instance,
  &::city::map::v2::_SetLaneRestrictionResponse_default_instance_._instance,
  &::city::map::v2::_GetLaneRequest_default_instance_._instance,
  &::city::map::v2::_GetLaneResponse_default_instance_._instance,
  &::city::map::v2::_GetLaneByLongLatBBoxRequest_default_instance_._instance,
  &::city::map::v2::_GetLaneByLongLatBBoxResponse_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fmap_2fv2_2flane_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036city/map/v2/lane_service.proto\022\013city.m"
  "ap.v2\032\025city/geo/v2/geo.proto\032\034city/map/v"
  "2/lane_state.proto\"B\n\022SetLaneMaxVRequest"
  "\022\027\n\007lane_id\030\001 \001(\005R\006laneId\022\023\n\005max_v\030\002 \001(\001"
  "R\004maxV\"\025\n\023SetLaneMaxVResponse\"V\n\031SetLane"
  "RestrictionRequest\022\027\n\007lane_id\030\001 \001(\005R\006lan"
  "eId\022 \n\013restriction\030\002 \001(\010R\013restriction\"\034\n"
  "\032SetLaneRestrictionResponse\"R\n\016GetLaneRe"
  "quest\022\031\n\010lane_ids\030\001 \003(\005R\007laneIds\022%\n\016excl"
  "ude_person\030\002 \001(\010R\rexcludePerson\"A\n\017GetLa"
  "neResponse\022.\n\006states\030\001 \003(\0132\026.city.map.v2"
  ".LaneStateR\006states\"r\n\033GetLaneByLongLatBB"
  "oxRequest\022,\n\004bbox\030\001 \001(\0132\030.city.geo.v2.Lo"
  "ngLatBBoxR\004bbox\022%\n\016exclude_person\030\002 \001(\010R"
  "\rexcludePerson\"N\n\034GetLaneByLongLatBBoxRe"
  "sponse\022.\n\006states\030\001 \003(\0132\026.city.map.v2.Lan"
  "eStateR\006states2\371\002\n\013LaneService\022P\n\013SetLan"
  "eMaxV\022\037.city.map.v2.SetLaneMaxVRequest\032 "
  ".city.map.v2.SetLaneMaxVResponse\022e\n\022SetL"
  "aneRestriction\022&.city.map.v2.SetLaneRest"
  "rictionRequest\032\'.city.map.v2.SetLaneRest"
  "rictionResponse\022D\n\007GetLane\022\033.city.map.v2"
  ".GetLaneRequest\032\034.city.map.v2.GetLaneRes"
  "ponse\022k\n\024GetLaneByLongLatBBox\022(.city.map"
  ".v2.GetLaneByLongLatBBoxRequest\032).city.m"
  "ap.v2.GetLaneByLongLatBBoxResponseB\244\001\n\017c"
  "om.city.map.v2B\020LaneServiceProtoP\001Z1git."
  "fiblab.net/sim/protos/go/v2/city/map/v2;"
  "mapv2\242\002\003CMX\252\002\013City.Map.V2\312\002\013City\\Map\\V2\342"
  "\002\027City\\Map\\V2\\GPBMetadata\352\002\rCity::Map::V"
  "2b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_deps[2] = {
  &::descriptor_table_city_2fgeo_2fv2_2fgeo_2eproto,
  &::descriptor_table_city_2fmap_2fv2_2flane_5fstate_2eproto,
};
static ::_pbi::once_flag descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto = {
    false, false, 1209, descriptor_table_protodef_city_2fmap_2fv2_2flane_5fservice_2eproto,
    "city/map/v2/lane_service.proto",
    &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_once, descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_deps, 2, 8,
    schemas, file_default_instances, TableStruct_city_2fmap_2fv2_2flane_5fservice_2eproto::offsets,
    file_level_metadata_city_2fmap_2fv2_2flane_5fservice_2eproto, file_level_enum_descriptors_city_2fmap_2fv2_2flane_5fservice_2eproto,
    file_level_service_descriptors_city_2fmap_2fv2_2flane_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_getter() {
  return &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fmap_2fv2_2flane_5fservice_2eproto(&descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto);
namespace city {
namespace map {
namespace v2 {

// ===================================================================

class SetLaneMaxVRequest::_Internal {
 public:
};

SetLaneMaxVRequest::SetLaneMaxVRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.SetLaneMaxVRequest)
}
SetLaneMaxVRequest::SetLaneMaxVRequest(const SetLaneMaxVRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetLaneMaxVRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.max_v_){}
    , decltype(_impl_.lane_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_v_, &from._impl_.max_v_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lane_id_) -
    reinterpret_cast<char*>(&_impl_.max_v_)) + sizeof(_impl_.lane_id_));
  // @@protoc_insertion_point(copy_constructor:city.map.v2.SetLaneMaxVRequest)
}

inline void SetLaneMaxVRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.max_v_){0}
    , decltype(_impl_.lane_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetLaneMaxVRequest::~SetLaneMaxVRequest() {
  // @@protoc_insertion_point(destructor:city.map.v2.SetLaneMaxVRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetLaneMaxVRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetLaneMaxVRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetLaneMaxVRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.SetLaneMaxVRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.max_v_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lane_id_) -
      reinterpret_cast<char*>(&_impl_.max_v_)) + sizeof(_impl_.lane_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLaneMaxVRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 lane_id = 1 [json_name = "laneId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double max_v = 2 [json_name = "maxV"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.max_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetLaneMaxVRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.SetLaneMaxVRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lane_id = 1 [json_name = "laneId"];
  if (this->_internal_lane_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_lane_id(), target);
  }

  // double max_v = 2 [json_name = "maxV"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_v = this->_internal_max_v();
  uint64_t raw_max_v;
  memcpy(&raw_max_v, &tmp_max_v, sizeof(tmp_max_v));
  if (raw_max_v != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.SetLaneMaxVRequest)
  return target;
}

size_t SetLaneMaxVRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.SetLaneMaxVRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max_v = 2 [json_name = "maxV"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_v = this->_internal_max_v();
  uint64_t raw_max_v;
  memcpy(&raw_max_v, &tmp_max_v, sizeof(tmp_max_v));
  if (raw_max_v != 0) {
    total_size += 1 + 8;
  }

  // int32 lane_id = 1 [json_name = "laneId"];
  if (this->_internal_lane_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lane_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLaneMaxVRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetLaneMaxVRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLaneMaxVRequest::GetClassData() const { return &_class_data_; }


void SetLaneMaxVRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetLaneMaxVRequest*>(&to_msg);
  auto& from = static_cast<const SetLaneMaxVRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.SetLaneMaxVRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_v = from._internal_max_v();
  uint64_t raw_max_v;
  memcpy(&raw_max_v, &tmp_max_v, sizeof(tmp_max_v));
  if (raw_max_v != 0) {
    _this->_internal_set_max_v(from._internal_max_v());
  }
  if (from._internal_lane_id() != 0) {
    _this->_internal_set_lane_id(from._internal_lane_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetLaneMaxVRequest::CopyFrom(const SetLaneMaxVRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.SetLaneMaxVRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLaneMaxVRequest::IsInitialized() const {
  return true;
}

void SetLaneMaxVRequest::InternalSwap(SetLaneMaxVRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetLaneMaxVRequest, _impl_.lane_id_)
      + sizeof(SetLaneMaxVRequest::_impl_.lane_id_)
      - PROTOBUF_FIELD_OFFSET(SetLaneMaxVRequest, _impl_.max_v_)>(
          reinterpret_cast<char*>(&_impl_.max_v_),
          reinterpret_cast<char*>(&other->_impl_.max_v_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLaneMaxVRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2flane_5fservice_2eproto[0]);
}

// ===================================================================

class SetLaneMaxVResponse::_Internal {
 public:
};

SetLaneMaxVResponse::SetLaneMaxVResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.map.v2.SetLaneMaxVResponse)
}
SetLaneMaxVResponse::SetLaneMaxVResponse(const SetLaneMaxVResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetLaneMaxVResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.map.v2.SetLaneMaxVResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLaneMaxVResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLaneMaxVResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetLaneMaxVResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2flane_5fservice_2eproto[1]);
}

// ===================================================================

class SetLaneRestrictionRequest::_Internal {
 public:
};

SetLaneRestrictionRequest::SetLaneRestrictionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.SetLaneRestrictionRequest)
}
SetLaneRestrictionRequest::SetLaneRestrictionRequest(const SetLaneRestrictionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetLaneRestrictionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lane_id_){}
    , decltype(_impl_.restriction_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lane_id_, &from._impl_.lane_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.restriction_) -
    reinterpret_cast<char*>(&_impl_.lane_id_)) + sizeof(_impl_.restriction_));
  // @@protoc_insertion_point(copy_constructor:city.map.v2.SetLaneRestrictionRequest)
}

inline void SetLaneRestrictionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lane_id_){0}
    , decltype(_impl_.restriction_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetLaneRestrictionRequest::~SetLaneRestrictionRequest() {
  // @@protoc_insertion_point(destructor:city.map.v2.SetLaneRestrictionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetLaneRestrictionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetLaneRestrictionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetLaneRestrictionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.SetLaneRestrictionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.lane_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.restriction_) -
      reinterpret_cast<char*>(&_impl_.lane_id_)) + sizeof(_impl_.restriction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLaneRestrictionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 lane_id = 1 [json_name = "laneId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool restriction = 2 [json_name = "restriction"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.restriction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetLaneRestrictionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.SetLaneRestrictionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lane_id = 1 [json_name = "laneId"];
  if (this->_internal_lane_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_lane_id(), target);
  }

  // bool restriction = 2 [json_name = "restriction"];
  if (this->_internal_restriction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_restriction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.SetLaneRestrictionRequest)
  return target;
}

size_t SetLaneRestrictionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.SetLaneRestrictionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 lane_id = 1 [json_name = "laneId"];
  if (this->_internal_lane_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lane_id());
  }

  // bool restriction = 2 [json_name = "restriction"];
  if (this->_internal_restriction() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLaneRestrictionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetLaneRestrictionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLaneRestrictionRequest::GetClassData() const { return &_class_data_; }


void SetLaneRestrictionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetLaneRestrictionRequest*>(&to_msg);
  auto& from = static_cast<const SetLaneRestrictionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.SetLaneRestrictionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lane_id() != 0) {
    _this->_internal_set_lane_id(from._internal_lane_id());
  }
  if (from._internal_restriction() != 0) {
    _this->_internal_set_restriction(from._internal_restriction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetLaneRestrictionRequest::CopyFrom(const SetLaneRestrictionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.SetLaneRestrictionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLaneRestrictionRequest::IsInitialized() const {
  return true;
}

void SetLaneRestrictionRequest::InternalSwap(SetLaneRestrictionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetLaneRestrictionRequest, _impl_.restriction_)
      + sizeof(SetLaneRestrictionRequest::_impl_.restriction_)
      - PROTOBUF_FIELD_OFFSET(SetLaneRestrictionRequest, _impl_.lane_id_)>(
          reinterpret_cast<char*>(&_impl_.lane_id_),
          reinterpret_cast<char*>(&other->_impl_.lane_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLaneRestrictionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2flane_5fservice_2eproto[2]);
}

// ===================================================================

class SetLaneRestrictionResponse::_Internal {
 public:
};

SetLaneRestrictionResponse::SetLaneRestrictionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.map.v2.SetLaneRestrictionResponse)
}
SetLaneRestrictionResponse::SetLaneRestrictionResponse(const SetLaneRestrictionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetLaneRestrictionResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.map.v2.SetLaneRestrictionResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLaneRestrictionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLaneRestrictionResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetLaneRestrictionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2flane_5fservice_2eproto[3]);
}

// ===================================================================

class GetLaneRequest::_Internal {
 public:
};

GetLaneRequest::GetLaneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetLaneRequest)
}
GetLaneRequest::GetLaneRequest(const GetLaneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLaneRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lane_ids_){from._impl_.lane_ids_}
    , /*decltype(_impl_._lane_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.exclude_person_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.exclude_person_ = from._impl_.exclude_person_;
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetLaneRequest)
}

inline void GetLaneRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lane_ids_){arena}
    , /*decltype(_impl_._lane_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.exclude_person_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetLaneRequest::~GetLaneRequest() {
  // @@protoc_insertion_point(destructor:city.map.v2.GetLaneRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLaneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lane_ids_.~RepeatedField();
}

void GetLaneRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLaneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.GetLaneRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lane_ids_.Clear();
  _impl_.exclude_person_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLaneRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 lane_ids = 1 [json_name = "laneIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_lane_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_lane_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool exclude_person = 2 [json_name = "excludePerson"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.exclude_person_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLaneRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.GetLaneRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 lane_ids = 1 [json_name = "laneIds"];
  {
    int byte_size = _impl_._lane_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_lane_ids(), byte_size, target);
    }
  }

  // bool exclude_person = 2 [json_name = "excludePerson"];
  if (this->_internal_exclude_person() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_exclude_person(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.GetLaneRequest)
  return target;
}

size_t GetLaneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.GetLaneRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 lane_ids = 1 [json_name = "laneIds"];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.lane_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._lane_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool exclude_person = 2 [json_name = "excludePerson"];
  if (this->_internal_exclude_person() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLaneRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLaneRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLaneRequest::GetClassData() const { return &_class_data_; }


void GetLaneRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLaneRequest*>(&to_msg);
  auto& from = static_cast<const GetLaneRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.GetLaneRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lane_ids_.MergeFrom(from._impl_.lane_ids_);
  if (from._internal_exclude_person() != 0) {
    _this->_internal_set_exclude_person(from._internal_exclude_person());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLaneRequest::CopyFrom(const GetLaneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.GetLaneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLaneRequest::IsInitialized() const {
  return true;
}

void GetLaneRequest::InternalSwap(GetLaneRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lane_ids_.InternalSwap(&other->_impl_.lane_ids_);
  swap(_impl_.exclude_person_, other->_impl_.exclude_person_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLaneRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2flane_5fservice_2eproto[4]);
}

// ===================================================================

class GetLaneResponse::_Internal {
 public:
};

void GetLaneResponse::clear_states() {
  _impl_.states_.Clear();
}
GetLaneResponse::GetLaneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetLaneResponse)
}
GetLaneResponse::GetLaneResponse(const GetLaneResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLaneResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){from._impl_.states_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetLaneResponse)
}

inline void GetLaneResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetLaneResponse::~GetLaneResponse() {
  // @@protoc_insertion_point(destructor:city.map.v2.GetLaneResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLaneResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.states_.~RepeatedPtrField();
}

void GetLaneResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLaneResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.GetLaneResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.states_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLaneResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .city.map.v2.LaneState states = 1 [json_name = "states"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLaneResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.GetLaneResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .city.map.v2.LaneState states = 1 [json_name = "states"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.GetLaneResponse)
  return target;
}

size_t GetLaneResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.GetLaneResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.map.v2.LaneState states = 1 [json_name = "states"];
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->_impl_.states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLaneResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLaneResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLaneResponse::GetClassData() const { return &_class_data_; }


void GetLaneResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLaneResponse*>(&to_msg);
  auto& from = static_cast<const GetLaneResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.GetLaneResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.states_.MergeFrom(from._impl_.states_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLaneResponse::CopyFrom(const GetLaneResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.GetLaneResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLaneResponse::IsInitialized() const {
  return true;
}

void GetLaneResponse::InternalSwap(GetLaneResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.states_.InternalSwap(&other->_impl_.states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLaneResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2flane_5fservice_2eproto[5]);
}

// ===================================================================

class GetLaneByLongLatBBoxRequest::_Internal {
 public:
  static const ::city::geo::v2::LongLatBBox& bbox(const GetLaneByLongLatBBoxRequest* msg);
};

const ::city::geo::v2::LongLatBBox&
GetLaneByLongLatBBoxRequest::_Internal::bbox(const GetLaneByLongLatBBoxRequest* msg) {
  return *msg->_impl_.bbox_;
}
void GetLaneByLongLatBBoxRequest::clear_bbox() {
  if (GetArenaForAllocation() == nullptr && _impl_.bbox_ != nullptr) {
    delete _impl_.bbox_;
  }
  _impl_.bbox_ = nullptr;
}
GetLaneByLongLatBBoxRequest::GetLaneByLongLatBBoxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetLaneByLongLatBBoxRequest)
}
GetLaneByLongLatBBoxRequest::GetLaneByLongLatBBoxRequest(const GetLaneByLongLatBBoxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLaneByLongLatBBoxRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bbox_){nullptr}
    , decltype(_impl_.exclude_person_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bbox()) {
    _this->_impl_.bbox_ = new ::city::geo::v2::LongLatBBox(*from._impl_.bbox_);
  }
  _this->_impl_.exclude_person_ = from._impl_.exclude_person_;
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetLaneByLongLatBBoxRequest)
}

inline void GetLaneByLongLatBBoxRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bbox_){nullptr}
    , decltype(_impl_.exclude_person_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetLaneByLongLatBBoxRequest::~GetLaneByLongLatBBoxRequest() {
  // @@protoc_insertion_point(destructor:city.map.v2.GetLaneByLongLatBBoxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLaneByLongLatBBoxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.bbox_;
}

void GetLaneByLongLatBBoxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLaneByLongLatBBoxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.GetLaneByLongLatBBoxRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.bbox_ != nullptr) {
    delete _impl_.bbox_;
  }
  _impl_.bbox_ = nullptr;
  _impl_.exclude_person_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLaneByLongLatBBoxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.geo.v2.LongLatBBox bbox = 1 [json_name = "bbox"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bbox(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool exclude_person = 2 [json_name = "excludePerson"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.exclude_person_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLaneByLongLatBBoxRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.GetLaneByLongLatBBoxRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.geo.v2.LongLatBBox bbox = 1 [json_name = "bbox"];
  if (this->_internal_has_bbox()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::bbox(this),
        _Internal::bbox(this).GetCachedSize(), target, stream);
  }

  // bool exclude_person = 2 [json_name = "excludePerson"];
  if (this->_internal_exclude_person() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_exclude_person(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.GetLaneByLongLatBBoxRequest)
  return target;
}

size_t GetLaneByLongLatBBoxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.GetLaneByLongLatBBoxRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.geo.v2.LongLatBBox bbox = 1 [json_name = "bbox"];
  if (this->_internal_has_bbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bbox_);
  }

  // bool exclude_person = 2 [json_name = "excludePerson"];
  if (this->_internal_exclude_person() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLaneByLongLatBBoxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLaneByLongLatBBoxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLaneByLongLatBBoxRequest::GetClassData() const { return &_class_data_; }


void GetLaneByLongLatBBoxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLaneByLongLatBBoxRequest*>(&to_msg);
  auto& from = static_cast<const GetLaneByLongLatBBoxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.GetLaneByLongLatBBoxRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bbox()) {
    _this->_internal_mutable_bbox()->::city::geo::v2::LongLatBBox::MergeFrom(
        from._internal_bbox());
  }
  if (from._internal_exclude_person() != 0) {
    _this->_internal_set_exclude_person(from._internal_exclude_person());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLaneByLongLatBBoxRequest::CopyFrom(const GetLaneByLongLatBBoxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.GetLaneByLongLatBBoxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLaneByLongLatBBoxRequest::IsInitialized() const {
  return true;
}

void GetLaneByLongLatBBoxRequest::InternalSwap(GetLaneByLongLatBBoxRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLaneByLongLatBBoxRequest, _impl_.exclude_person_)
      + sizeof(GetLaneByLongLatBBoxRequest::_impl_.exclude_person_)
      - PROTOBUF_FIELD_OFFSET(GetLaneByLongLatBBoxRequest, _impl_.bbox_)>(
          reinterpret_cast<char*>(&_impl_.bbox_),
          reinterpret_cast<char*>(&other->_impl_.bbox_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLaneByLongLatBBoxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2flane_5fservice_2eproto[6]);
}

// ===================================================================

class GetLaneByLongLatBBoxResponse::_Internal {
 public:
};

void GetLaneByLongLatBBoxResponse::clear_states() {
  _impl_.states_.Clear();
}
GetLaneByLongLatBBoxResponse::GetLaneByLongLatBBoxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetLaneByLongLatBBoxResponse)
}
GetLaneByLongLatBBoxResponse::GetLaneByLongLatBBoxResponse(const GetLaneByLongLatBBoxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetLaneByLongLatBBoxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){from._impl_.states_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetLaneByLongLatBBoxResponse)
}

inline void GetLaneByLongLatBBoxResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetLaneByLongLatBBoxResponse::~GetLaneByLongLatBBoxResponse() {
  // @@protoc_insertion_point(destructor:city.map.v2.GetLaneByLongLatBBoxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetLaneByLongLatBBoxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.states_.~RepeatedPtrField();
}

void GetLaneByLongLatBBoxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetLaneByLongLatBBoxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.GetLaneByLongLatBBoxResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.states_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLaneByLongLatBBoxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .city.map.v2.LaneState states = 1 [json_name = "states"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLaneByLongLatBBoxResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.GetLaneByLongLatBBoxResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .city.map.v2.LaneState states = 1 [json_name = "states"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.GetLaneByLongLatBBoxResponse)
  return target;
}

size_t GetLaneByLongLatBBoxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.GetLaneByLongLatBBoxResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.map.v2.LaneState states = 1 [json_name = "states"];
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->_impl_.states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLaneByLongLatBBoxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetLaneByLongLatBBoxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLaneByLongLatBBoxResponse::GetClassData() const { return &_class_data_; }


void GetLaneByLongLatBBoxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetLaneByLongLatBBoxResponse*>(&to_msg);
  auto& from = static_cast<const GetLaneByLongLatBBoxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.GetLaneByLongLatBBoxResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.states_.MergeFrom(from._impl_.states_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLaneByLongLatBBoxResponse::CopyFrom(const GetLaneByLongLatBBoxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.GetLaneByLongLatBBoxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLaneByLongLatBBoxResponse::IsInitialized() const {
  return true;
}

void GetLaneByLongLatBBoxResponse::InternalSwap(GetLaneByLongLatBBoxResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.states_.InternalSwap(&other->_impl_.states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLaneByLongLatBBoxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2flane_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2flane_5fservice_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace map
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::map::v2::SetLaneMaxVRequest*
Arena::CreateMaybeMessage< ::city::map::v2::SetLaneMaxVRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::SetLaneMaxVRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::SetLaneMaxVResponse*
Arena::CreateMaybeMessage< ::city::map::v2::SetLaneMaxVResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::SetLaneMaxVResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::SetLaneRestrictionRequest*
Arena::CreateMaybeMessage< ::city::map::v2::SetLaneRestrictionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::SetLaneRestrictionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::SetLaneRestrictionResponse*
Arena::CreateMaybeMessage< ::city::map::v2::SetLaneRestrictionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::SetLaneRestrictionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::GetLaneRequest*
Arena::CreateMaybeMessage< ::city::map::v2::GetLaneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetLaneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::GetLaneResponse*
Arena::CreateMaybeMessage< ::city::map::v2::GetLaneResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetLaneResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::GetLaneByLongLatBBoxRequest*
Arena::CreateMaybeMessage< ::city::map::v2::GetLaneByLongLatBBoxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetLaneByLongLatBBoxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::GetLaneByLongLatBBoxResponse*
Arena::CreateMaybeMessage< ::city::map::v2::GetLaneByLongLatBBoxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetLaneByLongLatBBoxResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
