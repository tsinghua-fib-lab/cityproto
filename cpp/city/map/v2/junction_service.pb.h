// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/map/v2/junction_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2fjunction_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2fjunction_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "city/map/v2/lane_state.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fmap_2fv2_2fjunction_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fmap_2fv2_2fjunction_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fmap_2fv2_2fjunction_5fservice_2eproto;
namespace city {
namespace map {
namespace v2 {
class GetJunctionRequest;
struct GetJunctionRequestDefaultTypeInternal;
extern GetJunctionRequestDefaultTypeInternal _GetJunctionRequest_default_instance_;
class GetJunctionResponse;
struct GetJunctionResponseDefaultTypeInternal;
extern GetJunctionResponseDefaultTypeInternal _GetJunctionResponse_default_instance_;
class JunctionState;
struct JunctionStateDefaultTypeInternal;
extern JunctionStateDefaultTypeInternal _JunctionState_default_instance_;
}  // namespace v2
}  // namespace map
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::map::v2::GetJunctionRequest* Arena::CreateMaybeMessage<::city::map::v2::GetJunctionRequest>(Arena*);
template<> ::city::map::v2::GetJunctionResponse* Arena::CreateMaybeMessage<::city::map::v2::GetJunctionResponse>(Arena*);
template<> ::city::map::v2::JunctionState* Arena::CreateMaybeMessage<::city::map::v2::JunctionState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace map {
namespace v2 {

// ===================================================================

class GetJunctionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.map.v2.GetJunctionRequest) */ {
 public:
  inline GetJunctionRequest() : GetJunctionRequest(nullptr) {}
  ~GetJunctionRequest() override;
  explicit PROTOBUF_CONSTEXPR GetJunctionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetJunctionRequest(const GetJunctionRequest& from);
  GetJunctionRequest(GetJunctionRequest&& from) noexcept
    : GetJunctionRequest() {
    *this = ::std::move(from);
  }

  inline GetJunctionRequest& operator=(const GetJunctionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJunctionRequest& operator=(GetJunctionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetJunctionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetJunctionRequest* internal_default_instance() {
    return reinterpret_cast<const GetJunctionRequest*>(
               &_GetJunctionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetJunctionRequest& a, GetJunctionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetJunctionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetJunctionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetJunctionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetJunctionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetJunctionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetJunctionRequest& from) {
    GetJunctionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJunctionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.GetJunctionRequest";
  }
  protected:
  explicit GetJunctionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJunctionIdsFieldNumber = 1,
    kExcludeLaneFieldNumber = 2,
    kExcludePersonFieldNumber = 3,
  };
  // repeated int32 junction_ids = 1 [json_name = "junctionIds"];
  int junction_ids_size() const;
  private:
  int _internal_junction_ids_size() const;
  public:
  void clear_junction_ids();
  private:
  int32_t _internal_junction_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_junction_ids() const;
  void _internal_add_junction_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_junction_ids();
  public:
  int32_t junction_ids(int index) const;
  void set_junction_ids(int index, int32_t value);
  void add_junction_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      junction_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_junction_ids();

  // bool exclude_lane = 2 [json_name = "excludeLane"];
  void clear_exclude_lane();
  bool exclude_lane() const;
  void set_exclude_lane(bool value);
  private:
  bool _internal_exclude_lane() const;
  void _internal_set_exclude_lane(bool value);
  public:

  // bool exclude_person = 3 [json_name = "excludePerson"];
  void clear_exclude_person();
  bool exclude_person() const;
  void set_exclude_person(bool value);
  private:
  bool _internal_exclude_person() const;
  void _internal_set_exclude_person(bool value);
  public:

  // @@protoc_insertion_point(class_scope:city.map.v2.GetJunctionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > junction_ids_;
    mutable std::atomic<int> _junction_ids_cached_byte_size_;
    bool exclude_lane_;
    bool exclude_person_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fjunction_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetJunctionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.map.v2.GetJunctionResponse) */ {
 public:
  inline GetJunctionResponse() : GetJunctionResponse(nullptr) {}
  ~GetJunctionResponse() override;
  explicit PROTOBUF_CONSTEXPR GetJunctionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetJunctionResponse(const GetJunctionResponse& from);
  GetJunctionResponse(GetJunctionResponse&& from) noexcept
    : GetJunctionResponse() {
    *this = ::std::move(from);
  }

  inline GetJunctionResponse& operator=(const GetJunctionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJunctionResponse& operator=(GetJunctionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetJunctionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetJunctionResponse* internal_default_instance() {
    return reinterpret_cast<const GetJunctionResponse*>(
               &_GetJunctionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetJunctionResponse& a, GetJunctionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetJunctionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetJunctionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetJunctionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetJunctionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetJunctionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetJunctionResponse& from) {
    GetJunctionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJunctionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.GetJunctionResponse";
  }
  protected:
  explicit GetJunctionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
  };
  // repeated .city.map.v2.JunctionState states = 1 [json_name = "states"];
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  ::city::map::v2::JunctionState* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::JunctionState >*
      mutable_states();
  private:
  const ::city::map::v2::JunctionState& _internal_states(int index) const;
  ::city::map::v2::JunctionState* _internal_add_states();
  public:
  const ::city::map::v2::JunctionState& states(int index) const;
  ::city::map::v2::JunctionState* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::JunctionState >&
      states() const;

  // @@protoc_insertion_point(class_scope:city.map.v2.GetJunctionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::JunctionState > states_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fjunction_5fservice_2eproto;
};
// -------------------------------------------------------------------

class JunctionState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.map.v2.JunctionState) */ {
 public:
  inline JunctionState() : JunctionState(nullptr) {}
  ~JunctionState() override;
  explicit PROTOBUF_CONSTEXPR JunctionState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JunctionState(const JunctionState& from);
  JunctionState(JunctionState&& from) noexcept
    : JunctionState() {
    *this = ::std::move(from);
  }

  inline JunctionState& operator=(const JunctionState& from) {
    CopyFrom(from);
    return *this;
  }
  inline JunctionState& operator=(JunctionState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JunctionState& default_instance() {
    return *internal_default_instance();
  }
  static inline const JunctionState* internal_default_instance() {
    return reinterpret_cast<const JunctionState*>(
               &_JunctionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JunctionState& a, JunctionState& b) {
    a.Swap(&b);
  }
  inline void Swap(JunctionState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JunctionState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JunctionState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JunctionState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JunctionState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JunctionState& from) {
    JunctionState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JunctionState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.map.v2.JunctionState";
  }
  protected:
  explicit JunctionState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanesFieldNumber = 7,
    kPredecessorDrivingLanesFieldNumber = 8,
    kIdFieldNumber = 1,
    kInVehicleCntFieldNumber = 2,
    kOutVehicleCntFieldNumber = 3,
    kVehicleCntFieldNumber = 4,
    kCumInVehicleCntFieldNumber = 5,
    kCumOutVehicleCntFieldNumber = 6,
    kTotalQueuingTimeFieldNumber = 10,
    kTotalQueuingVehicleCntFieldNumber = 9,
    kMaxQueuingVehicleCntFieldNumber = 12,
    kAvgQueuingTimeFieldNumber = 11,
    kHasTrafficLightFieldNumber = 13,
  };
  // repeated .city.map.v2.LaneState lanes = 7 [json_name = "lanes"];
  int lanes_size() const;
  private:
  int _internal_lanes_size() const;
  public:
  void clear_lanes();
  ::city::map::v2::LaneState* mutable_lanes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >*
      mutable_lanes();
  private:
  const ::city::map::v2::LaneState& _internal_lanes(int index) const;
  ::city::map::v2::LaneState* _internal_add_lanes();
  public:
  const ::city::map::v2::LaneState& lanes(int index) const;
  ::city::map::v2::LaneState* add_lanes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >&
      lanes() const;

  // repeated .city.map.v2.LaneState predecessor_driving_lanes = 8 [json_name = "predecessorDrivingLanes"];
  int predecessor_driving_lanes_size() const;
  private:
  int _internal_predecessor_driving_lanes_size() const;
  public:
  void clear_predecessor_driving_lanes();
  ::city::map::v2::LaneState* mutable_predecessor_driving_lanes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >*
      mutable_predecessor_driving_lanes();
  private:
  const ::city::map::v2::LaneState& _internal_predecessor_driving_lanes(int index) const;
  ::city::map::v2::LaneState* _internal_add_predecessor_driving_lanes();
  public:
  const ::city::map::v2::LaneState& predecessor_driving_lanes(int index) const;
  ::city::map::v2::LaneState* add_predecessor_driving_lanes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >&
      predecessor_driving_lanes() const;

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 in_vehicle_cnt = 2 [json_name = "inVehicleCnt"];
  void clear_in_vehicle_cnt();
  int32_t in_vehicle_cnt() const;
  void set_in_vehicle_cnt(int32_t value);
  private:
  int32_t _internal_in_vehicle_cnt() const;
  void _internal_set_in_vehicle_cnt(int32_t value);
  public:

  // int32 out_vehicle_cnt = 3 [json_name = "outVehicleCnt"];
  void clear_out_vehicle_cnt();
  int32_t out_vehicle_cnt() const;
  void set_out_vehicle_cnt(int32_t value);
  private:
  int32_t _internal_out_vehicle_cnt() const;
  void _internal_set_out_vehicle_cnt(int32_t value);
  public:

  // int32 vehicle_cnt = 4 [json_name = "vehicleCnt"];
  void clear_vehicle_cnt();
  int32_t vehicle_cnt() const;
  void set_vehicle_cnt(int32_t value);
  private:
  int32_t _internal_vehicle_cnt() const;
  void _internal_set_vehicle_cnt(int32_t value);
  public:

  // int32 cum_in_vehicle_cnt = 5 [json_name = "cumInVehicleCnt"];
  void clear_cum_in_vehicle_cnt();
  int32_t cum_in_vehicle_cnt() const;
  void set_cum_in_vehicle_cnt(int32_t value);
  private:
  int32_t _internal_cum_in_vehicle_cnt() const;
  void _internal_set_cum_in_vehicle_cnt(int32_t value);
  public:

  // int32 cum_out_vehicle_cnt = 6 [json_name = "cumOutVehicleCnt"];
  void clear_cum_out_vehicle_cnt();
  int32_t cum_out_vehicle_cnt() const;
  void set_cum_out_vehicle_cnt(int32_t value);
  private:
  int32_t _internal_cum_out_vehicle_cnt() const;
  void _internal_set_cum_out_vehicle_cnt(int32_t value);
  public:

  // double total_queuing_time = 10 [json_name = "totalQueuingTime"];
  void clear_total_queuing_time();
  double total_queuing_time() const;
  void set_total_queuing_time(double value);
  private:
  double _internal_total_queuing_time() const;
  void _internal_set_total_queuing_time(double value);
  public:

  // int32 total_queuing_vehicle_cnt = 9 [json_name = "totalQueuingVehicleCnt"];
  void clear_total_queuing_vehicle_cnt();
  int32_t total_queuing_vehicle_cnt() const;
  void set_total_queuing_vehicle_cnt(int32_t value);
  private:
  int32_t _internal_total_queuing_vehicle_cnt() const;
  void _internal_set_total_queuing_vehicle_cnt(int32_t value);
  public:

  // int32 max_queuing_vehicle_cnt = 12 [json_name = "maxQueuingVehicleCnt"];
  void clear_max_queuing_vehicle_cnt();
  int32_t max_queuing_vehicle_cnt() const;
  void set_max_queuing_vehicle_cnt(int32_t value);
  private:
  int32_t _internal_max_queuing_vehicle_cnt() const;
  void _internal_set_max_queuing_vehicle_cnt(int32_t value);
  public:

  // double avg_queuing_time = 11 [json_name = "avgQueuingTime"];
  void clear_avg_queuing_time();
  double avg_queuing_time() const;
  void set_avg_queuing_time(double value);
  private:
  double _internal_avg_queuing_time() const;
  void _internal_set_avg_queuing_time(double value);
  public:

  // bool has_traffic_light = 13 [json_name = "hasTrafficLight"];
  void clear_has_traffic_light();
  bool has_traffic_light() const;
  void set_has_traffic_light(bool value);
  private:
  bool _internal_has_traffic_light() const;
  void _internal_set_has_traffic_light(bool value);
  public:

  // @@protoc_insertion_point(class_scope:city.map.v2.JunctionState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState > lanes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState > predecessor_driving_lanes_;
    int32_t id_;
    int32_t in_vehicle_cnt_;
    int32_t out_vehicle_cnt_;
    int32_t vehicle_cnt_;
    int32_t cum_in_vehicle_cnt_;
    int32_t cum_out_vehicle_cnt_;
    double total_queuing_time_;
    int32_t total_queuing_vehicle_cnt_;
    int32_t max_queuing_vehicle_cnt_;
    double avg_queuing_time_;
    bool has_traffic_light_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fjunction_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetJunctionRequest

// repeated int32 junction_ids = 1 [json_name = "junctionIds"];
inline int GetJunctionRequest::_internal_junction_ids_size() const {
  return _impl_.junction_ids_.size();
}
inline int GetJunctionRequest::junction_ids_size() const {
  return _internal_junction_ids_size();
}
inline void GetJunctionRequest::clear_junction_ids() {
  _impl_.junction_ids_.Clear();
}
inline int32_t GetJunctionRequest::_internal_junction_ids(int index) const {
  return _impl_.junction_ids_.Get(index);
}
inline int32_t GetJunctionRequest::junction_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetJunctionRequest.junction_ids)
  return _internal_junction_ids(index);
}
inline void GetJunctionRequest::set_junction_ids(int index, int32_t value) {
  _impl_.junction_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.map.v2.GetJunctionRequest.junction_ids)
}
inline void GetJunctionRequest::_internal_add_junction_ids(int32_t value) {
  _impl_.junction_ids_.Add(value);
}
inline void GetJunctionRequest::add_junction_ids(int32_t value) {
  _internal_add_junction_ids(value);
  // @@protoc_insertion_point(field_add:city.map.v2.GetJunctionRequest.junction_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetJunctionRequest::_internal_junction_ids() const {
  return _impl_.junction_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetJunctionRequest::junction_ids() const {
  // @@protoc_insertion_point(field_list:city.map.v2.GetJunctionRequest.junction_ids)
  return _internal_junction_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetJunctionRequest::_internal_mutable_junction_ids() {
  return &_impl_.junction_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetJunctionRequest::mutable_junction_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.GetJunctionRequest.junction_ids)
  return _internal_mutable_junction_ids();
}

// bool exclude_lane = 2 [json_name = "excludeLane"];
inline void GetJunctionRequest::clear_exclude_lane() {
  _impl_.exclude_lane_ = false;
}
inline bool GetJunctionRequest::_internal_exclude_lane() const {
  return _impl_.exclude_lane_;
}
inline bool GetJunctionRequest::exclude_lane() const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetJunctionRequest.exclude_lane)
  return _internal_exclude_lane();
}
inline void GetJunctionRequest::_internal_set_exclude_lane(bool value) {
  
  _impl_.exclude_lane_ = value;
}
inline void GetJunctionRequest::set_exclude_lane(bool value) {
  _internal_set_exclude_lane(value);
  // @@protoc_insertion_point(field_set:city.map.v2.GetJunctionRequest.exclude_lane)
}

// bool exclude_person = 3 [json_name = "excludePerson"];
inline void GetJunctionRequest::clear_exclude_person() {
  _impl_.exclude_person_ = false;
}
inline bool GetJunctionRequest::_internal_exclude_person() const {
  return _impl_.exclude_person_;
}
inline bool GetJunctionRequest::exclude_person() const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetJunctionRequest.exclude_person)
  return _internal_exclude_person();
}
inline void GetJunctionRequest::_internal_set_exclude_person(bool value) {
  
  _impl_.exclude_person_ = value;
}
inline void GetJunctionRequest::set_exclude_person(bool value) {
  _internal_set_exclude_person(value);
  // @@protoc_insertion_point(field_set:city.map.v2.GetJunctionRequest.exclude_person)
}

// -------------------------------------------------------------------

// GetJunctionResponse

// repeated .city.map.v2.JunctionState states = 1 [json_name = "states"];
inline int GetJunctionResponse::_internal_states_size() const {
  return _impl_.states_.size();
}
inline int GetJunctionResponse::states_size() const {
  return _internal_states_size();
}
inline void GetJunctionResponse::clear_states() {
  _impl_.states_.Clear();
}
inline ::city::map::v2::JunctionState* GetJunctionResponse::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.GetJunctionResponse.states)
  return _impl_.states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::JunctionState >*
GetJunctionResponse::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.GetJunctionResponse.states)
  return &_impl_.states_;
}
inline const ::city::map::v2::JunctionState& GetJunctionResponse::_internal_states(int index) const {
  return _impl_.states_.Get(index);
}
inline const ::city::map::v2::JunctionState& GetJunctionResponse::states(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetJunctionResponse.states)
  return _internal_states(index);
}
inline ::city::map::v2::JunctionState* GetJunctionResponse::_internal_add_states() {
  return _impl_.states_.Add();
}
inline ::city::map::v2::JunctionState* GetJunctionResponse::add_states() {
  ::city::map::v2::JunctionState* _add = _internal_add_states();
  // @@protoc_insertion_point(field_add:city.map.v2.GetJunctionResponse.states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::JunctionState >&
GetJunctionResponse::states() const {
  // @@protoc_insertion_point(field_list:city.map.v2.GetJunctionResponse.states)
  return _impl_.states_;
}

// -------------------------------------------------------------------

// JunctionState

// int32 id = 1 [json_name = "id"];
inline void JunctionState::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t JunctionState::_internal_id() const {
  return _impl_.id_;
}
inline int32_t JunctionState::id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionState.id)
  return _internal_id();
}
inline void JunctionState::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void JunctionState::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionState.id)
}

// int32 in_vehicle_cnt = 2 [json_name = "inVehicleCnt"];
inline void JunctionState::clear_in_vehicle_cnt() {
  _impl_.in_vehicle_cnt_ = 0;
}
inline int32_t JunctionState::_internal_in_vehicle_cnt() const {
  return _impl_.in_vehicle_cnt_;
}
inline int32_t JunctionState::in_vehicle_cnt() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionState.in_vehicle_cnt)
  return _internal_in_vehicle_cnt();
}
inline void JunctionState::_internal_set_in_vehicle_cnt(int32_t value) {
  
  _impl_.in_vehicle_cnt_ = value;
}
inline void JunctionState::set_in_vehicle_cnt(int32_t value) {
  _internal_set_in_vehicle_cnt(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionState.in_vehicle_cnt)
}

// int32 out_vehicle_cnt = 3 [json_name = "outVehicleCnt"];
inline void JunctionState::clear_out_vehicle_cnt() {
  _impl_.out_vehicle_cnt_ = 0;
}
inline int32_t JunctionState::_internal_out_vehicle_cnt() const {
  return _impl_.out_vehicle_cnt_;
}
inline int32_t JunctionState::out_vehicle_cnt() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionState.out_vehicle_cnt)
  return _internal_out_vehicle_cnt();
}
inline void JunctionState::_internal_set_out_vehicle_cnt(int32_t value) {
  
  _impl_.out_vehicle_cnt_ = value;
}
inline void JunctionState::set_out_vehicle_cnt(int32_t value) {
  _internal_set_out_vehicle_cnt(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionState.out_vehicle_cnt)
}

// int32 vehicle_cnt = 4 [json_name = "vehicleCnt"];
inline void JunctionState::clear_vehicle_cnt() {
  _impl_.vehicle_cnt_ = 0;
}
inline int32_t JunctionState::_internal_vehicle_cnt() const {
  return _impl_.vehicle_cnt_;
}
inline int32_t JunctionState::vehicle_cnt() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionState.vehicle_cnt)
  return _internal_vehicle_cnt();
}
inline void JunctionState::_internal_set_vehicle_cnt(int32_t value) {
  
  _impl_.vehicle_cnt_ = value;
}
inline void JunctionState::set_vehicle_cnt(int32_t value) {
  _internal_set_vehicle_cnt(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionState.vehicle_cnt)
}

// int32 cum_in_vehicle_cnt = 5 [json_name = "cumInVehicleCnt"];
inline void JunctionState::clear_cum_in_vehicle_cnt() {
  _impl_.cum_in_vehicle_cnt_ = 0;
}
inline int32_t JunctionState::_internal_cum_in_vehicle_cnt() const {
  return _impl_.cum_in_vehicle_cnt_;
}
inline int32_t JunctionState::cum_in_vehicle_cnt() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionState.cum_in_vehicle_cnt)
  return _internal_cum_in_vehicle_cnt();
}
inline void JunctionState::_internal_set_cum_in_vehicle_cnt(int32_t value) {
  
  _impl_.cum_in_vehicle_cnt_ = value;
}
inline void JunctionState::set_cum_in_vehicle_cnt(int32_t value) {
  _internal_set_cum_in_vehicle_cnt(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionState.cum_in_vehicle_cnt)
}

// int32 cum_out_vehicle_cnt = 6 [json_name = "cumOutVehicleCnt"];
inline void JunctionState::clear_cum_out_vehicle_cnt() {
  _impl_.cum_out_vehicle_cnt_ = 0;
}
inline int32_t JunctionState::_internal_cum_out_vehicle_cnt() const {
  return _impl_.cum_out_vehicle_cnt_;
}
inline int32_t JunctionState::cum_out_vehicle_cnt() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionState.cum_out_vehicle_cnt)
  return _internal_cum_out_vehicle_cnt();
}
inline void JunctionState::_internal_set_cum_out_vehicle_cnt(int32_t value) {
  
  _impl_.cum_out_vehicle_cnt_ = value;
}
inline void JunctionState::set_cum_out_vehicle_cnt(int32_t value) {
  _internal_set_cum_out_vehicle_cnt(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionState.cum_out_vehicle_cnt)
}

// repeated .city.map.v2.LaneState lanes = 7 [json_name = "lanes"];
inline int JunctionState::_internal_lanes_size() const {
  return _impl_.lanes_.size();
}
inline int JunctionState::lanes_size() const {
  return _internal_lanes_size();
}
inline ::city::map::v2::LaneState* JunctionState::mutable_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.JunctionState.lanes)
  return _impl_.lanes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >*
JunctionState::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.JunctionState.lanes)
  return &_impl_.lanes_;
}
inline const ::city::map::v2::LaneState& JunctionState::_internal_lanes(int index) const {
  return _impl_.lanes_.Get(index);
}
inline const ::city::map::v2::LaneState& JunctionState::lanes(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionState.lanes)
  return _internal_lanes(index);
}
inline ::city::map::v2::LaneState* JunctionState::_internal_add_lanes() {
  return _impl_.lanes_.Add();
}
inline ::city::map::v2::LaneState* JunctionState::add_lanes() {
  ::city::map::v2::LaneState* _add = _internal_add_lanes();
  // @@protoc_insertion_point(field_add:city.map.v2.JunctionState.lanes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >&
JunctionState::lanes() const {
  // @@protoc_insertion_point(field_list:city.map.v2.JunctionState.lanes)
  return _impl_.lanes_;
}

// repeated .city.map.v2.LaneState predecessor_driving_lanes = 8 [json_name = "predecessorDrivingLanes"];
inline int JunctionState::_internal_predecessor_driving_lanes_size() const {
  return _impl_.predecessor_driving_lanes_.size();
}
inline int JunctionState::predecessor_driving_lanes_size() const {
  return _internal_predecessor_driving_lanes_size();
}
inline ::city::map::v2::LaneState* JunctionState::mutable_predecessor_driving_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.JunctionState.predecessor_driving_lanes)
  return _impl_.predecessor_driving_lanes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >*
JunctionState::mutable_predecessor_driving_lanes() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.JunctionState.predecessor_driving_lanes)
  return &_impl_.predecessor_driving_lanes_;
}
inline const ::city::map::v2::LaneState& JunctionState::_internal_predecessor_driving_lanes(int index) const {
  return _impl_.predecessor_driving_lanes_.Get(index);
}
inline const ::city::map::v2::LaneState& JunctionState::predecessor_driving_lanes(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionState.predecessor_driving_lanes)
  return _internal_predecessor_driving_lanes(index);
}
inline ::city::map::v2::LaneState* JunctionState::_internal_add_predecessor_driving_lanes() {
  return _impl_.predecessor_driving_lanes_.Add();
}
inline ::city::map::v2::LaneState* JunctionState::add_predecessor_driving_lanes() {
  ::city::map::v2::LaneState* _add = _internal_add_predecessor_driving_lanes();
  // @@protoc_insertion_point(field_add:city.map.v2.JunctionState.predecessor_driving_lanes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::map::v2::LaneState >&
JunctionState::predecessor_driving_lanes() const {
  // @@protoc_insertion_point(field_list:city.map.v2.JunctionState.predecessor_driving_lanes)
  return _impl_.predecessor_driving_lanes_;
}

// int32 total_queuing_vehicle_cnt = 9 [json_name = "totalQueuingVehicleCnt"];
inline void JunctionState::clear_total_queuing_vehicle_cnt() {
  _impl_.total_queuing_vehicle_cnt_ = 0;
}
inline int32_t JunctionState::_internal_total_queuing_vehicle_cnt() const {
  return _impl_.total_queuing_vehicle_cnt_;
}
inline int32_t JunctionState::total_queuing_vehicle_cnt() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionState.total_queuing_vehicle_cnt)
  return _internal_total_queuing_vehicle_cnt();
}
inline void JunctionState::_internal_set_total_queuing_vehicle_cnt(int32_t value) {
  
  _impl_.total_queuing_vehicle_cnt_ = value;
}
inline void JunctionState::set_total_queuing_vehicle_cnt(int32_t value) {
  _internal_set_total_queuing_vehicle_cnt(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionState.total_queuing_vehicle_cnt)
}

// double total_queuing_time = 10 [json_name = "totalQueuingTime"];
inline void JunctionState::clear_total_queuing_time() {
  _impl_.total_queuing_time_ = 0;
}
inline double JunctionState::_internal_total_queuing_time() const {
  return _impl_.total_queuing_time_;
}
inline double JunctionState::total_queuing_time() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionState.total_queuing_time)
  return _internal_total_queuing_time();
}
inline void JunctionState::_internal_set_total_queuing_time(double value) {
  
  _impl_.total_queuing_time_ = value;
}
inline void JunctionState::set_total_queuing_time(double value) {
  _internal_set_total_queuing_time(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionState.total_queuing_time)
}

// double avg_queuing_time = 11 [json_name = "avgQueuingTime"];
inline void JunctionState::clear_avg_queuing_time() {
  _impl_.avg_queuing_time_ = 0;
}
inline double JunctionState::_internal_avg_queuing_time() const {
  return _impl_.avg_queuing_time_;
}
inline double JunctionState::avg_queuing_time() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionState.avg_queuing_time)
  return _internal_avg_queuing_time();
}
inline void JunctionState::_internal_set_avg_queuing_time(double value) {
  
  _impl_.avg_queuing_time_ = value;
}
inline void JunctionState::set_avg_queuing_time(double value) {
  _internal_set_avg_queuing_time(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionState.avg_queuing_time)
}

// int32 max_queuing_vehicle_cnt = 12 [json_name = "maxQueuingVehicleCnt"];
inline void JunctionState::clear_max_queuing_vehicle_cnt() {
  _impl_.max_queuing_vehicle_cnt_ = 0;
}
inline int32_t JunctionState::_internal_max_queuing_vehicle_cnt() const {
  return _impl_.max_queuing_vehicle_cnt_;
}
inline int32_t JunctionState::max_queuing_vehicle_cnt() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionState.max_queuing_vehicle_cnt)
  return _internal_max_queuing_vehicle_cnt();
}
inline void JunctionState::_internal_set_max_queuing_vehicle_cnt(int32_t value) {
  
  _impl_.max_queuing_vehicle_cnt_ = value;
}
inline void JunctionState::set_max_queuing_vehicle_cnt(int32_t value) {
  _internal_set_max_queuing_vehicle_cnt(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionState.max_queuing_vehicle_cnt)
}

// bool has_traffic_light = 13 [json_name = "hasTrafficLight"];
inline void JunctionState::clear_has_traffic_light() {
  _impl_.has_traffic_light_ = false;
}
inline bool JunctionState::_internal_has_traffic_light() const {
  return _impl_.has_traffic_light_;
}
inline bool JunctionState::has_traffic_light() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionState.has_traffic_light)
  return _internal_has_traffic_light();
}
inline void JunctionState::_internal_set_has_traffic_light(bool value) {
  
  _impl_.has_traffic_light_ = value;
}
inline void JunctionState::set_has_traffic_light(bool value) {
  _internal_set_has_traffic_light(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionState.has_traffic_light)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace map
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2fjunction_5fservice_2eproto
