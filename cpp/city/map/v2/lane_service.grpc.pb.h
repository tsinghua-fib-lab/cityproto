// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/map/v2/lane_service.proto
#ifndef GRPC_city_2fmap_2fv2_2flane_5fservice_2eproto__INCLUDED
#define GRPC_city_2fmap_2fv2_2flane_5fservice_2eproto__INCLUDED

#include "city/map/v2/lane_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace city {
namespace map {
namespace v2 {

class LaneService final {
 public:
  static constexpr char const* service_full_name() {
    return "city.map.v2.LaneService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 设置Lane的最大速度（限速）
    // Set Lane's maximum speed (speed limit)
    virtual ::grpc::Status SetLaneMaxV(::grpc::ClientContext* context, const ::city::map::v2::SetLaneMaxVRequest& request, ::city::map::v2::SetLaneMaxVResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetLaneMaxVResponse>> AsyncSetLaneMaxV(::grpc::ClientContext* context, const ::city::map::v2::SetLaneMaxVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetLaneMaxVResponse>>(AsyncSetLaneMaxVRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetLaneMaxVResponse>> PrepareAsyncSetLaneMaxV(::grpc::ClientContext* context, const ::city::map::v2::SetLaneMaxVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetLaneMaxVResponse>>(PrepareAsyncSetLaneMaxVRaw(context, request, cq));
    }
    // 获取Lane的信息
    // Get Lane information
    virtual ::grpc::Status GetLane(::grpc::ClientContext* context, const ::city::map::v2::GetLaneRequest& request, ::city::map::v2::GetLaneResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetLaneResponse>> AsyncGetLane(::grpc::ClientContext* context, const ::city::map::v2::GetLaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetLaneResponse>>(AsyncGetLaneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetLaneResponse>> PrepareAsyncGetLane(::grpc::ClientContext* context, const ::city::map::v2::GetLaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetLaneResponse>>(PrepareAsyncGetLaneRaw(context, request, cq));
    }
    // 获取特定区域内的Lane的信息
    // Get Lane information in a specific region
    virtual ::grpc::Status GetLaneByLongLatBBox(::grpc::ClientContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest& request, ::city::map::v2::GetLaneByLongLatBBoxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetLaneByLongLatBBoxResponse>> AsyncGetLaneByLongLatBBox(::grpc::ClientContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetLaneByLongLatBBoxResponse>>(AsyncGetLaneByLongLatBBoxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetLaneByLongLatBBoxResponse>> PrepareAsyncGetLaneByLongLatBBox(::grpc::ClientContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetLaneByLongLatBBoxResponse>>(PrepareAsyncGetLaneByLongLatBBoxRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 设置Lane的最大速度（限速）
      // Set Lane's maximum speed (speed limit)
      virtual void SetLaneMaxV(::grpc::ClientContext* context, const ::city::map::v2::SetLaneMaxVRequest* request, ::city::map::v2::SetLaneMaxVResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetLaneMaxV(::grpc::ClientContext* context, const ::city::map::v2::SetLaneMaxVRequest* request, ::city::map::v2::SetLaneMaxVResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 获取Lane的信息
      // Get Lane information
      virtual void GetLane(::grpc::ClientContext* context, const ::city::map::v2::GetLaneRequest* request, ::city::map::v2::GetLaneResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLane(::grpc::ClientContext* context, const ::city::map::v2::GetLaneRequest* request, ::city::map::v2::GetLaneResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 获取特定区域内的Lane的信息
      // Get Lane information in a specific region
      virtual void GetLaneByLongLatBBox(::grpc::ClientContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest* request, ::city::map::v2::GetLaneByLongLatBBoxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLaneByLongLatBBox(::grpc::ClientContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest* request, ::city::map::v2::GetLaneByLongLatBBoxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetLaneMaxVResponse>* AsyncSetLaneMaxVRaw(::grpc::ClientContext* context, const ::city::map::v2::SetLaneMaxVRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetLaneMaxVResponse>* PrepareAsyncSetLaneMaxVRaw(::grpc::ClientContext* context, const ::city::map::v2::SetLaneMaxVRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetLaneResponse>* AsyncGetLaneRaw(::grpc::ClientContext* context, const ::city::map::v2::GetLaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetLaneResponse>* PrepareAsyncGetLaneRaw(::grpc::ClientContext* context, const ::city::map::v2::GetLaneRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetLaneByLongLatBBoxResponse>* AsyncGetLaneByLongLatBBoxRaw(::grpc::ClientContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetLaneByLongLatBBoxResponse>* PrepareAsyncGetLaneByLongLatBBoxRaw(::grpc::ClientContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetLaneMaxV(::grpc::ClientContext* context, const ::city::map::v2::SetLaneMaxVRequest& request, ::city::map::v2::SetLaneMaxVResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetLaneMaxVResponse>> AsyncSetLaneMaxV(::grpc::ClientContext* context, const ::city::map::v2::SetLaneMaxVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetLaneMaxVResponse>>(AsyncSetLaneMaxVRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetLaneMaxVResponse>> PrepareAsyncSetLaneMaxV(::grpc::ClientContext* context, const ::city::map::v2::SetLaneMaxVRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetLaneMaxVResponse>>(PrepareAsyncSetLaneMaxVRaw(context, request, cq));
    }
    ::grpc::Status GetLane(::grpc::ClientContext* context, const ::city::map::v2::GetLaneRequest& request, ::city::map::v2::GetLaneResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetLaneResponse>> AsyncGetLane(::grpc::ClientContext* context, const ::city::map::v2::GetLaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetLaneResponse>>(AsyncGetLaneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetLaneResponse>> PrepareAsyncGetLane(::grpc::ClientContext* context, const ::city::map::v2::GetLaneRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetLaneResponse>>(PrepareAsyncGetLaneRaw(context, request, cq));
    }
    ::grpc::Status GetLaneByLongLatBBox(::grpc::ClientContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest& request, ::city::map::v2::GetLaneByLongLatBBoxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetLaneByLongLatBBoxResponse>> AsyncGetLaneByLongLatBBox(::grpc::ClientContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetLaneByLongLatBBoxResponse>>(AsyncGetLaneByLongLatBBoxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetLaneByLongLatBBoxResponse>> PrepareAsyncGetLaneByLongLatBBox(::grpc::ClientContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetLaneByLongLatBBoxResponse>>(PrepareAsyncGetLaneByLongLatBBoxRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetLaneMaxV(::grpc::ClientContext* context, const ::city::map::v2::SetLaneMaxVRequest* request, ::city::map::v2::SetLaneMaxVResponse* response, std::function<void(::grpc::Status)>) override;
      void SetLaneMaxV(::grpc::ClientContext* context, const ::city::map::v2::SetLaneMaxVRequest* request, ::city::map::v2::SetLaneMaxVResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLane(::grpc::ClientContext* context, const ::city::map::v2::GetLaneRequest* request, ::city::map::v2::GetLaneResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLane(::grpc::ClientContext* context, const ::city::map::v2::GetLaneRequest* request, ::city::map::v2::GetLaneResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLaneByLongLatBBox(::grpc::ClientContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest* request, ::city::map::v2::GetLaneByLongLatBBoxResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLaneByLongLatBBox(::grpc::ClientContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest* request, ::city::map::v2::GetLaneByLongLatBBoxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetLaneMaxVResponse>* AsyncSetLaneMaxVRaw(::grpc::ClientContext* context, const ::city::map::v2::SetLaneMaxVRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetLaneMaxVResponse>* PrepareAsyncSetLaneMaxVRaw(::grpc::ClientContext* context, const ::city::map::v2::SetLaneMaxVRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetLaneResponse>* AsyncGetLaneRaw(::grpc::ClientContext* context, const ::city::map::v2::GetLaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetLaneResponse>* PrepareAsyncGetLaneRaw(::grpc::ClientContext* context, const ::city::map::v2::GetLaneRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetLaneByLongLatBBoxResponse>* AsyncGetLaneByLongLatBBoxRaw(::grpc::ClientContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetLaneByLongLatBBoxResponse>* PrepareAsyncGetLaneByLongLatBBoxRaw(::grpc::ClientContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetLaneMaxV_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLane_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLaneByLongLatBBox_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 设置Lane的最大速度（限速）
    // Set Lane's maximum speed (speed limit)
    virtual ::grpc::Status SetLaneMaxV(::grpc::ServerContext* context, const ::city::map::v2::SetLaneMaxVRequest* request, ::city::map::v2::SetLaneMaxVResponse* response);
    // 获取Lane的信息
    // Get Lane information
    virtual ::grpc::Status GetLane(::grpc::ServerContext* context, const ::city::map::v2::GetLaneRequest* request, ::city::map::v2::GetLaneResponse* response);
    // 获取特定区域内的Lane的信息
    // Get Lane information in a specific region
    virtual ::grpc::Status GetLaneByLongLatBBox(::grpc::ServerContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest* request, ::city::map::v2::GetLaneByLongLatBBoxResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetLaneMaxV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetLaneMaxV() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetLaneMaxV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLaneMaxV(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetLaneMaxVRequest* /*request*/, ::city::map::v2::SetLaneMaxVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLaneMaxV(::grpc::ServerContext* context, ::city::map::v2::SetLaneMaxVRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::map::v2::SetLaneMaxVResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLane : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLane() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetLane() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLane(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetLaneRequest* /*request*/, ::city::map::v2::GetLaneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLane(::grpc::ServerContext* context, ::city::map::v2::GetLaneRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::map::v2::GetLaneResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLaneByLongLatBBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLaneByLongLatBBox() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetLaneByLongLatBBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLaneByLongLatBBox(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetLaneByLongLatBBoxRequest* /*request*/, ::city::map::v2::GetLaneByLongLatBBoxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLaneByLongLatBBox(::grpc::ServerContext* context, ::city::map::v2::GetLaneByLongLatBBoxRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::map::v2::GetLaneByLongLatBBoxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetLaneMaxV<WithAsyncMethod_GetLane<WithAsyncMethod_GetLaneByLongLatBBox<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetLaneMaxV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetLaneMaxV() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::city::map::v2::SetLaneMaxVRequest, ::city::map::v2::SetLaneMaxVResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::map::v2::SetLaneMaxVRequest* request, ::city::map::v2::SetLaneMaxVResponse* response) { return this->SetLaneMaxV(context, request, response); }));}
    void SetMessageAllocatorFor_SetLaneMaxV(
        ::grpc::MessageAllocator< ::city::map::v2::SetLaneMaxVRequest, ::city::map::v2::SetLaneMaxVResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::map::v2::SetLaneMaxVRequest, ::city::map::v2::SetLaneMaxVResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetLaneMaxV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLaneMaxV(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetLaneMaxVRequest* /*request*/, ::city::map::v2::SetLaneMaxVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLaneMaxV(
      ::grpc::CallbackServerContext* /*context*/, const ::city::map::v2::SetLaneMaxVRequest* /*request*/, ::city::map::v2::SetLaneMaxVResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLane : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLane() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::city::map::v2::GetLaneRequest, ::city::map::v2::GetLaneResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::map::v2::GetLaneRequest* request, ::city::map::v2::GetLaneResponse* response) { return this->GetLane(context, request, response); }));}
    void SetMessageAllocatorFor_GetLane(
        ::grpc::MessageAllocator< ::city::map::v2::GetLaneRequest, ::city::map::v2::GetLaneResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::map::v2::GetLaneRequest, ::city::map::v2::GetLaneResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLane() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLane(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetLaneRequest* /*request*/, ::city::map::v2::GetLaneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLane(
      ::grpc::CallbackServerContext* /*context*/, const ::city::map::v2::GetLaneRequest* /*request*/, ::city::map::v2::GetLaneResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLaneByLongLatBBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLaneByLongLatBBox() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::city::map::v2::GetLaneByLongLatBBoxRequest, ::city::map::v2::GetLaneByLongLatBBoxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::map::v2::GetLaneByLongLatBBoxRequest* request, ::city::map::v2::GetLaneByLongLatBBoxResponse* response) { return this->GetLaneByLongLatBBox(context, request, response); }));}
    void SetMessageAllocatorFor_GetLaneByLongLatBBox(
        ::grpc::MessageAllocator< ::city::map::v2::GetLaneByLongLatBBoxRequest, ::city::map::v2::GetLaneByLongLatBBoxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::map::v2::GetLaneByLongLatBBoxRequest, ::city::map::v2::GetLaneByLongLatBBoxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLaneByLongLatBBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLaneByLongLatBBox(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetLaneByLongLatBBoxRequest* /*request*/, ::city::map::v2::GetLaneByLongLatBBoxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLaneByLongLatBBox(
      ::grpc::CallbackServerContext* /*context*/, const ::city::map::v2::GetLaneByLongLatBBoxRequest* /*request*/, ::city::map::v2::GetLaneByLongLatBBoxResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetLaneMaxV<WithCallbackMethod_GetLane<WithCallbackMethod_GetLaneByLongLatBBox<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetLaneMaxV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetLaneMaxV() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetLaneMaxV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLaneMaxV(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetLaneMaxVRequest* /*request*/, ::city::map::v2::SetLaneMaxVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLane : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLane() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetLane() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLane(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetLaneRequest* /*request*/, ::city::map::v2::GetLaneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLaneByLongLatBBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLaneByLongLatBBox() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetLaneByLongLatBBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLaneByLongLatBBox(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetLaneByLongLatBBoxRequest* /*request*/, ::city::map::v2::GetLaneByLongLatBBoxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetLaneMaxV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetLaneMaxV() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetLaneMaxV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLaneMaxV(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetLaneMaxVRequest* /*request*/, ::city::map::v2::SetLaneMaxVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLaneMaxV(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLane : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLane() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetLane() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLane(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetLaneRequest* /*request*/, ::city::map::v2::GetLaneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLane(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLaneByLongLatBBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLaneByLongLatBBox() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetLaneByLongLatBBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLaneByLongLatBBox(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetLaneByLongLatBBoxRequest* /*request*/, ::city::map::v2::GetLaneByLongLatBBoxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLaneByLongLatBBox(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetLaneMaxV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetLaneMaxV() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetLaneMaxV(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetLaneMaxV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLaneMaxV(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetLaneMaxVRequest* /*request*/, ::city::map::v2::SetLaneMaxVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLaneMaxV(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLane : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLane() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLane(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLane() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLane(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetLaneRequest* /*request*/, ::city::map::v2::GetLaneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLane(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLaneByLongLatBBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLaneByLongLatBBox() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLaneByLongLatBBox(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLaneByLongLatBBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLaneByLongLatBBox(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetLaneByLongLatBBoxRequest* /*request*/, ::city::map::v2::GetLaneByLongLatBBoxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLaneByLongLatBBox(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetLaneMaxV : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetLaneMaxV() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::map::v2::SetLaneMaxVRequest, ::city::map::v2::SetLaneMaxVResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::map::v2::SetLaneMaxVRequest, ::city::map::v2::SetLaneMaxVResponse>* streamer) {
                       return this->StreamedSetLaneMaxV(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetLaneMaxV() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetLaneMaxV(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetLaneMaxVRequest* /*request*/, ::city::map::v2::SetLaneMaxVResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetLaneMaxV(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::map::v2::SetLaneMaxVRequest,::city::map::v2::SetLaneMaxVResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLane : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLane() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::map::v2::GetLaneRequest, ::city::map::v2::GetLaneResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::map::v2::GetLaneRequest, ::city::map::v2::GetLaneResponse>* streamer) {
                       return this->StreamedGetLane(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLane() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLane(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetLaneRequest* /*request*/, ::city::map::v2::GetLaneResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLane(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::map::v2::GetLaneRequest,::city::map::v2::GetLaneResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLaneByLongLatBBox : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLaneByLongLatBBox() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::map::v2::GetLaneByLongLatBBoxRequest, ::city::map::v2::GetLaneByLongLatBBoxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::map::v2::GetLaneByLongLatBBoxRequest, ::city::map::v2::GetLaneByLongLatBBoxResponse>* streamer) {
                       return this->StreamedGetLaneByLongLatBBox(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLaneByLongLatBBox() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLaneByLongLatBBox(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetLaneByLongLatBBoxRequest* /*request*/, ::city::map::v2::GetLaneByLongLatBBoxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLaneByLongLatBBox(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::map::v2::GetLaneByLongLatBBoxRequest,::city::map::v2::GetLaneByLongLatBBoxResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetLaneMaxV<WithStreamedUnaryMethod_GetLane<WithStreamedUnaryMethod_GetLaneByLongLatBBox<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetLaneMaxV<WithStreamedUnaryMethod_GetLane<WithStreamedUnaryMethod_GetLaneByLongLatBBox<Service > > > StreamedService;
};

}  // namespace v2
}  // namespace map
}  // namespace city


#endif  // GRPC_city_2fmap_2fv2_2flane_5fservice_2eproto__INCLUDED
