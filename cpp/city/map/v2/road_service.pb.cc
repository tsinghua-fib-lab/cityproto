// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/map/v2/road_service.proto

#include "city/map/v2/road_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace map {
namespace v2 {
PROTOBUF_CONSTEXPR GetRoadRequest::GetRoadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.road_ids_)*/{}
  , /*decltype(_impl_._road_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.exclude_lane_)*/false
  , /*decltype(_impl_.exclude_person_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRoadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRoadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRoadRequestDefaultTypeInternal() {}
  union {
    GetRoadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRoadRequestDefaultTypeInternal _GetRoadRequest_default_instance_;
PROTOBUF_CONSTEXPR GetRoadResponse::GetRoadResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.states_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRoadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRoadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRoadResponseDefaultTypeInternal() {}
  union {
    GetRoadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRoadResponseDefaultTypeInternal _GetRoadResponse_default_instance_;
PROTOBUF_CONSTEXPR GetRuinInfoRequest::GetRuinInfoRequest(
    ::_pbi::ConstantInitialized) {}
struct GetRuinInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRuinInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRuinInfoRequestDefaultTypeInternal() {}
  union {
    GetRuinInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRuinInfoRequestDefaultTypeInternal _GetRuinInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR RuinInfo::RuinInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ratio_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RuinInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RuinInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RuinInfoDefaultTypeInternal() {}
  union {
    RuinInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RuinInfoDefaultTypeInternal _RuinInfo_default_instance_;
PROTOBUF_CONSTEXPR GetRuinInfoResponse::GetRuinInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.one_)*/nullptr
  , /*decltype(_impl_.two_)*/nullptr
  , /*decltype(_impl_.three_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetRuinInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRuinInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRuinInfoResponseDefaultTypeInternal() {}
  union {
    GetRuinInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRuinInfoResponseDefaultTypeInternal _GetRuinInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR GetEventsRequest::GetEventsRequest(
    ::_pbi::ConstantInitialized) {}
struct GetEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEventsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEventsRequestDefaultTypeInternal() {}
  union {
    GetEventsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEventsRequestDefaultTypeInternal _GetEventsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetEventsResponse::GetEventsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetEventsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetEventsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetEventsResponseDefaultTypeInternal() {}
  union {
    GetEventsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetEventsResponseDefaultTypeInternal _GetEventsResponse_default_instance_;
PROTOBUF_CONSTEXPR RoadState::RoadState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lanes_)*/{}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.avg_v_)*/0
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoadStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadStateDefaultTypeInternal() {}
  union {
    RoadState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadStateDefaultTypeInternal _RoadState_default_instance_;
}  // namespace v2
}  // namespace map
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fmap_2fv2_2froad_5fservice_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_city_2fmap_2fv2_2froad_5fservice_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fmap_2fv2_2froad_5fservice_2eproto = nullptr;

const uint32_t TableStruct_city_2fmap_2fv2_2froad_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetRoadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetRoadRequest, _impl_.road_ids_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetRoadRequest, _impl_.exclude_lane_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetRoadRequest, _impl_.exclude_person_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetRoadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetRoadResponse, _impl_.states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetRuinInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::RuinInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::RuinInfo, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::RuinInfo, _impl_.ratio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetRuinInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetRuinInfoResponse, _impl_.one_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetRuinInfoResponse, _impl_.two_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetRuinInfoResponse, _impl_.three_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetEventsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetEventsResponse, _impl_.events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::RoadState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::RoadState, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::RoadState, _impl_.avg_v_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::RoadState, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::RoadState, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::RoadState, _impl_.lanes_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::map::v2::GetRoadRequest)},
  { 9, -1, -1, sizeof(::city::map::v2::GetRoadResponse)},
  { 16, -1, -1, sizeof(::city::map::v2::GetRuinInfoRequest)},
  { 22, -1, -1, sizeof(::city::map::v2::RuinInfo)},
  { 30, -1, -1, sizeof(::city::map::v2::GetRuinInfoResponse)},
  { 39, -1, -1, sizeof(::city::map::v2::GetEventsRequest)},
  { 45, -1, -1, sizeof(::city::map::v2::GetEventsResponse)},
  { 52, -1, -1, sizeof(::city::map::v2::RoadState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::map::v2::_GetRoadRequest_default_instance_._instance,
  &::city::map::v2::_GetRoadResponse_default_instance_._instance,
  &::city::map::v2::_GetRuinInfoRequest_default_instance_._instance,
  &::city::map::v2::_RuinInfo_default_instance_._instance,
  &::city::map::v2::_GetRuinInfoResponse_default_instance_._instance,
  &::city::map::v2::_GetEventsRequest_default_instance_._instance,
  &::city::map::v2::_GetEventsResponse_default_instance_._instance,
  &::city::map::v2::_RoadState_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fmap_2fv2_2froad_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036city/map/v2/road_service.proto\022\013city.m"
  "ap.v2\032\031city/event/v1/event.proto\032\034city/m"
  "ap/v2/lane_state.proto\"u\n\016GetRoadRequest"
  "\022\031\n\010road_ids\030\001 \003(\005R\007roadIds\022!\n\014exclude_l"
  "ane\030\002 \001(\010R\013excludeLane\022%\n\016exclude_person"
  "\030\003 \001(\010R\rexcludePerson\"A\n\017GetRoadResponse"
  "\022.\n\006states\030\001 \003(\0132\026.city.map.v2.RoadState"
  "R\006states\"\024\n\022GetRuinInfoRequest\"2\n\010RuinIn"
  "fo\022\020\n\003num\030\001 \001(\005R\003num\022\024\n\005ratio\030\002 \001(\001R\005rat"
  "io\"\224\001\n\023GetRuinInfoResponse\022\'\n\003one\030\001 \001(\0132"
  "\025.city.map.v2.RuinInfoR\003one\022\'\n\003two\030\002 \001(\013"
  "2\025.city.map.v2.RuinInfoR\003two\022+\n\005three\030\003 "
  "\001(\0132\025.city.map.v2.RuinInfoR\005three\"\022\n\020Get"
  "EventsRequest\"B\n\021GetEventsResponse\022-\n\006ev"
  "ents\030\001 \001(\0132\025.city.event.v1.EventsR\006event"
  "s\"\305\001\n\tRoadState\022\016\n\002id\030\001 \001(\005R\002id\022\023\n\005avg_v"
  "\030\004 \001(\001R\004avgV\022,\n\005level\030\002 \001(\0162\026.city.map.v"
  "2.RoadLevelR\005level\0227\n\006reason\030\003 \001(\0162\037.cit"
  "y.map.v2.InterruptionReasonR\006reason\022,\n\005l"
  "anes\030\005 \003(\0132\026.city.map.v2.LaneStateR\005lane"
  "s*\303\001\n\tRoadLevel\022\032\n\026ROAD_LEVEL_UNSPECIFIE"
  "D\020\000\022\024\n\020ROAD_LEVEL_CLEAR\020\001\022\031\n\025ROAD_LEVEL_"
  "LIGHT_LOAD\020\002\022\032\n\026ROAD_LEVEL_MEDIUM_LOAD\020\003"
  "\022\031\n\025ROAD_LEVEL_HEAVY_LOAD\020\004\022\027\n\023ROAD_LEVE"
  "L_OVERLOAD\020\005\022\031\n\025ROAD_LEVEL_RESTRICTED\020\006*"
  "\236\001\n\022InterruptionReason\022#\n\037INTERRUPTION_R"
  "EASON_UNSPECIFIED\020\000\022\036\n\032INTERRUPTION_REAS"
  "ON_RUINED\020\001\022\037\n\033INTERRUPTION_REASON_CASCA"
  "DE\020\002\022\"\n\036INTERRUPTION_REASON_CONGESTION\020\003"
  "2\361\001\n\013RoadService\022D\n\007GetRoad\022\033.city.map.v"
  "2.GetRoadRequest\032\034.city.map.v2.GetRoadRe"
  "sponse\022P\n\013GetRuinInfo\022\037.city.map.v2.GetR"
  "uinInfoRequest\032 .city.map.v2.GetRuinInfo"
  "Response\022J\n\tGetEvents\022\035.city.map.v2.GetE"
  "ventsRequest\032\036.city.map.v2.GetEventsResp"
  "onseB\241\001\n\017com.city.map.v2B\020RoadServicePro"
  "toP\001Z.git.fiblab.net/sim/protos/go/city/"
  "map/v2;mapv2\242\002\003CMX\252\002\013City.Map.V2\312\002\013City\\"
  "Map\\V2\342\002\027City\\Map\\V2\\GPBMetadata\352\002\rCity:"
  ":Map::V2b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_deps[2] = {
  &::descriptor_table_city_2fevent_2fv1_2fevent_2eproto,
  &::descriptor_table_city_2fmap_2fv2_2flane_5fstate_2eproto,
};
static ::_pbi::once_flag descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto = {
    false, false, 1576, descriptor_table_protodef_city_2fmap_2fv2_2froad_5fservice_2eproto,
    "city/map/v2/road_service.proto",
    &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_once, descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_deps, 2, 8,
    schemas, file_default_instances, TableStruct_city_2fmap_2fv2_2froad_5fservice_2eproto::offsets,
    file_level_metadata_city_2fmap_2fv2_2froad_5fservice_2eproto, file_level_enum_descriptors_city_2fmap_2fv2_2froad_5fservice_2eproto,
    file_level_service_descriptors_city_2fmap_2fv2_2froad_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_getter() {
  return &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fmap_2fv2_2froad_5fservice_2eproto(&descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto);
namespace city {
namespace map {
namespace v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoadLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto);
  return file_level_enum_descriptors_city_2fmap_2fv2_2froad_5fservice_2eproto[0];
}
bool RoadLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InterruptionReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto);
  return file_level_enum_descriptors_city_2fmap_2fv2_2froad_5fservice_2eproto[1];
}
bool InterruptionReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GetRoadRequest::_Internal {
 public:
};

GetRoadRequest::GetRoadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetRoadRequest)
}
GetRoadRequest::GetRoadRequest(const GetRoadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRoadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.road_ids_){from._impl_.road_ids_}
    , /*decltype(_impl_._road_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.exclude_lane_){}
    , decltype(_impl_.exclude_person_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.exclude_lane_, &from._impl_.exclude_lane_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exclude_person_) -
    reinterpret_cast<char*>(&_impl_.exclude_lane_)) + sizeof(_impl_.exclude_person_));
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetRoadRequest)
}

inline void GetRoadRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.road_ids_){arena}
    , /*decltype(_impl_._road_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.exclude_lane_){false}
    , decltype(_impl_.exclude_person_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRoadRequest::~GetRoadRequest() {
  // @@protoc_insertion_point(destructor:city.map.v2.GetRoadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRoadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.road_ids_.~RepeatedField();
}

void GetRoadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRoadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.GetRoadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.road_ids_.Clear();
  ::memset(&_impl_.exclude_lane_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.exclude_person_) -
      reinterpret_cast<char*>(&_impl_.exclude_lane_)) + sizeof(_impl_.exclude_person_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRoadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 road_ids = 1 [json_name = "roadIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_road_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_road_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool exclude_lane = 2 [json_name = "excludeLane"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.exclude_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool exclude_person = 3 [json_name = "excludePerson"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.exclude_person_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRoadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.GetRoadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 road_ids = 1 [json_name = "roadIds"];
  {
    int byte_size = _impl_._road_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_road_ids(), byte_size, target);
    }
  }

  // bool exclude_lane = 2 [json_name = "excludeLane"];
  if (this->_internal_exclude_lane() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_exclude_lane(), target);
  }

  // bool exclude_person = 3 [json_name = "excludePerson"];
  if (this->_internal_exclude_person() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_exclude_person(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.GetRoadRequest)
  return target;
}

size_t GetRoadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.GetRoadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 road_ids = 1 [json_name = "roadIds"];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.road_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._road_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool exclude_lane = 2 [json_name = "excludeLane"];
  if (this->_internal_exclude_lane() != 0) {
    total_size += 1 + 1;
  }

  // bool exclude_person = 3 [json_name = "excludePerson"];
  if (this->_internal_exclude_person() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRoadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRoadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRoadRequest::GetClassData() const { return &_class_data_; }


void GetRoadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRoadRequest*>(&to_msg);
  auto& from = static_cast<const GetRoadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.GetRoadRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.road_ids_.MergeFrom(from._impl_.road_ids_);
  if (from._internal_exclude_lane() != 0) {
    _this->_internal_set_exclude_lane(from._internal_exclude_lane());
  }
  if (from._internal_exclude_person() != 0) {
    _this->_internal_set_exclude_person(from._internal_exclude_person());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRoadRequest::CopyFrom(const GetRoadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.GetRoadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoadRequest::IsInitialized() const {
  return true;
}

void GetRoadRequest::InternalSwap(GetRoadRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.road_ids_.InternalSwap(&other->_impl_.road_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRoadRequest, _impl_.exclude_person_)
      + sizeof(GetRoadRequest::_impl_.exclude_person_)
      - PROTOBUF_FIELD_OFFSET(GetRoadRequest, _impl_.exclude_lane_)>(
          reinterpret_cast<char*>(&_impl_.exclude_lane_),
          reinterpret_cast<char*>(&other->_impl_.exclude_lane_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRoadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2froad_5fservice_2eproto[0]);
}

// ===================================================================

class GetRoadResponse::_Internal {
 public:
};

GetRoadResponse::GetRoadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetRoadResponse)
}
GetRoadResponse::GetRoadResponse(const GetRoadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRoadResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){from._impl_.states_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetRoadResponse)
}

inline void GetRoadResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRoadResponse::~GetRoadResponse() {
  // @@protoc_insertion_point(destructor:city.map.v2.GetRoadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRoadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.states_.~RepeatedPtrField();
}

void GetRoadResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRoadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.GetRoadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.states_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRoadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .city.map.v2.RoadState states = 1 [json_name = "states"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRoadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.GetRoadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .city.map.v2.RoadState states = 1 [json_name = "states"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.GetRoadResponse)
  return target;
}

size_t GetRoadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.GetRoadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.map.v2.RoadState states = 1 [json_name = "states"];
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->_impl_.states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRoadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRoadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRoadResponse::GetClassData() const { return &_class_data_; }


void GetRoadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRoadResponse*>(&to_msg);
  auto& from = static_cast<const GetRoadResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.GetRoadResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.states_.MergeFrom(from._impl_.states_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRoadResponse::CopyFrom(const GetRoadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.GetRoadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoadResponse::IsInitialized() const {
  return true;
}

void GetRoadResponse::InternalSwap(GetRoadResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.states_.InternalSwap(&other->_impl_.states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRoadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2froad_5fservice_2eproto[1]);
}

// ===================================================================

class GetRuinInfoRequest::_Internal {
 public:
};

GetRuinInfoRequest::GetRuinInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetRuinInfoRequest)
}
GetRuinInfoRequest::GetRuinInfoRequest(const GetRuinInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetRuinInfoRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetRuinInfoRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRuinInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRuinInfoRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetRuinInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2froad_5fservice_2eproto[2]);
}

// ===================================================================

class RuinInfo::_Internal {
 public:
};

RuinInfo::RuinInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.RuinInfo)
}
RuinInfo::RuinInfo(const RuinInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RuinInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ratio_){}
    , decltype(_impl_.num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ratio_, &from._impl_.ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_) -
    reinterpret_cast<char*>(&_impl_.ratio_)) + sizeof(_impl_.num_));
  // @@protoc_insertion_point(copy_constructor:city.map.v2.RuinInfo)
}

inline void RuinInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ratio_){0}
    , decltype(_impl_.num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RuinInfo::~RuinInfo() {
  // @@protoc_insertion_point(destructor:city.map.v2.RuinInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RuinInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RuinInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RuinInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.RuinInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_) -
      reinterpret_cast<char*>(&_impl_.ratio_)) + sizeof(_impl_.num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuinInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 num = 1 [json_name = "num"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double ratio = 2 [json_name = "ratio"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RuinInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.RuinInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num = 1 [json_name = "num"];
  if (this->_internal_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_num(), target);
  }

  // double ratio = 2 [json_name = "ratio"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ratio = this->_internal_ratio();
  uint64_t raw_ratio;
  memcpy(&raw_ratio, &tmp_ratio, sizeof(tmp_ratio));
  if (raw_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_ratio(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.RuinInfo)
  return target;
}

size_t RuinInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.RuinInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ratio = 2 [json_name = "ratio"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ratio = this->_internal_ratio();
  uint64_t raw_ratio;
  memcpy(&raw_ratio, &tmp_ratio, sizeof(tmp_ratio));
  if (raw_ratio != 0) {
    total_size += 1 + 8;
  }

  // int32 num = 1 [json_name = "num"];
  if (this->_internal_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuinInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RuinInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuinInfo::GetClassData() const { return &_class_data_; }


void RuinInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RuinInfo*>(&to_msg);
  auto& from = static_cast<const RuinInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.RuinInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ratio = from._internal_ratio();
  uint64_t raw_ratio;
  memcpy(&raw_ratio, &tmp_ratio, sizeof(tmp_ratio));
  if (raw_ratio != 0) {
    _this->_internal_set_ratio(from._internal_ratio());
  }
  if (from._internal_num() != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuinInfo::CopyFrom(const RuinInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.RuinInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuinInfo::IsInitialized() const {
  return true;
}

void RuinInfo::InternalSwap(RuinInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuinInfo, _impl_.num_)
      + sizeof(RuinInfo::_impl_.num_)
      - PROTOBUF_FIELD_OFFSET(RuinInfo, _impl_.ratio_)>(
          reinterpret_cast<char*>(&_impl_.ratio_),
          reinterpret_cast<char*>(&other->_impl_.ratio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuinInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2froad_5fservice_2eproto[3]);
}

// ===================================================================

class GetRuinInfoResponse::_Internal {
 public:
  static const ::city::map::v2::RuinInfo& one(const GetRuinInfoResponse* msg);
  static const ::city::map::v2::RuinInfo& two(const GetRuinInfoResponse* msg);
  static const ::city::map::v2::RuinInfo& three(const GetRuinInfoResponse* msg);
};

const ::city::map::v2::RuinInfo&
GetRuinInfoResponse::_Internal::one(const GetRuinInfoResponse* msg) {
  return *msg->_impl_.one_;
}
const ::city::map::v2::RuinInfo&
GetRuinInfoResponse::_Internal::two(const GetRuinInfoResponse* msg) {
  return *msg->_impl_.two_;
}
const ::city::map::v2::RuinInfo&
GetRuinInfoResponse::_Internal::three(const GetRuinInfoResponse* msg) {
  return *msg->_impl_.three_;
}
GetRuinInfoResponse::GetRuinInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetRuinInfoResponse)
}
GetRuinInfoResponse::GetRuinInfoResponse(const GetRuinInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetRuinInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.one_){nullptr}
    , decltype(_impl_.two_){nullptr}
    , decltype(_impl_.three_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_one()) {
    _this->_impl_.one_ = new ::city::map::v2::RuinInfo(*from._impl_.one_);
  }
  if (from._internal_has_two()) {
    _this->_impl_.two_ = new ::city::map::v2::RuinInfo(*from._impl_.two_);
  }
  if (from._internal_has_three()) {
    _this->_impl_.three_ = new ::city::map::v2::RuinInfo(*from._impl_.three_);
  }
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetRuinInfoResponse)
}

inline void GetRuinInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.one_){nullptr}
    , decltype(_impl_.two_){nullptr}
    , decltype(_impl_.three_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetRuinInfoResponse::~GetRuinInfoResponse() {
  // @@protoc_insertion_point(destructor:city.map.v2.GetRuinInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRuinInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.one_;
  if (this != internal_default_instance()) delete _impl_.two_;
  if (this != internal_default_instance()) delete _impl_.three_;
}

void GetRuinInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRuinInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.GetRuinInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.one_ != nullptr) {
    delete _impl_.one_;
  }
  _impl_.one_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.two_ != nullptr) {
    delete _impl_.two_;
  }
  _impl_.two_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.three_ != nullptr) {
    delete _impl_.three_;
  }
  _impl_.three_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRuinInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.map.v2.RuinInfo one = 1 [json_name = "one"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_one(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.map.v2.RuinInfo two = 2 [json_name = "two"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_two(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.map.v2.RuinInfo three = 3 [json_name = "three"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_three(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetRuinInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.GetRuinInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.map.v2.RuinInfo one = 1 [json_name = "one"];
  if (this->_internal_has_one()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::one(this),
        _Internal::one(this).GetCachedSize(), target, stream);
  }

  // .city.map.v2.RuinInfo two = 2 [json_name = "two"];
  if (this->_internal_has_two()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::two(this),
        _Internal::two(this).GetCachedSize(), target, stream);
  }

  // .city.map.v2.RuinInfo three = 3 [json_name = "three"];
  if (this->_internal_has_three()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::three(this),
        _Internal::three(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.GetRuinInfoResponse)
  return target;
}

size_t GetRuinInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.GetRuinInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.map.v2.RuinInfo one = 1 [json_name = "one"];
  if (this->_internal_has_one()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.one_);
  }

  // .city.map.v2.RuinInfo two = 2 [json_name = "two"];
  if (this->_internal_has_two()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.two_);
  }

  // .city.map.v2.RuinInfo three = 3 [json_name = "three"];
  if (this->_internal_has_three()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.three_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetRuinInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetRuinInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetRuinInfoResponse::GetClassData() const { return &_class_data_; }


void GetRuinInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetRuinInfoResponse*>(&to_msg);
  auto& from = static_cast<const GetRuinInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.GetRuinInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_one()) {
    _this->_internal_mutable_one()->::city::map::v2::RuinInfo::MergeFrom(
        from._internal_one());
  }
  if (from._internal_has_two()) {
    _this->_internal_mutable_two()->::city::map::v2::RuinInfo::MergeFrom(
        from._internal_two());
  }
  if (from._internal_has_three()) {
    _this->_internal_mutable_three()->::city::map::v2::RuinInfo::MergeFrom(
        from._internal_three());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetRuinInfoResponse::CopyFrom(const GetRuinInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.GetRuinInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRuinInfoResponse::IsInitialized() const {
  return true;
}

void GetRuinInfoResponse::InternalSwap(GetRuinInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRuinInfoResponse, _impl_.three_)
      + sizeof(GetRuinInfoResponse::_impl_.three_)
      - PROTOBUF_FIELD_OFFSET(GetRuinInfoResponse, _impl_.one_)>(
          reinterpret_cast<char*>(&_impl_.one_),
          reinterpret_cast<char*>(&other->_impl_.one_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRuinInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2froad_5fservice_2eproto[4]);
}

// ===================================================================

class GetEventsRequest::_Internal {
 public:
};

GetEventsRequest::GetEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetEventsRequest)
}
GetEventsRequest::GetEventsRequest(const GetEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetEventsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetEventsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEventsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEventsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetEventsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2froad_5fservice_2eproto[5]);
}

// ===================================================================

class GetEventsResponse::_Internal {
 public:
  static const ::city::event::v1::Events& events(const GetEventsResponse* msg);
};

const ::city::event::v1::Events&
GetEventsResponse::_Internal::events(const GetEventsResponse* msg) {
  return *msg->_impl_.events_;
}
void GetEventsResponse::clear_events() {
  if (GetArenaForAllocation() == nullptr && _impl_.events_ != nullptr) {
    delete _impl_.events_;
  }
  _impl_.events_ = nullptr;
}
GetEventsResponse::GetEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetEventsResponse)
}
GetEventsResponse::GetEventsResponse(const GetEventsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetEventsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_events()) {
    _this->_impl_.events_ = new ::city::event::v1::Events(*from._impl_.events_);
  }
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetEventsResponse)
}

inline void GetEventsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetEventsResponse::~GetEventsResponse() {
  // @@protoc_insertion_point(destructor:city.map.v2.GetEventsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetEventsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.events_;
}

void GetEventsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetEventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.GetEventsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.events_ != nullptr) {
    delete _impl_.events_;
  }
  _impl_.events_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetEventsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.event.v1.Events events = 1 [json_name = "events"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_events(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetEventsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.GetEventsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.event.v1.Events events = 1 [json_name = "events"];
  if (this->_internal_has_events()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::events(this),
        _Internal::events(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.GetEventsResponse)
  return target;
}

size_t GetEventsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.GetEventsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.event.v1.Events events = 1 [json_name = "events"];
  if (this->_internal_has_events()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.events_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetEventsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetEventsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetEventsResponse::GetClassData() const { return &_class_data_; }


void GetEventsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetEventsResponse*>(&to_msg);
  auto& from = static_cast<const GetEventsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.GetEventsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_events()) {
    _this->_internal_mutable_events()->::city::event::v1::Events::MergeFrom(
        from._internal_events());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetEventsResponse::CopyFrom(const GetEventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.GetEventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEventsResponse::IsInitialized() const {
  return true;
}

void GetEventsResponse::InternalSwap(GetEventsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.events_, other->_impl_.events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetEventsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2froad_5fservice_2eproto[6]);
}

// ===================================================================

class RoadState::_Internal {
 public:
};

void RoadState::clear_lanes() {
  _impl_.lanes_.Clear();
}
RoadState::RoadState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.RoadState)
}
RoadState::RoadState(const RoadState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoadState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lanes_){from._impl_.lanes_}
    , decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.avg_v_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.reason_));
  // @@protoc_insertion_point(copy_constructor:city.map.v2.RoadState)
}

inline void RoadState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lanes_){arena}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.avg_v_){0}
    , decltype(_impl_.reason_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoadState::~RoadState() {
  // @@protoc_insertion_point(destructor:city.map.v2.RoadState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoadState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lanes_.~RepeatedPtrField();
}

void RoadState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoadState::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.RoadState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lanes_.Clear();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reason_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoadState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.map.v2.RoadLevel level = 2 [json_name = "level"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::city::map::v2::RoadLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // .city.map.v2.InterruptionReason reason = 3 [json_name = "reason"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::city::map::v2::InterruptionReason>(val));
        } else
          goto handle_unusual;
        continue;
      // double avg_v = 4 [json_name = "avgV"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.avg_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .city.map.v2.LaneState lanes = 5 [json_name = "lanes"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoadState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.RoadState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .city.map.v2.RoadLevel level = 2 [json_name = "level"];
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_level(), target);
  }

  // .city.map.v2.InterruptionReason reason = 3 [json_name = "reason"];
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_reason(), target);
  }

  // double avg_v = 4 [json_name = "avgV"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_v = this->_internal_avg_v();
  uint64_t raw_avg_v;
  memcpy(&raw_avg_v, &tmp_avg_v, sizeof(tmp_avg_v));
  if (raw_avg_v != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_avg_v(), target);
  }

  // repeated .city.map.v2.LaneState lanes = 5 [json_name = "lanes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lanes_size()); i < n; i++) {
    const auto& repfield = this->_internal_lanes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.RoadState)
  return target;
}

size_t RoadState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.RoadState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.map.v2.LaneState lanes = 5 [json_name = "lanes"];
  total_size += 1UL * this->_internal_lanes_size();
  for (const auto& msg : this->_impl_.lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .city.map.v2.RoadLevel level = 2 [json_name = "level"];
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  // double avg_v = 4 [json_name = "avgV"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_v = this->_internal_avg_v();
  uint64_t raw_avg_v;
  memcpy(&raw_avg_v, &tmp_avg_v, sizeof(tmp_avg_v));
  if (raw_avg_v != 0) {
    total_size += 1 + 8;
  }

  // .city.map.v2.InterruptionReason reason = 3 [json_name = "reason"];
  if (this->_internal_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoadState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoadState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoadState::GetClassData() const { return &_class_data_; }


void RoadState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoadState*>(&to_msg);
  auto& from = static_cast<const RoadState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.RoadState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lanes_.MergeFrom(from._impl_.lanes_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_v = from._internal_avg_v();
  uint64_t raw_avg_v;
  memcpy(&raw_avg_v, &tmp_avg_v, sizeof(tmp_avg_v));
  if (raw_avg_v != 0) {
    _this->_internal_set_avg_v(from._internal_avg_v());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoadState::CopyFrom(const RoadState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.RoadState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadState::IsInitialized() const {
  return true;
}

void RoadState::InternalSwap(RoadState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lanes_.InternalSwap(&other->_impl_.lanes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoadState, _impl_.reason_)
      + sizeof(RoadState::_impl_.reason_)
      - PROTOBUF_FIELD_OFFSET(RoadState, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2froad_5fservice_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace map
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::map::v2::GetRoadRequest*
Arena::CreateMaybeMessage< ::city::map::v2::GetRoadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetRoadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::GetRoadResponse*
Arena::CreateMaybeMessage< ::city::map::v2::GetRoadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetRoadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::GetRuinInfoRequest*
Arena::CreateMaybeMessage< ::city::map::v2::GetRuinInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetRuinInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::RuinInfo*
Arena::CreateMaybeMessage< ::city::map::v2::RuinInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::RuinInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::GetRuinInfoResponse*
Arena::CreateMaybeMessage< ::city::map::v2::GetRuinInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetRuinInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::GetEventsRequest*
Arena::CreateMaybeMessage< ::city::map::v2::GetEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::GetEventsResponse*
Arena::CreateMaybeMessage< ::city::map::v2::GetEventsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetEventsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::RoadState*
Arena::CreateMaybeMessage< ::city::map::v2::RoadState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::RoadState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
