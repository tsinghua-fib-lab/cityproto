// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/map/v2/traffic_light_service.proto

#include "city/map/v2/traffic_light_service.pb.h"
#include "city/map/v2/traffic_light_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace city {
namespace map {
namespace v2 {

static const char* TrafficLightService_method_names[] = {
  "/city.map.v2.TrafficLightService/GetTrafficLight",
  "/city.map.v2.TrafficLightService/SetTrafficLight",
  "/city.map.v2.TrafficLightService/SetTrafficLightPhase",
  "/city.map.v2.TrafficLightService/SetTrafficLightStatus",
};

std::unique_ptr< TrafficLightService::Stub> TrafficLightService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TrafficLightService::Stub> stub(new TrafficLightService::Stub(channel, options));
  return stub;
}

TrafficLightService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetTrafficLight_(TrafficLightService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTrafficLight_(TrafficLightService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTrafficLightPhase_(TrafficLightService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTrafficLightStatus_(TrafficLightService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TrafficLightService::Stub::GetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest& request, ::city::map::v2::GetTrafficLightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::map::v2::GetTrafficLightRequest, ::city::map::v2::GetTrafficLightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTrafficLight_, context, request, response);
}

void TrafficLightService::Stub::async::GetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest* request, ::city::map::v2::GetTrafficLightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::map::v2::GetTrafficLightRequest, ::city::map::v2::GetTrafficLightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTrafficLight_, context, request, response, std::move(f));
}

void TrafficLightService::Stub::async::GetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest* request, ::city::map::v2::GetTrafficLightResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTrafficLight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::GetTrafficLightResponse>* TrafficLightService::Stub::PrepareAsyncGetTrafficLightRaw(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::map::v2::GetTrafficLightResponse, ::city::map::v2::GetTrafficLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTrafficLight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::GetTrafficLightResponse>* TrafficLightService::Stub::AsyncGetTrafficLightRaw(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTrafficLightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TrafficLightService::Stub::SetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest& request, ::city::map::v2::SetTrafficLightResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::map::v2::SetTrafficLightRequest, ::city::map::v2::SetTrafficLightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTrafficLight_, context, request, response);
}

void TrafficLightService::Stub::async::SetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest* request, ::city::map::v2::SetTrafficLightResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::map::v2::SetTrafficLightRequest, ::city::map::v2::SetTrafficLightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTrafficLight_, context, request, response, std::move(f));
}

void TrafficLightService::Stub::async::SetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest* request, ::city::map::v2::SetTrafficLightResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTrafficLight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightResponse>* TrafficLightService::Stub::PrepareAsyncSetTrafficLightRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::map::v2::SetTrafficLightResponse, ::city::map::v2::SetTrafficLightRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTrafficLight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightResponse>* TrafficLightService::Stub::AsyncSetTrafficLightRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTrafficLightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TrafficLightService::Stub::SetTrafficLightPhase(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest& request, ::city::map::v2::SetTrafficLightPhaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::map::v2::SetTrafficLightPhaseRequest, ::city::map::v2::SetTrafficLightPhaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTrafficLightPhase_, context, request, response);
}

void TrafficLightService::Stub::async::SetTrafficLightPhase(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest* request, ::city::map::v2::SetTrafficLightPhaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::map::v2::SetTrafficLightPhaseRequest, ::city::map::v2::SetTrafficLightPhaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTrafficLightPhase_, context, request, response, std::move(f));
}

void TrafficLightService::Stub::async::SetTrafficLightPhase(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest* request, ::city::map::v2::SetTrafficLightPhaseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTrafficLightPhase_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightPhaseResponse>* TrafficLightService::Stub::PrepareAsyncSetTrafficLightPhaseRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::map::v2::SetTrafficLightPhaseResponse, ::city::map::v2::SetTrafficLightPhaseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTrafficLightPhase_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightPhaseResponse>* TrafficLightService::Stub::AsyncSetTrafficLightPhaseRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTrafficLightPhaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TrafficLightService::Stub::SetTrafficLightStatus(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest& request, ::city::map::v2::SetTrafficLightStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::map::v2::SetTrafficLightStatusRequest, ::city::map::v2::SetTrafficLightStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTrafficLightStatus_, context, request, response);
}

void TrafficLightService::Stub::async::SetTrafficLightStatus(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest* request, ::city::map::v2::SetTrafficLightStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::map::v2::SetTrafficLightStatusRequest, ::city::map::v2::SetTrafficLightStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTrafficLightStatus_, context, request, response, std::move(f));
}

void TrafficLightService::Stub::async::SetTrafficLightStatus(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest* request, ::city::map::v2::SetTrafficLightStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTrafficLightStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightStatusResponse>* TrafficLightService::Stub::PrepareAsyncSetTrafficLightStatusRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::map::v2::SetTrafficLightStatusResponse, ::city::map::v2::SetTrafficLightStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTrafficLightStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightStatusResponse>* TrafficLightService::Stub::AsyncSetTrafficLightStatusRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTrafficLightStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

TrafficLightService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrafficLightService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrafficLightService::Service, ::city::map::v2::GetTrafficLightRequest, ::city::map::v2::GetTrafficLightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TrafficLightService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::map::v2::GetTrafficLightRequest* req,
             ::city::map::v2::GetTrafficLightResponse* resp) {
               return service->GetTrafficLight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrafficLightService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrafficLightService::Service, ::city::map::v2::SetTrafficLightRequest, ::city::map::v2::SetTrafficLightResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TrafficLightService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::map::v2::SetTrafficLightRequest* req,
             ::city::map::v2::SetTrafficLightResponse* resp) {
               return service->SetTrafficLight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrafficLightService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrafficLightService::Service, ::city::map::v2::SetTrafficLightPhaseRequest, ::city::map::v2::SetTrafficLightPhaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TrafficLightService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::map::v2::SetTrafficLightPhaseRequest* req,
             ::city::map::v2::SetTrafficLightPhaseResponse* resp) {
               return service->SetTrafficLightPhase(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TrafficLightService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TrafficLightService::Service, ::city::map::v2::SetTrafficLightStatusRequest, ::city::map::v2::SetTrafficLightStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TrafficLightService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::map::v2::SetTrafficLightStatusRequest* req,
             ::city::map::v2::SetTrafficLightStatusResponse* resp) {
               return service->SetTrafficLightStatus(ctx, req, resp);
             }, this)));
}

TrafficLightService::Service::~Service() {
}

::grpc::Status TrafficLightService::Service::GetTrafficLight(::grpc::ServerContext* context, const ::city::map::v2::GetTrafficLightRequest* request, ::city::map::v2::GetTrafficLightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TrafficLightService::Service::SetTrafficLight(::grpc::ServerContext* context, const ::city::map::v2::SetTrafficLightRequest* request, ::city::map::v2::SetTrafficLightResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TrafficLightService::Service::SetTrafficLightPhase(::grpc::ServerContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest* request, ::city::map::v2::SetTrafficLightPhaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TrafficLightService::Service::SetTrafficLightStatus(::grpc::ServerContext* context, const ::city::map::v2::SetTrafficLightStatusRequest* request, ::city::map::v2::SetTrafficLightStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace city
}  // namespace map
}  // namespace v2

