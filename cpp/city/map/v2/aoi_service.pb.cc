// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/map/v2/aoi_service.proto

#include "city/map/v2/aoi_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace map {
namespace v2 {
PROTOBUF_CONSTEXPR AoiState::AoiState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.persons_)*/{}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AoiStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AoiStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AoiStateDefaultTypeInternal() {}
  union {
    AoiState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AoiStateDefaultTypeInternal _AoiState_default_instance_;
PROTOBUF_CONSTEXPR GetAoiRequest::GetAoiRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aoi_ids_)*/{}
  , /*decltype(_impl_._aoi_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAoiRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAoiRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAoiRequestDefaultTypeInternal() {}
  union {
    GetAoiRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAoiRequestDefaultTypeInternal _GetAoiRequest_default_instance_;
PROTOBUF_CONSTEXPR GetAoiResponse::GetAoiResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.states_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetAoiResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAoiResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAoiResponseDefaultTypeInternal() {}
  union {
    GetAoiResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAoiResponseDefaultTypeInternal _GetAoiResponse_default_instance_;
}  // namespace v2
}  // namespace map
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fmap_2fv2_2faoi_5fservice_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_city_2fmap_2fv2_2faoi_5fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fmap_2fv2_2faoi_5fservice_2eproto = nullptr;

const uint32_t TableStruct_city_2fmap_2fv2_2faoi_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::AoiState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::AoiState, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::AoiState, _impl_.persons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetAoiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetAoiRequest, _impl_.aoi_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetAoiResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetAoiResponse, _impl_.states_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::map::v2::AoiState)},
  { 8, -1, -1, sizeof(::city::map::v2::GetAoiRequest)},
  { 15, -1, -1, sizeof(::city::map::v2::GetAoiResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::map::v2::_AoiState_default_instance_._instance,
  &::city::map::v2::_GetAoiRequest_default_instance_._instance,
  &::city::map::v2::_GetAoiResponse_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fmap_2fv2_2faoi_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035city/map/v2/aoi_service.proto\022\013city.ma"
  "p.v2\032\033city/person/v1/motion.proto\"R\n\010Aoi"
  "State\022\016\n\002id\030\001 \001(\005R\002id\0226\n\007persons\030\002 \003(\0132\034"
  ".city.person.v1.PersonMotionR\007persons\"(\n"
  "\rGetAoiRequest\022\027\n\007aoi_ids\030\001 \003(\005R\006aoiIds\""
  "\?\n\016GetAoiResponse\022-\n\006states\030\001 \003(\0132\025.city"
  ".map.v2.AoiStateR\006states2O\n\nAoiService\022A"
  "\n\006GetAoi\022\032.city.map.v2.GetAoiRequest\032\033.c"
  "ity.map.v2.GetAoiResponseB\240\001\n\017com.city.m"
  "ap.v2B\017AoiServiceProtoP\001Z.git.fiblab.net"
  "/sim/protos/go/city/map/v2;mapv2\242\002\003CMX\252\002"
  "\013City.Map.V2\312\002\013City\\Map\\V2\342\002\027City\\Map\\V2"
  "\\GPBMetadata\352\002\rCity::Map::V2b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_city_2fmap_2fv2_2faoi_5fservice_2eproto_deps[1] = {
  &::descriptor_table_city_2fperson_2fv1_2fmotion_2eproto,
};
static ::_pbi::once_flag descriptor_table_city_2fmap_2fv2_2faoi_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fmap_2fv2_2faoi_5fservice_2eproto = {
    false, false, 516, descriptor_table_protodef_city_2fmap_2fv2_2faoi_5fservice_2eproto,
    "city/map/v2/aoi_service.proto",
    &descriptor_table_city_2fmap_2fv2_2faoi_5fservice_2eproto_once, descriptor_table_city_2fmap_2fv2_2faoi_5fservice_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_city_2fmap_2fv2_2faoi_5fservice_2eproto::offsets,
    file_level_metadata_city_2fmap_2fv2_2faoi_5fservice_2eproto, file_level_enum_descriptors_city_2fmap_2fv2_2faoi_5fservice_2eproto,
    file_level_service_descriptors_city_2fmap_2fv2_2faoi_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fmap_2fv2_2faoi_5fservice_2eproto_getter() {
  return &descriptor_table_city_2fmap_2fv2_2faoi_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fmap_2fv2_2faoi_5fservice_2eproto(&descriptor_table_city_2fmap_2fv2_2faoi_5fservice_2eproto);
namespace city {
namespace map {
namespace v2 {

// ===================================================================

class AoiState::_Internal {
 public:
};

void AoiState::clear_persons() {
  _impl_.persons_.Clear();
}
AoiState::AoiState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.AoiState)
}
AoiState::AoiState(const AoiState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AoiState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.persons_){from._impl_.persons_}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:city.map.v2.AoiState)
}

inline void AoiState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.persons_){arena}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AoiState::~AoiState() {
  // @@protoc_insertion_point(destructor:city.map.v2.AoiState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AoiState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.persons_.~RepeatedPtrField();
}

void AoiState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AoiState::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.AoiState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.persons_.Clear();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AoiState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .city.person.v1.PersonMotion persons = 2 [json_name = "persons"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_persons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AoiState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.AoiState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated .city.person.v1.PersonMotion persons = 2 [json_name = "persons"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_persons_size()); i < n; i++) {
    const auto& repfield = this->_internal_persons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.AoiState)
  return target;
}

size_t AoiState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.AoiState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.person.v1.PersonMotion persons = 2 [json_name = "persons"];
  total_size += 1UL * this->_internal_persons_size();
  for (const auto& msg : this->_impl_.persons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AoiState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AoiState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AoiState::GetClassData() const { return &_class_data_; }


void AoiState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AoiState*>(&to_msg);
  auto& from = static_cast<const AoiState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.AoiState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.persons_.MergeFrom(from._impl_.persons_);
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AoiState::CopyFrom(const AoiState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.AoiState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AoiState::IsInitialized() const {
  return true;
}

void AoiState::InternalSwap(AoiState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.persons_.InternalSwap(&other->_impl_.persons_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AoiState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2faoi_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2faoi_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2faoi_5fservice_2eproto[0]);
}

// ===================================================================

class GetAoiRequest::_Internal {
 public:
};

GetAoiRequest::GetAoiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetAoiRequest)
}
GetAoiRequest::GetAoiRequest(const GetAoiRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAoiRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aoi_ids_){from._impl_.aoi_ids_}
    , /*decltype(_impl_._aoi_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetAoiRequest)
}

inline void GetAoiRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.aoi_ids_){arena}
    , /*decltype(_impl_._aoi_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetAoiRequest::~GetAoiRequest() {
  // @@protoc_insertion_point(destructor:city.map.v2.GetAoiRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAoiRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.aoi_ids_.~RepeatedField();
}

void GetAoiRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAoiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.GetAoiRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.aoi_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAoiRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 aoi_ids = 1 [json_name = "aoiIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_aoi_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_aoi_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAoiRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.GetAoiRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 aoi_ids = 1 [json_name = "aoiIds"];
  {
    int byte_size = _impl_._aoi_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_aoi_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.GetAoiRequest)
  return target;
}

size_t GetAoiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.GetAoiRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 aoi_ids = 1 [json_name = "aoiIds"];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.aoi_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._aoi_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAoiRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAoiRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAoiRequest::GetClassData() const { return &_class_data_; }


void GetAoiRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAoiRequest*>(&to_msg);
  auto& from = static_cast<const GetAoiRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.GetAoiRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.aoi_ids_.MergeFrom(from._impl_.aoi_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAoiRequest::CopyFrom(const GetAoiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.GetAoiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAoiRequest::IsInitialized() const {
  return true;
}

void GetAoiRequest::InternalSwap(GetAoiRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.aoi_ids_.InternalSwap(&other->_impl_.aoi_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAoiRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2faoi_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2faoi_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2faoi_5fservice_2eproto[1]);
}

// ===================================================================

class GetAoiResponse::_Internal {
 public:
};

GetAoiResponse::GetAoiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetAoiResponse)
}
GetAoiResponse::GetAoiResponse(const GetAoiResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetAoiResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){from._impl_.states_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetAoiResponse)
}

inline void GetAoiResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.states_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetAoiResponse::~GetAoiResponse() {
  // @@protoc_insertion_point(destructor:city.map.v2.GetAoiResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAoiResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.states_.~RepeatedPtrField();
}

void GetAoiResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetAoiResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.GetAoiResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.states_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAoiResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .city.map.v2.AoiState states = 1 [json_name = "states"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAoiResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.GetAoiResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .city.map.v2.AoiState states = 1 [json_name = "states"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.GetAoiResponse)
  return target;
}

size_t GetAoiResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.GetAoiResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.map.v2.AoiState states = 1 [json_name = "states"];
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->_impl_.states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAoiResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetAoiResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAoiResponse::GetClassData() const { return &_class_data_; }


void GetAoiResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetAoiResponse*>(&to_msg);
  auto& from = static_cast<const GetAoiResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.GetAoiResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.states_.MergeFrom(from._impl_.states_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAoiResponse::CopyFrom(const GetAoiResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.GetAoiResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAoiResponse::IsInitialized() const {
  return true;
}

void GetAoiResponse::InternalSwap(GetAoiResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.states_.InternalSwap(&other->_impl_.states_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAoiResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2faoi_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2faoi_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2faoi_5fservice_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace map
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::map::v2::AoiState*
Arena::CreateMaybeMessage< ::city::map::v2::AoiState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::AoiState >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::GetAoiRequest*
Arena::CreateMaybeMessage< ::city::map::v2::GetAoiRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetAoiRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::GetAoiResponse*
Arena::CreateMaybeMessage< ::city::map::v2::GetAoiResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetAoiResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
