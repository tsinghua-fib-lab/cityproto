// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/map/v2/traffic_light_service.proto

#include "city/map/v2/traffic_light_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace map {
namespace v2 {
PROTOBUF_CONSTEXPR GetTrafficLightRequest::GetTrafficLightRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.junction_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTrafficLightRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTrafficLightRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTrafficLightRequestDefaultTypeInternal() {}
  union {
    GetTrafficLightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTrafficLightRequestDefaultTypeInternal _GetTrafficLightRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTrafficLightResponse::GetTrafficLightResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.traffic_light_)*/nullptr
  , /*decltype(_impl_.time_remaining_)*/0
  , /*decltype(_impl_.phase_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTrafficLightResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTrafficLightResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTrafficLightResponseDefaultTypeInternal() {}
  union {
    GetTrafficLightResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTrafficLightResponseDefaultTypeInternal _GetTrafficLightResponse_default_instance_;
PROTOBUF_CONSTEXPR SetTrafficLightRequest::SetTrafficLightRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.traffic_light_)*/nullptr
  , /*decltype(_impl_.time_remaining_)*/0
  , /*decltype(_impl_.phase_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetTrafficLightRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTrafficLightRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTrafficLightRequestDefaultTypeInternal() {}
  union {
    SetTrafficLightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTrafficLightRequestDefaultTypeInternal _SetTrafficLightRequest_default_instance_;
PROTOBUF_CONSTEXPR SetTrafficLightResponse::SetTrafficLightResponse(
    ::_pbi::ConstantInitialized) {}
struct SetTrafficLightResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTrafficLightResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTrafficLightResponseDefaultTypeInternal() {}
  union {
    SetTrafficLightResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTrafficLightResponseDefaultTypeInternal _SetTrafficLightResponse_default_instance_;
PROTOBUF_CONSTEXPR SetTrafficLightPhaseRequest::SetTrafficLightPhaseRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.junction_id_)*/0
  , /*decltype(_impl_.phase_index_)*/0
  , /*decltype(_impl_.time_remaining_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetTrafficLightPhaseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTrafficLightPhaseRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTrafficLightPhaseRequestDefaultTypeInternal() {}
  union {
    SetTrafficLightPhaseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTrafficLightPhaseRequestDefaultTypeInternal _SetTrafficLightPhaseRequest_default_instance_;
PROTOBUF_CONSTEXPR SetTrafficLightPhaseResponse::SetTrafficLightPhaseResponse(
    ::_pbi::ConstantInitialized) {}
struct SetTrafficLightPhaseResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTrafficLightPhaseResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTrafficLightPhaseResponseDefaultTypeInternal() {}
  union {
    SetTrafficLightPhaseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTrafficLightPhaseResponseDefaultTypeInternal _SetTrafficLightPhaseResponse_default_instance_;
PROTOBUF_CONSTEXPR SetTrafficLightStatusRequest::SetTrafficLightStatusRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.junction_id_)*/0
  , /*decltype(_impl_.ok_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetTrafficLightStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTrafficLightStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTrafficLightStatusRequestDefaultTypeInternal() {}
  union {
    SetTrafficLightStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTrafficLightStatusRequestDefaultTypeInternal _SetTrafficLightStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR SetTrafficLightStatusResponse::SetTrafficLightStatusResponse(
    ::_pbi::ConstantInitialized) {}
struct SetTrafficLightStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTrafficLightStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTrafficLightStatusResponseDefaultTypeInternal() {}
  union {
    SetTrafficLightStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTrafficLightStatusResponseDefaultTypeInternal _SetTrafficLightStatusResponse_default_instance_;
}  // namespace v2
}  // namespace map
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto = nullptr;

const uint32_t TableStruct_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetTrafficLightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetTrafficLightRequest, _impl_.junction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetTrafficLightResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetTrafficLightResponse, _impl_.traffic_light_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetTrafficLightResponse, _impl_.phase_index_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::GetTrafficLightResponse, _impl_.time_remaining_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetTrafficLightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetTrafficLightRequest, _impl_.traffic_light_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetTrafficLightRequest, _impl_.phase_index_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetTrafficLightRequest, _impl_.time_remaining_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetTrafficLightResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetTrafficLightPhaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetTrafficLightPhaseRequest, _impl_.junction_id_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetTrafficLightPhaseRequest, _impl_.phase_index_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetTrafficLightPhaseRequest, _impl_.time_remaining_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetTrafficLightPhaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetTrafficLightStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetTrafficLightStatusRequest, _impl_.junction_id_),
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetTrafficLightStatusRequest, _impl_.ok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::map::v2::SetTrafficLightStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::map::v2::GetTrafficLightRequest)},
  { 7, -1, -1, sizeof(::city::map::v2::GetTrafficLightResponse)},
  { 16, -1, -1, sizeof(::city::map::v2::SetTrafficLightRequest)},
  { 25, -1, -1, sizeof(::city::map::v2::SetTrafficLightResponse)},
  { 31, -1, -1, sizeof(::city::map::v2::SetTrafficLightPhaseRequest)},
  { 40, -1, -1, sizeof(::city::map::v2::SetTrafficLightPhaseResponse)},
  { 46, -1, -1, sizeof(::city::map::v2::SetTrafficLightStatusRequest)},
  { 54, -1, -1, sizeof(::city::map::v2::SetTrafficLightStatusResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::map::v2::_GetTrafficLightRequest_default_instance_._instance,
  &::city::map::v2::_GetTrafficLightResponse_default_instance_._instance,
  &::city::map::v2::_SetTrafficLightRequest_default_instance_._instance,
  &::city::map::v2::_SetTrafficLightResponse_default_instance_._instance,
  &::city::map::v2::_SetTrafficLightPhaseRequest_default_instance_._instance,
  &::city::map::v2::_SetTrafficLightPhaseResponse_default_instance_._instance,
  &::city::map::v2::_SetTrafficLightStatusRequest_default_instance_._instance,
  &::city::map::v2::_SetTrafficLightStatusResponse_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'city/map/v2/traffic_light_service.prot"
  "o\022\013city.map.v2\032\027city/map/v2/light.proto\""
  "9\n\026GetTrafficLightRequest\022\037\n\013junction_id"
  "\030\001 \001(\005R\njunctionId\"\241\001\n\027GetTrafficLightRe"
  "sponse\022>\n\rtraffic_light\030\001 \001(\0132\031.city.map"
  ".v2.TrafficLightR\014trafficLight\022\037\n\013phase_"
  "index\030\002 \001(\005R\nphaseIndex\022%\n\016time_remainin"
  "g\030\003 \001(\001R\rtimeRemaining\"\240\001\n\026SetTrafficLig"
  "htRequest\022>\n\rtraffic_light\030\001 \001(\0132\031.city."
  "map.v2.TrafficLightR\014trafficLight\022\037\n\013pha"
  "se_index\030\002 \001(\005R\nphaseIndex\022%\n\016time_remai"
  "ning\030\003 \001(\001R\rtimeRemaining\"\031\n\027SetTrafficL"
  "ightResponse\"\206\001\n\033SetTrafficLightPhaseReq"
  "uest\022\037\n\013junction_id\030\001 \001(\005R\njunctionId\022\037\n"
  "\013phase_index\030\002 \001(\005R\nphaseIndex\022%\n\016time_r"
  "emaining\030\003 \001(\001R\rtimeRemaining\"\036\n\034SetTraf"
  "ficLightPhaseResponse\"O\n\034SetTrafficLight"
  "StatusRequest\022\037\n\013junction_id\030\001 \001(\005R\njunc"
  "tionId\022\016\n\002ok\030\002 \001(\010R\002ok\"\037\n\035SetTrafficLigh"
  "tStatusResponse2\256\003\n\023TrafficLightService\022"
  "\\\n\017GetTrafficLight\022#.city.map.v2.GetTraf"
  "ficLightRequest\032$.city.map.v2.GetTraffic"
  "LightResponse\022\\\n\017SetTrafficLight\022#.city."
  "map.v2.SetTrafficLightRequest\032$.city.map"
  ".v2.SetTrafficLightResponse\022k\n\024SetTraffi"
  "cLightPhase\022(.city.map.v2.SetTrafficLigh"
  "tPhaseRequest\032).city.map.v2.SetTrafficLi"
  "ghtPhaseResponse\022n\n\025SetTrafficLightStatu"
  "s\022).city.map.v2.SetTrafficLightStatusReq"
  "uest\032*.city.map.v2.SetTrafficLightStatus"
  "ResponseB\251\001\n\017com.city.map.v2B\030TrafficLig"
  "htServiceProtoP\001Z.git.fiblab.net/sim/pro"
  "tos/go/city/map/v2;mapv2\242\002\003CMX\252\002\013City.Ma"
  "p.V2\312\002\013City\\Map\\V2\342\002\027City\\Map\\V2\\GPBMeta"
  "data\352\002\rCity::Map::V2b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_deps[1] = {
  &::descriptor_table_city_2fmap_2fv2_2flight_2eproto,
};
static ::_pbi::once_flag descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto = {
    false, false, 1388, descriptor_table_protodef_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto,
    "city/map/v2/traffic_light_service.proto",
    &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_once, descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_deps, 1, 8,
    schemas, file_default_instances, TableStruct_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto::offsets,
    file_level_metadata_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto, file_level_enum_descriptors_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto,
    file_level_service_descriptors_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_getter() {
  return &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto(&descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto);
namespace city {
namespace map {
namespace v2 {

// ===================================================================

class GetTrafficLightRequest::_Internal {
 public:
};

GetTrafficLightRequest::GetTrafficLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetTrafficLightRequest)
}
GetTrafficLightRequest::GetTrafficLightRequest(const GetTrafficLightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTrafficLightRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.junction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.junction_id_ = from._impl_.junction_id_;
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetTrafficLightRequest)
}

inline void GetTrafficLightRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.junction_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTrafficLightRequest::~GetTrafficLightRequest() {
  // @@protoc_insertion_point(destructor:city.map.v2.GetTrafficLightRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTrafficLightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetTrafficLightRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTrafficLightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.GetTrafficLightRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.junction_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTrafficLightRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 junction_id = 1 [json_name = "junctionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.junction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTrafficLightRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.GetTrafficLightRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 junction_id = 1 [json_name = "junctionId"];
  if (this->_internal_junction_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_junction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.GetTrafficLightRequest)
  return target;
}

size_t GetTrafficLightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.GetTrafficLightRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 junction_id = 1 [json_name = "junctionId"];
  if (this->_internal_junction_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_junction_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTrafficLightRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTrafficLightRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTrafficLightRequest::GetClassData() const { return &_class_data_; }


void GetTrafficLightRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTrafficLightRequest*>(&to_msg);
  auto& from = static_cast<const GetTrafficLightRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.GetTrafficLightRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_junction_id() != 0) {
    _this->_internal_set_junction_id(from._internal_junction_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTrafficLightRequest::CopyFrom(const GetTrafficLightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.GetTrafficLightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrafficLightRequest::IsInitialized() const {
  return true;
}

void GetTrafficLightRequest::InternalSwap(GetTrafficLightRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.junction_id_, other->_impl_.junction_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTrafficLightRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto[0]);
}

// ===================================================================

class GetTrafficLightResponse::_Internal {
 public:
  static const ::city::map::v2::TrafficLight& traffic_light(const GetTrafficLightResponse* msg);
};

const ::city::map::v2::TrafficLight&
GetTrafficLightResponse::_Internal::traffic_light(const GetTrafficLightResponse* msg) {
  return *msg->_impl_.traffic_light_;
}
void GetTrafficLightResponse::clear_traffic_light() {
  if (GetArenaForAllocation() == nullptr && _impl_.traffic_light_ != nullptr) {
    delete _impl_.traffic_light_;
  }
  _impl_.traffic_light_ = nullptr;
}
GetTrafficLightResponse::GetTrafficLightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.GetTrafficLightResponse)
}
GetTrafficLightResponse::GetTrafficLightResponse(const GetTrafficLightResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTrafficLightResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.traffic_light_){nullptr}
    , decltype(_impl_.time_remaining_){}
    , decltype(_impl_.phase_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_traffic_light()) {
    _this->_impl_.traffic_light_ = new ::city::map::v2::TrafficLight(*from._impl_.traffic_light_);
  }
  ::memcpy(&_impl_.time_remaining_, &from._impl_.time_remaining_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.phase_index_) -
    reinterpret_cast<char*>(&_impl_.time_remaining_)) + sizeof(_impl_.phase_index_));
  // @@protoc_insertion_point(copy_constructor:city.map.v2.GetTrafficLightResponse)
}

inline void GetTrafficLightResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.traffic_light_){nullptr}
    , decltype(_impl_.time_remaining_){0}
    , decltype(_impl_.phase_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTrafficLightResponse::~GetTrafficLightResponse() {
  // @@protoc_insertion_point(destructor:city.map.v2.GetTrafficLightResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTrafficLightResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.traffic_light_;
}

void GetTrafficLightResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTrafficLightResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.GetTrafficLightResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.traffic_light_ != nullptr) {
    delete _impl_.traffic_light_;
  }
  _impl_.traffic_light_ = nullptr;
  ::memset(&_impl_.time_remaining_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.phase_index_) -
      reinterpret_cast<char*>(&_impl_.time_remaining_)) + sizeof(_impl_.phase_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTrafficLightResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.map.v2.TrafficLight traffic_light = 1 [json_name = "trafficLight"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 phase_index = 2 [json_name = "phaseIndex"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.phase_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double time_remaining = 3 [json_name = "timeRemaining"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.time_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTrafficLightResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.GetTrafficLightResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.map.v2.TrafficLight traffic_light = 1 [json_name = "trafficLight"];
  if (this->_internal_has_traffic_light()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::traffic_light(this),
        _Internal::traffic_light(this).GetCachedSize(), target, stream);
  }

  // int32 phase_index = 2 [json_name = "phaseIndex"];
  if (this->_internal_phase_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_phase_index(), target);
  }

  // double time_remaining = 3 [json_name = "timeRemaining"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_remaining = this->_internal_time_remaining();
  uint64_t raw_time_remaining;
  memcpy(&raw_time_remaining, &tmp_time_remaining, sizeof(tmp_time_remaining));
  if (raw_time_remaining != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_time_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.GetTrafficLightResponse)
  return target;
}

size_t GetTrafficLightResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.GetTrafficLightResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.map.v2.TrafficLight traffic_light = 1 [json_name = "trafficLight"];
  if (this->_internal_has_traffic_light()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.traffic_light_);
  }

  // double time_remaining = 3 [json_name = "timeRemaining"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_remaining = this->_internal_time_remaining();
  uint64_t raw_time_remaining;
  memcpy(&raw_time_remaining, &tmp_time_remaining, sizeof(tmp_time_remaining));
  if (raw_time_remaining != 0) {
    total_size += 1 + 8;
  }

  // int32 phase_index = 2 [json_name = "phaseIndex"];
  if (this->_internal_phase_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_phase_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTrafficLightResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTrafficLightResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTrafficLightResponse::GetClassData() const { return &_class_data_; }


void GetTrafficLightResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTrafficLightResponse*>(&to_msg);
  auto& from = static_cast<const GetTrafficLightResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.GetTrafficLightResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_traffic_light()) {
    _this->_internal_mutable_traffic_light()->::city::map::v2::TrafficLight::MergeFrom(
        from._internal_traffic_light());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_remaining = from._internal_time_remaining();
  uint64_t raw_time_remaining;
  memcpy(&raw_time_remaining, &tmp_time_remaining, sizeof(tmp_time_remaining));
  if (raw_time_remaining != 0) {
    _this->_internal_set_time_remaining(from._internal_time_remaining());
  }
  if (from._internal_phase_index() != 0) {
    _this->_internal_set_phase_index(from._internal_phase_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTrafficLightResponse::CopyFrom(const GetTrafficLightResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.GetTrafficLightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTrafficLightResponse::IsInitialized() const {
  return true;
}

void GetTrafficLightResponse::InternalSwap(GetTrafficLightResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTrafficLightResponse, _impl_.phase_index_)
      + sizeof(GetTrafficLightResponse::_impl_.phase_index_)
      - PROTOBUF_FIELD_OFFSET(GetTrafficLightResponse, _impl_.traffic_light_)>(
          reinterpret_cast<char*>(&_impl_.traffic_light_),
          reinterpret_cast<char*>(&other->_impl_.traffic_light_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTrafficLightResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto[1]);
}

// ===================================================================

class SetTrafficLightRequest::_Internal {
 public:
  static const ::city::map::v2::TrafficLight& traffic_light(const SetTrafficLightRequest* msg);
};

const ::city::map::v2::TrafficLight&
SetTrafficLightRequest::_Internal::traffic_light(const SetTrafficLightRequest* msg) {
  return *msg->_impl_.traffic_light_;
}
void SetTrafficLightRequest::clear_traffic_light() {
  if (GetArenaForAllocation() == nullptr && _impl_.traffic_light_ != nullptr) {
    delete _impl_.traffic_light_;
  }
  _impl_.traffic_light_ = nullptr;
}
SetTrafficLightRequest::SetTrafficLightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.SetTrafficLightRequest)
}
SetTrafficLightRequest::SetTrafficLightRequest(const SetTrafficLightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetTrafficLightRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.traffic_light_){nullptr}
    , decltype(_impl_.time_remaining_){}
    , decltype(_impl_.phase_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_traffic_light()) {
    _this->_impl_.traffic_light_ = new ::city::map::v2::TrafficLight(*from._impl_.traffic_light_);
  }
  ::memcpy(&_impl_.time_remaining_, &from._impl_.time_remaining_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.phase_index_) -
    reinterpret_cast<char*>(&_impl_.time_remaining_)) + sizeof(_impl_.phase_index_));
  // @@protoc_insertion_point(copy_constructor:city.map.v2.SetTrafficLightRequest)
}

inline void SetTrafficLightRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.traffic_light_){nullptr}
    , decltype(_impl_.time_remaining_){0}
    , decltype(_impl_.phase_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetTrafficLightRequest::~SetTrafficLightRequest() {
  // @@protoc_insertion_point(destructor:city.map.v2.SetTrafficLightRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetTrafficLightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.traffic_light_;
}

void SetTrafficLightRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetTrafficLightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.SetTrafficLightRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.traffic_light_ != nullptr) {
    delete _impl_.traffic_light_;
  }
  _impl_.traffic_light_ = nullptr;
  ::memset(&_impl_.time_remaining_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.phase_index_) -
      reinterpret_cast<char*>(&_impl_.time_remaining_)) + sizeof(_impl_.phase_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTrafficLightRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.map.v2.TrafficLight traffic_light = 1 [json_name = "trafficLight"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_traffic_light(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 phase_index = 2 [json_name = "phaseIndex"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.phase_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double time_remaining = 3 [json_name = "timeRemaining"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.time_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetTrafficLightRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.SetTrafficLightRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.map.v2.TrafficLight traffic_light = 1 [json_name = "trafficLight"];
  if (this->_internal_has_traffic_light()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::traffic_light(this),
        _Internal::traffic_light(this).GetCachedSize(), target, stream);
  }

  // int32 phase_index = 2 [json_name = "phaseIndex"];
  if (this->_internal_phase_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_phase_index(), target);
  }

  // double time_remaining = 3 [json_name = "timeRemaining"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_remaining = this->_internal_time_remaining();
  uint64_t raw_time_remaining;
  memcpy(&raw_time_remaining, &tmp_time_remaining, sizeof(tmp_time_remaining));
  if (raw_time_remaining != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_time_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.SetTrafficLightRequest)
  return target;
}

size_t SetTrafficLightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.SetTrafficLightRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.map.v2.TrafficLight traffic_light = 1 [json_name = "trafficLight"];
  if (this->_internal_has_traffic_light()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.traffic_light_);
  }

  // double time_remaining = 3 [json_name = "timeRemaining"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_remaining = this->_internal_time_remaining();
  uint64_t raw_time_remaining;
  memcpy(&raw_time_remaining, &tmp_time_remaining, sizeof(tmp_time_remaining));
  if (raw_time_remaining != 0) {
    total_size += 1 + 8;
  }

  // int32 phase_index = 2 [json_name = "phaseIndex"];
  if (this->_internal_phase_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_phase_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTrafficLightRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetTrafficLightRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTrafficLightRequest::GetClassData() const { return &_class_data_; }


void SetTrafficLightRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetTrafficLightRequest*>(&to_msg);
  auto& from = static_cast<const SetTrafficLightRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.SetTrafficLightRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_traffic_light()) {
    _this->_internal_mutable_traffic_light()->::city::map::v2::TrafficLight::MergeFrom(
        from._internal_traffic_light());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_remaining = from._internal_time_remaining();
  uint64_t raw_time_remaining;
  memcpy(&raw_time_remaining, &tmp_time_remaining, sizeof(tmp_time_remaining));
  if (raw_time_remaining != 0) {
    _this->_internal_set_time_remaining(from._internal_time_remaining());
  }
  if (from._internal_phase_index() != 0) {
    _this->_internal_set_phase_index(from._internal_phase_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTrafficLightRequest::CopyFrom(const SetTrafficLightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.SetTrafficLightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTrafficLightRequest::IsInitialized() const {
  return true;
}

void SetTrafficLightRequest::InternalSwap(SetTrafficLightRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetTrafficLightRequest, _impl_.phase_index_)
      + sizeof(SetTrafficLightRequest::_impl_.phase_index_)
      - PROTOBUF_FIELD_OFFSET(SetTrafficLightRequest, _impl_.traffic_light_)>(
          reinterpret_cast<char*>(&_impl_.traffic_light_),
          reinterpret_cast<char*>(&other->_impl_.traffic_light_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTrafficLightRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto[2]);
}

// ===================================================================

class SetTrafficLightResponse::_Internal {
 public:
};

SetTrafficLightResponse::SetTrafficLightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.map.v2.SetTrafficLightResponse)
}
SetTrafficLightResponse::SetTrafficLightResponse(const SetTrafficLightResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetTrafficLightResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.map.v2.SetTrafficLightResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTrafficLightResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTrafficLightResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetTrafficLightResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto[3]);
}

// ===================================================================

class SetTrafficLightPhaseRequest::_Internal {
 public:
};

SetTrafficLightPhaseRequest::SetTrafficLightPhaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.SetTrafficLightPhaseRequest)
}
SetTrafficLightPhaseRequest::SetTrafficLightPhaseRequest(const SetTrafficLightPhaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetTrafficLightPhaseRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.junction_id_){}
    , decltype(_impl_.phase_index_){}
    , decltype(_impl_.time_remaining_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.junction_id_, &from._impl_.junction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_remaining_) -
    reinterpret_cast<char*>(&_impl_.junction_id_)) + sizeof(_impl_.time_remaining_));
  // @@protoc_insertion_point(copy_constructor:city.map.v2.SetTrafficLightPhaseRequest)
}

inline void SetTrafficLightPhaseRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.junction_id_){0}
    , decltype(_impl_.phase_index_){0}
    , decltype(_impl_.time_remaining_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetTrafficLightPhaseRequest::~SetTrafficLightPhaseRequest() {
  // @@protoc_insertion_point(destructor:city.map.v2.SetTrafficLightPhaseRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetTrafficLightPhaseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetTrafficLightPhaseRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetTrafficLightPhaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.SetTrafficLightPhaseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.junction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_remaining_) -
      reinterpret_cast<char*>(&_impl_.junction_id_)) + sizeof(_impl_.time_remaining_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTrafficLightPhaseRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 junction_id = 1 [json_name = "junctionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.junction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 phase_index = 2 [json_name = "phaseIndex"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.phase_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double time_remaining = 3 [json_name = "timeRemaining"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.time_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetTrafficLightPhaseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.SetTrafficLightPhaseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 junction_id = 1 [json_name = "junctionId"];
  if (this->_internal_junction_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_junction_id(), target);
  }

  // int32 phase_index = 2 [json_name = "phaseIndex"];
  if (this->_internal_phase_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_phase_index(), target);
  }

  // double time_remaining = 3 [json_name = "timeRemaining"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_remaining = this->_internal_time_remaining();
  uint64_t raw_time_remaining;
  memcpy(&raw_time_remaining, &tmp_time_remaining, sizeof(tmp_time_remaining));
  if (raw_time_remaining != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_time_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.SetTrafficLightPhaseRequest)
  return target;
}

size_t SetTrafficLightPhaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.SetTrafficLightPhaseRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 junction_id = 1 [json_name = "junctionId"];
  if (this->_internal_junction_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_junction_id());
  }

  // int32 phase_index = 2 [json_name = "phaseIndex"];
  if (this->_internal_phase_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_phase_index());
  }

  // double time_remaining = 3 [json_name = "timeRemaining"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_remaining = this->_internal_time_remaining();
  uint64_t raw_time_remaining;
  memcpy(&raw_time_remaining, &tmp_time_remaining, sizeof(tmp_time_remaining));
  if (raw_time_remaining != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTrafficLightPhaseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetTrafficLightPhaseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTrafficLightPhaseRequest::GetClassData() const { return &_class_data_; }


void SetTrafficLightPhaseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetTrafficLightPhaseRequest*>(&to_msg);
  auto& from = static_cast<const SetTrafficLightPhaseRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.SetTrafficLightPhaseRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_junction_id() != 0) {
    _this->_internal_set_junction_id(from._internal_junction_id());
  }
  if (from._internal_phase_index() != 0) {
    _this->_internal_set_phase_index(from._internal_phase_index());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_remaining = from._internal_time_remaining();
  uint64_t raw_time_remaining;
  memcpy(&raw_time_remaining, &tmp_time_remaining, sizeof(tmp_time_remaining));
  if (raw_time_remaining != 0) {
    _this->_internal_set_time_remaining(from._internal_time_remaining());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTrafficLightPhaseRequest::CopyFrom(const SetTrafficLightPhaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.SetTrafficLightPhaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTrafficLightPhaseRequest::IsInitialized() const {
  return true;
}

void SetTrafficLightPhaseRequest::InternalSwap(SetTrafficLightPhaseRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetTrafficLightPhaseRequest, _impl_.time_remaining_)
      + sizeof(SetTrafficLightPhaseRequest::_impl_.time_remaining_)
      - PROTOBUF_FIELD_OFFSET(SetTrafficLightPhaseRequest, _impl_.junction_id_)>(
          reinterpret_cast<char*>(&_impl_.junction_id_),
          reinterpret_cast<char*>(&other->_impl_.junction_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTrafficLightPhaseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto[4]);
}

// ===================================================================

class SetTrafficLightPhaseResponse::_Internal {
 public:
};

SetTrafficLightPhaseResponse::SetTrafficLightPhaseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.map.v2.SetTrafficLightPhaseResponse)
}
SetTrafficLightPhaseResponse::SetTrafficLightPhaseResponse(const SetTrafficLightPhaseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetTrafficLightPhaseResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.map.v2.SetTrafficLightPhaseResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTrafficLightPhaseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTrafficLightPhaseResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetTrafficLightPhaseResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto[5]);
}

// ===================================================================

class SetTrafficLightStatusRequest::_Internal {
 public:
};

SetTrafficLightStatusRequest::SetTrafficLightStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.map.v2.SetTrafficLightStatusRequest)
}
SetTrafficLightStatusRequest::SetTrafficLightStatusRequest(const SetTrafficLightStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetTrafficLightStatusRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.junction_id_){}
    , decltype(_impl_.ok_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.junction_id_, &from._impl_.junction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ok_) -
    reinterpret_cast<char*>(&_impl_.junction_id_)) + sizeof(_impl_.ok_));
  // @@protoc_insertion_point(copy_constructor:city.map.v2.SetTrafficLightStatusRequest)
}

inline void SetTrafficLightStatusRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.junction_id_){0}
    , decltype(_impl_.ok_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetTrafficLightStatusRequest::~SetTrafficLightStatusRequest() {
  // @@protoc_insertion_point(destructor:city.map.v2.SetTrafficLightStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetTrafficLightStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetTrafficLightStatusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetTrafficLightStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.map.v2.SetTrafficLightStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.junction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ok_) -
      reinterpret_cast<char*>(&_impl_.junction_id_)) + sizeof(_impl_.ok_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTrafficLightStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 junction_id = 1 [json_name = "junctionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.junction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ok = 2 [json_name = "ok"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetTrafficLightStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.map.v2.SetTrafficLightStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 junction_id = 1 [json_name = "junctionId"];
  if (this->_internal_junction_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_junction_id(), target);
  }

  // bool ok = 2 [json_name = "ok"];
  if (this->_internal_ok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.map.v2.SetTrafficLightStatusRequest)
  return target;
}

size_t SetTrafficLightStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.map.v2.SetTrafficLightStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 junction_id = 1 [json_name = "junctionId"];
  if (this->_internal_junction_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_junction_id());
  }

  // bool ok = 2 [json_name = "ok"];
  if (this->_internal_ok() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTrafficLightStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetTrafficLightStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTrafficLightStatusRequest::GetClassData() const { return &_class_data_; }


void SetTrafficLightStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetTrafficLightStatusRequest*>(&to_msg);
  auto& from = static_cast<const SetTrafficLightStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.map.v2.SetTrafficLightStatusRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_junction_id() != 0) {
    _this->_internal_set_junction_id(from._internal_junction_id());
  }
  if (from._internal_ok() != 0) {
    _this->_internal_set_ok(from._internal_ok());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetTrafficLightStatusRequest::CopyFrom(const SetTrafficLightStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.map.v2.SetTrafficLightStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTrafficLightStatusRequest::IsInitialized() const {
  return true;
}

void SetTrafficLightStatusRequest::InternalSwap(SetTrafficLightStatusRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetTrafficLightStatusRequest, _impl_.ok_)
      + sizeof(SetTrafficLightStatusRequest::_impl_.ok_)
      - PROTOBUF_FIELD_OFFSET(SetTrafficLightStatusRequest, _impl_.junction_id_)>(
          reinterpret_cast<char*>(&_impl_.junction_id_),
          reinterpret_cast<char*>(&other->_impl_.junction_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTrafficLightStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto[6]);
}

// ===================================================================

class SetTrafficLightStatusResponse::_Internal {
 public:
};

SetTrafficLightStatusResponse::SetTrafficLightStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.map.v2.SetTrafficLightStatusResponse)
}
SetTrafficLightStatusResponse::SetTrafficLightStatusResponse(const SetTrafficLightStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetTrafficLightStatusResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.map.v2.SetTrafficLightStatusResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetTrafficLightStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetTrafficLightStatusResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetTrafficLightStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_getter, &descriptor_table_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto_once,
      file_level_metadata_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace map
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::map::v2::GetTrafficLightRequest*
Arena::CreateMaybeMessage< ::city::map::v2::GetTrafficLightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetTrafficLightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::GetTrafficLightResponse*
Arena::CreateMaybeMessage< ::city::map::v2::GetTrafficLightResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::GetTrafficLightResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::SetTrafficLightRequest*
Arena::CreateMaybeMessage< ::city::map::v2::SetTrafficLightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::SetTrafficLightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::SetTrafficLightResponse*
Arena::CreateMaybeMessage< ::city::map::v2::SetTrafficLightResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::SetTrafficLightResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::SetTrafficLightPhaseRequest*
Arena::CreateMaybeMessage< ::city::map::v2::SetTrafficLightPhaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::SetTrafficLightPhaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::SetTrafficLightPhaseResponse*
Arena::CreateMaybeMessage< ::city::map::v2::SetTrafficLightPhaseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::SetTrafficLightPhaseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::SetTrafficLightStatusRequest*
Arena::CreateMaybeMessage< ::city::map::v2::SetTrafficLightStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::SetTrafficLightStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::map::v2::SetTrafficLightStatusResponse*
Arena::CreateMaybeMessage< ::city::map::v2::SetTrafficLightStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::map::v2::SetTrafficLightStatusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
