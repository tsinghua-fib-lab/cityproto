// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/map/v2/traffic_light_service.proto
#ifndef GRPC_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto__INCLUDED
#define GRPC_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto__INCLUDED

#include "city/map/v2/traffic_light_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace city {
namespace map {
namespace v2 {

class TrafficLightService final {
 public:
  static constexpr char const* service_full_name() {
    return "city.map.v2.TrafficLightService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 获取路口的红绿灯信息
    // Get traffic light information
    virtual ::grpc::Status GetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest& request, ::city::map::v2::GetTrafficLightResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetTrafficLightResponse>> AsyncGetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetTrafficLightResponse>>(AsyncGetTrafficLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetTrafficLightResponse>> PrepareAsyncGetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetTrafficLightResponse>>(PrepareAsyncGetTrafficLightRaw(context, request, cq));
    }
    // 设置路口的红绿灯信息
    // Set traffic light information
    virtual ::grpc::Status SetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest& request, ::city::map::v2::SetTrafficLightResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightResponse>> AsyncSetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightResponse>>(AsyncSetTrafficLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightResponse>> PrepareAsyncSetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightResponse>>(PrepareAsyncSetTrafficLightRaw(context, request, cq));
    }
    // 设置路口的红绿灯相位
    // Set traffic light phase
    virtual ::grpc::Status SetTrafficLightPhase(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest& request, ::city::map::v2::SetTrafficLightPhaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightPhaseResponse>> AsyncSetTrafficLightPhase(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightPhaseResponse>>(AsyncSetTrafficLightPhaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightPhaseResponse>> PrepareAsyncSetTrafficLightPhase(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightPhaseResponse>>(PrepareAsyncSetTrafficLightPhaseRaw(context, request, cq));
    }
    // 设置路口的红绿灯状态
    // Set traffic light status
    virtual ::grpc::Status SetTrafficLightStatus(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest& request, ::city::map::v2::SetTrafficLightStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightStatusResponse>> AsyncSetTrafficLightStatus(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightStatusResponse>>(AsyncSetTrafficLightStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightStatusResponse>> PrepareAsyncSetTrafficLightStatus(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightStatusResponse>>(PrepareAsyncSetTrafficLightStatusRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 获取路口的红绿灯信息
      // Get traffic light information
      virtual void GetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest* request, ::city::map::v2::GetTrafficLightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest* request, ::city::map::v2::GetTrafficLightResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 设置路口的红绿灯信息
      // Set traffic light information
      virtual void SetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest* request, ::city::map::v2::SetTrafficLightResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest* request, ::city::map::v2::SetTrafficLightResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 设置路口的红绿灯相位
      // Set traffic light phase
      virtual void SetTrafficLightPhase(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest* request, ::city::map::v2::SetTrafficLightPhaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTrafficLightPhase(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest* request, ::city::map::v2::SetTrafficLightPhaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 设置路口的红绿灯状态
      // Set traffic light status
      virtual void SetTrafficLightStatus(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest* request, ::city::map::v2::SetTrafficLightStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTrafficLightStatus(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest* request, ::city::map::v2::SetTrafficLightStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetTrafficLightResponse>* AsyncGetTrafficLightRaw(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::GetTrafficLightResponse>* PrepareAsyncGetTrafficLightRaw(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightResponse>* AsyncSetTrafficLightRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightResponse>* PrepareAsyncSetTrafficLightRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightPhaseResponse>* AsyncSetTrafficLightPhaseRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightPhaseResponse>* PrepareAsyncSetTrafficLightPhaseRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightStatusResponse>* AsyncSetTrafficLightStatusRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::map::v2::SetTrafficLightStatusResponse>* PrepareAsyncSetTrafficLightStatusRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest& request, ::city::map::v2::GetTrafficLightResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetTrafficLightResponse>> AsyncGetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetTrafficLightResponse>>(AsyncGetTrafficLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetTrafficLightResponse>> PrepareAsyncGetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetTrafficLightResponse>>(PrepareAsyncGetTrafficLightRaw(context, request, cq));
    }
    ::grpc::Status SetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest& request, ::city::map::v2::SetTrafficLightResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightResponse>> AsyncSetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightResponse>>(AsyncSetTrafficLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightResponse>> PrepareAsyncSetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightResponse>>(PrepareAsyncSetTrafficLightRaw(context, request, cq));
    }
    ::grpc::Status SetTrafficLightPhase(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest& request, ::city::map::v2::SetTrafficLightPhaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightPhaseResponse>> AsyncSetTrafficLightPhase(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightPhaseResponse>>(AsyncSetTrafficLightPhaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightPhaseResponse>> PrepareAsyncSetTrafficLightPhase(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightPhaseResponse>>(PrepareAsyncSetTrafficLightPhaseRaw(context, request, cq));
    }
    ::grpc::Status SetTrafficLightStatus(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest& request, ::city::map::v2::SetTrafficLightStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightStatusResponse>> AsyncSetTrafficLightStatus(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightStatusResponse>>(AsyncSetTrafficLightStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightStatusResponse>> PrepareAsyncSetTrafficLightStatus(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightStatusResponse>>(PrepareAsyncSetTrafficLightStatusRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest* request, ::city::map::v2::GetTrafficLightResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest* request, ::city::map::v2::GetTrafficLightResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest* request, ::city::map::v2::SetTrafficLightResponse* response, std::function<void(::grpc::Status)>) override;
      void SetTrafficLight(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest* request, ::city::map::v2::SetTrafficLightResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetTrafficLightPhase(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest* request, ::city::map::v2::SetTrafficLightPhaseResponse* response, std::function<void(::grpc::Status)>) override;
      void SetTrafficLightPhase(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest* request, ::city::map::v2::SetTrafficLightPhaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetTrafficLightStatus(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest* request, ::city::map::v2::SetTrafficLightStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void SetTrafficLightStatus(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest* request, ::city::map::v2::SetTrafficLightStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetTrafficLightResponse>* AsyncGetTrafficLightRaw(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::GetTrafficLightResponse>* PrepareAsyncGetTrafficLightRaw(::grpc::ClientContext* context, const ::city::map::v2::GetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightResponse>* AsyncSetTrafficLightRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightResponse>* PrepareAsyncSetTrafficLightRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightPhaseResponse>* AsyncSetTrafficLightPhaseRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightPhaseResponse>* PrepareAsyncSetTrafficLightPhaseRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightStatusResponse>* AsyncSetTrafficLightStatusRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::map::v2::SetTrafficLightStatusResponse>* PrepareAsyncSetTrafficLightStatusRaw(::grpc::ClientContext* context, const ::city::map::v2::SetTrafficLightStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetTrafficLight_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTrafficLight_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTrafficLightPhase_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTrafficLightStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 获取路口的红绿灯信息
    // Get traffic light information
    virtual ::grpc::Status GetTrafficLight(::grpc::ServerContext* context, const ::city::map::v2::GetTrafficLightRequest* request, ::city::map::v2::GetTrafficLightResponse* response);
    // 设置路口的红绿灯信息
    // Set traffic light information
    virtual ::grpc::Status SetTrafficLight(::grpc::ServerContext* context, const ::city::map::v2::SetTrafficLightRequest* request, ::city::map::v2::SetTrafficLightResponse* response);
    // 设置路口的红绿灯相位
    // Set traffic light phase
    virtual ::grpc::Status SetTrafficLightPhase(::grpc::ServerContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest* request, ::city::map::v2::SetTrafficLightPhaseResponse* response);
    // 设置路口的红绿灯状态
    // Set traffic light status
    virtual ::grpc::Status SetTrafficLightStatus(::grpc::ServerContext* context, const ::city::map::v2::SetTrafficLightStatusRequest* request, ::city::map::v2::SetTrafficLightStatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTrafficLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTrafficLight() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetTrafficLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrafficLight(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetTrafficLightRequest* /*request*/, ::city::map::v2::GetTrafficLightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTrafficLight(::grpc::ServerContext* context, ::city::map::v2::GetTrafficLightRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::map::v2::GetTrafficLightResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTrafficLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetTrafficLight() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetTrafficLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTrafficLight(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightRequest* /*request*/, ::city::map::v2::SetTrafficLightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTrafficLight(::grpc::ServerContext* context, ::city::map::v2::SetTrafficLightRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::map::v2::SetTrafficLightResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTrafficLightPhase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetTrafficLightPhase() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetTrafficLightPhase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTrafficLightPhase(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightPhaseRequest* /*request*/, ::city::map::v2::SetTrafficLightPhaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTrafficLightPhase(::grpc::ServerContext* context, ::city::map::v2::SetTrafficLightPhaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::map::v2::SetTrafficLightPhaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTrafficLightStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetTrafficLightStatus() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetTrafficLightStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTrafficLightStatus(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightStatusRequest* /*request*/, ::city::map::v2::SetTrafficLightStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTrafficLightStatus(::grpc::ServerContext* context, ::city::map::v2::SetTrafficLightStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::map::v2::SetTrafficLightStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetTrafficLight<WithAsyncMethod_SetTrafficLight<WithAsyncMethod_SetTrafficLightPhase<WithAsyncMethod_SetTrafficLightStatus<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetTrafficLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTrafficLight() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::city::map::v2::GetTrafficLightRequest, ::city::map::v2::GetTrafficLightResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::map::v2::GetTrafficLightRequest* request, ::city::map::v2::GetTrafficLightResponse* response) { return this->GetTrafficLight(context, request, response); }));}
    void SetMessageAllocatorFor_GetTrafficLight(
        ::grpc::MessageAllocator< ::city::map::v2::GetTrafficLightRequest, ::city::map::v2::GetTrafficLightResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::map::v2::GetTrafficLightRequest, ::city::map::v2::GetTrafficLightResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTrafficLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrafficLight(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetTrafficLightRequest* /*request*/, ::city::map::v2::GetTrafficLightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTrafficLight(
      ::grpc::CallbackServerContext* /*context*/, const ::city::map::v2::GetTrafficLightRequest* /*request*/, ::city::map::v2::GetTrafficLightResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetTrafficLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetTrafficLight() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::city::map::v2::SetTrafficLightRequest, ::city::map::v2::SetTrafficLightResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::map::v2::SetTrafficLightRequest* request, ::city::map::v2::SetTrafficLightResponse* response) { return this->SetTrafficLight(context, request, response); }));}
    void SetMessageAllocatorFor_SetTrafficLight(
        ::grpc::MessageAllocator< ::city::map::v2::SetTrafficLightRequest, ::city::map::v2::SetTrafficLightResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::map::v2::SetTrafficLightRequest, ::city::map::v2::SetTrafficLightResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetTrafficLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTrafficLight(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightRequest* /*request*/, ::city::map::v2::SetTrafficLightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTrafficLight(
      ::grpc::CallbackServerContext* /*context*/, const ::city::map::v2::SetTrafficLightRequest* /*request*/, ::city::map::v2::SetTrafficLightResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetTrafficLightPhase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetTrafficLightPhase() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::city::map::v2::SetTrafficLightPhaseRequest, ::city::map::v2::SetTrafficLightPhaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::map::v2::SetTrafficLightPhaseRequest* request, ::city::map::v2::SetTrafficLightPhaseResponse* response) { return this->SetTrafficLightPhase(context, request, response); }));}
    void SetMessageAllocatorFor_SetTrafficLightPhase(
        ::grpc::MessageAllocator< ::city::map::v2::SetTrafficLightPhaseRequest, ::city::map::v2::SetTrafficLightPhaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::map::v2::SetTrafficLightPhaseRequest, ::city::map::v2::SetTrafficLightPhaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetTrafficLightPhase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTrafficLightPhase(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightPhaseRequest* /*request*/, ::city::map::v2::SetTrafficLightPhaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTrafficLightPhase(
      ::grpc::CallbackServerContext* /*context*/, const ::city::map::v2::SetTrafficLightPhaseRequest* /*request*/, ::city::map::v2::SetTrafficLightPhaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetTrafficLightStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetTrafficLightStatus() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::city::map::v2::SetTrafficLightStatusRequest, ::city::map::v2::SetTrafficLightStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::map::v2::SetTrafficLightStatusRequest* request, ::city::map::v2::SetTrafficLightStatusResponse* response) { return this->SetTrafficLightStatus(context, request, response); }));}
    void SetMessageAllocatorFor_SetTrafficLightStatus(
        ::grpc::MessageAllocator< ::city::map::v2::SetTrafficLightStatusRequest, ::city::map::v2::SetTrafficLightStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::map::v2::SetTrafficLightStatusRequest, ::city::map::v2::SetTrafficLightStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetTrafficLightStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTrafficLightStatus(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightStatusRequest* /*request*/, ::city::map::v2::SetTrafficLightStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTrafficLightStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::city::map::v2::SetTrafficLightStatusRequest* /*request*/, ::city::map::v2::SetTrafficLightStatusResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetTrafficLight<WithCallbackMethod_SetTrafficLight<WithCallbackMethod_SetTrafficLightPhase<WithCallbackMethod_SetTrafficLightStatus<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetTrafficLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTrafficLight() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetTrafficLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrafficLight(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetTrafficLightRequest* /*request*/, ::city::map::v2::GetTrafficLightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTrafficLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetTrafficLight() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetTrafficLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTrafficLight(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightRequest* /*request*/, ::city::map::v2::SetTrafficLightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTrafficLightPhase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetTrafficLightPhase() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetTrafficLightPhase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTrafficLightPhase(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightPhaseRequest* /*request*/, ::city::map::v2::SetTrafficLightPhaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTrafficLightStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetTrafficLightStatus() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetTrafficLightStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTrafficLightStatus(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightStatusRequest* /*request*/, ::city::map::v2::SetTrafficLightStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTrafficLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTrafficLight() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetTrafficLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrafficLight(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetTrafficLightRequest* /*request*/, ::city::map::v2::GetTrafficLightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTrafficLight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTrafficLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetTrafficLight() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetTrafficLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTrafficLight(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightRequest* /*request*/, ::city::map::v2::SetTrafficLightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTrafficLight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTrafficLightPhase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetTrafficLightPhase() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetTrafficLightPhase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTrafficLightPhase(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightPhaseRequest* /*request*/, ::city::map::v2::SetTrafficLightPhaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTrafficLightPhase(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTrafficLightStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetTrafficLightStatus() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetTrafficLightStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTrafficLightStatus(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightStatusRequest* /*request*/, ::city::map::v2::SetTrafficLightStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTrafficLightStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTrafficLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTrafficLight() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTrafficLight(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTrafficLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTrafficLight(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetTrafficLightRequest* /*request*/, ::city::map::v2::GetTrafficLightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTrafficLight(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetTrafficLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetTrafficLight() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetTrafficLight(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetTrafficLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTrafficLight(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightRequest* /*request*/, ::city::map::v2::SetTrafficLightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTrafficLight(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetTrafficLightPhase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetTrafficLightPhase() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetTrafficLightPhase(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetTrafficLightPhase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTrafficLightPhase(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightPhaseRequest* /*request*/, ::city::map::v2::SetTrafficLightPhaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTrafficLightPhase(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetTrafficLightStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetTrafficLightStatus() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetTrafficLightStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetTrafficLightStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTrafficLightStatus(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightStatusRequest* /*request*/, ::city::map::v2::SetTrafficLightStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTrafficLightStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTrafficLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTrafficLight() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::map::v2::GetTrafficLightRequest, ::city::map::v2::GetTrafficLightResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::map::v2::GetTrafficLightRequest, ::city::map::v2::GetTrafficLightResponse>* streamer) {
                       return this->StreamedGetTrafficLight(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTrafficLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTrafficLight(::grpc::ServerContext* /*context*/, const ::city::map::v2::GetTrafficLightRequest* /*request*/, ::city::map::v2::GetTrafficLightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTrafficLight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::map::v2::GetTrafficLightRequest,::city::map::v2::GetTrafficLightResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTrafficLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetTrafficLight() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::map::v2::SetTrafficLightRequest, ::city::map::v2::SetTrafficLightResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::map::v2::SetTrafficLightRequest, ::city::map::v2::SetTrafficLightResponse>* streamer) {
                       return this->StreamedSetTrafficLight(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetTrafficLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTrafficLight(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightRequest* /*request*/, ::city::map::v2::SetTrafficLightResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTrafficLight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::map::v2::SetTrafficLightRequest,::city::map::v2::SetTrafficLightResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTrafficLightPhase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetTrafficLightPhase() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::map::v2::SetTrafficLightPhaseRequest, ::city::map::v2::SetTrafficLightPhaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::map::v2::SetTrafficLightPhaseRequest, ::city::map::v2::SetTrafficLightPhaseResponse>* streamer) {
                       return this->StreamedSetTrafficLightPhase(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetTrafficLightPhase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTrafficLightPhase(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightPhaseRequest* /*request*/, ::city::map::v2::SetTrafficLightPhaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTrafficLightPhase(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::map::v2::SetTrafficLightPhaseRequest,::city::map::v2::SetTrafficLightPhaseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTrafficLightStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetTrafficLightStatus() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::map::v2::SetTrafficLightStatusRequest, ::city::map::v2::SetTrafficLightStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::map::v2::SetTrafficLightStatusRequest, ::city::map::v2::SetTrafficLightStatusResponse>* streamer) {
                       return this->StreamedSetTrafficLightStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetTrafficLightStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTrafficLightStatus(::grpc::ServerContext* /*context*/, const ::city::map::v2::SetTrafficLightStatusRequest* /*request*/, ::city::map::v2::SetTrafficLightStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTrafficLightStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::map::v2::SetTrafficLightStatusRequest,::city::map::v2::SetTrafficLightStatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetTrafficLight<WithStreamedUnaryMethod_SetTrafficLight<WithStreamedUnaryMethod_SetTrafficLightPhase<WithStreamedUnaryMethod_SetTrafficLightStatus<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetTrafficLight<WithStreamedUnaryMethod_SetTrafficLight<WithStreamedUnaryMethod_SetTrafficLightPhase<WithStreamedUnaryMethod_SetTrafficLightStatus<Service > > > > StreamedService;
};

}  // namespace v2
}  // namespace map
}  // namespace city


#endif  // GRPC_city_2fmap_2fv2_2ftraffic_5flight_5fservice_2eproto__INCLUDED
