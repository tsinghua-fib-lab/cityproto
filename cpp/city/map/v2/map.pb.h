// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/map/v2/map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2fmap_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2fmap_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "city/geo/v2/geo.pb.h"
#include "city/map/v2/light.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_city_2fmap_2fv2_2fmap_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fmap_2fv2_2fmap_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_city_2fmap_2fv2_2fmap_2eproto;
namespace city {
namespace map {
namespace v2 {
class Aoi;
struct AoiDefaultTypeInternal;
extern AoiDefaultTypeInternal _Aoi_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Junction;
struct JunctionDefaultTypeInternal;
extern JunctionDefaultTypeInternal _Junction_default_instance_;
class JunctionLaneGroup;
struct JunctionLaneGroupDefaultTypeInternal;
extern JunctionLaneGroupDefaultTypeInternal _JunctionLaneGroup_default_instance_;
class Lane;
struct LaneDefaultTypeInternal;
extern LaneDefaultTypeInternal _Lane_default_instance_;
class LaneConnection;
struct LaneConnectionDefaultTypeInternal;
extern LaneConnectionDefaultTypeInternal _LaneConnection_default_instance_;
class LaneOverlap;
struct LaneOverlapDefaultTypeInternal;
extern LaneOverlapDefaultTypeInternal _LaneOverlap_default_instance_;
class Map;
struct MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class NextRoadLane;
struct NextRoadLaneDefaultTypeInternal;
extern NextRoadLaneDefaultTypeInternal _NextRoadLane_default_instance_;
class NextRoadLanePlan;
struct NextRoadLanePlanDefaultTypeInternal;
extern NextRoadLanePlanDefaultTypeInternal _NextRoadLanePlan_default_instance_;
class Poi;
struct PoiDefaultTypeInternal;
extern PoiDefaultTypeInternal _Poi_default_instance_;
class Polyline;
struct PolylineDefaultTypeInternal;
extern PolylineDefaultTypeInternal _Polyline_default_instance_;
class Road;
struct RoadDefaultTypeInternal;
extern RoadDefaultTypeInternal _Road_default_instance_;
}  // namespace v2
}  // namespace map
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace city {
namespace map {
namespace v2 {
enum LaneType : int {
  LANE_TYPE_UNSPECIFIED = 0,
  LANE_TYPE_DRIVING = 1,
  LANE_TYPE_WALKING = 2,
  LaneType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LaneType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LaneType_IsValid(int value);
constexpr LaneType LaneType_MIN = static_cast<LaneType>(0);
constexpr LaneType LaneType_MAX = static_cast<LaneType>(2);
constexpr int LaneType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
LaneType_descriptor();
template <typename T>
const std::string& LaneType_Name(T value) {
  static_assert(std::is_same<T, LaneType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LaneType_Name().");
  return LaneType_Name(static_cast<LaneType>(value));
}
template <>
inline const std::string& LaneType_Name(LaneType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LaneType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool LaneType_Parse(absl::string_view name, LaneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneType>(
      LaneType_descriptor(), name, value);
}
enum LaneTurn : int {
  LANE_TURN_UNSPECIFIED = 0,
  LANE_TURN_STRAIGHT = 1,
  LANE_TURN_LEFT = 2,
  LANE_TURN_RIGHT = 3,
  LANE_TURN_AROUND = 4,
  LaneTurn_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LaneTurn_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LaneTurn_IsValid(int value);
constexpr LaneTurn LaneTurn_MIN = static_cast<LaneTurn>(0);
constexpr LaneTurn LaneTurn_MAX = static_cast<LaneTurn>(4);
constexpr int LaneTurn_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
LaneTurn_descriptor();
template <typename T>
const std::string& LaneTurn_Name(T value) {
  static_assert(std::is_same<T, LaneTurn>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LaneTurn_Name().");
  return LaneTurn_Name(static_cast<LaneTurn>(value));
}
template <>
inline const std::string& LaneTurn_Name(LaneTurn value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LaneTurn_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool LaneTurn_Parse(absl::string_view name, LaneTurn* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneTurn>(
      LaneTurn_descriptor(), name, value);
}
enum LaneConnectionType : int {
  LANE_CONNECTION_TYPE_UNSPECIFIED = 0,
  LANE_CONNECTION_TYPE_HEAD = 1,
  LANE_CONNECTION_TYPE_TAIL = 2,
  LaneConnectionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LaneConnectionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LaneConnectionType_IsValid(int value);
constexpr LaneConnectionType LaneConnectionType_MIN = static_cast<LaneConnectionType>(0);
constexpr LaneConnectionType LaneConnectionType_MAX = static_cast<LaneConnectionType>(2);
constexpr int LaneConnectionType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
LaneConnectionType_descriptor();
template <typename T>
const std::string& LaneConnectionType_Name(T value) {
  static_assert(std::is_same<T, LaneConnectionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LaneConnectionType_Name().");
  return LaneConnectionType_Name(static_cast<LaneConnectionType>(value));
}
template <>
inline const std::string& LaneConnectionType_Name(LaneConnectionType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LaneConnectionType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool LaneConnectionType_Parse(absl::string_view name, LaneConnectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneConnectionType>(
      LaneConnectionType_descriptor(), name, value);
}
enum AoiType : int {
  AOI_TYPE_UNSPECIFIED = 0,
  AOI_TYPE_BUS_STATION = 1,
  AOI_TYPE_OTHER = 2,
  AoiType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AoiType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AoiType_IsValid(int value);
constexpr AoiType AoiType_MIN = static_cast<AoiType>(0);
constexpr AoiType AoiType_MAX = static_cast<AoiType>(2);
constexpr int AoiType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
AoiType_descriptor();
template <typename T>
const std::string& AoiType_Name(T value) {
  static_assert(std::is_same<T, AoiType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AoiType_Name().");
  return AoiType_Name(static_cast<AoiType>(value));
}
template <>
inline const std::string& AoiType_Name(AoiType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AoiType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool AoiType_Parse(absl::string_view name, AoiType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AoiType>(
      AoiType_descriptor(), name, value);
}
enum LandUseType : int {
  LAND_USE_TYPE_UNSPECIFIED = 0,
  LAND_USE_TYPE_COMMERCIAL = 5,
  LAND_USE_TYPE_INDUSTRIAL = 6,
  LAND_USE_TYPE_RESIDENTIAL = 7,
  LAND_USE_TYPE_PUBLIC = 8,
  LAND_USE_TYPE_TRANSPORTATION = 10,
  LAND_USE_TYPE_OTHER = 12,
  LandUseType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LandUseType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LandUseType_IsValid(int value);
constexpr LandUseType LandUseType_MIN = static_cast<LandUseType>(0);
constexpr LandUseType LandUseType_MAX = static_cast<LandUseType>(12);
constexpr int LandUseType_ARRAYSIZE = 12 + 1;
const ::google::protobuf::EnumDescriptor*
LandUseType_descriptor();
template <typename T>
const std::string& LandUseType_Name(T value) {
  static_assert(std::is_same<T, LandUseType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LandUseType_Name().");
  return LandUseType_Name(static_cast<LandUseType>(value));
}
template <>
inline const std::string& LandUseType_Name(LandUseType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LandUseType_descriptor,
                                                 0, 12>(
      static_cast<int>(value));
}
inline bool LandUseType_Parse(absl::string_view name, LandUseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LandUseType>(
      LandUseType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Polyline final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.Polyline) */ {
 public:
  inline Polyline() : Polyline(nullptr) {}
  ~Polyline() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Polyline(::google::protobuf::internal::ConstantInitialized);

  Polyline(const Polyline& from);
  Polyline(Polyline&& from) noexcept
    : Polyline() {
    *this = ::std::move(from);
  }

  inline Polyline& operator=(const Polyline& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polyline& operator=(Polyline&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Polyline& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polyline* internal_default_instance() {
    return reinterpret_cast<const Polyline*>(
               &_Polyline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Polyline& a, Polyline& b) {
    a.Swap(&b);
  }
  inline void Swap(Polyline* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polyline* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Polyline* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Polyline>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Polyline& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Polyline& from) {
    Polyline::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polyline* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.Polyline";
  }
  protected:
  explicit Polyline(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .city.geo.v2.XYPosition nodes = 1 [json_name = "nodes"];
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;

  public:
  void clear_nodes() ;
  ::city::geo::v2::XYPosition* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >*
      mutable_nodes();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>& _internal_nodes() const;
  ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>* _internal_mutable_nodes();
  public:
  const ::city::geo::v2::XYPosition& nodes(int index) const;
  ::city::geo::v2::XYPosition* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >&
      nodes() const;
  // @@protoc_insertion_point(class_scope:city.map.v2.Polyline)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition > nodes_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fmap_2eproto;
};// -------------------------------------------------------------------

class Header final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Header(::google::protobuf::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Header& from) {
    Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.Header";
  }
  protected:
  explicit Header(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDateFieldNumber = 2,
    kProjectionFieldNumber = 7,
    kNorthFieldNumber = 3,
    kSouthFieldNumber = 4,
    kEastFieldNumber = 5,
    kWestFieldNumber = 6,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string date = 2 [json_name = "date"];
  void clear_date() ;
  const std::string& date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_date(Arg_&& arg, Args_... args);
  std::string* mutable_date();
  PROTOBUF_NODISCARD std::string* release_date();
  void set_allocated_date(std::string* ptr);

  private:
  const std::string& _internal_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date(
      const std::string& value);
  std::string* _internal_mutable_date();

  public:
  // string projection = 7 [json_name = "projection"];
  void clear_projection() ;
  const std::string& projection() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_projection(Arg_&& arg, Args_... args);
  std::string* mutable_projection();
  PROTOBUF_NODISCARD std::string* release_projection();
  void set_allocated_projection(std::string* ptr);

  private:
  const std::string& _internal_projection() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_projection(
      const std::string& value);
  std::string* _internal_mutable_projection();

  public:
  // double north = 3 [json_name = "north"];
  void clear_north() ;
  double north() const;
  void set_north(double value);

  private:
  double _internal_north() const;
  void _internal_set_north(double value);

  public:
  // double south = 4 [json_name = "south"];
  void clear_south() ;
  double south() const;
  void set_south(double value);

  private:
  double _internal_south() const;
  void _internal_set_south(double value);

  public:
  // double east = 5 [json_name = "east"];
  void clear_east() ;
  double east() const;
  void set_east(double value);

  private:
  double _internal_east() const;
  void _internal_set_east(double value);

  public:
  // double west = 6 [json_name = "west"];
  void clear_west() ;
  double west() const;
  void set_west(double value);

  private:
  double _internal_west() const;
  void _internal_set_west(double value);

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.Header)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 0, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr date_;
    ::google::protobuf::internal::ArenaStringPtr projection_;
    double north_;
    double south_;
    double east_;
    double west_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fmap_2eproto;
};// -------------------------------------------------------------------

class LaneOverlap final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.LaneOverlap) */ {
 public:
  inline LaneOverlap() : LaneOverlap(nullptr) {}
  ~LaneOverlap() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LaneOverlap(::google::protobuf::internal::ConstantInitialized);

  LaneOverlap(const LaneOverlap& from);
  LaneOverlap(LaneOverlap&& from) noexcept
    : LaneOverlap() {
    *this = ::std::move(from);
  }

  inline LaneOverlap& operator=(const LaneOverlap& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneOverlap& operator=(LaneOverlap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneOverlap& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneOverlap* internal_default_instance() {
    return reinterpret_cast<const LaneOverlap*>(
               &_LaneOverlap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LaneOverlap& a, LaneOverlap& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneOverlap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneOverlap* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneOverlap* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneOverlap>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LaneOverlap& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LaneOverlap& from) {
    LaneOverlap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneOverlap* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.LaneOverlap";
  }
  protected:
  explicit LaneOverlap(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelfFieldNumber = 1,
    kOtherFieldNumber = 2,
    kSelfFirstFieldNumber = 3,
  };
  // .city.geo.v2.LanePosition self = 1 [json_name = "self"];
  bool has_self() const;
  void clear_self() ;
  const ::city::geo::v2::LanePosition& self() const;
  PROTOBUF_NODISCARD ::city::geo::v2::LanePosition* release_self();
  ::city::geo::v2::LanePosition* mutable_self();
  void set_allocated_self(::city::geo::v2::LanePosition* value);
  void unsafe_arena_set_allocated_self(::city::geo::v2::LanePosition* value);
  ::city::geo::v2::LanePosition* unsafe_arena_release_self();

  private:
  const ::city::geo::v2::LanePosition& _internal_self() const;
  ::city::geo::v2::LanePosition* _internal_mutable_self();

  public:
  // .city.geo.v2.LanePosition other = 2 [json_name = "other"];
  bool has_other() const;
  void clear_other() ;
  const ::city::geo::v2::LanePosition& other() const;
  PROTOBUF_NODISCARD ::city::geo::v2::LanePosition* release_other();
  ::city::geo::v2::LanePosition* mutable_other();
  void set_allocated_other(::city::geo::v2::LanePosition* value);
  void unsafe_arena_set_allocated_other(::city::geo::v2::LanePosition* value);
  ::city::geo::v2::LanePosition* unsafe_arena_release_other();

  private:
  const ::city::geo::v2::LanePosition& _internal_other() const;
  ::city::geo::v2::LanePosition* _internal_mutable_other();

  public:
  // bool self_first = 3 [json_name = "selfFirst"];
  void clear_self_first() ;
  bool self_first() const;
  void set_self_first(bool value);

  private:
  bool _internal_self_first() const;
  void _internal_set_self_first(bool value);

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.LaneOverlap)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::city::geo::v2::LanePosition* self_;
    ::city::geo::v2::LanePosition* other_;
    bool self_first_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fmap_2eproto;
};// -------------------------------------------------------------------

class LaneConnection final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.LaneConnection) */ {
 public:
  inline LaneConnection() : LaneConnection(nullptr) {}
  ~LaneConnection() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LaneConnection(::google::protobuf::internal::ConstantInitialized);

  LaneConnection(const LaneConnection& from);
  LaneConnection(LaneConnection&& from) noexcept
    : LaneConnection() {
    *this = ::std::move(from);
  }

  inline LaneConnection& operator=(const LaneConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneConnection& operator=(LaneConnection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneConnection& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneConnection* internal_default_instance() {
    return reinterpret_cast<const LaneConnection*>(
               &_LaneConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LaneConnection& a, LaneConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneConnection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneConnection* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LaneConnection* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LaneConnection>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LaneConnection& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LaneConnection& from) {
    LaneConnection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneConnection* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.LaneConnection";
  }
  protected:
  explicit LaneConnection(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .city.map.v2.LaneConnectionType type = 2 [json_name = "type"];
  void clear_type() ;
  ::city::map::v2::LaneConnectionType type() const;
  void set_type(::city::map::v2::LaneConnectionType value);

  private:
  ::city::map::v2::LaneConnectionType _internal_type() const;
  void _internal_set_type(::city::map::v2::LaneConnectionType value);

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.LaneConnection)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t id_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fmap_2eproto;
};// -------------------------------------------------------------------

class Lane final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.Lane) */ {
 public:
  inline Lane() : Lane(nullptr) {}
  ~Lane() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Lane(::google::protobuf::internal::ConstantInitialized);

  Lane(const Lane& from);
  Lane(Lane&& from) noexcept
    : Lane() {
    *this = ::std::move(from);
  }

  inline Lane& operator=(const Lane& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lane& operator=(Lane&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Lane& default_instance() {
    return *internal_default_instance();
  }
  static inline const Lane* internal_default_instance() {
    return reinterpret_cast<const Lane*>(
               &_Lane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Lane& a, Lane& b) {
    a.Swap(&b);
  }
  inline void Swap(Lane* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lane* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Lane* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Lane>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Lane& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Lane& from) {
    Lane::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lane* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.Lane";
  }
  protected:
  explicit Lane(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredecessorsFieldNumber = 10,
    kSuccessorsFieldNumber = 11,
    kLeftLaneIdsFieldNumber = 12,
    kRightLaneIdsFieldNumber = 13,
    kOverlapsFieldNumber = 15,
    kAoiIdsFieldNumber = 16,
    kCenterLineFieldNumber = 7,
    kLeftBorderLineFieldNumber = 8,
    kRightBorderLineFieldNumber = 9,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kMaxSpeedFieldNumber = 4,
    kLengthFieldNumber = 5,
    kWidthFieldNumber = 6,
    kTurnFieldNumber = 3,
    kParentIdFieldNumber = 14,
  };
  // repeated .city.map.v2.LaneConnection predecessors = 10 [json_name = "predecessors"];
  int predecessors_size() const;
  private:
  int _internal_predecessors_size() const;

  public:
  void clear_predecessors() ;
  ::city::map::v2::LaneConnection* mutable_predecessors(int index);
  ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneConnection >*
      mutable_predecessors();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneConnection>& _internal_predecessors() const;
  ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneConnection>* _internal_mutable_predecessors();
  public:
  const ::city::map::v2::LaneConnection& predecessors(int index) const;
  ::city::map::v2::LaneConnection* add_predecessors();
  const ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneConnection >&
      predecessors() const;
  // repeated .city.map.v2.LaneConnection successors = 11 [json_name = "successors"];
  int successors_size() const;
  private:
  int _internal_successors_size() const;

  public:
  void clear_successors() ;
  ::city::map::v2::LaneConnection* mutable_successors(int index);
  ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneConnection >*
      mutable_successors();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneConnection>& _internal_successors() const;
  ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneConnection>* _internal_mutable_successors();
  public:
  const ::city::map::v2::LaneConnection& successors(int index) const;
  ::city::map::v2::LaneConnection* add_successors();
  const ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneConnection >&
      successors() const;
  // repeated int32 left_lane_ids = 12 [json_name = "leftLaneIds"];
  int left_lane_ids_size() const;
  private:
  int _internal_left_lane_ids_size() const;

  public:
  void clear_left_lane_ids() ;
  ::int32_t left_lane_ids(int index) const;
  void set_left_lane_ids(int index, ::int32_t value);
  void add_left_lane_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& left_lane_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_left_lane_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_left_lane_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_left_lane_ids();

  public:
  // repeated int32 right_lane_ids = 13 [json_name = "rightLaneIds"];
  int right_lane_ids_size() const;
  private:
  int _internal_right_lane_ids_size() const;

  public:
  void clear_right_lane_ids() ;
  ::int32_t right_lane_ids(int index) const;
  void set_right_lane_ids(int index, ::int32_t value);
  void add_right_lane_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& right_lane_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_right_lane_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_right_lane_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_right_lane_ids();

  public:
  // repeated .city.map.v2.LaneOverlap overlaps = 15 [json_name = "overlaps"];
  int overlaps_size() const;
  private:
  int _internal_overlaps_size() const;

  public:
  void clear_overlaps() ;
  ::city::map::v2::LaneOverlap* mutable_overlaps(int index);
  ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneOverlap >*
      mutable_overlaps();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneOverlap>& _internal_overlaps() const;
  ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneOverlap>* _internal_mutable_overlaps();
  public:
  const ::city::map::v2::LaneOverlap& overlaps(int index) const;
  ::city::map::v2::LaneOverlap* add_overlaps();
  const ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneOverlap >&
      overlaps() const;
  // repeated int32 aoi_ids = 16 [json_name = "aoiIds"];
  int aoi_ids_size() const;
  private:
  int _internal_aoi_ids_size() const;

  public:
  void clear_aoi_ids() ;
  ::int32_t aoi_ids(int index) const;
  void set_aoi_ids(int index, ::int32_t value);
  void add_aoi_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& aoi_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_aoi_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_aoi_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_aoi_ids();

  public:
  // .city.map.v2.Polyline center_line = 7 [json_name = "centerLine"];
  bool has_center_line() const;
  void clear_center_line() ;
  const ::city::map::v2::Polyline& center_line() const;
  PROTOBUF_NODISCARD ::city::map::v2::Polyline* release_center_line();
  ::city::map::v2::Polyline* mutable_center_line();
  void set_allocated_center_line(::city::map::v2::Polyline* value);
  void unsafe_arena_set_allocated_center_line(::city::map::v2::Polyline* value);
  ::city::map::v2::Polyline* unsafe_arena_release_center_line();

  private:
  const ::city::map::v2::Polyline& _internal_center_line() const;
  ::city::map::v2::Polyline* _internal_mutable_center_line();

  public:
  // .city.map.v2.Polyline left_border_line = 8 [json_name = "leftBorderLine", deprecated = true];
  [[deprecated]]  bool has_left_border_line() const;
  [[deprecated]]  void clear_left_border_line() ;
  [[deprecated]] const ::city::map::v2::Polyline& left_border_line() const;
  [[deprecated]] PROTOBUF_NODISCARD ::city::map::v2::Polyline* release_left_border_line();
  [[deprecated]] ::city::map::v2::Polyline* mutable_left_border_line();
  [[deprecated]] void set_allocated_left_border_line(::city::map::v2::Polyline* value);
  [[deprecated]] void unsafe_arena_set_allocated_left_border_line(::city::map::v2::Polyline* value);
  [[deprecated]] ::city::map::v2::Polyline* unsafe_arena_release_left_border_line();

  private:
  const ::city::map::v2::Polyline& _internal_left_border_line() const;
  ::city::map::v2::Polyline* _internal_mutable_left_border_line();

  public:
  // .city.map.v2.Polyline right_border_line = 9 [json_name = "rightBorderLine", deprecated = true];
  [[deprecated]]  bool has_right_border_line() const;
  [[deprecated]]  void clear_right_border_line() ;
  [[deprecated]] const ::city::map::v2::Polyline& right_border_line() const;
  [[deprecated]] PROTOBUF_NODISCARD ::city::map::v2::Polyline* release_right_border_line();
  [[deprecated]] ::city::map::v2::Polyline* mutable_right_border_line();
  [[deprecated]] void set_allocated_right_border_line(::city::map::v2::Polyline* value);
  [[deprecated]] void unsafe_arena_set_allocated_right_border_line(::city::map::v2::Polyline* value);
  [[deprecated]] ::city::map::v2::Polyline* unsafe_arena_release_right_border_line();

  private:
  const ::city::map::v2::Polyline& _internal_right_border_line() const;
  ::city::map::v2::Polyline* _internal_mutable_right_border_line();

  public:
  // int32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .city.map.v2.LaneType type = 2 [json_name = "type"];
  void clear_type() ;
  ::city::map::v2::LaneType type() const;
  void set_type(::city::map::v2::LaneType value);

  private:
  ::city::map::v2::LaneType _internal_type() const;
  void _internal_set_type(::city::map::v2::LaneType value);

  public:
  // double max_speed = 4 [json_name = "maxSpeed"];
  void clear_max_speed() ;
  double max_speed() const;
  void set_max_speed(double value);

  private:
  double _internal_max_speed() const;
  void _internal_set_max_speed(double value);

  public:
  // double length = 5 [json_name = "length"];
  void clear_length() ;
  double length() const;
  void set_length(double value);

  private:
  double _internal_length() const;
  void _internal_set_length(double value);

  public:
  // double width = 6 [json_name = "width"];
  void clear_width() ;
  double width() const;
  void set_width(double value);

  private:
  double _internal_width() const;
  void _internal_set_width(double value);

  public:
  // .city.map.v2.LaneTurn turn = 3 [json_name = "turn"];
  void clear_turn() ;
  ::city::map::v2::LaneTurn turn() const;
  void set_turn(::city::map::v2::LaneTurn value);

  private:
  ::city::map::v2::LaneTurn _internal_turn() const;
  void _internal_set_turn(::city::map::v2::LaneTurn value);

  public:
  // int32 parent_id = 14 [json_name = "parentId"];
  void clear_parent_id() ;
  ::int32_t parent_id() const;
  void set_parent_id(::int32_t value);

  private:
  ::int32_t _internal_parent_id() const;
  void _internal_set_parent_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.Lane)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 16, 6, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneConnection > predecessors_;
    ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneConnection > successors_;
    ::google::protobuf::RepeatedField<::int32_t> left_lane_ids_;
    mutable ::google::protobuf::internal::CachedSize _left_lane_ids_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> right_lane_ids_;
    mutable ::google::protobuf::internal::CachedSize _right_lane_ids_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneOverlap > overlaps_;
    ::google::protobuf::RepeatedField<::int32_t> aoi_ids_;
    mutable ::google::protobuf::internal::CachedSize _aoi_ids_cached_byte_size_;
    ::city::map::v2::Polyline* center_line_;
    ::city::map::v2::Polyline* left_border_line_;
    ::city::map::v2::Polyline* right_border_line_;
    ::int32_t id_;
    int type_;
    double max_speed_;
    double length_;
    double width_;
    int turn_;
    ::int32_t parent_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fmap_2eproto;
};// -------------------------------------------------------------------

class NextRoadLane final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.NextRoadLane) */ {
 public:
  inline NextRoadLane() : NextRoadLane(nullptr) {}
  ~NextRoadLane() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NextRoadLane(::google::protobuf::internal::ConstantInitialized);

  NextRoadLane(const NextRoadLane& from);
  NextRoadLane(NextRoadLane&& from) noexcept
    : NextRoadLane() {
    *this = ::std::move(from);
  }

  inline NextRoadLane& operator=(const NextRoadLane& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextRoadLane& operator=(NextRoadLane&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextRoadLane& default_instance() {
    return *internal_default_instance();
  }
  static inline const NextRoadLane* internal_default_instance() {
    return reinterpret_cast<const NextRoadLane*>(
               &_NextRoadLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NextRoadLane& a, NextRoadLane& b) {
    a.Swap(&b);
  }
  inline void Swap(NextRoadLane* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextRoadLane* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextRoadLane* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NextRoadLane>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NextRoadLane& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NextRoadLane& from) {
    NextRoadLane::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextRoadLane* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.NextRoadLane";
  }
  protected:
  explicit NextRoadLane(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoadIdFieldNumber = 1,
    kLaneIdAFieldNumber = 2,
    kLaneIdBFieldNumber = 3,
  };
  // int32 road_id = 1 [json_name = "roadId"];
  void clear_road_id() ;
  ::int32_t road_id() const;
  void set_road_id(::int32_t value);

  private:
  ::int32_t _internal_road_id() const;
  void _internal_set_road_id(::int32_t value);

  public:
  // int32 lane_id_a = 2 [json_name = "laneIdA"];
  void clear_lane_id_a() ;
  ::int32_t lane_id_a() const;
  void set_lane_id_a(::int32_t value);

  private:
  ::int32_t _internal_lane_id_a() const;
  void _internal_set_lane_id_a(::int32_t value);

  public:
  // int32 lane_id_b = 3 [json_name = "laneIdB"];
  void clear_lane_id_b() ;
  ::int32_t lane_id_b() const;
  void set_lane_id_b(::int32_t value);

  private:
  ::int32_t _internal_lane_id_b() const;
  void _internal_set_lane_id_b(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.NextRoadLane)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t road_id_;
    ::int32_t lane_id_a_;
    ::int32_t lane_id_b_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fmap_2eproto;
};// -------------------------------------------------------------------

class NextRoadLanePlan final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.NextRoadLanePlan) */ {
 public:
  inline NextRoadLanePlan() : NextRoadLanePlan(nullptr) {}
  ~NextRoadLanePlan() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NextRoadLanePlan(::google::protobuf::internal::ConstantInitialized);

  NextRoadLanePlan(const NextRoadLanePlan& from);
  NextRoadLanePlan(NextRoadLanePlan&& from) noexcept
    : NextRoadLanePlan() {
    *this = ::std::move(from);
  }

  inline NextRoadLanePlan& operator=(const NextRoadLanePlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline NextRoadLanePlan& operator=(NextRoadLanePlan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NextRoadLanePlan& default_instance() {
    return *internal_default_instance();
  }
  static inline const NextRoadLanePlan* internal_default_instance() {
    return reinterpret_cast<const NextRoadLanePlan*>(
               &_NextRoadLanePlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NextRoadLanePlan& a, NextRoadLanePlan& b) {
    a.Swap(&b);
  }
  inline void Swap(NextRoadLanePlan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NextRoadLanePlan* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NextRoadLanePlan* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NextRoadLanePlan>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NextRoadLanePlan& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NextRoadLanePlan& from) {
    NextRoadLanePlan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NextRoadLanePlan* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.NextRoadLanePlan";
  }
  protected:
  explicit NextRoadLanePlan(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextRoadLanesFieldNumber = 1,
  };
  // repeated .city.map.v2.NextRoadLane next_road_lanes = 1 [json_name = "nextRoadLanes"];
  int next_road_lanes_size() const;
  private:
  int _internal_next_road_lanes_size() const;

  public:
  void clear_next_road_lanes() ;
  ::city::map::v2::NextRoadLane* mutable_next_road_lanes(int index);
  ::google::protobuf::RepeatedPtrField< ::city::map::v2::NextRoadLane >*
      mutable_next_road_lanes();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::map::v2::NextRoadLane>& _internal_next_road_lanes() const;
  ::google::protobuf::RepeatedPtrField<::city::map::v2::NextRoadLane>* _internal_mutable_next_road_lanes();
  public:
  const ::city::map::v2::NextRoadLane& next_road_lanes(int index) const;
  ::city::map::v2::NextRoadLane* add_next_road_lanes();
  const ::google::protobuf::RepeatedPtrField< ::city::map::v2::NextRoadLane >&
      next_road_lanes() const;
  // @@protoc_insertion_point(class_scope:city.map.v2.NextRoadLanePlan)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::city::map::v2::NextRoadLane > next_road_lanes_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fmap_2eproto;
};// -------------------------------------------------------------------

class Road final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.Road) */ {
 public:
  inline Road() : Road(nullptr) {}
  ~Road() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Road(::google::protobuf::internal::ConstantInitialized);

  Road(const Road& from);
  Road(Road&& from) noexcept
    : Road() {
    *this = ::std::move(from);
  }

  inline Road& operator=(const Road& from) {
    CopyFrom(from);
    return *this;
  }
  inline Road& operator=(Road&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Road& default_instance() {
    return *internal_default_instance();
  }
  static inline const Road* internal_default_instance() {
    return reinterpret_cast<const Road*>(
               &_Road_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Road& a, Road& b) {
    a.Swap(&b);
  }
  inline void Swap(Road* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Road* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Road* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Road>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Road& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Road& from) {
    Road::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Road* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.Road";
  }
  protected:
  explicit Road(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneIdsFieldNumber = 2,
    kNextRoadLanePlansFieldNumber = 3,
    kNameFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // repeated int32 lane_ids = 2 [json_name = "laneIds"];
  int lane_ids_size() const;
  private:
  int _internal_lane_ids_size() const;

  public:
  void clear_lane_ids() ;
  ::int32_t lane_ids(int index) const;
  void set_lane_ids(int index, ::int32_t value);
  void add_lane_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& lane_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_lane_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_lane_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_lane_ids();

  public:
  // repeated .city.map.v2.NextRoadLanePlan next_road_lane_plans = 3 [json_name = "nextRoadLanePlans"];
  int next_road_lane_plans_size() const;
  private:
  int _internal_next_road_lane_plans_size() const;

  public:
  void clear_next_road_lane_plans() ;
  ::city::map::v2::NextRoadLanePlan* mutable_next_road_lane_plans(int index);
  ::google::protobuf::RepeatedPtrField< ::city::map::v2::NextRoadLanePlan >*
      mutable_next_road_lane_plans();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::map::v2::NextRoadLanePlan>& _internal_next_road_lane_plans() const;
  ::google::protobuf::RepeatedPtrField<::city::map::v2::NextRoadLanePlan>* _internal_mutable_next_road_lane_plans();
  public:
  const ::city::map::v2::NextRoadLanePlan& next_road_lane_plans(int index) const;
  ::city::map::v2::NextRoadLanePlan* add_next_road_lane_plans();
  const ::google::protobuf::RepeatedPtrField< ::city::map::v2::NextRoadLanePlan >&
      next_road_lane_plans() const;
  // string name = 4 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.Road)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 1, 29, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<::int32_t> lane_ids_;
    mutable ::google::protobuf::internal::CachedSize _lane_ids_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::city::map::v2::NextRoadLanePlan > next_road_lane_plans_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fmap_2eproto;
};// -------------------------------------------------------------------

class JunctionLaneGroup final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.JunctionLaneGroup) */ {
 public:
  inline JunctionLaneGroup() : JunctionLaneGroup(nullptr) {}
  ~JunctionLaneGroup() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR JunctionLaneGroup(::google::protobuf::internal::ConstantInitialized);

  JunctionLaneGroup(const JunctionLaneGroup& from);
  JunctionLaneGroup(JunctionLaneGroup&& from) noexcept
    : JunctionLaneGroup() {
    *this = ::std::move(from);
  }

  inline JunctionLaneGroup& operator=(const JunctionLaneGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline JunctionLaneGroup& operator=(JunctionLaneGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JunctionLaneGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const JunctionLaneGroup* internal_default_instance() {
    return reinterpret_cast<const JunctionLaneGroup*>(
               &_JunctionLaneGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(JunctionLaneGroup& a, JunctionLaneGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(JunctionLaneGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JunctionLaneGroup* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JunctionLaneGroup* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JunctionLaneGroup>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const JunctionLaneGroup& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const JunctionLaneGroup& from) {
    JunctionLaneGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JunctionLaneGroup* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.JunctionLaneGroup";
  }
  protected:
  explicit JunctionLaneGroup(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneIdsFieldNumber = 5,
    kInAngleFieldNumber = 2,
    kInRoadIdFieldNumber = 1,
    kOutRoadIdFieldNumber = 3,
    kOutAngleFieldNumber = 4,
    kTurnFieldNumber = 6,
  };
  // repeated int32 lane_ids = 5 [json_name = "laneIds"];
  int lane_ids_size() const;
  private:
  int _internal_lane_ids_size() const;

  public:
  void clear_lane_ids() ;
  ::int32_t lane_ids(int index) const;
  void set_lane_ids(int index, ::int32_t value);
  void add_lane_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& lane_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_lane_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_lane_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_lane_ids();

  public:
  // double in_angle = 2 [json_name = "inAngle"];
  void clear_in_angle() ;
  double in_angle() const;
  void set_in_angle(double value);

  private:
  double _internal_in_angle() const;
  void _internal_set_in_angle(double value);

  public:
  // int32 in_road_id = 1 [json_name = "inRoadId"];
  void clear_in_road_id() ;
  ::int32_t in_road_id() const;
  void set_in_road_id(::int32_t value);

  private:
  ::int32_t _internal_in_road_id() const;
  void _internal_set_in_road_id(::int32_t value);

  public:
  // int32 out_road_id = 3 [json_name = "outRoadId"];
  void clear_out_road_id() ;
  ::int32_t out_road_id() const;
  void set_out_road_id(::int32_t value);

  private:
  ::int32_t _internal_out_road_id() const;
  void _internal_set_out_road_id(::int32_t value);

  public:
  // double out_angle = 4 [json_name = "outAngle"];
  void clear_out_angle() ;
  double out_angle() const;
  void set_out_angle(double value);

  private:
  double _internal_out_angle() const;
  void _internal_set_out_angle(double value);

  public:
  // .city.map.v2.LaneTurn turn = 6 [json_name = "turn"];
  void clear_turn() ;
  ::city::map::v2::LaneTurn turn() const;
  void set_turn(::city::map::v2::LaneTurn value);

  private:
  ::city::map::v2::LaneTurn _internal_turn() const;
  void _internal_set_turn(::city::map::v2::LaneTurn value);

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.JunctionLaneGroup)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<::int32_t> lane_ids_;
    mutable ::google::protobuf::internal::CachedSize _lane_ids_cached_byte_size_;
    double in_angle_;
    ::int32_t in_road_id_;
    ::int32_t out_road_id_;
    double out_angle_;
    int turn_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fmap_2eproto;
};// -------------------------------------------------------------------

class Junction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.Junction) */ {
 public:
  inline Junction() : Junction(nullptr) {}
  ~Junction() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Junction(::google::protobuf::internal::ConstantInitialized);

  Junction(const Junction& from);
  Junction(Junction&& from) noexcept
    : Junction() {
    *this = ::std::move(from);
  }

  inline Junction& operator=(const Junction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Junction& operator=(Junction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Junction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Junction* internal_default_instance() {
    return reinterpret_cast<const Junction*>(
               &_Junction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Junction& a, Junction& b) {
    a.Swap(&b);
  }
  inline void Swap(Junction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Junction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Junction* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Junction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Junction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Junction& from) {
    Junction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Junction* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.Junction";
  }
  protected:
  explicit Junction(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneIdsFieldNumber = 2,
    kDrivingLaneGroupsFieldNumber = 3,
    kPhasesFieldNumber = 4,
    kFixedProgramFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // repeated int32 lane_ids = 2 [json_name = "laneIds"];
  int lane_ids_size() const;
  private:
  int _internal_lane_ids_size() const;

  public:
  void clear_lane_ids() ;
  ::int32_t lane_ids(int index) const;
  void set_lane_ids(int index, ::int32_t value);
  void add_lane_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& lane_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_lane_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_lane_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_lane_ids();

  public:
  // repeated .city.map.v2.JunctionLaneGroup driving_lane_groups = 3 [json_name = "drivingLaneGroups"];
  int driving_lane_groups_size() const;
  private:
  int _internal_driving_lane_groups_size() const;

  public:
  void clear_driving_lane_groups() ;
  ::city::map::v2::JunctionLaneGroup* mutable_driving_lane_groups(int index);
  ::google::protobuf::RepeatedPtrField< ::city::map::v2::JunctionLaneGroup >*
      mutable_driving_lane_groups();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::map::v2::JunctionLaneGroup>& _internal_driving_lane_groups() const;
  ::google::protobuf::RepeatedPtrField<::city::map::v2::JunctionLaneGroup>* _internal_mutable_driving_lane_groups();
  public:
  const ::city::map::v2::JunctionLaneGroup& driving_lane_groups(int index) const;
  ::city::map::v2::JunctionLaneGroup* add_driving_lane_groups();
  const ::google::protobuf::RepeatedPtrField< ::city::map::v2::JunctionLaneGroup >&
      driving_lane_groups() const;
  // repeated .city.map.v2.AvailablePhase phases = 4 [json_name = "phases"];
  int phases_size() const;
  private:
  int _internal_phases_size() const;

  public:
  void clear_phases() ;
  ::city::map::v2::AvailablePhase* mutable_phases(int index);
  ::google::protobuf::RepeatedPtrField< ::city::map::v2::AvailablePhase >*
      mutable_phases();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::map::v2::AvailablePhase>& _internal_phases() const;
  ::google::protobuf::RepeatedPtrField<::city::map::v2::AvailablePhase>* _internal_mutable_phases();
  public:
  const ::city::map::v2::AvailablePhase& phases(int index) const;
  ::city::map::v2::AvailablePhase* add_phases();
  const ::google::protobuf::RepeatedPtrField< ::city::map::v2::AvailablePhase >&
      phases() const;
  // optional .city.map.v2.TrafficLight fixed_program = 5 [json_name = "fixedProgram"];
  bool has_fixed_program() const;
  void clear_fixed_program() ;
  const ::city::map::v2::TrafficLight& fixed_program() const;
  PROTOBUF_NODISCARD ::city::map::v2::TrafficLight* release_fixed_program();
  ::city::map::v2::TrafficLight* mutable_fixed_program();
  void set_allocated_fixed_program(::city::map::v2::TrafficLight* value);
  void unsafe_arena_set_allocated_fixed_program(::city::map::v2::TrafficLight* value);
  ::city::map::v2::TrafficLight* unsafe_arena_release_fixed_program();

  private:
  const ::city::map::v2::TrafficLight& _internal_fixed_program() const;
  ::city::map::v2::TrafficLight* _internal_mutable_fixed_program();

  public:
  // int32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.Junction)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> lane_ids_;
    mutable ::google::protobuf::internal::CachedSize _lane_ids_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::city::map::v2::JunctionLaneGroup > driving_lane_groups_;
    ::google::protobuf::RepeatedPtrField< ::city::map::v2::AvailablePhase > phases_;
    ::city::map::v2::TrafficLight* fixed_program_;
    ::int32_t id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fmap_2eproto;
};// -------------------------------------------------------------------

class Aoi final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.Aoi) */ {
 public:
  inline Aoi() : Aoi(nullptr) {}
  ~Aoi() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Aoi(::google::protobuf::internal::ConstantInitialized);

  Aoi(const Aoi& from);
  Aoi(Aoi&& from) noexcept
    : Aoi() {
    *this = ::std::move(from);
  }

  inline Aoi& operator=(const Aoi& from) {
    CopyFrom(from);
    return *this;
  }
  inline Aoi& operator=(Aoi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Aoi& default_instance() {
    return *internal_default_instance();
  }
  static inline const Aoi* internal_default_instance() {
    return reinterpret_cast<const Aoi*>(
               &_Aoi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Aoi& a, Aoi& b) {
    a.Swap(&b);
  }
  inline void Swap(Aoi* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Aoi* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Aoi* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Aoi>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Aoi& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Aoi& from) {
    Aoi::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Aoi* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.Aoi";
  }
  protected:
  explicit Aoi(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrivingPositionsFieldNumber = 3,
    kWalkingPositionsFieldNumber = 4,
    kPositionsFieldNumber = 5,
    kDrivingGatesFieldNumber = 6,
    kWalkingGatesFieldNumber = 7,
    kPoiIdsFieldNumber = 9,
    kNameFieldNumber = 11,
    kUrbanLandUseFieldNumber = 12,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kAreaFieldNumber = 8,
    kLandUseFieldNumber = 10,
  };
  // repeated .city.geo.v2.LanePosition driving_positions = 3 [json_name = "drivingPositions"];
  int driving_positions_size() const;
  private:
  int _internal_driving_positions_size() const;

  public:
  void clear_driving_positions() ;
  ::city::geo::v2::LanePosition* mutable_driving_positions(int index);
  ::google::protobuf::RepeatedPtrField< ::city::geo::v2::LanePosition >*
      mutable_driving_positions();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::geo::v2::LanePosition>& _internal_driving_positions() const;
  ::google::protobuf::RepeatedPtrField<::city::geo::v2::LanePosition>* _internal_mutable_driving_positions();
  public:
  const ::city::geo::v2::LanePosition& driving_positions(int index) const;
  ::city::geo::v2::LanePosition* add_driving_positions();
  const ::google::protobuf::RepeatedPtrField< ::city::geo::v2::LanePosition >&
      driving_positions() const;
  // repeated .city.geo.v2.LanePosition walking_positions = 4 [json_name = "walkingPositions"];
  int walking_positions_size() const;
  private:
  int _internal_walking_positions_size() const;

  public:
  void clear_walking_positions() ;
  ::city::geo::v2::LanePosition* mutable_walking_positions(int index);
  ::google::protobuf::RepeatedPtrField< ::city::geo::v2::LanePosition >*
      mutable_walking_positions();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::geo::v2::LanePosition>& _internal_walking_positions() const;
  ::google::protobuf::RepeatedPtrField<::city::geo::v2::LanePosition>* _internal_mutable_walking_positions();
  public:
  const ::city::geo::v2::LanePosition& walking_positions(int index) const;
  ::city::geo::v2::LanePosition* add_walking_positions();
  const ::google::protobuf::RepeatedPtrField< ::city::geo::v2::LanePosition >&
      walking_positions() const;
  // repeated .city.geo.v2.XYPosition positions = 5 [json_name = "positions"];
  int positions_size() const;
  private:
  int _internal_positions_size() const;

  public:
  void clear_positions() ;
  ::city::geo::v2::XYPosition* mutable_positions(int index);
  ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >*
      mutable_positions();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>& _internal_positions() const;
  ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>* _internal_mutable_positions();
  public:
  const ::city::geo::v2::XYPosition& positions(int index) const;
  ::city::geo::v2::XYPosition* add_positions();
  const ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >&
      positions() const;
  // repeated .city.geo.v2.XYPosition driving_gates = 6 [json_name = "drivingGates"];
  int driving_gates_size() const;
  private:
  int _internal_driving_gates_size() const;

  public:
  void clear_driving_gates() ;
  ::city::geo::v2::XYPosition* mutable_driving_gates(int index);
  ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >*
      mutable_driving_gates();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>& _internal_driving_gates() const;
  ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>* _internal_mutable_driving_gates();
  public:
  const ::city::geo::v2::XYPosition& driving_gates(int index) const;
  ::city::geo::v2::XYPosition* add_driving_gates();
  const ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >&
      driving_gates() const;
  // repeated .city.geo.v2.XYPosition walking_gates = 7 [json_name = "walkingGates"];
  int walking_gates_size() const;
  private:
  int _internal_walking_gates_size() const;

  public:
  void clear_walking_gates() ;
  ::city::geo::v2::XYPosition* mutable_walking_gates(int index);
  ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >*
      mutable_walking_gates();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>& _internal_walking_gates() const;
  ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>* _internal_mutable_walking_gates();
  public:
  const ::city::geo::v2::XYPosition& walking_gates(int index) const;
  ::city::geo::v2::XYPosition* add_walking_gates();
  const ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >&
      walking_gates() const;
  // repeated int32 poi_ids = 9 [json_name = "poiIds"];
  int poi_ids_size() const;
  private:
  int _internal_poi_ids_size() const;

  public:
  void clear_poi_ids() ;
  ::int32_t poi_ids(int index) const;
  void set_poi_ids(int index, ::int32_t value);
  void add_poi_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& poi_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_poi_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_poi_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_poi_ids();

  public:
  // string name = 11 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string urban_land_use = 12 [json_name = "urbanLandUse"];
  bool has_urban_land_use() const;
  void clear_urban_land_use() ;
  const std::string& urban_land_use() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_urban_land_use(Arg_&& arg, Args_... args);
  std::string* mutable_urban_land_use();
  PROTOBUF_NODISCARD std::string* release_urban_land_use();
  void set_allocated_urban_land_use(std::string* ptr);

  private:
  const std::string& _internal_urban_land_use() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_urban_land_use(
      const std::string& value);
  std::string* _internal_mutable_urban_land_use();

  public:
  // int32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .city.map.v2.AoiType type = 2 [json_name = "type", deprecated = true];
  [[deprecated]]  void clear_type() ;
  [[deprecated]] ::city::map::v2::AoiType type() const;
  [[deprecated]] void set_type(::city::map::v2::AoiType value);

  private:
  ::city::map::v2::AoiType _internal_type() const;
  void _internal_set_type(::city::map::v2::AoiType value);

  public:
  // optional double area = 8 [json_name = "area"];
  bool has_area() const;
  void clear_area() ;
  double area() const;
  void set_area(double value);

  private:
  double _internal_area() const;
  void _internal_set_area(double value);

  public:
  // optional .city.map.v2.LandUseType land_use = 10 [json_name = "landUse", deprecated = true];
  [[deprecated]]  bool has_land_use() const;
  [[deprecated]]  void clear_land_use() ;
  [[deprecated]] ::city::map::v2::LandUseType land_use() const;
  [[deprecated]] void set_land_use(::city::map::v2::LandUseType value);

  private:
  ::city::map::v2::LandUseType _internal_land_use() const;
  void _internal_set_land_use(::city::map::v2::LandUseType value);

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.Aoi)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 12, 5, 50, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::city::geo::v2::LanePosition > driving_positions_;
    ::google::protobuf::RepeatedPtrField< ::city::geo::v2::LanePosition > walking_positions_;
    ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition > positions_;
    ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition > driving_gates_;
    ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition > walking_gates_;
    ::google::protobuf::RepeatedField<::int32_t> poi_ids_;
    mutable ::google::protobuf::internal::CachedSize _poi_ids_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr urban_land_use_;
    ::int32_t id_;
    int type_;
    double area_;
    int land_use_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fmap_2eproto;
};// -------------------------------------------------------------------

class Poi final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.Poi) */ {
 public:
  inline Poi() : Poi(nullptr) {}
  ~Poi() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Poi(::google::protobuf::internal::ConstantInitialized);

  Poi(const Poi& from);
  Poi(Poi&& from) noexcept
    : Poi() {
    *this = ::std::move(from);
  }

  inline Poi& operator=(const Poi& from) {
    CopyFrom(from);
    return *this;
  }
  inline Poi& operator=(Poi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Poi& default_instance() {
    return *internal_default_instance();
  }
  static inline const Poi* internal_default_instance() {
    return reinterpret_cast<const Poi*>(
               &_Poi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Poi& a, Poi& b) {
    a.Swap(&b);
  }
  inline void Swap(Poi* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Poi* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Poi* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Poi>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Poi& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Poi& from) {
    Poi::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Poi* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.Poi";
  }
  protected:
  explicit Poi(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionsFieldNumber = 7,
    kNameFieldNumber = 2,
    kCategoryFieldNumber = 3,
    kPositionFieldNumber = 4,
    kIdFieldNumber = 1,
    kAoiIdFieldNumber = 5,
    kCapacityFieldNumber = 6,
  };
  // repeated string functions = 7 [json_name = "functions"];
  int functions_size() const;
  private:
  int _internal_functions_size() const;

  public:
  void clear_functions() ;
  const std::string& functions(int index) const;
  std::string* mutable_functions(int index);
  void set_functions(int index, const std::string& value);
  void set_functions(int index, std::string&& value);
  void set_functions(int index, const char* value);
  void set_functions(int index, const char* value, std::size_t size);
  void set_functions(int index, absl::string_view value);
  std::string* add_functions();
  void add_functions(const std::string& value);
  void add_functions(std::string&& value);
  void add_functions(const char* value);
  void add_functions(const char* value, std::size_t size);
  void add_functions(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& functions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_functions();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_functions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_functions();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string category = 3 [json_name = "category"];
  void clear_category() ;
  const std::string& category() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_category(Arg_&& arg, Args_... args);
  std::string* mutable_category();
  PROTOBUF_NODISCARD std::string* release_category();
  void set_allocated_category(std::string* ptr);

  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(
      const std::string& value);
  std::string* _internal_mutable_category();

  public:
  // .city.geo.v2.XYPosition position = 4 [json_name = "position"];
  bool has_position() const;
  void clear_position() ;
  const ::city::geo::v2::XYPosition& position() const;
  PROTOBUF_NODISCARD ::city::geo::v2::XYPosition* release_position();
  ::city::geo::v2::XYPosition* mutable_position();
  void set_allocated_position(::city::geo::v2::XYPosition* value);
  void unsafe_arena_set_allocated_position(::city::geo::v2::XYPosition* value);
  ::city::geo::v2::XYPosition* unsafe_arena_release_position();

  private:
  const ::city::geo::v2::XYPosition& _internal_position() const;
  ::city::geo::v2::XYPosition* _internal_mutable_position();

  public:
  // int32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 aoi_id = 5 [json_name = "aoiId"];
  void clear_aoi_id() ;
  ::int32_t aoi_id() const;
  void set_aoi_id(::int32_t value);

  private:
  ::int32_t _internal_aoi_id() const;
  void _internal_set_aoi_id(::int32_t value);

  public:
  // optional int32 capacity = 6 [json_name = "capacity"];
  bool has_capacity() const;
  void clear_capacity() ;
  ::int32_t capacity() const;
  void set_capacity(::int32_t value);

  private:
  ::int32_t _internal_capacity() const;
  void _internal_set_capacity(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.Poi)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 1, 45, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> functions_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr category_;
    ::city::geo::v2::XYPosition* position_;
    ::int32_t id_;
    ::int32_t aoi_id_;
    ::int32_t capacity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fmap_2eproto;
};// -------------------------------------------------------------------

class Map final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.Map) */ {
 public:
  inline Map() : Map(nullptr) {}
  ~Map() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Map(::google::protobuf::internal::ConstantInitialized);

  Map(const Map& from);
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map& operator=(Map&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Map& default_instance() {
    return *internal_default_instance();
  }
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Map* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Map* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Map* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Map& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Map& from) {
    Map::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.Map";
  }
  protected:
  explicit Map(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanesFieldNumber = 2,
    kRoadsFieldNumber = 3,
    kJunctionsFieldNumber = 4,
    kAoisFieldNumber = 5,
    kPoisFieldNumber = 6,
    kHeaderFieldNumber = 1,
  };
  // repeated .city.map.v2.Lane lanes = 2 [json_name = "lanes"];
  int lanes_size() const;
  private:
  int _internal_lanes_size() const;

  public:
  void clear_lanes() ;
  ::city::map::v2::Lane* mutable_lanes(int index);
  ::google::protobuf::RepeatedPtrField< ::city::map::v2::Lane >*
      mutable_lanes();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::map::v2::Lane>& _internal_lanes() const;
  ::google::protobuf::RepeatedPtrField<::city::map::v2::Lane>* _internal_mutable_lanes();
  public:
  const ::city::map::v2::Lane& lanes(int index) const;
  ::city::map::v2::Lane* add_lanes();
  const ::google::protobuf::RepeatedPtrField< ::city::map::v2::Lane >&
      lanes() const;
  // repeated .city.map.v2.Road roads = 3 [json_name = "roads"];
  int roads_size() const;
  private:
  int _internal_roads_size() const;

  public:
  void clear_roads() ;
  ::city::map::v2::Road* mutable_roads(int index);
  ::google::protobuf::RepeatedPtrField< ::city::map::v2::Road >*
      mutable_roads();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::map::v2::Road>& _internal_roads() const;
  ::google::protobuf::RepeatedPtrField<::city::map::v2::Road>* _internal_mutable_roads();
  public:
  const ::city::map::v2::Road& roads(int index) const;
  ::city::map::v2::Road* add_roads();
  const ::google::protobuf::RepeatedPtrField< ::city::map::v2::Road >&
      roads() const;
  // repeated .city.map.v2.Junction junctions = 4 [json_name = "junctions"];
  int junctions_size() const;
  private:
  int _internal_junctions_size() const;

  public:
  void clear_junctions() ;
  ::city::map::v2::Junction* mutable_junctions(int index);
  ::google::protobuf::RepeatedPtrField< ::city::map::v2::Junction >*
      mutable_junctions();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::map::v2::Junction>& _internal_junctions() const;
  ::google::protobuf::RepeatedPtrField<::city::map::v2::Junction>* _internal_mutable_junctions();
  public:
  const ::city::map::v2::Junction& junctions(int index) const;
  ::city::map::v2::Junction* add_junctions();
  const ::google::protobuf::RepeatedPtrField< ::city::map::v2::Junction >&
      junctions() const;
  // repeated .city.map.v2.Aoi aois = 5 [json_name = "aois"];
  int aois_size() const;
  private:
  int _internal_aois_size() const;

  public:
  void clear_aois() ;
  ::city::map::v2::Aoi* mutable_aois(int index);
  ::google::protobuf::RepeatedPtrField< ::city::map::v2::Aoi >*
      mutable_aois();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::map::v2::Aoi>& _internal_aois() const;
  ::google::protobuf::RepeatedPtrField<::city::map::v2::Aoi>* _internal_mutable_aois();
  public:
  const ::city::map::v2::Aoi& aois(int index) const;
  ::city::map::v2::Aoi* add_aois();
  const ::google::protobuf::RepeatedPtrField< ::city::map::v2::Aoi >&
      aois() const;
  // repeated .city.map.v2.Poi pois = 6 [json_name = "pois"];
  int pois_size() const;
  private:
  int _internal_pois_size() const;

  public:
  void clear_pois() ;
  ::city::map::v2::Poi* mutable_pois(int index);
  ::google::protobuf::RepeatedPtrField< ::city::map::v2::Poi >*
      mutable_pois();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::map::v2::Poi>& _internal_pois() const;
  ::google::protobuf::RepeatedPtrField<::city::map::v2::Poi>* _internal_mutable_pois();
  public:
  const ::city::map::v2::Poi& pois(int index) const;
  ::city::map::v2::Poi* add_pois();
  const ::google::protobuf::RepeatedPtrField< ::city::map::v2::Poi >&
      pois() const;
  // .city.map.v2.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::city::map::v2::Header& header() const;
  PROTOBUF_NODISCARD ::city::map::v2::Header* release_header();
  ::city::map::v2::Header* mutable_header();
  void set_allocated_header(::city::map::v2::Header* value);
  void unsafe_arena_set_allocated_header(::city::map::v2::Header* value);
  ::city::map::v2::Header* unsafe_arena_release_header();

  private:
  const ::city::map::v2::Header& _internal_header() const;
  ::city::map::v2::Header* _internal_mutable_header();

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.Map)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 6, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::city::map::v2::Lane > lanes_;
    ::google::protobuf::RepeatedPtrField< ::city::map::v2::Road > roads_;
    ::google::protobuf::RepeatedPtrField< ::city::map::v2::Junction > junctions_;
    ::google::protobuf::RepeatedPtrField< ::city::map::v2::Aoi > aois_;
    ::google::protobuf::RepeatedPtrField< ::city::map::v2::Poi > pois_;
    ::city::map::v2::Header* header_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2fmap_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Polyline

// repeated .city.geo.v2.XYPosition nodes = 1 [json_name = "nodes"];
inline int Polyline::_internal_nodes_size() const {
  return _internal_nodes().size();
}
inline int Polyline::nodes_size() const {
  return _internal_nodes_size();
}
inline ::city::geo::v2::XYPosition* Polyline::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Polyline.nodes)
  return _internal_mutable_nodes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >*
Polyline::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Polyline.nodes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_nodes();
}
inline const ::city::geo::v2::XYPosition& Polyline::nodes(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Polyline.nodes)
    return _internal_nodes().Get(index);
}
inline ::city::geo::v2::XYPosition* Polyline::add_nodes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::geo::v2::XYPosition* _add = _internal_mutable_nodes()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Polyline.nodes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >&
Polyline::nodes() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Polyline.nodes)
  return _internal_nodes();
}
inline const ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>&
Polyline::_internal_nodes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nodes_;
}
inline ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>*
Polyline::_internal_mutable_nodes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.nodes_;
}

// -------------------------------------------------------------------

// Header

// string name = 1 [json_name = "name"];
inline void Header::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Header::name() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Header.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.map.v2.Header.name)
}
inline std::string* Header::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:city.map.v2.Header.name)
  return _s;
}
inline const std::string& Header::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Header::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.Header.name)
  return _impl_.name_.Release();
}
inline void Header::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.Header.name)
}

// string date = 2 [json_name = "date"];
inline void Header::clear_date() {
  _impl_.date_.ClearToEmpty();
}
inline const std::string& Header::date() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Header.date)
  return _internal_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.date_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.map.v2.Header.date)
}
inline std::string* Header::mutable_date() {
  std::string* _s = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:city.map.v2.Header.date)
  return _s;
}
inline const std::string& Header::_internal_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.date_.Get();
}
inline void Header::_internal_set_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.date_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.date_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.Header.date)
  return _impl_.date_.Release();
}
inline void Header::set_allocated_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.date_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.date_.IsDefault()) {
          _impl_.date_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.Header.date)
}

// double north = 3 [json_name = "north"];
inline void Header::clear_north() {
  _impl_.north_ = 0;
}
inline double Header::north() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Header.north)
  return _internal_north();
}
inline void Header::set_north(double value) {
  _internal_set_north(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Header.north)
}
inline double Header::_internal_north() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.north_;
}
inline void Header::_internal_set_north(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.north_ = value;
}

// double south = 4 [json_name = "south"];
inline void Header::clear_south() {
  _impl_.south_ = 0;
}
inline double Header::south() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Header.south)
  return _internal_south();
}
inline void Header::set_south(double value) {
  _internal_set_south(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Header.south)
}
inline double Header::_internal_south() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.south_;
}
inline void Header::_internal_set_south(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.south_ = value;
}

// double east = 5 [json_name = "east"];
inline void Header::clear_east() {
  _impl_.east_ = 0;
}
inline double Header::east() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Header.east)
  return _internal_east();
}
inline void Header::set_east(double value) {
  _internal_set_east(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Header.east)
}
inline double Header::_internal_east() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.east_;
}
inline void Header::_internal_set_east(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.east_ = value;
}

// double west = 6 [json_name = "west"];
inline void Header::clear_west() {
  _impl_.west_ = 0;
}
inline double Header::west() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Header.west)
  return _internal_west();
}
inline void Header::set_west(double value) {
  _internal_set_west(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Header.west)
}
inline double Header::_internal_west() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.west_;
}
inline void Header::_internal_set_west(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.west_ = value;
}

// string projection = 7 [json_name = "projection"];
inline void Header::clear_projection() {
  _impl_.projection_.ClearToEmpty();
}
inline const std::string& Header::projection() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Header.projection)
  return _internal_projection();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_projection(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.projection_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.map.v2.Header.projection)
}
inline std::string* Header::mutable_projection() {
  std::string* _s = _internal_mutable_projection();
  // @@protoc_insertion_point(field_mutable:city.map.v2.Header.projection)
  return _s;
}
inline const std::string& Header::_internal_projection() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.projection_.Get();
}
inline void Header::_internal_set_projection(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.projection_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_projection() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.projection_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_projection() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.Header.projection)
  return _impl_.projection_.Release();
}
inline void Header::set_allocated_projection(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.projection_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.projection_.IsDefault()) {
          _impl_.projection_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.Header.projection)
}

// -------------------------------------------------------------------

// LaneOverlap

// .city.geo.v2.LanePosition self = 1 [json_name = "self"];
inline bool LaneOverlap::has_self() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.self_ != nullptr);
  return value;
}
inline const ::city::geo::v2::LanePosition& LaneOverlap::_internal_self() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::geo::v2::LanePosition* p = _impl_.self_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::LanePosition&>(::city::geo::v2::_LanePosition_default_instance_);
}
inline const ::city::geo::v2::LanePosition& LaneOverlap::self() const {
  // @@protoc_insertion_point(field_get:city.map.v2.LaneOverlap.self)
  return _internal_self();
}
inline void LaneOverlap::unsafe_arena_set_allocated_self(::city::geo::v2::LanePosition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.self_);
  }
  _impl_.self_ = reinterpret_cast<::city::geo::v2::LanePosition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.map.v2.LaneOverlap.self)
}
inline ::city::geo::v2::LanePosition* LaneOverlap::release_self() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::LanePosition* released = _impl_.self_;
  _impl_.self_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::geo::v2::LanePosition* LaneOverlap::unsafe_arena_release_self() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.LaneOverlap.self)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::LanePosition* temp = _impl_.self_;
  _impl_.self_ = nullptr;
  return temp;
}
inline ::city::geo::v2::LanePosition* LaneOverlap::_internal_mutable_self() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.self_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::LanePosition>(GetArenaForAllocation());
    _impl_.self_ = reinterpret_cast<::city::geo::v2::LanePosition*>(p);
  }
  return _impl_.self_;
}
inline ::city::geo::v2::LanePosition* LaneOverlap::mutable_self() {
  ::city::geo::v2::LanePosition* _msg = _internal_mutable_self();
  // @@protoc_insertion_point(field_mutable:city.map.v2.LaneOverlap.self)
  return _msg;
}
inline void LaneOverlap::set_allocated_self(::city::geo::v2::LanePosition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.self_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.self_ = reinterpret_cast<::city::geo::v2::LanePosition*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.LaneOverlap.self)
}

// .city.geo.v2.LanePosition other = 2 [json_name = "other"];
inline bool LaneOverlap::has_other() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.other_ != nullptr);
  return value;
}
inline const ::city::geo::v2::LanePosition& LaneOverlap::_internal_other() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::geo::v2::LanePosition* p = _impl_.other_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::LanePosition&>(::city::geo::v2::_LanePosition_default_instance_);
}
inline const ::city::geo::v2::LanePosition& LaneOverlap::other() const {
  // @@protoc_insertion_point(field_get:city.map.v2.LaneOverlap.other)
  return _internal_other();
}
inline void LaneOverlap::unsafe_arena_set_allocated_other(::city::geo::v2::LanePosition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.other_);
  }
  _impl_.other_ = reinterpret_cast<::city::geo::v2::LanePosition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.map.v2.LaneOverlap.other)
}
inline ::city::geo::v2::LanePosition* LaneOverlap::release_other() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::geo::v2::LanePosition* released = _impl_.other_;
  _impl_.other_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::geo::v2::LanePosition* LaneOverlap::unsafe_arena_release_other() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.LaneOverlap.other)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::geo::v2::LanePosition* temp = _impl_.other_;
  _impl_.other_ = nullptr;
  return temp;
}
inline ::city::geo::v2::LanePosition* LaneOverlap::_internal_mutable_other() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.other_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::LanePosition>(GetArenaForAllocation());
    _impl_.other_ = reinterpret_cast<::city::geo::v2::LanePosition*>(p);
  }
  return _impl_.other_;
}
inline ::city::geo::v2::LanePosition* LaneOverlap::mutable_other() {
  ::city::geo::v2::LanePosition* _msg = _internal_mutable_other();
  // @@protoc_insertion_point(field_mutable:city.map.v2.LaneOverlap.other)
  return _msg;
}
inline void LaneOverlap::set_allocated_other(::city::geo::v2::LanePosition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.other_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.other_ = reinterpret_cast<::city::geo::v2::LanePosition*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.LaneOverlap.other)
}

// bool self_first = 3 [json_name = "selfFirst"];
inline void LaneOverlap::clear_self_first() {
  _impl_.self_first_ = false;
}
inline bool LaneOverlap::self_first() const {
  // @@protoc_insertion_point(field_get:city.map.v2.LaneOverlap.self_first)
  return _internal_self_first();
}
inline void LaneOverlap::set_self_first(bool value) {
  _internal_set_self_first(value);
  // @@protoc_insertion_point(field_set:city.map.v2.LaneOverlap.self_first)
}
inline bool LaneOverlap::_internal_self_first() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.self_first_;
}
inline void LaneOverlap::_internal_set_self_first(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.self_first_ = value;
}

// -------------------------------------------------------------------

// LaneConnection

// int32 id = 1 [json_name = "id"];
inline void LaneConnection::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t LaneConnection::id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.LaneConnection.id)
  return _internal_id();
}
inline void LaneConnection::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.LaneConnection.id)
}
inline ::int32_t LaneConnection::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void LaneConnection::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .city.map.v2.LaneConnectionType type = 2 [json_name = "type"];
inline void LaneConnection::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::map::v2::LaneConnectionType LaneConnection::type() const {
  // @@protoc_insertion_point(field_get:city.map.v2.LaneConnection.type)
  return _internal_type();
}
inline void LaneConnection::set_type(::city::map::v2::LaneConnectionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.map.v2.LaneConnection.type)
}
inline ::city::map::v2::LaneConnectionType LaneConnection::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::map::v2::LaneConnectionType>(_impl_.type_);
}
inline void LaneConnection::_internal_set_type(::city::map::v2::LaneConnectionType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// Lane

// int32 id = 1 [json_name = "id"];
inline void Lane::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t Lane::id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.id)
  return _internal_id();
}
inline void Lane::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Lane.id)
}
inline ::int32_t Lane::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Lane::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// .city.map.v2.LaneType type = 2 [json_name = "type"];
inline void Lane::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::map::v2::LaneType Lane::type() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.type)
  return _internal_type();
}
inline void Lane::set_type(::city::map::v2::LaneType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Lane.type)
}
inline ::city::map::v2::LaneType Lane::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::map::v2::LaneType>(_impl_.type_);
}
inline void Lane::_internal_set_type(::city::map::v2::LaneType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// .city.map.v2.LaneTurn turn = 3 [json_name = "turn"];
inline void Lane::clear_turn() {
  _impl_.turn_ = 0;
}
inline ::city::map::v2::LaneTurn Lane::turn() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.turn)
  return _internal_turn();
}
inline void Lane::set_turn(::city::map::v2::LaneTurn value) {
  _internal_set_turn(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Lane.turn)
}
inline ::city::map::v2::LaneTurn Lane::_internal_turn() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::map::v2::LaneTurn>(_impl_.turn_);
}
inline void Lane::_internal_set_turn(::city::map::v2::LaneTurn value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turn_ = value;
}

// double max_speed = 4 [json_name = "maxSpeed"];
inline void Lane::clear_max_speed() {
  _impl_.max_speed_ = 0;
}
inline double Lane::max_speed() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.max_speed)
  return _internal_max_speed();
}
inline void Lane::set_max_speed(double value) {
  _internal_set_max_speed(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Lane.max_speed)
}
inline double Lane::_internal_max_speed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_speed_;
}
inline void Lane::_internal_set_max_speed(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_speed_ = value;
}

// double length = 5 [json_name = "length"];
inline void Lane::clear_length() {
  _impl_.length_ = 0;
}
inline double Lane::length() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.length)
  return _internal_length();
}
inline void Lane::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Lane.length)
}
inline double Lane::_internal_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.length_;
}
inline void Lane::_internal_set_length(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.length_ = value;
}

// double width = 6 [json_name = "width"];
inline void Lane::clear_width() {
  _impl_.width_ = 0;
}
inline double Lane::width() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.width)
  return _internal_width();
}
inline void Lane::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Lane.width)
}
inline double Lane::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void Lane::_internal_set_width(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// .city.map.v2.Polyline center_line = 7 [json_name = "centerLine"];
inline bool Lane::has_center_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.center_line_ != nullptr);
  return value;
}
inline void Lane::clear_center_line() {
  if (_impl_.center_line_ != nullptr) _impl_.center_line_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::city::map::v2::Polyline& Lane::_internal_center_line() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::map::v2::Polyline* p = _impl_.center_line_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::map::v2::Polyline&>(::city::map::v2::_Polyline_default_instance_);
}
inline const ::city::map::v2::Polyline& Lane::center_line() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.center_line)
  return _internal_center_line();
}
inline void Lane::unsafe_arena_set_allocated_center_line(::city::map::v2::Polyline* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.center_line_);
  }
  _impl_.center_line_ = reinterpret_cast<::city::map::v2::Polyline*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.map.v2.Lane.center_line)
}
inline ::city::map::v2::Polyline* Lane::release_center_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::map::v2::Polyline* released = _impl_.center_line_;
  _impl_.center_line_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::map::v2::Polyline* Lane::unsafe_arena_release_center_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.Lane.center_line)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::map::v2::Polyline* temp = _impl_.center_line_;
  _impl_.center_line_ = nullptr;
  return temp;
}
inline ::city::map::v2::Polyline* Lane::_internal_mutable_center_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.center_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::map::v2::Polyline>(GetArenaForAllocation());
    _impl_.center_line_ = reinterpret_cast<::city::map::v2::Polyline*>(p);
  }
  return _impl_.center_line_;
}
inline ::city::map::v2::Polyline* Lane::mutable_center_line() {
  ::city::map::v2::Polyline* _msg = _internal_mutable_center_line();
  // @@protoc_insertion_point(field_mutable:city.map.v2.Lane.center_line)
  return _msg;
}
inline void Lane::set_allocated_center_line(::city::map::v2::Polyline* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::city::map::v2::Polyline*>(_impl_.center_line_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::city::map::v2::Polyline*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.center_line_ = reinterpret_cast<::city::map::v2::Polyline*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.Lane.center_line)
}

// .city.map.v2.Polyline left_border_line = 8 [json_name = "leftBorderLine", deprecated = true];
inline bool Lane::has_left_border_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.left_border_line_ != nullptr);
  return value;
}
inline void Lane::clear_left_border_line() {
  if (_impl_.left_border_line_ != nullptr) _impl_.left_border_line_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::city::map::v2::Polyline& Lane::_internal_left_border_line() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::map::v2::Polyline* p = _impl_.left_border_line_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::map::v2::Polyline&>(::city::map::v2::_Polyline_default_instance_);
}
inline const ::city::map::v2::Polyline& Lane::left_border_line() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.left_border_line)
  return _internal_left_border_line();
}
inline void Lane::unsafe_arena_set_allocated_left_border_line(::city::map::v2::Polyline* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.left_border_line_);
  }
  _impl_.left_border_line_ = reinterpret_cast<::city::map::v2::Polyline*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.map.v2.Lane.left_border_line)
}
inline ::city::map::v2::Polyline* Lane::release_left_border_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::map::v2::Polyline* released = _impl_.left_border_line_;
  _impl_.left_border_line_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::map::v2::Polyline* Lane::unsafe_arena_release_left_border_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.Lane.left_border_line)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::map::v2::Polyline* temp = _impl_.left_border_line_;
  _impl_.left_border_line_ = nullptr;
  return temp;
}
inline ::city::map::v2::Polyline* Lane::_internal_mutable_left_border_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.left_border_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::map::v2::Polyline>(GetArenaForAllocation());
    _impl_.left_border_line_ = reinterpret_cast<::city::map::v2::Polyline*>(p);
  }
  return _impl_.left_border_line_;
}
inline ::city::map::v2::Polyline* Lane::mutable_left_border_line() {
  ::city::map::v2::Polyline* _msg = _internal_mutable_left_border_line();
  // @@protoc_insertion_point(field_mutable:city.map.v2.Lane.left_border_line)
  return _msg;
}
inline void Lane::set_allocated_left_border_line(::city::map::v2::Polyline* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::city::map::v2::Polyline*>(_impl_.left_border_line_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::city::map::v2::Polyline*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.left_border_line_ = reinterpret_cast<::city::map::v2::Polyline*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.Lane.left_border_line)
}

// .city.map.v2.Polyline right_border_line = 9 [json_name = "rightBorderLine", deprecated = true];
inline bool Lane::has_right_border_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.right_border_line_ != nullptr);
  return value;
}
inline void Lane::clear_right_border_line() {
  if (_impl_.right_border_line_ != nullptr) _impl_.right_border_line_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::city::map::v2::Polyline& Lane::_internal_right_border_line() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::map::v2::Polyline* p = _impl_.right_border_line_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::map::v2::Polyline&>(::city::map::v2::_Polyline_default_instance_);
}
inline const ::city::map::v2::Polyline& Lane::right_border_line() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.right_border_line)
  return _internal_right_border_line();
}
inline void Lane::unsafe_arena_set_allocated_right_border_line(::city::map::v2::Polyline* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.right_border_line_);
  }
  _impl_.right_border_line_ = reinterpret_cast<::city::map::v2::Polyline*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.map.v2.Lane.right_border_line)
}
inline ::city::map::v2::Polyline* Lane::release_right_border_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::map::v2::Polyline* released = _impl_.right_border_line_;
  _impl_.right_border_line_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::map::v2::Polyline* Lane::unsafe_arena_release_right_border_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.Lane.right_border_line)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::map::v2::Polyline* temp = _impl_.right_border_line_;
  _impl_.right_border_line_ = nullptr;
  return temp;
}
inline ::city::map::v2::Polyline* Lane::_internal_mutable_right_border_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.right_border_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::map::v2::Polyline>(GetArenaForAllocation());
    _impl_.right_border_line_ = reinterpret_cast<::city::map::v2::Polyline*>(p);
  }
  return _impl_.right_border_line_;
}
inline ::city::map::v2::Polyline* Lane::mutable_right_border_line() {
  ::city::map::v2::Polyline* _msg = _internal_mutable_right_border_line();
  // @@protoc_insertion_point(field_mutable:city.map.v2.Lane.right_border_line)
  return _msg;
}
inline void Lane::set_allocated_right_border_line(::city::map::v2::Polyline* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::city::map::v2::Polyline*>(_impl_.right_border_line_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::city::map::v2::Polyline*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.right_border_line_ = reinterpret_cast<::city::map::v2::Polyline*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.Lane.right_border_line)
}

// repeated .city.map.v2.LaneConnection predecessors = 10 [json_name = "predecessors"];
inline int Lane::_internal_predecessors_size() const {
  return _internal_predecessors().size();
}
inline int Lane::predecessors_size() const {
  return _internal_predecessors_size();
}
inline void Lane::clear_predecessors() {
  _internal_mutable_predecessors()->Clear();
}
inline ::city::map::v2::LaneConnection* Lane::mutable_predecessors(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Lane.predecessors)
  return _internal_mutable_predecessors()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneConnection >*
Lane::mutable_predecessors() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Lane.predecessors)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_predecessors();
}
inline const ::city::map::v2::LaneConnection& Lane::predecessors(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.predecessors)
    return _internal_predecessors().Get(index);
}
inline ::city::map::v2::LaneConnection* Lane::add_predecessors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::map::v2::LaneConnection* _add = _internal_mutable_predecessors()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Lane.predecessors)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneConnection >&
Lane::predecessors() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Lane.predecessors)
  return _internal_predecessors();
}
inline const ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneConnection>&
Lane::_internal_predecessors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.predecessors_;
}
inline ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneConnection>*
Lane::_internal_mutable_predecessors() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.predecessors_;
}

// repeated .city.map.v2.LaneConnection successors = 11 [json_name = "successors"];
inline int Lane::_internal_successors_size() const {
  return _internal_successors().size();
}
inline int Lane::successors_size() const {
  return _internal_successors_size();
}
inline void Lane::clear_successors() {
  _internal_mutable_successors()->Clear();
}
inline ::city::map::v2::LaneConnection* Lane::mutable_successors(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Lane.successors)
  return _internal_mutable_successors()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneConnection >*
Lane::mutable_successors() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Lane.successors)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_successors();
}
inline const ::city::map::v2::LaneConnection& Lane::successors(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.successors)
    return _internal_successors().Get(index);
}
inline ::city::map::v2::LaneConnection* Lane::add_successors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::map::v2::LaneConnection* _add = _internal_mutable_successors()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Lane.successors)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneConnection >&
Lane::successors() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Lane.successors)
  return _internal_successors();
}
inline const ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneConnection>&
Lane::_internal_successors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.successors_;
}
inline ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneConnection>*
Lane::_internal_mutable_successors() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.successors_;
}

// repeated int32 left_lane_ids = 12 [json_name = "leftLaneIds"];
inline int Lane::_internal_left_lane_ids_size() const {
  return _internal_left_lane_ids().size();
}
inline int Lane::left_lane_ids_size() const {
  return _internal_left_lane_ids_size();
}
inline void Lane::clear_left_lane_ids() {
  _internal_mutable_left_lane_ids()->Clear();
}
inline ::int32_t Lane::left_lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.left_lane_ids)
  return _internal_left_lane_ids().Get(index);
}
inline void Lane::set_left_lane_ids(int index, ::int32_t value) {
  _internal_mutable_left_lane_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:city.map.v2.Lane.left_lane_ids)
}
inline void Lane::add_left_lane_ids(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_left_lane_ids()->Add(value);
  // @@protoc_insertion_point(field_add:city.map.v2.Lane.left_lane_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Lane::left_lane_ids() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Lane.left_lane_ids)
  return _internal_left_lane_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Lane::mutable_left_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Lane.left_lane_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_left_lane_ids();
}

inline const ::google::protobuf::RepeatedField<::int32_t>& Lane::_internal_left_lane_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.left_lane_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Lane::_internal_mutable_left_lane_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.left_lane_ids_;
}

// repeated int32 right_lane_ids = 13 [json_name = "rightLaneIds"];
inline int Lane::_internal_right_lane_ids_size() const {
  return _internal_right_lane_ids().size();
}
inline int Lane::right_lane_ids_size() const {
  return _internal_right_lane_ids_size();
}
inline void Lane::clear_right_lane_ids() {
  _internal_mutable_right_lane_ids()->Clear();
}
inline ::int32_t Lane::right_lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.right_lane_ids)
  return _internal_right_lane_ids().Get(index);
}
inline void Lane::set_right_lane_ids(int index, ::int32_t value) {
  _internal_mutable_right_lane_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:city.map.v2.Lane.right_lane_ids)
}
inline void Lane::add_right_lane_ids(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_right_lane_ids()->Add(value);
  // @@protoc_insertion_point(field_add:city.map.v2.Lane.right_lane_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Lane::right_lane_ids() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Lane.right_lane_ids)
  return _internal_right_lane_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Lane::mutable_right_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Lane.right_lane_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_right_lane_ids();
}

inline const ::google::protobuf::RepeatedField<::int32_t>& Lane::_internal_right_lane_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.right_lane_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Lane::_internal_mutable_right_lane_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.right_lane_ids_;
}

// int32 parent_id = 14 [json_name = "parentId"];
inline void Lane::clear_parent_id() {
  _impl_.parent_id_ = 0;
}
inline ::int32_t Lane::parent_id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.parent_id)
  return _internal_parent_id();
}
inline void Lane::set_parent_id(::int32_t value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Lane.parent_id)
}
inline ::int32_t Lane::_internal_parent_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parent_id_;
}
inline void Lane::_internal_set_parent_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.parent_id_ = value;
}

// repeated .city.map.v2.LaneOverlap overlaps = 15 [json_name = "overlaps"];
inline int Lane::_internal_overlaps_size() const {
  return _internal_overlaps().size();
}
inline int Lane::overlaps_size() const {
  return _internal_overlaps_size();
}
inline void Lane::clear_overlaps() {
  _internal_mutable_overlaps()->Clear();
}
inline ::city::map::v2::LaneOverlap* Lane::mutable_overlaps(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Lane.overlaps)
  return _internal_mutable_overlaps()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneOverlap >*
Lane::mutable_overlaps() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Lane.overlaps)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_overlaps();
}
inline const ::city::map::v2::LaneOverlap& Lane::overlaps(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.overlaps)
    return _internal_overlaps().Get(index);
}
inline ::city::map::v2::LaneOverlap* Lane::add_overlaps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::map::v2::LaneOverlap* _add = _internal_mutable_overlaps()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Lane.overlaps)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneOverlap >&
Lane::overlaps() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Lane.overlaps)
  return _internal_overlaps();
}
inline const ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneOverlap>&
Lane::_internal_overlaps() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.overlaps_;
}
inline ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneOverlap>*
Lane::_internal_mutable_overlaps() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.overlaps_;
}

// repeated int32 aoi_ids = 16 [json_name = "aoiIds"];
inline int Lane::_internal_aoi_ids_size() const {
  return _internal_aoi_ids().size();
}
inline int Lane::aoi_ids_size() const {
  return _internal_aoi_ids_size();
}
inline void Lane::clear_aoi_ids() {
  _internal_mutable_aoi_ids()->Clear();
}
inline ::int32_t Lane::aoi_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Lane.aoi_ids)
  return _internal_aoi_ids().Get(index);
}
inline void Lane::set_aoi_ids(int index, ::int32_t value) {
  _internal_mutable_aoi_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:city.map.v2.Lane.aoi_ids)
}
inline void Lane::add_aoi_ids(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_aoi_ids()->Add(value);
  // @@protoc_insertion_point(field_add:city.map.v2.Lane.aoi_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Lane::aoi_ids() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Lane.aoi_ids)
  return _internal_aoi_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Lane::mutable_aoi_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Lane.aoi_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_aoi_ids();
}

inline const ::google::protobuf::RepeatedField<::int32_t>& Lane::_internal_aoi_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aoi_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Lane::_internal_mutable_aoi_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.aoi_ids_;
}

// -------------------------------------------------------------------

// NextRoadLane

// int32 road_id = 1 [json_name = "roadId"];
inline void NextRoadLane::clear_road_id() {
  _impl_.road_id_ = 0;
}
inline ::int32_t NextRoadLane::road_id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.NextRoadLane.road_id)
  return _internal_road_id();
}
inline void NextRoadLane::set_road_id(::int32_t value) {
  _internal_set_road_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.NextRoadLane.road_id)
}
inline ::int32_t NextRoadLane::_internal_road_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.road_id_;
}
inline void NextRoadLane::_internal_set_road_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.road_id_ = value;
}

// int32 lane_id_a = 2 [json_name = "laneIdA"];
inline void NextRoadLane::clear_lane_id_a() {
  _impl_.lane_id_a_ = 0;
}
inline ::int32_t NextRoadLane::lane_id_a() const {
  // @@protoc_insertion_point(field_get:city.map.v2.NextRoadLane.lane_id_a)
  return _internal_lane_id_a();
}
inline void NextRoadLane::set_lane_id_a(::int32_t value) {
  _internal_set_lane_id_a(value);
  // @@protoc_insertion_point(field_set:city.map.v2.NextRoadLane.lane_id_a)
}
inline ::int32_t NextRoadLane::_internal_lane_id_a() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lane_id_a_;
}
inline void NextRoadLane::_internal_set_lane_id_a(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lane_id_a_ = value;
}

// int32 lane_id_b = 3 [json_name = "laneIdB"];
inline void NextRoadLane::clear_lane_id_b() {
  _impl_.lane_id_b_ = 0;
}
inline ::int32_t NextRoadLane::lane_id_b() const {
  // @@protoc_insertion_point(field_get:city.map.v2.NextRoadLane.lane_id_b)
  return _internal_lane_id_b();
}
inline void NextRoadLane::set_lane_id_b(::int32_t value) {
  _internal_set_lane_id_b(value);
  // @@protoc_insertion_point(field_set:city.map.v2.NextRoadLane.lane_id_b)
}
inline ::int32_t NextRoadLane::_internal_lane_id_b() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lane_id_b_;
}
inline void NextRoadLane::_internal_set_lane_id_b(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lane_id_b_ = value;
}

// -------------------------------------------------------------------

// NextRoadLanePlan

// repeated .city.map.v2.NextRoadLane next_road_lanes = 1 [json_name = "nextRoadLanes"];
inline int NextRoadLanePlan::_internal_next_road_lanes_size() const {
  return _internal_next_road_lanes().size();
}
inline int NextRoadLanePlan::next_road_lanes_size() const {
  return _internal_next_road_lanes_size();
}
inline void NextRoadLanePlan::clear_next_road_lanes() {
  _internal_mutable_next_road_lanes()->Clear();
}
inline ::city::map::v2::NextRoadLane* NextRoadLanePlan::mutable_next_road_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.NextRoadLanePlan.next_road_lanes)
  return _internal_mutable_next_road_lanes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::map::v2::NextRoadLane >*
NextRoadLanePlan::mutable_next_road_lanes() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.NextRoadLanePlan.next_road_lanes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_next_road_lanes();
}
inline const ::city::map::v2::NextRoadLane& NextRoadLanePlan::next_road_lanes(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.NextRoadLanePlan.next_road_lanes)
    return _internal_next_road_lanes().Get(index);
}
inline ::city::map::v2::NextRoadLane* NextRoadLanePlan::add_next_road_lanes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::map::v2::NextRoadLane* _add = _internal_mutable_next_road_lanes()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.NextRoadLanePlan.next_road_lanes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::map::v2::NextRoadLane >&
NextRoadLanePlan::next_road_lanes() const {
  // @@protoc_insertion_point(field_list:city.map.v2.NextRoadLanePlan.next_road_lanes)
  return _internal_next_road_lanes();
}
inline const ::google::protobuf::RepeatedPtrField<::city::map::v2::NextRoadLane>&
NextRoadLanePlan::_internal_next_road_lanes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.next_road_lanes_;
}
inline ::google::protobuf::RepeatedPtrField<::city::map::v2::NextRoadLane>*
NextRoadLanePlan::_internal_mutable_next_road_lanes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.next_road_lanes_;
}

// -------------------------------------------------------------------

// Road

// int32 id = 1 [json_name = "id"];
inline void Road::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t Road::id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Road.id)
  return _internal_id();
}
inline void Road::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Road.id)
}
inline ::int32_t Road::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Road::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string name = 4 [json_name = "name"];
inline void Road::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Road::name() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Road.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Road::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.map.v2.Road.name)
}
inline std::string* Road::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:city.map.v2.Road.name)
  return _s;
}
inline const std::string& Road::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Road::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Road::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Road::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.Road.name)
  return _impl_.name_.Release();
}
inline void Road::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.Road.name)
}

// repeated int32 lane_ids = 2 [json_name = "laneIds"];
inline int Road::_internal_lane_ids_size() const {
  return _internal_lane_ids().size();
}
inline int Road::lane_ids_size() const {
  return _internal_lane_ids_size();
}
inline void Road::clear_lane_ids() {
  _internal_mutable_lane_ids()->Clear();
}
inline ::int32_t Road::lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Road.lane_ids)
  return _internal_lane_ids().Get(index);
}
inline void Road::set_lane_ids(int index, ::int32_t value) {
  _internal_mutable_lane_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:city.map.v2.Road.lane_ids)
}
inline void Road::add_lane_ids(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_lane_ids()->Add(value);
  // @@protoc_insertion_point(field_add:city.map.v2.Road.lane_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Road::lane_ids() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Road.lane_ids)
  return _internal_lane_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Road::mutable_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Road.lane_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_lane_ids();
}

inline const ::google::protobuf::RepeatedField<::int32_t>& Road::_internal_lane_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lane_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Road::_internal_mutable_lane_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.lane_ids_;
}

// repeated .city.map.v2.NextRoadLanePlan next_road_lane_plans = 3 [json_name = "nextRoadLanePlans"];
inline int Road::_internal_next_road_lane_plans_size() const {
  return _internal_next_road_lane_plans().size();
}
inline int Road::next_road_lane_plans_size() const {
  return _internal_next_road_lane_plans_size();
}
inline void Road::clear_next_road_lane_plans() {
  _internal_mutable_next_road_lane_plans()->Clear();
}
inline ::city::map::v2::NextRoadLanePlan* Road::mutable_next_road_lane_plans(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Road.next_road_lane_plans)
  return _internal_mutable_next_road_lane_plans()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::map::v2::NextRoadLanePlan >*
Road::mutable_next_road_lane_plans() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Road.next_road_lane_plans)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_next_road_lane_plans();
}
inline const ::city::map::v2::NextRoadLanePlan& Road::next_road_lane_plans(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Road.next_road_lane_plans)
    return _internal_next_road_lane_plans().Get(index);
}
inline ::city::map::v2::NextRoadLanePlan* Road::add_next_road_lane_plans() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::map::v2::NextRoadLanePlan* _add = _internal_mutable_next_road_lane_plans()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Road.next_road_lane_plans)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::map::v2::NextRoadLanePlan >&
Road::next_road_lane_plans() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Road.next_road_lane_plans)
  return _internal_next_road_lane_plans();
}
inline const ::google::protobuf::RepeatedPtrField<::city::map::v2::NextRoadLanePlan>&
Road::_internal_next_road_lane_plans() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.next_road_lane_plans_;
}
inline ::google::protobuf::RepeatedPtrField<::city::map::v2::NextRoadLanePlan>*
Road::_internal_mutable_next_road_lane_plans() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.next_road_lane_plans_;
}

// -------------------------------------------------------------------

// JunctionLaneGroup

// int32 in_road_id = 1 [json_name = "inRoadId"];
inline void JunctionLaneGroup::clear_in_road_id() {
  _impl_.in_road_id_ = 0;
}
inline ::int32_t JunctionLaneGroup::in_road_id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionLaneGroup.in_road_id)
  return _internal_in_road_id();
}
inline void JunctionLaneGroup::set_in_road_id(::int32_t value) {
  _internal_set_in_road_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionLaneGroup.in_road_id)
}
inline ::int32_t JunctionLaneGroup::_internal_in_road_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.in_road_id_;
}
inline void JunctionLaneGroup::_internal_set_in_road_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.in_road_id_ = value;
}

// double in_angle = 2 [json_name = "inAngle"];
inline void JunctionLaneGroup::clear_in_angle() {
  _impl_.in_angle_ = 0;
}
inline double JunctionLaneGroup::in_angle() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionLaneGroup.in_angle)
  return _internal_in_angle();
}
inline void JunctionLaneGroup::set_in_angle(double value) {
  _internal_set_in_angle(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionLaneGroup.in_angle)
}
inline double JunctionLaneGroup::_internal_in_angle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.in_angle_;
}
inline void JunctionLaneGroup::_internal_set_in_angle(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.in_angle_ = value;
}

// int32 out_road_id = 3 [json_name = "outRoadId"];
inline void JunctionLaneGroup::clear_out_road_id() {
  _impl_.out_road_id_ = 0;
}
inline ::int32_t JunctionLaneGroup::out_road_id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionLaneGroup.out_road_id)
  return _internal_out_road_id();
}
inline void JunctionLaneGroup::set_out_road_id(::int32_t value) {
  _internal_set_out_road_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionLaneGroup.out_road_id)
}
inline ::int32_t JunctionLaneGroup::_internal_out_road_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_road_id_;
}
inline void JunctionLaneGroup::_internal_set_out_road_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_road_id_ = value;
}

// double out_angle = 4 [json_name = "outAngle"];
inline void JunctionLaneGroup::clear_out_angle() {
  _impl_.out_angle_ = 0;
}
inline double JunctionLaneGroup::out_angle() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionLaneGroup.out_angle)
  return _internal_out_angle();
}
inline void JunctionLaneGroup::set_out_angle(double value) {
  _internal_set_out_angle(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionLaneGroup.out_angle)
}
inline double JunctionLaneGroup::_internal_out_angle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.out_angle_;
}
inline void JunctionLaneGroup::_internal_set_out_angle(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.out_angle_ = value;
}

// repeated int32 lane_ids = 5 [json_name = "laneIds"];
inline int JunctionLaneGroup::_internal_lane_ids_size() const {
  return _internal_lane_ids().size();
}
inline int JunctionLaneGroup::lane_ids_size() const {
  return _internal_lane_ids_size();
}
inline void JunctionLaneGroup::clear_lane_ids() {
  _internal_mutable_lane_ids()->Clear();
}
inline ::int32_t JunctionLaneGroup::lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionLaneGroup.lane_ids)
  return _internal_lane_ids().Get(index);
}
inline void JunctionLaneGroup::set_lane_ids(int index, ::int32_t value) {
  _internal_mutable_lane_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionLaneGroup.lane_ids)
}
inline void JunctionLaneGroup::add_lane_ids(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_lane_ids()->Add(value);
  // @@protoc_insertion_point(field_add:city.map.v2.JunctionLaneGroup.lane_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& JunctionLaneGroup::lane_ids() const {
  // @@protoc_insertion_point(field_list:city.map.v2.JunctionLaneGroup.lane_ids)
  return _internal_lane_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* JunctionLaneGroup::mutable_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.JunctionLaneGroup.lane_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_lane_ids();
}

inline const ::google::protobuf::RepeatedField<::int32_t>& JunctionLaneGroup::_internal_lane_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lane_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* JunctionLaneGroup::_internal_mutable_lane_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.lane_ids_;
}

// .city.map.v2.LaneTurn turn = 6 [json_name = "turn"];
inline void JunctionLaneGroup::clear_turn() {
  _impl_.turn_ = 0;
}
inline ::city::map::v2::LaneTurn JunctionLaneGroup::turn() const {
  // @@protoc_insertion_point(field_get:city.map.v2.JunctionLaneGroup.turn)
  return _internal_turn();
}
inline void JunctionLaneGroup::set_turn(::city::map::v2::LaneTurn value) {
  _internal_set_turn(value);
  // @@protoc_insertion_point(field_set:city.map.v2.JunctionLaneGroup.turn)
}
inline ::city::map::v2::LaneTurn JunctionLaneGroup::_internal_turn() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::map::v2::LaneTurn>(_impl_.turn_);
}
inline void JunctionLaneGroup::_internal_set_turn(::city::map::v2::LaneTurn value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.turn_ = value;
}

// -------------------------------------------------------------------

// Junction

// int32 id = 1 [json_name = "id"];
inline void Junction::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t Junction::id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Junction.id)
  return _internal_id();
}
inline void Junction::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Junction.id)
}
inline ::int32_t Junction::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Junction::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// repeated int32 lane_ids = 2 [json_name = "laneIds"];
inline int Junction::_internal_lane_ids_size() const {
  return _internal_lane_ids().size();
}
inline int Junction::lane_ids_size() const {
  return _internal_lane_ids_size();
}
inline void Junction::clear_lane_ids() {
  _internal_mutable_lane_ids()->Clear();
}
inline ::int32_t Junction::lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Junction.lane_ids)
  return _internal_lane_ids().Get(index);
}
inline void Junction::set_lane_ids(int index, ::int32_t value) {
  _internal_mutable_lane_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:city.map.v2.Junction.lane_ids)
}
inline void Junction::add_lane_ids(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_lane_ids()->Add(value);
  // @@protoc_insertion_point(field_add:city.map.v2.Junction.lane_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Junction::lane_ids() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Junction.lane_ids)
  return _internal_lane_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Junction::mutable_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Junction.lane_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_lane_ids();
}

inline const ::google::protobuf::RepeatedField<::int32_t>& Junction::_internal_lane_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lane_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Junction::_internal_mutable_lane_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.lane_ids_;
}

// repeated .city.map.v2.JunctionLaneGroup driving_lane_groups = 3 [json_name = "drivingLaneGroups"];
inline int Junction::_internal_driving_lane_groups_size() const {
  return _internal_driving_lane_groups().size();
}
inline int Junction::driving_lane_groups_size() const {
  return _internal_driving_lane_groups_size();
}
inline void Junction::clear_driving_lane_groups() {
  _internal_mutable_driving_lane_groups()->Clear();
}
inline ::city::map::v2::JunctionLaneGroup* Junction::mutable_driving_lane_groups(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Junction.driving_lane_groups)
  return _internal_mutable_driving_lane_groups()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::map::v2::JunctionLaneGroup >*
Junction::mutable_driving_lane_groups() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Junction.driving_lane_groups)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_driving_lane_groups();
}
inline const ::city::map::v2::JunctionLaneGroup& Junction::driving_lane_groups(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Junction.driving_lane_groups)
    return _internal_driving_lane_groups().Get(index);
}
inline ::city::map::v2::JunctionLaneGroup* Junction::add_driving_lane_groups() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::map::v2::JunctionLaneGroup* _add = _internal_mutable_driving_lane_groups()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Junction.driving_lane_groups)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::map::v2::JunctionLaneGroup >&
Junction::driving_lane_groups() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Junction.driving_lane_groups)
  return _internal_driving_lane_groups();
}
inline const ::google::protobuf::RepeatedPtrField<::city::map::v2::JunctionLaneGroup>&
Junction::_internal_driving_lane_groups() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.driving_lane_groups_;
}
inline ::google::protobuf::RepeatedPtrField<::city::map::v2::JunctionLaneGroup>*
Junction::_internal_mutable_driving_lane_groups() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.driving_lane_groups_;
}

// repeated .city.map.v2.AvailablePhase phases = 4 [json_name = "phases"];
inline int Junction::_internal_phases_size() const {
  return _internal_phases().size();
}
inline int Junction::phases_size() const {
  return _internal_phases_size();
}
inline ::city::map::v2::AvailablePhase* Junction::mutable_phases(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Junction.phases)
  return _internal_mutable_phases()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::map::v2::AvailablePhase >*
Junction::mutable_phases() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Junction.phases)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_phases();
}
inline const ::city::map::v2::AvailablePhase& Junction::phases(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Junction.phases)
    return _internal_phases().Get(index);
}
inline ::city::map::v2::AvailablePhase* Junction::add_phases() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::map::v2::AvailablePhase* _add = _internal_mutable_phases()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Junction.phases)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::map::v2::AvailablePhase >&
Junction::phases() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Junction.phases)
  return _internal_phases();
}
inline const ::google::protobuf::RepeatedPtrField<::city::map::v2::AvailablePhase>&
Junction::_internal_phases() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.phases_;
}
inline ::google::protobuf::RepeatedPtrField<::city::map::v2::AvailablePhase>*
Junction::_internal_mutable_phases() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.phases_;
}

// optional .city.map.v2.TrafficLight fixed_program = 5 [json_name = "fixedProgram"];
inline bool Junction::has_fixed_program() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fixed_program_ != nullptr);
  return value;
}
inline const ::city::map::v2::TrafficLight& Junction::_internal_fixed_program() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::map::v2::TrafficLight* p = _impl_.fixed_program_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::map::v2::TrafficLight&>(::city::map::v2::_TrafficLight_default_instance_);
}
inline const ::city::map::v2::TrafficLight& Junction::fixed_program() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Junction.fixed_program)
  return _internal_fixed_program();
}
inline void Junction::unsafe_arena_set_allocated_fixed_program(::city::map::v2::TrafficLight* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fixed_program_);
  }
  _impl_.fixed_program_ = reinterpret_cast<::city::map::v2::TrafficLight*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.map.v2.Junction.fixed_program)
}
inline ::city::map::v2::TrafficLight* Junction::release_fixed_program() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::map::v2::TrafficLight* released = _impl_.fixed_program_;
  _impl_.fixed_program_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::map::v2::TrafficLight* Junction::unsafe_arena_release_fixed_program() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.Junction.fixed_program)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::map::v2::TrafficLight* temp = _impl_.fixed_program_;
  _impl_.fixed_program_ = nullptr;
  return temp;
}
inline ::city::map::v2::TrafficLight* Junction::_internal_mutable_fixed_program() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.fixed_program_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::map::v2::TrafficLight>(GetArenaForAllocation());
    _impl_.fixed_program_ = reinterpret_cast<::city::map::v2::TrafficLight*>(p);
  }
  return _impl_.fixed_program_;
}
inline ::city::map::v2::TrafficLight* Junction::mutable_fixed_program() {
  ::city::map::v2::TrafficLight* _msg = _internal_mutable_fixed_program();
  // @@protoc_insertion_point(field_mutable:city.map.v2.Junction.fixed_program)
  return _msg;
}
inline void Junction::set_allocated_fixed_program(::city::map::v2::TrafficLight* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fixed_program_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.fixed_program_ = reinterpret_cast<::city::map::v2::TrafficLight*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.Junction.fixed_program)
}

// -------------------------------------------------------------------

// Aoi

// int32 id = 1 [json_name = "id"];
inline void Aoi::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t Aoi::id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Aoi.id)
  return _internal_id();
}
inline void Aoi::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Aoi.id)
}
inline ::int32_t Aoi::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Aoi::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string name = 11 [json_name = "name"];
inline void Aoi::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Aoi::name() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Aoi.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Aoi::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.map.v2.Aoi.name)
}
inline std::string* Aoi::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:city.map.v2.Aoi.name)
  return _s;
}
inline const std::string& Aoi::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Aoi::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Aoi::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Aoi::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.Aoi.name)
  return _impl_.name_.Release();
}
inline void Aoi::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.Aoi.name)
}

// .city.map.v2.AoiType type = 2 [json_name = "type", deprecated = true];
inline void Aoi::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::map::v2::AoiType Aoi::type() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Aoi.type)
  return _internal_type();
}
inline void Aoi::set_type(::city::map::v2::AoiType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Aoi.type)
}
inline ::city::map::v2::AoiType Aoi::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::map::v2::AoiType>(_impl_.type_);
}
inline void Aoi::_internal_set_type(::city::map::v2::AoiType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// repeated .city.geo.v2.LanePosition driving_positions = 3 [json_name = "drivingPositions"];
inline int Aoi::_internal_driving_positions_size() const {
  return _internal_driving_positions().size();
}
inline int Aoi::driving_positions_size() const {
  return _internal_driving_positions_size();
}
inline ::city::geo::v2::LanePosition* Aoi::mutable_driving_positions(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Aoi.driving_positions)
  return _internal_mutable_driving_positions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::geo::v2::LanePosition >*
Aoi::mutable_driving_positions() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Aoi.driving_positions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_driving_positions();
}
inline const ::city::geo::v2::LanePosition& Aoi::driving_positions(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Aoi.driving_positions)
    return _internal_driving_positions().Get(index);
}
inline ::city::geo::v2::LanePosition* Aoi::add_driving_positions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::geo::v2::LanePosition* _add = _internal_mutable_driving_positions()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Aoi.driving_positions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::geo::v2::LanePosition >&
Aoi::driving_positions() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Aoi.driving_positions)
  return _internal_driving_positions();
}
inline const ::google::protobuf::RepeatedPtrField<::city::geo::v2::LanePosition>&
Aoi::_internal_driving_positions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.driving_positions_;
}
inline ::google::protobuf::RepeatedPtrField<::city::geo::v2::LanePosition>*
Aoi::_internal_mutable_driving_positions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.driving_positions_;
}

// repeated .city.geo.v2.LanePosition walking_positions = 4 [json_name = "walkingPositions"];
inline int Aoi::_internal_walking_positions_size() const {
  return _internal_walking_positions().size();
}
inline int Aoi::walking_positions_size() const {
  return _internal_walking_positions_size();
}
inline ::city::geo::v2::LanePosition* Aoi::mutable_walking_positions(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Aoi.walking_positions)
  return _internal_mutable_walking_positions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::geo::v2::LanePosition >*
Aoi::mutable_walking_positions() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Aoi.walking_positions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_walking_positions();
}
inline const ::city::geo::v2::LanePosition& Aoi::walking_positions(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Aoi.walking_positions)
    return _internal_walking_positions().Get(index);
}
inline ::city::geo::v2::LanePosition* Aoi::add_walking_positions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::geo::v2::LanePosition* _add = _internal_mutable_walking_positions()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Aoi.walking_positions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::geo::v2::LanePosition >&
Aoi::walking_positions() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Aoi.walking_positions)
  return _internal_walking_positions();
}
inline const ::google::protobuf::RepeatedPtrField<::city::geo::v2::LanePosition>&
Aoi::_internal_walking_positions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.walking_positions_;
}
inline ::google::protobuf::RepeatedPtrField<::city::geo::v2::LanePosition>*
Aoi::_internal_mutable_walking_positions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.walking_positions_;
}

// repeated .city.geo.v2.XYPosition positions = 5 [json_name = "positions"];
inline int Aoi::_internal_positions_size() const {
  return _internal_positions().size();
}
inline int Aoi::positions_size() const {
  return _internal_positions_size();
}
inline ::city::geo::v2::XYPosition* Aoi::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Aoi.positions)
  return _internal_mutable_positions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >*
Aoi::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Aoi.positions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_positions();
}
inline const ::city::geo::v2::XYPosition& Aoi::positions(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Aoi.positions)
    return _internal_positions().Get(index);
}
inline ::city::geo::v2::XYPosition* Aoi::add_positions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::geo::v2::XYPosition* _add = _internal_mutable_positions()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Aoi.positions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >&
Aoi::positions() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Aoi.positions)
  return _internal_positions();
}
inline const ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>&
Aoi::_internal_positions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.positions_;
}
inline ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>*
Aoi::_internal_mutable_positions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.positions_;
}

// repeated .city.geo.v2.XYPosition driving_gates = 6 [json_name = "drivingGates"];
inline int Aoi::_internal_driving_gates_size() const {
  return _internal_driving_gates().size();
}
inline int Aoi::driving_gates_size() const {
  return _internal_driving_gates_size();
}
inline ::city::geo::v2::XYPosition* Aoi::mutable_driving_gates(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Aoi.driving_gates)
  return _internal_mutable_driving_gates()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >*
Aoi::mutable_driving_gates() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Aoi.driving_gates)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_driving_gates();
}
inline const ::city::geo::v2::XYPosition& Aoi::driving_gates(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Aoi.driving_gates)
    return _internal_driving_gates().Get(index);
}
inline ::city::geo::v2::XYPosition* Aoi::add_driving_gates() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::geo::v2::XYPosition* _add = _internal_mutable_driving_gates()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Aoi.driving_gates)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >&
Aoi::driving_gates() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Aoi.driving_gates)
  return _internal_driving_gates();
}
inline const ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>&
Aoi::_internal_driving_gates() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.driving_gates_;
}
inline ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>*
Aoi::_internal_mutable_driving_gates() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.driving_gates_;
}

// repeated .city.geo.v2.XYPosition walking_gates = 7 [json_name = "walkingGates"];
inline int Aoi::_internal_walking_gates_size() const {
  return _internal_walking_gates().size();
}
inline int Aoi::walking_gates_size() const {
  return _internal_walking_gates_size();
}
inline ::city::geo::v2::XYPosition* Aoi::mutable_walking_gates(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Aoi.walking_gates)
  return _internal_mutable_walking_gates()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >*
Aoi::mutable_walking_gates() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Aoi.walking_gates)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_walking_gates();
}
inline const ::city::geo::v2::XYPosition& Aoi::walking_gates(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Aoi.walking_gates)
    return _internal_walking_gates().Get(index);
}
inline ::city::geo::v2::XYPosition* Aoi::add_walking_gates() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::geo::v2::XYPosition* _add = _internal_mutable_walking_gates()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Aoi.walking_gates)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::geo::v2::XYPosition >&
Aoi::walking_gates() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Aoi.walking_gates)
  return _internal_walking_gates();
}
inline const ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>&
Aoi::_internal_walking_gates() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.walking_gates_;
}
inline ::google::protobuf::RepeatedPtrField<::city::geo::v2::XYPosition>*
Aoi::_internal_mutable_walking_gates() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.walking_gates_;
}

// optional double area = 8 [json_name = "area"];
inline bool Aoi::has_area() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Aoi::clear_area() {
  _impl_.area_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Aoi::area() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Aoi.area)
  return _internal_area();
}
inline void Aoi::set_area(double value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Aoi.area)
}
inline double Aoi::_internal_area() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.area_;
}
inline void Aoi::_internal_set_area(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.area_ = value;
}

// optional .city.map.v2.LandUseType land_use = 10 [json_name = "landUse", deprecated = true];
inline bool Aoi::has_land_use() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Aoi::clear_land_use() {
  _impl_.land_use_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::city::map::v2::LandUseType Aoi::land_use() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Aoi.land_use)
  return _internal_land_use();
}
inline void Aoi::set_land_use(::city::map::v2::LandUseType value) {
  _internal_set_land_use(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Aoi.land_use)
}
inline ::city::map::v2::LandUseType Aoi::_internal_land_use() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::map::v2::LandUseType>(_impl_.land_use_);
}
inline void Aoi::_internal_set_land_use(::city::map::v2::LandUseType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.land_use_ = value;
}

// optional string urban_land_use = 12 [json_name = "urbanLandUse"];
inline bool Aoi::has_urban_land_use() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Aoi::clear_urban_land_use() {
  _impl_.urban_land_use_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Aoi::urban_land_use() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Aoi.urban_land_use)
  return _internal_urban_land_use();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Aoi::set_urban_land_use(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.urban_land_use_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.map.v2.Aoi.urban_land_use)
}
inline std::string* Aoi::mutable_urban_land_use() {
  std::string* _s = _internal_mutable_urban_land_use();
  // @@protoc_insertion_point(field_mutable:city.map.v2.Aoi.urban_land_use)
  return _s;
}
inline const std::string& Aoi::_internal_urban_land_use() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.urban_land_use_.Get();
}
inline void Aoi::_internal_set_urban_land_use(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.urban_land_use_.Set(value, GetArenaForAllocation());
}
inline std::string* Aoi::_internal_mutable_urban_land_use() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.urban_land_use_.Mutable( GetArenaForAllocation());
}
inline std::string* Aoi::release_urban_land_use() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.Aoi.urban_land_use)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.urban_land_use_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.urban_land_use_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Aoi::set_allocated_urban_land_use(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.urban_land_use_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.urban_land_use_.IsDefault()) {
          _impl_.urban_land_use_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.Aoi.urban_land_use)
}

// repeated int32 poi_ids = 9 [json_name = "poiIds"];
inline int Aoi::_internal_poi_ids_size() const {
  return _internal_poi_ids().size();
}
inline int Aoi::poi_ids_size() const {
  return _internal_poi_ids_size();
}
inline void Aoi::clear_poi_ids() {
  _internal_mutable_poi_ids()->Clear();
}
inline ::int32_t Aoi::poi_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Aoi.poi_ids)
  return _internal_poi_ids().Get(index);
}
inline void Aoi::set_poi_ids(int index, ::int32_t value) {
  _internal_mutable_poi_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:city.map.v2.Aoi.poi_ids)
}
inline void Aoi::add_poi_ids(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_poi_ids()->Add(value);
  // @@protoc_insertion_point(field_add:city.map.v2.Aoi.poi_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Aoi::poi_ids() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Aoi.poi_ids)
  return _internal_poi_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Aoi::mutable_poi_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Aoi.poi_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_poi_ids();
}

inline const ::google::protobuf::RepeatedField<::int32_t>& Aoi::_internal_poi_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.poi_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Aoi::_internal_mutable_poi_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.poi_ids_;
}

// -------------------------------------------------------------------

// Poi

// int32 id = 1 [json_name = "id"];
inline void Poi::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t Poi::id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Poi.id)
  return _internal_id();
}
inline void Poi::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Poi.id)
}
inline ::int32_t Poi::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void Poi::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// string name = 2 [json_name = "name"];
inline void Poi::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Poi::name() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Poi.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Poi::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.map.v2.Poi.name)
}
inline std::string* Poi::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:city.map.v2.Poi.name)
  return _s;
}
inline const std::string& Poi::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Poi::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Poi::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* Poi::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.Poi.name)
  return _impl_.name_.Release();
}
inline void Poi::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.Poi.name)
}

// string category = 3 [json_name = "category"];
inline void Poi::clear_category() {
  _impl_.category_.ClearToEmpty();
}
inline const std::string& Poi::category() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Poi.category)
  return _internal_category();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Poi::set_category(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.category_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.map.v2.Poi.category)
}
inline std::string* Poi::mutable_category() {
  std::string* _s = _internal_mutable_category();
  // @@protoc_insertion_point(field_mutable:city.map.v2.Poi.category)
  return _s;
}
inline const std::string& Poi::_internal_category() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.category_.Get();
}
inline void Poi::_internal_set_category(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.category_.Set(value, GetArenaForAllocation());
}
inline std::string* Poi::_internal_mutable_category() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.category_.Mutable( GetArenaForAllocation());
}
inline std::string* Poi::release_category() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.Poi.category)
  return _impl_.category_.Release();
}
inline void Poi::set_allocated_category(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.category_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.category_.IsDefault()) {
          _impl_.category_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.Poi.category)
}

// .city.geo.v2.XYPosition position = 4 [json_name = "position"];
inline bool Poi::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline const ::city::geo::v2::XYPosition& Poi::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::geo::v2::XYPosition* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::XYPosition&>(::city::geo::v2::_XYPosition_default_instance_);
}
inline const ::city::geo::v2::XYPosition& Poi::position() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Poi.position)
  return _internal_position();
}
inline void Poi::unsafe_arena_set_allocated_position(::city::geo::v2::XYPosition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::city::geo::v2::XYPosition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.map.v2.Poi.position)
}
inline ::city::geo::v2::XYPosition* Poi::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::XYPosition* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::geo::v2::XYPosition* Poi::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.Poi.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::geo::v2::XYPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::city::geo::v2::XYPosition* Poi::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::XYPosition>(GetArenaForAllocation());
    _impl_.position_ = reinterpret_cast<::city::geo::v2::XYPosition*>(p);
  }
  return _impl_.position_;
}
inline ::city::geo::v2::XYPosition* Poi::mutable_position() {
  ::city::geo::v2::XYPosition* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:city.map.v2.Poi.position)
  return _msg;
}
inline void Poi::set_allocated_position(::city::geo::v2::XYPosition* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::city::geo::v2::XYPosition*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.Poi.position)
}

// int32 aoi_id = 5 [json_name = "aoiId"];
inline void Poi::clear_aoi_id() {
  _impl_.aoi_id_ = 0;
}
inline ::int32_t Poi::aoi_id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Poi.aoi_id)
  return _internal_aoi_id();
}
inline void Poi::set_aoi_id(::int32_t value) {
  _internal_set_aoi_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Poi.aoi_id)
}
inline ::int32_t Poi::_internal_aoi_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aoi_id_;
}
inline void Poi::_internal_set_aoi_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.aoi_id_ = value;
}

// optional int32 capacity = 6 [json_name = "capacity"];
inline bool Poi::has_capacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Poi::clear_capacity() {
  _impl_.capacity_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Poi::capacity() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Poi.capacity)
  return _internal_capacity();
}
inline void Poi::set_capacity(::int32_t value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Poi.capacity)
}
inline ::int32_t Poi::_internal_capacity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.capacity_;
}
inline void Poi::_internal_set_capacity(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.capacity_ = value;
}

// repeated string functions = 7 [json_name = "functions"];
inline int Poi::_internal_functions_size() const {
  return _internal_functions().size();
}
inline int Poi::functions_size() const {
  return _internal_functions_size();
}
inline void Poi::clear_functions() {
  _internal_mutable_functions()->Clear();
}
inline std::string* Poi::add_functions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_functions()->Add();
  // @@protoc_insertion_point(field_add_mutable:city.map.v2.Poi.functions)
  return _s;
}
inline const std::string& Poi::functions(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Poi.functions)
  return _internal_functions().Get(index);
}
inline std::string* Poi::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Poi.functions)
  return _internal_mutable_functions()->Mutable(index);
}
inline void Poi::set_functions(int index, const std::string& value) {
  _internal_mutable_functions()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:city.map.v2.Poi.functions)
}
inline void Poi::set_functions(int index, std::string&& value) {
  _internal_mutable_functions()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:city.map.v2.Poi.functions)
}
inline void Poi::set_functions(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_functions()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:city.map.v2.Poi.functions)
}
inline void Poi::set_functions(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_functions()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:city.map.v2.Poi.functions)
}
inline void Poi::set_functions(int index, absl::string_view value) {
  _internal_mutable_functions()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:city.map.v2.Poi.functions)
}
inline void Poi::add_functions(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_functions()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:city.map.v2.Poi.functions)
}
inline void Poi::add_functions(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_functions()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:city.map.v2.Poi.functions)
}
inline void Poi::add_functions(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_functions()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:city.map.v2.Poi.functions)
}
inline void Poi::add_functions(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_functions()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:city.map.v2.Poi.functions)
}
inline void Poi::add_functions(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_functions()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:city.map.v2.Poi.functions)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Poi::functions() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Poi.functions)
  return _internal_functions();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* Poi::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Poi.functions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_functions();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Poi::_internal_functions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.functions_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Poi::_internal_mutable_functions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.functions_;
}

// -------------------------------------------------------------------

// Map

// .city.map.v2.Header header = 1 [json_name = "header"];
inline bool Map::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline void Map::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::city::map::v2::Header& Map::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::map::v2::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::map::v2::Header&>(::city::map::v2::_Header_default_instance_);
}
inline const ::city::map::v2::Header& Map::header() const {
  // @@protoc_insertion_point(field_get:city.map.v2.Map.header)
  return _internal_header();
}
inline void Map::unsafe_arena_set_allocated_header(::city::map::v2::Header* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::city::map::v2::Header*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.map.v2.Map.header)
}
inline ::city::map::v2::Header* Map::release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::map::v2::Header* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::map::v2::Header* Map::unsafe_arena_release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.Map.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::map::v2::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::city::map::v2::Header* Map::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::map::v2::Header>(GetArenaForAllocation());
    _impl_.header_ = reinterpret_cast<::city::map::v2::Header*>(p);
  }
  return _impl_.header_;
}
inline ::city::map::v2::Header* Map::mutable_header() {
  ::city::map::v2::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:city.map.v2.Map.header)
  return _msg;
}
inline void Map::set_allocated_header(::city::map::v2::Header* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::city::map::v2::Header*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::city::map::v2::Header*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::city::map::v2::Header*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.Map.header)
}

// repeated .city.map.v2.Lane lanes = 2 [json_name = "lanes"];
inline int Map::_internal_lanes_size() const {
  return _internal_lanes().size();
}
inline int Map::lanes_size() const {
  return _internal_lanes_size();
}
inline void Map::clear_lanes() {
  _internal_mutable_lanes()->Clear();
}
inline ::city::map::v2::Lane* Map::mutable_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Map.lanes)
  return _internal_mutable_lanes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::map::v2::Lane >*
Map::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Map.lanes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_lanes();
}
inline const ::city::map::v2::Lane& Map::lanes(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Map.lanes)
    return _internal_lanes().Get(index);
}
inline ::city::map::v2::Lane* Map::add_lanes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::map::v2::Lane* _add = _internal_mutable_lanes()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Map.lanes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::map::v2::Lane >&
Map::lanes() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Map.lanes)
  return _internal_lanes();
}
inline const ::google::protobuf::RepeatedPtrField<::city::map::v2::Lane>&
Map::_internal_lanes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lanes_;
}
inline ::google::protobuf::RepeatedPtrField<::city::map::v2::Lane>*
Map::_internal_mutable_lanes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.lanes_;
}

// repeated .city.map.v2.Road roads = 3 [json_name = "roads"];
inline int Map::_internal_roads_size() const {
  return _internal_roads().size();
}
inline int Map::roads_size() const {
  return _internal_roads_size();
}
inline void Map::clear_roads() {
  _internal_mutable_roads()->Clear();
}
inline ::city::map::v2::Road* Map::mutable_roads(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Map.roads)
  return _internal_mutable_roads()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::map::v2::Road >*
Map::mutable_roads() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Map.roads)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_roads();
}
inline const ::city::map::v2::Road& Map::roads(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Map.roads)
    return _internal_roads().Get(index);
}
inline ::city::map::v2::Road* Map::add_roads() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::map::v2::Road* _add = _internal_mutable_roads()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Map.roads)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::map::v2::Road >&
Map::roads() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Map.roads)
  return _internal_roads();
}
inline const ::google::protobuf::RepeatedPtrField<::city::map::v2::Road>&
Map::_internal_roads() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roads_;
}
inline ::google::protobuf::RepeatedPtrField<::city::map::v2::Road>*
Map::_internal_mutable_roads() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.roads_;
}

// repeated .city.map.v2.Junction junctions = 4 [json_name = "junctions"];
inline int Map::_internal_junctions_size() const {
  return _internal_junctions().size();
}
inline int Map::junctions_size() const {
  return _internal_junctions_size();
}
inline void Map::clear_junctions() {
  _internal_mutable_junctions()->Clear();
}
inline ::city::map::v2::Junction* Map::mutable_junctions(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Map.junctions)
  return _internal_mutable_junctions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::map::v2::Junction >*
Map::mutable_junctions() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Map.junctions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_junctions();
}
inline const ::city::map::v2::Junction& Map::junctions(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Map.junctions)
    return _internal_junctions().Get(index);
}
inline ::city::map::v2::Junction* Map::add_junctions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::map::v2::Junction* _add = _internal_mutable_junctions()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Map.junctions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::map::v2::Junction >&
Map::junctions() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Map.junctions)
  return _internal_junctions();
}
inline const ::google::protobuf::RepeatedPtrField<::city::map::v2::Junction>&
Map::_internal_junctions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.junctions_;
}
inline ::google::protobuf::RepeatedPtrField<::city::map::v2::Junction>*
Map::_internal_mutable_junctions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.junctions_;
}

// repeated .city.map.v2.Aoi aois = 5 [json_name = "aois"];
inline int Map::_internal_aois_size() const {
  return _internal_aois().size();
}
inline int Map::aois_size() const {
  return _internal_aois_size();
}
inline void Map::clear_aois() {
  _internal_mutable_aois()->Clear();
}
inline ::city::map::v2::Aoi* Map::mutable_aois(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Map.aois)
  return _internal_mutable_aois()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::map::v2::Aoi >*
Map::mutable_aois() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Map.aois)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_aois();
}
inline const ::city::map::v2::Aoi& Map::aois(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Map.aois)
    return _internal_aois().Get(index);
}
inline ::city::map::v2::Aoi* Map::add_aois() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::map::v2::Aoi* _add = _internal_mutable_aois()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Map.aois)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::map::v2::Aoi >&
Map::aois() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Map.aois)
  return _internal_aois();
}
inline const ::google::protobuf::RepeatedPtrField<::city::map::v2::Aoi>&
Map::_internal_aois() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.aois_;
}
inline ::google::protobuf::RepeatedPtrField<::city::map::v2::Aoi>*
Map::_internal_mutable_aois() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.aois_;
}

// repeated .city.map.v2.Poi pois = 6 [json_name = "pois"];
inline int Map::_internal_pois_size() const {
  return _internal_pois().size();
}
inline int Map::pois_size() const {
  return _internal_pois_size();
}
inline void Map::clear_pois() {
  _internal_mutable_pois()->Clear();
}
inline ::city::map::v2::Poi* Map::mutable_pois(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.Map.pois)
  return _internal_mutable_pois()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::map::v2::Poi >*
Map::mutable_pois() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.Map.pois)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_pois();
}
inline const ::city::map::v2::Poi& Map::pois(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.Map.pois)
    return _internal_pois().Get(index);
}
inline ::city::map::v2::Poi* Map::add_pois() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::map::v2::Poi* _add = _internal_mutable_pois()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.Map.pois)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::map::v2::Poi >&
Map::pois() const {
  // @@protoc_insertion_point(field_list:city.map.v2.Map.pois)
  return _internal_pois();
}
inline const ::google::protobuf::RepeatedPtrField<::city::map::v2::Poi>&
Map::_internal_pois() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pois_;
}
inline ::google::protobuf::RepeatedPtrField<::city::map::v2::Poi>*
Map::_internal_mutable_pois() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.pois_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace map
}  // namespace city


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::city::map::v2::LaneType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::map::v2::LaneType>() {
  return ::city::map::v2::LaneType_descriptor();
}
template <>
struct is_proto_enum<::city::map::v2::LaneTurn> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::map::v2::LaneTurn>() {
  return ::city::map::v2::LaneTurn_descriptor();
}
template <>
struct is_proto_enum<::city::map::v2::LaneConnectionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::map::v2::LaneConnectionType>() {
  return ::city::map::v2::LaneConnectionType_descriptor();
}
template <>
struct is_proto_enum<::city::map::v2::AoiType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::map::v2::AoiType>() {
  return ::city::map::v2::AoiType_descriptor();
}
template <>
struct is_proto_enum<::city::map::v2::LandUseType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::map::v2::LandUseType>() {
  return ::city::map::v2::LandUseType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2fmap_2eproto_2epb_2eh
