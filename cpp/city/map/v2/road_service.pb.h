// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/map/v2/road_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2froad_5fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2froad_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "city/event/v1/event.pb.h"
#include "city/map/v2/lane_service.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_city_2fmap_2fv2_2froad_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fmap_2fv2_2froad_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_city_2fmap_2fv2_2froad_5fservice_2eproto;
namespace city {
namespace map {
namespace v2 {
class GetEventsRequest;
struct GetEventsRequestDefaultTypeInternal;
extern GetEventsRequestDefaultTypeInternal _GetEventsRequest_default_instance_;
class GetEventsResponse;
struct GetEventsResponseDefaultTypeInternal;
extern GetEventsResponseDefaultTypeInternal _GetEventsResponse_default_instance_;
class GetRoadRequest;
struct GetRoadRequestDefaultTypeInternal;
extern GetRoadRequestDefaultTypeInternal _GetRoadRequest_default_instance_;
class GetRoadResponse;
struct GetRoadResponseDefaultTypeInternal;
extern GetRoadResponseDefaultTypeInternal _GetRoadResponse_default_instance_;
class GetRuinInfoRequest;
struct GetRuinInfoRequestDefaultTypeInternal;
extern GetRuinInfoRequestDefaultTypeInternal _GetRuinInfoRequest_default_instance_;
class GetRuinInfoResponse;
struct GetRuinInfoResponseDefaultTypeInternal;
extern GetRuinInfoResponseDefaultTypeInternal _GetRuinInfoResponse_default_instance_;
class RoadState;
struct RoadStateDefaultTypeInternal;
extern RoadStateDefaultTypeInternal _RoadState_default_instance_;
class RuinInfo;
struct RuinInfoDefaultTypeInternal;
extern RuinInfoDefaultTypeInternal _RuinInfo_default_instance_;
}  // namespace v2
}  // namespace map
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace city {
namespace map {
namespace v2 {
enum RoadLevel : int {
  ROAD_LEVEL_UNSPECIFIED = 0,
  ROAD_LEVEL_CLEAR = 1,
  ROAD_LEVEL_LIGHT_LOAD = 2,
  ROAD_LEVEL_MEDIUM_LOAD = 3,
  ROAD_LEVEL_HEAVY_LOAD = 4,
  ROAD_LEVEL_OVERLOAD = 5,
  ROAD_LEVEL_RESTRICTED = 6,
  RoadLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RoadLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RoadLevel_IsValid(int value);
constexpr RoadLevel RoadLevel_MIN = static_cast<RoadLevel>(0);
constexpr RoadLevel RoadLevel_MAX = static_cast<RoadLevel>(6);
constexpr int RoadLevel_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
RoadLevel_descriptor();
template <typename T>
const std::string& RoadLevel_Name(T value) {
  static_assert(std::is_same<T, RoadLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RoadLevel_Name().");
  return RoadLevel_Name(static_cast<RoadLevel>(value));
}
template <>
inline const std::string& RoadLevel_Name(RoadLevel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RoadLevel_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool RoadLevel_Parse(absl::string_view name, RoadLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoadLevel>(
      RoadLevel_descriptor(), name, value);
}
enum InterruptionReason : int {
  INTERRUPTION_REASON_UNSPECIFIED = 0,
  INTERRUPTION_REASON_RUINED = 1,
  INTERRUPTION_REASON_CASCADE = 2,
  INTERRUPTION_REASON_CONGESTION = 3,
  InterruptionReason_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  InterruptionReason_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool InterruptionReason_IsValid(int value);
constexpr InterruptionReason InterruptionReason_MIN = static_cast<InterruptionReason>(0);
constexpr InterruptionReason InterruptionReason_MAX = static_cast<InterruptionReason>(3);
constexpr int InterruptionReason_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
InterruptionReason_descriptor();
template <typename T>
const std::string& InterruptionReason_Name(T value) {
  static_assert(std::is_same<T, InterruptionReason>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to InterruptionReason_Name().");
  return InterruptionReason_Name(static_cast<InterruptionReason>(value));
}
template <>
inline const std::string& InterruptionReason_Name(InterruptionReason value) {
  return ::google::protobuf::internal::NameOfDenseEnum<InterruptionReason_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool InterruptionReason_Parse(absl::string_view name, InterruptionReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InterruptionReason>(
      InterruptionReason_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class GetRoadRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.GetRoadRequest) */ {
 public:
  inline GetRoadRequest() : GetRoadRequest(nullptr) {}
  ~GetRoadRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetRoadRequest(::google::protobuf::internal::ConstantInitialized);

  GetRoadRequest(const GetRoadRequest& from);
  GetRoadRequest(GetRoadRequest&& from) noexcept
    : GetRoadRequest() {
    *this = ::std::move(from);
  }

  inline GetRoadRequest& operator=(const GetRoadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRoadRequest& operator=(GetRoadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRoadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRoadRequest* internal_default_instance() {
    return reinterpret_cast<const GetRoadRequest*>(
               &_GetRoadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetRoadRequest& a, GetRoadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRoadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRoadRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRoadRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRoadRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetRoadRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetRoadRequest& from) {
    GetRoadRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRoadRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.GetRoadRequest";
  }
  protected:
  explicit GetRoadRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoadIdsFieldNumber = 1,
    kExcludeLaneFieldNumber = 2,
    kExcludePersonFieldNumber = 3,
  };
  // repeated int32 road_ids = 1 [json_name = "roadIds"];
  int road_ids_size() const;
  private:
  int _internal_road_ids_size() const;

  public:
  void clear_road_ids() ;
  ::int32_t road_ids(int index) const;
  void set_road_ids(int index, ::int32_t value);
  void add_road_ids(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& road_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_road_ids();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_road_ids() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_road_ids();

  public:
  // bool exclude_lane = 2 [json_name = "excludeLane"];
  void clear_exclude_lane() ;
  bool exclude_lane() const;
  void set_exclude_lane(bool value);

  private:
  bool _internal_exclude_lane() const;
  void _internal_set_exclude_lane(bool value);

  public:
  // bool exclude_person = 3 [json_name = "excludePerson"];
  void clear_exclude_person() ;
  bool exclude_person() const;
  void set_exclude_person(bool value);

  private:
  bool _internal_exclude_person() const;
  void _internal_set_exclude_person(bool value);

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.GetRoadRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<::int32_t> road_ids_;
    mutable ::google::protobuf::internal::CachedSize _road_ids_cached_byte_size_;
    bool exclude_lane_;
    bool exclude_person_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2froad_5fservice_2eproto;
};// -------------------------------------------------------------------

class GetRoadResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.GetRoadResponse) */ {
 public:
  inline GetRoadResponse() : GetRoadResponse(nullptr) {}
  ~GetRoadResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetRoadResponse(::google::protobuf::internal::ConstantInitialized);

  GetRoadResponse(const GetRoadResponse& from);
  GetRoadResponse(GetRoadResponse&& from) noexcept
    : GetRoadResponse() {
    *this = ::std::move(from);
  }

  inline GetRoadResponse& operator=(const GetRoadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRoadResponse& operator=(GetRoadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRoadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRoadResponse* internal_default_instance() {
    return reinterpret_cast<const GetRoadResponse*>(
               &_GetRoadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetRoadResponse& a, GetRoadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRoadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRoadResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRoadResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRoadResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetRoadResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetRoadResponse& from) {
    GetRoadResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRoadResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.GetRoadResponse";
  }
  protected:
  explicit GetRoadResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 1,
  };
  // repeated .city.map.v2.RoadState states = 1 [json_name = "states"];
  int states_size() const;
  private:
  int _internal_states_size() const;

  public:
  void clear_states() ;
  ::city::map::v2::RoadState* mutable_states(int index);
  ::google::protobuf::RepeatedPtrField< ::city::map::v2::RoadState >*
      mutable_states();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::map::v2::RoadState>& _internal_states() const;
  ::google::protobuf::RepeatedPtrField<::city::map::v2::RoadState>* _internal_mutable_states();
  public:
  const ::city::map::v2::RoadState& states(int index) const;
  ::city::map::v2::RoadState* add_states();
  const ::google::protobuf::RepeatedPtrField< ::city::map::v2::RoadState >&
      states() const;
  // @@protoc_insertion_point(class_scope:city.map.v2.GetRoadResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::city::map::v2::RoadState > states_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2froad_5fservice_2eproto;
};// -------------------------------------------------------------------

class GetRuinInfoRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.map.v2.GetRuinInfoRequest) */ {
 public:
  inline GetRuinInfoRequest() : GetRuinInfoRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetRuinInfoRequest(::google::protobuf::internal::ConstantInitialized);

  GetRuinInfoRequest(const GetRuinInfoRequest& from);
  GetRuinInfoRequest(GetRuinInfoRequest&& from) noexcept
    : GetRuinInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetRuinInfoRequest& operator=(const GetRuinInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRuinInfoRequest& operator=(GetRuinInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRuinInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRuinInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetRuinInfoRequest*>(
               &_GetRuinInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetRuinInfoRequest& a, GetRuinInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRuinInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRuinInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRuinInfoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRuinInfoRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetRuinInfoRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetRuinInfoRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.GetRuinInfoRequest";
  }
  protected:
  explicit GetRuinInfoRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.map.v2.GetRuinInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_city_2fmap_2fv2_2froad_5fservice_2eproto;
};// -------------------------------------------------------------------

class RuinInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.RuinInfo) */ {
 public:
  inline RuinInfo() : RuinInfo(nullptr) {}
  ~RuinInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RuinInfo(::google::protobuf::internal::ConstantInitialized);

  RuinInfo(const RuinInfo& from);
  RuinInfo(RuinInfo&& from) noexcept
    : RuinInfo() {
    *this = ::std::move(from);
  }

  inline RuinInfo& operator=(const RuinInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuinInfo& operator=(RuinInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuinInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuinInfo* internal_default_instance() {
    return reinterpret_cast<const RuinInfo*>(
               &_RuinInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RuinInfo& a, RuinInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RuinInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuinInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuinInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RuinInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RuinInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RuinInfo& from) {
    RuinInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuinInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.RuinInfo";
  }
  protected:
  explicit RuinInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioFieldNumber = 2,
    kNumFieldNumber = 1,
  };
  // double ratio = 2 [json_name = "ratio"];
  void clear_ratio() ;
  double ratio() const;
  void set_ratio(double value);

  private:
  double _internal_ratio() const;
  void _internal_set_ratio(double value);

  public:
  // int32 num = 1 [json_name = "num"];
  void clear_num() ;
  ::int32_t num() const;
  void set_num(::int32_t value);

  private:
  ::int32_t _internal_num() const;
  void _internal_set_num(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.RuinInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double ratio_;
    ::int32_t num_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2froad_5fservice_2eproto;
};// -------------------------------------------------------------------

class GetRuinInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.GetRuinInfoResponse) */ {
 public:
  inline GetRuinInfoResponse() : GetRuinInfoResponse(nullptr) {}
  ~GetRuinInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetRuinInfoResponse(::google::protobuf::internal::ConstantInitialized);

  GetRuinInfoResponse(const GetRuinInfoResponse& from);
  GetRuinInfoResponse(GetRuinInfoResponse&& from) noexcept
    : GetRuinInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetRuinInfoResponse& operator=(const GetRuinInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRuinInfoResponse& operator=(GetRuinInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRuinInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRuinInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetRuinInfoResponse*>(
               &_GetRuinInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetRuinInfoResponse& a, GetRuinInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRuinInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRuinInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRuinInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRuinInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetRuinInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetRuinInfoResponse& from) {
    GetRuinInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRuinInfoResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.GetRuinInfoResponse";
  }
  protected:
  explicit GetRuinInfoResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneFieldNumber = 1,
    kTwoFieldNumber = 2,
    kThreeFieldNumber = 3,
  };
  // .city.map.v2.RuinInfo one = 1 [json_name = "one"];
  bool has_one() const;
  void clear_one() ;
  const ::city::map::v2::RuinInfo& one() const;
  PROTOBUF_NODISCARD ::city::map::v2::RuinInfo* release_one();
  ::city::map::v2::RuinInfo* mutable_one();
  void set_allocated_one(::city::map::v2::RuinInfo* value);
  void unsafe_arena_set_allocated_one(::city::map::v2::RuinInfo* value);
  ::city::map::v2::RuinInfo* unsafe_arena_release_one();

  private:
  const ::city::map::v2::RuinInfo& _internal_one() const;
  ::city::map::v2::RuinInfo* _internal_mutable_one();

  public:
  // .city.map.v2.RuinInfo two = 2 [json_name = "two"];
  bool has_two() const;
  void clear_two() ;
  const ::city::map::v2::RuinInfo& two() const;
  PROTOBUF_NODISCARD ::city::map::v2::RuinInfo* release_two();
  ::city::map::v2::RuinInfo* mutable_two();
  void set_allocated_two(::city::map::v2::RuinInfo* value);
  void unsafe_arena_set_allocated_two(::city::map::v2::RuinInfo* value);
  ::city::map::v2::RuinInfo* unsafe_arena_release_two();

  private:
  const ::city::map::v2::RuinInfo& _internal_two() const;
  ::city::map::v2::RuinInfo* _internal_mutable_two();

  public:
  // .city.map.v2.RuinInfo three = 3 [json_name = "three"];
  bool has_three() const;
  void clear_three() ;
  const ::city::map::v2::RuinInfo& three() const;
  PROTOBUF_NODISCARD ::city::map::v2::RuinInfo* release_three();
  ::city::map::v2::RuinInfo* mutable_three();
  void set_allocated_three(::city::map::v2::RuinInfo* value);
  void unsafe_arena_set_allocated_three(::city::map::v2::RuinInfo* value);
  ::city::map::v2::RuinInfo* unsafe_arena_release_three();

  private:
  const ::city::map::v2::RuinInfo& _internal_three() const;
  ::city::map::v2::RuinInfo* _internal_mutable_three();

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.GetRuinInfoResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::city::map::v2::RuinInfo* one_;
    ::city::map::v2::RuinInfo* two_;
    ::city::map::v2::RuinInfo* three_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2froad_5fservice_2eproto;
};// -------------------------------------------------------------------

class GetEventsRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.map.v2.GetEventsRequest) */ {
 public:
  inline GetEventsRequest() : GetEventsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetEventsRequest(::google::protobuf::internal::ConstantInitialized);

  GetEventsRequest(const GetEventsRequest& from);
  GetEventsRequest(GetEventsRequest&& from) noexcept
    : GetEventsRequest() {
    *this = ::std::move(from);
  }

  inline GetEventsRequest& operator=(const GetEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEventsRequest& operator=(GetEventsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEventsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEventsRequest* internal_default_instance() {
    return reinterpret_cast<const GetEventsRequest*>(
               &_GetEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetEventsRequest& a, GetEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEventsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEventsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEventsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEventsRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetEventsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetEventsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.GetEventsRequest";
  }
  protected:
  explicit GetEventsRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.map.v2.GetEventsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_city_2fmap_2fv2_2froad_5fservice_2eproto;
};// -------------------------------------------------------------------

class GetEventsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.GetEventsResponse) */ {
 public:
  inline GetEventsResponse() : GetEventsResponse(nullptr) {}
  ~GetEventsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetEventsResponse(::google::protobuf::internal::ConstantInitialized);

  GetEventsResponse(const GetEventsResponse& from);
  GetEventsResponse(GetEventsResponse&& from) noexcept
    : GetEventsResponse() {
    *this = ::std::move(from);
  }

  inline GetEventsResponse& operator=(const GetEventsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEventsResponse& operator=(GetEventsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEventsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEventsResponse* internal_default_instance() {
    return reinterpret_cast<const GetEventsResponse*>(
               &_GetEventsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetEventsResponse& a, GetEventsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEventsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEventsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEventsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEventsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetEventsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetEventsResponse& from) {
    GetEventsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEventsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.GetEventsResponse";
  }
  protected:
  explicit GetEventsResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // .city.event.v1.Events events = 1 [json_name = "events"];
  bool has_events() const;
  void clear_events() ;
  const ::city::event::v1::Events& events() const;
  PROTOBUF_NODISCARD ::city::event::v1::Events* release_events();
  ::city::event::v1::Events* mutable_events();
  void set_allocated_events(::city::event::v1::Events* value);
  void unsafe_arena_set_allocated_events(::city::event::v1::Events* value);
  ::city::event::v1::Events* unsafe_arena_release_events();

  private:
  const ::city::event::v1::Events& _internal_events() const;
  ::city::event::v1::Events* _internal_mutable_events();

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.GetEventsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::city::event::v1::Events* events_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2froad_5fservice_2eproto;
};// -------------------------------------------------------------------

class RoadState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.map.v2.RoadState) */ {
 public:
  inline RoadState() : RoadState(nullptr) {}
  ~RoadState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RoadState(::google::protobuf::internal::ConstantInitialized);

  RoadState(const RoadState& from);
  RoadState(RoadState&& from) noexcept
    : RoadState() {
    *this = ::std::move(from);
  }

  inline RoadState& operator=(const RoadState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadState& operator=(RoadState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoadState& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoadState* internal_default_instance() {
    return reinterpret_cast<const RoadState*>(
               &_RoadState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RoadState& a, RoadState& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoadState* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoadState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RoadState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RoadState& from) {
    RoadState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadState* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.map.v2.RoadState";
  }
  protected:
  explicit RoadState(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanesFieldNumber = 5,
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kAvgVFieldNumber = 4,
    kReasonFieldNumber = 3,
  };
  // repeated .city.map.v2.LaneState lanes = 5 [json_name = "lanes"];
  int lanes_size() const;
  private:
  int _internal_lanes_size() const;

  public:
  void clear_lanes() ;
  ::city::map::v2::LaneState* mutable_lanes(int index);
  ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneState >*
      mutable_lanes();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneState>& _internal_lanes() const;
  ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneState>* _internal_mutable_lanes();
  public:
  const ::city::map::v2::LaneState& lanes(int index) const;
  ::city::map::v2::LaneState* add_lanes();
  const ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneState >&
      lanes() const;
  // int32 id = 1 [json_name = "id"];
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .city.map.v2.RoadLevel level = 2 [json_name = "level"];
  void clear_level() ;
  ::city::map::v2::RoadLevel level() const;
  void set_level(::city::map::v2::RoadLevel value);

  private:
  ::city::map::v2::RoadLevel _internal_level() const;
  void _internal_set_level(::city::map::v2::RoadLevel value);

  public:
  // double avg_v = 4 [json_name = "avgV"];
  void clear_avg_v() ;
  double avg_v() const;
  void set_avg_v(double value);

  private:
  double _internal_avg_v() const;
  void _internal_set_avg_v(double value);

  public:
  // .city.map.v2.InterruptionReason reason = 3 [json_name = "reason"];
  void clear_reason() ;
  ::city::map::v2::InterruptionReason reason() const;
  void set_reason(::city::map::v2::InterruptionReason value);

  private:
  ::city::map::v2::InterruptionReason _internal_reason() const;
  void _internal_set_reason(::city::map::v2::InterruptionReason value);

  public:
  // @@protoc_insertion_point(class_scope:city.map.v2.RoadState)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneState > lanes_;
    ::int32_t id_;
    int level_;
    double avg_v_;
    int reason_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fmap_2fv2_2froad_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetRoadRequest

// repeated int32 road_ids = 1 [json_name = "roadIds"];
inline int GetRoadRequest::_internal_road_ids_size() const {
  return _internal_road_ids().size();
}
inline int GetRoadRequest::road_ids_size() const {
  return _internal_road_ids_size();
}
inline void GetRoadRequest::clear_road_ids() {
  _internal_mutable_road_ids()->Clear();
}
inline ::int32_t GetRoadRequest::road_ids(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetRoadRequest.road_ids)
  return _internal_road_ids().Get(index);
}
inline void GetRoadRequest::set_road_ids(int index, ::int32_t value) {
  _internal_mutable_road_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:city.map.v2.GetRoadRequest.road_ids)
}
inline void GetRoadRequest::add_road_ids(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_road_ids()->Add(value);
  // @@protoc_insertion_point(field_add:city.map.v2.GetRoadRequest.road_ids)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& GetRoadRequest::road_ids() const {
  // @@protoc_insertion_point(field_list:city.map.v2.GetRoadRequest.road_ids)
  return _internal_road_ids();
}
inline ::google::protobuf::RepeatedField<::int32_t>* GetRoadRequest::mutable_road_ids() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.GetRoadRequest.road_ids)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_road_ids();
}

inline const ::google::protobuf::RepeatedField<::int32_t>& GetRoadRequest::_internal_road_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.road_ids_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* GetRoadRequest::_internal_mutable_road_ids() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.road_ids_;
}

// bool exclude_lane = 2 [json_name = "excludeLane"];
inline void GetRoadRequest::clear_exclude_lane() {
  _impl_.exclude_lane_ = false;
}
inline bool GetRoadRequest::exclude_lane() const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetRoadRequest.exclude_lane)
  return _internal_exclude_lane();
}
inline void GetRoadRequest::set_exclude_lane(bool value) {
  _internal_set_exclude_lane(value);
  // @@protoc_insertion_point(field_set:city.map.v2.GetRoadRequest.exclude_lane)
}
inline bool GetRoadRequest::_internal_exclude_lane() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exclude_lane_;
}
inline void GetRoadRequest::_internal_set_exclude_lane(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exclude_lane_ = value;
}

// bool exclude_person = 3 [json_name = "excludePerson"];
inline void GetRoadRequest::clear_exclude_person() {
  _impl_.exclude_person_ = false;
}
inline bool GetRoadRequest::exclude_person() const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetRoadRequest.exclude_person)
  return _internal_exclude_person();
}
inline void GetRoadRequest::set_exclude_person(bool value) {
  _internal_set_exclude_person(value);
  // @@protoc_insertion_point(field_set:city.map.v2.GetRoadRequest.exclude_person)
}
inline bool GetRoadRequest::_internal_exclude_person() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exclude_person_;
}
inline void GetRoadRequest::_internal_set_exclude_person(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exclude_person_ = value;
}

// -------------------------------------------------------------------

// GetRoadResponse

// repeated .city.map.v2.RoadState states = 1 [json_name = "states"];
inline int GetRoadResponse::_internal_states_size() const {
  return _internal_states().size();
}
inline int GetRoadResponse::states_size() const {
  return _internal_states_size();
}
inline void GetRoadResponse::clear_states() {
  _internal_mutable_states()->Clear();
}
inline ::city::map::v2::RoadState* GetRoadResponse::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.GetRoadResponse.states)
  return _internal_mutable_states()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::map::v2::RoadState >*
GetRoadResponse::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.GetRoadResponse.states)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_states();
}
inline const ::city::map::v2::RoadState& GetRoadResponse::states(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetRoadResponse.states)
    return _internal_states().Get(index);
}
inline ::city::map::v2::RoadState* GetRoadResponse::add_states() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::map::v2::RoadState* _add = _internal_mutable_states()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.GetRoadResponse.states)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::map::v2::RoadState >&
GetRoadResponse::states() const {
  // @@protoc_insertion_point(field_list:city.map.v2.GetRoadResponse.states)
  return _internal_states();
}
inline const ::google::protobuf::RepeatedPtrField<::city::map::v2::RoadState>&
GetRoadResponse::_internal_states() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.states_;
}
inline ::google::protobuf::RepeatedPtrField<::city::map::v2::RoadState>*
GetRoadResponse::_internal_mutable_states() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.states_;
}

// -------------------------------------------------------------------

// GetRuinInfoRequest

// -------------------------------------------------------------------

// RuinInfo

// int32 num = 1 [json_name = "num"];
inline void RuinInfo::clear_num() {
  _impl_.num_ = 0;
}
inline ::int32_t RuinInfo::num() const {
  // @@protoc_insertion_point(field_get:city.map.v2.RuinInfo.num)
  return _internal_num();
}
inline void RuinInfo::set_num(::int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:city.map.v2.RuinInfo.num)
}
inline ::int32_t RuinInfo::_internal_num() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_;
}
inline void RuinInfo::_internal_set_num(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_ = value;
}

// double ratio = 2 [json_name = "ratio"];
inline void RuinInfo::clear_ratio() {
  _impl_.ratio_ = 0;
}
inline double RuinInfo::ratio() const {
  // @@protoc_insertion_point(field_get:city.map.v2.RuinInfo.ratio)
  return _internal_ratio();
}
inline void RuinInfo::set_ratio(double value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:city.map.v2.RuinInfo.ratio)
}
inline double RuinInfo::_internal_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ratio_;
}
inline void RuinInfo::_internal_set_ratio(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ratio_ = value;
}

// -------------------------------------------------------------------

// GetRuinInfoResponse

// .city.map.v2.RuinInfo one = 1 [json_name = "one"];
inline bool GetRuinInfoResponse::has_one() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.one_ != nullptr);
  return value;
}
inline void GetRuinInfoResponse::clear_one() {
  if (_impl_.one_ != nullptr) _impl_.one_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::city::map::v2::RuinInfo& GetRuinInfoResponse::_internal_one() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::map::v2::RuinInfo* p = _impl_.one_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::map::v2::RuinInfo&>(::city::map::v2::_RuinInfo_default_instance_);
}
inline const ::city::map::v2::RuinInfo& GetRuinInfoResponse::one() const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetRuinInfoResponse.one)
  return _internal_one();
}
inline void GetRuinInfoResponse::unsafe_arena_set_allocated_one(::city::map::v2::RuinInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.one_);
  }
  _impl_.one_ = reinterpret_cast<::city::map::v2::RuinInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.map.v2.GetRuinInfoResponse.one)
}
inline ::city::map::v2::RuinInfo* GetRuinInfoResponse::release_one() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::map::v2::RuinInfo* released = _impl_.one_;
  _impl_.one_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::map::v2::RuinInfo* GetRuinInfoResponse::unsafe_arena_release_one() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.GetRuinInfoResponse.one)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::map::v2::RuinInfo* temp = _impl_.one_;
  _impl_.one_ = nullptr;
  return temp;
}
inline ::city::map::v2::RuinInfo* GetRuinInfoResponse::_internal_mutable_one() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.one_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::map::v2::RuinInfo>(GetArenaForAllocation());
    _impl_.one_ = reinterpret_cast<::city::map::v2::RuinInfo*>(p);
  }
  return _impl_.one_;
}
inline ::city::map::v2::RuinInfo* GetRuinInfoResponse::mutable_one() {
  ::city::map::v2::RuinInfo* _msg = _internal_mutable_one();
  // @@protoc_insertion_point(field_mutable:city.map.v2.GetRuinInfoResponse.one)
  return _msg;
}
inline void GetRuinInfoResponse::set_allocated_one(::city::map::v2::RuinInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::city::map::v2::RuinInfo*>(_impl_.one_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::city::map::v2::RuinInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.one_ = reinterpret_cast<::city::map::v2::RuinInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.GetRuinInfoResponse.one)
}

// .city.map.v2.RuinInfo two = 2 [json_name = "two"];
inline bool GetRuinInfoResponse::has_two() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.two_ != nullptr);
  return value;
}
inline void GetRuinInfoResponse::clear_two() {
  if (_impl_.two_ != nullptr) _impl_.two_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::city::map::v2::RuinInfo& GetRuinInfoResponse::_internal_two() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::map::v2::RuinInfo* p = _impl_.two_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::map::v2::RuinInfo&>(::city::map::v2::_RuinInfo_default_instance_);
}
inline const ::city::map::v2::RuinInfo& GetRuinInfoResponse::two() const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetRuinInfoResponse.two)
  return _internal_two();
}
inline void GetRuinInfoResponse::unsafe_arena_set_allocated_two(::city::map::v2::RuinInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.two_);
  }
  _impl_.two_ = reinterpret_cast<::city::map::v2::RuinInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.map.v2.GetRuinInfoResponse.two)
}
inline ::city::map::v2::RuinInfo* GetRuinInfoResponse::release_two() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::map::v2::RuinInfo* released = _impl_.two_;
  _impl_.two_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::map::v2::RuinInfo* GetRuinInfoResponse::unsafe_arena_release_two() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.GetRuinInfoResponse.two)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::map::v2::RuinInfo* temp = _impl_.two_;
  _impl_.two_ = nullptr;
  return temp;
}
inline ::city::map::v2::RuinInfo* GetRuinInfoResponse::_internal_mutable_two() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.two_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::map::v2::RuinInfo>(GetArenaForAllocation());
    _impl_.two_ = reinterpret_cast<::city::map::v2::RuinInfo*>(p);
  }
  return _impl_.two_;
}
inline ::city::map::v2::RuinInfo* GetRuinInfoResponse::mutable_two() {
  ::city::map::v2::RuinInfo* _msg = _internal_mutable_two();
  // @@protoc_insertion_point(field_mutable:city.map.v2.GetRuinInfoResponse.two)
  return _msg;
}
inline void GetRuinInfoResponse::set_allocated_two(::city::map::v2::RuinInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::city::map::v2::RuinInfo*>(_impl_.two_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::city::map::v2::RuinInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.two_ = reinterpret_cast<::city::map::v2::RuinInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.GetRuinInfoResponse.two)
}

// .city.map.v2.RuinInfo three = 3 [json_name = "three"];
inline bool GetRuinInfoResponse::has_three() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.three_ != nullptr);
  return value;
}
inline void GetRuinInfoResponse::clear_three() {
  if (_impl_.three_ != nullptr) _impl_.three_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::city::map::v2::RuinInfo& GetRuinInfoResponse::_internal_three() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::map::v2::RuinInfo* p = _impl_.three_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::map::v2::RuinInfo&>(::city::map::v2::_RuinInfo_default_instance_);
}
inline const ::city::map::v2::RuinInfo& GetRuinInfoResponse::three() const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetRuinInfoResponse.three)
  return _internal_three();
}
inline void GetRuinInfoResponse::unsafe_arena_set_allocated_three(::city::map::v2::RuinInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.three_);
  }
  _impl_.three_ = reinterpret_cast<::city::map::v2::RuinInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.map.v2.GetRuinInfoResponse.three)
}
inline ::city::map::v2::RuinInfo* GetRuinInfoResponse::release_three() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::map::v2::RuinInfo* released = _impl_.three_;
  _impl_.three_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::map::v2::RuinInfo* GetRuinInfoResponse::unsafe_arena_release_three() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.GetRuinInfoResponse.three)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::map::v2::RuinInfo* temp = _impl_.three_;
  _impl_.three_ = nullptr;
  return temp;
}
inline ::city::map::v2::RuinInfo* GetRuinInfoResponse::_internal_mutable_three() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.three_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::map::v2::RuinInfo>(GetArenaForAllocation());
    _impl_.three_ = reinterpret_cast<::city::map::v2::RuinInfo*>(p);
  }
  return _impl_.three_;
}
inline ::city::map::v2::RuinInfo* GetRuinInfoResponse::mutable_three() {
  ::city::map::v2::RuinInfo* _msg = _internal_mutable_three();
  // @@protoc_insertion_point(field_mutable:city.map.v2.GetRuinInfoResponse.three)
  return _msg;
}
inline void GetRuinInfoResponse::set_allocated_three(::city::map::v2::RuinInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::city::map::v2::RuinInfo*>(_impl_.three_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::city::map::v2::RuinInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.three_ = reinterpret_cast<::city::map::v2::RuinInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.GetRuinInfoResponse.three)
}

// -------------------------------------------------------------------

// GetEventsRequest

// -------------------------------------------------------------------

// GetEventsResponse

// .city.event.v1.Events events = 1 [json_name = "events"];
inline bool GetEventsResponse::has_events() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.events_ != nullptr);
  return value;
}
inline const ::city::event::v1::Events& GetEventsResponse::_internal_events() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::event::v1::Events* p = _impl_.events_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::event::v1::Events&>(::city::event::v1::_Events_default_instance_);
}
inline const ::city::event::v1::Events& GetEventsResponse::events() const {
  // @@protoc_insertion_point(field_get:city.map.v2.GetEventsResponse.events)
  return _internal_events();
}
inline void GetEventsResponse::unsafe_arena_set_allocated_events(::city::event::v1::Events* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.events_);
  }
  _impl_.events_ = reinterpret_cast<::city::event::v1::Events*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.map.v2.GetEventsResponse.events)
}
inline ::city::event::v1::Events* GetEventsResponse::release_events() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::event::v1::Events* released = _impl_.events_;
  _impl_.events_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::event::v1::Events* GetEventsResponse::unsafe_arena_release_events() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.map.v2.GetEventsResponse.events)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::event::v1::Events* temp = _impl_.events_;
  _impl_.events_ = nullptr;
  return temp;
}
inline ::city::event::v1::Events* GetEventsResponse::_internal_mutable_events() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.events_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::event::v1::Events>(GetArenaForAllocation());
    _impl_.events_ = reinterpret_cast<::city::event::v1::Events*>(p);
  }
  return _impl_.events_;
}
inline ::city::event::v1::Events* GetEventsResponse::mutable_events() {
  ::city::event::v1::Events* _msg = _internal_mutable_events();
  // @@protoc_insertion_point(field_mutable:city.map.v2.GetEventsResponse.events)
  return _msg;
}
inline void GetEventsResponse::set_allocated_events(::city::event::v1::Events* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.events_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.events_ = reinterpret_cast<::city::event::v1::Events*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.map.v2.GetEventsResponse.events)
}

// -------------------------------------------------------------------

// RoadState

// int32 id = 1 [json_name = "id"];
inline void RoadState::clear_id() {
  _impl_.id_ = 0;
}
inline ::int32_t RoadState::id() const {
  // @@protoc_insertion_point(field_get:city.map.v2.RoadState.id)
  return _internal_id();
}
inline void RoadState::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.map.v2.RoadState.id)
}
inline ::int32_t RoadState::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void RoadState::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_ = value;
}

// double avg_v = 4 [json_name = "avgV"];
inline void RoadState::clear_avg_v() {
  _impl_.avg_v_ = 0;
}
inline double RoadState::avg_v() const {
  // @@protoc_insertion_point(field_get:city.map.v2.RoadState.avg_v)
  return _internal_avg_v();
}
inline void RoadState::set_avg_v(double value) {
  _internal_set_avg_v(value);
  // @@protoc_insertion_point(field_set:city.map.v2.RoadState.avg_v)
}
inline double RoadState::_internal_avg_v() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.avg_v_;
}
inline void RoadState::_internal_set_avg_v(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.avg_v_ = value;
}

// .city.map.v2.RoadLevel level = 2 [json_name = "level"];
inline void RoadState::clear_level() {
  _impl_.level_ = 0;
}
inline ::city::map::v2::RoadLevel RoadState::level() const {
  // @@protoc_insertion_point(field_get:city.map.v2.RoadState.level)
  return _internal_level();
}
inline void RoadState::set_level(::city::map::v2::RoadLevel value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:city.map.v2.RoadState.level)
}
inline ::city::map::v2::RoadLevel RoadState::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::map::v2::RoadLevel>(_impl_.level_);
}
inline void RoadState::_internal_set_level(::city::map::v2::RoadLevel value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_ = value;
}

// .city.map.v2.InterruptionReason reason = 3 [json_name = "reason"];
inline void RoadState::clear_reason() {
  _impl_.reason_ = 0;
}
inline ::city::map::v2::InterruptionReason RoadState::reason() const {
  // @@protoc_insertion_point(field_get:city.map.v2.RoadState.reason)
  return _internal_reason();
}
inline void RoadState::set_reason(::city::map::v2::InterruptionReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:city.map.v2.RoadState.reason)
}
inline ::city::map::v2::InterruptionReason RoadState::_internal_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::map::v2::InterruptionReason>(_impl_.reason_);
}
inline void RoadState::_internal_set_reason(::city::map::v2::InterruptionReason value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reason_ = value;
}

// repeated .city.map.v2.LaneState lanes = 5 [json_name = "lanes"];
inline int RoadState::_internal_lanes_size() const {
  return _internal_lanes().size();
}
inline int RoadState::lanes_size() const {
  return _internal_lanes_size();
}
inline ::city::map::v2::LaneState* RoadState::mutable_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:city.map.v2.RoadState.lanes)
  return _internal_mutable_lanes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneState >*
RoadState::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:city.map.v2.RoadState.lanes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_lanes();
}
inline const ::city::map::v2::LaneState& RoadState::lanes(int index) const {
  // @@protoc_insertion_point(field_get:city.map.v2.RoadState.lanes)
    return _internal_lanes().Get(index);
}
inline ::city::map::v2::LaneState* RoadState::add_lanes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::map::v2::LaneState* _add = _internal_mutable_lanes()->Add();
  // @@protoc_insertion_point(field_add:city.map.v2.RoadState.lanes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::map::v2::LaneState >&
RoadState::lanes() const {
  // @@protoc_insertion_point(field_list:city.map.v2.RoadState.lanes)
  return _internal_lanes();
}
inline const ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneState>&
RoadState::_internal_lanes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lanes_;
}
inline ::google::protobuf::RepeatedPtrField<::city::map::v2::LaneState>*
RoadState::_internal_mutable_lanes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.lanes_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace map
}  // namespace city


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::city::map::v2::RoadLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::map::v2::RoadLevel>() {
  return ::city::map::v2::RoadLevel_descriptor();
}
template <>
struct is_proto_enum<::city::map::v2::InterruptionReason> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::map::v2::InterruptionReason>() {
  return ::city::map::v2::InterruptionReason_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_city_2fmap_2fv2_2froad_5fservice_2eproto_2epb_2eh
