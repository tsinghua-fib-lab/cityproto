// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/elec/input/v1/config.proto

#include "city/elec/input/v1/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace elec {
namespace input {
namespace v1 {
PROTOBUF_CONSTEXPR Mongo::Mongo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.map_)*/nullptr
  , /*decltype(_impl_.facilities_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MongoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MongoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MongoDefaultTypeInternal() {}
  union {
    Mongo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MongoDefaultTypeInternal _Mongo_default_instance_;
PROTOBUF_CONSTEXPR ControlStep::ControlStep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_)*/0
  , /*decltype(_impl_.total_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControlStepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlStepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlStepDefaultTypeInternal() {}
  union {
    ControlStep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlStepDefaultTypeInternal _ControlStep_default_instance_;
PROTOBUF_CONSTEXPR Control::Control(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.step_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ControlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlDefaultTypeInternal() {}
  union {
    Control _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlDefaultTypeInternal _Control_default_instance_;
PROTOBUF_CONSTEXPR OutputSwitch::OutputSwitch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/false
  , /*decltype(_impl_.aoi_)*/false
  , /*decltype(_impl_.event_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OutputSwitchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputSwitchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputSwitchDefaultTypeInternal() {}
  union {
    OutputSwitch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputSwitchDefaultTypeInternal _OutputSwitch_default_instance_;
PROTOBUF_CONSTEXPR Output::Output(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_.switch__)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OutputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutputDefaultTypeInternal() {}
  union {
    Output _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutputDefaultTypeInternal _Output_default_instance_;
PROTOBUF_CONSTEXPR Config::Config(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mongo_)*/nullptr
  , /*decltype(_impl_.control_)*/nullptr
  , /*decltype(_impl_.output_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigDefaultTypeInternal() {}
  union {
    Config _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigDefaultTypeInternal _Config_default_instance_;
}  // namespace v1
}  // namespace input
}  // namespace elec
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2felec_2finput_2fv1_2fconfig_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_city_2felec_2finput_2fv1_2fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2felec_2finput_2fv1_2fconfig_2eproto = nullptr;

const uint32_t TableStruct_city_2felec_2finput_2fv1_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::Mongo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::Mongo, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::Mongo, _impl_.map_),
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::Mongo, _impl_.facilities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::ControlStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::ControlStep, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::ControlStep, _impl_.total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::Control, _impl_.step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::OutputSwitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::OutputSwitch, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::OutputSwitch, _impl_.aoi_),
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::OutputSwitch, _impl_.event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::Output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::Output, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::Output, _impl_.switch__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::Config, _impl_.mongo_),
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::Config, _impl_.control_),
  PROTOBUF_FIELD_OFFSET(::city::elec::input::v1::Config, _impl_.output_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::elec::input::v1::Mongo)},
  { 9, -1, -1, sizeof(::city::elec::input::v1::ControlStep)},
  { 17, -1, -1, sizeof(::city::elec::input::v1::Control)},
  { 24, -1, -1, sizeof(::city::elec::input::v1::OutputSwitch)},
  { 33, -1, -1, sizeof(::city::elec::input::v1::Output)},
  { 41, -1, -1, sizeof(::city::elec::input::v1::Config)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::elec::input::v1::_Mongo_default_instance_._instance,
  &::city::elec::input::v1::_ControlStep_default_instance_._instance,
  &::city::elec::input::v1::_Control_default_instance_._instance,
  &::city::elec::input::v1::_OutputSwitch_default_instance_._instance,
  &::city::elec::input::v1::_Output_default_instance_._instance,
  &::city::elec::input::v1::_Config_default_instance_._instance,
};

const char descriptor_table_protodef_city_2felec_2finput_2fv1_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037city/elec/input/v1/config.proto\022\022city."
  "elec.input.v1\032\033city/config/v1/config.pro"
  "to\"\201\001\n\005Mongo\022\020\n\003uri\030\001 \001(\tR\003uri\022+\n\003map\030\002 "
  "\001(\0132\031.city.config.v1.MongoPathR\003map\0229\n\nf"
  "acilities\030\003 \001(\0132\031.city.config.v1.MongoPa"
  "thR\nfacilities\"9\n\013ControlStep\022\024\n\005start\030\001"
  " \001(\005R\005start\022\024\n\005total\030\002 \001(\005R\005total\">\n\007Con"
  "trol\0223\n\004step\030\001 \001(\0132\037.city.elec.input.v1."
  "ControlStepR\004step\"J\n\014OutputSwitch\022\022\n\004nod"
  "e\030\001 \001(\010R\004node\022\020\n\003aoi\030\002 \001(\010R\003aoi\022\024\n\005event"
  "\030\003 \001(\010R\005event\"x\n\006Output\0224\n\006target\030\001 \001(\0132"
  "\034.city.config.v1.OutputTargetR\006target\0228\n"
  "\006switch\030\002 \001(\0132 .city.elec.input.v1.Outpu"
  "tSwitchR\006switch\"\244\001\n\006Config\022/\n\005mongo\030\001 \001("
  "\0132\031.city.elec.input.v1.MongoR\005mongo\0225\n\007c"
  "ontrol\030\002 \001(\0132\033.city.elec.input.v1.Contro"
  "lR\007control\0222\n\006output\030\003 \001(\0132\032.city.elec.i"
  "nput.v1.OutputR\006outputB\311\001\n\026com.city.elec"
  ".input.v1B\013ConfigProtoP\001Z7git.fiblab.net"
  "/sim/protos/go/city/elec/input/v1;inputv"
  "1\242\002\003CEI\252\002\022City.Elec.Input.V1\312\002\022City\\Elec"
  "\\Input\\V1\342\002\036City\\Elec\\Input\\V1\\GPBMetada"
  "ta\352\002\025City::Elec::Input::V1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_deps[1] = {
  &::descriptor_table_city_2fconfig_2fv1_2fconfig_2eproto,
};
static ::_pbi::once_flag descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto = {
    false, false, 914, descriptor_table_protodef_city_2felec_2finput_2fv1_2fconfig_2eproto,
    "city/elec/input/v1/config.proto",
    &descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_once, descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_city_2felec_2finput_2fv1_2fconfig_2eproto::offsets,
    file_level_metadata_city_2felec_2finput_2fv1_2fconfig_2eproto, file_level_enum_descriptors_city_2felec_2finput_2fv1_2fconfig_2eproto,
    file_level_service_descriptors_city_2felec_2finput_2fv1_2fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_getter() {
  return &descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2felec_2finput_2fv1_2fconfig_2eproto(&descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto);
namespace city {
namespace elec {
namespace input {
namespace v1 {

// ===================================================================

class Mongo::_Internal {
 public:
  static const ::city::config::v1::MongoPath& map(const Mongo* msg);
  static const ::city::config::v1::MongoPath& facilities(const Mongo* msg);
};

const ::city::config::v1::MongoPath&
Mongo::_Internal::map(const Mongo* msg) {
  return *msg->_impl_.map_;
}
const ::city::config::v1::MongoPath&
Mongo::_Internal::facilities(const Mongo* msg) {
  return *msg->_impl_.facilities_;
}
void Mongo::clear_map() {
  if (GetArenaForAllocation() == nullptr && _impl_.map_ != nullptr) {
    delete _impl_.map_;
  }
  _impl_.map_ = nullptr;
}
void Mongo::clear_facilities() {
  if (GetArenaForAllocation() == nullptr && _impl_.facilities_ != nullptr) {
    delete _impl_.facilities_;
  }
  _impl_.facilities_ = nullptr;
}
Mongo::Mongo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.elec.input.v1.Mongo)
}
Mongo::Mongo(const Mongo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Mongo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.map_){nullptr}
    , decltype(_impl_.facilities_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_map()) {
    _this->_impl_.map_ = new ::city::config::v1::MongoPath(*from._impl_.map_);
  }
  if (from._internal_has_facilities()) {
    _this->_impl_.facilities_ = new ::city::config::v1::MongoPath(*from._impl_.facilities_);
  }
  // @@protoc_insertion_point(copy_constructor:city.elec.input.v1.Mongo)
}

inline void Mongo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uri_){}
    , decltype(_impl_.map_){nullptr}
    , decltype(_impl_.facilities_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Mongo::~Mongo() {
  // @@protoc_insertion_point(destructor:city.elec.input.v1.Mongo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Mongo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
  if (this != internal_default_instance()) delete _impl_.map_;
  if (this != internal_default_instance()) delete _impl_.facilities_;
}

void Mongo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Mongo::Clear() {
// @@protoc_insertion_point(message_clear_start:city.elec.input.v1.Mongo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uri_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.map_ != nullptr) {
    delete _impl_.map_;
  }
  _impl_.map_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.facilities_ != nullptr) {
    delete _impl_.facilities_;
  }
  _impl_.facilities_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mongo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1 [json_name = "uri"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "city.elec.input.v1.Mongo.uri"));
        } else
          goto handle_unusual;
        continue;
      // .city.config.v1.MongoPath map = 2 [json_name = "map"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.config.v1.MongoPath facilities = 3 [json_name = "facilities"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_facilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Mongo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.elec.input.v1.Mongo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1 [json_name = "uri"];
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "city.elec.input.v1.Mongo.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // .city.config.v1.MongoPath map = 2 [json_name = "map"];
  if (this->_internal_has_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::map(this),
        _Internal::map(this).GetCachedSize(), target, stream);
  }

  // .city.config.v1.MongoPath facilities = 3 [json_name = "facilities"];
  if (this->_internal_has_facilities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::facilities(this),
        _Internal::facilities(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.elec.input.v1.Mongo)
  return target;
}

size_t Mongo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.elec.input.v1.Mongo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1 [json_name = "uri"];
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // .city.config.v1.MongoPath map = 2 [json_name = "map"];
  if (this->_internal_has_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.map_);
  }

  // .city.config.v1.MongoPath facilities = 3 [json_name = "facilities"];
  if (this->_internal_has_facilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.facilities_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mongo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Mongo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mongo::GetClassData() const { return &_class_data_; }


void Mongo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Mongo*>(&to_msg);
  auto& from = static_cast<const Mongo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.elec.input.v1.Mongo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (from._internal_has_map()) {
    _this->_internal_mutable_map()->::city::config::v1::MongoPath::MergeFrom(
        from._internal_map());
  }
  if (from._internal_has_facilities()) {
    _this->_internal_mutable_facilities()->::city::config::v1::MongoPath::MergeFrom(
        from._internal_facilities());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mongo::CopyFrom(const Mongo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.elec.input.v1.Mongo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mongo::IsInitialized() const {
  return true;
}

void Mongo::InternalSwap(Mongo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mongo, _impl_.facilities_)
      + sizeof(Mongo::_impl_.facilities_)
      - PROTOBUF_FIELD_OFFSET(Mongo, _impl_.map_)>(
          reinterpret_cast<char*>(&_impl_.map_),
          reinterpret_cast<char*>(&other->_impl_.map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mongo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_getter, &descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_once,
      file_level_metadata_city_2felec_2finput_2fv1_2fconfig_2eproto[0]);
}

// ===================================================================

class ControlStep::_Internal {
 public:
};

ControlStep::ControlStep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.elec.input.v1.ControlStep)
}
ControlStep::ControlStep(const ControlStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlStep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){}
    , decltype(_impl_.total_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.total_));
  // @@protoc_insertion_point(copy_constructor:city.elec.input.v1.ControlStep)
}

inline void ControlStep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){0}
    , decltype(_impl_.total_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ControlStep::~ControlStep() {
  // @@protoc_insertion_point(destructor:city.elec.input.v1.ControlStep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlStep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlStep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlStep::Clear() {
// @@protoc_insertion_point(message_clear_start:city.elec.input.v1.ControlStep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_) -
      reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.total_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlStep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 start = 1 [json_name = "start"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total = 2 [json_name = "total"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlStep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.elec.input.v1.ControlStep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start = 1 [json_name = "start"];
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_start(), target);
  }

  // int32 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.elec.input.v1.ControlStep)
  return target;
}

size_t ControlStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.elec.input.v1.ControlStep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 start = 1 [json_name = "start"];
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_start());
  }

  // int32 total = 2 [json_name = "total"];
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlStep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlStep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlStep::GetClassData() const { return &_class_data_; }


void ControlStep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlStep*>(&to_msg);
  auto& from = static_cast<const ControlStep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.elec.input.v1.ControlStep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlStep::CopyFrom(const ControlStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.elec.input.v1.ControlStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlStep::IsInitialized() const {
  return true;
}

void ControlStep::InternalSwap(ControlStep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlStep, _impl_.total_)
      + sizeof(ControlStep::_impl_.total_)
      - PROTOBUF_FIELD_OFFSET(ControlStep, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlStep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_getter, &descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_once,
      file_level_metadata_city_2felec_2finput_2fv1_2fconfig_2eproto[1]);
}

// ===================================================================

class Control::_Internal {
 public:
  static const ::city::elec::input::v1::ControlStep& step(const Control* msg);
};

const ::city::elec::input::v1::ControlStep&
Control::_Internal::step(const Control* msg) {
  return *msg->_impl_.step_;
}
Control::Control(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.elec.input.v1.Control)
}
Control::Control(const Control& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Control* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.step_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_step()) {
    _this->_impl_.step_ = new ::city::elec::input::v1::ControlStep(*from._impl_.step_);
  }
  // @@protoc_insertion_point(copy_constructor:city.elec.input.v1.Control)
}

inline void Control::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.step_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Control::~Control() {
  // @@protoc_insertion_point(destructor:city.elec.input.v1.Control)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Control::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.step_;
}

void Control::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Control::Clear() {
// @@protoc_insertion_point(message_clear_start:city.elec.input.v1.Control)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.step_ != nullptr) {
    delete _impl_.step_;
  }
  _impl_.step_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Control::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.elec.input.v1.ControlStep step = 1 [json_name = "step"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_step(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Control::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.elec.input.v1.Control)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.elec.input.v1.ControlStep step = 1 [json_name = "step"];
  if (this->_internal_has_step()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::step(this),
        _Internal::step(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.elec.input.v1.Control)
  return target;
}

size_t Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.elec.input.v1.Control)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.elec.input.v1.ControlStep step = 1 [json_name = "step"];
  if (this->_internal_has_step()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.step_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Control::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Control::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Control::GetClassData() const { return &_class_data_; }


void Control::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Control*>(&to_msg);
  auto& from = static_cast<const Control&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.elec.input.v1.Control)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_step()) {
    _this->_internal_mutable_step()->::city::elec::input::v1::ControlStep::MergeFrom(
        from._internal_step());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Control::CopyFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.elec.input.v1.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  return true;
}

void Control::InternalSwap(Control* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.step_, other->_impl_.step_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Control::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_getter, &descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_once,
      file_level_metadata_city_2felec_2finput_2fv1_2fconfig_2eproto[2]);
}

// ===================================================================

class OutputSwitch::_Internal {
 public:
};

OutputSwitch::OutputSwitch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.elec.input.v1.OutputSwitch)
}
OutputSwitch::OutputSwitch(const OutputSwitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutputSwitch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){}
    , decltype(_impl_.aoi_){}
    , decltype(_impl_.event_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.node_, &from._impl_.node_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_) -
    reinterpret_cast<char*>(&_impl_.node_)) + sizeof(_impl_.event_));
  // @@protoc_insertion_point(copy_constructor:city.elec.input.v1.OutputSwitch)
}

inline void OutputSwitch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){false}
    , decltype(_impl_.aoi_){false}
    , decltype(_impl_.event_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OutputSwitch::~OutputSwitch() {
  // @@protoc_insertion_point(destructor:city.elec.input.v1.OutputSwitch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutputSwitch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OutputSwitch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutputSwitch::Clear() {
// @@protoc_insertion_point(message_clear_start:city.elec.input.v1.OutputSwitch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.event_) -
      reinterpret_cast<char*>(&_impl_.node_)) + sizeof(_impl_.event_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputSwitch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool node = 1 [json_name = "node"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool aoi = 2 [json_name = "aoi"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.aoi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool event = 3 [json_name = "event"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.event_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutputSwitch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.elec.input.v1.OutputSwitch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool node = 1 [json_name = "node"];
  if (this->_internal_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_node(), target);
  }

  // bool aoi = 2 [json_name = "aoi"];
  if (this->_internal_aoi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_aoi(), target);
  }

  // bool event = 3 [json_name = "event"];
  if (this->_internal_event() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_event(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.elec.input.v1.OutputSwitch)
  return target;
}

size_t OutputSwitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.elec.input.v1.OutputSwitch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool node = 1 [json_name = "node"];
  if (this->_internal_node() != 0) {
    total_size += 1 + 1;
  }

  // bool aoi = 2 [json_name = "aoi"];
  if (this->_internal_aoi() != 0) {
    total_size += 1 + 1;
  }

  // bool event = 3 [json_name = "event"];
  if (this->_internal_event() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutputSwitch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutputSwitch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutputSwitch::GetClassData() const { return &_class_data_; }


void OutputSwitch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutputSwitch*>(&to_msg);
  auto& from = static_cast<const OutputSwitch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.elec.input.v1.OutputSwitch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_node() != 0) {
    _this->_internal_set_node(from._internal_node());
  }
  if (from._internal_aoi() != 0) {
    _this->_internal_set_aoi(from._internal_aoi());
  }
  if (from._internal_event() != 0) {
    _this->_internal_set_event(from._internal_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutputSwitch::CopyFrom(const OutputSwitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.elec.input.v1.OutputSwitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputSwitch::IsInitialized() const {
  return true;
}

void OutputSwitch::InternalSwap(OutputSwitch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutputSwitch, _impl_.event_)
      + sizeof(OutputSwitch::_impl_.event_)
      - PROTOBUF_FIELD_OFFSET(OutputSwitch, _impl_.node_)>(
          reinterpret_cast<char*>(&_impl_.node_),
          reinterpret_cast<char*>(&other->_impl_.node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputSwitch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_getter, &descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_once,
      file_level_metadata_city_2felec_2finput_2fv1_2fconfig_2eproto[3]);
}

// ===================================================================

class Output::_Internal {
 public:
  static const ::city::config::v1::OutputTarget& target(const Output* msg);
  static const ::city::elec::input::v1::OutputSwitch& switch_(const Output* msg);
};

const ::city::config::v1::OutputTarget&
Output::_Internal::target(const Output* msg) {
  return *msg->_impl_.target_;
}
const ::city::elec::input::v1::OutputSwitch&
Output::_Internal::switch_(const Output* msg) {
  return *msg->_impl_.switch__;
}
void Output::clear_target() {
  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
}
Output::Output(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.elec.input.v1.Output)
}
Output::Output(const Output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Output* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_){nullptr}
    , decltype(_impl_.switch__){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::city::config::v1::OutputTarget(*from._impl_.target_);
  }
  if (from._internal_has_switch_()) {
    _this->_impl_.switch__ = new ::city::elec::input::v1::OutputSwitch(*from._impl_.switch__);
  }
  // @@protoc_insertion_point(copy_constructor:city.elec.input.v1.Output)
}

inline void Output::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_){nullptr}
    , decltype(_impl_.switch__){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Output::~Output() {
  // @@protoc_insertion_point(destructor:city.elec.input.v1.Output)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Output::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_;
  if (this != internal_default_instance()) delete _impl_.switch__;
}

void Output::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Output::Clear() {
// @@protoc_insertion_point(message_clear_start:city.elec.input.v1.Output)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.target_ != nullptr) {
    delete _impl_.target_;
  }
  _impl_.target_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.switch__ != nullptr) {
    delete _impl_.switch__;
  }
  _impl_.switch__ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Output::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.config.v1.OutputTarget target = 1 [json_name = "target"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.elec.input.v1.OutputSwitch switch = 2 [json_name = "switch"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_switch_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Output::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.elec.input.v1.Output)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.config.v1.OutputTarget target = 1 [json_name = "target"];
  if (this->_internal_has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // .city.elec.input.v1.OutputSwitch switch = 2 [json_name = "switch"];
  if (this->_internal_has_switch_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::switch_(this),
        _Internal::switch_(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.elec.input.v1.Output)
  return target;
}

size_t Output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.elec.input.v1.Output)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.config.v1.OutputTarget target = 1 [json_name = "target"];
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_);
  }

  // .city.elec.input.v1.OutputSwitch switch = 2 [json_name = "switch"];
  if (this->_internal_has_switch_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.switch__);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Output::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Output::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Output::GetClassData() const { return &_class_data_; }


void Output::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Output*>(&to_msg);
  auto& from = static_cast<const Output&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.elec.input.v1.Output)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target()) {
    _this->_internal_mutable_target()->::city::config::v1::OutputTarget::MergeFrom(
        from._internal_target());
  }
  if (from._internal_has_switch_()) {
    _this->_internal_mutable_switch_()->::city::elec::input::v1::OutputSwitch::MergeFrom(
        from._internal_switch_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Output::CopyFrom(const Output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.elec.input.v1.Output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Output::IsInitialized() const {
  return true;
}

void Output::InternalSwap(Output* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Output, _impl_.switch__)
      + sizeof(Output::_impl_.switch__)
      - PROTOBUF_FIELD_OFFSET(Output, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Output::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_getter, &descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_once,
      file_level_metadata_city_2felec_2finput_2fv1_2fconfig_2eproto[4]);
}

// ===================================================================

class Config::_Internal {
 public:
  static const ::city::elec::input::v1::Mongo& mongo(const Config* msg);
  static const ::city::elec::input::v1::Control& control(const Config* msg);
  static const ::city::elec::input::v1::Output& output(const Config* msg);
};

const ::city::elec::input::v1::Mongo&
Config::_Internal::mongo(const Config* msg) {
  return *msg->_impl_.mongo_;
}
const ::city::elec::input::v1::Control&
Config::_Internal::control(const Config* msg) {
  return *msg->_impl_.control_;
}
const ::city::elec::input::v1::Output&
Config::_Internal::output(const Config* msg) {
  return *msg->_impl_.output_;
}
Config::Config(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.elec.input.v1.Config)
}
Config::Config(const Config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Config* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mongo_){nullptr}
    , decltype(_impl_.control_){nullptr}
    , decltype(_impl_.output_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mongo()) {
    _this->_impl_.mongo_ = new ::city::elec::input::v1::Mongo(*from._impl_.mongo_);
  }
  if (from._internal_has_control()) {
    _this->_impl_.control_ = new ::city::elec::input::v1::Control(*from._impl_.control_);
  }
  if (from._internal_has_output()) {
    _this->_impl_.output_ = new ::city::elec::input::v1::Output(*from._impl_.output_);
  }
  // @@protoc_insertion_point(copy_constructor:city.elec.input.v1.Config)
}

inline void Config::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mongo_){nullptr}
    , decltype(_impl_.control_){nullptr}
    , decltype(_impl_.output_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:city.elec.input.v1.Config)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Config::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mongo_;
  if (this != internal_default_instance()) delete _impl_.control_;
  if (this != internal_default_instance()) delete _impl_.output_;
}

void Config::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:city.elec.input.v1.Config)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.mongo_ != nullptr) {
    delete _impl_.mongo_;
  }
  _impl_.mongo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.control_ != nullptr) {
    delete _impl_.control_;
  }
  _impl_.control_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.output_ != nullptr) {
    delete _impl_.output_;
  }
  _impl_.output_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Config::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.elec.input.v1.Mongo mongo = 1 [json_name = "mongo"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mongo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.elec.input.v1.Control control = 2 [json_name = "control"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_control(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .city.elec.input.v1.Output output = 3 [json_name = "output"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Config::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.elec.input.v1.Config)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.elec.input.v1.Mongo mongo = 1 [json_name = "mongo"];
  if (this->_internal_has_mongo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mongo(this),
        _Internal::mongo(this).GetCachedSize(), target, stream);
  }

  // .city.elec.input.v1.Control control = 2 [json_name = "control"];
  if (this->_internal_has_control()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::control(this),
        _Internal::control(this).GetCachedSize(), target, stream);
  }

  // .city.elec.input.v1.Output output = 3 [json_name = "output"];
  if (this->_internal_has_output()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::output(this),
        _Internal::output(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.elec.input.v1.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.elec.input.v1.Config)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.elec.input.v1.Mongo mongo = 1 [json_name = "mongo"];
  if (this->_internal_has_mongo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mongo_);
  }

  // .city.elec.input.v1.Control control = 2 [json_name = "control"];
  if (this->_internal_has_control()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.control_);
  }

  // .city.elec.input.v1.Output output = 3 [json_name = "output"];
  if (this->_internal_has_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.output_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Config::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Config::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Config::GetClassData() const { return &_class_data_; }


void Config::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Config*>(&to_msg);
  auto& from = static_cast<const Config&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.elec.input.v1.Config)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mongo()) {
    _this->_internal_mutable_mongo()->::city::elec::input::v1::Mongo::MergeFrom(
        from._internal_mongo());
  }
  if (from._internal_has_control()) {
    _this->_internal_mutable_control()->::city::elec::input::v1::Control::MergeFrom(
        from._internal_control());
  }
  if (from._internal_has_output()) {
    _this->_internal_mutable_output()->::city::elec::input::v1::Output::MergeFrom(
        from._internal_output());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.elec.input.v1.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::InternalSwap(Config* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Config, _impl_.output_)
      + sizeof(Config::_impl_.output_)
      - PROTOBUF_FIELD_OFFSET(Config, _impl_.mongo_)>(
          reinterpret_cast<char*>(&_impl_.mongo_),
          reinterpret_cast<char*>(&other->_impl_.mongo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Config::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_getter, &descriptor_table_city_2felec_2finput_2fv1_2fconfig_2eproto_once,
      file_level_metadata_city_2felec_2finput_2fv1_2fconfig_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace input
}  // namespace elec
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::elec::input::v1::Mongo*
Arena::CreateMaybeMessage< ::city::elec::input::v1::Mongo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::elec::input::v1::Mongo >(arena);
}
template<> PROTOBUF_NOINLINE ::city::elec::input::v1::ControlStep*
Arena::CreateMaybeMessage< ::city::elec::input::v1::ControlStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::elec::input::v1::ControlStep >(arena);
}
template<> PROTOBUF_NOINLINE ::city::elec::input::v1::Control*
Arena::CreateMaybeMessage< ::city::elec::input::v1::Control >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::elec::input::v1::Control >(arena);
}
template<> PROTOBUF_NOINLINE ::city::elec::input::v1::OutputSwitch*
Arena::CreateMaybeMessage< ::city::elec::input::v1::OutputSwitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::elec::input::v1::OutputSwitch >(arena);
}
template<> PROTOBUF_NOINLINE ::city::elec::input::v1::Output*
Arena::CreateMaybeMessage< ::city::elec::input::v1::Output >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::elec::input::v1::Output >(arena);
}
template<> PROTOBUF_NOINLINE ::city::elec::input::v1::Config*
Arena::CreateMaybeMessage< ::city::elec::input::v1::Config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::elec::input::v1::Config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
