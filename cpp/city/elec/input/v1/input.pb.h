// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/elec/input/v1/input.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2felec_2finput_2fv1_2finput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2felec_2finput_2fv1_2finput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "city/geo/v2/geo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2felec_2finput_2fv1_2finput_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2felec_2finput_2fv1_2finput_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2felec_2finput_2fv1_2finput_2eproto;
namespace city {
namespace elec {
namespace input {
namespace v1 {
class Facilities;
struct FacilitiesDefaultTypeInternal;
extern FacilitiesDefaultTypeInternal _Facilities_default_instance_;
class Facility;
struct FacilityDefaultTypeInternal;
extern FacilityDefaultTypeInternal _Facility_default_instance_;
class RepairStation;
struct RepairStationDefaultTypeInternal;
extern RepairStationDefaultTypeInternal _RepairStation_default_instance_;
}  // namespace v1
}  // namespace input
}  // namespace elec
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::elec::input::v1::Facilities* Arena::CreateMaybeMessage<::city::elec::input::v1::Facilities>(Arena*);
template<> ::city::elec::input::v1::Facility* Arena::CreateMaybeMessage<::city::elec::input::v1::Facility>(Arena*);
template<> ::city::elec::input::v1::RepairStation* Arena::CreateMaybeMessage<::city::elec::input::v1::RepairStation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace elec {
namespace input {
namespace v1 {

enum FacilityType : int {
  FACILITY_TYPE_UNSPECIFIED = 0,
  FACILITY_TYPE_POWER_STATION = 1,
  FACILITY_TYPE_TRANSFORMER_500 = 2,
  FACILITY_TYPE_TRANSFORMER_220 = 3,
  FACILITY_TYPE_TRANSFORMER_110 = 4,
  FACILITY_TYPE_TRANSFORMER_10 = 5,
  FACILITY_TYPE_BASE_STATION = 6,
  FACILITY_TYPE_GATEWAY = 7,
  FACILITY_TYPE_DRAINAGE_PUMP = 8,
  FACILITY_TYPE_TRAFFIC_LIGHT = 9,
  FACILITY_TYPE_AOI = 10,
  FACILITY_TYPE_SUPPLY_PUMP = 11,
  FacilityType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FacilityType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FacilityType_IsValid(int value);
constexpr FacilityType FacilityType_MIN = FACILITY_TYPE_UNSPECIFIED;
constexpr FacilityType FacilityType_MAX = FACILITY_TYPE_SUPPLY_PUMP;
constexpr int FacilityType_ARRAYSIZE = FacilityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FacilityType_descriptor();
template<typename T>
inline const std::string& FacilityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FacilityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FacilityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FacilityType_descriptor(), enum_t_value);
}
inline bool FacilityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FacilityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FacilityType>(
    FacilityType_descriptor(), name, value);
}
// ===================================================================

class RepairStation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.elec.input.v1.RepairStation) */ {
 public:
  inline RepairStation() : RepairStation(nullptr) {}
  ~RepairStation() override;
  explicit PROTOBUF_CONSTEXPR RepairStation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepairStation(const RepairStation& from);
  RepairStation(RepairStation&& from) noexcept
    : RepairStation() {
    *this = ::std::move(from);
  }

  inline RepairStation& operator=(const RepairStation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepairStation& operator=(RepairStation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepairStation& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepairStation* internal_default_instance() {
    return reinterpret_cast<const RepairStation*>(
               &_RepairStation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RepairStation& a, RepairStation& b) {
    a.Swap(&b);
  }
  inline void Swap(RepairStation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepairStation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepairStation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepairStation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepairStation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RepairStation& from) {
    RepairStation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepairStation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.input.v1.RepairStation";
  }
  protected:
  explicit RepairStation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kAoiIdFieldNumber = 1,
  };
  // .city.geo.v2.LongLatPosition position = 2 [json_name = "position"];
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::city::geo::v2::LongLatPosition& position() const;
  PROTOBUF_NODISCARD ::city::geo::v2::LongLatPosition* release_position();
  ::city::geo::v2::LongLatPosition* mutable_position();
  void set_allocated_position(::city::geo::v2::LongLatPosition* position);
  private:
  const ::city::geo::v2::LongLatPosition& _internal_position() const;
  ::city::geo::v2::LongLatPosition* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::city::geo::v2::LongLatPosition* position);
  ::city::geo::v2::LongLatPosition* unsafe_arena_release_position();

  // int32 aoi_id = 1 [json_name = "aoiId"];
  void clear_aoi_id();
  int32_t aoi_id() const;
  void set_aoi_id(int32_t value);
  private:
  int32_t _internal_aoi_id() const;
  void _internal_set_aoi_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.elec.input.v1.RepairStation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::geo::v2::LongLatPosition* position_;
    int32_t aoi_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2felec_2finput_2fv1_2finput_2eproto;
};
// -------------------------------------------------------------------

class Facility final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.elec.input.v1.Facility) */ {
 public:
  inline Facility() : Facility(nullptr) {}
  ~Facility() override;
  explicit PROTOBUF_CONSTEXPR Facility(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Facility(const Facility& from);
  Facility(Facility&& from) noexcept
    : Facility() {
    *this = ::std::move(from);
  }

  inline Facility& operator=(const Facility& from) {
    CopyFrom(from);
    return *this;
  }
  inline Facility& operator=(Facility&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Facility& default_instance() {
    return *internal_default_instance();
  }
  static inline const Facility* internal_default_instance() {
    return reinterpret_cast<const Facility*>(
               &_Facility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Facility& a, Facility& b) {
    a.Swap(&b);
  }
  inline void Swap(Facility* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Facility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Facility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Facility>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Facility& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Facility& from) {
    Facility::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Facility* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.input.v1.Facility";
  }
  protected:
  explicit Facility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelationFieldNumber = 4,
    kPositionFieldNumber = 2,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kForeignIdFieldNumber = 5,
    kAoiIdFieldNumber = 6,
    kNumTransformerFieldNumber = 7,
  };
  // repeated int32 relation = 4 [json_name = "relation"];
  int relation_size() const;
  private:
  int _internal_relation_size() const;
  public:
  void clear_relation();
  private:
  int32_t _internal_relation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_relation() const;
  void _internal_add_relation(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_relation();
  public:
  int32_t relation(int index) const;
  void set_relation(int index, int32_t value);
  void add_relation(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      relation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_relation();

  // .city.geo.v2.LongLatPosition position = 2 [json_name = "position"];
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::city::geo::v2::LongLatPosition& position() const;
  PROTOBUF_NODISCARD ::city::geo::v2::LongLatPosition* release_position();
  ::city::geo::v2::LongLatPosition* mutable_position();
  void set_allocated_position(::city::geo::v2::LongLatPosition* position);
  private:
  const ::city::geo::v2::LongLatPosition& _internal_position() const;
  ::city::geo::v2::LongLatPosition* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::city::geo::v2::LongLatPosition* position);
  ::city::geo::v2::LongLatPosition* unsafe_arena_release_position();

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .city.elec.input.v1.FacilityType type = 3 [json_name = "type"];
  void clear_type();
  ::city::elec::input::v1::FacilityType type() const;
  void set_type(::city::elec::input::v1::FacilityType value);
  private:
  ::city::elec::input::v1::FacilityType _internal_type() const;
  void _internal_set_type(::city::elec::input::v1::FacilityType value);
  public:

  // optional int32 foreign_id = 5 [json_name = "foreignId"];
  bool has_foreign_id() const;
  private:
  bool _internal_has_foreign_id() const;
  public:
  void clear_foreign_id();
  int32_t foreign_id() const;
  void set_foreign_id(int32_t value);
  private:
  int32_t _internal_foreign_id() const;
  void _internal_set_foreign_id(int32_t value);
  public:

  // optional int32 aoi_id = 6 [json_name = "aoiId"];
  bool has_aoi_id() const;
  private:
  bool _internal_has_aoi_id() const;
  public:
  void clear_aoi_id();
  int32_t aoi_id() const;
  void set_aoi_id(int32_t value);
  private:
  int32_t _internal_aoi_id() const;
  void _internal_set_aoi_id(int32_t value);
  public:

  // optional int32 num_transformer = 7 [json_name = "numTransformer"];
  bool has_num_transformer() const;
  private:
  bool _internal_has_num_transformer() const;
  public:
  void clear_num_transformer();
  int32_t num_transformer() const;
  void set_num_transformer(int32_t value);
  private:
  int32_t _internal_num_transformer() const;
  void _internal_set_num_transformer(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.elec.input.v1.Facility)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > relation_;
    mutable std::atomic<int> _relation_cached_byte_size_;
    ::city::geo::v2::LongLatPosition* position_;
    int32_t id_;
    int type_;
    int32_t foreign_id_;
    int32_t aoi_id_;
    int32_t num_transformer_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2felec_2finput_2fv1_2finput_2eproto;
};
// -------------------------------------------------------------------

class Facilities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.elec.input.v1.Facilities) */ {
 public:
  inline Facilities() : Facilities(nullptr) {}
  ~Facilities() override;
  explicit PROTOBUF_CONSTEXPR Facilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Facilities(const Facilities& from);
  Facilities(Facilities&& from) noexcept
    : Facilities() {
    *this = ::std::move(from);
  }

  inline Facilities& operator=(const Facilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline Facilities& operator=(Facilities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Facilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const Facilities* internal_default_instance() {
    return reinterpret_cast<const Facilities*>(
               &_Facilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Facilities& a, Facilities& b) {
    a.Swap(&b);
  }
  inline void Swap(Facilities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Facilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Facilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Facilities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Facilities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Facilities& from) {
    Facilities::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Facilities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.input.v1.Facilities";
  }
  protected:
  explicit Facilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFacilitiesFieldNumber = 1,
    kRepairStationsFieldNumber = 2,
  };
  // repeated .city.elec.input.v1.Facility facilities = 1 [json_name = "facilities"];
  int facilities_size() const;
  private:
  int _internal_facilities_size() const;
  public:
  void clear_facilities();
  ::city::elec::input::v1::Facility* mutable_facilities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::elec::input::v1::Facility >*
      mutable_facilities();
  private:
  const ::city::elec::input::v1::Facility& _internal_facilities(int index) const;
  ::city::elec::input::v1::Facility* _internal_add_facilities();
  public:
  const ::city::elec::input::v1::Facility& facilities(int index) const;
  ::city::elec::input::v1::Facility* add_facilities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::elec::input::v1::Facility >&
      facilities() const;

  // repeated .city.elec.input.v1.RepairStation repair_stations = 2 [json_name = "repairStations"];
  int repair_stations_size() const;
  private:
  int _internal_repair_stations_size() const;
  public:
  void clear_repair_stations();
  ::city::elec::input::v1::RepairStation* mutable_repair_stations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::elec::input::v1::RepairStation >*
      mutable_repair_stations();
  private:
  const ::city::elec::input::v1::RepairStation& _internal_repair_stations(int index) const;
  ::city::elec::input::v1::RepairStation* _internal_add_repair_stations();
  public:
  const ::city::elec::input::v1::RepairStation& repair_stations(int index) const;
  ::city::elec::input::v1::RepairStation* add_repair_stations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::elec::input::v1::RepairStation >&
      repair_stations() const;

  // @@protoc_insertion_point(class_scope:city.elec.input.v1.Facilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::elec::input::v1::Facility > facilities_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::elec::input::v1::RepairStation > repair_stations_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2felec_2finput_2fv1_2finput_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RepairStation

// int32 aoi_id = 1 [json_name = "aoiId"];
inline void RepairStation::clear_aoi_id() {
  _impl_.aoi_id_ = 0;
}
inline int32_t RepairStation::_internal_aoi_id() const {
  return _impl_.aoi_id_;
}
inline int32_t RepairStation::aoi_id() const {
  // @@protoc_insertion_point(field_get:city.elec.input.v1.RepairStation.aoi_id)
  return _internal_aoi_id();
}
inline void RepairStation::_internal_set_aoi_id(int32_t value) {
  
  _impl_.aoi_id_ = value;
}
inline void RepairStation::set_aoi_id(int32_t value) {
  _internal_set_aoi_id(value);
  // @@protoc_insertion_point(field_set:city.elec.input.v1.RepairStation.aoi_id)
}

// .city.geo.v2.LongLatPosition position = 2 [json_name = "position"];
inline bool RepairStation::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool RepairStation::has_position() const {
  return _internal_has_position();
}
inline const ::city::geo::v2::LongLatPosition& RepairStation::_internal_position() const {
  const ::city::geo::v2::LongLatPosition* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::LongLatPosition&>(
      ::city::geo::v2::_LongLatPosition_default_instance_);
}
inline const ::city::geo::v2::LongLatPosition& RepairStation::position() const {
  // @@protoc_insertion_point(field_get:city.elec.input.v1.RepairStation.position)
  return _internal_position();
}
inline void RepairStation::unsafe_arena_set_allocated_position(
    ::city::geo::v2::LongLatPosition* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.elec.input.v1.RepairStation.position)
}
inline ::city::geo::v2::LongLatPosition* RepairStation::release_position() {
  
  ::city::geo::v2::LongLatPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::geo::v2::LongLatPosition* RepairStation::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:city.elec.input.v1.RepairStation.position)
  
  ::city::geo::v2::LongLatPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::city::geo::v2::LongLatPosition* RepairStation::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::LongLatPosition>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::city::geo::v2::LongLatPosition* RepairStation::mutable_position() {
  ::city::geo::v2::LongLatPosition* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:city.elec.input.v1.RepairStation.position)
  return _msg;
}
inline void RepairStation::set_allocated_position(::city::geo::v2::LongLatPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:city.elec.input.v1.RepairStation.position)
}

// -------------------------------------------------------------------

// Facility

// int32 id = 1 [json_name = "id"];
inline void Facility::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Facility::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Facility::id() const {
  // @@protoc_insertion_point(field_get:city.elec.input.v1.Facility.id)
  return _internal_id();
}
inline void Facility::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Facility::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.elec.input.v1.Facility.id)
}

// .city.geo.v2.LongLatPosition position = 2 [json_name = "position"];
inline bool Facility::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Facility::has_position() const {
  return _internal_has_position();
}
inline const ::city::geo::v2::LongLatPosition& Facility::_internal_position() const {
  const ::city::geo::v2::LongLatPosition* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::LongLatPosition&>(
      ::city::geo::v2::_LongLatPosition_default_instance_);
}
inline const ::city::geo::v2::LongLatPosition& Facility::position() const {
  // @@protoc_insertion_point(field_get:city.elec.input.v1.Facility.position)
  return _internal_position();
}
inline void Facility::unsafe_arena_set_allocated_position(
    ::city::geo::v2::LongLatPosition* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.elec.input.v1.Facility.position)
}
inline ::city::geo::v2::LongLatPosition* Facility::release_position() {
  
  ::city::geo::v2::LongLatPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::geo::v2::LongLatPosition* Facility::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:city.elec.input.v1.Facility.position)
  
  ::city::geo::v2::LongLatPosition* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::city::geo::v2::LongLatPosition* Facility::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::LongLatPosition>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::city::geo::v2::LongLatPosition* Facility::mutable_position() {
  ::city::geo::v2::LongLatPosition* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:city.elec.input.v1.Facility.position)
  return _msg;
}
inline void Facility::set_allocated_position(::city::geo::v2::LongLatPosition* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:city.elec.input.v1.Facility.position)
}

// .city.elec.input.v1.FacilityType type = 3 [json_name = "type"];
inline void Facility::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::elec::input::v1::FacilityType Facility::_internal_type() const {
  return static_cast< ::city::elec::input::v1::FacilityType >(_impl_.type_);
}
inline ::city::elec::input::v1::FacilityType Facility::type() const {
  // @@protoc_insertion_point(field_get:city.elec.input.v1.Facility.type)
  return _internal_type();
}
inline void Facility::_internal_set_type(::city::elec::input::v1::FacilityType value) {
  
  _impl_.type_ = value;
}
inline void Facility::set_type(::city::elec::input::v1::FacilityType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.elec.input.v1.Facility.type)
}

// repeated int32 relation = 4 [json_name = "relation"];
inline int Facility::_internal_relation_size() const {
  return _impl_.relation_.size();
}
inline int Facility::relation_size() const {
  return _internal_relation_size();
}
inline void Facility::clear_relation() {
  _impl_.relation_.Clear();
}
inline int32_t Facility::_internal_relation(int index) const {
  return _impl_.relation_.Get(index);
}
inline int32_t Facility::relation(int index) const {
  // @@protoc_insertion_point(field_get:city.elec.input.v1.Facility.relation)
  return _internal_relation(index);
}
inline void Facility::set_relation(int index, int32_t value) {
  _impl_.relation_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.elec.input.v1.Facility.relation)
}
inline void Facility::_internal_add_relation(int32_t value) {
  _impl_.relation_.Add(value);
}
inline void Facility::add_relation(int32_t value) {
  _internal_add_relation(value);
  // @@protoc_insertion_point(field_add:city.elec.input.v1.Facility.relation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Facility::_internal_relation() const {
  return _impl_.relation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Facility::relation() const {
  // @@protoc_insertion_point(field_list:city.elec.input.v1.Facility.relation)
  return _internal_relation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Facility::_internal_mutable_relation() {
  return &_impl_.relation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Facility::mutable_relation() {
  // @@protoc_insertion_point(field_mutable_list:city.elec.input.v1.Facility.relation)
  return _internal_mutable_relation();
}

// optional int32 foreign_id = 5 [json_name = "foreignId"];
inline bool Facility::_internal_has_foreign_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Facility::has_foreign_id() const {
  return _internal_has_foreign_id();
}
inline void Facility::clear_foreign_id() {
  _impl_.foreign_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t Facility::_internal_foreign_id() const {
  return _impl_.foreign_id_;
}
inline int32_t Facility::foreign_id() const {
  // @@protoc_insertion_point(field_get:city.elec.input.v1.Facility.foreign_id)
  return _internal_foreign_id();
}
inline void Facility::_internal_set_foreign_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.foreign_id_ = value;
}
inline void Facility::set_foreign_id(int32_t value) {
  _internal_set_foreign_id(value);
  // @@protoc_insertion_point(field_set:city.elec.input.v1.Facility.foreign_id)
}

// optional int32 aoi_id = 6 [json_name = "aoiId"];
inline bool Facility::_internal_has_aoi_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Facility::has_aoi_id() const {
  return _internal_has_aoi_id();
}
inline void Facility::clear_aoi_id() {
  _impl_.aoi_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Facility::_internal_aoi_id() const {
  return _impl_.aoi_id_;
}
inline int32_t Facility::aoi_id() const {
  // @@protoc_insertion_point(field_get:city.elec.input.v1.Facility.aoi_id)
  return _internal_aoi_id();
}
inline void Facility::_internal_set_aoi_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.aoi_id_ = value;
}
inline void Facility::set_aoi_id(int32_t value) {
  _internal_set_aoi_id(value);
  // @@protoc_insertion_point(field_set:city.elec.input.v1.Facility.aoi_id)
}

// optional int32 num_transformer = 7 [json_name = "numTransformer"];
inline bool Facility::_internal_has_num_transformer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Facility::has_num_transformer() const {
  return _internal_has_num_transformer();
}
inline void Facility::clear_num_transformer() {
  _impl_.num_transformer_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Facility::_internal_num_transformer() const {
  return _impl_.num_transformer_;
}
inline int32_t Facility::num_transformer() const {
  // @@protoc_insertion_point(field_get:city.elec.input.v1.Facility.num_transformer)
  return _internal_num_transformer();
}
inline void Facility::_internal_set_num_transformer(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_transformer_ = value;
}
inline void Facility::set_num_transformer(int32_t value) {
  _internal_set_num_transformer(value);
  // @@protoc_insertion_point(field_set:city.elec.input.v1.Facility.num_transformer)
}

// -------------------------------------------------------------------

// Facilities

// repeated .city.elec.input.v1.Facility facilities = 1 [json_name = "facilities"];
inline int Facilities::_internal_facilities_size() const {
  return _impl_.facilities_.size();
}
inline int Facilities::facilities_size() const {
  return _internal_facilities_size();
}
inline void Facilities::clear_facilities() {
  _impl_.facilities_.Clear();
}
inline ::city::elec::input::v1::Facility* Facilities::mutable_facilities(int index) {
  // @@protoc_insertion_point(field_mutable:city.elec.input.v1.Facilities.facilities)
  return _impl_.facilities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::elec::input::v1::Facility >*
Facilities::mutable_facilities() {
  // @@protoc_insertion_point(field_mutable_list:city.elec.input.v1.Facilities.facilities)
  return &_impl_.facilities_;
}
inline const ::city::elec::input::v1::Facility& Facilities::_internal_facilities(int index) const {
  return _impl_.facilities_.Get(index);
}
inline const ::city::elec::input::v1::Facility& Facilities::facilities(int index) const {
  // @@protoc_insertion_point(field_get:city.elec.input.v1.Facilities.facilities)
  return _internal_facilities(index);
}
inline ::city::elec::input::v1::Facility* Facilities::_internal_add_facilities() {
  return _impl_.facilities_.Add();
}
inline ::city::elec::input::v1::Facility* Facilities::add_facilities() {
  ::city::elec::input::v1::Facility* _add = _internal_add_facilities();
  // @@protoc_insertion_point(field_add:city.elec.input.v1.Facilities.facilities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::elec::input::v1::Facility >&
Facilities::facilities() const {
  // @@protoc_insertion_point(field_list:city.elec.input.v1.Facilities.facilities)
  return _impl_.facilities_;
}

// repeated .city.elec.input.v1.RepairStation repair_stations = 2 [json_name = "repairStations"];
inline int Facilities::_internal_repair_stations_size() const {
  return _impl_.repair_stations_.size();
}
inline int Facilities::repair_stations_size() const {
  return _internal_repair_stations_size();
}
inline void Facilities::clear_repair_stations() {
  _impl_.repair_stations_.Clear();
}
inline ::city::elec::input::v1::RepairStation* Facilities::mutable_repair_stations(int index) {
  // @@protoc_insertion_point(field_mutable:city.elec.input.v1.Facilities.repair_stations)
  return _impl_.repair_stations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::elec::input::v1::RepairStation >*
Facilities::mutable_repair_stations() {
  // @@protoc_insertion_point(field_mutable_list:city.elec.input.v1.Facilities.repair_stations)
  return &_impl_.repair_stations_;
}
inline const ::city::elec::input::v1::RepairStation& Facilities::_internal_repair_stations(int index) const {
  return _impl_.repair_stations_.Get(index);
}
inline const ::city::elec::input::v1::RepairStation& Facilities::repair_stations(int index) const {
  // @@protoc_insertion_point(field_get:city.elec.input.v1.Facilities.repair_stations)
  return _internal_repair_stations(index);
}
inline ::city::elec::input::v1::RepairStation* Facilities::_internal_add_repair_stations() {
  return _impl_.repair_stations_.Add();
}
inline ::city::elec::input::v1::RepairStation* Facilities::add_repair_stations() {
  ::city::elec::input::v1::RepairStation* _add = _internal_add_repair_stations();
  // @@protoc_insertion_point(field_add:city.elec.input.v1.Facilities.repair_stations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::elec::input::v1::RepairStation >&
Facilities::repair_stations() const {
  // @@protoc_insertion_point(field_list:city.elec.input.v1.Facilities.repair_stations)
  return _impl_.repair_stations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace input
}  // namespace elec
}  // namespace city

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::city::elec::input::v1::FacilityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::elec::input::v1::FacilityType>() {
  return ::city::elec::input::v1::FacilityType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2felec_2finput_2fv1_2finput_2eproto
