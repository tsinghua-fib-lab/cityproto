// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/elec/interaction/v1/elec_service.proto
#ifndef GRPC_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto__INCLUDED
#define GRPC_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto__INCLUDED

#include "city/elec/interaction/v1/elec_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace city {
namespace elec {
namespace interaction {
namespace v1 {

class ElecService final {
 public:
  static constexpr char const* service_full_name() {
    return "city.elec.interaction.v1.ElecService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SetStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest& request, ::city::elec::interaction::v1::SetStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::SetStatusResponse>> AsyncSetStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::SetStatusResponse>>(AsyncSetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::SetStatusResponse>> PrepareAsyncSetStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::SetStatusResponse>>(PrepareAsyncSetStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPower(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest& request, ::city::elec::interaction::v1::GetPowerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetPowerResponse>> AsyncGetPower(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetPowerResponse>>(AsyncGetPowerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetPowerResponse>> PrepareAsyncGetPower(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetPowerResponse>>(PrepareAsyncGetPowerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPowerStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest& request, ::city::elec::interaction::v1::GetPowerStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetPowerStatusResponse>> AsyncGetPowerStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetPowerStatusResponse>>(AsyncGetPowerStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetPowerStatusResponse>> PrepareAsyncGetPowerStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetPowerStatusResponse>>(PrepareAsyncGetPowerStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNoPowerAOI(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest& request, ::city::elec::interaction::v1::GetNoPowerAOIResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetNoPowerAOIResponse>> AsyncGetNoPowerAOI(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetNoPowerAOIResponse>>(AsyncGetNoPowerAOIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetNoPowerAOIResponse>> PrepareAsyncGetNoPowerAOI(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetNoPowerAOIResponse>>(PrepareAsyncGetNoPowerAOIRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRuinInfo(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest& request, ::city::elec::interaction::v1::GetRuinInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetRuinInfoResponse>> AsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetRuinInfoResponse>>(AsyncGetRuinInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetRuinInfoResponse>> PrepareAsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetRuinInfoResponse>>(PrepareAsyncGetRuinInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status GetEdgeStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest& request, ::city::elec::interaction::v1::GetEdgeStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetEdgeStatusResponse>> AsyncGetEdgeStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetEdgeStatusResponse>>(AsyncGetEdgeStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetEdgeStatusResponse>> PrepareAsyncGetEdgeStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetEdgeStatusResponse>>(PrepareAsyncGetEdgeStatusRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SetStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest* request, ::city::elec::interaction::v1::SetStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest* request, ::city::elec::interaction::v1::SetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPower(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest* request, ::city::elec::interaction::v1::GetPowerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPower(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest* request, ::city::elec::interaction::v1::GetPowerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPowerStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest* request, ::city::elec::interaction::v1::GetPowerStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPowerStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest* request, ::city::elec::interaction::v1::GetPowerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNoPowerAOI(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* request, ::city::elec::interaction::v1::GetNoPowerAOIResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNoPowerAOI(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* request, ::city::elec::interaction::v1::GetNoPowerAOIResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRuinInfo(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest* request, ::city::elec::interaction::v1::GetRuinInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRuinInfo(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest* request, ::city::elec::interaction::v1::GetRuinInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetEdgeStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest* request, ::city::elec::interaction::v1::GetEdgeStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEdgeStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest* request, ::city::elec::interaction::v1::GetEdgeStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::SetStatusResponse>* AsyncSetStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::SetStatusResponse>* PrepareAsyncSetStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetPowerResponse>* AsyncGetPowerRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetPowerResponse>* PrepareAsyncGetPowerRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetPowerStatusResponse>* AsyncGetPowerStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetPowerStatusResponse>* PrepareAsyncGetPowerStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetNoPowerAOIResponse>* AsyncGetNoPowerAOIRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetNoPowerAOIResponse>* PrepareAsyncGetNoPowerAOIRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetRuinInfoResponse>* AsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetRuinInfoResponse>* PrepareAsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetEdgeStatusResponse>* AsyncGetEdgeStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::elec::interaction::v1::GetEdgeStatusResponse>* PrepareAsyncGetEdgeStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest& request, ::city::elec::interaction::v1::SetStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::SetStatusResponse>> AsyncSetStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::SetStatusResponse>>(AsyncSetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::SetStatusResponse>> PrepareAsyncSetStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::SetStatusResponse>>(PrepareAsyncSetStatusRaw(context, request, cq));
    }
    ::grpc::Status GetPower(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest& request, ::city::elec::interaction::v1::GetPowerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerResponse>> AsyncGetPower(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerResponse>>(AsyncGetPowerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerResponse>> PrepareAsyncGetPower(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerResponse>>(PrepareAsyncGetPowerRaw(context, request, cq));
    }
    ::grpc::Status GetPowerStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest& request, ::city::elec::interaction::v1::GetPowerStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerStatusResponse>> AsyncGetPowerStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerStatusResponse>>(AsyncGetPowerStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerStatusResponse>> PrepareAsyncGetPowerStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerStatusResponse>>(PrepareAsyncGetPowerStatusRaw(context, request, cq));
    }
    ::grpc::Status GetNoPowerAOI(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest& request, ::city::elec::interaction::v1::GetNoPowerAOIResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetNoPowerAOIResponse>> AsyncGetNoPowerAOI(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetNoPowerAOIResponse>>(AsyncGetNoPowerAOIRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetNoPowerAOIResponse>> PrepareAsyncGetNoPowerAOI(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetNoPowerAOIResponse>>(PrepareAsyncGetNoPowerAOIRaw(context, request, cq));
    }
    ::grpc::Status GetRuinInfo(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest& request, ::city::elec::interaction::v1::GetRuinInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetRuinInfoResponse>> AsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetRuinInfoResponse>>(AsyncGetRuinInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetRuinInfoResponse>> PrepareAsyncGetRuinInfo(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetRuinInfoResponse>>(PrepareAsyncGetRuinInfoRaw(context, request, cq));
    }
    ::grpc::Status GetEdgeStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest& request, ::city::elec::interaction::v1::GetEdgeStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetEdgeStatusResponse>> AsyncGetEdgeStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetEdgeStatusResponse>>(AsyncGetEdgeStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetEdgeStatusResponse>> PrepareAsyncGetEdgeStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetEdgeStatusResponse>>(PrepareAsyncGetEdgeStatusRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest* request, ::city::elec::interaction::v1::SetStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void SetStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest* request, ::city::elec::interaction::v1::SetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPower(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest* request, ::city::elec::interaction::v1::GetPowerResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPower(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest* request, ::city::elec::interaction::v1::GetPowerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPowerStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest* request, ::city::elec::interaction::v1::GetPowerStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPowerStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest* request, ::city::elec::interaction::v1::GetPowerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNoPowerAOI(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* request, ::city::elec::interaction::v1::GetNoPowerAOIResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNoPowerAOI(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* request, ::city::elec::interaction::v1::GetNoPowerAOIResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRuinInfo(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest* request, ::city::elec::interaction::v1::GetRuinInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRuinInfo(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest* request, ::city::elec::interaction::v1::GetRuinInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetEdgeStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest* request, ::city::elec::interaction::v1::GetEdgeStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEdgeStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest* request, ::city::elec::interaction::v1::GetEdgeStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::SetStatusResponse>* AsyncSetStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::SetStatusResponse>* PrepareAsyncSetStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerResponse>* AsyncGetPowerRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerResponse>* PrepareAsyncGetPowerRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerStatusResponse>* AsyncGetPowerStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerStatusResponse>* PrepareAsyncGetPowerStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetNoPowerAOIResponse>* AsyncGetNoPowerAOIRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetNoPowerAOIResponse>* PrepareAsyncGetNoPowerAOIRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetRuinInfoResponse>* AsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetRuinInfoResponse>* PrepareAsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetEdgeStatusResponse>* AsyncGetEdgeStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetEdgeStatusResponse>* PrepareAsyncGetEdgeStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPower_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPowerStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNoPowerAOI_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRuinInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEdgeStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SetStatus(::grpc::ServerContext* context, const ::city::elec::interaction::v1::SetStatusRequest* request, ::city::elec::interaction::v1::SetStatusResponse* response);
    virtual ::grpc::Status GetPower(::grpc::ServerContext* context, const ::city::elec::interaction::v1::GetPowerRequest* request, ::city::elec::interaction::v1::GetPowerResponse* response);
    virtual ::grpc::Status GetPowerStatus(::grpc::ServerContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest* request, ::city::elec::interaction::v1::GetPowerStatusResponse* response);
    virtual ::grpc::Status GetNoPowerAOI(::grpc::ServerContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* request, ::city::elec::interaction::v1::GetNoPowerAOIResponse* response);
    virtual ::grpc::Status GetRuinInfo(::grpc::ServerContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest* request, ::city::elec::interaction::v1::GetRuinInfoResponse* response);
    virtual ::grpc::Status GetEdgeStatus(::grpc::ServerContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest* request, ::city::elec::interaction::v1::GetEdgeStatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetStatus() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::SetStatusRequest* /*request*/, ::city::elec::interaction::v1::SetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetStatus(::grpc::ServerContext* context, ::city::elec::interaction::v1::SetStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::elec::interaction::v1::SetStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPower() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetPower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPower(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetPowerRequest* /*request*/, ::city::elec::interaction::v1::GetPowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPower(::grpc::ServerContext* context, ::city::elec::interaction::v1::GetPowerRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::elec::interaction::v1::GetPowerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPowerStatus() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPowerStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetPowerStatusRequest* /*request*/, ::city::elec::interaction::v1::GetPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPowerStatus(::grpc::ServerContext* context, ::city::elec::interaction::v1::GetPowerStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::elec::interaction::v1::GetPowerStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNoPowerAOI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNoPowerAOI() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetNoPowerAOI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoPowerAOI(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* /*request*/, ::city::elec::interaction::v1::GetNoPowerAOIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNoPowerAOI(::grpc::ServerContext* context, ::city::elec::interaction::v1::GetNoPowerAOIRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::elec::interaction::v1::GetNoPowerAOIResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetRuinInfoRequest* /*request*/, ::city::elec::interaction::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRuinInfo(::grpc::ServerContext* context, ::city::elec::interaction::v1::GetRuinInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::elec::interaction::v1::GetRuinInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEdgeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEdgeStatus() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetEdgeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEdgeStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetEdgeStatusRequest* /*request*/, ::city::elec::interaction::v1::GetEdgeStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEdgeStatus(::grpc::ServerContext* context, ::city::elec::interaction::v1::GetEdgeStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::elec::interaction::v1::GetEdgeStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetStatus<WithAsyncMethod_GetPower<WithAsyncMethod_GetPowerStatus<WithAsyncMethod_GetNoPowerAOI<WithAsyncMethod_GetRuinInfo<WithAsyncMethod_GetEdgeStatus<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetStatus() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::city::elec::interaction::v1::SetStatusRequest, ::city::elec::interaction::v1::SetStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::elec::interaction::v1::SetStatusRequest* request, ::city::elec::interaction::v1::SetStatusResponse* response) { return this->SetStatus(context, request, response); }));}
    void SetMessageAllocatorFor_SetStatus(
        ::grpc::MessageAllocator< ::city::elec::interaction::v1::SetStatusRequest, ::city::elec::interaction::v1::SetStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::elec::interaction::v1::SetStatusRequest, ::city::elec::interaction::v1::SetStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::SetStatusRequest* /*request*/, ::city::elec::interaction::v1::SetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::city::elec::interaction::v1::SetStatusRequest* /*request*/, ::city::elec::interaction::v1::SetStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPower() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::city::elec::interaction::v1::GetPowerRequest, ::city::elec::interaction::v1::GetPowerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::elec::interaction::v1::GetPowerRequest* request, ::city::elec::interaction::v1::GetPowerResponse* response) { return this->GetPower(context, request, response); }));}
    void SetMessageAllocatorFor_GetPower(
        ::grpc::MessageAllocator< ::city::elec::interaction::v1::GetPowerRequest, ::city::elec::interaction::v1::GetPowerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::elec::interaction::v1::GetPowerRequest, ::city::elec::interaction::v1::GetPowerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPower(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetPowerRequest* /*request*/, ::city::elec::interaction::v1::GetPowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPower(
      ::grpc::CallbackServerContext* /*context*/, const ::city::elec::interaction::v1::GetPowerRequest* /*request*/, ::city::elec::interaction::v1::GetPowerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPowerStatus() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::city::elec::interaction::v1::GetPowerStatusRequest, ::city::elec::interaction::v1::GetPowerStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest* request, ::city::elec::interaction::v1::GetPowerStatusResponse* response) { return this->GetPowerStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetPowerStatus(
        ::grpc::MessageAllocator< ::city::elec::interaction::v1::GetPowerStatusRequest, ::city::elec::interaction::v1::GetPowerStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::elec::interaction::v1::GetPowerStatusRequest, ::city::elec::interaction::v1::GetPowerStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPowerStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetPowerStatusRequest* /*request*/, ::city::elec::interaction::v1::GetPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPowerStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::city::elec::interaction::v1::GetPowerStatusRequest* /*request*/, ::city::elec::interaction::v1::GetPowerStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNoPowerAOI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNoPowerAOI() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::city::elec::interaction::v1::GetNoPowerAOIRequest, ::city::elec::interaction::v1::GetNoPowerAOIResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* request, ::city::elec::interaction::v1::GetNoPowerAOIResponse* response) { return this->GetNoPowerAOI(context, request, response); }));}
    void SetMessageAllocatorFor_GetNoPowerAOI(
        ::grpc::MessageAllocator< ::city::elec::interaction::v1::GetNoPowerAOIRequest, ::city::elec::interaction::v1::GetNoPowerAOIResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::elec::interaction::v1::GetNoPowerAOIRequest, ::city::elec::interaction::v1::GetNoPowerAOIResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNoPowerAOI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoPowerAOI(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* /*request*/, ::city::elec::interaction::v1::GetNoPowerAOIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNoPowerAOI(
      ::grpc::CallbackServerContext* /*context*/, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* /*request*/, ::city::elec::interaction::v1::GetNoPowerAOIResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::city::elec::interaction::v1::GetRuinInfoRequest, ::city::elec::interaction::v1::GetRuinInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest* request, ::city::elec::interaction::v1::GetRuinInfoResponse* response) { return this->GetRuinInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetRuinInfo(
        ::grpc::MessageAllocator< ::city::elec::interaction::v1::GetRuinInfoRequest, ::city::elec::interaction::v1::GetRuinInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::elec::interaction::v1::GetRuinInfoRequest, ::city::elec::interaction::v1::GetRuinInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetRuinInfoRequest* /*request*/, ::city::elec::interaction::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRuinInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::city::elec::interaction::v1::GetRuinInfoRequest* /*request*/, ::city::elec::interaction::v1::GetRuinInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEdgeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEdgeStatus() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::city::elec::interaction::v1::GetEdgeStatusRequest, ::city::elec::interaction::v1::GetEdgeStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest* request, ::city::elec::interaction::v1::GetEdgeStatusResponse* response) { return this->GetEdgeStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetEdgeStatus(
        ::grpc::MessageAllocator< ::city::elec::interaction::v1::GetEdgeStatusRequest, ::city::elec::interaction::v1::GetEdgeStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::elec::interaction::v1::GetEdgeStatusRequest, ::city::elec::interaction::v1::GetEdgeStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEdgeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEdgeStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetEdgeStatusRequest* /*request*/, ::city::elec::interaction::v1::GetEdgeStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEdgeStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::city::elec::interaction::v1::GetEdgeStatusRequest* /*request*/, ::city::elec::interaction::v1::GetEdgeStatusResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetStatus<WithCallbackMethod_GetPower<WithCallbackMethod_GetPowerStatus<WithCallbackMethod_GetNoPowerAOI<WithCallbackMethod_GetRuinInfo<WithCallbackMethod_GetEdgeStatus<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetStatus() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::SetStatusRequest* /*request*/, ::city::elec::interaction::v1::SetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPower() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetPower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPower(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetPowerRequest* /*request*/, ::city::elec::interaction::v1::GetPowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPowerStatus() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPowerStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetPowerStatusRequest* /*request*/, ::city::elec::interaction::v1::GetPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNoPowerAOI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNoPowerAOI() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetNoPowerAOI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoPowerAOI(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* /*request*/, ::city::elec::interaction::v1::GetNoPowerAOIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetRuinInfoRequest* /*request*/, ::city::elec::interaction::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEdgeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEdgeStatus() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetEdgeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEdgeStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetEdgeStatusRequest* /*request*/, ::city::elec::interaction::v1::GetEdgeStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetStatus() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::SetStatusRequest* /*request*/, ::city::elec::interaction::v1::SetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPower() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetPower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPower(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetPowerRequest* /*request*/, ::city::elec::interaction::v1::GetPowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPower(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPowerStatus() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPowerStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetPowerStatusRequest* /*request*/, ::city::elec::interaction::v1::GetPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPowerStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNoPowerAOI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNoPowerAOI() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetNoPowerAOI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoPowerAOI(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* /*request*/, ::city::elec::interaction::v1::GetNoPowerAOIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNoPowerAOI(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetRuinInfoRequest* /*request*/, ::city::elec::interaction::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRuinInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEdgeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEdgeStatus() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetEdgeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEdgeStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetEdgeStatusRequest* /*request*/, ::city::elec::interaction::v1::GetEdgeStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEdgeStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetStatus() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::SetStatusRequest* /*request*/, ::city::elec::interaction::v1::SetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPower() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPower(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPower(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetPowerRequest* /*request*/, ::city::elec::interaction::v1::GetPowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPower(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPowerStatus() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPowerStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPowerStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetPowerStatusRequest* /*request*/, ::city::elec::interaction::v1::GetPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPowerStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNoPowerAOI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNoPowerAOI() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNoPowerAOI(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNoPowerAOI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNoPowerAOI(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* /*request*/, ::city::elec::interaction::v1::GetNoPowerAOIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNoPowerAOI(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRuinInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetRuinInfoRequest* /*request*/, ::city::elec::interaction::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRuinInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEdgeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEdgeStatus() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEdgeStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEdgeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEdgeStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetEdgeStatusRequest* /*request*/, ::city::elec::interaction::v1::GetEdgeStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEdgeStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetStatus() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::elec::interaction::v1::SetStatusRequest, ::city::elec::interaction::v1::SetStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::elec::interaction::v1::SetStatusRequest, ::city::elec::interaction::v1::SetStatusResponse>* streamer) {
                       return this->StreamedSetStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::SetStatusRequest* /*request*/, ::city::elec::interaction::v1::SetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::elec::interaction::v1::SetStatusRequest,::city::elec::interaction::v1::SetStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPower() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::elec::interaction::v1::GetPowerRequest, ::city::elec::interaction::v1::GetPowerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::elec::interaction::v1::GetPowerRequest, ::city::elec::interaction::v1::GetPowerResponse>* streamer) {
                       return this->StreamedGetPower(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPower(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetPowerRequest* /*request*/, ::city::elec::interaction::v1::GetPowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPower(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::elec::interaction::v1::GetPowerRequest,::city::elec::interaction::v1::GetPowerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPowerStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPowerStatus() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::elec::interaction::v1::GetPowerStatusRequest, ::city::elec::interaction::v1::GetPowerStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::elec::interaction::v1::GetPowerStatusRequest, ::city::elec::interaction::v1::GetPowerStatusResponse>* streamer) {
                       return this->StreamedGetPowerStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPowerStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPowerStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetPowerStatusRequest* /*request*/, ::city::elec::interaction::v1::GetPowerStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPowerStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::elec::interaction::v1::GetPowerStatusRequest,::city::elec::interaction::v1::GetPowerStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNoPowerAOI : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNoPowerAOI() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::elec::interaction::v1::GetNoPowerAOIRequest, ::city::elec::interaction::v1::GetNoPowerAOIResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::elec::interaction::v1::GetNoPowerAOIRequest, ::city::elec::interaction::v1::GetNoPowerAOIResponse>* streamer) {
                       return this->StreamedGetNoPowerAOI(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNoPowerAOI() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNoPowerAOI(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* /*request*/, ::city::elec::interaction::v1::GetNoPowerAOIResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNoPowerAOI(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::elec::interaction::v1::GetNoPowerAOIRequest,::city::elec::interaction::v1::GetNoPowerAOIResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRuinInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRuinInfo() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::elec::interaction::v1::GetRuinInfoRequest, ::city::elec::interaction::v1::GetRuinInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::elec::interaction::v1::GetRuinInfoRequest, ::city::elec::interaction::v1::GetRuinInfoResponse>* streamer) {
                       return this->StreamedGetRuinInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRuinInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRuinInfo(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetRuinInfoRequest* /*request*/, ::city::elec::interaction::v1::GetRuinInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRuinInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::elec::interaction::v1::GetRuinInfoRequest,::city::elec::interaction::v1::GetRuinInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEdgeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEdgeStatus() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::elec::interaction::v1::GetEdgeStatusRequest, ::city::elec::interaction::v1::GetEdgeStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::elec::interaction::v1::GetEdgeStatusRequest, ::city::elec::interaction::v1::GetEdgeStatusResponse>* streamer) {
                       return this->StreamedGetEdgeStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEdgeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEdgeStatus(::grpc::ServerContext* /*context*/, const ::city::elec::interaction::v1::GetEdgeStatusRequest* /*request*/, ::city::elec::interaction::v1::GetEdgeStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEdgeStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::elec::interaction::v1::GetEdgeStatusRequest,::city::elec::interaction::v1::GetEdgeStatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetStatus<WithStreamedUnaryMethod_GetPower<WithStreamedUnaryMethod_GetPowerStatus<WithStreamedUnaryMethod_GetNoPowerAOI<WithStreamedUnaryMethod_GetRuinInfo<WithStreamedUnaryMethod_GetEdgeStatus<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetStatus<WithStreamedUnaryMethod_GetPower<WithStreamedUnaryMethod_GetPowerStatus<WithStreamedUnaryMethod_GetNoPowerAOI<WithStreamedUnaryMethod_GetRuinInfo<WithStreamedUnaryMethod_GetEdgeStatus<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace interaction
}  // namespace elec
}  // namespace city


#endif  // GRPC_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto__INCLUDED
