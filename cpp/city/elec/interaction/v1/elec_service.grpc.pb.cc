// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/elec/interaction/v1/elec_service.proto

#include "city/elec/interaction/v1/elec_service.pb.h"
#include "city/elec/interaction/v1/elec_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace city {
namespace elec {
namespace interaction {
namespace v1 {

static const char* ElecService_method_names[] = {
  "/city.elec.interaction.v1.ElecService/SetStatus",
  "/city.elec.interaction.v1.ElecService/GetPower",
  "/city.elec.interaction.v1.ElecService/GetPowerStatus",
  "/city.elec.interaction.v1.ElecService/GetNoPowerAOI",
  "/city.elec.interaction.v1.ElecService/GetRuinInfo",
  "/city.elec.interaction.v1.ElecService/GetEdgeStatus",
};

std::unique_ptr< ElecService::Stub> ElecService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ElecService::Stub> stub(new ElecService::Stub(channel, options));
  return stub;
}

ElecService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetStatus_(ElecService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPower_(ElecService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPowerStatus_(ElecService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNoPowerAOI_(ElecService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRuinInfo_(ElecService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEdgeStatus_(ElecService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ElecService::Stub::SetStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest& request, ::city::elec::interaction::v1::SetStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::elec::interaction::v1::SetStatusRequest, ::city::elec::interaction::v1::SetStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetStatus_, context, request, response);
}

void ElecService::Stub::async::SetStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest* request, ::city::elec::interaction::v1::SetStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::elec::interaction::v1::SetStatusRequest, ::city::elec::interaction::v1::SetStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStatus_, context, request, response, std::move(f));
}

void ElecService::Stub::async::SetStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest* request, ::city::elec::interaction::v1::SetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::SetStatusResponse>* ElecService::Stub::PrepareAsyncSetStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::elec::interaction::v1::SetStatusResponse, ::city::elec::interaction::v1::SetStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::SetStatusResponse>* ElecService::Stub::AsyncSetStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::SetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ElecService::Stub::GetPower(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest& request, ::city::elec::interaction::v1::GetPowerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::elec::interaction::v1::GetPowerRequest, ::city::elec::interaction::v1::GetPowerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPower_, context, request, response);
}

void ElecService::Stub::async::GetPower(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest* request, ::city::elec::interaction::v1::GetPowerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::elec::interaction::v1::GetPowerRequest, ::city::elec::interaction::v1::GetPowerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPower_, context, request, response, std::move(f));
}

void ElecService::Stub::async::GetPower(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest* request, ::city::elec::interaction::v1::GetPowerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPower_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerResponse>* ElecService::Stub::PrepareAsyncGetPowerRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::elec::interaction::v1::GetPowerResponse, ::city::elec::interaction::v1::GetPowerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPower_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerResponse>* ElecService::Stub::AsyncGetPowerRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPowerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ElecService::Stub::GetPowerStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest& request, ::city::elec::interaction::v1::GetPowerStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::elec::interaction::v1::GetPowerStatusRequest, ::city::elec::interaction::v1::GetPowerStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPowerStatus_, context, request, response);
}

void ElecService::Stub::async::GetPowerStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest* request, ::city::elec::interaction::v1::GetPowerStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::elec::interaction::v1::GetPowerStatusRequest, ::city::elec::interaction::v1::GetPowerStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPowerStatus_, context, request, response, std::move(f));
}

void ElecService::Stub::async::GetPowerStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest* request, ::city::elec::interaction::v1::GetPowerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPowerStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerStatusResponse>* ElecService::Stub::PrepareAsyncGetPowerStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::elec::interaction::v1::GetPowerStatusResponse, ::city::elec::interaction::v1::GetPowerStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPowerStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetPowerStatusResponse>* ElecService::Stub::AsyncGetPowerStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPowerStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ElecService::Stub::GetNoPowerAOI(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest& request, ::city::elec::interaction::v1::GetNoPowerAOIResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::elec::interaction::v1::GetNoPowerAOIRequest, ::city::elec::interaction::v1::GetNoPowerAOIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNoPowerAOI_, context, request, response);
}

void ElecService::Stub::async::GetNoPowerAOI(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* request, ::city::elec::interaction::v1::GetNoPowerAOIResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::elec::interaction::v1::GetNoPowerAOIRequest, ::city::elec::interaction::v1::GetNoPowerAOIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNoPowerAOI_, context, request, response, std::move(f));
}

void ElecService::Stub::async::GetNoPowerAOI(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* request, ::city::elec::interaction::v1::GetNoPowerAOIResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNoPowerAOI_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetNoPowerAOIResponse>* ElecService::Stub::PrepareAsyncGetNoPowerAOIRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::elec::interaction::v1::GetNoPowerAOIResponse, ::city::elec::interaction::v1::GetNoPowerAOIRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNoPowerAOI_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetNoPowerAOIResponse>* ElecService::Stub::AsyncGetNoPowerAOIRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNoPowerAOIRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ElecService::Stub::GetRuinInfo(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest& request, ::city::elec::interaction::v1::GetRuinInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::elec::interaction::v1::GetRuinInfoRequest, ::city::elec::interaction::v1::GetRuinInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRuinInfo_, context, request, response);
}

void ElecService::Stub::async::GetRuinInfo(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest* request, ::city::elec::interaction::v1::GetRuinInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::elec::interaction::v1::GetRuinInfoRequest, ::city::elec::interaction::v1::GetRuinInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRuinInfo_, context, request, response, std::move(f));
}

void ElecService::Stub::async::GetRuinInfo(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest* request, ::city::elec::interaction::v1::GetRuinInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRuinInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetRuinInfoResponse>* ElecService::Stub::PrepareAsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::elec::interaction::v1::GetRuinInfoResponse, ::city::elec::interaction::v1::GetRuinInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRuinInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetRuinInfoResponse>* ElecService::Stub::AsyncGetRuinInfoRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRuinInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ElecService::Stub::GetEdgeStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest& request, ::city::elec::interaction::v1::GetEdgeStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::elec::interaction::v1::GetEdgeStatusRequest, ::city::elec::interaction::v1::GetEdgeStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEdgeStatus_, context, request, response);
}

void ElecService::Stub::async::GetEdgeStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest* request, ::city::elec::interaction::v1::GetEdgeStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::elec::interaction::v1::GetEdgeStatusRequest, ::city::elec::interaction::v1::GetEdgeStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEdgeStatus_, context, request, response, std::move(f));
}

void ElecService::Stub::async::GetEdgeStatus(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest* request, ::city::elec::interaction::v1::GetEdgeStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEdgeStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetEdgeStatusResponse>* ElecService::Stub::PrepareAsyncGetEdgeStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::elec::interaction::v1::GetEdgeStatusResponse, ::city::elec::interaction::v1::GetEdgeStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEdgeStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::elec::interaction::v1::GetEdgeStatusResponse>* ElecService::Stub::AsyncGetEdgeStatusRaw(::grpc::ClientContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEdgeStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

ElecService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ElecService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ElecService::Service, ::city::elec::interaction::v1::SetStatusRequest, ::city::elec::interaction::v1::SetStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ElecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::elec::interaction::v1::SetStatusRequest* req,
             ::city::elec::interaction::v1::SetStatusResponse* resp) {
               return service->SetStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ElecService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ElecService::Service, ::city::elec::interaction::v1::GetPowerRequest, ::city::elec::interaction::v1::GetPowerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ElecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::elec::interaction::v1::GetPowerRequest* req,
             ::city::elec::interaction::v1::GetPowerResponse* resp) {
               return service->GetPower(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ElecService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ElecService::Service, ::city::elec::interaction::v1::GetPowerStatusRequest, ::city::elec::interaction::v1::GetPowerStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ElecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::elec::interaction::v1::GetPowerStatusRequest* req,
             ::city::elec::interaction::v1::GetPowerStatusResponse* resp) {
               return service->GetPowerStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ElecService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ElecService::Service, ::city::elec::interaction::v1::GetNoPowerAOIRequest, ::city::elec::interaction::v1::GetNoPowerAOIResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ElecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::elec::interaction::v1::GetNoPowerAOIRequest* req,
             ::city::elec::interaction::v1::GetNoPowerAOIResponse* resp) {
               return service->GetNoPowerAOI(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ElecService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ElecService::Service, ::city::elec::interaction::v1::GetRuinInfoRequest, ::city::elec::interaction::v1::GetRuinInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ElecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::elec::interaction::v1::GetRuinInfoRequest* req,
             ::city::elec::interaction::v1::GetRuinInfoResponse* resp) {
               return service->GetRuinInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ElecService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ElecService::Service, ::city::elec::interaction::v1::GetEdgeStatusRequest, ::city::elec::interaction::v1::GetEdgeStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ElecService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::elec::interaction::v1::GetEdgeStatusRequest* req,
             ::city::elec::interaction::v1::GetEdgeStatusResponse* resp) {
               return service->GetEdgeStatus(ctx, req, resp);
             }, this)));
}

ElecService::Service::~Service() {
}

::grpc::Status ElecService::Service::SetStatus(::grpc::ServerContext* context, const ::city::elec::interaction::v1::SetStatusRequest* request, ::city::elec::interaction::v1::SetStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ElecService::Service::GetPower(::grpc::ServerContext* context, const ::city::elec::interaction::v1::GetPowerRequest* request, ::city::elec::interaction::v1::GetPowerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ElecService::Service::GetPowerStatus(::grpc::ServerContext* context, const ::city::elec::interaction::v1::GetPowerStatusRequest* request, ::city::elec::interaction::v1::GetPowerStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ElecService::Service::GetNoPowerAOI(::grpc::ServerContext* context, const ::city::elec::interaction::v1::GetNoPowerAOIRequest* request, ::city::elec::interaction::v1::GetNoPowerAOIResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ElecService::Service::GetRuinInfo(::grpc::ServerContext* context, const ::city::elec::interaction::v1::GetRuinInfoRequest* request, ::city::elec::interaction::v1::GetRuinInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ElecService::Service::GetEdgeStatus(::grpc::ServerContext* context, const ::city::elec::interaction::v1::GetEdgeStatusRequest* request, ::city::elec::interaction::v1::GetEdgeStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace city
}  // namespace elec
}  // namespace interaction
}  // namespace v1

