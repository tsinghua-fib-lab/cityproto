// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/elec/interaction/v1/elec_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto;
namespace city {
namespace elec {
namespace interaction {
namespace v1 {
class GetEdgeStatusRequest;
struct GetEdgeStatusRequestDefaultTypeInternal;
extern GetEdgeStatusRequestDefaultTypeInternal _GetEdgeStatusRequest_default_instance_;
class GetEdgeStatusResponse;
struct GetEdgeStatusResponseDefaultTypeInternal;
extern GetEdgeStatusResponseDefaultTypeInternal _GetEdgeStatusResponse_default_instance_;
class GetNoPowerAOIRequest;
struct GetNoPowerAOIRequestDefaultTypeInternal;
extern GetNoPowerAOIRequestDefaultTypeInternal _GetNoPowerAOIRequest_default_instance_;
class GetNoPowerAOIResponse;
struct GetNoPowerAOIResponseDefaultTypeInternal;
extern GetNoPowerAOIResponseDefaultTypeInternal _GetNoPowerAOIResponse_default_instance_;
class GetPowerRequest;
struct GetPowerRequestDefaultTypeInternal;
extern GetPowerRequestDefaultTypeInternal _GetPowerRequest_default_instance_;
class GetPowerResponse;
struct GetPowerResponseDefaultTypeInternal;
extern GetPowerResponseDefaultTypeInternal _GetPowerResponse_default_instance_;
class GetPowerStatusRequest;
struct GetPowerStatusRequestDefaultTypeInternal;
extern GetPowerStatusRequestDefaultTypeInternal _GetPowerStatusRequest_default_instance_;
class GetPowerStatusResponse;
struct GetPowerStatusResponseDefaultTypeInternal;
extern GetPowerStatusResponseDefaultTypeInternal _GetPowerStatusResponse_default_instance_;
class GetPowerStatusResponse_PowerStatusEntry_DoNotUse;
struct GetPowerStatusResponse_PowerStatusEntry_DoNotUseDefaultTypeInternal;
extern GetPowerStatusResponse_PowerStatusEntry_DoNotUseDefaultTypeInternal _GetPowerStatusResponse_PowerStatusEntry_DoNotUse_default_instance_;
class GetRuinInfoRequest;
struct GetRuinInfoRequestDefaultTypeInternal;
extern GetRuinInfoRequestDefaultTypeInternal _GetRuinInfoRequest_default_instance_;
class GetRuinInfoResponse;
struct GetRuinInfoResponseDefaultTypeInternal;
extern GetRuinInfoResponseDefaultTypeInternal _GetRuinInfoResponse_default_instance_;
class RuinInfo;
struct RuinInfoDefaultTypeInternal;
extern RuinInfoDefaultTypeInternal _RuinInfo_default_instance_;
class SetStatusRequest;
struct SetStatusRequestDefaultTypeInternal;
extern SetStatusRequestDefaultTypeInternal _SetStatusRequest_default_instance_;
class SetStatusResponse;
struct SetStatusResponseDefaultTypeInternal;
extern SetStatusResponseDefaultTypeInternal _SetStatusResponse_default_instance_;
}  // namespace v1
}  // namespace interaction
}  // namespace elec
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::elec::interaction::v1::GetEdgeStatusRequest* Arena::CreateMaybeMessage<::city::elec::interaction::v1::GetEdgeStatusRequest>(Arena*);
template<> ::city::elec::interaction::v1::GetEdgeStatusResponse* Arena::CreateMaybeMessage<::city::elec::interaction::v1::GetEdgeStatusResponse>(Arena*);
template<> ::city::elec::interaction::v1::GetNoPowerAOIRequest* Arena::CreateMaybeMessage<::city::elec::interaction::v1::GetNoPowerAOIRequest>(Arena*);
template<> ::city::elec::interaction::v1::GetNoPowerAOIResponse* Arena::CreateMaybeMessage<::city::elec::interaction::v1::GetNoPowerAOIResponse>(Arena*);
template<> ::city::elec::interaction::v1::GetPowerRequest* Arena::CreateMaybeMessage<::city::elec::interaction::v1::GetPowerRequest>(Arena*);
template<> ::city::elec::interaction::v1::GetPowerResponse* Arena::CreateMaybeMessage<::city::elec::interaction::v1::GetPowerResponse>(Arena*);
template<> ::city::elec::interaction::v1::GetPowerStatusRequest* Arena::CreateMaybeMessage<::city::elec::interaction::v1::GetPowerStatusRequest>(Arena*);
template<> ::city::elec::interaction::v1::GetPowerStatusResponse* Arena::CreateMaybeMessage<::city::elec::interaction::v1::GetPowerStatusResponse>(Arena*);
template<> ::city::elec::interaction::v1::GetPowerStatusResponse_PowerStatusEntry_DoNotUse* Arena::CreateMaybeMessage<::city::elec::interaction::v1::GetPowerStatusResponse_PowerStatusEntry_DoNotUse>(Arena*);
template<> ::city::elec::interaction::v1::GetRuinInfoRequest* Arena::CreateMaybeMessage<::city::elec::interaction::v1::GetRuinInfoRequest>(Arena*);
template<> ::city::elec::interaction::v1::GetRuinInfoResponse* Arena::CreateMaybeMessage<::city::elec::interaction::v1::GetRuinInfoResponse>(Arena*);
template<> ::city::elec::interaction::v1::RuinInfo* Arena::CreateMaybeMessage<::city::elec::interaction::v1::RuinInfo>(Arena*);
template<> ::city::elec::interaction::v1::SetStatusRequest* Arena::CreateMaybeMessage<::city::elec::interaction::v1::SetStatusRequest>(Arena*);
template<> ::city::elec::interaction::v1::SetStatusResponse* Arena::CreateMaybeMessage<::city::elec::interaction::v1::SetStatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace elec {
namespace interaction {
namespace v1 {

// ===================================================================

class SetStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.elec.interaction.v1.SetStatusRequest) */ {
 public:
  inline SetStatusRequest() : SetStatusRequest(nullptr) {}
  ~SetStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR SetStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetStatusRequest(const SetStatusRequest& from);
  SetStatusRequest(SetStatusRequest&& from) noexcept
    : SetStatusRequest() {
    *this = ::std::move(from);
  }

  inline SetStatusRequest& operator=(const SetStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetStatusRequest& operator=(SetStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SetStatusRequest*>(
               &_SetStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetStatusRequest& a, SetStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetStatusRequest& from) {
    SetStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.interaction.v1.SetStatusRequest";
  }
  protected:
  explicit SetStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // bool status = 2 [json_name = "status"];
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:city.elec.interaction.v1.SetStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.elec.interaction.v1.SetStatusResponse) */ {
 public:
  inline SetStatusResponse() : SetStatusResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetStatusResponse(const SetStatusResponse& from);
  SetStatusResponse(SetStatusResponse&& from) noexcept
    : SetStatusResponse() {
    *this = ::std::move(from);
  }

  inline SetStatusResponse& operator=(const SetStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetStatusResponse& operator=(SetStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SetStatusResponse*>(
               &_SetStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetStatusResponse& a, SetStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetStatusResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetStatusResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.interaction.v1.SetStatusResponse";
  }
  protected:
  explicit SetStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.elec.interaction.v1.SetStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPowerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.elec.interaction.v1.GetPowerRequest) */ {
 public:
  inline GetPowerRequest() : GetPowerRequest(nullptr) {}
  ~GetPowerRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPowerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPowerRequest(const GetPowerRequest& from);
  GetPowerRequest(GetPowerRequest&& from) noexcept
    : GetPowerRequest() {
    *this = ::std::move(from);
  }

  inline GetPowerRequest& operator=(const GetPowerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPowerRequest& operator=(GetPowerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPowerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPowerRequest* internal_default_instance() {
    return reinterpret_cast<const GetPowerRequest*>(
               &_GetPowerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetPowerRequest& a, GetPowerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPowerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPowerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPowerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPowerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPowerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPowerRequest& from) {
    GetPowerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPowerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.interaction.v1.GetPowerRequest";
  }
  protected:
  explicit GetPowerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.elec.interaction.v1.GetPowerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPowerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.elec.interaction.v1.GetPowerResponse) */ {
 public:
  inline GetPowerResponse() : GetPowerResponse(nullptr) {}
  ~GetPowerResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPowerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPowerResponse(const GetPowerResponse& from);
  GetPowerResponse(GetPowerResponse&& from) noexcept
    : GetPowerResponse() {
    *this = ::std::move(from);
  }

  inline GetPowerResponse& operator=(const GetPowerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPowerResponse& operator=(GetPowerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPowerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPowerResponse* internal_default_instance() {
    return reinterpret_cast<const GetPowerResponse*>(
               &_GetPowerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetPowerResponse& a, GetPowerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPowerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPowerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPowerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPowerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPowerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPowerResponse& from) {
    GetPowerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPowerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.interaction.v1.GetPowerResponse";
  }
  protected:
  explicit GetPowerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPowerFieldNumber = 1,
  };
  // double power = 1 [json_name = "power"];
  void clear_power();
  double power() const;
  void set_power(double value);
  private:
  double _internal_power() const;
  void _internal_set_power(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.elec.interaction.v1.GetPowerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double power_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPowerStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.elec.interaction.v1.GetPowerStatusRequest) */ {
 public:
  inline GetPowerStatusRequest() : GetPowerStatusRequest(nullptr) {}
  ~GetPowerStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPowerStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPowerStatusRequest(const GetPowerStatusRequest& from);
  GetPowerStatusRequest(GetPowerStatusRequest&& from) noexcept
    : GetPowerStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetPowerStatusRequest& operator=(const GetPowerStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPowerStatusRequest& operator=(GetPowerStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPowerStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPowerStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetPowerStatusRequest*>(
               &_GetPowerStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetPowerStatusRequest& a, GetPowerStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPowerStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPowerStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPowerStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPowerStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPowerStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPowerStatusRequest& from) {
    GetPowerStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPowerStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.interaction.v1.GetPowerStatusRequest";
  }
  protected:
  explicit GetPowerStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
  };
  // int32 flag = 1 [json_name = "flag"];
  void clear_flag();
  int32_t flag() const;
  void set_flag(int32_t value);
  private:
  int32_t _internal_flag() const;
  void _internal_set_flag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.elec.interaction.v1.GetPowerStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPowerStatusResponse_PowerStatusEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetPowerStatusResponse_PowerStatusEntry_DoNotUse, 
    int32_t, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetPowerStatusResponse_PowerStatusEntry_DoNotUse, 
    int32_t, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  GetPowerStatusResponse_PowerStatusEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GetPowerStatusResponse_PowerStatusEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetPowerStatusResponse_PowerStatusEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetPowerStatusResponse_PowerStatusEntry_DoNotUse& other);
  static const GetPowerStatusResponse_PowerStatusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetPowerStatusResponse_PowerStatusEntry_DoNotUse*>(&_GetPowerStatusResponse_PowerStatusEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto;
};

// -------------------------------------------------------------------

class GetPowerStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.elec.interaction.v1.GetPowerStatusResponse) */ {
 public:
  inline GetPowerStatusResponse() : GetPowerStatusResponse(nullptr) {}
  ~GetPowerStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPowerStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPowerStatusResponse(const GetPowerStatusResponse& from);
  GetPowerStatusResponse(GetPowerStatusResponse&& from) noexcept
    : GetPowerStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetPowerStatusResponse& operator=(const GetPowerStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPowerStatusResponse& operator=(GetPowerStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPowerStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPowerStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetPowerStatusResponse*>(
               &_GetPowerStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetPowerStatusResponse& a, GetPowerStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPowerStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPowerStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPowerStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPowerStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPowerStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPowerStatusResponse& from) {
    GetPowerStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPowerStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.interaction.v1.GetPowerStatusResponse";
  }
  protected:
  explicit GetPowerStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPowerStatusFieldNumber = 1,
  };
  // map<int32, double> power_status = 1 [json_name = "powerStatus"];
  int power_status_size() const;
  private:
  int _internal_power_status_size() const;
  public:
  void clear_power_status();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
      _internal_power_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
      _internal_mutable_power_status();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
      power_status() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
      mutable_power_status();

  // @@protoc_insertion_point(class_scope:city.elec.interaction.v1.GetPowerStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GetPowerStatusResponse_PowerStatusEntry_DoNotUse,
        int32_t, double,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> power_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetNoPowerAOIRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.elec.interaction.v1.GetNoPowerAOIRequest) */ {
 public:
  inline GetNoPowerAOIRequest() : GetNoPowerAOIRequest(nullptr) {}
  ~GetNoPowerAOIRequest() override;
  explicit PROTOBUF_CONSTEXPR GetNoPowerAOIRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNoPowerAOIRequest(const GetNoPowerAOIRequest& from);
  GetNoPowerAOIRequest(GetNoPowerAOIRequest&& from) noexcept
    : GetNoPowerAOIRequest() {
    *this = ::std::move(from);
  }

  inline GetNoPowerAOIRequest& operator=(const GetNoPowerAOIRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNoPowerAOIRequest& operator=(GetNoPowerAOIRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNoPowerAOIRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNoPowerAOIRequest* internal_default_instance() {
    return reinterpret_cast<const GetNoPowerAOIRequest*>(
               &_GetNoPowerAOIRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetNoPowerAOIRequest& a, GetNoPowerAOIRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNoPowerAOIRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNoPowerAOIRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNoPowerAOIRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNoPowerAOIRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNoPowerAOIRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNoPowerAOIRequest& from) {
    GetNoPowerAOIRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNoPowerAOIRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.interaction.v1.GetNoPowerAOIRequest";
  }
  protected:
  explicit GetNoPowerAOIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
  };
  // int32 flag = 1 [json_name = "flag"];
  void clear_flag();
  int32_t flag() const;
  void set_flag(int32_t value);
  private:
  int32_t _internal_flag() const;
  void _internal_set_flag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.elec.interaction.v1.GetNoPowerAOIRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetNoPowerAOIResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.elec.interaction.v1.GetNoPowerAOIResponse) */ {
 public:
  inline GetNoPowerAOIResponse() : GetNoPowerAOIResponse(nullptr) {}
  ~GetNoPowerAOIResponse() override;
  explicit PROTOBUF_CONSTEXPR GetNoPowerAOIResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNoPowerAOIResponse(const GetNoPowerAOIResponse& from);
  GetNoPowerAOIResponse(GetNoPowerAOIResponse&& from) noexcept
    : GetNoPowerAOIResponse() {
    *this = ::std::move(from);
  }

  inline GetNoPowerAOIResponse& operator=(const GetNoPowerAOIResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNoPowerAOIResponse& operator=(GetNoPowerAOIResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNoPowerAOIResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNoPowerAOIResponse* internal_default_instance() {
    return reinterpret_cast<const GetNoPowerAOIResponse*>(
               &_GetNoPowerAOIResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetNoPowerAOIResponse& a, GetNoPowerAOIResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNoPowerAOIResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNoPowerAOIResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNoPowerAOIResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNoPowerAOIResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNoPowerAOIResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetNoPowerAOIResponse& from) {
    GetNoPowerAOIResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNoPowerAOIResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.interaction.v1.GetNoPowerAOIResponse";
  }
  protected:
  explicit GetNoPowerAOIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAoiFieldNumber = 1,
  };
  // repeated int32 aoi = 1 [json_name = "aoi"];
  int aoi_size() const;
  private:
  int _internal_aoi_size() const;
  public:
  void clear_aoi();
  private:
  int32_t _internal_aoi(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_aoi() const;
  void _internal_add_aoi(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_aoi();
  public:
  int32_t aoi(int index) const;
  void set_aoi(int index, int32_t value);
  void add_aoi(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      aoi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_aoi();

  // @@protoc_insertion_point(class_scope:city.elec.interaction.v1.GetNoPowerAOIResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > aoi_;
    mutable std::atomic<int> _aoi_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetRuinInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.elec.interaction.v1.GetRuinInfoRequest) */ {
 public:
  inline GetRuinInfoRequest() : GetRuinInfoRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetRuinInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRuinInfoRequest(const GetRuinInfoRequest& from);
  GetRuinInfoRequest(GetRuinInfoRequest&& from) noexcept
    : GetRuinInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetRuinInfoRequest& operator=(const GetRuinInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRuinInfoRequest& operator=(GetRuinInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRuinInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRuinInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetRuinInfoRequest*>(
               &_GetRuinInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetRuinInfoRequest& a, GetRuinInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRuinInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRuinInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRuinInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRuinInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetRuinInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetRuinInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.interaction.v1.GetRuinInfoRequest";
  }
  protected:
  explicit GetRuinInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.elec.interaction.v1.GetRuinInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RuinInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.elec.interaction.v1.RuinInfo) */ {
 public:
  inline RuinInfo() : RuinInfo(nullptr) {}
  ~RuinInfo() override;
  explicit PROTOBUF_CONSTEXPR RuinInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuinInfo(const RuinInfo& from);
  RuinInfo(RuinInfo&& from) noexcept
    : RuinInfo() {
    *this = ::std::move(from);
  }

  inline RuinInfo& operator=(const RuinInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuinInfo& operator=(RuinInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuinInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuinInfo* internal_default_instance() {
    return reinterpret_cast<const RuinInfo*>(
               &_RuinInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RuinInfo& a, RuinInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RuinInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuinInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuinInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RuinInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuinInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RuinInfo& from) {
    RuinInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuinInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.interaction.v1.RuinInfo";
  }
  protected:
  explicit RuinInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioFieldNumber = 2,
    kNumFieldNumber = 1,
  };
  // double ratio = 2 [json_name = "ratio"];
  void clear_ratio();
  double ratio() const;
  void set_ratio(double value);
  private:
  double _internal_ratio() const;
  void _internal_set_ratio(double value);
  public:

  // int32 num = 1 [json_name = "num"];
  void clear_num();
  int32_t num() const;
  void set_num(int32_t value);
  private:
  int32_t _internal_num() const;
  void _internal_set_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.elec.interaction.v1.RuinInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double ratio_;
    int32_t num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetRuinInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.elec.interaction.v1.GetRuinInfoResponse) */ {
 public:
  inline GetRuinInfoResponse() : GetRuinInfoResponse(nullptr) {}
  ~GetRuinInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetRuinInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRuinInfoResponse(const GetRuinInfoResponse& from);
  GetRuinInfoResponse(GetRuinInfoResponse&& from) noexcept
    : GetRuinInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetRuinInfoResponse& operator=(const GetRuinInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRuinInfoResponse& operator=(GetRuinInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRuinInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRuinInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetRuinInfoResponse*>(
               &_GetRuinInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetRuinInfoResponse& a, GetRuinInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRuinInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRuinInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRuinInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRuinInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRuinInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRuinInfoResponse& from) {
    GetRuinInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRuinInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.interaction.v1.GetRuinInfoResponse";
  }
  protected:
  explicit GetRuinInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneFieldNumber = 1,
    kTwoFieldNumber = 2,
    kThreeFieldNumber = 3,
  };
  // .city.elec.interaction.v1.RuinInfo one = 1 [json_name = "one"];
  bool has_one() const;
  private:
  bool _internal_has_one() const;
  public:
  void clear_one();
  const ::city::elec::interaction::v1::RuinInfo& one() const;
  PROTOBUF_NODISCARD ::city::elec::interaction::v1::RuinInfo* release_one();
  ::city::elec::interaction::v1::RuinInfo* mutable_one();
  void set_allocated_one(::city::elec::interaction::v1::RuinInfo* one);
  private:
  const ::city::elec::interaction::v1::RuinInfo& _internal_one() const;
  ::city::elec::interaction::v1::RuinInfo* _internal_mutable_one();
  public:
  void unsafe_arena_set_allocated_one(
      ::city::elec::interaction::v1::RuinInfo* one);
  ::city::elec::interaction::v1::RuinInfo* unsafe_arena_release_one();

  // .city.elec.interaction.v1.RuinInfo two = 2 [json_name = "two"];
  bool has_two() const;
  private:
  bool _internal_has_two() const;
  public:
  void clear_two();
  const ::city::elec::interaction::v1::RuinInfo& two() const;
  PROTOBUF_NODISCARD ::city::elec::interaction::v1::RuinInfo* release_two();
  ::city::elec::interaction::v1::RuinInfo* mutable_two();
  void set_allocated_two(::city::elec::interaction::v1::RuinInfo* two);
  private:
  const ::city::elec::interaction::v1::RuinInfo& _internal_two() const;
  ::city::elec::interaction::v1::RuinInfo* _internal_mutable_two();
  public:
  void unsafe_arena_set_allocated_two(
      ::city::elec::interaction::v1::RuinInfo* two);
  ::city::elec::interaction::v1::RuinInfo* unsafe_arena_release_two();

  // .city.elec.interaction.v1.RuinInfo three = 3 [json_name = "three"];
  bool has_three() const;
  private:
  bool _internal_has_three() const;
  public:
  void clear_three();
  const ::city::elec::interaction::v1::RuinInfo& three() const;
  PROTOBUF_NODISCARD ::city::elec::interaction::v1::RuinInfo* release_three();
  ::city::elec::interaction::v1::RuinInfo* mutable_three();
  void set_allocated_three(::city::elec::interaction::v1::RuinInfo* three);
  private:
  const ::city::elec::interaction::v1::RuinInfo& _internal_three() const;
  ::city::elec::interaction::v1::RuinInfo* _internal_mutable_three();
  public:
  void unsafe_arena_set_allocated_three(
      ::city::elec::interaction::v1::RuinInfo* three);
  ::city::elec::interaction::v1::RuinInfo* unsafe_arena_release_three();

  // @@protoc_insertion_point(class_scope:city.elec.interaction.v1.GetRuinInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::elec::interaction::v1::RuinInfo* one_;
    ::city::elec::interaction::v1::RuinInfo* two_;
    ::city::elec::interaction::v1::RuinInfo* three_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetEdgeStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.elec.interaction.v1.GetEdgeStatusRequest) */ {
 public:
  inline GetEdgeStatusRequest() : GetEdgeStatusRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetEdgeStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEdgeStatusRequest(const GetEdgeStatusRequest& from);
  GetEdgeStatusRequest(GetEdgeStatusRequest&& from) noexcept
    : GetEdgeStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetEdgeStatusRequest& operator=(const GetEdgeStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEdgeStatusRequest& operator=(GetEdgeStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEdgeStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEdgeStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetEdgeStatusRequest*>(
               &_GetEdgeStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetEdgeStatusRequest& a, GetEdgeStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEdgeStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEdgeStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEdgeStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEdgeStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetEdgeStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetEdgeStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.interaction.v1.GetEdgeStatusRequest";
  }
  protected:
  explicit GetEdgeStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.elec.interaction.v1.GetEdgeStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetEdgeStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.elec.interaction.v1.GetEdgeStatusResponse) */ {
 public:
  inline GetEdgeStatusResponse() : GetEdgeStatusResponse(nullptr) {}
  ~GetEdgeStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR GetEdgeStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEdgeStatusResponse(const GetEdgeStatusResponse& from);
  GetEdgeStatusResponse(GetEdgeStatusResponse&& from) noexcept
    : GetEdgeStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetEdgeStatusResponse& operator=(const GetEdgeStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEdgeStatusResponse& operator=(GetEdgeStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEdgeStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEdgeStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetEdgeStatusResponse*>(
               &_GetEdgeStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetEdgeStatusResponse& a, GetEdgeStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEdgeStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEdgeStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEdgeStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEdgeStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEdgeStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEdgeStatusResponse& from) {
    GetEdgeStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEdgeStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.elec.interaction.v1.GetEdgeStatusResponse";
  }
  protected:
  explicit GetEdgeStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReason1FieldNumber = 1,
    kReason2FieldNumber = 2,
    kReason3FieldNumber = 3,
  };
  // repeated string reason1 = 1 [json_name = "reason1"];
  int reason1_size() const;
  private:
  int _internal_reason1_size() const;
  public:
  void clear_reason1();
  const std::string& reason1(int index) const;
  std::string* mutable_reason1(int index);
  void set_reason1(int index, const std::string& value);
  void set_reason1(int index, std::string&& value);
  void set_reason1(int index, const char* value);
  void set_reason1(int index, const char* value, size_t size);
  std::string* add_reason1();
  void add_reason1(const std::string& value);
  void add_reason1(std::string&& value);
  void add_reason1(const char* value);
  void add_reason1(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reason1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reason1();
  private:
  const std::string& _internal_reason1(int index) const;
  std::string* _internal_add_reason1();
  public:

  // repeated string reason2 = 2 [json_name = "reason2"];
  int reason2_size() const;
  private:
  int _internal_reason2_size() const;
  public:
  void clear_reason2();
  const std::string& reason2(int index) const;
  std::string* mutable_reason2(int index);
  void set_reason2(int index, const std::string& value);
  void set_reason2(int index, std::string&& value);
  void set_reason2(int index, const char* value);
  void set_reason2(int index, const char* value, size_t size);
  std::string* add_reason2();
  void add_reason2(const std::string& value);
  void add_reason2(std::string&& value);
  void add_reason2(const char* value);
  void add_reason2(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reason2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reason2();
  private:
  const std::string& _internal_reason2(int index) const;
  std::string* _internal_add_reason2();
  public:

  // repeated string reason3 = 3 [json_name = "reason3"];
  int reason3_size() const;
  private:
  int _internal_reason3_size() const;
  public:
  void clear_reason3();
  const std::string& reason3(int index) const;
  std::string* mutable_reason3(int index);
  void set_reason3(int index, const std::string& value);
  void set_reason3(int index, std::string&& value);
  void set_reason3(int index, const char* value);
  void set_reason3(int index, const char* value, size_t size);
  std::string* add_reason3();
  void add_reason3(const std::string& value);
  void add_reason3(std::string&& value);
  void add_reason3(const char* value);
  void add_reason3(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reason3() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reason3();
  private:
  const std::string& _internal_reason3(int index) const;
  std::string* _internal_add_reason3();
  public:

  // @@protoc_insertion_point(class_scope:city.elec.interaction.v1.GetEdgeStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reason1_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reason2_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reason3_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetStatusRequest

// int32 id = 1 [json_name = "id"];
inline void SetStatusRequest::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t SetStatusRequest::_internal_id() const {
  return _impl_.id_;
}
inline int32_t SetStatusRequest::id() const {
  // @@protoc_insertion_point(field_get:city.elec.interaction.v1.SetStatusRequest.id)
  return _internal_id();
}
inline void SetStatusRequest::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void SetStatusRequest::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.elec.interaction.v1.SetStatusRequest.id)
}

// bool status = 2 [json_name = "status"];
inline void SetStatusRequest::clear_status() {
  _impl_.status_ = false;
}
inline bool SetStatusRequest::_internal_status() const {
  return _impl_.status_;
}
inline bool SetStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:city.elec.interaction.v1.SetStatusRequest.status)
  return _internal_status();
}
inline void SetStatusRequest::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void SetStatusRequest::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:city.elec.interaction.v1.SetStatusRequest.status)
}

// -------------------------------------------------------------------

// SetStatusResponse

// -------------------------------------------------------------------

// GetPowerRequest

// int32 id = 1 [json_name = "id"];
inline void GetPowerRequest::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t GetPowerRequest::_internal_id() const {
  return _impl_.id_;
}
inline int32_t GetPowerRequest::id() const {
  // @@protoc_insertion_point(field_get:city.elec.interaction.v1.GetPowerRequest.id)
  return _internal_id();
}
inline void GetPowerRequest::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void GetPowerRequest::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.elec.interaction.v1.GetPowerRequest.id)
}

// -------------------------------------------------------------------

// GetPowerResponse

// double power = 1 [json_name = "power"];
inline void GetPowerResponse::clear_power() {
  _impl_.power_ = 0;
}
inline double GetPowerResponse::_internal_power() const {
  return _impl_.power_;
}
inline double GetPowerResponse::power() const {
  // @@protoc_insertion_point(field_get:city.elec.interaction.v1.GetPowerResponse.power)
  return _internal_power();
}
inline void GetPowerResponse::_internal_set_power(double value) {
  
  _impl_.power_ = value;
}
inline void GetPowerResponse::set_power(double value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:city.elec.interaction.v1.GetPowerResponse.power)
}

// -------------------------------------------------------------------

// GetPowerStatusRequest

// int32 flag = 1 [json_name = "flag"];
inline void GetPowerStatusRequest::clear_flag() {
  _impl_.flag_ = 0;
}
inline int32_t GetPowerStatusRequest::_internal_flag() const {
  return _impl_.flag_;
}
inline int32_t GetPowerStatusRequest::flag() const {
  // @@protoc_insertion_point(field_get:city.elec.interaction.v1.GetPowerStatusRequest.flag)
  return _internal_flag();
}
inline void GetPowerStatusRequest::_internal_set_flag(int32_t value) {
  
  _impl_.flag_ = value;
}
inline void GetPowerStatusRequest::set_flag(int32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:city.elec.interaction.v1.GetPowerStatusRequest.flag)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetPowerStatusResponse

// map<int32, double> power_status = 1 [json_name = "powerStatus"];
inline int GetPowerStatusResponse::_internal_power_status_size() const {
  return _impl_.power_status_.size();
}
inline int GetPowerStatusResponse::power_status_size() const {
  return _internal_power_status_size();
}
inline void GetPowerStatusResponse::clear_power_status() {
  _impl_.power_status_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
GetPowerStatusResponse::_internal_power_status() const {
  return _impl_.power_status_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >&
GetPowerStatusResponse::power_status() const {
  // @@protoc_insertion_point(field_map:city.elec.interaction.v1.GetPowerStatusResponse.power_status)
  return _internal_power_status();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
GetPowerStatusResponse::_internal_mutable_power_status() {
  return _impl_.power_status_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int32_t, double >*
GetPowerStatusResponse::mutable_power_status() {
  // @@protoc_insertion_point(field_mutable_map:city.elec.interaction.v1.GetPowerStatusResponse.power_status)
  return _internal_mutable_power_status();
}

// -------------------------------------------------------------------

// GetNoPowerAOIRequest

// int32 flag = 1 [json_name = "flag"];
inline void GetNoPowerAOIRequest::clear_flag() {
  _impl_.flag_ = 0;
}
inline int32_t GetNoPowerAOIRequest::_internal_flag() const {
  return _impl_.flag_;
}
inline int32_t GetNoPowerAOIRequest::flag() const {
  // @@protoc_insertion_point(field_get:city.elec.interaction.v1.GetNoPowerAOIRequest.flag)
  return _internal_flag();
}
inline void GetNoPowerAOIRequest::_internal_set_flag(int32_t value) {
  
  _impl_.flag_ = value;
}
inline void GetNoPowerAOIRequest::set_flag(int32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:city.elec.interaction.v1.GetNoPowerAOIRequest.flag)
}

// -------------------------------------------------------------------

// GetNoPowerAOIResponse

// repeated int32 aoi = 1 [json_name = "aoi"];
inline int GetNoPowerAOIResponse::_internal_aoi_size() const {
  return _impl_.aoi_.size();
}
inline int GetNoPowerAOIResponse::aoi_size() const {
  return _internal_aoi_size();
}
inline void GetNoPowerAOIResponse::clear_aoi() {
  _impl_.aoi_.Clear();
}
inline int32_t GetNoPowerAOIResponse::_internal_aoi(int index) const {
  return _impl_.aoi_.Get(index);
}
inline int32_t GetNoPowerAOIResponse::aoi(int index) const {
  // @@protoc_insertion_point(field_get:city.elec.interaction.v1.GetNoPowerAOIResponse.aoi)
  return _internal_aoi(index);
}
inline void GetNoPowerAOIResponse::set_aoi(int index, int32_t value) {
  _impl_.aoi_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.elec.interaction.v1.GetNoPowerAOIResponse.aoi)
}
inline void GetNoPowerAOIResponse::_internal_add_aoi(int32_t value) {
  _impl_.aoi_.Add(value);
}
inline void GetNoPowerAOIResponse::add_aoi(int32_t value) {
  _internal_add_aoi(value);
  // @@protoc_insertion_point(field_add:city.elec.interaction.v1.GetNoPowerAOIResponse.aoi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetNoPowerAOIResponse::_internal_aoi() const {
  return _impl_.aoi_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
GetNoPowerAOIResponse::aoi() const {
  // @@protoc_insertion_point(field_list:city.elec.interaction.v1.GetNoPowerAOIResponse.aoi)
  return _internal_aoi();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetNoPowerAOIResponse::_internal_mutable_aoi() {
  return &_impl_.aoi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
GetNoPowerAOIResponse::mutable_aoi() {
  // @@protoc_insertion_point(field_mutable_list:city.elec.interaction.v1.GetNoPowerAOIResponse.aoi)
  return _internal_mutable_aoi();
}

// -------------------------------------------------------------------

// GetRuinInfoRequest

// -------------------------------------------------------------------

// RuinInfo

// int32 num = 1 [json_name = "num"];
inline void RuinInfo::clear_num() {
  _impl_.num_ = 0;
}
inline int32_t RuinInfo::_internal_num() const {
  return _impl_.num_;
}
inline int32_t RuinInfo::num() const {
  // @@protoc_insertion_point(field_get:city.elec.interaction.v1.RuinInfo.num)
  return _internal_num();
}
inline void RuinInfo::_internal_set_num(int32_t value) {
  
  _impl_.num_ = value;
}
inline void RuinInfo::set_num(int32_t value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:city.elec.interaction.v1.RuinInfo.num)
}

// double ratio = 2 [json_name = "ratio"];
inline void RuinInfo::clear_ratio() {
  _impl_.ratio_ = 0;
}
inline double RuinInfo::_internal_ratio() const {
  return _impl_.ratio_;
}
inline double RuinInfo::ratio() const {
  // @@protoc_insertion_point(field_get:city.elec.interaction.v1.RuinInfo.ratio)
  return _internal_ratio();
}
inline void RuinInfo::_internal_set_ratio(double value) {
  
  _impl_.ratio_ = value;
}
inline void RuinInfo::set_ratio(double value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:city.elec.interaction.v1.RuinInfo.ratio)
}

// -------------------------------------------------------------------

// GetRuinInfoResponse

// .city.elec.interaction.v1.RuinInfo one = 1 [json_name = "one"];
inline bool GetRuinInfoResponse::_internal_has_one() const {
  return this != internal_default_instance() && _impl_.one_ != nullptr;
}
inline bool GetRuinInfoResponse::has_one() const {
  return _internal_has_one();
}
inline void GetRuinInfoResponse::clear_one() {
  if (GetArenaForAllocation() == nullptr && _impl_.one_ != nullptr) {
    delete _impl_.one_;
  }
  _impl_.one_ = nullptr;
}
inline const ::city::elec::interaction::v1::RuinInfo& GetRuinInfoResponse::_internal_one() const {
  const ::city::elec::interaction::v1::RuinInfo* p = _impl_.one_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::elec::interaction::v1::RuinInfo&>(
      ::city::elec::interaction::v1::_RuinInfo_default_instance_);
}
inline const ::city::elec::interaction::v1::RuinInfo& GetRuinInfoResponse::one() const {
  // @@protoc_insertion_point(field_get:city.elec.interaction.v1.GetRuinInfoResponse.one)
  return _internal_one();
}
inline void GetRuinInfoResponse::unsafe_arena_set_allocated_one(
    ::city::elec::interaction::v1::RuinInfo* one) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.one_);
  }
  _impl_.one_ = one;
  if (one) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.elec.interaction.v1.GetRuinInfoResponse.one)
}
inline ::city::elec::interaction::v1::RuinInfo* GetRuinInfoResponse::release_one() {
  
  ::city::elec::interaction::v1::RuinInfo* temp = _impl_.one_;
  _impl_.one_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::elec::interaction::v1::RuinInfo* GetRuinInfoResponse::unsafe_arena_release_one() {
  // @@protoc_insertion_point(field_release:city.elec.interaction.v1.GetRuinInfoResponse.one)
  
  ::city::elec::interaction::v1::RuinInfo* temp = _impl_.one_;
  _impl_.one_ = nullptr;
  return temp;
}
inline ::city::elec::interaction::v1::RuinInfo* GetRuinInfoResponse::_internal_mutable_one() {
  
  if (_impl_.one_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::elec::interaction::v1::RuinInfo>(GetArenaForAllocation());
    _impl_.one_ = p;
  }
  return _impl_.one_;
}
inline ::city::elec::interaction::v1::RuinInfo* GetRuinInfoResponse::mutable_one() {
  ::city::elec::interaction::v1::RuinInfo* _msg = _internal_mutable_one();
  // @@protoc_insertion_point(field_mutable:city.elec.interaction.v1.GetRuinInfoResponse.one)
  return _msg;
}
inline void GetRuinInfoResponse::set_allocated_one(::city::elec::interaction::v1::RuinInfo* one) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.one_;
  }
  if (one) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(one);
    if (message_arena != submessage_arena) {
      one = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, one, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.one_ = one;
  // @@protoc_insertion_point(field_set_allocated:city.elec.interaction.v1.GetRuinInfoResponse.one)
}

// .city.elec.interaction.v1.RuinInfo two = 2 [json_name = "two"];
inline bool GetRuinInfoResponse::_internal_has_two() const {
  return this != internal_default_instance() && _impl_.two_ != nullptr;
}
inline bool GetRuinInfoResponse::has_two() const {
  return _internal_has_two();
}
inline void GetRuinInfoResponse::clear_two() {
  if (GetArenaForAllocation() == nullptr && _impl_.two_ != nullptr) {
    delete _impl_.two_;
  }
  _impl_.two_ = nullptr;
}
inline const ::city::elec::interaction::v1::RuinInfo& GetRuinInfoResponse::_internal_two() const {
  const ::city::elec::interaction::v1::RuinInfo* p = _impl_.two_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::elec::interaction::v1::RuinInfo&>(
      ::city::elec::interaction::v1::_RuinInfo_default_instance_);
}
inline const ::city::elec::interaction::v1::RuinInfo& GetRuinInfoResponse::two() const {
  // @@protoc_insertion_point(field_get:city.elec.interaction.v1.GetRuinInfoResponse.two)
  return _internal_two();
}
inline void GetRuinInfoResponse::unsafe_arena_set_allocated_two(
    ::city::elec::interaction::v1::RuinInfo* two) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.two_);
  }
  _impl_.two_ = two;
  if (two) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.elec.interaction.v1.GetRuinInfoResponse.two)
}
inline ::city::elec::interaction::v1::RuinInfo* GetRuinInfoResponse::release_two() {
  
  ::city::elec::interaction::v1::RuinInfo* temp = _impl_.two_;
  _impl_.two_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::elec::interaction::v1::RuinInfo* GetRuinInfoResponse::unsafe_arena_release_two() {
  // @@protoc_insertion_point(field_release:city.elec.interaction.v1.GetRuinInfoResponse.two)
  
  ::city::elec::interaction::v1::RuinInfo* temp = _impl_.two_;
  _impl_.two_ = nullptr;
  return temp;
}
inline ::city::elec::interaction::v1::RuinInfo* GetRuinInfoResponse::_internal_mutable_two() {
  
  if (_impl_.two_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::elec::interaction::v1::RuinInfo>(GetArenaForAllocation());
    _impl_.two_ = p;
  }
  return _impl_.two_;
}
inline ::city::elec::interaction::v1::RuinInfo* GetRuinInfoResponse::mutable_two() {
  ::city::elec::interaction::v1::RuinInfo* _msg = _internal_mutable_two();
  // @@protoc_insertion_point(field_mutable:city.elec.interaction.v1.GetRuinInfoResponse.two)
  return _msg;
}
inline void GetRuinInfoResponse::set_allocated_two(::city::elec::interaction::v1::RuinInfo* two) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.two_;
  }
  if (two) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(two);
    if (message_arena != submessage_arena) {
      two = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, two, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.two_ = two;
  // @@protoc_insertion_point(field_set_allocated:city.elec.interaction.v1.GetRuinInfoResponse.two)
}

// .city.elec.interaction.v1.RuinInfo three = 3 [json_name = "three"];
inline bool GetRuinInfoResponse::_internal_has_three() const {
  return this != internal_default_instance() && _impl_.three_ != nullptr;
}
inline bool GetRuinInfoResponse::has_three() const {
  return _internal_has_three();
}
inline void GetRuinInfoResponse::clear_three() {
  if (GetArenaForAllocation() == nullptr && _impl_.three_ != nullptr) {
    delete _impl_.three_;
  }
  _impl_.three_ = nullptr;
}
inline const ::city::elec::interaction::v1::RuinInfo& GetRuinInfoResponse::_internal_three() const {
  const ::city::elec::interaction::v1::RuinInfo* p = _impl_.three_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::elec::interaction::v1::RuinInfo&>(
      ::city::elec::interaction::v1::_RuinInfo_default_instance_);
}
inline const ::city::elec::interaction::v1::RuinInfo& GetRuinInfoResponse::three() const {
  // @@protoc_insertion_point(field_get:city.elec.interaction.v1.GetRuinInfoResponse.three)
  return _internal_three();
}
inline void GetRuinInfoResponse::unsafe_arena_set_allocated_three(
    ::city::elec::interaction::v1::RuinInfo* three) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.three_);
  }
  _impl_.three_ = three;
  if (three) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.elec.interaction.v1.GetRuinInfoResponse.three)
}
inline ::city::elec::interaction::v1::RuinInfo* GetRuinInfoResponse::release_three() {
  
  ::city::elec::interaction::v1::RuinInfo* temp = _impl_.three_;
  _impl_.three_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::elec::interaction::v1::RuinInfo* GetRuinInfoResponse::unsafe_arena_release_three() {
  // @@protoc_insertion_point(field_release:city.elec.interaction.v1.GetRuinInfoResponse.three)
  
  ::city::elec::interaction::v1::RuinInfo* temp = _impl_.three_;
  _impl_.three_ = nullptr;
  return temp;
}
inline ::city::elec::interaction::v1::RuinInfo* GetRuinInfoResponse::_internal_mutable_three() {
  
  if (_impl_.three_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::elec::interaction::v1::RuinInfo>(GetArenaForAllocation());
    _impl_.three_ = p;
  }
  return _impl_.three_;
}
inline ::city::elec::interaction::v1::RuinInfo* GetRuinInfoResponse::mutable_three() {
  ::city::elec::interaction::v1::RuinInfo* _msg = _internal_mutable_three();
  // @@protoc_insertion_point(field_mutable:city.elec.interaction.v1.GetRuinInfoResponse.three)
  return _msg;
}
inline void GetRuinInfoResponse::set_allocated_three(::city::elec::interaction::v1::RuinInfo* three) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.three_;
  }
  if (three) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(three);
    if (message_arena != submessage_arena) {
      three = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, three, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.three_ = three;
  // @@protoc_insertion_point(field_set_allocated:city.elec.interaction.v1.GetRuinInfoResponse.three)
}

// -------------------------------------------------------------------

// GetEdgeStatusRequest

// -------------------------------------------------------------------

// GetEdgeStatusResponse

// repeated string reason1 = 1 [json_name = "reason1"];
inline int GetEdgeStatusResponse::_internal_reason1_size() const {
  return _impl_.reason1_.size();
}
inline int GetEdgeStatusResponse::reason1_size() const {
  return _internal_reason1_size();
}
inline void GetEdgeStatusResponse::clear_reason1() {
  _impl_.reason1_.Clear();
}
inline std::string* GetEdgeStatusResponse::add_reason1() {
  std::string* _s = _internal_add_reason1();
  // @@protoc_insertion_point(field_add_mutable:city.elec.interaction.v1.GetEdgeStatusResponse.reason1)
  return _s;
}
inline const std::string& GetEdgeStatusResponse::_internal_reason1(int index) const {
  return _impl_.reason1_.Get(index);
}
inline const std::string& GetEdgeStatusResponse::reason1(int index) const {
  // @@protoc_insertion_point(field_get:city.elec.interaction.v1.GetEdgeStatusResponse.reason1)
  return _internal_reason1(index);
}
inline std::string* GetEdgeStatusResponse::mutable_reason1(int index) {
  // @@protoc_insertion_point(field_mutable:city.elec.interaction.v1.GetEdgeStatusResponse.reason1)
  return _impl_.reason1_.Mutable(index);
}
inline void GetEdgeStatusResponse::set_reason1(int index, const std::string& value) {
  _impl_.reason1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:city.elec.interaction.v1.GetEdgeStatusResponse.reason1)
}
inline void GetEdgeStatusResponse::set_reason1(int index, std::string&& value) {
  _impl_.reason1_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:city.elec.interaction.v1.GetEdgeStatusResponse.reason1)
}
inline void GetEdgeStatusResponse::set_reason1(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.reason1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:city.elec.interaction.v1.GetEdgeStatusResponse.reason1)
}
inline void GetEdgeStatusResponse::set_reason1(int index, const char* value, size_t size) {
  _impl_.reason1_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:city.elec.interaction.v1.GetEdgeStatusResponse.reason1)
}
inline std::string* GetEdgeStatusResponse::_internal_add_reason1() {
  return _impl_.reason1_.Add();
}
inline void GetEdgeStatusResponse::add_reason1(const std::string& value) {
  _impl_.reason1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:city.elec.interaction.v1.GetEdgeStatusResponse.reason1)
}
inline void GetEdgeStatusResponse::add_reason1(std::string&& value) {
  _impl_.reason1_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:city.elec.interaction.v1.GetEdgeStatusResponse.reason1)
}
inline void GetEdgeStatusResponse::add_reason1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.reason1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:city.elec.interaction.v1.GetEdgeStatusResponse.reason1)
}
inline void GetEdgeStatusResponse::add_reason1(const char* value, size_t size) {
  _impl_.reason1_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:city.elec.interaction.v1.GetEdgeStatusResponse.reason1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetEdgeStatusResponse::reason1() const {
  // @@protoc_insertion_point(field_list:city.elec.interaction.v1.GetEdgeStatusResponse.reason1)
  return _impl_.reason1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetEdgeStatusResponse::mutable_reason1() {
  // @@protoc_insertion_point(field_mutable_list:city.elec.interaction.v1.GetEdgeStatusResponse.reason1)
  return &_impl_.reason1_;
}

// repeated string reason2 = 2 [json_name = "reason2"];
inline int GetEdgeStatusResponse::_internal_reason2_size() const {
  return _impl_.reason2_.size();
}
inline int GetEdgeStatusResponse::reason2_size() const {
  return _internal_reason2_size();
}
inline void GetEdgeStatusResponse::clear_reason2() {
  _impl_.reason2_.Clear();
}
inline std::string* GetEdgeStatusResponse::add_reason2() {
  std::string* _s = _internal_add_reason2();
  // @@protoc_insertion_point(field_add_mutable:city.elec.interaction.v1.GetEdgeStatusResponse.reason2)
  return _s;
}
inline const std::string& GetEdgeStatusResponse::_internal_reason2(int index) const {
  return _impl_.reason2_.Get(index);
}
inline const std::string& GetEdgeStatusResponse::reason2(int index) const {
  // @@protoc_insertion_point(field_get:city.elec.interaction.v1.GetEdgeStatusResponse.reason2)
  return _internal_reason2(index);
}
inline std::string* GetEdgeStatusResponse::mutable_reason2(int index) {
  // @@protoc_insertion_point(field_mutable:city.elec.interaction.v1.GetEdgeStatusResponse.reason2)
  return _impl_.reason2_.Mutable(index);
}
inline void GetEdgeStatusResponse::set_reason2(int index, const std::string& value) {
  _impl_.reason2_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:city.elec.interaction.v1.GetEdgeStatusResponse.reason2)
}
inline void GetEdgeStatusResponse::set_reason2(int index, std::string&& value) {
  _impl_.reason2_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:city.elec.interaction.v1.GetEdgeStatusResponse.reason2)
}
inline void GetEdgeStatusResponse::set_reason2(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.reason2_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:city.elec.interaction.v1.GetEdgeStatusResponse.reason2)
}
inline void GetEdgeStatusResponse::set_reason2(int index, const char* value, size_t size) {
  _impl_.reason2_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:city.elec.interaction.v1.GetEdgeStatusResponse.reason2)
}
inline std::string* GetEdgeStatusResponse::_internal_add_reason2() {
  return _impl_.reason2_.Add();
}
inline void GetEdgeStatusResponse::add_reason2(const std::string& value) {
  _impl_.reason2_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:city.elec.interaction.v1.GetEdgeStatusResponse.reason2)
}
inline void GetEdgeStatusResponse::add_reason2(std::string&& value) {
  _impl_.reason2_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:city.elec.interaction.v1.GetEdgeStatusResponse.reason2)
}
inline void GetEdgeStatusResponse::add_reason2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.reason2_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:city.elec.interaction.v1.GetEdgeStatusResponse.reason2)
}
inline void GetEdgeStatusResponse::add_reason2(const char* value, size_t size) {
  _impl_.reason2_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:city.elec.interaction.v1.GetEdgeStatusResponse.reason2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetEdgeStatusResponse::reason2() const {
  // @@protoc_insertion_point(field_list:city.elec.interaction.v1.GetEdgeStatusResponse.reason2)
  return _impl_.reason2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetEdgeStatusResponse::mutable_reason2() {
  // @@protoc_insertion_point(field_mutable_list:city.elec.interaction.v1.GetEdgeStatusResponse.reason2)
  return &_impl_.reason2_;
}

// repeated string reason3 = 3 [json_name = "reason3"];
inline int GetEdgeStatusResponse::_internal_reason3_size() const {
  return _impl_.reason3_.size();
}
inline int GetEdgeStatusResponse::reason3_size() const {
  return _internal_reason3_size();
}
inline void GetEdgeStatusResponse::clear_reason3() {
  _impl_.reason3_.Clear();
}
inline std::string* GetEdgeStatusResponse::add_reason3() {
  std::string* _s = _internal_add_reason3();
  // @@protoc_insertion_point(field_add_mutable:city.elec.interaction.v1.GetEdgeStatusResponse.reason3)
  return _s;
}
inline const std::string& GetEdgeStatusResponse::_internal_reason3(int index) const {
  return _impl_.reason3_.Get(index);
}
inline const std::string& GetEdgeStatusResponse::reason3(int index) const {
  // @@protoc_insertion_point(field_get:city.elec.interaction.v1.GetEdgeStatusResponse.reason3)
  return _internal_reason3(index);
}
inline std::string* GetEdgeStatusResponse::mutable_reason3(int index) {
  // @@protoc_insertion_point(field_mutable:city.elec.interaction.v1.GetEdgeStatusResponse.reason3)
  return _impl_.reason3_.Mutable(index);
}
inline void GetEdgeStatusResponse::set_reason3(int index, const std::string& value) {
  _impl_.reason3_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:city.elec.interaction.v1.GetEdgeStatusResponse.reason3)
}
inline void GetEdgeStatusResponse::set_reason3(int index, std::string&& value) {
  _impl_.reason3_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:city.elec.interaction.v1.GetEdgeStatusResponse.reason3)
}
inline void GetEdgeStatusResponse::set_reason3(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.reason3_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:city.elec.interaction.v1.GetEdgeStatusResponse.reason3)
}
inline void GetEdgeStatusResponse::set_reason3(int index, const char* value, size_t size) {
  _impl_.reason3_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:city.elec.interaction.v1.GetEdgeStatusResponse.reason3)
}
inline std::string* GetEdgeStatusResponse::_internal_add_reason3() {
  return _impl_.reason3_.Add();
}
inline void GetEdgeStatusResponse::add_reason3(const std::string& value) {
  _impl_.reason3_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:city.elec.interaction.v1.GetEdgeStatusResponse.reason3)
}
inline void GetEdgeStatusResponse::add_reason3(std::string&& value) {
  _impl_.reason3_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:city.elec.interaction.v1.GetEdgeStatusResponse.reason3)
}
inline void GetEdgeStatusResponse::add_reason3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.reason3_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:city.elec.interaction.v1.GetEdgeStatusResponse.reason3)
}
inline void GetEdgeStatusResponse::add_reason3(const char* value, size_t size) {
  _impl_.reason3_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:city.elec.interaction.v1.GetEdgeStatusResponse.reason3)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetEdgeStatusResponse::reason3() const {
  // @@protoc_insertion_point(field_list:city.elec.interaction.v1.GetEdgeStatusResponse.reason3)
  return _impl_.reason3_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetEdgeStatusResponse::mutable_reason3() {
  // @@protoc_insertion_point(field_mutable_list:city.elec.interaction.v1.GetEdgeStatusResponse.reason3)
  return &_impl_.reason3_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace interaction
}  // namespace elec
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2felec_2finteraction_2fv1_2felec_5fservice_2eproto
