// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/event/v1/event_service.proto

#include "city/event/v1/event_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace city {
namespace event {
namespace v1 {
PROTOBUF_CONSTEXPR PublishRequest::PublishRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PublishRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishRequestDefaultTypeInternal() {}
  union {
    PublishRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishRequestDefaultTypeInternal _PublishRequest_default_instance_;
PROTOBUF_CONSTEXPR PublishResponse::PublishResponse(
    ::_pbi::ConstantInitialized) {}
struct PublishResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublishResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublishResponseDefaultTypeInternal() {}
  union {
    PublishResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublishResponseDefaultTypeInternal _PublishResponse_default_instance_;
PROTOBUF_CONSTEXPR PullRequest::PullRequest(
    ::_pbi::ConstantInitialized) {}
struct PullRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PullRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PullRequestDefaultTypeInternal() {}
  union {
    PullRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PullRequestDefaultTypeInternal _PullRequest_default_instance_;
PROTOBUF_CONSTEXPR PullResponse::PullResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PullResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PullResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PullResponseDefaultTypeInternal() {}
  union {
    PullResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PullResponseDefaultTypeInternal _PullResponse_default_instance_;
}  // namespace v1
}  // namespace event
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fevent_2fv1_2fevent_5fservice_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_city_2fevent_2fv1_2fevent_5fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_city_2fevent_2fv1_2fevent_5fservice_2eproto = nullptr;

const uint32_t TableStruct_city_2fevent_2fv1_2fevent_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::event::v1::PublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::event::v1::PublishRequest, _impl_.event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::event::v1::PublishResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::event::v1::PullRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::city::event::v1::PullResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::city::event::v1::PullResponse, _impl_.events_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::city::event::v1::PublishRequest)},
  { 7, -1, -1, sizeof(::city::event::v1::PublishResponse)},
  { 13, -1, -1, sizeof(::city::event::v1::PullRequest)},
  { 19, -1, -1, sizeof(::city::event::v1::PullResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::city::event::v1::_PublishRequest_default_instance_._instance,
  &::city::event::v1::_PublishResponse_default_instance_._instance,
  &::city::event::v1::_PullRequest_default_instance_._instance,
  &::city::event::v1::_PullResponse_default_instance_._instance,
};

const char descriptor_table_protodef_city_2fevent_2fv1_2fevent_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!city/event/v1/event_service.proto\022\rcit"
  "y.event.v1\032\031city/event/v1/event.proto\"<\n"
  "\016PublishRequest\022*\n\005event\030\001 \001(\0132\024.city.ev"
  "ent.v1.EventR\005event\"\021\n\017PublishResponse\"\r"
  "\n\013PullRequest\"<\n\014PullResponse\022,\n\006events\030"
  "\001 \003(\0132\024.city.event.v1.EventR\006events2\235\001\n\014"
  "EventService\022J\n\007Publish\022\035.city.event.v1."
  "PublishRequest\032\036.city.event.v1.PublishRe"
  "sponse\"\000\022A\n\004Pull\022\032.city.event.v1.PullReq"
  "uest\032\033.city.event.v1.PullResponse\"\000B\260\001\n\021"
  "com.city.event.v1B\021EventServiceProtoP\001Z2"
  "git.fiblab.net/sim/protos/go/city/event/"
  "v1;eventv1\242\002\003CEX\252\002\rCity.Event.V1\312\002\rCity\\"
  "Event\\V1\342\002\031City\\Event\\V1\\GPBMetadata\352\002\017C"
  "ity::Event::V1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto_deps[1] = {
  &::descriptor_table_city_2fevent_2fv1_2fevent_2eproto,
};
static ::_pbi::once_flag descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto = {
    false, false, 582, descriptor_table_protodef_city_2fevent_2fv1_2fevent_5fservice_2eproto,
    "city/event/v1/event_service.proto",
    &descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto_once, descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_city_2fevent_2fv1_2fevent_5fservice_2eproto::offsets,
    file_level_metadata_city_2fevent_2fv1_2fevent_5fservice_2eproto, file_level_enum_descriptors_city_2fevent_2fv1_2fevent_5fservice_2eproto,
    file_level_service_descriptors_city_2fevent_2fv1_2fevent_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto_getter() {
  return &descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fevent_2fv1_2fevent_5fservice_2eproto(&descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto);
namespace city {
namespace event {
namespace v1 {

// ===================================================================

class PublishRequest::_Internal {
 public:
  static const ::city::event::v1::Event& event(const PublishRequest* msg);
};

const ::city::event::v1::Event&
PublishRequest::_Internal::event(const PublishRequest* msg) {
  return *msg->_impl_.event_;
}
void PublishRequest::clear_event() {
  if (GetArenaForAllocation() == nullptr && _impl_.event_ != nullptr) {
    delete _impl_.event_;
  }
  _impl_.event_ = nullptr;
}
PublishRequest::PublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.event.v1.PublishRequest)
}
PublishRequest::PublishRequest(const PublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublishRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    _this->_impl_.event_ = new ::city::event::v1::Event(*from._impl_.event_);
  }
  // @@protoc_insertion_point(copy_constructor:city.event.v1.PublishRequest)
}

inline void PublishRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PublishRequest::~PublishRequest() {
  // @@protoc_insertion_point(destructor:city.event.v1.PublishRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.event_;
}

void PublishRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:city.event.v1.PublishRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.event_ != nullptr) {
    delete _impl_.event_;
  }
  _impl_.event_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublishRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .city.event.v1.Event event = 1 [json_name = "event"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PublishRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.event.v1.PublishRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .city.event.v1.Event event = 1 [json_name = "event"];
  if (this->_internal_has_event()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.event.v1.PublishRequest)
  return target;
}

size_t PublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.event.v1.PublishRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.event.v1.Event event = 1 [json_name = "event"];
  if (this->_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublishRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishRequest::GetClassData() const { return &_class_data_; }


void PublishRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublishRequest*>(&to_msg);
  auto& from = static_cast<const PublishRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.event.v1.PublishRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_event()) {
    _this->_internal_mutable_event()->::city::event::v1::Event::MergeFrom(
        from._internal_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublishRequest::CopyFrom(const PublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.event.v1.PublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishRequest::IsInitialized() const {
  return true;
}

void PublishRequest::InternalSwap(PublishRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.event_, other->_impl_.event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto_getter, &descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto_once,
      file_level_metadata_city_2fevent_2fv1_2fevent_5fservice_2eproto[0]);
}

// ===================================================================

class PublishResponse::_Internal {
 public:
};

PublishResponse::PublishResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.event.v1.PublishResponse)
}
PublishResponse::PublishResponse(const PublishResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PublishResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.event.v1.PublishResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublishResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublishResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PublishResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto_getter, &descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto_once,
      file_level_metadata_city_2fevent_2fv1_2fevent_5fservice_2eproto[1]);
}

// ===================================================================

class PullRequest::_Internal {
 public:
};

PullRequest::PullRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:city.event.v1.PullRequest)
}
PullRequest::PullRequest(const PullRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PullRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.event.v1.PullRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PullRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PullRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PullRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto_getter, &descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto_once,
      file_level_metadata_city_2fevent_2fv1_2fevent_5fservice_2eproto[2]);
}

// ===================================================================

class PullResponse::_Internal {
 public:
};

void PullResponse::clear_events() {
  _impl_.events_.Clear();
}
PullResponse::PullResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:city.event.v1.PullResponse)
}
PullResponse::PullResponse(const PullResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PullResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.event.v1.PullResponse)
}

inline void PullResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PullResponse::~PullResponse() {
  // @@protoc_insertion_point(destructor:city.event.v1.PullResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PullResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
}

void PullResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PullResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:city.event.v1.PullResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PullResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .city.event.v1.Event events = 1 [json_name = "events"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PullResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.event.v1.PullResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .city.event.v1.Event events = 1 [json_name = "events"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.event.v1.PullResponse)
  return target;
}

size_t PullResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.event.v1.PullResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .city.event.v1.Event events = 1 [json_name = "events"];
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PullResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PullResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PullResponse::GetClassData() const { return &_class_data_; }


void PullResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PullResponse*>(&to_msg);
  auto& from = static_cast<const PullResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.event.v1.PullResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PullResponse::CopyFrom(const PullResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.event.v1.PullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullResponse::IsInitialized() const {
  return true;
}

void PullResponse::InternalSwap(PullResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PullResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto_getter, &descriptor_table_city_2fevent_2fv1_2fevent_5fservice_2eproto_once,
      file_level_metadata_city_2fevent_2fv1_2fevent_5fservice_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace event
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::city::event::v1::PublishRequest*
Arena::CreateMaybeMessage< ::city::event::v1::PublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::event::v1::PublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::event::v1::PublishResponse*
Arena::CreateMaybeMessage< ::city::event::v1::PublishResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::event::v1::PublishResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::city::event::v1::PullRequest*
Arena::CreateMaybeMessage< ::city::event::v1::PullRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::event::v1::PullRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::city::event::v1::PullResponse*
Arena::CreateMaybeMessage< ::city::event::v1::PullResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::city::event::v1::PullResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
