// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/event/v1/event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fevent_2fv1_2fevent_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_city_2fevent_2fv1_2fevent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_city_2fevent_2fv1_2fevent_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fevent_2fv1_2fevent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_city_2fevent_2fv1_2fevent_2eproto;
namespace city {
namespace event {
namespace v1 {
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Events;
struct EventsDefaultTypeInternal;
extern EventsDefaultTypeInternal _Events_default_instance_;
}  // namespace v1
}  // namespace event
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace city {
namespace event {
namespace v1 {
enum EventType : int {
  EVENT_TYPE_UNSPECIFIED = 0,
  EVENT_TYPE_HEAVY_RAIN = 1,
  EVENT_TYPE_MILITARY_STRIKE = 2,
  EVENT_TYPE_TRAFFIC_CONGESTION = 3,
  EVENT_TYPE_TRAFFIC_LANE_RESTRICTION = 4,
  EVENT_TYPE_TRAFFIC_BAD_LIGHT = 5,
  EVENT_TYPE_ELEC_RUINED_TRANSFORMER = 6,
  EVENT_TYPE_WATER_RUINED_PUMP = 7,
  EVENT_TYPE_WATER_STOPPED_PUMP = 8,
  EVENT_TYPE_COMM_RUINED_BASE_STATION = 9,
  EVENT_TYPE_COMM_STOPPED_BASE_STATION = 10,
  EVENT_TYPE_COMM_OVERLOAD_BASE_STATION = 11,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EventType_IsValid(int value);
constexpr EventType EventType_MIN = static_cast<EventType>(0);
constexpr EventType EventType_MAX = static_cast<EventType>(11);
constexpr int EventType_ARRAYSIZE = 11 + 1;
const ::google::protobuf::EnumDescriptor*
EventType_descriptor();
template <typename T>
const std::string& EventType_Name(T value) {
  static_assert(std::is_same<T, EventType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EventType_Name().");
  return EventType_Name(static_cast<EventType>(value));
}
template <>
inline const std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EventType_descriptor,
                                                 0, 11>(
      static_cast<int>(value));
}
inline bool EventType_Parse(absl::string_view name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
      EventType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Event final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.event.v1.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Event(::google::protobuf::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Event& from) {
    Event::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.event.v1.Event";
  }
  protected:
  explicit Event(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kLevelFieldNumber = 2,
    kStepFieldNumber = 3,
  };
  // .city.event.v1.EventType type = 1 [json_name = "type"];
  void clear_type() ;
  ::city::event::v1::EventType type() const;
  void set_type(::city::event::v1::EventType value);

  private:
  ::city::event::v1::EventType _internal_type() const;
  void _internal_set_type(::city::event::v1::EventType value);

  public:
  // int32 level = 2 [json_name = "level"];
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // int32 step = 3 [json_name = "step"];
  void clear_step() ;
  ::int32_t step() const;
  void set_step(::int32_t value);

  private:
  ::int32_t _internal_step() const;
  void _internal_set_step(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:city.event.v1.Event)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    ::int32_t level_;
    ::int32_t step_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fevent_2fv1_2fevent_2eproto;
};// -------------------------------------------------------------------

class Events final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.event.v1.Events) */ {
 public:
  inline Events() : Events(nullptr) {}
  ~Events() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Events(::google::protobuf::internal::ConstantInitialized);

  Events(const Events& from);
  Events(Events&& from) noexcept
    : Events() {
    *this = ::std::move(from);
  }

  inline Events& operator=(const Events& from) {
    CopyFrom(from);
    return *this;
  }
  inline Events& operator=(Events&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Events& default_instance() {
    return *internal_default_instance();
  }
  static inline const Events* internal_default_instance() {
    return reinterpret_cast<const Events*>(
               &_Events_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Events& a, Events& b) {
    a.Swap(&b);
  }
  inline void Swap(Events* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Events* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Events* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Events>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Events& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Events& from) {
    Events::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Events* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.event.v1.Events";
  }
  protected:
  explicit Events(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .city.event.v1.Event events = 1 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::city::event::v1::Event* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField< ::city::event::v1::Event >*
      mutable_events();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::event::v1::Event>& _internal_events() const;
  ::google::protobuf::RepeatedPtrField<::city::event::v1::Event>* _internal_mutable_events();
  public:
  const ::city::event::v1::Event& events(int index) const;
  ::city::event::v1::Event* add_events();
  const ::google::protobuf::RepeatedPtrField< ::city::event::v1::Event >&
      events() const;
  // @@protoc_insertion_point(class_scope:city.event.v1.Events)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::city::event::v1::Event > events_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fevent_2fv1_2fevent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Event

// .city.event.v1.EventType type = 1 [json_name = "type"];
inline void Event::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::event::v1::EventType Event::type() const {
  // @@protoc_insertion_point(field_get:city.event.v1.Event.type)
  return _internal_type();
}
inline void Event::set_type(::city::event::v1::EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.event.v1.Event.type)
}
inline ::city::event::v1::EventType Event::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::city::event::v1::EventType>(_impl_.type_);
}
inline void Event::_internal_set_type(::city::event::v1::EventType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// int32 level = 2 [json_name = "level"];
inline void Event::clear_level() {
  _impl_.level_ = 0;
}
inline ::int32_t Event::level() const {
  // @@protoc_insertion_point(field_get:city.event.v1.Event.level)
  return _internal_level();
}
inline void Event::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:city.event.v1.Event.level)
}
inline ::int32_t Event::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_;
}
inline void Event::_internal_set_level(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_ = value;
}

// int32 step = 3 [json_name = "step"];
inline void Event::clear_step() {
  _impl_.step_ = 0;
}
inline ::int32_t Event::step() const {
  // @@protoc_insertion_point(field_get:city.event.v1.Event.step)
  return _internal_step();
}
inline void Event::set_step(::int32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:city.event.v1.Event.step)
}
inline ::int32_t Event::_internal_step() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.step_;
}
inline void Event::_internal_set_step(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.step_ = value;
}

// -------------------------------------------------------------------

// Events

// repeated .city.event.v1.Event events = 1 [json_name = "events"];
inline int Events::_internal_events_size() const {
  return _internal_events().size();
}
inline int Events::events_size() const {
  return _internal_events_size();
}
inline void Events::clear_events() {
  _internal_mutable_events()->Clear();
}
inline ::city::event::v1::Event* Events::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:city.event.v1.Events.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::event::v1::Event >*
Events::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:city.event.v1.Events.events)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_events();
}
inline const ::city::event::v1::Event& Events::events(int index) const {
  // @@protoc_insertion_point(field_get:city.event.v1.Events.events)
    return _internal_events().Get(index);
}
inline ::city::event::v1::Event* Events::add_events() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::event::v1::Event* _add = _internal_mutable_events()->Add();
  // @@protoc_insertion_point(field_add:city.event.v1.Events.events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::event::v1::Event >&
Events::events() const {
  // @@protoc_insertion_point(field_list:city.event.v1.Events.events)
  return _internal_events();
}
inline const ::google::protobuf::RepeatedPtrField<::city::event::v1::Event>&
Events::_internal_events() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.events_;
}
inline ::google::protobuf::RepeatedPtrField<::city::event::v1::Event>*
Events::_internal_mutable_events() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.events_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace event
}  // namespace city


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::city::event::v1::EventType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::city::event::v1::EventType>() {
  return ::city::event::v1::EventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_city_2fevent_2fv1_2fevent_2eproto_2epb_2eh
