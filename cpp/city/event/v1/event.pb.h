// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/event/v1/event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fevent_2fv1_2fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fevent_2fv1_2fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fevent_2fv1_2fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fevent_2fv1_2fevent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fevent_2fv1_2fevent_2eproto;
namespace city {
namespace event {
namespace v1 {
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Events;
struct EventsDefaultTypeInternal;
extern EventsDefaultTypeInternal _Events_default_instance_;
}  // namespace v1
}  // namespace event
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::event::v1::Event* Arena::CreateMaybeMessage<::city::event::v1::Event>(Arena*);
template<> ::city::event::v1::Events* Arena::CreateMaybeMessage<::city::event::v1::Events>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace event {
namespace v1 {

enum EventType : int {
  EVENT_TYPE_UNSPECIFIED = 0,
  EVENT_TYPE_HEAVY_RAIN = 1,
  EVENT_TYPE_MILITARY_STRIKE = 2,
  EVENT_TYPE_TRAFFIC_CONGESTION = 3,
  EVENT_TYPE_TRAFFIC_LANE_RESTRICTION = 4,
  EVENT_TYPE_TRAFFIC_BAD_LIGHT = 5,
  EVENT_TYPE_ELEC_RUINED_TRANSFORMER = 6,
  EVENT_TYPE_WATER_RUINED_PUMP = 7,
  EVENT_TYPE_WATER_STOPPED_PUMP = 8,
  EVENT_TYPE_COMM_RUINED_BASE_STATION = 9,
  EVENT_TYPE_COMM_STOPPED_BASE_STATION = 10,
  EVENT_TYPE_COMM_OVERLOAD_BASE_STATION = 11,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EventType_IsValid(int value);
constexpr EventType EventType_MIN = EVENT_TYPE_UNSPECIFIED;
constexpr EventType EventType_MAX = EVENT_TYPE_COMM_OVERLOAD_BASE_STATION;
constexpr int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor();
template<typename T>
inline const std::string& EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventType_descriptor(), enum_t_value);
}
inline bool EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.event.v1.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  explicit PROTOBUF_CONSTEXPR Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Event& from) {
    Event::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.event.v1.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kLevelFieldNumber = 2,
    kStepFieldNumber = 3,
  };
  // .city.event.v1.EventType type = 1 [json_name = "type"];
  void clear_type();
  ::city::event::v1::EventType type() const;
  void set_type(::city::event::v1::EventType value);
  private:
  ::city::event::v1::EventType _internal_type() const;
  void _internal_set_type(::city::event::v1::EventType value);
  public:

  // int32 level = 2 [json_name = "level"];
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 step = 3 [json_name = "step"];
  void clear_step();
  int32_t step() const;
  void set_step(int32_t value);
  private:
  int32_t _internal_step() const;
  void _internal_set_step(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.event.v1.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    int32_t level_;
    int32_t step_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fevent_2fv1_2fevent_2eproto;
};
// -------------------------------------------------------------------

class Events final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.event.v1.Events) */ {
 public:
  inline Events() : Events(nullptr) {}
  ~Events() override;
  explicit PROTOBUF_CONSTEXPR Events(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Events(const Events& from);
  Events(Events&& from) noexcept
    : Events() {
    *this = ::std::move(from);
  }

  inline Events& operator=(const Events& from) {
    CopyFrom(from);
    return *this;
  }
  inline Events& operator=(Events&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Events& default_instance() {
    return *internal_default_instance();
  }
  static inline const Events* internal_default_instance() {
    return reinterpret_cast<const Events*>(
               &_Events_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Events& a, Events& b) {
    a.Swap(&b);
  }
  inline void Swap(Events* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Events* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Events* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Events>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Events& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Events& from) {
    Events::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Events* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.event.v1.Events";
  }
  protected:
  explicit Events(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .city.event.v1.Event events = 1 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::city::event::v1::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::event::v1::Event >*
      mutable_events();
  private:
  const ::city::event::v1::Event& _internal_events(int index) const;
  ::city::event::v1::Event* _internal_add_events();
  public:
  const ::city::event::v1::Event& events(int index) const;
  ::city::event::v1::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::event::v1::Event >&
      events() const;

  // @@protoc_insertion_point(class_scope:city.event.v1.Events)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::event::v1::Event > events_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fevent_2fv1_2fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event

// .city.event.v1.EventType type = 1 [json_name = "type"];
inline void Event::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::event::v1::EventType Event::_internal_type() const {
  return static_cast< ::city::event::v1::EventType >(_impl_.type_);
}
inline ::city::event::v1::EventType Event::type() const {
  // @@protoc_insertion_point(field_get:city.event.v1.Event.type)
  return _internal_type();
}
inline void Event::_internal_set_type(::city::event::v1::EventType value) {
  
  _impl_.type_ = value;
}
inline void Event::set_type(::city::event::v1::EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.event.v1.Event.type)
}

// int32 level = 2 [json_name = "level"];
inline void Event::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t Event::_internal_level() const {
  return _impl_.level_;
}
inline int32_t Event::level() const {
  // @@protoc_insertion_point(field_get:city.event.v1.Event.level)
  return _internal_level();
}
inline void Event::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void Event::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:city.event.v1.Event.level)
}

// int32 step = 3 [json_name = "step"];
inline void Event::clear_step() {
  _impl_.step_ = 0;
}
inline int32_t Event::_internal_step() const {
  return _impl_.step_;
}
inline int32_t Event::step() const {
  // @@protoc_insertion_point(field_get:city.event.v1.Event.step)
  return _internal_step();
}
inline void Event::_internal_set_step(int32_t value) {
  
  _impl_.step_ = value;
}
inline void Event::set_step(int32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:city.event.v1.Event.step)
}

// -------------------------------------------------------------------

// Events

// repeated .city.event.v1.Event events = 1 [json_name = "events"];
inline int Events::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int Events::events_size() const {
  return _internal_events_size();
}
inline void Events::clear_events() {
  _impl_.events_.Clear();
}
inline ::city::event::v1::Event* Events::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:city.event.v1.Events.events)
  return _impl_.events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::event::v1::Event >*
Events::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:city.event.v1.Events.events)
  return &_impl_.events_;
}
inline const ::city::event::v1::Event& Events::_internal_events(int index) const {
  return _impl_.events_.Get(index);
}
inline const ::city::event::v1::Event& Events::events(int index) const {
  // @@protoc_insertion_point(field_get:city.event.v1.Events.events)
  return _internal_events(index);
}
inline ::city::event::v1::Event* Events::_internal_add_events() {
  return _impl_.events_.Add();
}
inline ::city::event::v1::Event* Events::add_events() {
  ::city::event::v1::Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:city.event.v1.Events.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::event::v1::Event >&
Events::events() const {
  // @@protoc_insertion_point(field_list:city.event.v1.Events.events)
  return _impl_.events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace event
}  // namespace city

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::city::event::v1::EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::event::v1::EventType>() {
  return ::city::event::v1::EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fevent_2fv1_2fevent_2eproto
