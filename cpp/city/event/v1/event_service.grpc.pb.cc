// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/event/v1/event_service.proto

#include "city/event/v1/event_service.pb.h"
#include "city/event/v1/event_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace city {
namespace event {
namespace v1 {

static const char* EventService_method_names[] = {
  "/city.event.v1.EventService/Publish",
  "/city.event.v1.EventService/Pull",
};

std::unique_ptr< EventService::Stub> EventService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EventService::Stub> stub(new EventService::Stub(channel, options));
  return stub;
}

EventService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Publish_(EventService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Pull_(EventService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EventService::Stub::Publish(::grpc::ClientContext* context, const ::city::event::v1::PublishRequest& request, ::city::event::v1::PublishResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::event::v1::PublishRequest, ::city::event::v1::PublishResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Publish_, context, request, response);
}

void EventService::Stub::async::Publish(::grpc::ClientContext* context, const ::city::event::v1::PublishRequest* request, ::city::event::v1::PublishResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::event::v1::PublishRequest, ::city::event::v1::PublishResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, request, response, std::move(f));
}

void EventService::Stub::async::Publish(::grpc::ClientContext* context, const ::city::event::v1::PublishRequest* request, ::city::event::v1::PublishResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Publish_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::event::v1::PublishResponse>* EventService::Stub::PrepareAsyncPublishRaw(::grpc::ClientContext* context, const ::city::event::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::event::v1::PublishResponse, ::city::event::v1::PublishRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Publish_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::event::v1::PublishResponse>* EventService::Stub::AsyncPublishRaw(::grpc::ClientContext* context, const ::city::event::v1::PublishRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPublishRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EventService::Stub::Pull(::grpc::ClientContext* context, const ::city::event::v1::PullRequest& request, ::city::event::v1::PullResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::city::event::v1::PullRequest, ::city::event::v1::PullResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Pull_, context, request, response);
}

void EventService::Stub::async::Pull(::grpc::ClientContext* context, const ::city::event::v1::PullRequest* request, ::city::event::v1::PullResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::city::event::v1::PullRequest, ::city::event::v1::PullResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pull_, context, request, response, std::move(f));
}

void EventService::Stub::async::Pull(::grpc::ClientContext* context, const ::city::event::v1::PullRequest* request, ::city::event::v1::PullResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Pull_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::city::event::v1::PullResponse>* EventService::Stub::PrepareAsyncPullRaw(::grpc::ClientContext* context, const ::city::event::v1::PullRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::city::event::v1::PullResponse, ::city::event::v1::PullRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Pull_, context, request);
}

::grpc::ClientAsyncResponseReader< ::city::event::v1::PullResponse>* EventService::Stub::AsyncPullRaw(::grpc::ClientContext* context, const ::city::event::v1::PullRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPullRaw(context, request, cq);
  result->StartCall();
  return result;
}

EventService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventService::Service, ::city::event::v1::PublishRequest, ::city::event::v1::PublishResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EventService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::event::v1::PublishRequest* req,
             ::city::event::v1::PublishResponse* resp) {
               return service->Publish(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EventService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EventService::Service, ::city::event::v1::PullRequest, ::city::event::v1::PullResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EventService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::city::event::v1::PullRequest* req,
             ::city::event::v1::PullResponse* resp) {
               return service->Pull(ctx, req, resp);
             }, this)));
}

EventService::Service::~Service() {
}

::grpc::Status EventService::Service::Publish(::grpc::ServerContext* context, const ::city::event::v1::PublishRequest* request, ::city::event::v1::PublishResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EventService::Service::Pull(::grpc::ServerContext* context, const ::city::event::v1::PullRequest* request, ::city::event::v1::PullResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace city
}  // namespace event
}  // namespace v1

