// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/event/v2/event_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fevent_2fv2_2fevent_5fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_city_2fevent_2fv2_2fevent_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "city/event/v2/event.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_city_2fevent_2fv2_2fevent_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fevent_2fv2_2fevent_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_city_2fevent_2fv2_2fevent_5fservice_2eproto;
namespace city {
namespace event {
namespace v2 {
class GetEventsByTopicRequest;
struct GetEventsByTopicRequestDefaultTypeInternal;
extern GetEventsByTopicRequestDefaultTypeInternal _GetEventsByTopicRequest_default_instance_;
class GetEventsByTopicResponse;
struct GetEventsByTopicResponseDefaultTypeInternal;
extern GetEventsByTopicResponseDefaultTypeInternal _GetEventsByTopicResponse_default_instance_;
class ResolveEventsRequest;
struct ResolveEventsRequestDefaultTypeInternal;
extern ResolveEventsRequestDefaultTypeInternal _ResolveEventsRequest_default_instance_;
class ResolveEventsResponse;
struct ResolveEventsResponseDefaultTypeInternal;
extern ResolveEventsResponseDefaultTypeInternal _ResolveEventsResponse_default_instance_;
}  // namespace v2
}  // namespace event
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace city {
namespace event {
namespace v2 {

// ===================================================================


// -------------------------------------------------------------------

class GetEventsByTopicRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.event.v2.GetEventsByTopicRequest) */ {
 public:
  inline GetEventsByTopicRequest() : GetEventsByTopicRequest(nullptr) {}
  ~GetEventsByTopicRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetEventsByTopicRequest(::google::protobuf::internal::ConstantInitialized);

  GetEventsByTopicRequest(const GetEventsByTopicRequest& from);
  GetEventsByTopicRequest(GetEventsByTopicRequest&& from) noexcept
    : GetEventsByTopicRequest() {
    *this = ::std::move(from);
  }

  inline GetEventsByTopicRequest& operator=(const GetEventsByTopicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEventsByTopicRequest& operator=(GetEventsByTopicRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEventsByTopicRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEventsByTopicRequest* internal_default_instance() {
    return reinterpret_cast<const GetEventsByTopicRequest*>(
               &_GetEventsByTopicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetEventsByTopicRequest& a, GetEventsByTopicRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEventsByTopicRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEventsByTopicRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEventsByTopicRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEventsByTopicRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetEventsByTopicRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetEventsByTopicRequest& from) {
    GetEventsByTopicRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEventsByTopicRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.event.v2.GetEventsByTopicRequest";
  }
  protected:
  explicit GetEventsByTopicRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
  };
  // string topic = 1 [json_name = "topic"];
  void clear_topic() ;
  const std::string& topic() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_topic(Arg_&& arg, Args_... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* ptr);

  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(
      const std::string& value);
  std::string* _internal_mutable_topic();

  public:
  // @@protoc_insertion_point(class_scope:city.event.v2.GetEventsByTopicRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 51, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::ArenaStringPtr topic_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fevent_2fv2_2fevent_5fservice_2eproto;
};// -------------------------------------------------------------------

class GetEventsByTopicResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.event.v2.GetEventsByTopicResponse) */ {
 public:
  inline GetEventsByTopicResponse() : GetEventsByTopicResponse(nullptr) {}
  ~GetEventsByTopicResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetEventsByTopicResponse(::google::protobuf::internal::ConstantInitialized);

  GetEventsByTopicResponse(const GetEventsByTopicResponse& from);
  GetEventsByTopicResponse(GetEventsByTopicResponse&& from) noexcept
    : GetEventsByTopicResponse() {
    *this = ::std::move(from);
  }

  inline GetEventsByTopicResponse& operator=(const GetEventsByTopicResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEventsByTopicResponse& operator=(GetEventsByTopicResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEventsByTopicResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEventsByTopicResponse* internal_default_instance() {
    return reinterpret_cast<const GetEventsByTopicResponse*>(
               &_GetEventsByTopicResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetEventsByTopicResponse& a, GetEventsByTopicResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEventsByTopicResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEventsByTopicResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEventsByTopicResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEventsByTopicResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetEventsByTopicResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetEventsByTopicResponse& from) {
    GetEventsByTopicResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEventsByTopicResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.event.v2.GetEventsByTopicResponse";
  }
  protected:
  explicit GetEventsByTopicResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .city.event.v2.Event events = 1 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::city::event::v2::Event* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField< ::city::event::v2::Event >*
      mutable_events();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::event::v2::Event>& _internal_events() const;
  ::google::protobuf::RepeatedPtrField<::city::event::v2::Event>* _internal_mutable_events();
  public:
  const ::city::event::v2::Event& events(int index) const;
  ::city::event::v2::Event* add_events();
  const ::google::protobuf::RepeatedPtrField< ::city::event::v2::Event >&
      events() const;
  // @@protoc_insertion_point(class_scope:city.event.v2.GetEventsByTopicResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::city::event::v2::Event > events_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fevent_2fv2_2fevent_5fservice_2eproto;
};// -------------------------------------------------------------------

class ResolveEventsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.event.v2.ResolveEventsRequest) */ {
 public:
  inline ResolveEventsRequest() : ResolveEventsRequest(nullptr) {}
  ~ResolveEventsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResolveEventsRequest(::google::protobuf::internal::ConstantInitialized);

  ResolveEventsRequest(const ResolveEventsRequest& from);
  ResolveEventsRequest(ResolveEventsRequest&& from) noexcept
    : ResolveEventsRequest() {
    *this = ::std::move(from);
  }

  inline ResolveEventsRequest& operator=(const ResolveEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveEventsRequest& operator=(ResolveEventsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResolveEventsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResolveEventsRequest* internal_default_instance() {
    return reinterpret_cast<const ResolveEventsRequest*>(
               &_ResolveEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResolveEventsRequest& a, ResolveEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveEventsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveEventsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResolveEventsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResolveEventsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ResolveEventsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ResolveEventsRequest& from) {
    ResolveEventsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveEventsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.event.v2.ResolveEventsRequest";
  }
  protected:
  explicit ResolveEventsRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .city.event.v2.Event events = 1 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::city::event::v2::Event* mutable_events(int index);
  ::google::protobuf::RepeatedPtrField< ::city::event::v2::Event >*
      mutable_events();
  private:
  const ::google::protobuf::RepeatedPtrField<::city::event::v2::Event>& _internal_events() const;
  ::google::protobuf::RepeatedPtrField<::city::event::v2::Event>* _internal_mutable_events();
  public:
  const ::city::event::v2::Event& events(int index) const;
  ::city::event::v2::Event* add_events();
  const ::google::protobuf::RepeatedPtrField< ::city::event::v2::Event >&
      events() const;
  // @@protoc_insertion_point(class_scope:city.event.v2.ResolveEventsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField< ::city::event::v2::Event > events_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fevent_2fv2_2fevent_5fservice_2eproto;
};// -------------------------------------------------------------------

class ResolveEventsResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.event.v2.ResolveEventsResponse) */ {
 public:
  inline ResolveEventsResponse() : ResolveEventsResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResolveEventsResponse(::google::protobuf::internal::ConstantInitialized);

  ResolveEventsResponse(const ResolveEventsResponse& from);
  ResolveEventsResponse(ResolveEventsResponse&& from) noexcept
    : ResolveEventsResponse() {
    *this = ::std::move(from);
  }

  inline ResolveEventsResponse& operator=(const ResolveEventsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveEventsResponse& operator=(ResolveEventsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResolveEventsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResolveEventsResponse* internal_default_instance() {
    return reinterpret_cast<const ResolveEventsResponse*>(
               &_ResolveEventsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResolveEventsResponse& a, ResolveEventsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveEventsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveEventsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResolveEventsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResolveEventsResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResolveEventsResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResolveEventsResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.event.v2.ResolveEventsResponse";
  }
  protected:
  explicit ResolveEventsResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.event.v2.ResolveEventsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_city_2fevent_2fv2_2fevent_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetEventsByTopicRequest

// string topic = 1 [json_name = "topic"];
inline void GetEventsByTopicRequest::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& GetEventsByTopicRequest::topic() const {
  // @@protoc_insertion_point(field_get:city.event.v2.GetEventsByTopicRequest.topic)
  return _internal_topic();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetEventsByTopicRequest::set_topic(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.event.v2.GetEventsByTopicRequest.topic)
}
inline std::string* GetEventsByTopicRequest::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:city.event.v2.GetEventsByTopicRequest.topic)
  return _s;
}
inline const std::string& GetEventsByTopicRequest::_internal_topic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.topic_.Get();
}
inline void GetEventsByTopicRequest::_internal_set_topic(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEventsByTopicRequest::_internal_mutable_topic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.topic_.Mutable( GetArenaForAllocation());
}
inline std::string* GetEventsByTopicRequest::release_topic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.event.v2.GetEventsByTopicRequest.topic)
  return _impl_.topic_.Release();
}
inline void GetEventsByTopicRequest::set_allocated_topic(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.topic_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.topic_.IsDefault()) {
          _impl_.topic_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.event.v2.GetEventsByTopicRequest.topic)
}

// -------------------------------------------------------------------

// GetEventsByTopicResponse

// repeated .city.event.v2.Event events = 1 [json_name = "events"];
inline int GetEventsByTopicResponse::_internal_events_size() const {
  return _internal_events().size();
}
inline int GetEventsByTopicResponse::events_size() const {
  return _internal_events_size();
}
inline ::city::event::v2::Event* GetEventsByTopicResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:city.event.v2.GetEventsByTopicResponse.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::event::v2::Event >*
GetEventsByTopicResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:city.event.v2.GetEventsByTopicResponse.events)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_events();
}
inline const ::city::event::v2::Event& GetEventsByTopicResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:city.event.v2.GetEventsByTopicResponse.events)
    return _internal_events().Get(index);
}
inline ::city::event::v2::Event* GetEventsByTopicResponse::add_events() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::event::v2::Event* _add = _internal_mutable_events()->Add();
  // @@protoc_insertion_point(field_add:city.event.v2.GetEventsByTopicResponse.events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::event::v2::Event >&
GetEventsByTopicResponse::events() const {
  // @@protoc_insertion_point(field_list:city.event.v2.GetEventsByTopicResponse.events)
  return _internal_events();
}
inline const ::google::protobuf::RepeatedPtrField<::city::event::v2::Event>&
GetEventsByTopicResponse::_internal_events() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.events_;
}
inline ::google::protobuf::RepeatedPtrField<::city::event::v2::Event>*
GetEventsByTopicResponse::_internal_mutable_events() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.events_;
}

// -------------------------------------------------------------------

// ResolveEventsRequest

// repeated .city.event.v2.Event events = 1 [json_name = "events"];
inline int ResolveEventsRequest::_internal_events_size() const {
  return _internal_events().size();
}
inline int ResolveEventsRequest::events_size() const {
  return _internal_events_size();
}
inline ::city::event::v2::Event* ResolveEventsRequest::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:city.event.v2.ResolveEventsRequest.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::city::event::v2::Event >*
ResolveEventsRequest::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:city.event.v2.ResolveEventsRequest.events)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_events();
}
inline const ::city::event::v2::Event& ResolveEventsRequest::events(int index) const {
  // @@protoc_insertion_point(field_get:city.event.v2.ResolveEventsRequest.events)
    return _internal_events().Get(index);
}
inline ::city::event::v2::Event* ResolveEventsRequest::add_events() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::city::event::v2::Event* _add = _internal_mutable_events()->Add();
  // @@protoc_insertion_point(field_add:city.event.v2.ResolveEventsRequest.events)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::city::event::v2::Event >&
ResolveEventsRequest::events() const {
  // @@protoc_insertion_point(field_list:city.event.v2.ResolveEventsRequest.events)
  return _internal_events();
}
inline const ::google::protobuf::RepeatedPtrField<::city::event::v2::Event>&
ResolveEventsRequest::_internal_events() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.events_;
}
inline ::google::protobuf::RepeatedPtrField<::city::event::v2::Event>*
ResolveEventsRequest::_internal_mutable_events() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.events_;
}

// -------------------------------------------------------------------

// ResolveEventsResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace event
}  // namespace city


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_city_2fevent_2fv2_2fevent_5fservice_2eproto_2epb_2eh
