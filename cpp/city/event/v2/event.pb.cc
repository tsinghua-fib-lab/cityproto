// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/event/v2/event.proto

#include "city/event/v2/event.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace city {
namespace event {
namespace v2 {
        template <typename>
PROTOBUF_CONSTEXPR Entity::Entity(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.type_)*/ 0,
      /*decltype(_impl_.id_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct EntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityDefaultTypeInternal() {}
  union {
    Entity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityDefaultTypeInternal _Entity_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR Event::Event(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.topic_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.content_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.subject_)*/ nullptr,
      /*decltype(_impl_.position_)*/ nullptr,
      /*decltype(_impl_.t_)*/ 0,
      /*decltype(_impl_.id_)*/ 0,
    } {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
}  // namespace v2
}  // namespace event
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2fevent_2fv2_2fevent_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_city_2fevent_2fv2_2fevent_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_city_2fevent_2fv2_2fevent_2eproto = nullptr;
const ::uint32_t TableStruct_city_2fevent_2fv2_2fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::city::event::v2::Entity, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::city::event::v2::Entity, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::city::event::v2::Entity, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::city::event::v2::Event, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::city::event::v2::Event, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::city::event::v2::Event, _impl_.topic_),
    PROTOBUF_FIELD_OFFSET(::city::event::v2::Event, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::city::event::v2::Event, _impl_.subject_),
    PROTOBUF_FIELD_OFFSET(::city::event::v2::Event, _impl_.content_),
    PROTOBUF_FIELD_OFFSET(::city::event::v2::Event, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::city::event::v2::Event, _impl_.t_),
    ~0u,
    ~0u,
    0,
    ~0u,
    1,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::city::event::v2::Entity)},
        {10, 24, -1, sizeof(::city::event::v2::Event)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::city::event::v2::_Entity_default_instance_._instance,
    &::city::event::v2::_Event_default_instance_._instance,
};
const char descriptor_table_protodef_city_2fevent_2fv2_2fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\031city/event/v2/event.proto\022\rcity.event."
    "v2\032\025city/geo/v2/geo.proto\"G\n\006Entity\022-\n\004t"
    "ype\030\001 \001(\0162\031.city.event.v2.EntityTypeR\004ty"
    "pe\022\016\n\002id\030\002 \001(\005R\002id\"\271\001\n\005Event\022\024\n\005topic\030\001 "
    "\001(\tR\005topic\022\016\n\002id\030\002 \001(\005R\002id\022/\n\007subject\030\003 "
    "\001(\0132\025.city.event.v2.EntityR\007subject\022\030\n\007c"
    "ontent\030\004 \001(\tR\007content\0221\n\010position\030\005 \001(\0132"
    "\025.city.geo.v2.PositionR\010position\022\014\n\001t\030\006 "
    "\001(\001R\001t*\306\001\n\nEntityType\022\033\n\027ENTITY_TYPE_UNS"
    "PECIFIED\020\000\022\024\n\020ENTITY_TYPE_LANE\020\001\022\024\n\020ENTI"
    "TY_TYPE_ROAD\020\002\022\030\n\024ENTITY_TYPE_JUNCTION\020\003"
    "\022\023\n\017ENTITY_TYPE_AOI\020\004\022\023\n\017ENTITY_TYPE_POI"
    "\020\005\022\026\n\022ENTITY_TYPE_PERSON\020\006\022\023\n\017ENTITY_TYP"
    "E_ORG\020\007B\251\001\n\021com.city.event.v2B\nEventProt"
    "oP\001Z2git.fiblab.net/sim/protos/go/city/e"
    "vent/v2;eventv2\242\002\003CEX\252\002\rCity.Event.V2\312\002\r"
    "City\\Event\\V2\342\002\031City\\Event\\V2\\GPBMetadat"
    "a\352\002\017City::Event::V2b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_city_2fevent_2fv2_2fevent_2eproto_deps[1] =
    {
        &::descriptor_table_city_2fgeo_2fv2_2fgeo_2eproto,
};
static ::absl::once_flag descriptor_table_city_2fevent_2fv2_2fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2fevent_2fv2_2fevent_2eproto = {
    false,
    false,
    707,
    descriptor_table_protodef_city_2fevent_2fv2_2fevent_2eproto,
    "city/event/v2/event.proto",
    &descriptor_table_city_2fevent_2fv2_2fevent_2eproto_once,
    descriptor_table_city_2fevent_2fv2_2fevent_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_city_2fevent_2fv2_2fevent_2eproto::offsets,
    file_level_metadata_city_2fevent_2fv2_2fevent_2eproto,
    file_level_enum_descriptors_city_2fevent_2fv2_2fevent_2eproto,
    file_level_service_descriptors_city_2fevent_2fv2_2fevent_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2fevent_2fv2_2fevent_2eproto_getter() {
  return &descriptor_table_city_2fevent_2fv2_2fevent_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2fevent_2fv2_2fevent_2eproto(&descriptor_table_city_2fevent_2fv2_2fevent_2eproto);
namespace city {
namespace event {
namespace v2 {
const ::google::protobuf::EnumDescriptor* EntityType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_city_2fevent_2fv2_2fevent_2eproto);
  return file_level_enum_descriptors_city_2fevent_2fv2_2fevent_2eproto[0];
}
bool EntityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class Entity::_Internal {
 public:
};

Entity::Entity(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:city.event.v2.Entity)
}
Entity::Entity(const Entity& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.event.v2.Entity)
}
inline void Entity::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0},
      decltype(_impl_.id_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
Entity::~Entity() {
  // @@protoc_insertion_point(destructor:city.event.v2.Entity)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Entity::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Entity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:city.event.v2.Entity)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Entity::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Entity::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Entity_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 id = 2 [json_name = "id"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Entity, _impl_.id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Entity, _impl_.id_)}},
    // .city.event.v2.EntityType type = 1 [json_name = "type"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Entity, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Entity, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .city.event.v2.EntityType type = 1 [json_name = "type"];
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 id = 2 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(Entity, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Entity::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.event.v2.Entity)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .city.event.v2.EntityType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // int32 id = 2 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.event.v2.Entity)
  return target;
}

::size_t Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.event.v2.Entity)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .city.event.v2.EntityType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 id = 2 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Entity::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Entity::MergeImpl
};
const ::google::protobuf::Message::ClassData*Entity::GetClassData() const { return &_class_data_; }


void Entity::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Entity*>(&to_msg);
  auto& from = static_cast<const Entity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.event.v2.Entity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.event.v2.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Entity::IsInitialized() const {
  return true;
}

void Entity::InternalSwap(Entity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Entity, _impl_.id_)
      + sizeof(Entity::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Entity, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fevent_2fv2_2fevent_2eproto_getter, &descriptor_table_city_2fevent_2fv2_2fevent_2eproto_once,
      file_level_metadata_city_2fevent_2fv2_2fevent_2eproto[0]);
}
// ===================================================================

class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Event, _impl_._has_bits_);
  static const ::city::event::v2::Entity& subject(const Event* msg);
  static void set_has_subject(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::city::geo::v2::Position& position(const Event* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::city::event::v2::Entity& Event::_Internal::subject(const Event* msg) {
  return *msg->_impl_.subject_;
}
const ::city::geo::v2::Position& Event::_Internal::position(const Event* msg) {
  return *msg->_impl_.position_;
}
void Event::clear_position() {
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Event::Event(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:city.event.v2.Event)
}
Event::Event(const Event& from) : ::google::protobuf::Message() {
  Event* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.topic_){},
      decltype(_impl_.content_){},
      decltype(_impl_.subject_){nullptr},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.t_){},
      decltype(_impl_.id_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.topic_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic().empty()) {
    _this->_impl_.topic_.Set(from._internal_topic(), _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.subject_ = new ::city::event::v2::Entity(*from._impl_.subject_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.position_ = new ::city::geo::v2::Position(*from._impl_.position_);
  }
  ::memcpy(&_impl_.t_, &from._impl_.t_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.t_)) + sizeof(_impl_.id_));

  // @@protoc_insertion_point(copy_constructor:city.event.v2.Event)
}
inline void Event::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.topic_){},
      decltype(_impl_.content_){},
      decltype(_impl_.subject_){nullptr},
      decltype(_impl_.position_){nullptr},
      decltype(_impl_.t_){0},
      decltype(_impl_.id_){0},
  };
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.topic_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.content_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
Event::~Event() {
  // @@protoc_insertion_point(destructor:city.event.v2.Event)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Event::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.topic_.Destroy();
  _impl_.content_.Destroy();
  if (this != internal_default_instance()) delete _impl_.subject_;
  if (this != internal_default_instance()) delete _impl_.position_;
}
void Event::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:city.event.v2.Event)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.topic_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.subject_ != nullptr);
      _impl_.subject_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
  }
  ::memset(&_impl_.t_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.t_)) + sizeof(_impl_.id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Event::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 40, 2> Event::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Event, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Event_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string topic = 1 [json_name = "topic"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.topic_)}},
    // int32 id = 2 [json_name = "id"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Event, _impl_.id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.id_)}},
    // .city.event.v2.Entity subject = 3 [json_name = "subject"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.subject_)}},
    // string content = 4 [json_name = "content"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.content_)}},
    // .city.geo.v2.Position position = 5 [json_name = "position"];
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(Event, _impl_.position_)}},
    // double t = 6 [json_name = "t"];
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.t_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string topic = 1 [json_name = "topic"];
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.topic_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 id = 2 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .city.event.v2.Entity subject = 3 [json_name = "subject"];
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.subject_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string content = 4 [json_name = "content"];
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.content_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .city.geo.v2.Position position = 5 [json_name = "position"];
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.position_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double t = 6 [json_name = "t"];
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.t_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::city::event::v2::Entity>()},
    {::_pbi::TcParser::GetTable<::city::geo::v2::Position>()},
  }}, {{
    "\23\5\0\0\7\0\0\0"
    "city.event.v2.Event"
    "topic"
    "content"
  }},
};

::uint8_t* Event::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.event.v2.Event)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string topic = 1 [json_name = "topic"];
  if (!this->_internal_topic().empty()) {
    const std::string& _s = this->_internal_topic();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "city.event.v2.Event.topic");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 id = 2 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .city.event.v2.Entity subject = 3 [json_name = "subject"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::subject(this),
        _Internal::subject(this).GetCachedSize(), target, stream);
  }

  // string content = 4 [json_name = "content"];
  if (!this->_internal_content().empty()) {
    const std::string& _s = this->_internal_content();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "city.event.v2.Event.content");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // .city.geo.v2.Position position = 5 [json_name = "position"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // double t = 6 [json_name = "t"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_t = this->_internal_t();
  ::uint64_t raw_t;
  memcpy(&raw_t, &tmp_t, sizeof(tmp_t));
  if (raw_t != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this->_internal_t(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.event.v2.Event)
  return target;
}

::size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.event.v2.Event)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1 [json_name = "topic"];
  if (!this->_internal_topic().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_topic());
  }

  // string content = 4 [json_name = "content"];
  if (!this->_internal_content().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_content());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .city.event.v2.Entity subject = 3 [json_name = "subject"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.subject_);
    }

    // .city.geo.v2.Position position = 5 [json_name = "position"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.position_);
    }

  }
  // double t = 6 [json_name = "t"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_t = this->_internal_t();
  ::uint64_t raw_t;
  memcpy(&raw_t, &tmp_t, sizeof(tmp_t));
  if (raw_t != 0) {
    total_size += 9;
  }

  // int32 id = 2 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Event::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Event::MergeImpl
};
const ::google::protobuf::Message::ClassData*Event::GetClassData() const { return &_class_data_; }


void Event::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Event*>(&to_msg);
  auto& from = static_cast<const Event&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.event.v2.Event)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_topic().empty()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_subject()->::city::event::v2::Entity::MergeFrom(
          from._internal_subject());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_position()->::city::geo::v2::Position::MergeFrom(
          from._internal_position());
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_t = from._internal_t();
  ::uint64_t raw_t;
  memcpy(&raw_t, &tmp_t, sizeof(tmp_t));
  if (raw_t != 0) {
    _this->_internal_set_t(from._internal_t());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.event.v2.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_, lhs_arena,
                                       &other->_impl_.topic_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.content_, lhs_arena,
                                       &other->_impl_.content_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, _impl_.id_)
      + sizeof(Event::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Event, _impl_.subject_)>(
          reinterpret_cast<char*>(&_impl_.subject_),
          reinterpret_cast<char*>(&other->_impl_.subject_));
}

::google::protobuf::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2fevent_2fv2_2fevent_2eproto_getter, &descriptor_table_city_2fevent_2fv2_2fevent_2eproto_once,
      file_level_metadata_city_2fevent_2fv2_2fevent_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace event
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
