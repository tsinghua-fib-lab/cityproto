// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/event/v2/event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fevent_2fv2_2fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fevent_2fv2_2fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "city/geo/v2/geo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fevent_2fv2_2fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fevent_2fv2_2fevent_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fevent_2fv2_2fevent_2eproto;
namespace city {
namespace event {
namespace v2 {
class Entity;
struct EntityDefaultTypeInternal;
extern EntityDefaultTypeInternal _Entity_default_instance_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
}  // namespace v2
}  // namespace event
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::event::v2::Entity* Arena::CreateMaybeMessage<::city::event::v2::Entity>(Arena*);
template<> ::city::event::v2::Event* Arena::CreateMaybeMessage<::city::event::v2::Event>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace event {
namespace v2 {

enum EntityType : int {
  ENTITY_TYPE_UNSPECIFIED = 0,
  ENTITY_TYPE_LANE = 1,
  ENTITY_TYPE_ROAD = 2,
  ENTITY_TYPE_JUNCTION = 3,
  ENTITY_TYPE_AOI = 4,
  ENTITY_TYPE_POI = 5,
  ENTITY_TYPE_PERSON = 6,
  ENTITY_TYPE_ORG = 7,
  EntityType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EntityType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EntityType_IsValid(int value);
constexpr EntityType EntityType_MIN = ENTITY_TYPE_UNSPECIFIED;
constexpr EntityType EntityType_MAX = ENTITY_TYPE_ORG;
constexpr int EntityType_ARRAYSIZE = EntityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EntityType_descriptor();
template<typename T>
inline const std::string& EntityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EntityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EntityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EntityType_descriptor(), enum_t_value);
}
inline bool EntityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EntityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EntityType>(
    EntityType_descriptor(), name, value);
}
// ===================================================================

class Entity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.event.v2.Entity) */ {
 public:
  inline Entity() : Entity(nullptr) {}
  ~Entity() override;
  explicit PROTOBUF_CONSTEXPR Entity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entity(const Entity& from);
  Entity(Entity&& from) noexcept
    : Entity() {
    *this = ::std::move(from);
  }

  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entity& operator=(Entity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entity& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entity* internal_default_instance() {
    return reinterpret_cast<const Entity*>(
               &_Entity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Entity& a, Entity& b) {
    a.Swap(&b);
  }
  inline void Swap(Entity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Entity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Entity& from) {
    Entity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.event.v2.Entity";
  }
  protected:
  explicit Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // .city.event.v2.EntityType type = 1 [json_name = "type"];
  void clear_type();
  ::city::event::v2::EntityType type() const;
  void set_type(::city::event::v2::EntityType value);
  private:
  ::city::event::v2::EntityType _internal_type() const;
  void _internal_set_type(::city::event::v2::EntityType value);
  public:

  // int32 id = 2 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.event.v2.Entity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fevent_2fv2_2fevent_2eproto;
};
// -------------------------------------------------------------------

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.event.v2.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  explicit PROTOBUF_CONSTEXPR Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Event& from) {
    Event::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.event.v2.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kContentFieldNumber = 4,
    kSubjectFieldNumber = 3,
    kPositionFieldNumber = 5,
    kTFieldNumber = 6,
    kIdFieldNumber = 2,
  };
  // string topic = 1 [json_name = "topic"];
  void clear_topic();
  const std::string& topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_topic();
  PROTOBUF_NODISCARD std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string content = 4 [json_name = "content"];
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .city.event.v2.Entity subject = 3 [json_name = "subject"];
  bool has_subject() const;
  private:
  bool _internal_has_subject() const;
  public:
  void clear_subject();
  const ::city::event::v2::Entity& subject() const;
  PROTOBUF_NODISCARD ::city::event::v2::Entity* release_subject();
  ::city::event::v2::Entity* mutable_subject();
  void set_allocated_subject(::city::event::v2::Entity* subject);
  private:
  const ::city::event::v2::Entity& _internal_subject() const;
  ::city::event::v2::Entity* _internal_mutable_subject();
  public:
  void unsafe_arena_set_allocated_subject(
      ::city::event::v2::Entity* subject);
  ::city::event::v2::Entity* unsafe_arena_release_subject();

  // .city.geo.v2.Position position = 5 [json_name = "position"];
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::city::geo::v2::Position& position() const;
  PROTOBUF_NODISCARD ::city::geo::v2::Position* release_position();
  ::city::geo::v2::Position* mutable_position();
  void set_allocated_position(::city::geo::v2::Position* position);
  private:
  const ::city::geo::v2::Position& _internal_position() const;
  ::city::geo::v2::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::city::geo::v2::Position* position);
  ::city::geo::v2::Position* unsafe_arena_release_position();

  // double t = 6 [json_name = "t"];
  void clear_t();
  double t() const;
  void set_t(double value);
  private:
  double _internal_t() const;
  void _internal_set_t(double value);
  public:

  // int32 id = 2 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.event.v2.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::city::event::v2::Entity* subject_;
    ::city::geo::v2::Position* position_;
    double t_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fevent_2fv2_2fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entity

// .city.event.v2.EntityType type = 1 [json_name = "type"];
inline void Entity::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::event::v2::EntityType Entity::_internal_type() const {
  return static_cast< ::city::event::v2::EntityType >(_impl_.type_);
}
inline ::city::event::v2::EntityType Entity::type() const {
  // @@protoc_insertion_point(field_get:city.event.v2.Entity.type)
  return _internal_type();
}
inline void Entity::_internal_set_type(::city::event::v2::EntityType value) {
  
  _impl_.type_ = value;
}
inline void Entity::set_type(::city::event::v2::EntityType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.event.v2.Entity.type)
}

// int32 id = 2 [json_name = "id"];
inline void Entity::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Entity::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Entity::id() const {
  // @@protoc_insertion_point(field_get:city.event.v2.Entity.id)
  return _internal_id();
}
inline void Entity::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Entity::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.event.v2.Entity.id)
}

// -------------------------------------------------------------------

// Event

// string topic = 1 [json_name = "topic"];
inline void Event::clear_topic() {
  _impl_.topic_.ClearToEmpty();
}
inline const std::string& Event::topic() const {
  // @@protoc_insertion_point(field_get:city.event.v2.Event.topic)
  return _internal_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_topic(ArgT0&& arg0, ArgT... args) {
 
 _impl_.topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.event.v2.Event.topic)
}
inline std::string* Event::mutable_topic() {
  std::string* _s = _internal_mutable_topic();
  // @@protoc_insertion_point(field_mutable:city.event.v2.Event.topic)
  return _s;
}
inline const std::string& Event::_internal_topic() const {
  return _impl_.topic_.Get();
}
inline void Event::_internal_set_topic(const std::string& value) {
  
  _impl_.topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_topic() {
  
  return _impl_.topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Event::release_topic() {
  // @@protoc_insertion_point(field_release:city.event.v2.Event.topic)
  return _impl_.topic_.Release();
}
inline void Event::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  _impl_.topic_.SetAllocated(topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.topic_.IsDefault()) {
    _impl_.topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.event.v2.Event.topic)
}

// int32 id = 2 [json_name = "id"];
inline void Event::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Event::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Event::id() const {
  // @@protoc_insertion_point(field_get:city.event.v2.Event.id)
  return _internal_id();
}
inline void Event::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Event::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.event.v2.Event.id)
}

// .city.event.v2.Entity subject = 3 [json_name = "subject"];
inline bool Event::_internal_has_subject() const {
  return this != internal_default_instance() && _impl_.subject_ != nullptr;
}
inline bool Event::has_subject() const {
  return _internal_has_subject();
}
inline void Event::clear_subject() {
  if (GetArenaForAllocation() == nullptr && _impl_.subject_ != nullptr) {
    delete _impl_.subject_;
  }
  _impl_.subject_ = nullptr;
}
inline const ::city::event::v2::Entity& Event::_internal_subject() const {
  const ::city::event::v2::Entity* p = _impl_.subject_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::event::v2::Entity&>(
      ::city::event::v2::_Entity_default_instance_);
}
inline const ::city::event::v2::Entity& Event::subject() const {
  // @@protoc_insertion_point(field_get:city.event.v2.Event.subject)
  return _internal_subject();
}
inline void Event::unsafe_arena_set_allocated_subject(
    ::city::event::v2::Entity* subject) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subject_);
  }
  _impl_.subject_ = subject;
  if (subject) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.event.v2.Event.subject)
}
inline ::city::event::v2::Entity* Event::release_subject() {
  
  ::city::event::v2::Entity* temp = _impl_.subject_;
  _impl_.subject_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::event::v2::Entity* Event::unsafe_arena_release_subject() {
  // @@protoc_insertion_point(field_release:city.event.v2.Event.subject)
  
  ::city::event::v2::Entity* temp = _impl_.subject_;
  _impl_.subject_ = nullptr;
  return temp;
}
inline ::city::event::v2::Entity* Event::_internal_mutable_subject() {
  
  if (_impl_.subject_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::event::v2::Entity>(GetArenaForAllocation());
    _impl_.subject_ = p;
  }
  return _impl_.subject_;
}
inline ::city::event::v2::Entity* Event::mutable_subject() {
  ::city::event::v2::Entity* _msg = _internal_mutable_subject();
  // @@protoc_insertion_point(field_mutable:city.event.v2.Event.subject)
  return _msg;
}
inline void Event::set_allocated_subject(::city::event::v2::Entity* subject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.subject_;
  }
  if (subject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subject);
    if (message_arena != submessage_arena) {
      subject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.subject_ = subject;
  // @@protoc_insertion_point(field_set_allocated:city.event.v2.Event.subject)
}

// string content = 4 [json_name = "content"];
inline void Event::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& Event::content() const {
  // @@protoc_insertion_point(field_get:city.event.v2.Event.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.event.v2.Event.content)
}
inline std::string* Event::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:city.event.v2.Event.content)
  return _s;
}
inline const std::string& Event::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Event::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Event::release_content() {
  // @@protoc_insertion_point(field_release:city.event.v2.Event.content)
  return _impl_.content_.Release();
}
inline void Event::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.event.v2.Event.content)
}

// .city.geo.v2.Position position = 5 [json_name = "position"];
inline bool Event::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Event::has_position() const {
  return _internal_has_position();
}
inline const ::city::geo::v2::Position& Event::_internal_position() const {
  const ::city::geo::v2::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::Position&>(
      ::city::geo::v2::_Position_default_instance_);
}
inline const ::city::geo::v2::Position& Event::position() const {
  // @@protoc_insertion_point(field_get:city.event.v2.Event.position)
  return _internal_position();
}
inline void Event::unsafe_arena_set_allocated_position(
    ::city::geo::v2::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.event.v2.Event.position)
}
inline ::city::geo::v2::Position* Event::release_position() {
  
  ::city::geo::v2::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::geo::v2::Position* Event::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:city.event.v2.Event.position)
  
  ::city::geo::v2::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::city::geo::v2::Position* Event::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::city::geo::v2::Position* Event::mutable_position() {
  ::city::geo::v2::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:city.event.v2.Event.position)
  return _msg;
}
inline void Event::set_allocated_position(::city::geo::v2::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:city.event.v2.Event.position)
}

// double t = 6 [json_name = "t"];
inline void Event::clear_t() {
  _impl_.t_ = 0;
}
inline double Event::_internal_t() const {
  return _impl_.t_;
}
inline double Event::t() const {
  // @@protoc_insertion_point(field_get:city.event.v2.Event.t)
  return _internal_t();
}
inline void Event::_internal_set_t(double value) {
  
  _impl_.t_ = value;
}
inline void Event::set_t(double value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:city.event.v2.Event.t)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace event
}  // namespace city

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::city::event::v2::EntityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::city::event::v2::EntityType>() {
  return ::city::event::v2::EntityType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fevent_2fv2_2fevent_2eproto
