// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/event/v2/event_service.proto
#ifndef GRPC_city_2fevent_2fv2_2fevent_5fservice_2eproto__INCLUDED
#define GRPC_city_2fevent_2fv2_2fevent_5fservice_2eproto__INCLUDED

#include "city/event/v2/event_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace city {
namespace event {
namespace v2 {

class EventService final {
 public:
  static constexpr char const* service_full_name() {
    return "city.event.v2.EventService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 按照topic查询事件
    virtual ::grpc::Status GetEventsByTopic(::grpc::ClientContext* context, const ::city::event::v2::GetEventsByTopicRequest& request, ::city::event::v2::GetEventsByTopicResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::event::v2::GetEventsByTopicResponse>> AsyncGetEventsByTopic(::grpc::ClientContext* context, const ::city::event::v2::GetEventsByTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::event::v2::GetEventsByTopicResponse>>(AsyncGetEventsByTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::event::v2::GetEventsByTopicResponse>> PrepareAsyncGetEventsByTopic(::grpc::ClientContext* context, const ::city::event::v2::GetEventsByTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::event::v2::GetEventsByTopicResponse>>(PrepareAsyncGetEventsByTopicRaw(context, request, cq));
    }
    // 确认事件已被处理
    virtual ::grpc::Status ResolveEvents(::grpc::ClientContext* context, const ::city::event::v2::ResolveEventsRequest& request, ::city::event::v2::ResolveEventsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::event::v2::ResolveEventsResponse>> AsyncResolveEvents(::grpc::ClientContext* context, const ::city::event::v2::ResolveEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::event::v2::ResolveEventsResponse>>(AsyncResolveEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::event::v2::ResolveEventsResponse>> PrepareAsyncResolveEvents(::grpc::ClientContext* context, const ::city::event::v2::ResolveEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::event::v2::ResolveEventsResponse>>(PrepareAsyncResolveEventsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 按照topic查询事件
      virtual void GetEventsByTopic(::grpc::ClientContext* context, const ::city::event::v2::GetEventsByTopicRequest* request, ::city::event::v2::GetEventsByTopicResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEventsByTopic(::grpc::ClientContext* context, const ::city::event::v2::GetEventsByTopicRequest* request, ::city::event::v2::GetEventsByTopicResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 确认事件已被处理
      virtual void ResolveEvents(::grpc::ClientContext* context, const ::city::event::v2::ResolveEventsRequest* request, ::city::event::v2::ResolveEventsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResolveEvents(::grpc::ClientContext* context, const ::city::event::v2::ResolveEventsRequest* request, ::city::event::v2::ResolveEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::event::v2::GetEventsByTopicResponse>* AsyncGetEventsByTopicRaw(::grpc::ClientContext* context, const ::city::event::v2::GetEventsByTopicRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::event::v2::GetEventsByTopicResponse>* PrepareAsyncGetEventsByTopicRaw(::grpc::ClientContext* context, const ::city::event::v2::GetEventsByTopicRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::event::v2::ResolveEventsResponse>* AsyncResolveEventsRaw(::grpc::ClientContext* context, const ::city::event::v2::ResolveEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::event::v2::ResolveEventsResponse>* PrepareAsyncResolveEventsRaw(::grpc::ClientContext* context, const ::city::event::v2::ResolveEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetEventsByTopic(::grpc::ClientContext* context, const ::city::event::v2::GetEventsByTopicRequest& request, ::city::event::v2::GetEventsByTopicResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::event::v2::GetEventsByTopicResponse>> AsyncGetEventsByTopic(::grpc::ClientContext* context, const ::city::event::v2::GetEventsByTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::event::v2::GetEventsByTopicResponse>>(AsyncGetEventsByTopicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::event::v2::GetEventsByTopicResponse>> PrepareAsyncGetEventsByTopic(::grpc::ClientContext* context, const ::city::event::v2::GetEventsByTopicRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::event::v2::GetEventsByTopicResponse>>(PrepareAsyncGetEventsByTopicRaw(context, request, cq));
    }
    ::grpc::Status ResolveEvents(::grpc::ClientContext* context, const ::city::event::v2::ResolveEventsRequest& request, ::city::event::v2::ResolveEventsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::event::v2::ResolveEventsResponse>> AsyncResolveEvents(::grpc::ClientContext* context, const ::city::event::v2::ResolveEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::event::v2::ResolveEventsResponse>>(AsyncResolveEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::event::v2::ResolveEventsResponse>> PrepareAsyncResolveEvents(::grpc::ClientContext* context, const ::city::event::v2::ResolveEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::event::v2::ResolveEventsResponse>>(PrepareAsyncResolveEventsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetEventsByTopic(::grpc::ClientContext* context, const ::city::event::v2::GetEventsByTopicRequest* request, ::city::event::v2::GetEventsByTopicResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEventsByTopic(::grpc::ClientContext* context, const ::city::event::v2::GetEventsByTopicRequest* request, ::city::event::v2::GetEventsByTopicResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ResolveEvents(::grpc::ClientContext* context, const ::city::event::v2::ResolveEventsRequest* request, ::city::event::v2::ResolveEventsResponse* response, std::function<void(::grpc::Status)>) override;
      void ResolveEvents(::grpc::ClientContext* context, const ::city::event::v2::ResolveEventsRequest* request, ::city::event::v2::ResolveEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::city::event::v2::GetEventsByTopicResponse>* AsyncGetEventsByTopicRaw(::grpc::ClientContext* context, const ::city::event::v2::GetEventsByTopicRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::event::v2::GetEventsByTopicResponse>* PrepareAsyncGetEventsByTopicRaw(::grpc::ClientContext* context, const ::city::event::v2::GetEventsByTopicRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::event::v2::ResolveEventsResponse>* AsyncResolveEventsRaw(::grpc::ClientContext* context, const ::city::event::v2::ResolveEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::event::v2::ResolveEventsResponse>* PrepareAsyncResolveEventsRaw(::grpc::ClientContext* context, const ::city::event::v2::ResolveEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetEventsByTopic_;
    const ::grpc::internal::RpcMethod rpcmethod_ResolveEvents_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 按照topic查询事件
    virtual ::grpc::Status GetEventsByTopic(::grpc::ServerContext* context, const ::city::event::v2::GetEventsByTopicRequest* request, ::city::event::v2::GetEventsByTopicResponse* response);
    // 确认事件已被处理
    virtual ::grpc::Status ResolveEvents(::grpc::ServerContext* context, const ::city::event::v2::ResolveEventsRequest* request, ::city::event::v2::ResolveEventsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEventsByTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEventsByTopic() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetEventsByTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByTopic(::grpc::ServerContext* /*context*/, const ::city::event::v2::GetEventsByTopicRequest* /*request*/, ::city::event::v2::GetEventsByTopicResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEventsByTopic(::grpc::ServerContext* context, ::city::event::v2::GetEventsByTopicRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::event::v2::GetEventsByTopicResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResolveEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResolveEvents() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ResolveEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResolveEvents(::grpc::ServerContext* /*context*/, const ::city::event::v2::ResolveEventsRequest* /*request*/, ::city::event::v2::ResolveEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResolveEvents(::grpc::ServerContext* context, ::city::event::v2::ResolveEventsRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::event::v2::ResolveEventsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetEventsByTopic<WithAsyncMethod_ResolveEvents<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetEventsByTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEventsByTopic() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::city::event::v2::GetEventsByTopicRequest, ::city::event::v2::GetEventsByTopicResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::event::v2::GetEventsByTopicRequest* request, ::city::event::v2::GetEventsByTopicResponse* response) { return this->GetEventsByTopic(context, request, response); }));}
    void SetMessageAllocatorFor_GetEventsByTopic(
        ::grpc::MessageAllocator< ::city::event::v2::GetEventsByTopicRequest, ::city::event::v2::GetEventsByTopicResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::event::v2::GetEventsByTopicRequest, ::city::event::v2::GetEventsByTopicResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEventsByTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByTopic(::grpc::ServerContext* /*context*/, const ::city::event::v2::GetEventsByTopicRequest* /*request*/, ::city::event::v2::GetEventsByTopicResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEventsByTopic(
      ::grpc::CallbackServerContext* /*context*/, const ::city::event::v2::GetEventsByTopicRequest* /*request*/, ::city::event::v2::GetEventsByTopicResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ResolveEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ResolveEvents() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::city::event::v2::ResolveEventsRequest, ::city::event::v2::ResolveEventsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::event::v2::ResolveEventsRequest* request, ::city::event::v2::ResolveEventsResponse* response) { return this->ResolveEvents(context, request, response); }));}
    void SetMessageAllocatorFor_ResolveEvents(
        ::grpc::MessageAllocator< ::city::event::v2::ResolveEventsRequest, ::city::event::v2::ResolveEventsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::event::v2::ResolveEventsRequest, ::city::event::v2::ResolveEventsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ResolveEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResolveEvents(::grpc::ServerContext* /*context*/, const ::city::event::v2::ResolveEventsRequest* /*request*/, ::city::event::v2::ResolveEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResolveEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::city::event::v2::ResolveEventsRequest* /*request*/, ::city::event::v2::ResolveEventsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetEventsByTopic<WithCallbackMethod_ResolveEvents<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetEventsByTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEventsByTopic() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetEventsByTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByTopic(::grpc::ServerContext* /*context*/, const ::city::event::v2::GetEventsByTopicRequest* /*request*/, ::city::event::v2::GetEventsByTopicResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResolveEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResolveEvents() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ResolveEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResolveEvents(::grpc::ServerContext* /*context*/, const ::city::event::v2::ResolveEventsRequest* /*request*/, ::city::event::v2::ResolveEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEventsByTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEventsByTopic() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetEventsByTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByTopic(::grpc::ServerContext* /*context*/, const ::city::event::v2::GetEventsByTopicRequest* /*request*/, ::city::event::v2::GetEventsByTopicResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEventsByTopic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResolveEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResolveEvents() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ResolveEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResolveEvents(::grpc::ServerContext* /*context*/, const ::city::event::v2::ResolveEventsRequest* /*request*/, ::city::event::v2::ResolveEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResolveEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEventsByTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEventsByTopic() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEventsByTopic(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEventsByTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEventsByTopic(::grpc::ServerContext* /*context*/, const ::city::event::v2::GetEventsByTopicRequest* /*request*/, ::city::event::v2::GetEventsByTopicResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEventsByTopic(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ResolveEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ResolveEvents() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResolveEvents(context, request, response); }));
    }
    ~WithRawCallbackMethod_ResolveEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResolveEvents(::grpc::ServerContext* /*context*/, const ::city::event::v2::ResolveEventsRequest* /*request*/, ::city::event::v2::ResolveEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResolveEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEventsByTopic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEventsByTopic() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::event::v2::GetEventsByTopicRequest, ::city::event::v2::GetEventsByTopicResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::event::v2::GetEventsByTopicRequest, ::city::event::v2::GetEventsByTopicResponse>* streamer) {
                       return this->StreamedGetEventsByTopic(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEventsByTopic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEventsByTopic(::grpc::ServerContext* /*context*/, const ::city::event::v2::GetEventsByTopicRequest* /*request*/, ::city::event::v2::GetEventsByTopicResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEventsByTopic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::event::v2::GetEventsByTopicRequest,::city::event::v2::GetEventsByTopicResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResolveEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResolveEvents() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::event::v2::ResolveEventsRequest, ::city::event::v2::ResolveEventsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::event::v2::ResolveEventsRequest, ::city::event::v2::ResolveEventsResponse>* streamer) {
                       return this->StreamedResolveEvents(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResolveEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResolveEvents(::grpc::ServerContext* /*context*/, const ::city::event::v2::ResolveEventsRequest* /*request*/, ::city::event::v2::ResolveEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResolveEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::event::v2::ResolveEventsRequest,::city::event::v2::ResolveEventsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetEventsByTopic<WithStreamedUnaryMethod_ResolveEvents<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetEventsByTopic<WithStreamedUnaryMethod_ResolveEvents<Service > > StreamedService;
};

}  // namespace v2
}  // namespace event
}  // namespace city


#endif  // GRPC_city_2fevent_2fv2_2fevent_5fservice_2eproto__INCLUDED
