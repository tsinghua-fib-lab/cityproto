// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/cognition/input/v1/input_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fcognition_2finput_2fv1_2finput_5fservice_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_city_2fcognition_2finput_2fv1_2finput_5fservice_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "city/agent/v2/agent.pb.h"
#include "city/cognition/input/v1/config.pb.h"
#include "city/cognition/input/v1/input.pb.h"
#include "city/map/v2/map.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_city_2fcognition_2finput_2fv1_2finput_5fservice_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fcognition_2finput_2fv1_2finput_5fservice_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_city_2fcognition_2finput_2fv1_2finput_5fservice_2eproto;
namespace city {
namespace cognition {
namespace input {
namespace v1 {
class InitRequest;
struct InitRequestDefaultTypeInternal;
extern InitRequestDefaultTypeInternal _InitRequest_default_instance_;
class InitResponse;
struct InitResponseDefaultTypeInternal;
extern InitResponseDefaultTypeInternal _InitResponse_default_instance_;
}  // namespace v1
}  // namespace input
}  // namespace cognition
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace city {
namespace cognition {
namespace input {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class InitRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.cognition.input.v1.InitRequest) */ {
 public:
  inline InitRequest() : InitRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InitRequest(::google::protobuf::internal::ConstantInitialized);

  InitRequest(const InitRequest& from);
  InitRequest(InitRequest&& from) noexcept
    : InitRequest() {
    *this = ::std::move(from);
  }

  inline InitRequest& operator=(const InitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitRequest& operator=(InitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitRequest* internal_default_instance() {
    return reinterpret_cast<const InitRequest*>(
               &_InitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InitRequest& a, InitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const InitRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const InitRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.cognition.input.v1.InitRequest";
  }
  protected:
  explicit InitRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.cognition.input.v1.InitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_city_2fcognition_2finput_2fv1_2finput_5fservice_2eproto;
};// -------------------------------------------------------------------

class InitResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:city.cognition.input.v1.InitResponse) */ {
 public:
  inline InitResponse() : InitResponse(nullptr) {}
  ~InitResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InitResponse(::google::protobuf::internal::ConstantInitialized);

  InitResponse(const InitResponse& from);
  InitResponse(InitResponse&& from) noexcept
    : InitResponse() {
    *this = ::std::move(from);
  }

  inline InitResponse& operator=(const InitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitResponse& operator=(InitResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitResponse* internal_default_instance() {
    return reinterpret_cast<const InitResponse*>(
               &_InitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InitResponse& a, InitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InitResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InitResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InitResponse& from) {
    InitResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "city.cognition.input.v1.InitResponse";
  }
  protected:
  explicit InitResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kControlFieldNumber = 2,
    kMapFieldNumber = 3,
    kPersonsFieldNumber = 4,
    kEdgesFieldNumber = 5,
  };
  // string address = 1 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .city.cognition.input.v1.Control control = 2 [json_name = "control"];
  bool has_control() const;
  void clear_control() ;
  const ::city::cognition::input::v1::Control& control() const;
  PROTOBUF_NODISCARD ::city::cognition::input::v1::Control* release_control();
  ::city::cognition::input::v1::Control* mutable_control();
  void set_allocated_control(::city::cognition::input::v1::Control* value);
  void unsafe_arena_set_allocated_control(::city::cognition::input::v1::Control* value);
  ::city::cognition::input::v1::Control* unsafe_arena_release_control();

  private:
  const ::city::cognition::input::v1::Control& _internal_control() const;
  ::city::cognition::input::v1::Control* _internal_mutable_control();

  public:
  // .city.map.v2.Map map = 3 [json_name = "map"];
  bool has_map() const;
  void clear_map() ;
  const ::city::map::v2::Map& map() const;
  PROTOBUF_NODISCARD ::city::map::v2::Map* release_map();
  ::city::map::v2::Map* mutable_map();
  void set_allocated_map(::city::map::v2::Map* value);
  void unsafe_arena_set_allocated_map(::city::map::v2::Map* value);
  ::city::map::v2::Map* unsafe_arena_release_map();

  private:
  const ::city::map::v2::Map& _internal_map() const;
  ::city::map::v2::Map* _internal_mutable_map();

  public:
  // .city.agent.v2.Agents persons = 4 [json_name = "persons"];
  bool has_persons() const;
  void clear_persons() ;
  const ::city::agent::v2::Agents& persons() const;
  PROTOBUF_NODISCARD ::city::agent::v2::Agents* release_persons();
  ::city::agent::v2::Agents* mutable_persons();
  void set_allocated_persons(::city::agent::v2::Agents* value);
  void unsafe_arena_set_allocated_persons(::city::agent::v2::Agents* value);
  ::city::agent::v2::Agents* unsafe_arena_release_persons();

  private:
  const ::city::agent::v2::Agents& _internal_persons() const;
  ::city::agent::v2::Agents* _internal_mutable_persons();

  public:
  // .city.cognition.input.v1.Edges edges = 5 [json_name = "edges"];
  bool has_edges() const;
  void clear_edges() ;
  const ::city::cognition::input::v1::Edges& edges() const;
  PROTOBUF_NODISCARD ::city::cognition::input::v1::Edges* release_edges();
  ::city::cognition::input::v1::Edges* mutable_edges();
  void set_allocated_edges(::city::cognition::input::v1::Edges* value);
  void unsafe_arena_set_allocated_edges(::city::cognition::input::v1::Edges* value);
  ::city::cognition::input::v1::Edges* unsafe_arena_release_edges();

  private:
  const ::city::cognition::input::v1::Edges& _internal_edges() const;
  ::city::cognition::input::v1::Edges* _internal_mutable_edges();

  public:
  // @@protoc_insertion_point(class_scope:city.cognition.input.v1.InitResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 4, 52, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::city::cognition::input::v1::Control* control_;
    ::city::map::v2::Map* map_;
    ::city::agent::v2::Agents* persons_;
    ::city::cognition::input::v1::Edges* edges_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcognition_2finput_2fv1_2finput_5fservice_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InitRequest

// -------------------------------------------------------------------

// InitResponse

// string address = 1 [json_name = "address"];
inline void InitResponse::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& InitResponse::address() const {
  // @@protoc_insertion_point(field_get:city.cognition.input.v1.InitResponse.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InitResponse::set_address(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.cognition.input.v1.InitResponse.address)
}
inline std::string* InitResponse::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:city.cognition.input.v1.InitResponse.address)
  return _s;
}
inline const std::string& InitResponse::_internal_address() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.address_.Get();
}
inline void InitResponse::_internal_set_address(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* InitResponse::_internal_mutable_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* InitResponse::release_address() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.cognition.input.v1.InitResponse.address)
  return _impl_.address_.Release();
}
inline void InitResponse::set_allocated_address(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.cognition.input.v1.InitResponse.address)
}

// .city.cognition.input.v1.Control control = 2 [json_name = "control"];
inline bool InitResponse::has_control() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.control_ != nullptr);
  return value;
}
inline const ::city::cognition::input::v1::Control& InitResponse::_internal_control() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::cognition::input::v1::Control* p = _impl_.control_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::cognition::input::v1::Control&>(::city::cognition::input::v1::_Control_default_instance_);
}
inline const ::city::cognition::input::v1::Control& InitResponse::control() const {
  // @@protoc_insertion_point(field_get:city.cognition.input.v1.InitResponse.control)
  return _internal_control();
}
inline void InitResponse::unsafe_arena_set_allocated_control(::city::cognition::input::v1::Control* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.control_);
  }
  _impl_.control_ = reinterpret_cast<::city::cognition::input::v1::Control*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.cognition.input.v1.InitResponse.control)
}
inline ::city::cognition::input::v1::Control* InitResponse::release_control() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::cognition::input::v1::Control* released = _impl_.control_;
  _impl_.control_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::cognition::input::v1::Control* InitResponse::unsafe_arena_release_control() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.cognition.input.v1.InitResponse.control)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::city::cognition::input::v1::Control* temp = _impl_.control_;
  _impl_.control_ = nullptr;
  return temp;
}
inline ::city::cognition::input::v1::Control* InitResponse::_internal_mutable_control() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.control_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::cognition::input::v1::Control>(GetArenaForAllocation());
    _impl_.control_ = reinterpret_cast<::city::cognition::input::v1::Control*>(p);
  }
  return _impl_.control_;
}
inline ::city::cognition::input::v1::Control* InitResponse::mutable_control() {
  ::city::cognition::input::v1::Control* _msg = _internal_mutable_control();
  // @@protoc_insertion_point(field_mutable:city.cognition.input.v1.InitResponse.control)
  return _msg;
}
inline void InitResponse::set_allocated_control(::city::cognition::input::v1::Control* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.control_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.control_ = reinterpret_cast<::city::cognition::input::v1::Control*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.cognition.input.v1.InitResponse.control)
}

// .city.map.v2.Map map = 3 [json_name = "map"];
inline bool InitResponse::has_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.map_ != nullptr);
  return value;
}
inline const ::city::map::v2::Map& InitResponse::_internal_map() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::map::v2::Map* p = _impl_.map_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::map::v2::Map&>(::city::map::v2::_Map_default_instance_);
}
inline const ::city::map::v2::Map& InitResponse::map() const {
  // @@protoc_insertion_point(field_get:city.cognition.input.v1.InitResponse.map)
  return _internal_map();
}
inline void InitResponse::unsafe_arena_set_allocated_map(::city::map::v2::Map* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.map_);
  }
  _impl_.map_ = reinterpret_cast<::city::map::v2::Map*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.cognition.input.v1.InitResponse.map)
}
inline ::city::map::v2::Map* InitResponse::release_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::map::v2::Map* released = _impl_.map_;
  _impl_.map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::map::v2::Map* InitResponse::unsafe_arena_release_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.cognition.input.v1.InitResponse.map)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::city::map::v2::Map* temp = _impl_.map_;
  _impl_.map_ = nullptr;
  return temp;
}
inline ::city::map::v2::Map* InitResponse::_internal_mutable_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.map_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::map::v2::Map>(GetArenaForAllocation());
    _impl_.map_ = reinterpret_cast<::city::map::v2::Map*>(p);
  }
  return _impl_.map_;
}
inline ::city::map::v2::Map* InitResponse::mutable_map() {
  ::city::map::v2::Map* _msg = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:city.cognition.input.v1.InitResponse.map)
  return _msg;
}
inline void InitResponse::set_allocated_map(::city::map::v2::Map* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.map_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.map_ = reinterpret_cast<::city::map::v2::Map*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.cognition.input.v1.InitResponse.map)
}

// .city.agent.v2.Agents persons = 4 [json_name = "persons"];
inline bool InitResponse::has_persons() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.persons_ != nullptr);
  return value;
}
inline const ::city::agent::v2::Agents& InitResponse::_internal_persons() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::agent::v2::Agents* p = _impl_.persons_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::agent::v2::Agents&>(::city::agent::v2::_Agents_default_instance_);
}
inline const ::city::agent::v2::Agents& InitResponse::persons() const {
  // @@protoc_insertion_point(field_get:city.cognition.input.v1.InitResponse.persons)
  return _internal_persons();
}
inline void InitResponse::unsafe_arena_set_allocated_persons(::city::agent::v2::Agents* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.persons_);
  }
  _impl_.persons_ = reinterpret_cast<::city::agent::v2::Agents*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.cognition.input.v1.InitResponse.persons)
}
inline ::city::agent::v2::Agents* InitResponse::release_persons() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::agent::v2::Agents* released = _impl_.persons_;
  _impl_.persons_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::agent::v2::Agents* InitResponse::unsafe_arena_release_persons() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.cognition.input.v1.InitResponse.persons)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::city::agent::v2::Agents* temp = _impl_.persons_;
  _impl_.persons_ = nullptr;
  return temp;
}
inline ::city::agent::v2::Agents* InitResponse::_internal_mutable_persons() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.persons_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::agent::v2::Agents>(GetArenaForAllocation());
    _impl_.persons_ = reinterpret_cast<::city::agent::v2::Agents*>(p);
  }
  return _impl_.persons_;
}
inline ::city::agent::v2::Agents* InitResponse::mutable_persons() {
  ::city::agent::v2::Agents* _msg = _internal_mutable_persons();
  // @@protoc_insertion_point(field_mutable:city.cognition.input.v1.InitResponse.persons)
  return _msg;
}
inline void InitResponse::set_allocated_persons(::city::agent::v2::Agents* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.persons_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.persons_ = reinterpret_cast<::city::agent::v2::Agents*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.cognition.input.v1.InitResponse.persons)
}

// .city.cognition.input.v1.Edges edges = 5 [json_name = "edges"];
inline bool InitResponse::has_edges() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edges_ != nullptr);
  return value;
}
inline const ::city::cognition::input::v1::Edges& InitResponse::_internal_edges() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::city::cognition::input::v1::Edges* p = _impl_.edges_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::cognition::input::v1::Edges&>(::city::cognition::input::v1::_Edges_default_instance_);
}
inline const ::city::cognition::input::v1::Edges& InitResponse::edges() const {
  // @@protoc_insertion_point(field_get:city.cognition.input.v1.InitResponse.edges)
  return _internal_edges();
}
inline void InitResponse::unsafe_arena_set_allocated_edges(::city::cognition::input::v1::Edges* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.edges_);
  }
  _impl_.edges_ = reinterpret_cast<::city::cognition::input::v1::Edges*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.cognition.input.v1.InitResponse.edges)
}
inline ::city::cognition::input::v1::Edges* InitResponse::release_edges() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::city::cognition::input::v1::Edges* released = _impl_.edges_;
  _impl_.edges_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::city::cognition::input::v1::Edges* InitResponse::unsafe_arena_release_edges() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:city.cognition.input.v1.InitResponse.edges)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::city::cognition::input::v1::Edges* temp = _impl_.edges_;
  _impl_.edges_ = nullptr;
  return temp;
}
inline ::city::cognition::input::v1::Edges* InitResponse::_internal_mutable_edges() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.edges_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::cognition::input::v1::Edges>(GetArenaForAllocation());
    _impl_.edges_ = reinterpret_cast<::city::cognition::input::v1::Edges*>(p);
  }
  return _impl_.edges_;
}
inline ::city::cognition::input::v1::Edges* InitResponse::mutable_edges() {
  ::city::cognition::input::v1::Edges* _msg = _internal_mutable_edges();
  // @@protoc_insertion_point(field_mutable:city.cognition.input.v1.InitResponse.edges)
  return _msg;
}
inline void InitResponse::set_allocated_edges(::city::cognition::input::v1::Edges* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.edges_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::google::protobuf::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.edges_ = reinterpret_cast<::city::cognition::input::v1::Edges*>(value);
  // @@protoc_insertion_point(field_set_allocated:city.cognition.input.v1.InitResponse.edges)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace input
}  // namespace cognition
}  // namespace city


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_city_2fcognition_2finput_2fv1_2finput_5fservice_2eproto_2epb_2eh
