// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/cognition/output/v1/output_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fcognition_2foutput_2fv1_2foutput_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fcognition_2foutput_2fv1_2foutput_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "city/cognition/output/v1/output.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fcognition_2foutput_2fv1_2foutput_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fcognition_2foutput_2fv1_2foutput_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fcognition_2foutput_2fv1_2foutput_5fservice_2eproto;
namespace city {
namespace cognition {
namespace output {
namespace v1 {
class OutputRequest;
struct OutputRequestDefaultTypeInternal;
extern OutputRequestDefaultTypeInternal _OutputRequest_default_instance_;
class OutputResponse;
struct OutputResponseDefaultTypeInternal;
extern OutputResponseDefaultTypeInternal _OutputResponse_default_instance_;
}  // namespace v1
}  // namespace output
}  // namespace cognition
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::cognition::output::v1::OutputRequest* Arena::CreateMaybeMessage<::city::cognition::output::v1::OutputRequest>(Arena*);
template<> ::city::cognition::output::v1::OutputResponse* Arena::CreateMaybeMessage<::city::cognition::output::v1::OutputResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace cognition {
namespace output {
namespace v1 {

// ===================================================================

class OutputRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.cognition.output.v1.OutputRequest) */ {
 public:
  inline OutputRequest() : OutputRequest(nullptr) {}
  ~OutputRequest() override;
  explicit PROTOBUF_CONSTEXPR OutputRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputRequest(const OutputRequest& from);
  OutputRequest(OutputRequest&& from) noexcept
    : OutputRequest() {
    *this = ::std::move(from);
  }

  inline OutputRequest& operator=(const OutputRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputRequest& operator=(OutputRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputRequest* internal_default_instance() {
    return reinterpret_cast<const OutputRequest*>(
               &_OutputRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OutputRequest& a, OutputRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OutputRequest& from) {
    OutputRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.cognition.output.v1.OutputRequest";
  }
  protected:
  explicit OutputRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 2,
    kInfluencesFieldNumber = 3,
    kContentsFieldNumber = 6,
    kGroupInfluencesFieldNumber = 7,
    kGroupsFieldNumber = 8,
    kHeatmapFieldNumber = 4,
    kStatFieldNumber = 5,
    kStepFieldNumber = 1,
  };
  // repeated .city.cognition.output.v1.Node nodes = 2 [json_name = "nodes"];
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::city::cognition::output::v1::Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Node >*
      mutable_nodes();
  private:
  const ::city::cognition::output::v1::Node& _internal_nodes(int index) const;
  ::city::cognition::output::v1::Node* _internal_add_nodes();
  public:
  const ::city::cognition::output::v1::Node& nodes(int index) const;
  ::city::cognition::output::v1::Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Node >&
      nodes() const;

  // repeated .city.cognition.output.v1.Influence influences = 3 [json_name = "influences"];
  int influences_size() const;
  private:
  int _internal_influences_size() const;
  public:
  void clear_influences();
  ::city::cognition::output::v1::Influence* mutable_influences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Influence >*
      mutable_influences();
  private:
  const ::city::cognition::output::v1::Influence& _internal_influences(int index) const;
  ::city::cognition::output::v1::Influence* _internal_add_influences();
  public:
  const ::city::cognition::output::v1::Influence& influences(int index) const;
  ::city::cognition::output::v1::Influence* add_influences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Influence >&
      influences() const;

  // repeated .city.cognition.output.v1.Content contents = 6 [json_name = "contents"];
  int contents_size() const;
  private:
  int _internal_contents_size() const;
  public:
  void clear_contents();
  ::city::cognition::output::v1::Content* mutable_contents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Content >*
      mutable_contents();
  private:
  const ::city::cognition::output::v1::Content& _internal_contents(int index) const;
  ::city::cognition::output::v1::Content* _internal_add_contents();
  public:
  const ::city::cognition::output::v1::Content& contents(int index) const;
  ::city::cognition::output::v1::Content* add_contents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Content >&
      contents() const;

  // repeated .city.cognition.output.v1.Influence group_influences = 7 [json_name = "groupInfluences"];
  int group_influences_size() const;
  private:
  int _internal_group_influences_size() const;
  public:
  void clear_group_influences();
  ::city::cognition::output::v1::Influence* mutable_group_influences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Influence >*
      mutable_group_influences();
  private:
  const ::city::cognition::output::v1::Influence& _internal_group_influences(int index) const;
  ::city::cognition::output::v1::Influence* _internal_add_group_influences();
  public:
  const ::city::cognition::output::v1::Influence& group_influences(int index) const;
  ::city::cognition::output::v1::Influence* add_group_influences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Influence >&
      group_influences() const;

  // repeated .city.cognition.output.v1.Group groups = 8 [json_name = "groups"];
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::city::cognition::output::v1::Group* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Group >*
      mutable_groups();
  private:
  const ::city::cognition::output::v1::Group& _internal_groups(int index) const;
  ::city::cognition::output::v1::Group* _internal_add_groups();
  public:
  const ::city::cognition::output::v1::Group& groups(int index) const;
  ::city::cognition::output::v1::Group* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Group >&
      groups() const;

  // .city.cognition.output.v1.Heatmap heatmap = 4 [json_name = "heatmap"];
  bool has_heatmap() const;
  private:
  bool _internal_has_heatmap() const;
  public:
  void clear_heatmap();
  const ::city::cognition::output::v1::Heatmap& heatmap() const;
  PROTOBUF_NODISCARD ::city::cognition::output::v1::Heatmap* release_heatmap();
  ::city::cognition::output::v1::Heatmap* mutable_heatmap();
  void set_allocated_heatmap(::city::cognition::output::v1::Heatmap* heatmap);
  private:
  const ::city::cognition::output::v1::Heatmap& _internal_heatmap() const;
  ::city::cognition::output::v1::Heatmap* _internal_mutable_heatmap();
  public:
  void unsafe_arena_set_allocated_heatmap(
      ::city::cognition::output::v1::Heatmap* heatmap);
  ::city::cognition::output::v1::Heatmap* unsafe_arena_release_heatmap();

  // .city.cognition.output.v1.Stat stat = 5 [json_name = "stat"];
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  const ::city::cognition::output::v1::Stat& stat() const;
  PROTOBUF_NODISCARD ::city::cognition::output::v1::Stat* release_stat();
  ::city::cognition::output::v1::Stat* mutable_stat();
  void set_allocated_stat(::city::cognition::output::v1::Stat* stat);
  private:
  const ::city::cognition::output::v1::Stat& _internal_stat() const;
  ::city::cognition::output::v1::Stat* _internal_mutable_stat();
  public:
  void unsafe_arena_set_allocated_stat(
      ::city::cognition::output::v1::Stat* stat);
  ::city::cognition::output::v1::Stat* unsafe_arena_release_stat();

  // int32 step = 1 [json_name = "step"];
  void clear_step();
  int32_t step() const;
  void set_step(int32_t value);
  private:
  int32_t _internal_step() const;
  void _internal_set_step(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.cognition.output.v1.OutputRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Node > nodes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Influence > influences_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Content > contents_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Influence > group_influences_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Group > groups_;
    ::city::cognition::output::v1::Heatmap* heatmap_;
    ::city::cognition::output::v1::Stat* stat_;
    int32_t step_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcognition_2foutput_2fv1_2foutput_5fservice_2eproto;
};
// -------------------------------------------------------------------

class OutputResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.cognition.output.v1.OutputResponse) */ {
 public:
  inline OutputResponse() : OutputResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR OutputResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputResponse(const OutputResponse& from);
  OutputResponse(OutputResponse&& from) noexcept
    : OutputResponse() {
    *this = ::std::move(from);
  }

  inline OutputResponse& operator=(const OutputResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputResponse& operator=(OutputResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputResponse* internal_default_instance() {
    return reinterpret_cast<const OutputResponse*>(
               &_OutputResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OutputResponse& a, OutputResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const OutputResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const OutputResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.cognition.output.v1.OutputResponse";
  }
  protected:
  explicit OutputResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.cognition.output.v1.OutputResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2fcognition_2foutput_2fv1_2foutput_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OutputRequest

// int32 step = 1 [json_name = "step"];
inline void OutputRequest::clear_step() {
  _impl_.step_ = 0;
}
inline int32_t OutputRequest::_internal_step() const {
  return _impl_.step_;
}
inline int32_t OutputRequest::step() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.OutputRequest.step)
  return _internal_step();
}
inline void OutputRequest::_internal_set_step(int32_t value) {
  
  _impl_.step_ = value;
}
inline void OutputRequest::set_step(int32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.OutputRequest.step)
}

// repeated .city.cognition.output.v1.Node nodes = 2 [json_name = "nodes"];
inline int OutputRequest::_internal_nodes_size() const {
  return _impl_.nodes_.size();
}
inline int OutputRequest::nodes_size() const {
  return _internal_nodes_size();
}
inline ::city::cognition::output::v1::Node* OutputRequest::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:city.cognition.output.v1.OutputRequest.nodes)
  return _impl_.nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Node >*
OutputRequest::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:city.cognition.output.v1.OutputRequest.nodes)
  return &_impl_.nodes_;
}
inline const ::city::cognition::output::v1::Node& OutputRequest::_internal_nodes(int index) const {
  return _impl_.nodes_.Get(index);
}
inline const ::city::cognition::output::v1::Node& OutputRequest::nodes(int index) const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.OutputRequest.nodes)
  return _internal_nodes(index);
}
inline ::city::cognition::output::v1::Node* OutputRequest::_internal_add_nodes() {
  return _impl_.nodes_.Add();
}
inline ::city::cognition::output::v1::Node* OutputRequest::add_nodes() {
  ::city::cognition::output::v1::Node* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:city.cognition.output.v1.OutputRequest.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Node >&
OutputRequest::nodes() const {
  // @@protoc_insertion_point(field_list:city.cognition.output.v1.OutputRequest.nodes)
  return _impl_.nodes_;
}

// repeated .city.cognition.output.v1.Influence influences = 3 [json_name = "influences"];
inline int OutputRequest::_internal_influences_size() const {
  return _impl_.influences_.size();
}
inline int OutputRequest::influences_size() const {
  return _internal_influences_size();
}
inline ::city::cognition::output::v1::Influence* OutputRequest::mutable_influences(int index) {
  // @@protoc_insertion_point(field_mutable:city.cognition.output.v1.OutputRequest.influences)
  return _impl_.influences_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Influence >*
OutputRequest::mutable_influences() {
  // @@protoc_insertion_point(field_mutable_list:city.cognition.output.v1.OutputRequest.influences)
  return &_impl_.influences_;
}
inline const ::city::cognition::output::v1::Influence& OutputRequest::_internal_influences(int index) const {
  return _impl_.influences_.Get(index);
}
inline const ::city::cognition::output::v1::Influence& OutputRequest::influences(int index) const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.OutputRequest.influences)
  return _internal_influences(index);
}
inline ::city::cognition::output::v1::Influence* OutputRequest::_internal_add_influences() {
  return _impl_.influences_.Add();
}
inline ::city::cognition::output::v1::Influence* OutputRequest::add_influences() {
  ::city::cognition::output::v1::Influence* _add = _internal_add_influences();
  // @@protoc_insertion_point(field_add:city.cognition.output.v1.OutputRequest.influences)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Influence >&
OutputRequest::influences() const {
  // @@protoc_insertion_point(field_list:city.cognition.output.v1.OutputRequest.influences)
  return _impl_.influences_;
}

// .city.cognition.output.v1.Heatmap heatmap = 4 [json_name = "heatmap"];
inline bool OutputRequest::_internal_has_heatmap() const {
  return this != internal_default_instance() && _impl_.heatmap_ != nullptr;
}
inline bool OutputRequest::has_heatmap() const {
  return _internal_has_heatmap();
}
inline const ::city::cognition::output::v1::Heatmap& OutputRequest::_internal_heatmap() const {
  const ::city::cognition::output::v1::Heatmap* p = _impl_.heatmap_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::cognition::output::v1::Heatmap&>(
      ::city::cognition::output::v1::_Heatmap_default_instance_);
}
inline const ::city::cognition::output::v1::Heatmap& OutputRequest::heatmap() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.OutputRequest.heatmap)
  return _internal_heatmap();
}
inline void OutputRequest::unsafe_arena_set_allocated_heatmap(
    ::city::cognition::output::v1::Heatmap* heatmap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.heatmap_);
  }
  _impl_.heatmap_ = heatmap;
  if (heatmap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.cognition.output.v1.OutputRequest.heatmap)
}
inline ::city::cognition::output::v1::Heatmap* OutputRequest::release_heatmap() {
  
  ::city::cognition::output::v1::Heatmap* temp = _impl_.heatmap_;
  _impl_.heatmap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::cognition::output::v1::Heatmap* OutputRequest::unsafe_arena_release_heatmap() {
  // @@protoc_insertion_point(field_release:city.cognition.output.v1.OutputRequest.heatmap)
  
  ::city::cognition::output::v1::Heatmap* temp = _impl_.heatmap_;
  _impl_.heatmap_ = nullptr;
  return temp;
}
inline ::city::cognition::output::v1::Heatmap* OutputRequest::_internal_mutable_heatmap() {
  
  if (_impl_.heatmap_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::cognition::output::v1::Heatmap>(GetArenaForAllocation());
    _impl_.heatmap_ = p;
  }
  return _impl_.heatmap_;
}
inline ::city::cognition::output::v1::Heatmap* OutputRequest::mutable_heatmap() {
  ::city::cognition::output::v1::Heatmap* _msg = _internal_mutable_heatmap();
  // @@protoc_insertion_point(field_mutable:city.cognition.output.v1.OutputRequest.heatmap)
  return _msg;
}
inline void OutputRequest::set_allocated_heatmap(::city::cognition::output::v1::Heatmap* heatmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.heatmap_);
  }
  if (heatmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heatmap));
    if (message_arena != submessage_arena) {
      heatmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heatmap, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.heatmap_ = heatmap;
  // @@protoc_insertion_point(field_set_allocated:city.cognition.output.v1.OutputRequest.heatmap)
}

// .city.cognition.output.v1.Stat stat = 5 [json_name = "stat"];
inline bool OutputRequest::_internal_has_stat() const {
  return this != internal_default_instance() && _impl_.stat_ != nullptr;
}
inline bool OutputRequest::has_stat() const {
  return _internal_has_stat();
}
inline const ::city::cognition::output::v1::Stat& OutputRequest::_internal_stat() const {
  const ::city::cognition::output::v1::Stat* p = _impl_.stat_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::cognition::output::v1::Stat&>(
      ::city::cognition::output::v1::_Stat_default_instance_);
}
inline const ::city::cognition::output::v1::Stat& OutputRequest::stat() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.OutputRequest.stat)
  return _internal_stat();
}
inline void OutputRequest::unsafe_arena_set_allocated_stat(
    ::city::cognition::output::v1::Stat* stat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stat_);
  }
  _impl_.stat_ = stat;
  if (stat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.cognition.output.v1.OutputRequest.stat)
}
inline ::city::cognition::output::v1::Stat* OutputRequest::release_stat() {
  
  ::city::cognition::output::v1::Stat* temp = _impl_.stat_;
  _impl_.stat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::cognition::output::v1::Stat* OutputRequest::unsafe_arena_release_stat() {
  // @@protoc_insertion_point(field_release:city.cognition.output.v1.OutputRequest.stat)
  
  ::city::cognition::output::v1::Stat* temp = _impl_.stat_;
  _impl_.stat_ = nullptr;
  return temp;
}
inline ::city::cognition::output::v1::Stat* OutputRequest::_internal_mutable_stat() {
  
  if (_impl_.stat_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::cognition::output::v1::Stat>(GetArenaForAllocation());
    _impl_.stat_ = p;
  }
  return _impl_.stat_;
}
inline ::city::cognition::output::v1::Stat* OutputRequest::mutable_stat() {
  ::city::cognition::output::v1::Stat* _msg = _internal_mutable_stat();
  // @@protoc_insertion_point(field_mutable:city.cognition.output.v1.OutputRequest.stat)
  return _msg;
}
inline void OutputRequest::set_allocated_stat(::city::cognition::output::v1::Stat* stat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stat_);
  }
  if (stat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stat));
    if (message_arena != submessage_arena) {
      stat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stat_ = stat;
  // @@protoc_insertion_point(field_set_allocated:city.cognition.output.v1.OutputRequest.stat)
}

// repeated .city.cognition.output.v1.Content contents = 6 [json_name = "contents"];
inline int OutputRequest::_internal_contents_size() const {
  return _impl_.contents_.size();
}
inline int OutputRequest::contents_size() const {
  return _internal_contents_size();
}
inline ::city::cognition::output::v1::Content* OutputRequest::mutable_contents(int index) {
  // @@protoc_insertion_point(field_mutable:city.cognition.output.v1.OutputRequest.contents)
  return _impl_.contents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Content >*
OutputRequest::mutable_contents() {
  // @@protoc_insertion_point(field_mutable_list:city.cognition.output.v1.OutputRequest.contents)
  return &_impl_.contents_;
}
inline const ::city::cognition::output::v1::Content& OutputRequest::_internal_contents(int index) const {
  return _impl_.contents_.Get(index);
}
inline const ::city::cognition::output::v1::Content& OutputRequest::contents(int index) const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.OutputRequest.contents)
  return _internal_contents(index);
}
inline ::city::cognition::output::v1::Content* OutputRequest::_internal_add_contents() {
  return _impl_.contents_.Add();
}
inline ::city::cognition::output::v1::Content* OutputRequest::add_contents() {
  ::city::cognition::output::v1::Content* _add = _internal_add_contents();
  // @@protoc_insertion_point(field_add:city.cognition.output.v1.OutputRequest.contents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Content >&
OutputRequest::contents() const {
  // @@protoc_insertion_point(field_list:city.cognition.output.v1.OutputRequest.contents)
  return _impl_.contents_;
}

// repeated .city.cognition.output.v1.Influence group_influences = 7 [json_name = "groupInfluences"];
inline int OutputRequest::_internal_group_influences_size() const {
  return _impl_.group_influences_.size();
}
inline int OutputRequest::group_influences_size() const {
  return _internal_group_influences_size();
}
inline ::city::cognition::output::v1::Influence* OutputRequest::mutable_group_influences(int index) {
  // @@protoc_insertion_point(field_mutable:city.cognition.output.v1.OutputRequest.group_influences)
  return _impl_.group_influences_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Influence >*
OutputRequest::mutable_group_influences() {
  // @@protoc_insertion_point(field_mutable_list:city.cognition.output.v1.OutputRequest.group_influences)
  return &_impl_.group_influences_;
}
inline const ::city::cognition::output::v1::Influence& OutputRequest::_internal_group_influences(int index) const {
  return _impl_.group_influences_.Get(index);
}
inline const ::city::cognition::output::v1::Influence& OutputRequest::group_influences(int index) const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.OutputRequest.group_influences)
  return _internal_group_influences(index);
}
inline ::city::cognition::output::v1::Influence* OutputRequest::_internal_add_group_influences() {
  return _impl_.group_influences_.Add();
}
inline ::city::cognition::output::v1::Influence* OutputRequest::add_group_influences() {
  ::city::cognition::output::v1::Influence* _add = _internal_add_group_influences();
  // @@protoc_insertion_point(field_add:city.cognition.output.v1.OutputRequest.group_influences)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Influence >&
OutputRequest::group_influences() const {
  // @@protoc_insertion_point(field_list:city.cognition.output.v1.OutputRequest.group_influences)
  return _impl_.group_influences_;
}

// repeated .city.cognition.output.v1.Group groups = 8 [json_name = "groups"];
inline int OutputRequest::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int OutputRequest::groups_size() const {
  return _internal_groups_size();
}
inline ::city::cognition::output::v1::Group* OutputRequest::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:city.cognition.output.v1.OutputRequest.groups)
  return _impl_.groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Group >*
OutputRequest::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:city.cognition.output.v1.OutputRequest.groups)
  return &_impl_.groups_;
}
inline const ::city::cognition::output::v1::Group& OutputRequest::_internal_groups(int index) const {
  return _impl_.groups_.Get(index);
}
inline const ::city::cognition::output::v1::Group& OutputRequest::groups(int index) const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.OutputRequest.groups)
  return _internal_groups(index);
}
inline ::city::cognition::output::v1::Group* OutputRequest::_internal_add_groups() {
  return _impl_.groups_.Add();
}
inline ::city::cognition::output::v1::Group* OutputRequest::add_groups() {
  ::city::cognition::output::v1::Group* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:city.cognition.output.v1.OutputRequest.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::Group >&
OutputRequest::groups() const {
  // @@protoc_insertion_point(field_list:city.cognition.output.v1.OutputRequest.groups)
  return _impl_.groups_;
}

// -------------------------------------------------------------------

// OutputResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace output
}  // namespace cognition
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fcognition_2foutput_2fv1_2foutput_5fservice_2eproto
