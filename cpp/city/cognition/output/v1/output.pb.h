// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/cognition/output/v1/output.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fcognition_2foutput_2fv1_2foutput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fcognition_2foutput_2fv1_2foutput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fcognition_2foutput_2fv1_2foutput_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fcognition_2foutput_2fv1_2foutput_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fcognition_2foutput_2fv1_2foutput_2eproto;
namespace city {
namespace cognition {
namespace output {
namespace v1 {
class Content;
struct ContentDefaultTypeInternal;
extern ContentDefaultTypeInternal _Content_default_instance_;
class Group;
struct GroupDefaultTypeInternal;
extern GroupDefaultTypeInternal _Group_default_instance_;
class Heatmap;
struct HeatmapDefaultTypeInternal;
extern HeatmapDefaultTypeInternal _Heatmap_default_instance_;
class Influence;
struct InfluenceDefaultTypeInternal;
extern InfluenceDefaultTypeInternal _Influence_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeMeta;
struct NodeMetaDefaultTypeInternal;
extern NodeMetaDefaultTypeInternal _NodeMeta_default_instance_;
class NodesMeta;
struct NodesMetaDefaultTypeInternal;
extern NodesMetaDefaultTypeInternal _NodesMeta_default_instance_;
class Stat;
struct StatDefaultTypeInternal;
extern StatDefaultTypeInternal _Stat_default_instance_;
}  // namespace v1
}  // namespace output
}  // namespace cognition
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::cognition::output::v1::Content* Arena::CreateMaybeMessage<::city::cognition::output::v1::Content>(Arena*);
template<> ::city::cognition::output::v1::Group* Arena::CreateMaybeMessage<::city::cognition::output::v1::Group>(Arena*);
template<> ::city::cognition::output::v1::Heatmap* Arena::CreateMaybeMessage<::city::cognition::output::v1::Heatmap>(Arena*);
template<> ::city::cognition::output::v1::Influence* Arena::CreateMaybeMessage<::city::cognition::output::v1::Influence>(Arena*);
template<> ::city::cognition::output::v1::Node* Arena::CreateMaybeMessage<::city::cognition::output::v1::Node>(Arena*);
template<> ::city::cognition::output::v1::NodeMeta* Arena::CreateMaybeMessage<::city::cognition::output::v1::NodeMeta>(Arena*);
template<> ::city::cognition::output::v1::NodesMeta* Arena::CreateMaybeMessage<::city::cognition::output::v1::NodesMeta>(Arena*);
template<> ::city::cognition::output::v1::Stat* Arena::CreateMaybeMessage<::city::cognition::output::v1::Stat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace cognition {
namespace output {
namespace v1 {

// ===================================================================

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.cognition.output.v1.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit PROTOBUF_CONSTEXPR Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Node& from) {
    Node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.cognition.output.v1.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // double status = 3 [json_name = "status"];
  void clear_status();
  double status() const;
  void set_status(double value);
  private:
  double _internal_status() const;
  void _internal_set_status(double value);
  public:

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.cognition.output.v1.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double status_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcognition_2foutput_2fv1_2foutput_2eproto;
};
// -------------------------------------------------------------------

class Influence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.cognition.output.v1.Influence) */ {
 public:
  inline Influence() : Influence(nullptr) {}
  ~Influence() override;
  explicit PROTOBUF_CONSTEXPR Influence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Influence(const Influence& from);
  Influence(Influence&& from) noexcept
    : Influence() {
    *this = ::std::move(from);
  }

  inline Influence& operator=(const Influence& from) {
    CopyFrom(from);
    return *this;
  }
  inline Influence& operator=(Influence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Influence& default_instance() {
    return *internal_default_instance();
  }
  static inline const Influence* internal_default_instance() {
    return reinterpret_cast<const Influence*>(
               &_Influence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Influence& a, Influence& b) {
    a.Swap(&b);
  }
  inline void Swap(Influence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Influence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Influence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Influence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Influence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Influence& from) {
    Influence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Influence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.cognition.output.v1.Influence";
  }
  protected:
  explicit Influence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kStrengthFieldNumber = 3,
  };
  // int32 source_id = 1 [json_name = "sourceId"];
  void clear_source_id();
  int32_t source_id() const;
  void set_source_id(int32_t value);
  private:
  int32_t _internal_source_id() const;
  void _internal_set_source_id(int32_t value);
  public:

  // int32 target_id = 2 [json_name = "targetId"];
  void clear_target_id();
  int32_t target_id() const;
  void set_target_id(int32_t value);
  private:
  int32_t _internal_target_id() const;
  void _internal_set_target_id(int32_t value);
  public:

  // double strength = 3 [json_name = "strength"];
  void clear_strength();
  double strength() const;
  void set_strength(double value);
  private:
  double _internal_strength() const;
  void _internal_set_strength(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.cognition.output.v1.Influence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t source_id_;
    int32_t target_id_;
    double strength_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcognition_2foutput_2fv1_2foutput_2eproto;
};
// -------------------------------------------------------------------

class Heatmap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.cognition.output.v1.Heatmap) */ {
 public:
  inline Heatmap() : Heatmap(nullptr) {}
  ~Heatmap() override;
  explicit PROTOBUF_CONSTEXPR Heatmap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heatmap(const Heatmap& from);
  Heatmap(Heatmap&& from) noexcept
    : Heatmap() {
    *this = ::std::move(from);
  }

  inline Heatmap& operator=(const Heatmap& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heatmap& operator=(Heatmap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heatmap& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heatmap* internal_default_instance() {
    return reinterpret_cast<const Heatmap*>(
               &_Heatmap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Heatmap& a, Heatmap& b) {
    a.Swap(&b);
  }
  inline void Swap(Heatmap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heatmap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heatmap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heatmap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Heatmap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Heatmap& from) {
    Heatmap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heatmap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.cognition.output.v1.Heatmap";
  }
  protected:
  explicit Heatmap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrengthFieldNumber = 3,
    kNumRowsFieldNumber = 1,
    kNumColumnsFieldNumber = 2,
  };
  // repeated double strength = 3 [json_name = "strength"];
  int strength_size() const;
  private:
  int _internal_strength_size() const;
  public:
  void clear_strength();
  private:
  double _internal_strength(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_strength() const;
  void _internal_add_strength(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_strength();
  public:
  double strength(int index) const;
  void set_strength(int index, double value);
  void add_strength(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      strength() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_strength();

  // int32 num_rows = 1 [json_name = "numRows"];
  void clear_num_rows();
  int32_t num_rows() const;
  void set_num_rows(int32_t value);
  private:
  int32_t _internal_num_rows() const;
  void _internal_set_num_rows(int32_t value);
  public:

  // int32 num_columns = 2 [json_name = "numColumns"];
  void clear_num_columns();
  int32_t num_columns() const;
  void set_num_columns(int32_t value);
  private:
  int32_t _internal_num_columns() const;
  void _internal_set_num_columns(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.cognition.output.v1.Heatmap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > strength_;
    int32_t num_rows_;
    int32_t num_columns_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcognition_2foutput_2fv1_2foutput_2eproto;
};
// -------------------------------------------------------------------

class Stat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.cognition.output.v1.Stat) */ {
 public:
  inline Stat() : Stat(nullptr) {}
  ~Stat() override;
  explicit PROTOBUF_CONSTEXPR Stat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stat(const Stat& from);
  Stat(Stat&& from) noexcept
    : Stat() {
    *this = ::std::move(from);
  }

  inline Stat& operator=(const Stat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stat& operator=(Stat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stat* internal_default_instance() {
    return reinterpret_cast<const Stat*>(
               &_Stat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Stat& a, Stat& b) {
    a.Swap(&b);
  }
  inline void Swap(Stat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stat& from) {
    Stat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.cognition.output.v1.Stat";
  }
  protected:
  explicit Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrowdCntsFieldNumber = 1,
    kCrowdRatiosFieldNumber = 2,
    kKeyNodesFieldNumber = 3,
  };
  // repeated int32 crowd_cnts = 1 [json_name = "crowdCnts"];
  int crowd_cnts_size() const;
  private:
  int _internal_crowd_cnts_size() const;
  public:
  void clear_crowd_cnts();
  private:
  int32_t _internal_crowd_cnts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_crowd_cnts() const;
  void _internal_add_crowd_cnts(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_crowd_cnts();
  public:
  int32_t crowd_cnts(int index) const;
  void set_crowd_cnts(int index, int32_t value);
  void add_crowd_cnts(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      crowd_cnts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_crowd_cnts();

  // repeated double crowd_ratios = 2 [json_name = "crowdRatios"];
  int crowd_ratios_size() const;
  private:
  int _internal_crowd_ratios_size() const;
  public:
  void clear_crowd_ratios();
  private:
  double _internal_crowd_ratios(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_crowd_ratios() const;
  void _internal_add_crowd_ratios(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_crowd_ratios();
  public:
  double crowd_ratios(int index) const;
  void set_crowd_ratios(int index, double value);
  void add_crowd_ratios(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      crowd_ratios() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_crowd_ratios();

  // repeated int32 key_nodes = 3 [json_name = "keyNodes"];
  int key_nodes_size() const;
  private:
  int _internal_key_nodes_size() const;
  public:
  void clear_key_nodes();
  private:
  int32_t _internal_key_nodes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_key_nodes() const;
  void _internal_add_key_nodes(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_key_nodes();
  public:
  int32_t key_nodes(int index) const;
  void set_key_nodes(int index, int32_t value);
  void add_key_nodes(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      key_nodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_key_nodes();

  // @@protoc_insertion_point(class_scope:city.cognition.output.v1.Stat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > crowd_cnts_;
    mutable std::atomic<int> _crowd_cnts_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > crowd_ratios_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > key_nodes_;
    mutable std::atomic<int> _key_nodes_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcognition_2foutput_2fv1_2foutput_2eproto;
};
// -------------------------------------------------------------------

class Content final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.cognition.output.v1.Content) */ {
 public:
  inline Content() : Content(nullptr) {}
  ~Content() override;
  explicit PROTOBUF_CONSTEXPR Content(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Content(const Content& from);
  Content(Content&& from) noexcept
    : Content() {
    *this = ::std::move(from);
  }

  inline Content& operator=(const Content& from) {
    CopyFrom(from);
    return *this;
  }
  inline Content& operator=(Content&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Content& default_instance() {
    return *internal_default_instance();
  }
  static inline const Content* internal_default_instance() {
    return reinterpret_cast<const Content*>(
               &_Content_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Content& a, Content& b) {
    a.Swap(&b);
  }
  inline void Swap(Content* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Content* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Content* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Content>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Content& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Content& from) {
    Content::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Content* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.cognition.output.v1.Content";
  }
  protected:
  explicit Content(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string text = 2 [json_name = "text"];
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.cognition.output.v1.Content)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcognition_2foutput_2fv1_2foutput_2eproto;
};
// -------------------------------------------------------------------

class NodeMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.cognition.output.v1.NodeMeta) */ {
 public:
  inline NodeMeta() : NodeMeta(nullptr) {}
  ~NodeMeta() override;
  explicit PROTOBUF_CONSTEXPR NodeMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeMeta(const NodeMeta& from);
  NodeMeta(NodeMeta&& from) noexcept
    : NodeMeta() {
    *this = ::std::move(from);
  }

  inline NodeMeta& operator=(const NodeMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeMeta& operator=(NodeMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeMeta* internal_default_instance() {
    return reinterpret_cast<const NodeMeta*>(
               &_NodeMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NodeMeta& a, NodeMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeMeta& from) {
    NodeMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.cognition.output.v1.NodeMeta";
  }
  protected:
  explicit NodeMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLngFieldNumber = 2,
    kIdFieldNumber = 1,
    kLevelFieldNumber = 4,
    kLatFieldNumber = 3,
  };
  // double lng = 2 [json_name = "lng"];
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 level = 4 [json_name = "level"];
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // double lat = 3 [json_name = "lat"];
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // @@protoc_insertion_point(class_scope:city.cognition.output.v1.NodeMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double lng_;
    int32_t id_;
    int32_t level_;
    double lat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcognition_2foutput_2fv1_2foutput_2eproto;
};
// -------------------------------------------------------------------

class NodesMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.cognition.output.v1.NodesMeta) */ {
 public:
  inline NodesMeta() : NodesMeta(nullptr) {}
  ~NodesMeta() override;
  explicit PROTOBUF_CONSTEXPR NodesMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodesMeta(const NodesMeta& from);
  NodesMeta(NodesMeta&& from) noexcept
    : NodesMeta() {
    *this = ::std::move(from);
  }

  inline NodesMeta& operator=(const NodesMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodesMeta& operator=(NodesMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodesMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodesMeta* internal_default_instance() {
    return reinterpret_cast<const NodesMeta*>(
               &_NodesMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NodesMeta& a, NodesMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(NodesMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodesMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodesMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodesMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodesMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodesMeta& from) {
    NodesMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodesMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.cognition.output.v1.NodesMeta";
  }
  protected:
  explicit NodesMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .city.cognition.output.v1.NodeMeta nodes = 1 [json_name = "nodes"];
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::city::cognition::output::v1::NodeMeta* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::NodeMeta >*
      mutable_nodes();
  private:
  const ::city::cognition::output::v1::NodeMeta& _internal_nodes(int index) const;
  ::city::cognition::output::v1::NodeMeta* _internal_add_nodes();
  public:
  const ::city::cognition::output::v1::NodeMeta& nodes(int index) const;
  ::city::cognition::output::v1::NodeMeta* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::NodeMeta >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:city.cognition.output.v1.NodesMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::NodeMeta > nodes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcognition_2foutput_2fv1_2foutput_2eproto;
};
// -------------------------------------------------------------------

class Group final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.cognition.output.v1.Group) */ {
 public:
  inline Group() : Group(nullptr) {}
  ~Group() override;
  explicit PROTOBUF_CONSTEXPR Group(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Group(const Group& from);
  Group(Group&& from) noexcept
    : Group() {
    *this = ::std::move(from);
  }

  inline Group& operator=(const Group& from) {
    CopyFrom(from);
    return *this;
  }
  inline Group& operator=(Group&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Group& default_instance() {
    return *internal_default_instance();
  }
  static inline const Group* internal_default_instance() {
    return reinterpret_cast<const Group*>(
               &_Group_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Group& a, Group& b) {
    a.Swap(&b);
  }
  inline void Swap(Group* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Group* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Group* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Group>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Group& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Group& from) {
    Group::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Group* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.cognition.output.v1.Group";
  }
  protected:
  explicit Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangesFieldNumber = 3,
    kIdFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // repeated int32 changes = 3 [json_name = "changes"];
  int changes_size() const;
  private:
  int _internal_changes_size() const;
  public:
  void clear_changes();
  private:
  int32_t _internal_changes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_changes() const;
  void _internal_add_changes(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_changes();
  public:
  int32_t changes(int index) const;
  void set_changes(int index, int32_t value);
  void add_changes(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      changes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_changes();

  // int32 id = 1 [json_name = "id"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 size = 2 [json_name = "size"];
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:city.cognition.output.v1.Group)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > changes_;
    mutable std::atomic<int> _changes_cached_byte_size_;
    int32_t id_;
    int32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fcognition_2foutput_2fv1_2foutput_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// int32 id = 1 [json_name = "id"];
inline void Node::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Node::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Node::id() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Node.id)
  return _internal_id();
}
inline void Node::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Node::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Node.id)
}

// double status = 3 [json_name = "status"];
inline void Node::clear_status() {
  _impl_.status_ = 0;
}
inline double Node::_internal_status() const {
  return _impl_.status_;
}
inline double Node::status() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Node.status)
  return _internal_status();
}
inline void Node::_internal_set_status(double value) {
  
  _impl_.status_ = value;
}
inline void Node::set_status(double value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Node.status)
}

// -------------------------------------------------------------------

// Influence

// int32 source_id = 1 [json_name = "sourceId"];
inline void Influence::clear_source_id() {
  _impl_.source_id_ = 0;
}
inline int32_t Influence::_internal_source_id() const {
  return _impl_.source_id_;
}
inline int32_t Influence::source_id() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Influence.source_id)
  return _internal_source_id();
}
inline void Influence::_internal_set_source_id(int32_t value) {
  
  _impl_.source_id_ = value;
}
inline void Influence::set_source_id(int32_t value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Influence.source_id)
}

// int32 target_id = 2 [json_name = "targetId"];
inline void Influence::clear_target_id() {
  _impl_.target_id_ = 0;
}
inline int32_t Influence::_internal_target_id() const {
  return _impl_.target_id_;
}
inline int32_t Influence::target_id() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Influence.target_id)
  return _internal_target_id();
}
inline void Influence::_internal_set_target_id(int32_t value) {
  
  _impl_.target_id_ = value;
}
inline void Influence::set_target_id(int32_t value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Influence.target_id)
}

// double strength = 3 [json_name = "strength"];
inline void Influence::clear_strength() {
  _impl_.strength_ = 0;
}
inline double Influence::_internal_strength() const {
  return _impl_.strength_;
}
inline double Influence::strength() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Influence.strength)
  return _internal_strength();
}
inline void Influence::_internal_set_strength(double value) {
  
  _impl_.strength_ = value;
}
inline void Influence::set_strength(double value) {
  _internal_set_strength(value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Influence.strength)
}

// -------------------------------------------------------------------

// Heatmap

// int32 num_rows = 1 [json_name = "numRows"];
inline void Heatmap::clear_num_rows() {
  _impl_.num_rows_ = 0;
}
inline int32_t Heatmap::_internal_num_rows() const {
  return _impl_.num_rows_;
}
inline int32_t Heatmap::num_rows() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Heatmap.num_rows)
  return _internal_num_rows();
}
inline void Heatmap::_internal_set_num_rows(int32_t value) {
  
  _impl_.num_rows_ = value;
}
inline void Heatmap::set_num_rows(int32_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Heatmap.num_rows)
}

// int32 num_columns = 2 [json_name = "numColumns"];
inline void Heatmap::clear_num_columns() {
  _impl_.num_columns_ = 0;
}
inline int32_t Heatmap::_internal_num_columns() const {
  return _impl_.num_columns_;
}
inline int32_t Heatmap::num_columns() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Heatmap.num_columns)
  return _internal_num_columns();
}
inline void Heatmap::_internal_set_num_columns(int32_t value) {
  
  _impl_.num_columns_ = value;
}
inline void Heatmap::set_num_columns(int32_t value) {
  _internal_set_num_columns(value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Heatmap.num_columns)
}

// repeated double strength = 3 [json_name = "strength"];
inline int Heatmap::_internal_strength_size() const {
  return _impl_.strength_.size();
}
inline int Heatmap::strength_size() const {
  return _internal_strength_size();
}
inline void Heatmap::clear_strength() {
  _impl_.strength_.Clear();
}
inline double Heatmap::_internal_strength(int index) const {
  return _impl_.strength_.Get(index);
}
inline double Heatmap::strength(int index) const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Heatmap.strength)
  return _internal_strength(index);
}
inline void Heatmap::set_strength(int index, double value) {
  _impl_.strength_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Heatmap.strength)
}
inline void Heatmap::_internal_add_strength(double value) {
  _impl_.strength_.Add(value);
}
inline void Heatmap::add_strength(double value) {
  _internal_add_strength(value);
  // @@protoc_insertion_point(field_add:city.cognition.output.v1.Heatmap.strength)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Heatmap::_internal_strength() const {
  return _impl_.strength_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Heatmap::strength() const {
  // @@protoc_insertion_point(field_list:city.cognition.output.v1.Heatmap.strength)
  return _internal_strength();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Heatmap::_internal_mutable_strength() {
  return &_impl_.strength_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Heatmap::mutable_strength() {
  // @@protoc_insertion_point(field_mutable_list:city.cognition.output.v1.Heatmap.strength)
  return _internal_mutable_strength();
}

// -------------------------------------------------------------------

// Stat

// repeated int32 crowd_cnts = 1 [json_name = "crowdCnts"];
inline int Stat::_internal_crowd_cnts_size() const {
  return _impl_.crowd_cnts_.size();
}
inline int Stat::crowd_cnts_size() const {
  return _internal_crowd_cnts_size();
}
inline void Stat::clear_crowd_cnts() {
  _impl_.crowd_cnts_.Clear();
}
inline int32_t Stat::_internal_crowd_cnts(int index) const {
  return _impl_.crowd_cnts_.Get(index);
}
inline int32_t Stat::crowd_cnts(int index) const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Stat.crowd_cnts)
  return _internal_crowd_cnts(index);
}
inline void Stat::set_crowd_cnts(int index, int32_t value) {
  _impl_.crowd_cnts_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Stat.crowd_cnts)
}
inline void Stat::_internal_add_crowd_cnts(int32_t value) {
  _impl_.crowd_cnts_.Add(value);
}
inline void Stat::add_crowd_cnts(int32_t value) {
  _internal_add_crowd_cnts(value);
  // @@protoc_insertion_point(field_add:city.cognition.output.v1.Stat.crowd_cnts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Stat::_internal_crowd_cnts() const {
  return _impl_.crowd_cnts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Stat::crowd_cnts() const {
  // @@protoc_insertion_point(field_list:city.cognition.output.v1.Stat.crowd_cnts)
  return _internal_crowd_cnts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Stat::_internal_mutable_crowd_cnts() {
  return &_impl_.crowd_cnts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Stat::mutable_crowd_cnts() {
  // @@protoc_insertion_point(field_mutable_list:city.cognition.output.v1.Stat.crowd_cnts)
  return _internal_mutable_crowd_cnts();
}

// repeated double crowd_ratios = 2 [json_name = "crowdRatios"];
inline int Stat::_internal_crowd_ratios_size() const {
  return _impl_.crowd_ratios_.size();
}
inline int Stat::crowd_ratios_size() const {
  return _internal_crowd_ratios_size();
}
inline void Stat::clear_crowd_ratios() {
  _impl_.crowd_ratios_.Clear();
}
inline double Stat::_internal_crowd_ratios(int index) const {
  return _impl_.crowd_ratios_.Get(index);
}
inline double Stat::crowd_ratios(int index) const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Stat.crowd_ratios)
  return _internal_crowd_ratios(index);
}
inline void Stat::set_crowd_ratios(int index, double value) {
  _impl_.crowd_ratios_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Stat.crowd_ratios)
}
inline void Stat::_internal_add_crowd_ratios(double value) {
  _impl_.crowd_ratios_.Add(value);
}
inline void Stat::add_crowd_ratios(double value) {
  _internal_add_crowd_ratios(value);
  // @@protoc_insertion_point(field_add:city.cognition.output.v1.Stat.crowd_ratios)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Stat::_internal_crowd_ratios() const {
  return _impl_.crowd_ratios_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Stat::crowd_ratios() const {
  // @@protoc_insertion_point(field_list:city.cognition.output.v1.Stat.crowd_ratios)
  return _internal_crowd_ratios();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Stat::_internal_mutable_crowd_ratios() {
  return &_impl_.crowd_ratios_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Stat::mutable_crowd_ratios() {
  // @@protoc_insertion_point(field_mutable_list:city.cognition.output.v1.Stat.crowd_ratios)
  return _internal_mutable_crowd_ratios();
}

// repeated int32 key_nodes = 3 [json_name = "keyNodes"];
inline int Stat::_internal_key_nodes_size() const {
  return _impl_.key_nodes_.size();
}
inline int Stat::key_nodes_size() const {
  return _internal_key_nodes_size();
}
inline void Stat::clear_key_nodes() {
  _impl_.key_nodes_.Clear();
}
inline int32_t Stat::_internal_key_nodes(int index) const {
  return _impl_.key_nodes_.Get(index);
}
inline int32_t Stat::key_nodes(int index) const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Stat.key_nodes)
  return _internal_key_nodes(index);
}
inline void Stat::set_key_nodes(int index, int32_t value) {
  _impl_.key_nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Stat.key_nodes)
}
inline void Stat::_internal_add_key_nodes(int32_t value) {
  _impl_.key_nodes_.Add(value);
}
inline void Stat::add_key_nodes(int32_t value) {
  _internal_add_key_nodes(value);
  // @@protoc_insertion_point(field_add:city.cognition.output.v1.Stat.key_nodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Stat::_internal_key_nodes() const {
  return _impl_.key_nodes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Stat::key_nodes() const {
  // @@protoc_insertion_point(field_list:city.cognition.output.v1.Stat.key_nodes)
  return _internal_key_nodes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Stat::_internal_mutable_key_nodes() {
  return &_impl_.key_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Stat::mutable_key_nodes() {
  // @@protoc_insertion_point(field_mutable_list:city.cognition.output.v1.Stat.key_nodes)
  return _internal_mutable_key_nodes();
}

// -------------------------------------------------------------------

// Content

// int32 id = 1 [json_name = "id"];
inline void Content::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Content::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Content::id() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Content.id)
  return _internal_id();
}
inline void Content::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Content::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Content.id)
}

// string text = 2 [json_name = "text"];
inline void Content::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Content::text() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Content.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Content::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Content.text)
}
inline std::string* Content::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:city.cognition.output.v1.Content.text)
  return _s;
}
inline const std::string& Content::_internal_text() const {
  return _impl_.text_.Get();
}
inline void Content::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Content::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* Content::release_text() {
  // @@protoc_insertion_point(field_release:city.cognition.output.v1.Content.text)
  return _impl_.text_.Release();
}
inline void Content::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.cognition.output.v1.Content.text)
}

// -------------------------------------------------------------------

// NodeMeta

// int32 id = 1 [json_name = "id"];
inline void NodeMeta::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t NodeMeta::_internal_id() const {
  return _impl_.id_;
}
inline int32_t NodeMeta::id() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.NodeMeta.id)
  return _internal_id();
}
inline void NodeMeta::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void NodeMeta::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.NodeMeta.id)
}

// double lng = 2 [json_name = "lng"];
inline void NodeMeta::clear_lng() {
  _impl_.lng_ = 0;
}
inline double NodeMeta::_internal_lng() const {
  return _impl_.lng_;
}
inline double NodeMeta::lng() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.NodeMeta.lng)
  return _internal_lng();
}
inline void NodeMeta::_internal_set_lng(double value) {
  
  _impl_.lng_ = value;
}
inline void NodeMeta::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.NodeMeta.lng)
}

// double lat = 3 [json_name = "lat"];
inline void NodeMeta::clear_lat() {
  _impl_.lat_ = 0;
}
inline double NodeMeta::_internal_lat() const {
  return _impl_.lat_;
}
inline double NodeMeta::lat() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.NodeMeta.lat)
  return _internal_lat();
}
inline void NodeMeta::_internal_set_lat(double value) {
  
  _impl_.lat_ = value;
}
inline void NodeMeta::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.NodeMeta.lat)
}

// int32 level = 4 [json_name = "level"];
inline void NodeMeta::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t NodeMeta::_internal_level() const {
  return _impl_.level_;
}
inline int32_t NodeMeta::level() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.NodeMeta.level)
  return _internal_level();
}
inline void NodeMeta::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void NodeMeta::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.NodeMeta.level)
}

// -------------------------------------------------------------------

// NodesMeta

// repeated .city.cognition.output.v1.NodeMeta nodes = 1 [json_name = "nodes"];
inline int NodesMeta::_internal_nodes_size() const {
  return _impl_.nodes_.size();
}
inline int NodesMeta::nodes_size() const {
  return _internal_nodes_size();
}
inline void NodesMeta::clear_nodes() {
  _impl_.nodes_.Clear();
}
inline ::city::cognition::output::v1::NodeMeta* NodesMeta::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:city.cognition.output.v1.NodesMeta.nodes)
  return _impl_.nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::NodeMeta >*
NodesMeta::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:city.cognition.output.v1.NodesMeta.nodes)
  return &_impl_.nodes_;
}
inline const ::city::cognition::output::v1::NodeMeta& NodesMeta::_internal_nodes(int index) const {
  return _impl_.nodes_.Get(index);
}
inline const ::city::cognition::output::v1::NodeMeta& NodesMeta::nodes(int index) const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.NodesMeta.nodes)
  return _internal_nodes(index);
}
inline ::city::cognition::output::v1::NodeMeta* NodesMeta::_internal_add_nodes() {
  return _impl_.nodes_.Add();
}
inline ::city::cognition::output::v1::NodeMeta* NodesMeta::add_nodes() {
  ::city::cognition::output::v1::NodeMeta* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:city.cognition.output.v1.NodesMeta.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::cognition::output::v1::NodeMeta >&
NodesMeta::nodes() const {
  // @@protoc_insertion_point(field_list:city.cognition.output.v1.NodesMeta.nodes)
  return _impl_.nodes_;
}

// -------------------------------------------------------------------

// Group

// int32 id = 1 [json_name = "id"];
inline void Group::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Group::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Group::id() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Group.id)
  return _internal_id();
}
inline void Group::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Group::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Group.id)
}

// int32 size = 2 [json_name = "size"];
inline void Group::clear_size() {
  _impl_.size_ = 0;
}
inline int32_t Group::_internal_size() const {
  return _impl_.size_;
}
inline int32_t Group::size() const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Group.size)
  return _internal_size();
}
inline void Group::_internal_set_size(int32_t value) {
  
  _impl_.size_ = value;
}
inline void Group::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Group.size)
}

// repeated int32 changes = 3 [json_name = "changes"];
inline int Group::_internal_changes_size() const {
  return _impl_.changes_.size();
}
inline int Group::changes_size() const {
  return _internal_changes_size();
}
inline void Group::clear_changes() {
  _impl_.changes_.Clear();
}
inline int32_t Group::_internal_changes(int index) const {
  return _impl_.changes_.Get(index);
}
inline int32_t Group::changes(int index) const {
  // @@protoc_insertion_point(field_get:city.cognition.output.v1.Group.changes)
  return _internal_changes(index);
}
inline void Group::set_changes(int index, int32_t value) {
  _impl_.changes_.Set(index, value);
  // @@protoc_insertion_point(field_set:city.cognition.output.v1.Group.changes)
}
inline void Group::_internal_add_changes(int32_t value) {
  _impl_.changes_.Add(value);
}
inline void Group::add_changes(int32_t value) {
  _internal_add_changes(value);
  // @@protoc_insertion_point(field_add:city.cognition.output.v1.Group.changes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Group::_internal_changes() const {
  return _impl_.changes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Group::changes() const {
  // @@protoc_insertion_point(field_list:city.cognition.output.v1.Group.changes)
  return _internal_changes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Group::_internal_mutable_changes() {
  return &_impl_.changes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Group::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:city.cognition.output.v1.Group.changes)
  return _internal_mutable_changes();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace output
}  // namespace cognition
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fcognition_2foutput_2fv1_2foutput_2eproto
