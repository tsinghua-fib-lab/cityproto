// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/agentcomm/v1/agent_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2fagentcomm_2fv1_2fagent_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2fagentcomm_2fv1_2fagent_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2fagentcomm_2fv1_2fagent_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2fagentcomm_2fv1_2fagent_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2fagentcomm_2fv1_2fagent_5fservice_2eproto;
namespace city {
namespace agentcomm {
namespace v1 {
class CommunicateRequest;
struct CommunicateRequestDefaultTypeInternal;
extern CommunicateRequestDefaultTypeInternal _CommunicateRequest_default_instance_;
class CommunicateResponse;
struct CommunicateResponseDefaultTypeInternal;
extern CommunicateResponseDefaultTypeInternal _CommunicateResponse_default_instance_;
}  // namespace v1
}  // namespace agentcomm
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::agentcomm::v1::CommunicateRequest* Arena::CreateMaybeMessage<::city::agentcomm::v1::CommunicateRequest>(Arena*);
template<> ::city::agentcomm::v1::CommunicateResponse* Arena::CreateMaybeMessage<::city::agentcomm::v1::CommunicateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace agentcomm {
namespace v1 {

// ===================================================================

class CommunicateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.agentcomm.v1.CommunicateRequest) */ {
 public:
  inline CommunicateRequest() : CommunicateRequest(nullptr) {}
  ~CommunicateRequest() override;
  explicit PROTOBUF_CONSTEXPR CommunicateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommunicateRequest(const CommunicateRequest& from);
  CommunicateRequest(CommunicateRequest&& from) noexcept
    : CommunicateRequest() {
    *this = ::std::move(from);
  }

  inline CommunicateRequest& operator=(const CommunicateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicateRequest& operator=(CommunicateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommunicateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommunicateRequest* internal_default_instance() {
    return reinterpret_cast<const CommunicateRequest*>(
               &_CommunicateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommunicateRequest& a, CommunicateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunicateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunicateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommunicateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommunicateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommunicateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommunicateRequest& from) {
    CommunicateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.agentcomm.v1.CommunicateRequest";
  }
  protected:
  explicit CommunicateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceAgentIdFieldNumber = 1,
    kTargetAgentIdFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string source_agent_id = 1 [json_name = "sourceAgentId"];
  void clear_source_agent_id();
  const std::string& source_agent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_agent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_agent_id();
  PROTOBUF_NODISCARD std::string* release_source_agent_id();
  void set_allocated_source_agent_id(std::string* source_agent_id);
  private:
  const std::string& _internal_source_agent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_agent_id(const std::string& value);
  std::string* _internal_mutable_source_agent_id();
  public:

  // string target_agent_id = 2 [json_name = "targetAgentId"];
  void clear_target_agent_id();
  const std::string& target_agent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_agent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_agent_id();
  PROTOBUF_NODISCARD std::string* release_target_agent_id();
  void set_allocated_target_agent_id(std::string* target_agent_id);
  private:
  const std::string& _internal_target_agent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_agent_id(const std::string& value);
  std::string* _internal_mutable_target_agent_id();
  public:

  // string data = 3 [json_name = "data"];
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:city.agentcomm.v1.CommunicateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_agent_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_agent_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fagentcomm_2fv1_2fagent_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CommunicateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.agentcomm.v1.CommunicateResponse) */ {
 public:
  inline CommunicateResponse() : CommunicateResponse(nullptr) {}
  ~CommunicateResponse() override;
  explicit PROTOBUF_CONSTEXPR CommunicateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommunicateResponse(const CommunicateResponse& from);
  CommunicateResponse(CommunicateResponse&& from) noexcept
    : CommunicateResponse() {
    *this = ::std::move(from);
  }

  inline CommunicateResponse& operator=(const CommunicateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunicateResponse& operator=(CommunicateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommunicateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommunicateResponse* internal_default_instance() {
    return reinterpret_cast<const CommunicateResponse*>(
               &_CommunicateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommunicateResponse& a, CommunicateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunicateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunicateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommunicateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommunicateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommunicateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommunicateResponse& from) {
    CommunicateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.agentcomm.v1.CommunicateResponse";
  }
  protected:
  explicit CommunicateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:city.agentcomm.v1.CommunicateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2fagentcomm_2fv1_2fagent_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommunicateRequest

// string source_agent_id = 1 [json_name = "sourceAgentId"];
inline void CommunicateRequest::clear_source_agent_id() {
  _impl_.source_agent_id_.ClearToEmpty();
}
inline const std::string& CommunicateRequest::source_agent_id() const {
  // @@protoc_insertion_point(field_get:city.agentcomm.v1.CommunicateRequest.source_agent_id)
  return _internal_source_agent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommunicateRequest::set_source_agent_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.source_agent_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.agentcomm.v1.CommunicateRequest.source_agent_id)
}
inline std::string* CommunicateRequest::mutable_source_agent_id() {
  std::string* _s = _internal_mutable_source_agent_id();
  // @@protoc_insertion_point(field_mutable:city.agentcomm.v1.CommunicateRequest.source_agent_id)
  return _s;
}
inline const std::string& CommunicateRequest::_internal_source_agent_id() const {
  return _impl_.source_agent_id_.Get();
}
inline void CommunicateRequest::_internal_set_source_agent_id(const std::string& value) {
  
  _impl_.source_agent_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CommunicateRequest::_internal_mutable_source_agent_id() {
  
  return _impl_.source_agent_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CommunicateRequest::release_source_agent_id() {
  // @@protoc_insertion_point(field_release:city.agentcomm.v1.CommunicateRequest.source_agent_id)
  return _impl_.source_agent_id_.Release();
}
inline void CommunicateRequest::set_allocated_source_agent_id(std::string* source_agent_id) {
  if (source_agent_id != nullptr) {
    
  } else {
    
  }
  _impl_.source_agent_id_.SetAllocated(source_agent_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_agent_id_.IsDefault()) {
    _impl_.source_agent_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.agentcomm.v1.CommunicateRequest.source_agent_id)
}

// string target_agent_id = 2 [json_name = "targetAgentId"];
inline void CommunicateRequest::clear_target_agent_id() {
  _impl_.target_agent_id_.ClearToEmpty();
}
inline const std::string& CommunicateRequest::target_agent_id() const {
  // @@protoc_insertion_point(field_get:city.agentcomm.v1.CommunicateRequest.target_agent_id)
  return _internal_target_agent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommunicateRequest::set_target_agent_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_agent_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.agentcomm.v1.CommunicateRequest.target_agent_id)
}
inline std::string* CommunicateRequest::mutable_target_agent_id() {
  std::string* _s = _internal_mutable_target_agent_id();
  // @@protoc_insertion_point(field_mutable:city.agentcomm.v1.CommunicateRequest.target_agent_id)
  return _s;
}
inline const std::string& CommunicateRequest::_internal_target_agent_id() const {
  return _impl_.target_agent_id_.Get();
}
inline void CommunicateRequest::_internal_set_target_agent_id(const std::string& value) {
  
  _impl_.target_agent_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CommunicateRequest::_internal_mutable_target_agent_id() {
  
  return _impl_.target_agent_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CommunicateRequest::release_target_agent_id() {
  // @@protoc_insertion_point(field_release:city.agentcomm.v1.CommunicateRequest.target_agent_id)
  return _impl_.target_agent_id_.Release();
}
inline void CommunicateRequest::set_allocated_target_agent_id(std::string* target_agent_id) {
  if (target_agent_id != nullptr) {
    
  } else {
    
  }
  _impl_.target_agent_id_.SetAllocated(target_agent_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_agent_id_.IsDefault()) {
    _impl_.target_agent_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.agentcomm.v1.CommunicateRequest.target_agent_id)
}

// string data = 3 [json_name = "data"];
inline void CommunicateRequest::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& CommunicateRequest::data() const {
  // @@protoc_insertion_point(field_get:city.agentcomm.v1.CommunicateRequest.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommunicateRequest::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.agentcomm.v1.CommunicateRequest.data)
}
inline std::string* CommunicateRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:city.agentcomm.v1.CommunicateRequest.data)
  return _s;
}
inline const std::string& CommunicateRequest::_internal_data() const {
  return _impl_.data_.Get();
}
inline void CommunicateRequest::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* CommunicateRequest::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* CommunicateRequest::release_data() {
  // @@protoc_insertion_point(field_release:city.agentcomm.v1.CommunicateRequest.data)
  return _impl_.data_.Release();
}
inline void CommunicateRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.agentcomm.v1.CommunicateRequest.data)
}

// -------------------------------------------------------------------

// CommunicateResponse

// string message = 1 [json_name = "message"];
inline void CommunicateResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& CommunicateResponse::message() const {
  // @@protoc_insertion_point(field_get:city.agentcomm.v1.CommunicateResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommunicateResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:city.agentcomm.v1.CommunicateResponse.message)
}
inline std::string* CommunicateResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:city.agentcomm.v1.CommunicateResponse.message)
  return _s;
}
inline const std::string& CommunicateResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void CommunicateResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* CommunicateResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* CommunicateResponse::release_message() {
  // @@protoc_insertion_point(field_release:city.agentcomm.v1.CommunicateResponse.message)
  return _impl_.message_.Release();
}
inline void CommunicateResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:city.agentcomm.v1.CommunicateResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace agentcomm
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2fagentcomm_2fv1_2fagent_5fservice_2eproto
