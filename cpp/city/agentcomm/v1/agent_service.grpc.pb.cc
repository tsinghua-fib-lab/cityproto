// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/agentcomm/v1/agent_service.proto

#include "city/agentcomm/v1/agent_service.pb.h"
#include "city/agentcomm/v1/agent_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace city {
namespace agentcomm {
namespace v1 {

static const char* AgentService_method_names[] = {
  "/city.agentcomm.v1.AgentService/Communicate",
};

std::unique_ptr< AgentService::Stub> AgentService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AgentService::Stub> stub(new AgentService::Stub(channel, options));
  return stub;
}

AgentService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Communicate_(AgentService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::city::agentcomm::v1::CommunicateRequest, ::city::agentcomm::v1::CommunicateResponse>* AgentService::Stub::CommunicateRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::city::agentcomm::v1::CommunicateRequest, ::city::agentcomm::v1::CommunicateResponse>::Create(channel_.get(), rpcmethod_Communicate_, context);
}

void AgentService::Stub::async::Communicate(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::city::agentcomm::v1::CommunicateRequest,::city::agentcomm::v1::CommunicateResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::city::agentcomm::v1::CommunicateRequest,::city::agentcomm::v1::CommunicateResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Communicate_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::city::agentcomm::v1::CommunicateRequest, ::city::agentcomm::v1::CommunicateResponse>* AgentService::Stub::AsyncCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::city::agentcomm::v1::CommunicateRequest, ::city::agentcomm::v1::CommunicateResponse>::Create(channel_.get(), cq, rpcmethod_Communicate_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::city::agentcomm::v1::CommunicateRequest, ::city::agentcomm::v1::CommunicateResponse>* AgentService::Stub::PrepareAsyncCommunicateRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::city::agentcomm::v1::CommunicateRequest, ::city::agentcomm::v1::CommunicateResponse>::Create(channel_.get(), cq, rpcmethod_Communicate_, context, false, nullptr);
}

AgentService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AgentService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< AgentService::Service, ::city::agentcomm::v1::CommunicateRequest, ::city::agentcomm::v1::CommunicateResponse>(
          [](AgentService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::city::agentcomm::v1::CommunicateResponse,
             ::city::agentcomm::v1::CommunicateRequest>* stream) {
               return service->Communicate(ctx, stream);
             }, this)));
}

AgentService::Service::~Service() {
}

::grpc::Status AgentService::Service::Communicate(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::city::agentcomm::v1::CommunicateResponse, ::city::agentcomm::v1::CommunicateRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace city
}  // namespace agentcomm
}  // namespace v1

