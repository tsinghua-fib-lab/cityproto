// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: city/sync/v1/sync_service.proto
#ifndef GRPC_city_2fsync_2fv1_2fsync_5fservice_2eproto__INCLUDED
#define GRPC_city_2fsync_2fv1_2fsync_5fservice_2eproto__INCLUDED

#include "city/sync/v1/sync_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace city {
namespace sync {
namespace v1 {

class SyncService final {
 public:
  static constexpr char const* service_full_name() {
    return "city.sync.v1.SyncService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 注册程序URL
    virtual ::grpc::Status SetURL(::grpc::ClientContext* context, const ::city::sync::v1::SetURLRequest& request, ::city::sync::v1::SetURLResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::SetURLResponse>> AsyncSetURL(::grpc::ClientContext* context, const ::city::sync::v1::SetURLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::SetURLResponse>>(AsyncSetURLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::SetURLResponse>> PrepareAsyncSetURL(::grpc::ClientContext* context, const ::city::sync::v1::SetURLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::SetURLResponse>>(PrepareAsyncSetURLRaw(context, request, cq));
    }
    // 获取程序URL
    virtual ::grpc::Status GetURL(::grpc::ClientContext* context, const ::city::sync::v1::GetURLRequest& request, ::city::sync::v1::GetURLResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::GetURLResponse>> AsyncGetURL(::grpc::ClientContext* context, const ::city::sync::v1::GetURLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::GetURLResponse>>(AsyncGetURLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::GetURLResponse>> PrepareAsyncGetURL(::grpc::ClientContext* context, const ::city::sync::v1::GetURLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::GetURLResponse>>(PrepareAsyncGetURLRaw(context, request, cq));
    }
    // 步进
    virtual ::grpc::Status Step(::grpc::ClientContext* context, const ::city::sync::v1::StepRequest& request, ::city::sync::v1::StepResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::StepResponse>> AsyncStep(::grpc::ClientContext* context, const ::city::sync::v1::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::StepResponse>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::StepResponse>> PrepareAsyncStep(::grpc::ClientContext* context, const ::city::sync::v1::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::StepResponse>>(PrepareAsyncStepRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 注册程序URL
      virtual void SetURL(::grpc::ClientContext* context, const ::city::sync::v1::SetURLRequest* request, ::city::sync::v1::SetURLResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetURL(::grpc::ClientContext* context, const ::city::sync::v1::SetURLRequest* request, ::city::sync::v1::SetURLResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 获取程序URL
      virtual void GetURL(::grpc::ClientContext* context, const ::city::sync::v1::GetURLRequest* request, ::city::sync::v1::GetURLResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetURL(::grpc::ClientContext* context, const ::city::sync::v1::GetURLRequest* request, ::city::sync::v1::GetURLResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 步进
      virtual void Step(::grpc::ClientContext* context, const ::city::sync::v1::StepRequest* request, ::city::sync::v1::StepResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Step(::grpc::ClientContext* context, const ::city::sync::v1::StepRequest* request, ::city::sync::v1::StepResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::SetURLResponse>* AsyncSetURLRaw(::grpc::ClientContext* context, const ::city::sync::v1::SetURLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::SetURLResponse>* PrepareAsyncSetURLRaw(::grpc::ClientContext* context, const ::city::sync::v1::SetURLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::GetURLResponse>* AsyncGetURLRaw(::grpc::ClientContext* context, const ::city::sync::v1::GetURLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::GetURLResponse>* PrepareAsyncGetURLRaw(::grpc::ClientContext* context, const ::city::sync::v1::GetURLRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::StepResponse>* AsyncStepRaw(::grpc::ClientContext* context, const ::city::sync::v1::StepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::city::sync::v1::StepResponse>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::city::sync::v1::StepRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetURL(::grpc::ClientContext* context, const ::city::sync::v1::SetURLRequest& request, ::city::sync::v1::SetURLResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::sync::v1::SetURLResponse>> AsyncSetURL(::grpc::ClientContext* context, const ::city::sync::v1::SetURLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::sync::v1::SetURLResponse>>(AsyncSetURLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::sync::v1::SetURLResponse>> PrepareAsyncSetURL(::grpc::ClientContext* context, const ::city::sync::v1::SetURLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::sync::v1::SetURLResponse>>(PrepareAsyncSetURLRaw(context, request, cq));
    }
    ::grpc::Status GetURL(::grpc::ClientContext* context, const ::city::sync::v1::GetURLRequest& request, ::city::sync::v1::GetURLResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::sync::v1::GetURLResponse>> AsyncGetURL(::grpc::ClientContext* context, const ::city::sync::v1::GetURLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::sync::v1::GetURLResponse>>(AsyncGetURLRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::sync::v1::GetURLResponse>> PrepareAsyncGetURL(::grpc::ClientContext* context, const ::city::sync::v1::GetURLRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::sync::v1::GetURLResponse>>(PrepareAsyncGetURLRaw(context, request, cq));
    }
    ::grpc::Status Step(::grpc::ClientContext* context, const ::city::sync::v1::StepRequest& request, ::city::sync::v1::StepResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::sync::v1::StepResponse>> AsyncStep(::grpc::ClientContext* context, const ::city::sync::v1::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::sync::v1::StepResponse>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::sync::v1::StepResponse>> PrepareAsyncStep(::grpc::ClientContext* context, const ::city::sync::v1::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::city::sync::v1::StepResponse>>(PrepareAsyncStepRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetURL(::grpc::ClientContext* context, const ::city::sync::v1::SetURLRequest* request, ::city::sync::v1::SetURLResponse* response, std::function<void(::grpc::Status)>) override;
      void SetURL(::grpc::ClientContext* context, const ::city::sync::v1::SetURLRequest* request, ::city::sync::v1::SetURLResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetURL(::grpc::ClientContext* context, const ::city::sync::v1::GetURLRequest* request, ::city::sync::v1::GetURLResponse* response, std::function<void(::grpc::Status)>) override;
      void GetURL(::grpc::ClientContext* context, const ::city::sync::v1::GetURLRequest* request, ::city::sync::v1::GetURLResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Step(::grpc::ClientContext* context, const ::city::sync::v1::StepRequest* request, ::city::sync::v1::StepResponse* response, std::function<void(::grpc::Status)>) override;
      void Step(::grpc::ClientContext* context, const ::city::sync::v1::StepRequest* request, ::city::sync::v1::StepResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::city::sync::v1::SetURLResponse>* AsyncSetURLRaw(::grpc::ClientContext* context, const ::city::sync::v1::SetURLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::sync::v1::SetURLResponse>* PrepareAsyncSetURLRaw(::grpc::ClientContext* context, const ::city::sync::v1::SetURLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::sync::v1::GetURLResponse>* AsyncGetURLRaw(::grpc::ClientContext* context, const ::city::sync::v1::GetURLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::sync::v1::GetURLResponse>* PrepareAsyncGetURLRaw(::grpc::ClientContext* context, const ::city::sync::v1::GetURLRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::sync::v1::StepResponse>* AsyncStepRaw(::grpc::ClientContext* context, const ::city::sync::v1::StepRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::city::sync::v1::StepResponse>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::city::sync::v1::StepRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetURL_;
    const ::grpc::internal::RpcMethod rpcmethod_GetURL_;
    const ::grpc::internal::RpcMethod rpcmethod_Step_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 注册程序URL
    virtual ::grpc::Status SetURL(::grpc::ServerContext* context, const ::city::sync::v1::SetURLRequest* request, ::city::sync::v1::SetURLResponse* response);
    // 获取程序URL
    virtual ::grpc::Status GetURL(::grpc::ServerContext* context, const ::city::sync::v1::GetURLRequest* request, ::city::sync::v1::GetURLResponse* response);
    // 步进
    virtual ::grpc::Status Step(::grpc::ServerContext* context, const ::city::sync::v1::StepRequest* request, ::city::sync::v1::StepResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetURL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetURL() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetURL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetURL(::grpc::ServerContext* /*context*/, const ::city::sync::v1::SetURLRequest* /*request*/, ::city::sync::v1::SetURLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetURL(::grpc::ServerContext* context, ::city::sync::v1::SetURLRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::sync::v1::SetURLResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetURL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetURL() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetURL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetURL(::grpc::ServerContext* /*context*/, const ::city::sync::v1::GetURLRequest* /*request*/, ::city::sync::v1::GetURLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetURL(::grpc::ServerContext* context, ::city::sync::v1::GetURLRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::sync::v1::GetURLResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Step() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::city::sync::v1::StepRequest* /*request*/, ::city::sync::v1::StepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::city::sync::v1::StepRequest* request, ::grpc::ServerAsyncResponseWriter< ::city::sync::v1::StepResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetURL<WithAsyncMethod_GetURL<WithAsyncMethod_Step<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetURL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetURL() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::city::sync::v1::SetURLRequest, ::city::sync::v1::SetURLResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::sync::v1::SetURLRequest* request, ::city::sync::v1::SetURLResponse* response) { return this->SetURL(context, request, response); }));}
    void SetMessageAllocatorFor_SetURL(
        ::grpc::MessageAllocator< ::city::sync::v1::SetURLRequest, ::city::sync::v1::SetURLResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::sync::v1::SetURLRequest, ::city::sync::v1::SetURLResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetURL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetURL(::grpc::ServerContext* /*context*/, const ::city::sync::v1::SetURLRequest* /*request*/, ::city::sync::v1::SetURLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetURL(
      ::grpc::CallbackServerContext* /*context*/, const ::city::sync::v1::SetURLRequest* /*request*/, ::city::sync::v1::SetURLResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetURL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetURL() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::city::sync::v1::GetURLRequest, ::city::sync::v1::GetURLResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::sync::v1::GetURLRequest* request, ::city::sync::v1::GetURLResponse* response) { return this->GetURL(context, request, response); }));}
    void SetMessageAllocatorFor_GetURL(
        ::grpc::MessageAllocator< ::city::sync::v1::GetURLRequest, ::city::sync::v1::GetURLResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::sync::v1::GetURLRequest, ::city::sync::v1::GetURLResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetURL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetURL(::grpc::ServerContext* /*context*/, const ::city::sync::v1::GetURLRequest* /*request*/, ::city::sync::v1::GetURLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetURL(
      ::grpc::CallbackServerContext* /*context*/, const ::city::sync::v1::GetURLRequest* /*request*/, ::city::sync::v1::GetURLResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Step() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::city::sync::v1::StepRequest, ::city::sync::v1::StepResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::city::sync::v1::StepRequest* request, ::city::sync::v1::StepResponse* response) { return this->Step(context, request, response); }));}
    void SetMessageAllocatorFor_Step(
        ::grpc::MessageAllocator< ::city::sync::v1::StepRequest, ::city::sync::v1::StepResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::city::sync::v1::StepRequest, ::city::sync::v1::StepResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::city::sync::v1::StepRequest* /*request*/, ::city::sync::v1::StepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Step(
      ::grpc::CallbackServerContext* /*context*/, const ::city::sync::v1::StepRequest* /*request*/, ::city::sync::v1::StepResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetURL<WithCallbackMethod_GetURL<WithCallbackMethod_Step<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetURL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetURL() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetURL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetURL(::grpc::ServerContext* /*context*/, const ::city::sync::v1::SetURLRequest* /*request*/, ::city::sync::v1::SetURLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetURL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetURL() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetURL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetURL(::grpc::ServerContext* /*context*/, const ::city::sync::v1::GetURLRequest* /*request*/, ::city::sync::v1::GetURLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Step() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::city::sync::v1::StepRequest* /*request*/, ::city::sync::v1::StepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetURL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetURL() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetURL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetURL(::grpc::ServerContext* /*context*/, const ::city::sync::v1::SetURLRequest* /*request*/, ::city::sync::v1::SetURLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetURL(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetURL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetURL() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetURL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetURL(::grpc::ServerContext* /*context*/, const ::city::sync::v1::GetURLRequest* /*request*/, ::city::sync::v1::GetURLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetURL(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Step() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::city::sync::v1::StepRequest* /*request*/, ::city::sync::v1::StepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetURL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetURL() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetURL(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetURL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetURL(::grpc::ServerContext* /*context*/, const ::city::sync::v1::SetURLRequest* /*request*/, ::city::sync::v1::SetURLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetURL(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetURL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetURL() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetURL(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetURL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetURL(::grpc::ServerContext* /*context*/, const ::city::sync::v1::GetURLRequest* /*request*/, ::city::sync::v1::GetURLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetURL(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Step() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Step(context, request, response); }));
    }
    ~WithRawCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::city::sync::v1::StepRequest* /*request*/, ::city::sync::v1::StepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Step(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetURL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetURL() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::sync::v1::SetURLRequest, ::city::sync::v1::SetURLResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::sync::v1::SetURLRequest, ::city::sync::v1::SetURLResponse>* streamer) {
                       return this->StreamedSetURL(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetURL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetURL(::grpc::ServerContext* /*context*/, const ::city::sync::v1::SetURLRequest* /*request*/, ::city::sync::v1::SetURLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetURL(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::sync::v1::SetURLRequest,::city::sync::v1::SetURLResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetURL : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetURL() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::sync::v1::GetURLRequest, ::city::sync::v1::GetURLResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::sync::v1::GetURLRequest, ::city::sync::v1::GetURLResponse>* streamer) {
                       return this->StreamedGetURL(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetURL() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetURL(::grpc::ServerContext* /*context*/, const ::city::sync::v1::GetURLRequest* /*request*/, ::city::sync::v1::GetURLResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetURL(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::sync::v1::GetURLRequest,::city::sync::v1::GetURLResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Step() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::city::sync::v1::StepRequest, ::city::sync::v1::StepResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::city::sync::v1::StepRequest, ::city::sync::v1::StepResponse>* streamer) {
                       return this->StreamedStep(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::city::sync::v1::StepRequest* /*request*/, ::city::sync::v1::StepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::city::sync::v1::StepRequest,::city::sync::v1::StepResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetURL<WithStreamedUnaryMethod_GetURL<WithStreamedUnaryMethod_Step<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetURL<WithStreamedUnaryMethod_GetURL<WithStreamedUnaryMethod_Step<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace sync
}  // namespace city


#endif  // GRPC_city_2fsync_2fv1_2fsync_5fservice_2eproto__INCLUDED
