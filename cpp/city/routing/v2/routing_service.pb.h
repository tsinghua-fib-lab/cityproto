// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/routing/v2/routing_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_city_2frouting_2fv2_2frouting_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_city_2frouting_2fv2_2frouting_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "city/geo/v2/geo.pb.h"
#include "city/routing/v2/cost.pb.h"
#include "city/routing/v2/routing.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_city_2frouting_2fv2_2frouting_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_city_2frouting_2fv2_2frouting_5fservice_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_city_2frouting_2fv2_2frouting_5fservice_2eproto;
namespace city {
namespace routing {
namespace v2 {
class GetDrivingCostsRequest;
struct GetDrivingCostsRequestDefaultTypeInternal;
extern GetDrivingCostsRequestDefaultTypeInternal _GetDrivingCostsRequest_default_instance_;
class GetDrivingCostsResponse;
struct GetDrivingCostsResponseDefaultTypeInternal;
extern GetDrivingCostsResponseDefaultTypeInternal _GetDrivingCostsResponse_default_instance_;
class GetRouteRequest;
struct GetRouteRequestDefaultTypeInternal;
extern GetRouteRequestDefaultTypeInternal _GetRouteRequest_default_instance_;
class GetRouteResponse;
struct GetRouteResponseDefaultTypeInternal;
extern GetRouteResponseDefaultTypeInternal _GetRouteResponse_default_instance_;
class SetDrivingCostsRequest;
struct SetDrivingCostsRequestDefaultTypeInternal;
extern SetDrivingCostsRequestDefaultTypeInternal _SetDrivingCostsRequest_default_instance_;
class SetDrivingCostsResponse;
struct SetDrivingCostsResponseDefaultTypeInternal;
extern SetDrivingCostsResponseDefaultTypeInternal _SetDrivingCostsResponse_default_instance_;
}  // namespace v2
}  // namespace routing
}  // namespace city
PROTOBUF_NAMESPACE_OPEN
template<> ::city::routing::v2::GetDrivingCostsRequest* Arena::CreateMaybeMessage<::city::routing::v2::GetDrivingCostsRequest>(Arena*);
template<> ::city::routing::v2::GetDrivingCostsResponse* Arena::CreateMaybeMessage<::city::routing::v2::GetDrivingCostsResponse>(Arena*);
template<> ::city::routing::v2::GetRouteRequest* Arena::CreateMaybeMessage<::city::routing::v2::GetRouteRequest>(Arena*);
template<> ::city::routing::v2::GetRouteResponse* Arena::CreateMaybeMessage<::city::routing::v2::GetRouteResponse>(Arena*);
template<> ::city::routing::v2::SetDrivingCostsRequest* Arena::CreateMaybeMessage<::city::routing::v2::SetDrivingCostsRequest>(Arena*);
template<> ::city::routing::v2::SetDrivingCostsResponse* Arena::CreateMaybeMessage<::city::routing::v2::SetDrivingCostsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace city {
namespace routing {
namespace v2 {

// ===================================================================

class GetRouteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.routing.v2.GetRouteRequest) */ {
 public:
  inline GetRouteRequest() : GetRouteRequest(nullptr) {}
  ~GetRouteRequest() override;
  explicit PROTOBUF_CONSTEXPR GetRouteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRouteRequest(const GetRouteRequest& from);
  GetRouteRequest(GetRouteRequest&& from) noexcept
    : GetRouteRequest() {
    *this = ::std::move(from);
  }

  inline GetRouteRequest& operator=(const GetRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRouteRequest& operator=(GetRouteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRouteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRouteRequest* internal_default_instance() {
    return reinterpret_cast<const GetRouteRequest*>(
               &_GetRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetRouteRequest& a, GetRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRouteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRouteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRouteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRouteRequest& from) {
    GetRouteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRouteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.routing.v2.GetRouteRequest";
  }
  protected:
  explicit GetRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kTimeFieldNumber = 5,
    kTypeFieldNumber = 1,
  };
  // .city.geo.v2.Position start = 2 [json_name = "start"];
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::city::geo::v2::Position& start() const;
  PROTOBUF_NODISCARD ::city::geo::v2::Position* release_start();
  ::city::geo::v2::Position* mutable_start();
  void set_allocated_start(::city::geo::v2::Position* start);
  private:
  const ::city::geo::v2::Position& _internal_start() const;
  ::city::geo::v2::Position* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::city::geo::v2::Position* start);
  ::city::geo::v2::Position* unsafe_arena_release_start();

  // .city.geo.v2.Position end = 3 [json_name = "end"];
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::city::geo::v2::Position& end() const;
  PROTOBUF_NODISCARD ::city::geo::v2::Position* release_end();
  ::city::geo::v2::Position* mutable_end();
  void set_allocated_end(::city::geo::v2::Position* end);
  private:
  const ::city::geo::v2::Position& _internal_end() const;
  ::city::geo::v2::Position* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::city::geo::v2::Position* end);
  ::city::geo::v2::Position* unsafe_arena_release_end();

  // double time = 5 [json_name = "time"];
  void clear_time();
  double time() const;
  void set_time(double value);
  private:
  double _internal_time() const;
  void _internal_set_time(double value);
  public:

  // .city.routing.v2.RouteType type = 1 [json_name = "type"];
  void clear_type();
  ::city::routing::v2::RouteType type() const;
  void set_type(::city::routing::v2::RouteType value);
  private:
  ::city::routing::v2::RouteType _internal_type() const;
  void _internal_set_type(::city::routing::v2::RouteType value);
  public:

  // @@protoc_insertion_point(class_scope:city.routing.v2.GetRouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::city::geo::v2::Position* start_;
    ::city::geo::v2::Position* end_;
    double time_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2frouting_2fv2_2frouting_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetRouteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.routing.v2.GetRouteResponse) */ {
 public:
  inline GetRouteResponse() : GetRouteResponse(nullptr) {}
  ~GetRouteResponse() override;
  explicit PROTOBUF_CONSTEXPR GetRouteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRouteResponse(const GetRouteResponse& from);
  GetRouteResponse(GetRouteResponse&& from) noexcept
    : GetRouteResponse() {
    *this = ::std::move(from);
  }

  inline GetRouteResponse& operator=(const GetRouteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRouteResponse& operator=(GetRouteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRouteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRouteResponse* internal_default_instance() {
    return reinterpret_cast<const GetRouteResponse*>(
               &_GetRouteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetRouteResponse& a, GetRouteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRouteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRouteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRouteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRouteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRouteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRouteResponse& from) {
    GetRouteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRouteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.routing.v2.GetRouteResponse";
  }
  protected:
  explicit GetRouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJourneysFieldNumber = 1,
  };
  // repeated .city.routing.v2.Journey journeys = 1 [json_name = "journeys"];
  int journeys_size() const;
  private:
  int _internal_journeys_size() const;
  public:
  void clear_journeys();
  ::city::routing::v2::Journey* mutable_journeys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Journey >*
      mutable_journeys();
  private:
  const ::city::routing::v2::Journey& _internal_journeys(int index) const;
  ::city::routing::v2::Journey* _internal_add_journeys();
  public:
  const ::city::routing::v2::Journey& journeys(int index) const;
  ::city::routing::v2::Journey* add_journeys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Journey >&
      journeys() const;

  // @@protoc_insertion_point(class_scope:city.routing.v2.GetRouteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Journey > journeys_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2frouting_2fv2_2frouting_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetDrivingCostsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.routing.v2.SetDrivingCostsRequest) */ {
 public:
  inline SetDrivingCostsRequest() : SetDrivingCostsRequest(nullptr) {}
  ~SetDrivingCostsRequest() override;
  explicit PROTOBUF_CONSTEXPR SetDrivingCostsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetDrivingCostsRequest(const SetDrivingCostsRequest& from);
  SetDrivingCostsRequest(SetDrivingCostsRequest&& from) noexcept
    : SetDrivingCostsRequest() {
    *this = ::std::move(from);
  }

  inline SetDrivingCostsRequest& operator=(const SetDrivingCostsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDrivingCostsRequest& operator=(SetDrivingCostsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetDrivingCostsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetDrivingCostsRequest* internal_default_instance() {
    return reinterpret_cast<const SetDrivingCostsRequest*>(
               &_SetDrivingCostsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetDrivingCostsRequest& a, SetDrivingCostsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDrivingCostsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDrivingCostsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetDrivingCostsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetDrivingCostsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetDrivingCostsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetDrivingCostsRequest& from) {
    SetDrivingCostsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetDrivingCostsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.routing.v2.SetDrivingCostsRequest";
  }
  protected:
  explicit SetDrivingCostsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCostsFieldNumber = 1,
  };
  // repeated .city.routing.v2.Cost costs = 1 [json_name = "costs"];
  int costs_size() const;
  private:
  int _internal_costs_size() const;
  public:
  void clear_costs();
  ::city::routing::v2::Cost* mutable_costs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Cost >*
      mutable_costs();
  private:
  const ::city::routing::v2::Cost& _internal_costs(int index) const;
  ::city::routing::v2::Cost* _internal_add_costs();
  public:
  const ::city::routing::v2::Cost& costs(int index) const;
  ::city::routing::v2::Cost* add_costs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Cost >&
      costs() const;

  // @@protoc_insertion_point(class_scope:city.routing.v2.SetDrivingCostsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Cost > costs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2frouting_2fv2_2frouting_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetDrivingCostsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:city.routing.v2.SetDrivingCostsResponse) */ {
 public:
  inline SetDrivingCostsResponse() : SetDrivingCostsResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetDrivingCostsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetDrivingCostsResponse(const SetDrivingCostsResponse& from);
  SetDrivingCostsResponse(SetDrivingCostsResponse&& from) noexcept
    : SetDrivingCostsResponse() {
    *this = ::std::move(from);
  }

  inline SetDrivingCostsResponse& operator=(const SetDrivingCostsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetDrivingCostsResponse& operator=(SetDrivingCostsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetDrivingCostsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetDrivingCostsResponse* internal_default_instance() {
    return reinterpret_cast<const SetDrivingCostsResponse*>(
               &_SetDrivingCostsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetDrivingCostsResponse& a, SetDrivingCostsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetDrivingCostsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetDrivingCostsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetDrivingCostsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetDrivingCostsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetDrivingCostsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetDrivingCostsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.routing.v2.SetDrivingCostsResponse";
  }
  protected:
  explicit SetDrivingCostsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:city.routing.v2.SetDrivingCostsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_city_2frouting_2fv2_2frouting_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDrivingCostsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.routing.v2.GetDrivingCostsRequest) */ {
 public:
  inline GetDrivingCostsRequest() : GetDrivingCostsRequest(nullptr) {}
  ~GetDrivingCostsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDrivingCostsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDrivingCostsRequest(const GetDrivingCostsRequest& from);
  GetDrivingCostsRequest(GetDrivingCostsRequest&& from) noexcept
    : GetDrivingCostsRequest() {
    *this = ::std::move(from);
  }

  inline GetDrivingCostsRequest& operator=(const GetDrivingCostsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDrivingCostsRequest& operator=(GetDrivingCostsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDrivingCostsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDrivingCostsRequest* internal_default_instance() {
    return reinterpret_cast<const GetDrivingCostsRequest*>(
               &_GetDrivingCostsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetDrivingCostsRequest& a, GetDrivingCostsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDrivingCostsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDrivingCostsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDrivingCostsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDrivingCostsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDrivingCostsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDrivingCostsRequest& from) {
    GetDrivingCostsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDrivingCostsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.routing.v2.GetDrivingCostsRequest";
  }
  protected:
  explicit GetDrivingCostsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCostsFieldNumber = 1,
  };
  // repeated .city.routing.v2.Cost costs = 1 [json_name = "costs"];
  int costs_size() const;
  private:
  int _internal_costs_size() const;
  public:
  void clear_costs();
  ::city::routing::v2::Cost* mutable_costs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Cost >*
      mutable_costs();
  private:
  const ::city::routing::v2::Cost& _internal_costs(int index) const;
  ::city::routing::v2::Cost* _internal_add_costs();
  public:
  const ::city::routing::v2::Cost& costs(int index) const;
  ::city::routing::v2::Cost* add_costs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Cost >&
      costs() const;

  // @@protoc_insertion_point(class_scope:city.routing.v2.GetDrivingCostsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Cost > costs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2frouting_2fv2_2frouting_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetDrivingCostsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:city.routing.v2.GetDrivingCostsResponse) */ {
 public:
  inline GetDrivingCostsResponse() : GetDrivingCostsResponse(nullptr) {}
  ~GetDrivingCostsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDrivingCostsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDrivingCostsResponse(const GetDrivingCostsResponse& from);
  GetDrivingCostsResponse(GetDrivingCostsResponse&& from) noexcept
    : GetDrivingCostsResponse() {
    *this = ::std::move(from);
  }

  inline GetDrivingCostsResponse& operator=(const GetDrivingCostsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDrivingCostsResponse& operator=(GetDrivingCostsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDrivingCostsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDrivingCostsResponse* internal_default_instance() {
    return reinterpret_cast<const GetDrivingCostsResponse*>(
               &_GetDrivingCostsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetDrivingCostsResponse& a, GetDrivingCostsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDrivingCostsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDrivingCostsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDrivingCostsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDrivingCostsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDrivingCostsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDrivingCostsResponse& from) {
    GetDrivingCostsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDrivingCostsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "city.routing.v2.GetDrivingCostsResponse";
  }
  protected:
  explicit GetDrivingCostsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCostsFieldNumber = 1,
  };
  // repeated .city.routing.v2.Cost costs = 1 [json_name = "costs"];
  int costs_size() const;
  private:
  int _internal_costs_size() const;
  public:
  void clear_costs();
  ::city::routing::v2::Cost* mutable_costs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Cost >*
      mutable_costs();
  private:
  const ::city::routing::v2::Cost& _internal_costs(int index) const;
  ::city::routing::v2::Cost* _internal_add_costs();
  public:
  const ::city::routing::v2::Cost& costs(int index) const;
  ::city::routing::v2::Cost* add_costs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Cost >&
      costs() const;

  // @@protoc_insertion_point(class_scope:city.routing.v2.GetDrivingCostsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Cost > costs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_city_2frouting_2fv2_2frouting_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetRouteRequest

// .city.routing.v2.RouteType type = 1 [json_name = "type"];
inline void GetRouteRequest::clear_type() {
  _impl_.type_ = 0;
}
inline ::city::routing::v2::RouteType GetRouteRequest::_internal_type() const {
  return static_cast< ::city::routing::v2::RouteType >(_impl_.type_);
}
inline ::city::routing::v2::RouteType GetRouteRequest::type() const {
  // @@protoc_insertion_point(field_get:city.routing.v2.GetRouteRequest.type)
  return _internal_type();
}
inline void GetRouteRequest::_internal_set_type(::city::routing::v2::RouteType value) {
  
  _impl_.type_ = value;
}
inline void GetRouteRequest::set_type(::city::routing::v2::RouteType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:city.routing.v2.GetRouteRequest.type)
}

// .city.geo.v2.Position start = 2 [json_name = "start"];
inline bool GetRouteRequest::_internal_has_start() const {
  return this != internal_default_instance() && _impl_.start_ != nullptr;
}
inline bool GetRouteRequest::has_start() const {
  return _internal_has_start();
}
inline const ::city::geo::v2::Position& GetRouteRequest::_internal_start() const {
  const ::city::geo::v2::Position* p = _impl_.start_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::Position&>(
      ::city::geo::v2::_Position_default_instance_);
}
inline const ::city::geo::v2::Position& GetRouteRequest::start() const {
  // @@protoc_insertion_point(field_get:city.routing.v2.GetRouteRequest.start)
  return _internal_start();
}
inline void GetRouteRequest::unsafe_arena_set_allocated_start(
    ::city::geo::v2::Position* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_);
  }
  _impl_.start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.routing.v2.GetRouteRequest.start)
}
inline ::city::geo::v2::Position* GetRouteRequest::release_start() {
  
  ::city::geo::v2::Position* temp = _impl_.start_;
  _impl_.start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::geo::v2::Position* GetRouteRequest::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:city.routing.v2.GetRouteRequest.start)
  
  ::city::geo::v2::Position* temp = _impl_.start_;
  _impl_.start_ = nullptr;
  return temp;
}
inline ::city::geo::v2::Position* GetRouteRequest::_internal_mutable_start() {
  
  if (_impl_.start_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::Position>(GetArenaForAllocation());
    _impl_.start_ = p;
  }
  return _impl_.start_;
}
inline ::city::geo::v2::Position* GetRouteRequest::mutable_start() {
  ::city::geo::v2::Position* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:city.routing.v2.GetRouteRequest.start)
  return _msg;
}
inline void GetRouteRequest::set_allocated_start(::city::geo::v2::Position* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start));
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_ = start;
  // @@protoc_insertion_point(field_set_allocated:city.routing.v2.GetRouteRequest.start)
}

// .city.geo.v2.Position end = 3 [json_name = "end"];
inline bool GetRouteRequest::_internal_has_end() const {
  return this != internal_default_instance() && _impl_.end_ != nullptr;
}
inline bool GetRouteRequest::has_end() const {
  return _internal_has_end();
}
inline const ::city::geo::v2::Position& GetRouteRequest::_internal_end() const {
  const ::city::geo::v2::Position* p = _impl_.end_;
  return p != nullptr ? *p : reinterpret_cast<const ::city::geo::v2::Position&>(
      ::city::geo::v2::_Position_default_instance_);
}
inline const ::city::geo::v2::Position& GetRouteRequest::end() const {
  // @@protoc_insertion_point(field_get:city.routing.v2.GetRouteRequest.end)
  return _internal_end();
}
inline void GetRouteRequest::unsafe_arena_set_allocated_end(
    ::city::geo::v2::Position* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_);
  }
  _impl_.end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:city.routing.v2.GetRouteRequest.end)
}
inline ::city::geo::v2::Position* GetRouteRequest::release_end() {
  
  ::city::geo::v2::Position* temp = _impl_.end_;
  _impl_.end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::city::geo::v2::Position* GetRouteRequest::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:city.routing.v2.GetRouteRequest.end)
  
  ::city::geo::v2::Position* temp = _impl_.end_;
  _impl_.end_ = nullptr;
  return temp;
}
inline ::city::geo::v2::Position* GetRouteRequest::_internal_mutable_end() {
  
  if (_impl_.end_ == nullptr) {
    auto* p = CreateMaybeMessage<::city::geo::v2::Position>(GetArenaForAllocation());
    _impl_.end_ = p;
  }
  return _impl_.end_;
}
inline ::city::geo::v2::Position* GetRouteRequest::mutable_end() {
  ::city::geo::v2::Position* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:city.routing.v2.GetRouteRequest.end)
  return _msg;
}
inline void GetRouteRequest::set_allocated_end(::city::geo::v2::Position* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end));
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_ = end;
  // @@protoc_insertion_point(field_set_allocated:city.routing.v2.GetRouteRequest.end)
}

// double time = 5 [json_name = "time"];
inline void GetRouteRequest::clear_time() {
  _impl_.time_ = 0;
}
inline double GetRouteRequest::_internal_time() const {
  return _impl_.time_;
}
inline double GetRouteRequest::time() const {
  // @@protoc_insertion_point(field_get:city.routing.v2.GetRouteRequest.time)
  return _internal_time();
}
inline void GetRouteRequest::_internal_set_time(double value) {
  
  _impl_.time_ = value;
}
inline void GetRouteRequest::set_time(double value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:city.routing.v2.GetRouteRequest.time)
}

// -------------------------------------------------------------------

// GetRouteResponse

// repeated .city.routing.v2.Journey journeys = 1 [json_name = "journeys"];
inline int GetRouteResponse::_internal_journeys_size() const {
  return _impl_.journeys_.size();
}
inline int GetRouteResponse::journeys_size() const {
  return _internal_journeys_size();
}
inline ::city::routing::v2::Journey* GetRouteResponse::mutable_journeys(int index) {
  // @@protoc_insertion_point(field_mutable:city.routing.v2.GetRouteResponse.journeys)
  return _impl_.journeys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Journey >*
GetRouteResponse::mutable_journeys() {
  // @@protoc_insertion_point(field_mutable_list:city.routing.v2.GetRouteResponse.journeys)
  return &_impl_.journeys_;
}
inline const ::city::routing::v2::Journey& GetRouteResponse::_internal_journeys(int index) const {
  return _impl_.journeys_.Get(index);
}
inline const ::city::routing::v2::Journey& GetRouteResponse::journeys(int index) const {
  // @@protoc_insertion_point(field_get:city.routing.v2.GetRouteResponse.journeys)
  return _internal_journeys(index);
}
inline ::city::routing::v2::Journey* GetRouteResponse::_internal_add_journeys() {
  return _impl_.journeys_.Add();
}
inline ::city::routing::v2::Journey* GetRouteResponse::add_journeys() {
  ::city::routing::v2::Journey* _add = _internal_add_journeys();
  // @@protoc_insertion_point(field_add:city.routing.v2.GetRouteResponse.journeys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Journey >&
GetRouteResponse::journeys() const {
  // @@protoc_insertion_point(field_list:city.routing.v2.GetRouteResponse.journeys)
  return _impl_.journeys_;
}

// -------------------------------------------------------------------

// SetDrivingCostsRequest

// repeated .city.routing.v2.Cost costs = 1 [json_name = "costs"];
inline int SetDrivingCostsRequest::_internal_costs_size() const {
  return _impl_.costs_.size();
}
inline int SetDrivingCostsRequest::costs_size() const {
  return _internal_costs_size();
}
inline ::city::routing::v2::Cost* SetDrivingCostsRequest::mutable_costs(int index) {
  // @@protoc_insertion_point(field_mutable:city.routing.v2.SetDrivingCostsRequest.costs)
  return _impl_.costs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Cost >*
SetDrivingCostsRequest::mutable_costs() {
  // @@protoc_insertion_point(field_mutable_list:city.routing.v2.SetDrivingCostsRequest.costs)
  return &_impl_.costs_;
}
inline const ::city::routing::v2::Cost& SetDrivingCostsRequest::_internal_costs(int index) const {
  return _impl_.costs_.Get(index);
}
inline const ::city::routing::v2::Cost& SetDrivingCostsRequest::costs(int index) const {
  // @@protoc_insertion_point(field_get:city.routing.v2.SetDrivingCostsRequest.costs)
  return _internal_costs(index);
}
inline ::city::routing::v2::Cost* SetDrivingCostsRequest::_internal_add_costs() {
  return _impl_.costs_.Add();
}
inline ::city::routing::v2::Cost* SetDrivingCostsRequest::add_costs() {
  ::city::routing::v2::Cost* _add = _internal_add_costs();
  // @@protoc_insertion_point(field_add:city.routing.v2.SetDrivingCostsRequest.costs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Cost >&
SetDrivingCostsRequest::costs() const {
  // @@protoc_insertion_point(field_list:city.routing.v2.SetDrivingCostsRequest.costs)
  return _impl_.costs_;
}

// -------------------------------------------------------------------

// SetDrivingCostsResponse

// -------------------------------------------------------------------

// GetDrivingCostsRequest

// repeated .city.routing.v2.Cost costs = 1 [json_name = "costs"];
inline int GetDrivingCostsRequest::_internal_costs_size() const {
  return _impl_.costs_.size();
}
inline int GetDrivingCostsRequest::costs_size() const {
  return _internal_costs_size();
}
inline ::city::routing::v2::Cost* GetDrivingCostsRequest::mutable_costs(int index) {
  // @@protoc_insertion_point(field_mutable:city.routing.v2.GetDrivingCostsRequest.costs)
  return _impl_.costs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Cost >*
GetDrivingCostsRequest::mutable_costs() {
  // @@protoc_insertion_point(field_mutable_list:city.routing.v2.GetDrivingCostsRequest.costs)
  return &_impl_.costs_;
}
inline const ::city::routing::v2::Cost& GetDrivingCostsRequest::_internal_costs(int index) const {
  return _impl_.costs_.Get(index);
}
inline const ::city::routing::v2::Cost& GetDrivingCostsRequest::costs(int index) const {
  // @@protoc_insertion_point(field_get:city.routing.v2.GetDrivingCostsRequest.costs)
  return _internal_costs(index);
}
inline ::city::routing::v2::Cost* GetDrivingCostsRequest::_internal_add_costs() {
  return _impl_.costs_.Add();
}
inline ::city::routing::v2::Cost* GetDrivingCostsRequest::add_costs() {
  ::city::routing::v2::Cost* _add = _internal_add_costs();
  // @@protoc_insertion_point(field_add:city.routing.v2.GetDrivingCostsRequest.costs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Cost >&
GetDrivingCostsRequest::costs() const {
  // @@protoc_insertion_point(field_list:city.routing.v2.GetDrivingCostsRequest.costs)
  return _impl_.costs_;
}

// -------------------------------------------------------------------

// GetDrivingCostsResponse

// repeated .city.routing.v2.Cost costs = 1 [json_name = "costs"];
inline int GetDrivingCostsResponse::_internal_costs_size() const {
  return _impl_.costs_.size();
}
inline int GetDrivingCostsResponse::costs_size() const {
  return _internal_costs_size();
}
inline ::city::routing::v2::Cost* GetDrivingCostsResponse::mutable_costs(int index) {
  // @@protoc_insertion_point(field_mutable:city.routing.v2.GetDrivingCostsResponse.costs)
  return _impl_.costs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Cost >*
GetDrivingCostsResponse::mutable_costs() {
  // @@protoc_insertion_point(field_mutable_list:city.routing.v2.GetDrivingCostsResponse.costs)
  return &_impl_.costs_;
}
inline const ::city::routing::v2::Cost& GetDrivingCostsResponse::_internal_costs(int index) const {
  return _impl_.costs_.Get(index);
}
inline const ::city::routing::v2::Cost& GetDrivingCostsResponse::costs(int index) const {
  // @@protoc_insertion_point(field_get:city.routing.v2.GetDrivingCostsResponse.costs)
  return _internal_costs(index);
}
inline ::city::routing::v2::Cost* GetDrivingCostsResponse::_internal_add_costs() {
  return _impl_.costs_.Add();
}
inline ::city::routing::v2::Cost* GetDrivingCostsResponse::add_costs() {
  ::city::routing::v2::Cost* _add = _internal_add_costs();
  // @@protoc_insertion_point(field_add:city.routing.v2.GetDrivingCostsResponse.costs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::city::routing::v2::Cost >&
GetDrivingCostsResponse::costs() const {
  // @@protoc_insertion_point(field_list:city.routing.v2.GetDrivingCostsResponse.costs)
  return _impl_.costs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace routing
}  // namespace city

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_city_2frouting_2fv2_2frouting_5fservice_2eproto
