// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: city/routing/v2/cost.proto

#include "city/routing/v2/cost.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace city {
namespace routing {
namespace v2 {
        template <typename>
PROTOBUF_CONSTEXPR Cost::Cost(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.cost_)*/ 0,
      /*decltype(_impl_.time_)*/ 0,
      /*decltype(_impl_.id_)*/ 0,
    } {}
struct CostDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CostDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CostDefaultTypeInternal() {}
  union {
    Cost _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CostDefaultTypeInternal _Cost_default_instance_;
}  // namespace v2
}  // namespace routing
}  // namespace city
static ::_pb::Metadata file_level_metadata_city_2frouting_2fv2_2fcost_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_city_2frouting_2fv2_2fcost_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_city_2frouting_2fv2_2fcost_2eproto = nullptr;
const ::uint32_t TableStruct_city_2frouting_2fv2_2fcost_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::city::routing::v2::Cost, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::city::routing::v2::Cost, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::city::routing::v2::Cost, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::city::routing::v2::Cost, _impl_.cost_),
    PROTOBUF_FIELD_OFFSET(::city::routing::v2::Cost, _impl_.time_),
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::city::routing::v2::Cost)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::city::routing::v2::_Cost_default_instance_._instance,
};
const char descriptor_table_protodef_city_2frouting_2fv2_2fcost_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\032city/routing/v2/cost.proto\022\017city.routi"
    "ng.v2\"L\n\004Cost\022\016\n\002id\030\001 \001(\005R\002id\022\022\n\004cost\030\002 "
    "\001(\001R\004cost\022\027\n\004time\030\003 \001(\001H\000R\004time\210\001\001B\007\n\005_t"
    "imeB\266\001\n\023com.city.routing.v2B\tCostProtoP\001"
    "Z6git.fiblab.net/sim/protos/go/city/rout"
    "ing/v2;routingv2\242\002\003CRX\252\002\017City.Routing.V2"
    "\312\002\017City\\Routing\\V2\342\002\033City\\Routing\\V2\\GPB"
    "Metadata\352\002\021City::Routing::V2b\006proto3"
};
static ::absl::once_flag descriptor_table_city_2frouting_2fv2_2fcost_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_city_2frouting_2fv2_2fcost_2eproto = {
    false,
    false,
    316,
    descriptor_table_protodef_city_2frouting_2fv2_2fcost_2eproto,
    "city/routing/v2/cost.proto",
    &descriptor_table_city_2frouting_2fv2_2fcost_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_city_2frouting_2fv2_2fcost_2eproto::offsets,
    file_level_metadata_city_2frouting_2fv2_2fcost_2eproto,
    file_level_enum_descriptors_city_2frouting_2fv2_2fcost_2eproto,
    file_level_service_descriptors_city_2frouting_2fv2_2fcost_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_city_2frouting_2fv2_2fcost_2eproto_getter() {
  return &descriptor_table_city_2frouting_2fv2_2fcost_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_city_2frouting_2fv2_2fcost_2eproto(&descriptor_table_city_2frouting_2fv2_2fcost_2eproto);
namespace city {
namespace routing {
namespace v2 {
// ===================================================================

class Cost::_Internal {
 public:
  using HasBits = decltype(std::declval<Cost>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Cost, _impl_._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Cost::Cost(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:city.routing.v2.Cost)
}
Cost::Cost(const Cost& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:city.routing.v2.Cost)
}
inline void Cost::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.cost_){0},
      decltype(_impl_.time_){0},
      decltype(_impl_.id_){0},
  };
}
Cost::~Cost() {
  // @@protoc_insertion_point(destructor:city.routing.v2.Cost)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Cost::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void Cost::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void Cost::Clear() {
// @@protoc_insertion_point(message_clear_start:city.routing.v2.Cost)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cost_ = 0;
  _impl_.time_ = 0;
  _impl_.id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Cost::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Cost::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Cost, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Cost_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1 [json_name = "id"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Cost, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Cost, _impl_.id_)}},
    // double cost = 2 [json_name = "cost"];
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Cost, _impl_.cost_)}},
    // optional double time = 3 [json_name = "time"];
    {::_pbi::TcParser::FastF64S1,
     {25, 0, 0, PROTOBUF_FIELD_OFFSET(Cost, _impl_.time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(Cost, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double cost = 2 [json_name = "cost"];
    {PROTOBUF_FIELD_OFFSET(Cost, _impl_.cost_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // optional double time = 3 [json_name = "time"];
    {PROTOBUF_FIELD_OFFSET(Cost, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Cost::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:city.routing.v2.Cost)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // double cost = 2 [json_name = "cost"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_cost = this->_internal_cost();
  ::uint64_t raw_cost;
  memcpy(&raw_cost, &tmp_cost, sizeof(tmp_cost));
  if (raw_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_cost(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional double time = 3 [json_name = "time"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:city.routing.v2.Cost)
  return target;
}

::size_t Cost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:city.routing.v2.Cost)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double cost = 2 [json_name = "cost"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_cost = this->_internal_cost();
  ::uint64_t raw_cost;
  memcpy(&raw_cost, &tmp_cost, sizeof(tmp_cost));
  if (raw_cost != 0) {
    total_size += 9;
  }

  // optional double time = 3 [json_name = "time"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 9;
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Cost::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    Cost::MergeImpl
};
const ::google::protobuf::Message::ClassData*Cost::GetClassData() const { return &_class_data_; }


void Cost::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Cost*>(&to_msg);
  auto& from = static_cast<const Cost&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:city.routing.v2.Cost)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_cost = from._internal_cost();
  ::uint64_t raw_cost;
  memcpy(&raw_cost, &tmp_cost, sizeof(tmp_cost));
  if (raw_cost != 0) {
    _this->_internal_set_cost(from._internal_cost());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Cost::CopyFrom(const Cost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:city.routing.v2.Cost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Cost::IsInitialized() const {
  return true;
}

void Cost::InternalSwap(Cost* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cost, _impl_.id_)
      + sizeof(Cost::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Cost, _impl_.cost_)>(
          reinterpret_cast<char*>(&_impl_.cost_),
          reinterpret_cast<char*>(&other->_impl_.cost_));
}

::google::protobuf::Metadata Cost::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_city_2frouting_2fv2_2fcost_2eproto_getter, &descriptor_table_city_2frouting_2fv2_2fcost_2eproto_once,
      file_level_metadata_city_2frouting_2fv2_2fcost_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace routing
}  // namespace city
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
